var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AreaAccessors.html",[0,0.087,1,3.583]],["body/classes/AreaAccessors.html",[0,0.106,1,5.553,2,1.53,3,0.239,4,0.225,5,0.225,6,7.102,7,2.337,8,1.769,9,6.102,10,0.247,11,0.504,12,1.123,13,1.208,14,1.53,15,4.374,16,4.811,17,1.215,18,7.91,19,1.489,20,0.005,21,0.711,22,0.883,23,3.873,24,0.295,25,6.729,26,6.23,27,6.729,28,0.304,29,3.788,30,4.057,31,2.984,32,2.695,33,2.426,34,1.413,35,2.499,36,2.499,37,2.284,38,1.637,39,0.351,40,0.021,41,0.847,42,1.841,43,6.144,44,5.553,45,6.144,46,6.144,47,1.866,48,6.144,49,5.553,50,6.144,51,6.144,52,1.891,53,1.793,54,2.418,55,1.73,56,2.92,57,2.111,58,7.304,59,6.098,60,3.894,61,6.144,62,3.894,63,6.144,64,4.84,65,4.84,66,4.84,67,4.84,68,4.84,69,4.84,70,4.84,71,4.84,72,2.86,73,3.274,74,3.274,75,1.106,76,3.652,77,3.652,78,0.003,79,0.004,80,0.003]],["title/classes/AreaGridConfig.html",[0,0.087,81,4.574]],["body/classes/AreaGridConfig.html",[0,0.1,2,1.448,3,0.227,4,0.213,5,0.213,10,0.234,11,0.487,14,2.08,17,1.423,20,0.005,24,0.36,28,0.227,39,0.227,41,0.744,75,1.252,78,0.003,79,0.004,80,0.003,81,6.843,82,7.635,83,2.136,84,3.685,85,0.959,86,5.931,87,6.417,88,6.321,89,1.875,90,1.068,91,4.013,92,5.361,93,6.321,94,1.814,95,2.864,96,3.664,97,2.419,98,5.62,99,5.62,100,3.825,101,3.657,102,2.034,103,3.505,104,3.738,105,3.738,106,1.979,107,4.881,108,4.029,109,2.163,110,0.911,111,3.005,112,2.075,113,5.8,114,3.475,115,3.48,116,2.199,117,4.163,118,4.58,119,1.727,120,5.484,121,3.968,122,4.14,123,4.58,124,2.824,125,4.58,126,1.777,127,4.58,128,2.6,129,4.14,130,5.098,131,2.558,132,5.571,133,4.34,134,3.45,135,4.455,136,0.538,137,3.968,138,4.34,139,2.652,140,3.565,141,4.34,142,2.12,143,4.34,144,4.34,145,1.187,146,4.34,147,3.818,148,2.041,149,2.707,150,5.284,151,2.6,152,5.896,153,4.881,154,1.948,155,2.953]],["title/classes/AxisConfig.html",[0,0.087,113,3.305]],["body/classes/AxisConfig.html",[0,0.103,2,1.49,3,0.233,4,0.219,5,0.219,8,1.74,10,0.24,11,0.496,17,1.379,19,1.451,20,0.005,21,0.692,22,0.86,24,0.363,28,0.299,39,0.233,55,1.685,78,0.003,79,0.004,80,0.003,84,3.793,85,0.987,94,1.829,109,2.093,110,0.873,113,5.037,119,1.846,120,5.559,126,1.811,134,3.747,142,2.514,145,1.927,156,9.961,157,5.092,158,4.628,159,4.752,160,3.786,161,4.752,162,4.752,163,2.559,164,1.672,165,4.752,166,6.068,167,5.438,168,1.291,169,5.438,170,4.628,171,4.088,172,4.193,173,8.584,174,5.024,175,6.068,176,5.024,177,6.068,178,6.068,179,1.586,180,6.068,181,5.024,182,2.676,183,0.79,184,2.971,185,3.189,186,3.189,187,1.056,188,4.94,189,6.068,190,6.068,191,6.068,192,6.068,193,6.068,194,6.068,195,7.778,196,1.357,197,7.778,198,1.357,199,6.068,200,6.068,201,3.93]],["title/classes/BarAccessors.html",[0,0.087,202,3.19]],["body/classes/BarAccessors.html",[0,0.097,2,1.398,3,0.219,4,0.205,5,0.205,7,2.136,8,1.67,10,0.38,11,0.476,12,1.23,13,1.344,14,1.398,15,3.998,16,4.61,17,1.283,19,1.361,20,0.005,21,0.65,22,0.808,23,3.655,24,0.329,28,0.32,29,3.575,30,3.828,31,2.727,32,2.463,33,2.353,34,1.333,38,1.497,39,0.32,40,0.018,41,0.861,52,1.785,53,1.692,54,2.21,55,2.073,56,2.669,57,1.192,72,2.614,73,2.993,74,2.993,75,1.283,76,3.338,77,3.338,78,0.003,79,0.004,80,0.003,110,0.932,117,3.11,149,2.614,164,1.224,168,1.148,196,2.253,202,4.665,203,7.316,204,5.223,205,5.604,206,6.69,207,5.523,208,5.104,209,4.822,210,4.74,211,4.714,212,4.714,213,2.513,214,2.853,215,6.468,216,3.168,217,3.168,218,2.248,219,4.714,220,3.242,221,4.714,222,2.741,223,6.179,224,4.714,225,4.714,226,3.469,227,6.179,228,4.714,229,2.482,230,6.179,231,2.044,232,6.179,233,6.179,234,4.714,235,4.714,236,6.179,237,4.424,238,1.773,239,4.714,240,4.714,241,4.714,242,4.714,243,4.714,244,1.604,245,1.673,246,5.024,247,4.714,248,4.714,249,3.242,250,4.714,251,1.626,252,4.714,253,4.714,254,2.173]],["title/classes/BarGridConfig.html",[0,0.087,255,4.574]],["body/classes/BarGridConfig.html",[0,0.098,2,1.415,3,0.221,4,0.208,5,0.208,10,0.228,11,0.48,14,2.057,17,1.418,20,0.005,24,0.358,28,0.221,39,0.221,41,0.733,75,1.241,78,0.003,79,0.004,80,0.003,83,2.113,84,3.601,85,0.937,86,5.843,87,6.23,88,6.227,90,1.052,91,3.953,92,5.281,93,6.227,94,1.81,95,2.822,96,3.632,97,2.398,98,5.537,99,5.537,100,3.768,101,3.602,102,2.004,103,3.453,104,3.683,105,3.683,106,1.95,107,4.77,108,3.994,109,2.156,110,0.908,111,2.979,112,2.06,113,5.749,114,3.445,115,3.33,116,2.18,117,4.147,118,4.476,119,1.878,120,5.964,121,3.878,122,4.046,123,4.476,124,2.76,125,4.476,126,2.067,127,4.476,128,2.541,129,4.046,130,5.054,131,2.536,132,5.537,133,4.241,134,3.429,135,4.427,136,0.525,137,3.878,138,4.241,139,2.592,140,3.484,141,4.241,142,2.466,143,4.241,144,4.241,145,1.16,146,4.241,147,3.732,148,1.994,149,2.645,150,5.164,151,3.317,155,2.886,255,6.741,256,6.227,257,1.823,258,3.453,259,3.317,260,4.77,261,4.476,262,6.227,263,5.164,264,5.164,265,5.164,266,5.762]],["title/classes/BarHighlightStrategy.html",[0,0.087,267,3.19]],["body/classes/BarHighlightStrategy.html",[0,0.077,2,1.12,3,0.175,4,0.164,5,0.164,8,1.435,10,0.366,12,0.913,13,1.221,14,1.12,17,1.188,19,2.031,20,0.005,21,0.969,22,1.204,24,0.344,28,0.373,38,1.198,39,0.247,54,1.769,55,1.782,57,1.778,75,0.638,78,0.002,79,0.003,80,0.002,85,0.742,89,1.12,94,1.629,106,1.182,110,0.878,119,0.93,130,2.596,131,1.302,136,0.677,151,2.011,164,0.98,168,1.248,179,1.643,183,0.967,187,0.793,196,1.971,213,2.479,214,2.284,216,1.935,229,1.913,231,2.636,238,1.419,245,1.34,251,1.833,259,2.011,267,4.011,268,7.294,269,7.294,270,5.706,271,3.542,272,4.353,273,1.758,274,4.156,275,5.751,276,4.156,277,4.809,278,4.086,279,7.896,280,7.426,281,7.222,282,4.559,283,4.335,284,1.619,285,1.162,286,5.751,287,1.998,288,4.985,289,1.98,290,5.751,291,5.751,292,5.751,293,5.751,294,2.058,295,3.46,296,3.88,297,5.68,298,4.579,299,4.219,300,4.219,301,2.549,302,4.559,303,2.118,304,5.751,305,4.559,306,3.88,307,3.142,308,4.559,309,2.757,310,4.63,311,4.559,312,3.069,313,0.894,314,1.232,315,4.086,316,4.086,317,3.542,318,3.542,319,2.85,320,2.85,321,1.34,322,6.26,323,6.147,324,1.972,325,4.086,326,4.353,327,2.232,328,1.359,329,2.953,330,4.086,331,2.338,332,2.284,333,2.514,334,1.326,335,5.312,336,2.368,337,1.899,338,4.086,339,3.069,340,4.086,341,3.775,342,4.086,343,2.85,344,4.086,345,4.086,346,4.086,347,3.356,348,4.086,349,4.086,350,6.655,351,4.086,352,4.086,353,4.086,354,4.086,355,4.086,356,4.086,357,4.086,358,6.655,359,7.612,360,6.844,361,4.086,362,4.086,363,4.086,364,4.086,365,4.086,366,4.086,367,4.086,368,1.379,369,3.775,370,5.751,371,7.031,372,5.751,373,8.059,374,4.559,375,4.559,376,4.559,377,4.086,378,4.559,379,2.673,380,3.542,381,4.559,382,4.086,383,4.559,384,1.166,385,4.086,386,4.559,387,4.559,388,8.059,389,4.559,390,4.559,391,4.559,392,4.559,393,4.559,394,2.524,395,4.319,396,2.953,397,4.559,398,3.775,399,1.655,400,3.356,401,4.086,402,4.086]],["title/classes/BarHorizontalGridConfig.html",[0,0.087,403,4.574]],["body/classes/BarHorizontalGridConfig.html",[0,0.097,2,1.401,3,0.219,4,0.206,5,0.206,10,0.226,11,0.477,14,2.047,17,1.416,20,0.005,24,0.357,28,0.219,39,0.219,41,0.728,75,1.237,78,0.003,79,0.004,80,0.003,83,2.103,84,3.566,85,0.928,86,5.806,87,6.216,88,6.187,90,1.045,91,3.928,92,5.247,93,6.187,94,1.808,95,2.804,96,3.618,97,2.389,98,5.501,99,5.501,100,3.744,101,3.579,102,1.991,103,3.431,104,3.659,105,3.659,106,1.938,107,4.724,108,3.978,109,2.152,110,0.906,111,2.967,112,2.054,113,5.727,114,3.432,115,3.318,116,2.172,117,4.14,118,4.432,119,1.872,120,5.727,121,3.84,122,4.006,123,4.432,124,2.733,125,4.432,126,2.193,127,4.432,128,2.516,129,4.006,130,5.035,131,2.526,132,5.522,133,4.2,134,3.419,135,4.416,136,0.52,137,3.84,138,4.2,139,2.567,140,3.45,141,4.2,142,2.55,143,4.2,144,4.2,145,1.148,146,4.2,147,3.695,148,1.975,149,2.619,151,3.296,155,2.858,256,6.187,257,1.811,258,3.431,259,3.296,260,4.724,261,4.432,262,6.187,263,5.114,264,5.114,265,5.114,403,6.698,404,4.146,405,5.706,406,5.706,407,4.724,408,5.114]],["title/classes/BarSeriesHighlightStrategy.html",[0,0.087,409,4.574]],["body/classes/BarSeriesHighlightStrategy.html",[0,0.088,2,1.28,3,0.2,4,0.188,5,0.188,8,1.574,10,0.206,12,0.64,13,1.313,14,1.28,17,1.246,19,2.13,20,0.005,21,1.016,22,1.263,24,0.349,28,0.372,38,1.37,39,0.2,54,2.022,55,1.447,57,1.473,75,0.729,78,0.003,79,0.003,80,0.003,85,0.848,89,1.28,94,1.682,106,1.351,110,0.882,119,1.435,136,0.642,151,2.298,164,1.12,168,1.228,179,1.739,183,1.038,187,0.906,196,1.908,213,2.57,214,2.61,216,2.212,229,2.097,231,2.57,259,2.298,268,7.6,269,7.6,270,5.945,271,4.048,272,4.67,273,1.927,274,4.557,275,6.306,276,4.557,277,5.159,278,4.67,279,8.227,283,4.494,284,1.775,285,1.274,286,6.306,287,2.191,288,5.466,289,1.921,290,6.306,291,6.306,292,6.306,293,6.306,294,2.159,296,4.255,297,5.848,298,4.803,299,4.396,300,4.396,301,2.643,303,2.242,304,6.306,306,4.255,307,3.445,309,3.151,310,4.825,315,4.67,316,4.67,317,4.048,318,4.048,321,1.531,322,6.626,324,2.254,326,4.67,327,2.552,328,1.553,331,2.673,334,1.454,335,5.825,336,1.531,337,2.171,338,4.67,339,3.507,340,4.67,341,4.314,342,4.67,343,3.257,344,4.67,345,4.67,346,4.67,347,3.836,348,4.67,349,4.67,350,7.14,351,4.67,352,4.67,353,4.67,354,4.67,355,4.67,356,4.67,357,4.67,358,6.306,359,7.14,360,6.189,361,4.67,362,4.67,363,4.67,364,4.67,365,4.67,366,4.67,367,4.67,368,1.576,369,4.314,370,6.306,371,5.825,372,4.67,398,4.314,399,1.892,400,5.179,401,4.67,402,4.67,409,6.306,410,4.67,411,2.191,412,5.211,413,5.211,414,5.211,415,5.211]],["title/classes/BarStatusGridConfig.html",[0,0.087,416,4.574]],["body/classes/BarStatusGridConfig.html",[0,0.097,2,1.401,3,0.219,4,0.206,5,0.206,10,0.226,11,0.477,14,1.401,17,1.4,19,1.364,20,0.005,21,0.651,22,0.809,24,0.37,28,0.219,39,0.219,41,0.728,75,1.237,78,0.003,79,0.004,80,0.003,83,2.103,84,3.566,87,6.216,90,0.798,94,1.808,95,2.804,96,3.618,97,2.389,98,5.501,99,5.501,100,3.744,101,3.579,102,1.991,103,3.431,104,3.659,105,3.659,106,1.938,108,3.978,109,2.152,110,0.906,111,2.967,112,2.054,113,5.727,114,3.432,115,3.318,116,2.172,117,4.14,118,4.432,119,1.872,120,5.398,121,3.84,122,4.006,123,4.432,124,2.733,125,4.432,126,2.059,127,4.432,128,3.296,129,4.006,130,5.035,131,2.526,132,5.522,133,4.2,134,3.419,135,4.416,136,0.52,137,3.84,138,4.2,139,2.567,140,3.45,141,4.2,142,2.735,143,4.2,144,4.2,145,1.504,146,4.2,147,3.695,148,2.587,149,2.619,168,0.787,256,6.187,260,4.724,261,4.432,307,3.659,407,4.724,408,5.114,416,6.698,417,2.47,418,4.519,419,5.706,420,6.698,421,5.114,422,7.474,423,5.706,424,5.706,425,5.706,426,5.706,427,5.706,428,5.706,429,5.114,430,5.706,431,5.706,432,3.45]],["title/classes/BarTooltipsPlugin.html",[0,0.087,433,4.574]],["body/classes/BarTooltipsPlugin.html",[0,0.104,2,1.506,3,0.236,4,0.221,5,0.221,10,0.243,11,0.499,12,0.962,14,1.506,17,1.436,19,1.872,20,0.005,21,0.893,22,1.11,24,0.363,28,0.301,39,0.236,41,0.763,78,0.003,79,0.004,80,0.003,90,1.271,94,1.854,109,1.954,110,0.829,111,2.057,112,1.751,114,3.038,117,4.261,148,2.122,149,2.815,179,1.99,183,1.271,251,1.751,273,2.145,287,1.909,295,3.306,301,2.205,307,3.002,418,4.735,433,7.017,434,7.83,435,5.629,436,3.306,437,6.814,438,6.082,439,2.766,440,6.082,441,4.457,442,6.082,443,2.946,444,3.079,445,6.482,446,2.236,447,2.766,448,7.06,449,6.132,450,5.495,451,4.513,452,4.305,453,2.894,454,5.495,455,2.057,456,3.971,457,5.495,458,6.082,459,1.923,460,4.513,461,5.495,462,5.495,463,4.513,464,1.506,465,2.967,466,3.832,467,5.495,468,5.495,469,4.763,470,5.495,471,3.832,472,3.832,473,3.832,474,3.832,475,6.132,476,1.802]],["title/components/BasicLegendTileComponent.html",[477,2.251,478,2.826]],["body/components/BasicLegendTileComponent.html",[0,0.119,3,0.269,4,0.252,5,0.252,20,0.005,21,1.045,28,0.269,39,0.269,78,0.003,79,0.004,80,0.003,90,1.365,477,3.75,478,5.274,479,4.841,480,5.795,481,7.621,482,2.905,483,6.274,484,3.876,485,7.04,486,7.04,487,5.753,488,3.76,489,4.43,490,5.539,491,5.507,492,7.621,493,5.142,494,7.621,495,5.438,496,3.679,497,5.423,498,4.233,499,4.233,500,3.774,501,4.233,502,3.876,503,3.59,504,4.233,505,3.876,506,4.233,507,3.679,508,4.233,509,3.876,510,4.233,511,3.59,512,4.233,513,3.876,514,4.233,515,3.876,516,4.233,517,3.876,518,4.233,519,3.985,520,3.774,521,4.104,522,4.233]],["title/classes/Chart.html",[0,0.087,90,0.714]],["body/classes/Chart.html",[0,0.096,2,0.942,3,0.147,4,0.138,5,0.138,8,1.267,10,0.152,11,0.361,12,0.696,14,0.942,17,1.393,19,2.153,20,0.005,21,1.027,22,1.347,24,0.346,28,0.368,34,0.685,39,0.147,40,0.014,54,1.489,55,2.58,75,0.536,78,0.002,79,0.003,80,0.002,83,1.877,90,1.04,94,1.85,97,1.82,109,0.825,110,0.35,112,2.014,128,2.499,130,2.184,131,1.096,139,2.549,140,2.32,145,0.772,179,1.969,183,1.193,187,0.667,196,1.922,226,1.598,229,2.008,231,2.416,244,1.596,273,1.552,301,1.596,312,2.582,313,0.752,314,2.01,321,1.127,324,1.66,336,1.979,337,1.598,343,2.398,384,1.723,443,2.282,444,2.385,446,1.469,447,2.385,464,1.654,465,2.35,476,2.441,488,1.393,523,3.837,524,2.114,525,2.667,526,6.736,527,5.078,528,5.666,529,3.455,530,2.937,531,2.937,532,2.937,533,2.937,534,5.666,535,5.078,536,5.666,537,5.078,538,3.837,539,2.586,540,3.837,541,2.977,542,3.837,543,3.837,544,3.837,545,1.82,546,3.837,547,2.237,548,2.763,549,3.837,550,5.666,551,3.837,552,3.487,553,2.237,554,3.837,555,3.837,556,3.837,557,3.616,558,3.837,559,3.837,560,3.837,561,3.279,562,5.666,563,3.837,564,7.113,565,3.837,566,5.078,567,3.837,568,5.666,569,3.837,570,5.666,571,2.237,572,2.787,573,3.837,574,5.078,575,2.199,576,2.441,577,3.837,578,3.176,579,3.837,580,0.955,581,2.32,582,6.037,583,2.068,584,2.068,585,2.98,586,2.824,587,2.32,588,3.837,589,1.489,590,1.968,591,1.194,592,2.774,593,2.068,594,3.837,595,2.66,596,1.036,597,1.37,598,2.016,599,1.515,600,6.736,601,3.837,602,3.438,603,5.078,604,3.837,605,3.837,606,3.837,607,1.837,608,3.837,609,3.837,610,3.837,611,3.837,612,5.666,613,6.736,614,5.666,615,3.176,616,3.837,617,3.837,618,5.666,619,5.666,620,4.691,621,3.837,622,3.837,623,3.837,624,3.837,625,3.438,626,3.837,627,1.66,628,3.837,629,3.837,630,6.037,631,3.837,632,3.837,633,2.694,634,0.905,635,4.401,636,0.793,637,3.837,638,3.837,639,3.837,640,3.837,641,3.837,642,1.096,643,3.176,644,2.485,645,3.837,646,1.349,647,1.837,648,3.176,649,3.837,650,3.837,651,3.837,652,3.837,653,3.837,654,3.837,655,3.438,656,3.837,657,3.837,658,3.837,659,3.837,660,3.837,661,3.438,662,3.837,663,3.837,664,3.837,665,3.837,666,3.837,667,3.837,668,3.837,669,2.485,670,3.438,671,2.582,672,3.438,673,2.016,674,1.177,675,3.837,676,3.438,677,3.837,678,3.837,679,3.837,680,3.438,681,3.837,682,3.374,683,3.837,684,3.837,685,3.837,686,3.837,687,3.837,688,3.837,689,3.837,690,3.837,691,3.837,692,3.837,693,3.837,694,3.837,695,3.837,696,6.736,697,3.837,698,3.837,699,3.837,700,3.837,701,3.837,702,3.837,703,3.837,704,3.837,705,3.837,706,3.837,707,3.837,708,3.837,709,3.176,710,3.837,711,3.438,712,2.097,713,1.23,714,1.127,715,3.837,716,3.837,717,3.837,718,1.968,719,5.666,720,3.438,721,3.837,722,5.666,723,3.438,724,3.837,725,3.837,726,3.837,727,3.837,728,1.982,729,2.024,730,4.691,731,4.401,732,4.401,733,3.837,734,3.837,735,4.17,736,3.837,737,3.837,738,3.837,739,3.837]],["title/classes/ChartAssistRenderStateData.html",[0,0.087,740,3.435]],["body/classes/ChartAssistRenderStateData.html",[0,0.141,2,1.393,3,0.218,4,0.205,5,0.205,8,1.665,10,0.225,11,0.475,13,1.322,14,1.393,17,1.315,19,1.356,20,0.005,21,0.948,22,0.804,24,0.329,28,0.286,34,1.013,39,0.361,40,0.023,41,0.553,75,0.793,78,0.003,79,0.004,80,0.003,85,0.923,90,1.36,94,1.763,109,1.601,110,0.858,126,1.733,136,0.912,163,2.803,164,1.601,168,0.782,179,1.518,183,0.739,187,0.987,196,1.269,198,1.974,238,2.747,283,3.566,284,1.878,287,2.587,333,2.068,334,1.823,394,4.122,411,1.766,432,3.43,459,1.393,464,1.828,482,2.341,572,2.788,576,2.442,597,2.026,647,2.717,740,5.011,741,6.207,742,3.983,743,1.643,744,3.102,745,2.284,746,5.48,747,3.073,748,5.48,749,5.48,750,2.55,751,6.745,752,5.673,753,3.365,754,5.673,755,5.673,756,5.673,757,5.673,758,5.673,759,5.673,760,5.673,761,1.819,762,3.645,763,5.227,764,4.175,765,3.674,766,2.279,767,3.818,768,3.058,769,1.451,770,4.175,771,4.175,772,3.545,773,3.674,774,2.717,775,1.994,776,3.818,777,3.818,778,2.363,779,2.552,780,2.128,781,3.43,782,1.338,783,4.822,784,3.729,785,2.408,786,3.818,787,3.983,788,3.818,789,3.818,790,1.715,791,5.011,792,5.011,793,5.011,794,5.011,795,1.269,796,3.818,797,1.874,798,2.909,799,4.175,800,4.175,801,3.058,802,3.818,803,1.532]],["title/directives/ChartCollectionIdDirective.html",[520,2.751,804,3.965]],["body/directives/ChartCollectionIdDirective.html",[0,0.113,3,0.256,4,0.24,5,0.24,8,1.846,10,0.264,14,1.637,17,1.154,19,1.593,20,0.005,21,0.76,22,0.945,24,0.307,28,0.36,38,1.751,39,0.256,55,2.291,78,0.003,79,0.004,80,0.003,85,1.084,90,1.39,94,1.455,136,0.752,154,2.202,183,0.868,324,2.883,459,2.026,477,3.639,479,4.697,484,3.69,487,4.568,496,3.503,500,4.448,519,3.794,520,4.448,521,5.49,766,3.316,769,2.11,775,2.901,795,1.846,804,7.276,805,5.804,806,7.42,807,3.181,808,6.664,809,2.607,810,8.251,811,4.133,812,8.251,813,8.251,814,8.032,815,5.343,816,8.251,817,4.336,818,5.157,819,8.251,820,8.251,821,3.202,822,8.251,823,6.962,824,4.04,825,6.664,826,3.634,827,7.318,828,8.251,829,6.664,830,4.232,831,5.973,832,4.485,833,3.124,834,3.907,835,6.664,836,5.177,837,6.664,838,6.664,839,5.973,840,6.664,841,5.177,842,6.664]],["title/injectables/ChartCollectionService.html",[827,3.757,843,3.965]],["body/injectables/ChartCollectionService.html",[0,0.122,3,0.276,4,0.259,5,0.259,10,0.285,17,1.005,19,1.719,20,0.005,21,0.82,22,1.02,24,0.268,28,0.356,39,0.276,55,1.997,78,0.004,79,0.004,80,0.004,85,1.17,94,1.633,112,1.608,136,0.877,179,1.466,196,1.608,273,2.367,285,1.565,319,4.494,320,4.494,496,3.779,766,3.473,769,2.21,782,1.696,804,6.713,805,5.597,806,7.155,807,3.25,827,6.361,839,6.444,843,6.713,844,5.953,845,7.19,846,6.361,847,8.642,848,6.001,849,7.745,850,4.432,851,8.642,852,8.642,853,8.642,854,8.642,855,7.19,856,9.266,857,7.19,858,8.642,859,7.19]],["title/components/ChartComponent.html",[477,2.251,500,2.751]],["body/components/ChartComponent.html",[0,0.093,3,0.21,4,0.197,5,0.197,8,1.623,10,0.216,11,0.463,12,0.892,14,1.34,17,1.215,19,1.304,20,0.005,21,0.991,22,1.156,24,0.304,28,0.348,32,3.138,38,1.434,39,0.21,54,2.117,55,2.512,78,0.003,79,0.004,80,0.003,90,1.39,94,1.764,109,1.173,110,0.497,112,1.623,183,0.71,201,3.533,231,1.987,324,2.36,339,3.671,384,1.395,464,2.134,477,3.2,478,3.02,479,4.13,482,2.296,484,3.02,487,5.573,488,3.633,489,2.406,490,3.299,496,2.867,497,4.946,498,3.299,499,3.299,500,5.015,501,3.299,502,3.02,503,2.798,504,3.299,505,3.02,506,3.299,507,2.867,508,3.299,509,3.02,510,3.299,511,2.798,512,3.299,513,3.02,514,3.299,515,3.02,516,3.299,517,3.02,518,3.299,519,3.105,520,2.941,521,3.198,522,3.299,524,1.453,750,2.226,814,7.306,823,6.333,824,3.552,826,3.163,830,3.721,841,4.238,860,5.455,861,7.306,862,6.749,863,5.487,864,5.487,865,6.006,866,7.255,867,8.152,868,8.152,869,9.493,870,5.455,871,6.101,872,9.493,873,8.152,874,6.101,875,5.455,876,7.255,877,5.455,878,5.455,879,5.455,880,4.883,881,6.502,882,5.455,883,4.889,884,6.502,885,4.889,886,3.83,887,4.889,888,2.634,889,4.015,890,5.455,891,2.798,892,8.152,893,4.889,894,5.455,895,5.455,896,5.455,897,3.671,898,5.455,899,7.255,900,5.455,901,5.455,902,5.455,903,5.455,904,7.255,905,4.516,906,5.455,907,7.255,908,7.255,909,5.455,910,5.455,911,3.671,912,5.455,913,5.455,914,5.455,915,5.455,916,3.671,917,5.455,918,5.455,919,5.455,920,5.455,921,5.455,922,7.255,923,5.455,924,5.455,925,4.889,926,5.455,927,5.455,928,4.889,929,5.455,930,2.013,931,5.455,932,5.455]],["title/components/ChartDonutContentComponent.html",[477,2.251,502,2.826]],["body/components/ChartDonutContentComponent.html",[0,0.106,3,0.239,4,0.225,5,0.225,8,1.769,10,0.247,11,0.504,17,1.106,20,0.005,21,0.991,24,0.295,28,0.351,39,0.239,55,1.73,78,0.003,79,0.004,80,0.003,90,1.419,94,1.7,321,1.831,476,2.833,477,3.488,478,3.449,479,4.503,482,2.448,484,3.449,487,5.673,488,3.703,489,2.748,490,3.767,491,5.122,493,4.783,496,3.274,497,5.204,498,3.767,499,3.767,500,3.359,501,3.767,502,5.061,503,5.276,504,3.767,505,3.449,506,3.767,507,3.274,508,3.767,509,3.449,510,3.767,511,3.195,512,3.767,513,3.449,514,3.767,515,3.449,516,3.767,517,3.449,518,3.767,519,3.547,520,3.359,521,3.652,522,3.767,779,3.558,805,5.628,824,3.873,830,4.057,863,5.849,864,5.849,880,5.324,897,4.193,916,4.193,933,7.789,934,6.23,935,7.812,936,7.91,937,7.91,938,8.193,939,7.195,940,6.23,941,3.421,942,5.359,943,6.23,944,2.079,945,7.089,946,5.584,947,5.584,948,6.23,949,5.584,950,6.23,951,7.91,952,6.23,953,5.584,954,6.23,955,6.23]],["title/classes/ChartDonutContentPlugin.html",[0,0.087,939,4.225]],["body/classes/ChartDonutContentPlugin.html",[0,0.097,2,1.401,3,0.219,4,0.206,5,0.206,10,0.226,11,0.477,17,1.377,20,0.005,24,0.278,28,0.353,39,0.219,41,0.728,55,1.585,75,1.045,78,0.003,79,0.004,80,0.003,85,0.928,90,1.237,94,1.834,109,1.607,110,0.682,111,2.796,112,2.054,116,2.047,117,3.825,119,1.985,151,3.296,168,1.03,179,1.921,183,1.25,187,0.993,196,1.864,231,2.047,273,2.047,301,2.586,303,1.5,319,3.566,320,3.566,321,1.677,336,1.677,436,3.076,443,2.945,444,2.673,446,2.161,447,3.078,464,1.401,465,3.076,466,3.566,471,3.566,472,3.566,473,3.566,474,3.566,476,2.449,503,4.922,587,3.45,607,2.733,620,4.724,634,1.966,636,1.722,774,3.579,779,3.749,935,8.289,938,7.47,939,6.187,942,5.184,944,2.476,953,5.114,956,7.6,957,5.806,958,5.501,959,6.698,960,8.335,961,5.706,962,5.706,963,5.806,964,5.706,965,5.706,966,6.187,967,5.114,968,1.944,969,5.706,970,5.706,971,5.706,972,5.706,973,5.706,974,5.706,975,5.114,976,5.114,977,5.706,978,5.706,979,5.706,980,5.706,981,5.706,982,5.706,983,5.706,984,5.706,985,5.706,986,5.706,987,8.844,988,8.844,989,5.706]],["title/components/ChartMarkerComponent.html",[477,2.251,505,2.826]],["body/components/ChartMarkerComponent.html",[0,0.088,3,0.198,4,0.186,5,0.186,8,1.564,10,0.205,11,0.446,14,1.268,17,1.365,19,1.235,20,0.005,21,0.969,22,0.732,24,0.355,28,0.327,38,1.357,39,0.198,52,1.896,53,2.013,54,2.004,55,1.942,78,0.003,79,0.003,80,0.003,90,1.377,94,1.779,109,1.827,110,0.723,112,1.155,121,4.707,131,1.475,136,0.89,145,1.408,151,3.748,154,2.311,183,0.911,231,2.328,321,1.518,377,4.629,477,3.085,478,2.86,479,3.982,482,2.233,484,2.86,487,5.529,488,3.602,489,2.278,490,3.123,491,4.53,493,4.229,496,2.715,497,4.838,498,3.123,499,3.123,500,2.785,501,3.123,502,2.86,503,2.649,504,3.123,505,4.705,506,3.123,507,2.715,508,3.123,509,2.86,510,3.123,511,2.649,512,3.123,513,2.86,514,3.123,515,2.86,516,3.123,517,2.86,518,3.123,519,2.94,520,2.785,521,3.028,522,3.123,524,1.376,582,6.268,634,1.871,636,1.639,673,4.168,735,5.148,805,6.32,818,3.228,823,6.16,824,3.425,830,4.555,841,4.012,863,5.337,864,5.337,871,5.568,874,5.967,880,4.707,897,3.476,911,3.476,916,3.476,958,3.802,990,8.746,991,5.165,992,6.994,993,6.994,994,7.93,995,7.93,996,7.93,997,7.93,998,4.276,999,5.165,1000,5.148,1001,5.165,1002,5.165,1003,2.702,1004,5.165,1005,5.165,1006,8.499,1007,5.165,1008,4.276,1009,5.165,1010,5.165,1011,5.165,1012,5.165,1013,4.276,1014,5.165,1015,5.165,1016,9.363,1017,4.629,1018,5.165,1019,2.587,1020,4.276,1021,5.165,1022,5.165,1023,5.165,1024,5.165,1025,5.165,1026,6.994,1027,5.165,1028,5.165,1029,5.165,1030,5.165,1031,5.165,1032,5.165,1033,5.165,1034,5.165,1035,5.165,1036,5.165,1037,5.165,1038,6.994,1039,3.626,1040,5.165,1041,5.165,1042,5.165,1043,5.165,1044,5.165,1045,5.165,1046,5.165,1047,5.165,1048,5.165,1049,6.994,1050,5.165,1051,5.165,1052,4.629]],["title/classes/ChartPalette.html",[0,0.087,1053,4.225]],["body/classes/ChartPalette.html",[0,0.111,2,1.605,3,0.251,4,0.236,5,0.236,8,1.824,10,0.259,14,1.605,17,1.301,19,1.563,20,0.005,21,0.746,22,0.927,24,0.243,28,0.38,39,0.251,52,2.289,55,2.468,78,0.003,79,0.004,80,0.003,94,1.566,112,1.987,128,2.883,136,0.848,164,1.753,184,3.201,187,1.137,196,2.081,231,2.233,313,1.281,317,5.078,318,5.078,815,5.754,1053,6.75,1054,9.572,1055,6.537,1056,3.333,1057,3.508,1058,3.508,1059,3.508,1060,7.307,1061,3.386,1062,7.356,1063,2.43,1064,6.537,1065,2.648,1066,6.537,1067,6.537,1068,6.537,1069,6.537,1070,6.537,1071,6.537,1072,5.859,1073,5.859,1074,5.859,1075,5.078,1076,5.859,1077,6.75,1078,5.412,1079,6.75,1080,6.537,1081,6.537,1082,6.537,1083,6.537,1084,5.859,1085,6.537,1086,8.885,1087,8.153,1088,6.537,1089,5.412,1090,5.859,1091,5.412,1092,6.537,1093,6.537,1094,8.153,1095,6.537,1096,5.412,1097,6.537,1098,5.859,1099,5.859,1100,6.537,1101,6.537,1102,6.537]],["title/classes/ChartPlugin.html",[0,0.087,465,1.612]],["body/classes/ChartPlugin.html",[0,0.121,2,1.749,3,0.274,4,0.257,5,0.257,8,1.922,10,0.282,11,0.548,14,2.266,17,1.393,20,0.005,24,0.265,28,0.274,39,0.274,78,0.004,79,0.004,80,0.004,90,1.29,94,1.845,179,1.954,183,1.324,187,1.238,220,4.053,273,2.353,436,3.838,443,2.94,444,3.072,446,2.484,447,3.072,464,2.266,465,2.714,548,2.831,1103,10.079,1104,7.12,1105,7.12,1106,7.12,1107,7.12,1108,7.12,1109,7.12]],["title/components/ChartPopoverComponent.html",[477,2.251,507,2.682]],["body/components/ChartPopoverComponent.html",[0,0.094,3,0.212,4,0.199,5,0.199,8,1.637,10,0.219,11,0.467,14,1.357,17,1.306,19,1.321,20,0.005,21,0.996,22,0.784,24,0.348,28,0.366,38,1.453,39,0.212,54,2.145,55,2.279,78,0.003,79,0.004,80,0.003,90,1.393,91,2.905,94,1.646,112,1.835,151,2.438,183,0.72,231,1.514,301,2.311,321,1.624,384,1.414,443,1.696,446,2.127,453,1.855,476,2.566,477,3.228,478,3.06,479,4.166,482,2.311,484,3.06,487,5.583,488,3.64,489,2.438,490,3.342,491,4.74,493,4.426,496,2.905,497,4.972,498,3.342,499,3.342,500,2.98,501,3.342,502,3.06,503,2.835,504,3.342,505,3.06,506,3.342,507,4.591,508,3.342,509,3.06,510,3.342,511,2.835,512,3.342,513,3.06,514,3.342,515,3.06,516,3.342,517,3.06,518,3.342,519,3.147,520,2.98,521,3.24,522,3.342,524,2.488,583,2.98,584,2.98,636,1.142,661,4.954,735,5.387,805,6.168,824,3.584,830,4.208,861,7.354,863,5.523,864,5.523,871,6.38,874,6.133,880,4.926,889,6.04,893,4.954,897,3.72,916,3.72,942,4.29,944,1.453,946,4.954,947,4.954,949,4.954,998,4.576,1000,5.387,1008,4.576,1013,4.576,1052,4.954,1110,8.536,1111,5.527,1112,7.399,1113,7.319,1114,7.319,1115,6.56,1116,5.527,1117,6.04,1118,5.527,1119,7.354,1120,5.527,1121,6.793,1122,5.527,1123,5.527,1124,8.206,1125,7.319,1126,5.527,1127,6.56,1128,4.068,1129,7.319,1130,5.527,1131,7.319,1132,3.455,1133,3.455,1134,5.527,1135,5.527,1136,5.527,1137,7.319,1138,6.059,1139,5.527,1140,5.527,1141,5.527,1142,3.06,1143,4.294,1144,4.294,1145,4.294,1146,5.527,1147,7.319,1148,4.576,1149,5.527,1150,5.527,1151,5.527,1152,5.527,1153,5.527,1154,5.527]],["title/classes/ChartPopoverPlugin.html",[0,0.087,1117,3.757]],["body/classes/ChartPopoverPlugin.html",[0,0.071,2,1.029,3,0.161,4,0.151,5,0.151,10,0.166,11,0.385,12,1.011,14,1.029,17,1.378,19,1.002,20,0.005,21,0.478,22,0.594,24,0.337,28,0.354,39,0.232,40,0.01,41,0.589,55,1.968,57,0.877,78,0.002,79,0.003,80,0.002,85,0.681,89,1.029,90,1.15,92,2.941,94,1.829,109,2.009,110,0.781,111,2.874,112,2.022,115,1.572,116,2.019,117,3.426,119,1.93,126,0.975,142,1.678,148,2.684,149,1.923,179,1.747,183,1.177,187,0.729,196,0.937,229,1.801,231,2.418,257,1.717,273,1.655,294,1.015,301,2.546,321,1.231,324,1.812,384,1.984,418,2.533,436,2.259,439,2.487,443,2.773,444,2.831,446,1.837,447,2.272,453,2.759,456,5.023,459,2.261,464,1.029,465,2.856,466,2.618,471,2.618,472,2.618,473,2.618,474,2.618,476,2.594,507,3.175,583,2.259,584,2.259,587,2.533,596,1.632,597,1.496,607,2.006,627,1.812,634,1.672,636,1.464,673,2.202,682,2.098,743,1.564,750,1.285,769,1.071,798,2.149,824,2.958,911,2.82,942,4.154,944,2.038,956,7.836,1020,3.468,1039,4.242,1112,7.911,1117,4.447,1132,2.618,1133,2.618,1138,3.468,1144,4.693,1155,4.693,1156,5.548,1157,4.693,1158,5.415,1159,3.175,1160,2.893,1161,5.415,1162,4.447,1163,4.693,1164,4.693,1165,5.866,1166,3.923,1167,5.866,1168,5.866,1169,5.866,1170,6.859,1171,4.189,1172,4.189,1173,6.654,1174,2.247,1175,5.002,1176,3.755,1177,3.468,1178,4.693,1179,5.002,1180,5.002,1181,5.866,1182,2.637,1183,3.542,1184,4.189,1185,4.189,1186,5.504,1187,4.189,1188,4.189,1189,4.189,1190,4.189,1191,2.618,1192,2.618,1193,3.254,1194,3.254,1195,2.941,1196,4.693,1197,2.059,1198,3.468,1199,2.259,1200,3.468,1201,3.755,1202,3.755,1203,4.447,1204,3.254,1205,2.456,1206,2.618,1207,2.941,1208,3.755,1209,3.755,1210,2.82,1211,2.941,1212,3.755,1213,3.254,1214,1.572,1215,1.572,1216,3.084,1217,3.755,1218,3.755,1219,3.755,1220,3.755,1221,3.755,1222,3.755,1223,3.755,1224,3.755,1225,3.755,1226,3.755,1227,3.755,1228,4.447,1229,3.084,1230,4.066,1231,3.084,1232,1.521,1233,2.713,1234,5.866,1235,3.755,1236,5.002,1237,3.468,1238,3.084,1239,3.468,1240,3.254,1241,3.755,1242,3.755,1243,1.598,1244,3.084,1245,3.468,1246,3.755,1247,3.755,1248,3.755,1249,3.755,1250,3.755,1251,4.693,1252,3.254,1253,3.254,1254,3.254,1255,3.755,1256,3.755,1257,3.755,1258,3.755,1259,3.755,1260,3.254,1261,5.866,1262,3.913,1263,1.496,1264,3.755,1265,1.496,1266,2.533,1267,3.755,1268,5.504,1269,3.755,1270,3.755,1271,3.755,1272,3.755,1273,3.755]],["title/components/ChartTooltipComponent.html",[477,2.251,509,2.826]],["body/components/ChartTooltipComponent.html",[0,0.113,3,0.256,4,0.24,5,0.24,10,0.264,17,0.932,20,0.005,21,1.022,24,0.248,28,0.317,39,0.256,78,0.003,79,0.004,80,0.003,90,1.433,119,1.682,336,1.958,477,3.639,478,3.69,479,4.697,482,2.524,484,3.69,487,5.72,488,3.737,489,2.939,490,4.03,491,5.343,493,4.989,496,3.503,497,5.332,498,4.03,499,4.03,500,3.593,501,4.03,502,3.69,503,3.418,504,4.03,505,3.69,506,4.03,507,3.503,508,4.03,509,5.185,510,4.03,511,3.418,512,4.03,513,3.69,514,4.03,515,3.69,516,4.03,517,3.69,518,4.03,519,3.794,520,3.593,521,3.907,522,4.03,728,2.495,805,5.343,824,4.04,830,4.232,889,6.597,1119,8.032,1200,5.517,1274,6.41,1275,6.664,1276,7.395,1277,7.395,1278,5.553,1279,8.251,1280,8.251,1281,6.664,1282,6.664,1283,6.664,1284,6.664,1285,5.973,1286,6.664,1287,6.664,1288,6.664,1289,5.804,1290,8.251,1291,6.664]],["title/components/ChartTooltipsComponent.html",[477,2.251,511,2.618]],["body/components/ChartTooltipsComponent.html",[0,0.069,3,0.156,4,0.146,5,0.146,8,1.32,10,0.276,11,0.376,13,0.78,14,0.996,17,1.298,19,1.411,20,0.005,21,0.926,22,0.837,24,0.302,28,0.361,38,1.066,39,0.156,40,0.01,41,0.395,42,1.374,47,1.392,54,1.574,55,2.665,75,1.068,78,0.002,79,0.003,80,0.002,90,1.329,94,1.657,109,1.269,110,0.538,111,1.361,112,2.043,114,1.574,116,0.996,126,1.619,128,1.788,136,0.817,142,2.122,151,2.602,168,1.205,179,0.827,183,0.528,196,1.816,231,2.604,238,2.959,244,1.142,273,1.616,301,2.386,312,2.729,313,1.363,314,1.095,321,1.192,334,1.219,337,1.689,435,4.966,437,4.682,452,2.847,476,2.245,477,2.602,478,2.245,479,3.359,482,1.959,484,2.245,487,5.313,488,3.451,489,1.788,490,2.452,491,3.821,493,3.568,496,2.131,497,4.349,498,2.452,499,2.452,500,2.186,501,2.452,502,2.245,503,2.08,504,2.452,505,2.245,506,2.452,507,2.131,508,2.452,509,2.245,510,2.452,511,3.918,512,2.452,513,2.245,514,2.452,515,2.245,516,2.452,517,2.245,518,2.452,519,3.96,520,2.186,521,2.377,522,2.452,524,1.08,580,1.009,581,2.452,583,2.186,584,2.186,607,3.331,627,1.754,634,1.392,636,1.219,735,2.985,750,1.244,769,1.509,805,5.802,824,2.889,830,3.568,863,4.682,864,4.682,871,4.884,874,5.364,880,3.972,889,5.12,897,2.729,916,2.729,944,1.066,968,2.011,998,3.357,1000,4.343,1008,3.357,1039,4.884,1148,3.357,1204,3.15,1233,2.626,1244,2.985,1268,5.934,1274,6.959,1278,6.245,1292,3.634,1293,5.289,1294,5.289,1295,6.234,1296,6.234,1297,5.289,1298,4.055,1299,4.055,1300,4.055,1301,5.289,1302,5.759,1303,4.055,1304,4.055,1305,4.055,1306,6.234,1307,5.289,1308,4.055,1309,3.634,1310,5.289,1311,3.634,1312,7.836,1313,5.289,1314,5.289,1315,3.634,1316,3.634,1317,3.15,1318,2.985,1319,2.334,1320,3.634,1321,6.324,1322,3.357,1323,4.885,1324,3.634,1325,3.634,1326,1.281,1327,3.634,1328,3.634,1329,3.634,1330,3.634,1331,3.634,1332,3.634,1333,3.634,1334,5.289,1335,3.634,1336,3.634,1337,3.634,1338,3.634,1339,3.634,1340,3.634,1341,3.634,1342,3.357,1343,3.634,1344,5.289,1345,5.289,1346,4.885,1347,5.289,1348,5.289,1349,3.634,1350,5.289,1351,3.634,1352,3.634,1353,6.234,1354,3.634,1355,3.634,1356,5.289,1357,3.634,1358,3.634,1359,5.289,1360,3.634,1361,6.234,1362,5.289,1363,3.634,1364,3.634,1365,3.634,1366,3.634,1367,2.251,1368,3.634,1369,2.535,1370,3.634,1371,3.634,1372,6.846,1373,3.634,1374,3.634,1375,5.289,1376,3.634,1377,3.634,1378,3.634,1379,3.634,1380,3.357,1381,3.634,1382,3.15,1383,3.634,1384,3.634,1385,3.634,1386,3.357,1387,3.634,1388,3.634,1389,3.634,1390,3.634,1391,3.634,1392,3.634,1393,3.634,1394,5.289,1395,5.289,1396,5.289,1397,6.234,1398,3.634,1399,3.634,1400,3.634,1401,3.357,1402,3.634,1403,3.357,1404,2.729,1405,3.634,1406,3.634,1407,5.289,1408,3.634,1409,3.634,1410,3.634,1411,3.634,1412,3.634,1413,3.634,1414,3.634,1415,3.634,1416,3.634,1417,3.634,1418,3.634,1419,3.634,1420,3.634,1421,3.634,1422,3.634,1423,3.634]],["title/classes/ChartTooltipsPlugin.html",[0,0.087,437,3.435]],["body/classes/ChartTooltipsPlugin.html",[0,0.066,2,0.949,3,0.148,4,0.139,5,0.139,10,0.153,11,0.363,12,1.058,14,0.949,17,1.352,19,1.362,20,0.005,21,0.65,22,0.808,24,0.321,28,0.353,34,0.69,39,0.306,40,0.009,41,0.659,42,1.575,47,1.596,55,1.879,57,0.809,78,0.002,79,0.003,80,0.002,85,0.927,90,1.113,94,1.813,109,1.711,110,0.681,111,2.965,112,1.926,114,3.43,115,2.137,116,0.949,117,3.316,119,1.162,131,1.627,136,0.352,142,1.582,149,1.774,154,1.882,168,1.098,179,1.756,183,1.175,196,1.513,201,2.503,216,2.418,217,3.169,231,2.579,238,1.203,251,1.932,259,1.704,273,1.56,285,1.031,287,2.324,294,0.936,301,2.345,307,1.892,321,1.135,324,1.672,333,1.073,334,1.721,336,1.674,404,2.67,411,1.773,435,5.867,436,2.083,437,3.834,438,5.255,439,2.552,440,5.255,441,5.031,442,5.255,443,2.712,444,2.761,445,4.716,446,1.754,447,2.169,451,4.193,452,3.999,453,2.89,455,1.911,456,4.835,458,5.799,459,1.833,460,4.193,463,4.193,464,0.949,465,2.792,466,2.415,469,4.425,471,2.415,472,2.415,473,2.415,474,2.415,476,1.988,511,2.921,524,1.518,572,1.297,576,1.674,580,0.962,581,2.337,583,2.083,584,2.083,586,2.844,587,2.337,596,2.017,597,1.38,607,2.728,634,0.912,636,0.798,673,2.031,682,3.389,750,1.186,761,1.239,766,2.718,781,4.514,801,2.083,803,1.044,824,2.789,886,2.713,888,1.403,930,1.426,944,2.189,1132,2.415,1133,2.415,1143,6.866,1155,4.425,1156,4.381,1157,4.425,1163,4.425,1164,4.425,1182,1.239,1183,2.265,1193,3.002,1194,3.002,1195,2.713,1197,2.305,1210,4.553,1211,2.713,1216,2.844,1228,4.193,1229,2.844,1230,2.601,1231,2.844,1232,1.403,1233,2.503,1238,2.844,1240,3.002,1251,4.425,1252,3.002,1253,3.002,1254,3.002,1260,3.002,1278,5.796,1319,2.505,1424,7.596,1425,3.865,1426,3.865,1427,6.063,1428,2.137,1429,3.865,1430,3.865,1431,3.865,1432,3.865,1433,3.865,1434,3.865,1435,3.865,1436,3.463,1437,6.59,1438,3.002,1439,3.199,1440,1.45,1441,2.844,1442,6.184,1443,4.716,1444,3.199,1445,3.199,1446,3.002,1447,4.716,1448,5.105,1449,3.463,1450,1.936,1451,3.463,1452,6.181,1453,6.181,1454,6.181,1455,6.181,1456,6.184,1457,5.105,1458,3.463,1459,3.463,1460,5.105,1461,3.463,1462,3.463,1463,3.463,1464,3.463,1465,6.063,1466,3.463,1467,3.463,1468,3.463,1469,4.75,1470,5.255,1471,3.463,1472,3.463,1473,3.463,1474,3.463,1475,3.463,1476,3.002,1477,3.002,1478,5.105,1479,3.463,1480,3.463,1481,3.002,1482,3.463,1483,3.463,1484,3.463,1485,6.181,1486,3.463,1487,3.463,1488,3.463,1489,3.463,1490,3.463,1491,3.463,1492,3.463,1493,3.463,1494,3.463,1495,3.463,1496,3.463,1497,3.463,1498,1.892,1499,2.844,1500,3.463,1501,3.199,1502,3.463,1503,3.199,1504,3.463,1505,3.463,1506,3.463,1507,3.463,1508,2.415,1509,3.002,1510,2.415,1511,3.002,1512,3.002,1513,5.105,1514,3.199,1515,2.844,1516,3.463,1517,3.463,1518,3.463,1519,3.463]],["title/classes/DataSeries.html",[0,0.087,222,1.437]],["body/classes/DataSeries.html",[0,0.117,2,1.699,3,0.266,4,0.249,5,0.249,8,1.888,10,0.274,11,0.538,12,1.196,13,1.115,14,1.699,17,1.36,19,1.654,20,0.005,21,1.082,22,0.981,24,0.369,28,0.266,33,1.654,34,1.236,37,1.818,39,0.266,56,3.243,57,1.768,78,0.003,79,0.004,80,0.003,94,1.823,109,1.487,110,0.631,128,3.051,136,0.865,164,2.04,187,1.203,213,2.711,215,5.373,222,2.566,249,3.938,307,3.387,769,2.33,803,2.28,911,4.656,1520,9.896,1521,6.917,1522,8.442,1523,8.442,1524,6.917,1525,6.917,1526,6.917,1527,6.199,1528,6.917,1529,5.727,1530,6.917,1531,6.917,1532,6.917,1533,6.917,1534,3.83,1535,6.917,1536,6.199,1537,6.917,1538,4.857]],["title/classes/DimensionConfig.html",[0,0.087,140,3.086]],["body/classes/DimensionConfig.html",[0,0.075,2,1.092,3,0.171,4,0.16,5,0.16,8,1.411,10,0.176,11,0.402,17,1.396,19,2.195,20,0.005,21,1.047,22,1.302,24,0.357,28,0.171,39,0.171,55,1.751,75,1.115,78,0.002,79,0.003,80,0.002,84,2.78,94,1.857,108,4.043,109,1.809,110,0.918,111,2.932,114,3.391,115,3.279,116,2.146,119,2.06,124,3.509,126,1.855,134,3.772,139,4.634,140,3.813,142,2.55,160,3.231,168,1.433,169,3.987,176,3.682,179,1.972,187,0.774,188,5.002,196,2.054,231,1.727,273,1.727,295,4.297,634,2.166,636,1.897,1539,10.03,1540,4.056,1541,4.056,1542,3.95,1543,5.084,1544,5.084,1545,4.448,1546,4.448,1547,4.448,1548,3.987,1549,4.448,1550,4.413,1551,4.448,1552,4.448,1553,4.448,1554,4.413,1555,4.448,1556,4.448,1557,4.448,1558,4.413,1559,4.448,1560,4.448,1561,4.448,1562,4.413,1563,4.448,1564,4.448,1565,4.448,1566,4.448,1567,4.448,1568,4.448,1569,4.448,1570,4.448,1571,7.326,1572,7.971,1573,7.326,1574,7.971,1575,7.326,1576,7.326,1577,4.448,1578,4.448,1579,6.306,1580,7.326,1581,7.326,1582,4.448,1583,4.448]],["title/classes/DonutGaugeRenderingUtil.html",[0,0.087,1584,4.574]],["body/classes/DonutGaugeRenderingUtil.html",[0,0.116,2,1.675,3,0.262,4,0.246,5,0.246,10,0.27,12,0.838,17,0.954,19,1.631,20,0.005,21,0.778,22,0.967,24,0.254,28,0.348,39,0.262,55,1.894,78,0.003,79,0.004,80,0.003,94,1.202,96,3.863,110,0.763,119,1.391,151,3.993,153,6.929,168,1.336,179,1.391,196,2.025,231,2.654,273,2.292,313,1.64,336,2.004,455,2.808,765,4.417,1538,5.876,1584,7.501,1585,8.369,1586,3.248,1587,6.501,1588,6.82,1589,8.369,1590,8.369,1591,9.863,1592,6.82,1593,7.496,1594,4.789,1595,4.124,1596,6.82,1597,6.112,1598,9.055,1599,6.82,1600,8.369,1601,6.82,1602,6.82,1603,6.82,1604,6.82,1605,6.82,1606,6.82,1607,6.82,1608,8.369,1609,8.369,1610,2.852,1611,6.82,1612,6.82,1613,6.82,1614,3.998,1615,6.82,1616,6.82,1617,6.82,1618,6.82]],["title/classes/EventBus.html",[0,0.087,525,1.543]],["body/classes/EventBus.html",[0,0.125,2,1.804,3,0.282,4,0.265,5,0.265,10,0.291,17,1.224,19,1.756,20,0.005,21,0.838,22,1.041,24,0.273,28,0.336,39,0.282,55,2.04,78,0.004,79,0.004,80,0.004,94,1.769,112,1.643,136,0.902,179,1.785,183,0.957,196,1.643,273,2.397,301,2.785,321,2.158,443,2.97,525,2.647,580,1.828,581,4.441,782,2.065,1619,9.35,1620,7.344,1621,8.753,1622,7.344,1623,8.753,1624,7.344,1625,7.344,1626,7.344,1627,9.35,1628,7.344,1629,7.344]],["title/classes/Grid.html",[0,0.087,83,1.288]],["body/classes/Grid.html",[0,0.122,2,1.317,3,0.103,4,0.096,5,0.096,8,1.199,10,0.106,11,0.273,17,1.322,19,1.715,20,0.005,21,1.037,22,1.017,24,0.342,28,0.332,39,0.164,44,4.308,49,4.308,55,1.189,57,0.559,75,0.858,78,0.001,79,0.002,80,0.001,83,2.294,85,0.434,89,2.209,90,1.16,94,1.808,95,1.001,96,3.787,101,4.395,106,1.11,108,1.926,109,1.737,110,0.714,112,1.199,114,1.661,115,1.001,119,1.537,126,0.621,128,1.888,131,1.919,132,2.509,134,3.487,135,4.045,136,0.687,140,1.613,142,0.741,148,3.146,154,2.028,155,3.924,179,1.887,182,2.706,187,0.745,188,4.322,196,2.07,198,0.958,220,1.519,226,1.111,231,2.464,237,2.072,244,1.206,257,1.487,273,1.172,289,1.065,295,2.308,301,1.892,312,1.795,313,1.535,314,2.116,321,0.784,329,1.728,334,1.388,335,2.209,336,1.803,339,2.881,343,1.667,347,1.964,368,1.294,380,2.072,384,2.242,446,1.591,447,1.373,459,1.051,464,1.65,476,1.258,488,2.228,489,1.177,525,2.169,529,3.678,539,3.039,545,2.606,548,1.883,552,2.007,580,1.785,581,1.613,589,1.035,590,1.368,591,1.669,592,4.225,593,1.438,596,0.721,597,1.529,598,1.402,607,1.278,627,1.154,633,5.036,634,1.265,635,2.072,636,1.713,647,2.05,674,2.2,676,2.391,682,4.506,712,1.91,713,1.719,714,2.214,718,3.865,720,2.391,723,2.391,728,1.635,729,1.915,730,3.544,731,4.767,732,3.325,743,1.183,765,3.472,766,1.072,769,1.095,774,1.278,780,1.606,795,0.597,818,1.667,832,1.795,833,1.251,834,1.564,836,2.072,846,1.964,941,1.852,958,1.964,1019,2.686,1159,2.818,1160,1.278,1162,3.946,1174,1.24,1205,2.509,1262,4.351,1263,1.529,1367,1.633,1428,1.606,1441,1.964,1498,1.306,1499,3.946,1587,6.81,1630,2.209,1631,1.001,1632,5.362,1633,5.362,1634,5.362,1635,5.362,1636,5.362,1637,2.968,1638,3.837,1639,3.397,1640,3.397,1641,3.308,1642,2.668,1643,4.516,1644,5.2,1645,2.668,1646,2.117,1647,2.668,1648,2.668,1649,5.547,1650,3.837,1651,3.225,1652,7.536,1653,4.281,1654,2.668,1655,4.281,1656,5.219,1657,2.668,1658,2.668,1659,2.668,1660,2.308,1661,2.668,1662,3.837,1663,2.308,1664,3.151,1665,2.509,1666,2.668,1667,3.308,1668,2.668,1669,2.668,1670,2.668,1671,2.668,1672,2.668,1673,3.397,1674,2.668,1675,2.668,1676,2.668,1677,2.37,1678,2.668,1679,2.668,1680,1.795,1681,1.728,1682,2.76,1683,1.306,1684,2.209,1685,2.668,1686,2.818,1687,1.438,1688,7.243,1689,2.209,1690,1.035,1691,3.837,1692,1.438,1693,3.531,1694,5.362,1695,2.668,1696,2.668,1697,2.668,1698,2.568,1699,2.668,1700,2.668,1701,1.402,1702,1.177,1703,2.391,1704,2.668,1705,2.668,1706,2.668,1707,2.668,1708,2.668,1709,1.667,1710,2.668,1711,2.668,1712,2.668,1713,2.668,1714,2.391,1715,2.668,1716,4.281,1717,2.391,1718,3.837,1719,4.805,1720,3.837,1721,5.362,1722,4.281,1723,2.391,1724,2.391,1725,2.668,1726,2.668,1727,2.668,1728,6.136,1729,2.668,1730,2.209,1731,2.668,1732,2.209,1733,2.668,1734,1.053,1735,4.281,1736,2.668,1737,2.209,1738,2.668,1739,2.668,1740,2.668,1741,2.391,1742,2.668,1743,5.362,1744,2.668,1745,4.281,1746,2.668,1747,1.58,1748,2.668,1749,2.668,1750,2.391,1751,2.391,1752,2.668,1753,2.668,1754,3.837,1755,2.668,1756,2.668,1757,2.668,1758,2.668,1759,2.391,1760,2.668,1761,2.668,1762,2.668,1763,2.668,1764,2.391,1765,6.021,1766,2.37,1767,1.477,1768,2.668,1769,4.281,1770,2.668,1771,2.668,1772,2.668,1773,2.668,1774,2.391,1775,2.391,1776,2.668,1777,2.668,1778,1.69,1779,2.668,1780,4.281,1781,2.668,1782,2.668,1783,2.668,1784,2.668,1785,5.362,1786,2.668,1787,4.281,1788,2.668,1789,4.281,1790,4.281,1791,2.668,1792,4.281,1793,2.668,1794,2.668,1795,2.209,1796,2.668,1797,2.668,1798,0.938,1799,2.668,1800,2.668,1801,2.668,1802,2.668,1803,2.668,1804,2.668,1805,2.668,1806,1.477,1807,1.477,1808,2.209,1809,1.667,1810,2.668,1811,1.477,1812,4.281,1813,2.391,1814,2.668,1815,2.668,1816,2.072,1817,2.668,1818,2.668,1819,4.281,1820,4.281,1821,4.281,1822,2.668,1823,2.668,1824,2.668,1825,2.668,1826,2.668,1827,2.668,1828,3.837,1829,2.668,1830,2.668,1831,5.499,1832,5.499,1833,5.499,1834,6.136,1835,6.136,1836,5.499,1837,6.136,1838,2.668,1839,1.964,1840,2.668,1841,2.668,1842,2.668,1843,2.668,1844,2.668,1845,2.391,1846,2.668,1847,2.668,1848,2.668,1849,2.668,1850,2.391,1851,2.668,1852,2.668]],["title/classes/GridConfig.html",[0,0.087,132,2.992]],["body/classes/GridConfig.html",[0,0.103,2,1.495,3,0.234,4,0.219,5,0.219,8,1.743,10,0.241,11,0.497,17,1.34,20,0.005,24,0.338,28,0.299,39,0.234,75,1.38,78,0.003,79,0.004,80,0.003,84,3.804,85,0.99,94,1.83,101,4.117,102,2.29,103,4.161,104,4.209,105,4.209,106,2.229,108,3.867,109,2.06,110,0.874,111,2.615,112,1.743,114,3.024,115,2.924,116,1.914,126,1.814,128,3.437,129,5.472,130,5.618,131,2.819,132,5.039,134,3.724,135,4.741,136,0.555,137,5.245,139,3.867,140,5.198,142,2.517,145,1.568,148,2.107,174,5.039,181,5.039,187,1.059,188,4.881,488,2.21,552,2.853,627,2.633,1548,5.455,1686,3.199,1853,9.745,1854,6.087,1855,6.087,1856,6.087,1857,3.199,1858,3.282,1859,3.282,1860,3.282,1861,3.282,1862,3.282,1863,2.98,1864,3.282,1865,6.087,1866,6.087,1867,6.087,1868,6.087,1869,6.087,1870,6.087]],["title/classes/HorizontalBarAccessors.html",[0,0.087,1871,4.574]],["body/classes/HorizontalBarAccessors.html",[0,0.11,2,1.595,3,0.25,4,0.234,5,0.234,7,2.436,10,0.257,11,0.518,12,1.239,13,1.332,14,1.595,15,5.7,16,5.138,17,1.41,19,1.552,20,0.005,21,0.741,22,0.921,23,3.179,24,0.375,28,0.34,38,1.707,39,0.25,41,0.791,56,3.806,57,2,58,7.127,59,5.951,75,0.908,78,0.003,79,0.004,80,0.003,117,4.06,164,1.745,202,6.179,204,4.622,207,5.8,209,5.122,210,4.622,211,5.376,212,5.376,214,3.253,259,4.213,295,4.377,1003,2.213,1061,3.317,1871,7.276,1872,9.28,1873,7.276,1874,5.82,1875,5.82,1876,5.82,1877,5.82,1878,5.82,1879,5.82,1880,4.205,1881,5.82,1882,4.205,1883,5.82,1884,4.205,1885,7.276,1886,4.205,1887,4.37,1888,5.82,1889,5.82]],["title/interfaces/IAccessors.html",[34,0.912,40,0.012]],["body/interfaces/IAccessors.html",[3,0.122,4,0.115,5,0.115,10,0.268,11,0.431,12,1.248,13,1.318,20,0.005,21,0.834,22,0.959,24,0.318,28,0.347,33,1.176,34,0.879,35,2.137,36,2.137,37,1.292,39,0.393,40,0.025,41,0.812,42,1.702,47,1.725,53,0.721,57,1.619,75,0.841,78,0.002,79,0.002,80,0.002,83,1.517,85,0.517,89,1.208,90,1.305,97,1.624,102,0.848,106,0.825,110,0.448,116,0.781,119,0.649,131,2.378,136,0.865,145,1.816,163,0.948,164,1.91,168,1.298,183,1.19,187,0.553,198,1.513,213,2.003,222,1.385,229,0.948,238,2.277,244,0.896,245,0.935,251,2.538,254,1.214,257,1.457,284,1.517,285,1.4,287,0.99,289,1.343,294,0.771,303,2.032,313,1.326,314,1.976,328,0.948,333,1.879,334,1.242,368,0.962,384,0.814,399,1.155,411,0.99,417,1.051,439,1.02,443,1.509,444,1.577,446,1.896,447,1.577,453,1.65,455,2.017,459,1.796,464,1.476,465,1.554,476,2.149,482,0.896,524,1.948,525,1.487,530,1.256,531,1.256,532,1.256,533,1.256,539,1.531,541,1.194,545,1.624,547,1.256,548,1.509,553,1.256,557,1.942,561,1.942,571,1.256,572,1.65,575,1.235,576,1.987,580,0.792,589,1.235,591,0.99,595,1.256,596,1.329,599,1.256,634,0.751,636,1.016,642,2.208,646,2.114,674,0.976,712,1.531,713,1.928,714,1.987,728,0.848,729,1.136,743,1.493,744,1.118,745,0.976,747,2.169,750,2.075,753,1.101,761,1.02,769,1.258,775,1.118,782,1.725,790,0.962,795,1.513,797,2.555,803,1.329,807,1.051,809,1.005,821,1.235,826,1.235,888,1.155,930,1.174,944,1.58,968,1.084,1003,1.084,1056,1.194,1057,1.256,1058,1.256,1059,1.256,1061,2.27,1063,0.948,1065,1.466,1174,0.922,1182,2.169,1197,2.305,1214,1.194,1215,1.194,1232,2.182,1243,1.214,1263,1.136,1265,1.757,1319,2.017,1326,1.554,1428,1.194,1440,2.538,1586,1.235,1610,2.305,1631,1.194,1690,1.235,1734,1.256,1747,1.174,1778,1.256,1798,2.114,1890,0.47,1891,1.235,1892,1.976,1893,2.374,1894,2.305,1895,1.872,1896,1.942,1897,1.908,1898,1.942,1899,1.509,1900,1.366,1901,1.487,1902,2.374,1903,1.235,1904,1.214,1905,1.942,1906,1.278,1907,1.235,1908,1.235,1909,1.101,1910,1.256,1911,1.256,1912,1.729,1913,1.873,1914,1.118,1915,1.778,1916,3.154,1917,1.278,1918,1.845,1919,1.136,1920,2.374,1921,1.278,1922,1.976,1923,1.942,1924,1.942,1925,1.278,1926,1.942,1927,2.294,1928,1.845,1929,1.278,1930,1.084,1931,1.278,1932,1.194,1933,1.194,1934,1.844,1935,1.155,1936,1.278,1937,1.278,1938,0.962,1939,1.278,1940,1.235,1941,1.876,1942,1.942,1943,1.256,1944,1.942,1945,1.278,1946,1.235,1947,1.278,1948,2.517,1949,1.278,1950,1.256,1951,1.278,1952,1.942,1953,1.235,1954,1.101,1955,1.256,1956,1.256,1957,1.136,1958,2.374,1959,1.278,1960,2.003,1961,1.554,1962,1.278,1963,1.278,1964,1.278,1965,1.278,1966,1.256,1967,1.976,1968,1.278,1969,1.256,1970,1.214,1971,1.278,1972,1.278,1973,1.601,1974,1.256,1975,1.872,1976,1.278,1977,1.256,1978,1.256,1979,1.256,1980,1.278,1981,1.278,1982,1.256,1983,1.278,1984,1.084,1985,1.174,1986,1.256,1987,1.278,1988,1.278,1989,1.278,1990,1.278,1991,1.278,1992,1.256,1993,1.235,1994,1.278,1995,1.256,1996,1.235,1997,1.235,1998,1.278,1999,1.976,2000,2.671,2001,1.278,2002,1.256,2003,1.278,2004,1.278,2005,1.278,2006,1.278,2007,1.278,2008,1.625,2009,1.051,2010,1.278,2011,1.278,2012,1.845,2013,1.235,2014,1.235,2015,1.278,2016,1.278,2017,1.845,2018,1.976,2019,1.278,2020,1.278,2021,2.218,2022,1.876,2023,2.218,2024,1.256,2025,1.235,2026,1.02,2027,1.256,2028,1.235,2029,1.214,2030,1.036,2031,1.278,2032,1.101]],["title/interfaces/IAllAround.html",[40,0.012,108,2.296]],["body/interfaces/IAllAround.html",[0,0.055,3,0.124,4,0.117,5,0.117,10,0.128,11,0.318,20,0.005,21,0.37,24,0.302,28,0.322,39,0.353,40,0.023,41,0.486,52,1.192,75,0.453,78,0.002,79,0.002,80,0.002,83,2.506,85,0.527,89,1.677,90,0.697,95,3.514,100,1.623,101,3.532,102,1.329,103,3.576,104,1.586,105,1.586,106,1.576,108,3.865,110,0.74,111,2.996,112,1.815,114,3.516,115,3.349,116,2.225,124,2.912,126,1.161,135,3.651,136,0.623,139,3.947,142,1.897,145,1.867,148,2.695,154,1.071,155,2.498,157,1.623,158,2.689,159,1.794,160,3.435,161,1.794,162,1.794,163,2.036,165,1.794,168,1.385,170,2.689,171,2.621,172,1.747,179,1.966,182,3.012,183,0.422,184,2.442,185,3.589,186,2.621,198,1.922,218,1.279,257,2.248,258,1.487,285,0.587,289,1.356,301,1.713,313,1.776,314,2.192,321,0.952,334,1.677,384,1.992,404,3.201,446,0.84,459,0.796,464,1.225,488,1.176,489,2.2,524,1.62,525,1.839,529,1.662,539,2.821,545,2.447,548,1.866,552,3.201,580,0.806,590,1.662,591,1.553,592,2.977,593,1.747,596,0.875,597,1.157,598,1.703,627,1.401,634,2.165,636,1.935,642,1.424,647,1.552,674,1.53,712,2.608,713,1.95,714,1.465,718,2.558,728,0.863,743,1.101,745,1.53,762,1.586,774,3.271,778,2.845,779,1.457,780,2.281,795,0.725,809,1.024,817,3.589,833,2.851,941,3.369,1019,1.623,1063,2.497,1142,1.794,1159,1.703,1174,2.35,1199,1.747,1326,1.576,1367,1.903,1450,3.421,1540,2.761,1541,3.781,1542,1.747,1543,1.794,1544,1.794,1550,1.794,1554,1.794,1558,1.794,1562,1.794,1637,1.794,1639,1.794,1640,1.794,1641,1.747,1644,5.609,1646,1.279,1651,2.621,1660,1.747,1667,1.747,1673,2.761,1677,1.794,1682,2.736,1683,1.586,1686,1.703,1687,1.747,1692,1.747,1693,2.621,1698,3.532,1701,1.703,1702,2.682,1766,2.761,1767,1.794,1857,1.703,1858,1.747,1859,1.747,1860,1.747,1861,1.747,1862,2.689,1863,1.586,1864,1.747,1890,0.479,1895,2.779,1913,2.195,1915,0.851,1948,1.055,1960,2.294,1973,1.055,2026,1.039,2033,1.794,2034,4.995,2035,2.912,2036,4.857,2037,1.844,2038,2.839,2039,2.792,2040,3.846,2041,2.498,2042,1.844,2043,1.552,2044,3.782,2045,3.19,2046,3.781,2047,3.135,2048,2.761,2049,4.943,2050,2.839,2051,3.888,2052,2.761,2053,1.844,2054,1.429,2055,1.794,2056,2.761,2057,1.794,2058,1.794,2059,2.689,2060,1.794,2061,1.794,2062,2.851,2063,2.533,2064,1.794,2065,1.747,2066,1.844,2067,1.794,2068,1.794,2069,1.794,2070,1.844,2071,1.844,2072,1.703,2073,1.552,2074,1.844,2075,2.621,2076,1.844,2077,1.519,2078,1.844,2079,2.689,2080,2.839,2081,2.839,2082,2.389,2083,2.389,2084,1.844,2085,1.794,2086,1.747,2087,1.844,2088,1.844]],["title/interfaces/IAreaAccessors.html",[9,3.583,40,0.012]],["body/interfaces/IAreaAccessors.html",[0,0.107,1,4.441,3,0.243,4,0.228,5,0.228,6,4.913,7,2.373,8,1.415,9,6.145,10,0.251,11,0.509,12,1.165,13,1.252,16,3.502,20,0.005,23,3.097,24,0.297,25,6.977,27,6.977,28,0.307,29,3.824,30,4.095,31,3.029,32,2.736,33,2.432,34,1.563,35,2.523,36,2.523,37,2.3,38,1.662,39,0.353,40,0.021,41,0.896,42,1.859,43,6.203,44,5.607,45,6.203,46,6.203,47,1.884,48,6.203,49,5.607,50,6.203,51,6.203,52,1.909,53,1.81,54,2.454,55,1.756,56,2.965,57,2.117,58,7.314,59,6.107,60,3.953,61,6.203,62,3.953,63,6.203,64,4.913,65,4.913,66,4.913,67,4.913,68,4.913,69,4.913,70,4.913,71,4.913,72,2.904,73,3.324,74,3.324,75,1.117,76,3.708,77,3.708,78,0.003,79,0.004,80,0.003,1890,0.935]],["title/interfaces/IAreaDataAccessors.html",[25,3.757,40,0.012]],["body/interfaces/IAreaDataAccessors.html",[0,0.101,1,4.186,3,0.229,4,0.215,5,0.215,6,4.632,7,2.237,8,1.334,9,5.4,10,0.236,11,0.49,12,0.945,13,1.016,16,3.301,20,0.005,23,2.919,24,0.373,25,6.62,27,6.266,28,0.296,29,3.683,30,3.944,31,2.856,32,2.579,33,2.523,34,1.374,35,2.69,36,2.43,37,2.237,38,1.567,39,0.346,40,0.021,41,0.877,42,2.167,43,7.232,44,6.536,45,7.232,46,7.232,47,2.196,48,7.232,49,6.536,50,7.232,51,7.232,52,1.839,53,1.743,54,2.314,55,1.656,56,2.795,57,2.096,58,7.274,59,6.073,60,3.727,61,5.974,62,3.727,63,5.974,64,4.632,65,4.632,66,4.632,67,4.632,68,4.632,69,4.632,70,4.632,71,4.632,72,2.737,73,3.134,74,3.134,75,1.075,76,3.495,77,3.495,78,0.003,79,0.004,80,0.003,1890,0.881]],["title/interfaces/IAreaRendererConfig.html",[40,0.012,2089,3.305]],["body/interfaces/IAreaRendererConfig.html",[0,0.128,3,0.181,4,0.17,5,0.17,10,0.187,11,0.419,12,1.123,13,0.622,20,0.005,21,0.862,22,1.321,24,0.304,28,0.364,34,0.841,38,1.238,39,0.364,40,0.024,41,0.797,52,1.57,53,1.068,78,0.002,79,0.003,80,0.002,85,0.766,89,2.186,90,0.918,102,2.29,109,1.757,126,1.096,136,0.874,145,1.73,154,3.018,160,2.895,164,1.411,168,1.321,183,0.855,198,2.275,213,2.07,214,2.359,218,1.86,222,1.327,244,1.327,251,2.335,257,2.157,259,3.333,267,2.944,272,4.43,285,1.368,289,1.707,294,1.141,296,2.848,297,2.848,298,3.539,299,3.619,300,3.144,301,2.128,303,2.401,306,2.848,309,2.848,310,2.476,313,1.602,321,1.384,327,2.306,328,1.404,331,2.416,332,2.359,333,1.308,336,1.929,337,1.962,580,1.172,636,1.776,728,1.749,743,1.804,785,3.207,790,1.985,795,1.468,811,3.785,968,2.237,1266,2.848,1369,4.723,1534,3.635,1595,2.848,1806,4.526,1807,3.635,1811,4.184,1890,0.696,1899,2.508,1900,2.387,1901,1.424,1913,1.831,1915,1.986,1919,2.699,1934,2.637,1954,3.161,1960,1.29,1961,1.488,2009,2.169,2035,2.256,2039,4.087,2047,3.014,2054,4.109,2073,2.256,2089,4.252,2090,3.051,2091,5.502,2092,5.785,2093,5.785,2094,4.302,2095,4.419,2096,5.785,2097,5.086,2098,4.43,2099,4.419,2100,5.373,2101,5.567,2102,4.419,2103,2.608,2104,3.17,2105,2.539,2106,4.419,2107,2.539,2108,4.103,2109,4.252,2110,4.252,2111,4.103,2112,3.051,2113,3.051,2114,3.849,2115,3.051,2116,4.894,2117,5.086,2118,4.252,2119,2.944,2120,3.17,2121,3.17,2122,3.17,2123,2.944,2124,3.17,2125,3.17,2126,3.17,2127,2.944,2128,4.419,2129,4.252,2130,2.944,2131,3.17,2132,4.419,2133,4.252,2134,2.761,2135,3.17,2136,3.17,2137,3.051,2138,3.051,2139,5.086,2140,3.17,2141,3.17,2142,3.051,2143,2.944,2144,3.17,2145,3.17,2146,3.17,2147,3.17,2148,3.17,2149,2.761]],["title/interfaces/IAreaSeriesAccessors.html",[27,3.757,40,0.012]],["body/interfaces/IAreaSeriesAccessors.html",[0,0.107,1,4.421,3,0.242,4,0.227,5,0.227,6,4.892,7,2.362,8,1.409,9,5.591,10,0.249,11,0.508,12,0.979,13,1.052,16,3.486,20,0.005,22,1.301,23,3.083,24,0.297,25,6.429,27,6.755,28,0.306,29,3.814,30,4.084,31,3.016,32,2.724,33,2.43,34,1.423,35,2.516,36,2.759,37,2.581,38,1.655,39,0.353,40,0.021,41,0.895,42,1.854,43,6.186,44,5.591,45,6.186,46,6.186,47,1.879,48,6.186,49,5.591,50,6.186,51,6.186,52,2.263,53,2.146,54,2.444,55,1.749,56,2.952,57,2.115,58,7.311,59,6.104,60,3.936,61,6.186,62,3.936,63,6.186,64,4.892,65,4.892,66,4.892,67,4.892,68,4.892,69,4.892,70,4.892,71,4.892,72,2.891,73,3.31,74,3.31,75,1.114,76,3.692,77,3.692,78,0.003,79,0.004,80,0.003,1890,0.931]],["title/interfaces/IAxis.html",[40,0.012,2086,2.751]],["body/interfaces/IAxis.html",[0,0.055,3,0.125,4,0.118,5,0.118,10,0.129,11,0.32,20,0.005,21,0.372,24,0.303,28,0.322,39,0.353,40,0.023,41,0.488,52,1.198,75,0.456,78,0.002,79,0.002,80,0.002,83,2.5,85,0.53,89,1.683,90,0.701,95,3.717,100,1.633,101,3.542,102,1.335,103,3.584,104,1.596,105,1.596,106,1.582,108,3.776,110,0.742,111,2.62,112,1.819,114,3.156,115,2.929,116,1.997,124,2.923,126,1.166,135,3.66,136,0.625,139,3.954,142,1.903,145,1.869,148,2.702,154,1.077,155,2.51,157,1.633,158,2.702,159,1.805,160,3.443,161,1.805,162,1.805,163,2.042,165,1.805,168,1.386,170,2.702,171,2.634,172,1.757,179,1.968,182,3.261,183,0.425,184,2.453,185,3.601,186,2.634,198,1.925,218,1.287,257,2.251,258,1.496,285,0.59,289,1.361,301,1.719,313,1.867,314,2.197,321,0.958,334,1.68,384,1.997,404,3.212,446,0.845,459,0.801,464,1.231,488,1.183,489,2.21,524,2.08,525,1.846,529,1.672,539,2.825,545,2.591,548,1.873,552,3.212,580,0.811,590,1.672,591,1.56,592,2.989,593,1.757,596,0.881,597,1.164,598,1.713,627,1.41,634,2.167,636,1.938,642,1.431,647,1.561,674,1.537,712,2.613,713,1.957,714,1.472,718,2.57,728,0.868,743,1.106,745,1.537,762,1.596,774,3.281,778,2.854,779,1.466,780,2.29,795,0.729,809,1.03,817,4.619,833,2.861,941,3.377,1019,1.633,1063,2.042,1142,1.805,1159,1.713,1174,2.356,1199,1.757,1326,1.583,1367,1.912,1450,3.432,1540,2.774,1541,3.793,1542,1.757,1543,1.805,1544,1.805,1550,1.805,1554,1.805,1558,1.805,1562,1.805,1637,1.805,1639,1.805,1640,1.805,1641,1.757,1644,5.612,1646,1.287,1651,2.634,1660,1.757,1667,1.757,1673,2.774,1677,1.805,1682,2.746,1683,1.596,1686,1.713,1687,1.757,1692,1.757,1693,2.634,1698,2.923,1701,1.713,1702,2.692,1766,2.774,1767,1.805,1857,1.713,1858,1.757,1859,1.757,1860,1.757,1861,1.757,1862,2.702,1863,1.596,1864,1.757,1890,0.482,1895,2.431,1913,1.66,1915,0.857,1948,1.061,1960,2.299,1973,1.061,2026,1.045,2033,1.805,2034,4.21,2035,2.4,2036,4.502,2037,1.856,2038,2.853,2039,2.802,2040,3.853,2041,2.51,2042,1.856,2043,1.561,2044,3.793,2045,3.199,2046,3.793,2047,3.146,2048,2.774,2049,4.95,2050,2.853,2051,3.9,2052,2.774,2053,1.856,2054,1.438,2055,1.805,2056,2.774,2057,1.805,2058,1.805,2059,2.702,2060,1.805,2061,1.805,2062,2.861,2063,2.854,2064,1.805,2065,1.757,2066,1.856,2067,1.805,2068,1.805,2069,1.805,2070,1.856,2071,1.856,2072,1.713,2073,1.561,2074,1.856,2075,2.634,2076,1.856,2077,1.528,2078,1.856,2079,2.702,2080,2.853,2081,2.853,2082,2.4,2083,2.4,2084,1.856,2085,1.805,2086,2.702,2087,3.9,2088,3.9]],["title/interfaces/IAxisConfig.html",[40,0.012,157,2.557]],["body/interfaces/IAxisConfig.html",[0,0.054,3,0.123,4,0.115,5,0.115,10,0.127,11,0.315,20,0.005,21,0.365,24,0.326,28,0.32,39,0.352,40,0.023,41,0.481,52,1.18,75,0.447,78,0.002,79,0.002,80,0.002,83,2.518,85,0.52,89,1.665,90,0.69,95,3.609,100,1.601,101,3.51,102,1.315,103,3.557,104,1.565,105,1.565,106,1.563,108,3.752,110,0.736,111,2.599,112,1.806,114,3.134,115,2.906,116,1.983,124,2.888,126,1.149,135,3.632,136,0.618,139,3.933,142,1.883,145,1.966,148,2.681,154,1.056,155,2.473,157,2.473,158,4.177,159,3.755,160,3.856,161,3.755,162,3.755,163,2.486,165,3.755,168,1.403,170,3.656,171,2.595,172,1.724,179,1.962,182,3.561,183,0.416,184,2.417,185,3.564,186,2.595,198,1.914,218,1.262,257,2.283,258,1.468,285,0.579,289,1.347,301,1.698,313,1.77,314,2.181,321,0.939,334,1.669,384,1.981,404,3.179,446,0.829,459,0.785,464,1.212,488,1.161,489,2.177,524,1.607,525,1.824,529,1.64,539,2.812,545,2.44,548,1.85,552,3.179,580,0.796,590,1.64,591,1.537,592,2.953,593,1.724,596,0.864,597,1.142,598,1.68,627,1.383,634,2.158,636,1.93,642,1.41,647,1.531,674,1.515,712,2.596,713,1.934,714,1.451,718,2.532,728,0.852,743,1.09,745,1.515,762,1.565,774,3.248,778,2.825,779,1.438,780,2.262,795,0.715,809,1.01,817,3.564,833,2.827,941,3.351,1019,1.601,1063,2.021,1142,1.77,1159,1.68,1174,2.479,1199,1.724,1326,1.56,1367,1.883,1450,3.397,1540,2.733,1541,3.755,1542,1.724,1543,1.77,1544,1.77,1550,1.77,1554,1.77,1558,1.77,1562,1.77,1637,1.77,1639,1.77,1640,1.77,1641,1.724,1644,5.602,1646,1.262,1651,2.595,1660,1.724,1667,1.724,1673,2.733,1677,1.77,1682,2.713,1683,1.565,1686,1.68,1687,1.724,1692,1.724,1693,2.595,1698,2.888,1701,2.595,1702,2.991,1766,2.733,1767,1.77,1857,1.68,1858,1.724,1859,1.724,1860,1.724,1861,1.724,1862,2.661,1863,1.565,1864,1.724,1890,0.473,1895,2.412,1913,1.643,1915,0.84,1948,1.041,1960,2.437,1973,1.041,2026,1.025,2033,1.77,2034,4.173,2035,2.364,2036,4.289,2037,1.82,2038,2.81,2039,3.113,2040,4.014,2041,2.473,2042,1.82,2043,1.531,2044,3.759,2045,3.171,2046,3.755,2047,3.113,2048,2.733,2049,5.001,2050,2.81,2051,3.861,2052,2.733,2053,1.82,2054,1.41,2055,1.77,2056,2.733,2057,1.77,2058,1.77,2059,2.661,2060,1.77,2061,1.77,2062,3.436,2063,2.512,2064,1.77,2065,1.724,2066,1.82,2067,1.77,2068,1.77,2069,1.77,2070,1.82,2071,2.81,2072,2.595,2073,2.364,2074,1.82,2075,2.595,2076,1.82,2077,1.499,2078,1.82,2079,2.661,2080,2.81,2081,2.81,2082,2.364,2083,2.364,2084,1.82,2085,1.77,2086,1.724,2087,1.82,2088,1.82]],["title/interfaces/IBandScale.html",[40,0.012,2150,3.19]],["body/interfaces/IBandScale.html",[3,0.188,4,0.177,5,0.177,10,0.329,12,0.829,13,0.647,17,0.685,20,0.005,24,0.287,28,0.259,34,0.875,39,0.383,40,0.023,41,0.85,42,1.141,47,1.156,75,1.079,78,0.002,79,0.003,80,0.002,95,1.838,97,1.823,110,0.842,112,1.509,119,1.574,126,1.571,128,2.161,134,2.449,136,0.822,142,1.874,145,1.893,168,1.374,179,1.883,182,2.161,183,0.638,187,0.852,196,1.509,226,2.042,229,2.011,231,1.848,249,3.841,273,1.848,284,2.461,285,0.887,289,1.732,313,0.96,326,2.873,334,1.862,336,1.44,337,2.042,368,2.04,379,3.955,441,2.79,576,1.983,644,3.174,766,1.969,768,2.642,769,1.253,778,2.811,780,2.531,782,1.156,784,4.165,803,1.324,807,2.23,848,3.174,891,3.958,1498,2.399,1508,4.217,1614,2.873,1663,3.638,1665,2.873,1682,2.204,1702,2.976,1798,1.723,1890,0.724,1909,1.696,1912,2.372,1913,2.364,1938,3.078,1961,2.132,2008,2.23,2030,2.196,2040,3.098,2043,3.232,2045,2.12,2062,2.297,2063,2.042,2082,2.347,2083,2.347,2150,4.823,2151,3.063,2152,4.303,2153,5.596,2154,4.9,2155,4.666,2156,3.063,2157,3.063,2158,3.174,2159,3.174,2160,3.174,2161,4.393,2162,4.583,2163,3.841,2164,1.42,2165,3.174,2166,2.963,2167,3.063,2168,3.298,2169,3.298,2170,5.868,2171,3.955,2172,6.455,2173,2.873,2174,3.298,2175,4.541,2176,4.217,2177,2.713,2178,2.873,2179,2.873,2180,4.874,2181,4.622,2182,4.541,2183,2.963,2184,2.963,2185,4.858,2186,2.873,2187,2.873,2188,3.298,2189,3.298,2190,3.174,2191,2.873,2192,4.874,2193,3.298,2194,5.111,2195,2.873,2196,3.298,2197,3.298,2198,4.37,2199,3.298,2200,3.298,2201,3.298]],["title/interfaces/IBarAccessors.html",[40,0.012,205,3.435]],["body/interfaces/IBarAccessors.html",[0,0.1,3,0.226,4,0.212,5,0.212,7,2.21,8,1.318,10,0.383,11,0.487,12,1.228,13,1.344,16,3.261,20,0.005,23,2.884,24,0.284,28,0.325,29,3.654,30,3.913,31,2.821,32,2.548,33,2.368,34,1.512,38,1.548,39,0.325,40,0.018,41,0.873,52,1.824,53,1.73,54,2.286,55,2.119,56,2.761,57,1.233,72,2.704,73,3.096,74,3.096,75,1.297,76,3.453,77,3.453,78,0.003,79,0.004,80,0.003,110,0.935,149,2.704,164,1.266,168,1.167,196,2.264,202,3.682,203,4.876,204,4.344,205,5.696,207,5.796,209,4.874,210,4.344,213,2.54,214,2.95,215,6.575,216,3.238,217,3.238,218,2.326,219,4.876,220,3.353,221,4.876,222,2.761,223,6.317,224,4.876,225,4.876,226,3.526,227,6.317,228,4.876,229,2.523,230,6.317,231,2.09,232,6.317,233,6.317,234,4.876,235,4.876,236,6.317,237,4.576,238,1.834,239,4.876,240,4.876,241,4.876,242,4.876,243,4.876,244,1.659,245,1.731,246,5.135,247,4.876,248,4.876,249,3.353,250,4.876,251,1.682,252,4.876,253,4.876,254,2.247,1890,0.871]],["title/interfaces/IBarChartConfig.html",[40,0.012,448,3.965]],["body/interfaces/IBarChartConfig.html",[3,0.297,4,0.278,5,0.278,10,0.306,11,0.575,20,0.005,22,1.395,24,0.336,39,0.346,40,0.022,78,0.004,79,0.004,80,0.004,85,1.256,145,2.042,168,1.243,216,3.278,217,3.278,257,1.871,259,3.406,404,4.613,448,7.004,766,3.104,1890,1.142,2202,6.922,2203,8.819,2204,6.394]],["title/interfaces/IBarDataAccessors.html",[40,0.012,207,3.19]],["body/interfaces/IBarDataAccessors.html",[0,0.095,3,0.215,4,0.202,5,0.202,7,2.099,8,1.252,10,0.378,11,0.471,12,1.174,13,1.308,16,3.098,20,0.005,22,1.404,23,2.74,24,0.361,28,0.317,29,3.534,30,3.785,31,2.68,32,2.421,33,2.496,34,1.318,38,1.471,39,0.317,40,0.018,41,0.855,52,2.181,53,2.068,54,2.172,55,2.049,56,2.623,57,1.172,72,2.569,73,2.941,74,2.941,75,1.276,76,3.281,77,3.281,78,0.003,79,0.004,80,0.003,110,0.939,149,2.569,164,1.203,168,1.138,196,2.247,202,3.498,203,4.633,204,4.201,205,4.967,207,5.486,209,4.339,210,4.7,213,2.499,214,2.803,215,7.278,216,3.872,217,3.872,218,3.466,219,7.267,220,3.186,221,4.633,222,2.731,223,6.109,224,4.633,225,4.633,226,3.44,227,6.109,228,4.633,229,2.461,230,6.109,231,2.021,232,6.109,233,6.109,234,4.633,235,4.633,236,6.109,237,4.347,238,1.742,239,4.633,240,4.633,241,4.633,242,4.633,243,4.633,244,1.576,245,1.644,246,4.967,247,4.633,248,4.633,249,3.186,250,4.633,251,1.598,252,4.633,253,4.633,254,2.135,1890,0.827]],["title/interfaces/IBarRendererConfig.html",[40,0.012,2137,3.305]],["body/interfaces/IBarRendererConfig.html",[0,0.126,3,0.175,4,0.164,5,0.164,10,0.18,11,0.409,12,1.082,13,0.601,20,0.005,21,0.846,22,1.398,24,0.337,28,0.361,34,0.813,38,1.196,39,0.361,40,0.024,41,0.785,52,1.532,53,1.032,78,0.002,79,0.003,80,0.002,85,0.74,89,1.822,90,1.037,102,2.461,109,1.595,126,1.06,136,0.886,145,1.89,154,2.99,160,3.883,164,1.378,168,1.339,183,0.835,198,2.285,213,2.032,214,2.28,218,2.531,222,1.282,244,1.805,251,2.119,257,2.134,259,3.883,267,4.006,272,4.976,285,1.16,289,1.686,294,1.103,296,2.753,297,2.753,298,3.456,299,3.553,300,3.07,301,2.089,303,2.378,306,2.753,309,2.753,310,2.393,313,1.454,321,1.338,327,2.229,328,1.357,331,2.335,332,2.28,333,1.264,336,1.338,337,1.897,580,1.596,636,1.754,728,1.977,743,1.874,785,3.149,790,1.938,795,1.66,811,4.034,968,2.184,1266,3.876,1369,4.006,1534,4.108,1595,2.753,1806,4.458,1807,3.549,1811,4.108,1890,0.673,1899,2.604,1900,2.237,1901,1.377,1913,1.798,1915,2.116,1919,2.29,1934,2.604,1954,3.131,1960,1.247,1961,1.438,2009,2.118,2035,3.07,2039,4.043,2047,3.406,2054,4.074,2073,2.18,2089,2.948,2090,2.948,2091,3.064,2092,4.314,2093,4.314,2094,4.224,2095,3.064,2096,4.993,2097,4.314,2098,3.758,2099,3.064,2100,4.637,2101,5.497,2102,3.064,2103,2.52,2104,3.064,2105,2.454,2106,4.314,2107,2.454,2108,4.006,2109,4.151,2110,4.151,2111,4.006,2112,2.948,2113,2.948,2114,3.758,2115,2.948,2116,4.805,2117,4.993,2118,4.151,2119,2.845,2120,3.064,2121,3.064,2122,3.064,2123,2.845,2124,3.064,2125,3.064,2126,3.064,2127,2.845,2128,4.993,2129,4.805,2130,2.845,2131,3.064,2132,4.314,2133,4.151,2134,2.669,2135,3.064,2136,3.064,2137,4.151,2138,4.151,2139,5.927,2140,5.42,2141,5.42,2142,4.151,2143,4.006,2144,5.42,2145,4.314,2146,4.314,2147,4.314,2148,5.42,2149,2.669]],["title/interfaces/IBorderConfig.html",[40,0.012,1686,2.682]],["body/interfaces/IBorderConfig.html",[0,0.085,3,0.125,4,0.117,5,0.117,10,0.129,11,0.319,20,0.005,21,0.571,22,1.19,24,0.303,28,0.322,39,0.353,40,0.023,41,0.488,52,1.866,75,0.455,78,0.002,79,0.002,80,0.002,83,2.508,85,0.53,89,1.682,90,0.7,95,3.517,100,1.631,101,3.738,102,1.334,103,3.583,104,1.594,105,1.594,106,1.581,108,3.774,110,0.741,111,2.618,112,1.818,114,3.154,115,2.928,116,1.996,124,2.921,126,1.165,135,3.658,136,0.765,139,3.952,142,1.902,145,1.917,148,2.701,154,1.076,155,3.43,157,1.631,158,2.699,159,1.803,160,3.442,161,1.803,162,1.803,163,2.501,165,1.803,168,1.392,170,2.699,171,2.631,172,1.755,179,1.967,182,3.02,183,0.424,184,2.451,185,3.599,186,2.631,198,1.925,218,1.977,257,2.272,258,1.495,285,0.589,289,1.36,301,1.718,313,1.778,314,2.196,321,0.957,334,1.68,384,1.996,404,3.21,446,0.844,459,0.8,464,1.23,488,1.182,489,2.208,524,1.625,525,1.844,529,1.67,539,2.824,545,2.45,548,1.871,552,3.21,580,0.81,590,1.67,591,1.559,592,2.987,593,1.755,596,0.88,597,1.163,598,1.711,627,1.408,634,2.167,636,1.982,642,1.43,647,1.559,674,1.536,712,2.612,713,1.956,714,1.471,718,2.568,728,0.868,743,1.105,745,1.536,762,1.594,774,3.279,778,2.853,779,1.465,780,2.288,795,0.728,809,1.029,817,3.599,833,2.859,941,3.376,1019,1.631,1063,2.041,1142,1.803,1159,1.711,1174,2.43,1199,1.755,1326,1.582,1367,1.91,1450,3.43,1540,2.772,1541,3.791,1542,1.755,1543,1.803,1544,1.803,1550,1.803,1554,1.803,1558,1.803,1562,1.803,1637,1.803,1639,1.803,1640,1.803,1641,1.755,1644,5.612,1646,1.286,1651,2.631,1660,1.755,1667,1.755,1673,2.772,1677,1.803,1682,2.744,1683,1.594,1686,2.631,1687,1.755,1692,1.755,1693,2.631,1698,2.921,1701,1.711,1702,2.69,1766,2.772,1767,1.803,1857,1.711,1858,1.755,1859,1.755,1860,1.755,1861,1.755,1862,2.699,1863,1.594,1864,1.755,1890,0.481,1895,2.429,1913,1.659,1915,0.856,1948,1.06,1960,2.357,1973,1.06,2026,1.044,2033,1.803,2034,4.207,2035,2.398,2036,4.321,2037,1.854,2038,2.85,2039,2.8,2040,3.852,2041,2.508,2042,1.854,2043,1.559,2044,3.791,2045,3.197,2046,3.791,2047,3.144,2048,2.772,2049,4.949,2050,2.85,2051,3.898,2052,2.772,2053,1.854,2054,2.208,2055,3.791,2056,2.772,2057,1.803,2058,1.803,2059,2.699,2060,1.803,2061,1.803,2062,2.859,2063,2.541,2064,1.803,2065,1.755,2066,1.854,2067,1.803,2068,1.803,2069,1.803,2070,1.854,2071,1.854,2072,1.711,2073,1.559,2074,1.854,2075,2.631,2076,1.854,2077,1.526,2078,1.854,2079,2.699,2080,2.85,2081,2.85,2082,2.398,2083,2.398,2084,1.854,2085,1.803,2086,1.755,2087,1.854,2088,1.854]],["title/interfaces/IBorders.html",[40,0.012,1687,2.751]],["body/interfaces/IBorders.html",[0,0.057,3,0.128,4,0.12,5,0.12,20,0.005,21,0.38,24,0.23,28,0.325,39,0.355,40,0.023,41,0.603,52,1.218,75,0.466,78,0.002,79,0.003,80,0.002,83,2.507,85,0.542,89,1.702,90,0.713,95,3.533,100,1.669,101,3.772,102,1.358,103,3.616,104,1.632,105,1.632,106,1.604,108,3.897,110,0.747,111,2.75,112,1.833,114,3.28,115,3.074,116,2.076,124,2.964,126,1.186,135,3.692,136,0.632,139,3.977,142,1.925,145,1.878,148,2.726,154,1.101,155,2.553,157,1.669,158,2.748,159,1.845,160,3.473,161,1.845,162,1.845,163,2.066,165,1.845,168,1.389,170,2.748,171,2.678,172,1.796,179,1.974,182,3.057,183,0.434,184,2.495,185,3.643,186,2.678,198,1.938,218,1.316,257,2.261,258,1.53,285,0.603,289,1.377,301,1.743,313,1.787,314,2.214,321,0.979,334,1.693,384,2.014,404,3.249,446,0.864,459,0.818,464,1.252,488,1.21,489,2.248,524,1.649,525,1.871,529,1.709,539,2.839,545,2.463,548,1.899,552,3.249,580,0.829,590,1.709,591,1.587,592,3.03,593,1.796,596,0.9,597,1.19,598,1.751,627,1.441,634,2.178,636,1.946,642,1.456,647,1.596,674,1.564,712,2.631,713,1.984,714,1.497,718,2.614,728,0.888,743,1.125,745,1.564,762,1.632,774,3.319,778,2.888,779,1.499,780,2.322,795,0.745,809,1.053,817,3.643,833,2.901,941,3.407,1019,1.669,1063,2.066,1142,1.845,1159,1.751,1174,2.374,1199,1.796,1326,1.61,1367,1.944,1450,3.472,1540,2.822,1541,3.837,1542,1.796,1543,1.845,1544,1.845,1550,1.845,1554,1.845,1558,1.845,1562,1.845,1637,1.845,1639,1.845,1640,1.845,1641,1.796,1644,5.623,1646,1.316,1651,2.678,1660,1.796,1667,1.796,1673,2.822,1677,1.845,1682,2.784,1683,1.632,1686,1.751,1687,2.748,1692,1.796,1693,2.678,1698,2.964,1701,1.751,1702,2.729,1766,2.822,1767,2.822,1857,1.751,1858,1.796,1859,1.796,1860,1.796,1861,1.796,1862,2.748,1863,1.632,1864,1.796,1890,0.493,1895,2.551,1913,1.679,1915,0.876,1948,1.085,1960,2.315,1973,1.085,2026,1.069,2033,1.845,2034,4.252,2035,2.441,2036,4.537,2037,1.897,2038,2.901,2039,2.841,2040,3.88,2041,2.553,2042,1.897,2043,1.596,2044,3.83,2045,3.231,2046,3.837,2047,3.182,2048,2.822,2049,4.977,2050,2.901,2051,3.946,2052,2.822,2053,2.901,2054,1.47,2055,1.845,2056,2.822,2057,1.845,2058,1.845,2059,2.748,2060,1.845,2061,1.845,2062,2.901,2063,2.578,2064,1.845,2065,1.796,2066,1.897,2067,1.845,2068,1.845,2069,1.845,2070,1.897,2071,1.897,2072,1.751,2073,1.596,2074,1.897,2075,2.678,2076,1.897,2077,1.562,2078,1.897,2079,2.748,2080,2.901,2081,2.901,2082,2.441,2083,2.441,2084,1.897,2085,1.845,2086,1.796,2087,1.897,2088,1.897]],["title/interfaces/IChart.html",[40,0.012,464,1.253]],["body/interfaces/IChart.html",[3,0.116,4,0.109,5,0.109,10,0.261,11,0.419,12,1.228,13,1.292,17,1.226,19,1.706,20,0.005,21,0.981,22,1.193,24,0.332,28,0.342,33,1.129,34,0.539,35,1.491,36,1.491,37,1.241,39,0.391,40,0.025,41,0.798,42,1.661,47,1.683,53,0.684,57,1.584,75,0.813,78,0.001,79,0.002,80,0.001,83,1.467,89,1.159,90,1.291,97,1.571,102,0.804,106,0.783,110,0.431,116,0.741,119,0.615,131,2.337,136,0.857,145,1.793,163,0.9,164,1.759,168,1.285,179,1.788,183,1.249,187,0.525,198,1.471,213,1.954,222,1.33,229,0.9,238,2.222,244,0.85,245,0.887,251,2.457,254,1.152,257,1.409,273,1.293,284,1.467,285,1.292,287,0.94,289,1.306,294,0.731,303,1.988,313,1.289,314,1.928,328,0.9,333,1.826,334,1.201,368,0.913,384,1.682,399,1.096,411,0.94,417,0.997,439,0.968,443,2.189,444,1.514,446,2.05,447,2.288,453,1.584,455,1.951,459,1.752,464,1.615,465,1.491,476,2.223,482,0.85,524,2.016,525,1.758,527,4.231,529,2.421,530,2.596,531,2.596,532,2.596,533,2.596,535,4.231,537,4.231,539,1.81,541,2.181,545,1.928,547,1.864,548,2.017,553,1.864,557,2.296,561,2.296,564,2.705,566,2.705,571,1.864,572,2.206,574,2.705,575,1.832,576,2.223,578,2.499,580,0.751,589,1.171,591,0.94,595,1.192,596,1.275,599,1.192,634,0.712,636,0.975,642,2.161,646,2.044,674,0.926,712,1.47,713,1.864,714,1.932,728,0.804,729,1.078,743,1.451,744,1.061,745,0.926,747,2.108,750,2.017,753,1.045,761,0.968,769,1.207,775,1.061,782,1.683,790,0.913,795,1.471,797,2.5,803,1.275,807,0.997,809,0.954,821,1.171,826,1.171,888,1.096,930,1.114,944,1.528,968,1.028,1003,1.028,1056,1.132,1057,1.192,1058,1.192,1059,1.192,1061,2.206,1063,0.9,1065,0.9,1174,0.874,1182,2.108,1197,2.24,1214,1.132,1215,1.132,1232,2.111,1243,1.152,1263,1.078,1265,1.686,1319,1.951,1326,1.491,1428,1.132,1440,2.467,1586,1.171,1610,2.24,1631,1.132,1690,1.171,1734,1.192,1747,1.114,1778,1.192,1798,2.044,1890,0.446,1891,1.171,1892,1.213,1893,1.864,1894,1.609,1895,1.47,1896,1.192,1897,1.171,1898,1.192,1899,0.926,1900,0.838,1901,0.913,1902,2.296,1903,1.171,1904,1.152,1905,1.864,1906,1.213,1907,1.171,1908,1.171,1909,1.045,1910,1.192,1911,1.192,1912,1.66,1913,1.833,1914,1.061,1915,1.728,1916,3.104,1917,1.213,1918,1.771,1919,1.078,1920,2.296,1921,1.213,1922,1.897,1923,1.864,1924,1.864,1925,1.213,1926,1.864,1927,2.218,1928,1.771,1929,1.213,1930,1.028,1931,1.213,1932,1.132,1933,1.132,1934,1.784,1935,1.096,1936,1.213,1937,1.213,1938,0.913,1939,1.213,1940,1.171,1941,1.801,1942,1.864,1943,1.192,1944,1.864,1945,1.213,1946,1.171,1947,1.213,1948,2.463,1949,1.213,1950,1.192,1951,1.213,1952,1.864,1953,1.171,1954,1.045,1955,1.192,1956,1.192,1957,1.078,1958,2.296,1959,1.213,1960,1.954,1961,1.491,1962,1.213,1963,1.213,1964,1.213,1965,1.213,1966,1.192,1967,1.897,1968,1.213,1969,1.192,1970,1.152,1971,1.213,1972,1.213,1973,1.537,1974,1.192,1975,1.81,1976,1.213,1977,1.192,1978,1.192,1979,1.192,1980,1.213,1981,1.213,1982,1.192,1983,1.213,1984,1.028,1985,1.114,1986,1.192,1987,1.213,1988,1.213,1989,1.213,1990,1.213,1991,1.213,1992,1.192,1993,1.171,1994,1.213,1995,1.192,1996,1.171,1997,1.171,1998,1.213,1999,1.897,2000,2.596,2001,1.213,2002,1.192,2003,1.213,2004,1.213,2005,1.213,2006,1.213,2007,1.213,2008,1.56,2009,0.997,2010,1.213,2011,1.213,2012,1.771,2013,1.171,2014,1.171,2015,1.213,2016,1.213,2017,1.771,2018,1.897,2019,1.213,2020,1.213,2021,2.145,2022,1.801,2023,2.145,2024,1.192,2025,1.171,2026,0.968,2027,1.192,2028,1.171,2029,1.152,2030,0.982,2031,1.213,2032,1.045,2205,3.018,2206,3.018,2207,3.018,2208,3.018,2209,3.018,2210,3.018,2211,3.018,2212,3.018,2213,3.018,2214,3.018,2215,3.018]],["title/interfaces/IChartAssist.html",[40,0.012,773,3.305]],["body/interfaces/IChartAssist.html",[0,0.125,3,0.214,4,0.201,5,0.201,8,1.247,10,0.221,13,1.327,17,1.152,19,1.76,20,0.005,21,1.067,22,1.044,24,0.307,28,0.283,34,0.996,39,0.36,40,0.023,41,0.543,75,1.029,78,0.003,79,0.004,80,0.003,85,1.34,90,1.404,94,1.453,110,0.883,126,1.298,136,0.921,163,2.456,168,1.015,179,1.908,183,0.959,187,0.97,196,1.247,198,2.135,238,1.736,273,2.016,283,4.197,284,2.211,287,2.914,295,3.006,333,2.044,334,1.811,394,3.086,411,2.291,432,3.371,446,1.908,459,1.369,464,1.808,482,2.321,572,2.47,576,2.677,597,1.991,647,3.525,740,3.752,741,5.676,742,3.914,743,1.231,744,2.897,745,1.71,746,4.103,747,2.642,748,4.103,749,4.103,750,2.258,751,4.103,753,3.353,761,1.788,762,4.035,763,5.786,764,4.103,765,3.61,766,2.24,767,3.752,768,3.006,769,1.426,770,5.418,771,5.418,772,4.601,773,4.767,774,3.525,775,2.588,776,4.954,777,4.954,778,3.067,779,3.311,780,2.761,781,4.451,782,1.736,783,5.676,784,4.39,785,3.124,786,4.954,787,5.168,788,5.899,789,3.752,790,1.686,791,4.954,792,4.954,793,4.954,794,4.954,795,1.247,796,3.752,797,1.842,798,2.859,799,4.103,800,4.103,801,3.006,802,3.752,803,1.506,1890,0.824,2216,6.597,2217,5.575,2218,5.575,2219,5.575]],["title/interfaces/IChartAssistEvent.html",[40,0.012,796,3.435]],["body/interfaces/IChartAssistEvent.html",[0,0.132,3,0.233,4,0.219,5,0.219,8,1.359,10,0.241,11,0.496,13,1.287,20,0.005,21,0.888,24,0.357,28,0.299,34,1.085,39,0.368,40,0.024,41,0.592,75,0.849,78,0.003,79,0.004,80,0.003,85,0.988,90,1.393,94,1.514,110,0.826,126,1.414,136,0.899,163,2.32,168,0.838,179,1.587,183,0.791,187,1.057,196,1.359,198,2.026,238,1.891,283,3.727,284,1.964,287,2.674,333,2.162,334,1.871,394,3.363,411,1.891,432,3.673,459,1.492,464,1.911,482,2.192,572,2.611,576,2.523,597,2.17,647,2.909,740,4.088,741,3.934,742,4.265,743,1.341,744,3.184,745,1.864,746,4.471,747,2.754,748,4.471,749,4.471,750,2.388,751,4.471,753,3.24,761,1.948,762,3.811,763,5.465,764,4.471,765,3.934,766,2.441,767,4.088,768,3.275,769,1.553,770,4.471,771,4.471,772,3.797,773,3.934,774,2.909,775,2.136,776,4.088,777,4.088,778,2.531,779,2.733,780,2.279,781,3.673,782,1.433,783,5.04,784,3.899,785,2.578,786,4.088,787,4.265,788,4.088,789,4.088,790,1.837,791,6.096,792,5.238,793,5.238,794,5.238,795,1.741,796,5.238,797,2.993,798,3.115,799,4.471,800,4.471,801,3.275,802,4.088,803,1.641,1890,0.898]],["title/interfaces/IChartAssistSeries.html",[40,0.012,753,1.766]],["body/interfaces/IChartAssistSeries.html",[3,0.123,4,0.115,5,0.115,10,0.269,11,0.433,12,1.236,13,1.311,20,0.005,21,0.836,22,0.962,24,0.319,28,0.347,33,1.181,34,0.571,35,1.56,36,1.56,37,1.298,39,0.393,40,0.025,41,0.834,42,1.707,47,1.73,53,0.725,57,1.622,75,0.844,78,0.002,79,0.002,80,0.002,83,1.522,89,1.213,90,1.318,97,1.63,102,0.852,106,0.829,110,0.45,116,0.786,119,0.652,131,2.383,136,0.866,145,1.897,163,0.953,164,1.793,168,1.299,183,1.192,187,0.556,198,1.517,213,2.008,222,1.391,229,0.953,238,2.282,244,0.901,245,0.94,251,2.497,254,1.22,257,1.462,284,1.522,285,1.327,287,0.996,289,1.347,294,0.775,303,2.036,313,1.33,314,1.98,328,0.953,333,1.884,334,1.246,368,0.967,384,0.818,399,1.161,411,0.996,417,1.057,439,1.026,443,1.515,444,1.584,446,1.901,447,1.584,453,1.657,455,2.024,459,1.8,464,1.481,465,1.56,476,2.154,482,1.391,524,1.953,525,1.493,530,1.263,531,1.263,532,1.263,533,1.263,539,1.538,541,1.2,545,1.63,547,1.263,548,1.515,553,1.263,557,1.95,561,1.95,571,1.263,572,1.657,575,1.241,576,2.154,580,0.796,589,1.241,591,0.996,595,1.263,596,1.334,599,1.263,634,0.755,636,1.02,642,2.213,646,2.121,674,0.981,712,1.538,713,1.934,714,1.993,728,0.852,729,1.143,743,1.497,744,1.736,745,0.981,747,2.175,750,2.081,753,1.709,761,1.026,769,1.263,775,1.125,782,1.73,790,0.967,795,1.517,797,2.561,803,1.334,807,1.057,809,1.011,821,1.241,826,1.241,888,1.161,930,1.18,944,1.585,968,1.09,1003,1.09,1056,1.2,1057,1.263,1058,1.263,1059,1.263,1061,2.276,1063,0.953,1065,0.953,1174,0.927,1182,2.175,1197,2.311,1214,1.2,1215,1.2,1232,2.19,1243,1.22,1263,1.143,1265,1.764,1319,2.024,1326,1.56,1428,1.2,1440,2.545,1586,1.241,1610,2.311,1631,1.2,1690,1.241,1734,1.263,1747,1.18,1778,1.263,1798,2.121,1890,0.473,1891,1.241,1892,1.285,1893,1.95,1894,1.683,1895,1.538,1896,1.263,1897,1.241,1898,1.263,1899,0.981,1900,0.888,1901,0.967,1902,2.382,1903,1.241,1904,1.22,1905,1.95,1906,1.285,1907,1.241,1908,1.241,1909,1.107,1910,1.263,1911,1.263,1912,1.736,1913,1.878,1914,1.125,1915,1.783,1916,3.159,1917,1.285,1918,1.853,1919,1.143,1920,2.382,1921,1.285,1922,1.985,1923,1.95,1924,1.95,1925,1.285,1926,1.95,1927,2.301,1928,1.853,1929,1.285,1930,1.09,1931,1.285,1932,1.2,1933,1.2,1934,1.851,1935,1.161,1936,1.285,1937,1.285,1938,0.967,1939,1.285,1940,1.241,1941,1.884,1942,1.95,1943,1.263,1944,1.95,1945,1.285,1946,1.241,1947,1.285,1948,2.522,1949,1.285,1950,1.263,1951,1.285,1952,1.95,1953,1.241,1954,1.107,1955,1.263,1956,1.263,1957,1.143,1958,2.382,1959,1.285,1960,2.212,1961,1.56,1962,1.285,1963,1.285,1964,1.285,1965,1.285,1966,1.263,1967,1.985,1968,1.285,1969,1.263,1970,1.22,1971,1.285,1972,1.285,1973,1.608,1974,1.263,1975,1.878,1976,1.285,1977,1.263,1978,1.263,1979,1.263,1980,1.285,1981,1.285,1982,1.263,1983,1.285,1984,1.09,1985,1.18,1986,1.263,1987,1.285,1988,1.285,1989,1.285,1990,1.285,1991,1.285,1992,1.95,1993,2.632,1994,1.985,1995,2.678,1996,1.241,1997,1.241,1998,1.285,1999,1.985,2000,2.678,2001,1.285,2002,1.263,2003,1.285,2004,1.285,2005,1.285,2006,1.285,2007,1.285,2008,1.632,2009,1.057,2010,1.285,2011,1.285,2012,1.853,2013,1.241,2014,1.241,2015,1.285,2016,1.285,2017,1.853,2018,1.985,2019,1.285,2020,1.285,2021,2.226,2022,1.884,2023,2.226,2024,1.263,2025,1.241,2026,1.026,2027,1.263,2028,1.241,2029,1.22,2030,1.041,2031,1.285,2032,1.107]],["title/interfaces/IChartEvent.html",[40,0.012,596,1.379]],["body/interfaces/IChartEvent.html",[3,0.124,4,0.116,5,0.116,10,0.27,11,0.434,12,1.244,13,1.303,20,0.005,21,0.839,22,0.704,24,0.319,28,0.348,33,1.187,34,0.576,35,1.569,36,1.569,37,1.305,39,0.393,40,0.025,41,0.815,42,1.712,47,1.735,53,0.73,57,1.627,75,0.847,78,0.002,79,0.002,80,0.002,83,1.529,89,1.22,90,1.308,97,1.637,102,0.858,106,0.835,110,0.453,116,0.791,119,0.657,131,2.388,136,0.867,145,1.865,163,0.96,164,1.797,168,1.301,183,1.194,187,0.56,198,1.523,213,2.015,222,1.399,229,0.96,238,2.29,244,0.907,245,0.947,251,2.502,254,1.229,257,1.468,284,1.529,285,1.332,287,1.003,289,1.352,294,0.781,303,2.042,313,1.335,314,1.987,328,0.96,333,1.891,334,1.252,368,0.974,384,0.824,399,1.17,411,1.003,417,1.065,439,1.033,443,1.524,444,1.592,446,1.907,447,1.592,453,1.666,455,2.033,459,1.806,464,1.488,465,1.569,476,2.161,482,0.907,524,1.96,525,1.502,530,1.272,531,1.272,532,1.272,533,1.272,539,1.546,541,1.209,545,1.637,547,1.272,548,1.524,553,1.272,557,1.961,561,1.961,571,1.272,572,1.666,575,1.25,576,2.001,580,0.802,589,1.25,591,1.003,595,1.272,596,1.637,599,1.272,634,0.76,636,1.026,642,2.22,646,2.13,674,0.988,712,1.546,713,1.943,714,2.001,728,0.858,729,1.151,743,1.503,744,1.133,745,0.988,747,2.184,750,2.089,753,1.115,761,1.033,769,1.27,775,1.133,782,1.735,790,0.974,795,1.523,797,2.568,803,1.342,807,1.065,809,1.018,821,1.25,826,1.25,888,1.17,930,1.189,944,1.593,968,1.098,1003,1.098,1056,1.209,1057,1.272,1058,1.272,1059,1.272,1061,2.285,1063,0.96,1065,0.96,1174,0.933,1182,2.184,1197,2.32,1214,1.209,1215,1.209,1232,2.2,1243,1.229,1263,1.151,1265,1.774,1319,2.033,1326,1.569,1428,1.209,1440,2.555,1586,1.25,1610,2.32,1631,1.209,1690,1.25,1734,1.272,1747,1.189,1778,1.272,1798,2.13,1890,0.476,1891,1.25,1892,1.295,1893,1.961,1894,1.692,1895,1.546,1896,1.272,1897,1.25,1898,1.272,1899,0.988,1900,0.895,1901,0.974,1902,2.393,1903,1.25,1904,1.229,1905,1.961,1906,1.295,1907,1.25,1908,1.25,1909,1.115,1910,1.272,1911,1.272,1912,1.746,1913,2.026,1914,1.133,1915,1.79,1916,3.165,1917,1.295,1918,1.863,1919,1.151,1920,2.393,1921,1.295,1922,1.996,1923,1.961,1924,1.961,1925,1.295,1926,1.961,1927,2.312,1928,1.863,1929,1.295,1930,1.098,1931,1.295,1932,1.209,1933,1.209,1934,1.859,1935,1.17,1936,1.295,1937,1.295,1938,0.974,1939,1.295,1940,1.25,1941,1.895,1942,1.961,1943,1.272,1944,1.961,1945,1.295,1946,1.25,1947,1.295,1948,2.529,1949,1.295,1950,1.272,1951,1.295,1952,1.961,1953,1.25,1954,1.115,1955,1.272,1956,1.272,1957,1.151,1958,2.393,1959,1.295,1960,2.015,1961,1.569,1962,1.295,1963,1.295,1964,1.295,1965,1.295,1966,1.272,1967,1.996,1968,1.295,1969,1.272,1970,1.229,1971,1.295,1972,1.295,1973,1.616,1974,1.272,1975,1.886,1976,1.295,1977,1.272,1978,1.272,1979,1.272,1980,1.295,1981,1.295,1982,1.272,1983,1.295,1984,1.098,1985,1.189,1986,1.272,1987,1.295,1988,1.295,1989,1.295,1990,1.295,1991,1.295,1992,1.272,1993,1.25,1994,1.295,1995,1.272,1996,1.25,1997,1.25,1998,1.295,1999,1.996,2000,2.689,2001,1.295,2002,1.272,2003,1.295,2004,1.295,2005,2.736,2006,1.295,2007,1.295,2008,1.641,2009,1.065,2010,1.295,2011,1.295,2012,1.863,2013,1.25,2014,1.25,2015,1.295,2016,1.295,2017,1.863,2018,1.996,2019,1.295,2020,1.295,2021,2.236,2022,1.895,2023,2.236,2024,1.272,2025,1.25,2026,1.033,2027,1.272,2028,1.25,2029,1.229,2030,1.049,2031,1.295,2032,1.115]],["title/interfaces/IChartMarker.html",[40,0.012,1003,1.739]],["body/interfaces/IChartMarker.html",[3,0.123,4,0.116,5,0.116,10,0.269,11,0.316,12,1.236,13,1.302,17,0.692,19,0.767,20,0.005,21,0.885,22,0.455,24,0.311,28,0.347,33,1.183,34,0.573,35,1.564,36,1.564,37,1.301,39,0.393,40,0.025,41,0.814,42,1.709,47,1.732,52,0.767,53,0.727,57,1.624,75,0.845,78,0.002,79,0.002,80,0.002,83,1.525,89,1.215,90,1.307,97,1.632,102,0.855,106,0.832,110,0.451,116,0.788,119,0.654,131,2.385,136,0.883,145,1.819,163,0.956,164,1.795,168,1.3,179,1.009,183,1.206,187,0.558,198,1.52,213,2.011,222,1.394,229,0.956,238,2.285,244,0.903,245,0.942,251,2.499,254,1.224,257,1.464,273,1.356,284,1.525,285,1.329,287,0.999,289,1.349,294,0.777,303,2.039,313,1.332,314,1.983,328,0.956,333,1.887,334,1.249,368,0.97,384,0.82,399,1.164,411,0.999,417,1.06,439,1.029,443,1.518,444,1.587,446,1.903,447,1.587,453,1.661,455,2.028,459,1.803,464,1.484,465,1.564,476,2.157,482,0.903,524,1.956,525,1.497,530,1.266,531,1.266,532,1.266,533,1.266,539,1.541,541,1.203,545,1.632,547,1.266,548,1.518,553,1.266,557,1.954,561,1.954,571,1.266,572,1.661,575,1.245,576,1.996,580,0.798,589,1.245,591,0.999,595,1.266,596,1.337,599,1.266,634,0.757,636,1.023,642,2.216,646,2.125,674,0.984,712,1.541,713,1.938,714,1.996,728,0.855,729,1.146,743,1.5,744,1.128,745,0.984,747,2.178,750,2.084,753,1.11,761,1.029,769,1.266,775,1.128,782,1.732,790,0.97,795,1.52,797,2.563,803,1.337,807,1.06,809,1.013,821,1.245,826,1.245,888,1.164,930,1.184,944,1.588,968,1.093,1003,1.686,1056,1.203,1057,1.266,1058,1.266,1059,1.266,1061,2.279,1063,0.956,1065,0.956,1174,0.929,1182,2.178,1197,2.315,1214,1.203,1215,1.203,1232,2.194,1243,1.224,1263,1.146,1265,1.768,1319,2.028,1326,1.564,1428,1.203,1440,2.549,1586,1.245,1610,2.315,1631,1.203,1690,1.245,1734,1.266,1747,1.184,1778,1.266,1798,2.125,1890,0.474,1891,1.245,1892,1.289,1893,1.954,1894,1.686,1895,1.541,1896,1.266,1897,1.245,1898,1.266,1899,0.984,1900,0.891,1901,0.97,1902,2.386,1903,1.245,1904,1.224,1905,1.954,1906,1.289,1907,1.245,1908,1.245,1909,1.11,1910,1.266,1911,1.266,1912,1.74,1913,1.88,1914,1.128,1915,1.785,1916,3.161,1917,1.289,1918,1.857,1919,1.146,1920,2.386,1921,1.289,1922,1.989,1923,1.954,1924,1.954,1925,1.289,1926,1.954,1927,2.305,1928,1.857,1929,1.289,1930,1.093,1931,1.289,1932,1.203,1933,1.203,1934,1.854,1935,1.164,1936,1.289,1937,1.289,1938,0.97,1939,1.289,1940,1.245,1941,1.888,1942,1.954,1943,1.266,1944,1.954,1945,1.289,1946,1.245,1947,1.289,1948,2.525,1949,1.289,1950,1.266,1951,1.289,1952,1.954,1953,1.245,1954,1.11,1955,1.266,1956,1.266,1957,1.146,1958,2.386,1959,1.289,1960,2.011,1961,1.564,1962,1.289,1963,1.289,1964,1.289,1965,1.289,1966,1.266,1967,1.989,1968,1.289,1969,1.266,1970,1.224,1971,1.289,1972,1.289,1973,1.611,1974,1.266,1975,1.881,1976,1.289,1977,1.266,1978,1.266,1979,1.266,1980,1.289,1981,1.289,1982,1.266,1983,1.289,1984,1.093,1985,1.184,1986,1.266,1987,1.289,1988,1.289,1989,1.289,1990,1.289,1991,1.289,1992,1.266,1993,1.245,1994,1.289,1995,1.266,1996,2.636,1997,1.921,1998,1.289,1999,1.989,2000,2.682,2001,1.289,2002,1.266,2003,1.289,2004,1.289,2005,1.289,2006,1.289,2007,1.289,2008,1.635,2009,1.06,2010,1.289,2011,1.289,2012,1.857,2013,1.245,2014,1.245,2015,1.289,2016,1.289,2017,1.857,2018,1.989,2019,1.289,2020,1.289,2021,2.23,2022,1.888,2023,2.23,2024,1.266,2025,1.245,2026,1.029,2027,1.266,2028,1.245,2029,1.224,2030,1.044,2031,1.289,2032,1.11,2220,4.097,2221,3.208,2222,3.208]],["title/interfaces/IChartPalette.html",[40,0.012,1056,1.915]],["body/interfaces/IChartPalette.html",[3,0.123,4,0.116,5,0.116,10,0.269,11,0.434,12,1.236,13,1.302,20,0.005,21,0.838,24,0.326,28,0.347,33,1.185,34,0.574,35,1.566,36,1.566,37,1.302,39,0.393,40,0.025,41,0.814,42,1.71,47,1.733,53,0.728,57,1.625,75,0.846,78,0.002,79,0.002,80,0.002,83,1.526,89,1.217,90,1.308,97,1.634,102,0.856,106,0.833,110,0.452,116,0.789,119,0.655,131,2.386,136,0.867,145,1.82,163,0.958,164,1.796,168,1.3,183,1.193,187,0.559,198,1.521,213,2.012,222,1.396,229,0.958,238,2.287,244,0.905,245,0.944,251,2.5,254,1.226,257,1.466,284,1.526,285,1.33,287,1,289,1.35,294,0.779,303,2.04,313,1.333,314,1.984,328,0.958,333,1.888,334,1.25,368,0.972,384,0.822,399,1.166,411,1,417,1.062,439,1.03,443,1.52,444,1.589,446,1.904,447,1.589,453,1.663,455,2.03,459,1.804,464,1.486,465,1.566,476,2.159,482,0.905,524,1.957,525,1.498,530,1.269,531,1.269,532,1.269,533,1.269,539,1.543,541,1.205,545,1.634,547,1.269,548,1.52,553,1.269,557,1.957,561,1.957,571,1.269,572,1.663,575,1.247,576,1.998,580,0.8,589,1.247,591,1,595,1.269,596,1.339,599,1.269,634,0.758,636,1.024,642,2.217,646,2.127,674,0.986,712,1.543,713,1.94,714,1.998,728,0.856,729,1.148,743,1.501,744,1.13,745,0.986,747,2.18,750,2.086,753,1.112,761,1.03,769,1.267,775,1.13,782,1.733,790,0.972,795,1.521,797,2.565,803,1.339,807,1.062,809,1.015,821,1.247,826,1.247,888,1.166,930,1.186,944,1.59,968,1.095,1003,1.095,1056,1.859,1057,2.685,1058,2.685,1059,2.685,1061,2.937,1063,0.958,1065,0.958,1174,0.931,1182,2.18,1197,2.317,1214,1.205,1215,1.205,1232,2.196,1243,1.226,1263,1.148,1265,1.77,1319,2.03,1326,1.566,1428,1.205,1440,2.551,1586,1.247,1610,2.317,1631,1.205,1690,1.247,1734,1.269,1747,1.186,1778,1.269,1798,2.127,1890,0.475,1891,1.247,1892,1.291,1893,1.957,1894,1.689,1895,1.543,1896,1.269,1897,1.247,1898,1.269,1899,0.986,1900,0.892,1901,0.972,1902,2.388,1903,1.247,1904,1.226,1905,1.957,1906,1.291,1907,1.247,1908,1.247,1909,1.112,1910,1.269,1911,1.269,1912,1.742,1913,1.881,1914,1.13,1915,1.787,1916,3.163,1917,1.291,1918,1.859,1919,1.148,1920,2.388,1921,1.291,1922,1.991,1923,1.957,1924,1.957,1925,1.291,1926,1.957,1927,2.308,1928,1.859,1929,1.291,1930,1.095,1931,1.291,1932,1.205,1933,1.205,1934,1.856,1935,1.166,1936,1.291,1937,1.291,1938,0.972,1939,1.291,1940,1.247,1941,1.891,1942,1.957,1943,1.269,1944,1.957,1945,1.291,1946,1.247,1947,1.291,1948,2.527,1949,1.291,1950,1.269,1951,1.291,1952,1.957,1953,1.247,1954,1.112,1955,1.269,1956,1.269,1957,1.148,1958,2.388,1959,1.291,1960,2.012,1961,1.566,1962,1.291,1963,1.291,1964,1.291,1965,1.291,1966,1.269,1967,1.991,1968,1.291,1969,1.269,1970,1.226,1971,1.291,1972,1.291,1973,1.613,1974,1.269,1975,1.883,1976,1.291,1977,1.269,1978,1.269,1979,1.269,1980,1.291,1981,1.291,1982,1.269,1983,1.291,1984,1.095,1985,1.186,1986,1.269,1987,1.291,1988,1.291,1989,1.291,1990,1.291,1991,1.291,1992,1.269,1993,1.247,1994,1.291,1995,1.269,1996,1.247,1997,1.247,1998,1.291,1999,1.991,2000,2.685,2001,1.291,2002,1.269,2003,1.291,2004,1.291,2005,1.291,2006,1.291,2007,1.291,2008,1.638,2009,1.062,2010,1.291,2011,1.291,2012,1.859,2013,1.247,2014,1.247,2015,1.291,2016,1.291,2017,1.859,2018,1.991,2019,1.291,2020,1.291,2021,2.232,2022,1.891,2023,2.232,2024,1.269,2025,1.247,2026,1.03,2027,1.269,2028,1.247,2029,1.226,2030,1.046,2031,1.291,2032,1.112]],["title/interfaces/IChartPlugin.html",[40,0.012,548,1.566]],["body/interfaces/IChartPlugin.html",[3,0.12,4,0.112,5,0.112,10,0.265,11,0.426,12,1.232,13,1.297,17,0.935,20,0.005,21,0.826,24,0.308,28,0.345,33,1.156,34,0.556,35,1.528,36,1.528,37,1.271,39,0.392,40,0.025,41,0.806,42,1.685,47,1.708,53,0.706,57,1.605,75,0.829,78,0.002,79,0.002,80,0.002,83,1.496,85,0.506,89,1.188,90,1.373,97,1.602,102,0.83,106,0.807,110,0.441,116,0.765,119,0.635,131,2.361,136,0.862,145,1.806,163,0.928,164,1.777,168,1.293,179,1.363,183,1.231,187,0.542,198,1.62,213,1.983,222,1.362,229,0.928,238,2.254,244,0.877,245,0.915,251,2.479,254,1.188,257,1.437,273,1.325,284,1.496,285,1.311,287,0.969,289,1.328,294,0.754,303,2.014,313,1.311,314,1.956,328,0.928,333,1.857,334,1.225,368,0.941,384,0.796,399,1.13,411,0.969,417,1.029,439,0.998,443,2.221,444,2.457,446,2.327,447,2.322,453,1.623,455,1.99,459,1.778,464,1.778,465,1.528,476,2.495,482,0.877,524,1.929,525,1.462,530,1.229,531,1.229,532,1.229,533,1.229,539,1.506,541,1.168,545,1.602,547,1.229,548,1.819,553,1.229,557,1.91,561,1.91,571,1.229,572,1.623,575,1.208,576,1.965,580,0.775,589,1.208,591,0.969,595,1.229,596,1.306,599,1.229,634,0.734,636,0.999,642,2.189,646,2.085,674,0.955,712,2.082,713,2.144,714,1.965,728,0.83,729,1.112,743,1.476,744,1.095,745,0.955,747,2.144,750,2.051,753,1.078,761,0.998,769,1.237,775,1.7,782,1.708,790,0.941,795,1.496,797,2.532,803,1.306,807,1.029,809,0.984,821,1.208,826,1.208,888,1.13,930,1.149,944,1.559,968,1.061,1003,1.061,1056,1.168,1057,1.229,1058,1.229,1059,1.229,1061,2.244,1063,0.928,1065,0.928,1174,0.902,1182,2.144,1197,2.278,1214,1.168,1215,1.168,1232,2.153,1243,1.188,1263,1.112,1265,1.728,1319,1.99,1326,1.528,1428,1.168,1440,2.508,1586,1.208,1610,2.278,1631,1.168,1690,1.208,1734,1.229,1747,1.149,1778,1.229,1798,2.085,1890,0.46,1891,1.208,1892,1.251,1893,1.91,1894,1.648,1895,1.846,1896,1.229,1897,1.208,1898,1.229,1899,0.955,1900,0.865,1901,0.941,1902,2.341,1903,1.208,1904,1.188,1905,1.91,1906,1.251,1907,1.208,1908,1.208,1909,1.078,1910,1.229,1911,1.229,1912,1.7,1913,1.857,1914,1.095,1915,1.757,1916,3.133,1917,1.251,1918,1.814,1919,1.112,1920,2.341,1921,1.251,1922,1.943,1923,1.91,1924,1.91,1925,1.251,1926,1.91,1927,2.262,1928,1.814,1929,1.251,1930,1.061,1931,1.251,1932,1.168,1933,1.168,1934,1.819,1935,1.13,1936,1.251,1937,1.251,1938,0.941,1939,1.251,1940,1.208,1941,1.845,1942,1.91,1943,1.229,1944,1.91,1945,1.251,1946,1.208,1947,1.251,1948,2.877,1949,1.251,1950,1.229,1951,1.251,1952,1.91,1953,1.208,1954,1.078,1955,1.229,1956,1.229,1957,1.112,1958,2.341,1959,1.251,1960,1.983,1961,1.528,1962,1.251,1963,1.251,1964,1.251,1965,1.251,1966,1.229,1967,1.943,1968,1.251,1969,1.229,1970,1.188,1971,1.251,1972,1.251,1973,1.574,1974,1.229,1975,1.846,1976,1.251,1977,1.229,1978,1.229,1979,1.229,1980,1.251,1981,1.251,1982,1.229,1983,1.251,1984,1.061,1985,1.149,1986,1.229,1987,1.251,1988,1.251,1989,1.251,1990,1.251,1991,1.251,1992,1.229,1993,1.208,1994,1.251,1995,1.229,1996,1.208,1997,1.208,1998,1.251,1999,2.687,2000,3.264,2001,1.943,2002,1.91,2003,1.943,2004,1.943,2005,1.251,2006,1.251,2007,1.251,2008,1.598,2009,1.029,2010,1.251,2011,1.251,2012,1.814,2013,1.208,2014,1.208,2015,1.251,2016,1.251,2017,1.814,2018,1.943,2019,1.251,2020,1.251,2021,2.188,2022,1.845,2023,2.188,2024,1.229,2025,1.208,2026,0.998,2027,1.229,2028,1.208,2029,1.188,2030,1.013,2031,1.251,2032,1.078,2223,3.114,2224,3.114,2225,3.114,2226,3.114]],["title/interfaces/IChartSeries.html",[40,0.012,576,1.5]],["body/interfaces/IChartSeries.html",[3,0.121,4,0.113,5,0.113,10,0.266,11,0.428,12,1.241,13,1.303,20,0.005,21,0.829,22,0.69,24,0.33,28,0.346,33,1.164,34,0.561,35,1.538,36,1.538,37,1.279,39,0.393,40,0.025,41,0.83,42,1.867,47,1.892,53,0.711,57,1.61,75,0.833,78,0.002,79,0.002,80,0.002,83,1.834,85,0.511,89,1.464,90,1.324,97,1.61,102,0.836,106,0.814,110,0.444,116,0.771,119,0.64,131,2.368,136,0.863,145,1.81,163,0.935,164,1.782,168,1.295,183,1.187,187,0.546,198,1.626,213,2.106,222,1.371,229,0.935,238,2.262,244,0.884,245,0.922,251,2.484,254,1.197,257,1.444,284,1.694,285,1.452,287,0.977,289,1.727,294,0.76,303,2.363,313,1.316,314,1.963,328,0.935,333,2.364,334,1.232,368,0.949,384,0.803,399,1.139,411,0.977,417,1.037,439,1.006,443,1.493,444,1.561,446,1.884,447,1.561,453,1.633,455,2,459,1.785,464,1.464,465,1.538,476,2.135,482,0.884,524,1.936,525,1.472,530,1.239,531,1.239,532,1.239,533,1.239,539,1.515,541,1.177,545,1.61,547,1.239,548,1.493,553,1.239,557,1.922,561,1.922,571,1.239,572,1.633,575,1.218,576,2.135,580,0.781,589,1.218,591,0.977,595,1.239,596,1.315,599,1.239,634,0.74,636,1.006,642,2.196,646,2.096,674,1.493,712,1.515,713,1.911,714,1.973,728,0.836,729,1.121,743,1.482,744,1.103,745,1.493,747,2.33,750,2.06,753,1.086,761,1.006,769,1.245,775,1.103,782,1.714,790,0.949,795,1.502,797,2.541,803,1.315,807,1.037,809,1.538,821,1.218,826,1.218,888,1.139,930,1.158,944,1.567,968,1.069,1003,1.069,1056,1.177,1057,1.239,1058,1.239,1059,1.239,1061,2.253,1063,0.935,1065,0.935,1174,0.909,1182,2.153,1197,2.288,1214,1.177,1215,1.177,1232,2.164,1243,1.197,1263,1.121,1265,1.738,1319,2,1326,1.538,1428,1.177,1440,2.726,1586,1.218,1610,2.288,1631,1.826,1690,1.218,1734,1.922,1747,1.158,1778,1.239,1798,2.096,1890,0.464,1891,1.218,1892,1.261,1893,1.922,1894,1.658,1895,1.515,1896,1.239,1897,1.218,1898,1.239,1899,0.963,1900,0.872,1901,0.949,1902,2.353,1903,1.218,1904,1.197,1905,1.922,1906,1.261,1907,1.218,1908,1.218,1909,1.086,1910,1.239,1911,1.239,1912,1.711,1913,1.863,1914,1.103,1915,1.765,1916,3.141,1917,1.261,1918,1.826,1919,1.121,1920,2.353,1921,1.261,1922,1.956,1923,1.922,1924,1.922,1925,1.261,1926,1.922,1927,2.274,1928,1.826,1929,1.261,1930,1.069,1931,1.261,1932,1.177,1933,1.177,1934,1.829,1935,1.139,1936,1.261,1937,1.261,1938,0.949,1939,1.261,1940,1.218,1941,1.857,1942,1.922,1943,1.239,1944,1.922,1945,1.261,1946,1.218,1947,1.261,1948,2.503,1949,1.261,1950,1.239,1951,1.261,1952,1.922,1953,1.218,1954,1.086,1955,1.239,1956,1.239,1957,1.121,1958,2.353,1959,1.261,1960,1.991,1961,1.538,1962,1.261,1963,1.261,1964,1.261,1965,1.261,1966,1.239,1967,2.395,1968,1.261,1969,1.239,1970,1.197,1971,1.261,1972,1.261,1973,1.584,1974,1.239,1975,2.262,1976,1.261,1977,1.239,1978,1.239,1979,1.239,1980,1.261,1981,1.261,1982,1.239,1983,1.261,1984,1.658,1985,1.796,1986,1.922,1987,1.956,1988,1.956,1989,1.956,1990,1.956,1991,1.956,1992,1.239,1993,1.218,1994,1.261,1995,1.239,1996,1.218,1997,1.218,1998,1.261,1999,1.956,2000,2.651,2001,1.261,2002,1.239,2003,1.261,2004,1.261,2005,1.261,2006,1.261,2007,1.261,2008,1.608,2009,1.037,2010,1.261,2011,1.261,2012,1.826,2013,1.218,2014,1.218,2015,1.261,2016,1.261,2017,1.826,2018,1.956,2019,1.261,2020,1.261,2021,2.199,2022,1.857,2023,2.199,2024,1.239,2025,1.218,2026,1.006,2027,1.239,2028,1.218,2029,1.197,2030,1.022,2031,1.261,2032,1.086]],["title/interfaces/IChartViewStatusEventPayload.html",[40,0.012,888,1.853]],["body/interfaces/IChartViewStatusEventPayload.html",[3,0.123,4,0.115,5,0.115,10,0.269,11,0.433,12,1.236,13,1.301,20,0.005,21,0.836,24,0.311,28,0.347,33,1.181,34,0.571,35,1.56,36,1.56,37,1.298,39,0.393,40,0.025,41,0.813,42,1.707,47,1.73,53,0.725,57,1.622,75,0.844,78,0.002,79,0.002,80,0.002,83,1.522,85,0.52,89,1.481,90,1.307,97,1.63,102,0.852,106,0.829,110,0.45,116,0.786,119,0.652,131,2.383,136,0.866,145,1.862,163,1.472,164,1.793,168,1.299,183,1.192,187,0.556,198,1.517,213,2.008,222,1.391,229,0.953,238,2.282,244,0.901,245,0.94,251,2.497,254,1.22,257,1.462,284,1.522,285,1.327,287,0.996,289,1.347,294,0.775,303,2.036,313,1.33,314,1.98,328,0.953,333,1.884,334,1.246,368,0.967,384,0.818,399,1.161,411,0.996,417,1.632,439,1.026,443,1.515,444,1.584,446,1.901,447,1.584,453,1.657,455,2.024,459,1.8,464,1.481,465,1.56,476,2.154,482,0.901,524,2.065,525,1.493,530,1.263,531,1.263,532,1.263,533,1.263,539,1.538,541,1.2,545,1.63,547,1.263,548,1.515,553,1.263,557,1.95,561,1.95,571,1.263,572,1.657,575,1.241,576,1.993,580,0.796,589,1.241,591,0.996,595,1.263,596,1.334,599,1.263,634,0.755,636,1.02,642,2.213,646,2.121,674,0.981,712,1.538,713,2.351,714,1.993,728,0.852,729,1.143,743,1.497,744,1.125,745,0.981,747,2.175,750,2.249,753,1.107,761,1.026,769,1.263,775,1.125,782,1.73,790,0.967,795,1.517,797,2.669,803,1.334,807,1.057,809,1.011,821,1.241,826,1.241,888,1.793,930,2.503,944,1.585,968,1.09,1003,1.09,1056,1.2,1057,1.263,1058,1.263,1059,1.263,1061,2.276,1063,0.953,1065,0.953,1174,0.927,1182,2.175,1197,2.311,1214,1.2,1215,1.2,1232,2.813,1243,1.22,1263,1.143,1265,1.764,1319,2.024,1326,1.56,1428,1.2,1440,2.545,1586,1.241,1610,2.311,1631,1.2,1690,1.241,1734,1.263,1747,1.18,1778,1.95,1798,2.121,1890,0.473,1891,1.241,1892,1.285,1893,1.95,1894,1.683,1895,1.538,1896,1.263,1897,1.241,1898,1.263,1899,0.981,1900,0.888,1901,0.967,1902,2.382,1903,1.241,1904,1.22,1905,1.95,1906,1.285,1907,1.241,1908,1.241,1909,1.107,1910,1.263,1911,1.263,1912,1.736,1913,1.878,1914,1.125,1915,1.783,1916,3.226,1917,1.285,1918,1.853,1919,1.143,1920,2.382,1921,1.285,1922,1.985,1923,1.95,1924,1.95,1925,1.285,1926,1.95,1927,2.301,1928,1.853,1929,1.285,1930,1.09,1931,1.285,1932,1.2,1933,1.2,1934,1.851,1935,1.161,1936,1.285,1937,1.285,1938,0.967,1939,1.285,1940,1.241,1941,1.884,1942,1.95,1943,1.263,1944,1.95,1945,1.285,1946,1.241,1947,1.285,1948,2.522,1949,1.285,1950,1.263,1951,1.285,1952,1.95,1953,1.241,1954,1.107,1955,1.263,1956,1.263,1957,1.143,1958,2.382,1959,1.285,1960,2.122,1961,1.56,1962,1.285,1963,1.285,1964,1.285,1965,1.285,1966,1.263,1967,1.985,1968,1.285,1969,1.263,1970,1.22,1971,1.285,1972,1.285,1973,1.608,1974,1.263,1975,1.878,1976,1.285,1977,1.263,1978,1.263,1979,1.263,1980,1.285,1981,1.285,1982,1.263,1983,1.285,1984,1.09,1985,1.18,1986,1.263,1987,1.285,1988,1.285,1989,1.285,1990,1.285,1991,1.285,1992,1.263,1993,1.241,1994,1.285,1995,1.263,1996,1.241,1997,1.241,1998,1.285,1999,1.985,2000,2.678,2001,1.285,2002,1.263,2003,1.285,2004,1.285,2005,1.285,2006,1.285,2007,1.285,2008,1.632,2009,1.057,2010,1.285,2011,1.285,2012,1.853,2013,1.241,2014,1.241,2015,1.285,2016,1.985,2017,2.545,2018,2.726,2019,1.985,2020,1.985,2021,2.226,2022,1.884,2023,2.226,2024,1.263,2025,1.241,2026,1.026,2027,1.263,2028,1.241,2029,1.22,2030,1.041,2031,1.285,2032,1.107]],["title/interfaces/IDataAccessors.html",[35,1.612,40,0.012]],["body/interfaces/IDataAccessors.html",[3,0.125,4,0.117,5,0.117,10,0.241,11,0.318,12,1.237,13,1.304,17,0.453,20,0.005,21,0.841,24,0.302,28,0.348,33,1.454,34,0.579,35,1.922,36,1.576,37,1.311,39,0.394,40,0.025,41,0.817,42,1.717,47,1.74,53,0.735,57,1.631,75,0.955,78,0.002,79,0.002,80,0.002,83,1.535,89,1.225,90,1.31,97,1.643,102,0.864,106,0.84,110,0.455,116,0.796,119,0.661,131,2.393,136,0.874,145,1.824,163,0.966,164,1.801,168,1.303,183,1.195,187,0.564,198,1.528,213,2.02,222,1.405,229,0.966,238,2.296,244,0.913,245,0.952,251,2.506,254,1.237,257,1.474,284,1.535,285,1.335,287,1.009,289,1.357,294,0.785,303,2.047,313,1.339,314,1.992,328,0.966,333,1.897,334,1.257,368,0.98,384,0.829,399,1.177,411,1.009,417,1.071,439,1.039,443,1.531,444,1.6,446,1.912,447,1.6,453,1.674,455,2.041,459,1.811,464,1.494,465,1.576,476,2.167,482,0.913,524,1.965,525,1.509,530,1.28,531,1.28,532,1.28,533,1.28,539,1.553,541,1.216,545,1.643,547,1.28,548,1.531,553,1.28,557,1.97,561,1.97,571,1.28,572,1.674,575,1.258,576,2.007,580,0.807,589,1.258,591,1.009,595,1.28,596,1.348,599,1.28,634,0.765,636,1.031,642,2.225,646,2.139,674,0.994,712,1.553,713,1.951,714,2.007,728,0.864,729,1.158,743,1.508,744,1.14,745,0.994,747,2.191,750,2.096,753,1.122,761,1.039,769,1.276,775,1.14,782,1.838,790,0.98,795,1.528,797,2.574,803,1.348,807,1.071,809,1.024,821,1.258,826,1.258,888,1.177,930,1.196,944,1.599,968,1.105,1003,1.105,1056,1.216,1057,1.28,1058,1.28,1059,1.28,1061,2.292,1063,0.966,1065,0.966,1174,0.939,1182,2.191,1197,2.328,1214,1.216,1215,1.216,1232,2.208,1243,1.237,1263,1.158,1265,1.782,1319,2.041,1326,1.576,1428,1.216,1440,2.563,1586,1.258,1610,2.328,1631,1.216,1690,1.258,1734,1.28,1747,1.196,1778,1.28,1798,2.139,1890,0.479,1891,1.258,1892,1.303,1893,1.97,1894,1.7,1895,1.553,1896,1.28,1897,1.258,1898,1.28,1899,0.994,1900,0.9,1901,0.98,1902,2.402,1903,1.258,1904,1.237,1905,1.97,1906,1.303,1907,1.258,1908,1.258,1909,1.122,1910,1.28,1911,1.28,1912,1.754,1913,1.888,1914,1.14,1915,1.795,1916,3.171,1917,1.303,1918,1.872,1919,1.158,1920,2.402,1921,1.303,1922,2.005,1923,1.97,1924,1.97,1925,1.303,1926,1.97,1927,2.321,1928,1.872,1929,1.303,1930,1.105,1931,1.303,1932,1.216,1933,1.216,1934,1.866,1935,1.177,1936,1.303,1937,1.303,1938,0.98,1939,1.303,1940,1.258,1941,1.904,1942,1.97,1943,1.28,1944,1.97,1945,1.303,1946,1.258,1947,1.303,1948,2.536,1949,1.303,1950,1.28,1951,1.303,1952,1.97,1953,1.258,1954,1.122,1955,1.28,1956,1.28,1957,1.158,1958,2.402,1959,1.303,1960,2.02,1961,1.576,1962,1.303,1963,1.303,1964,1.303,1965,1.303,1966,1.28,1967,2.005,1968,1.303,1969,1.28,1970,1.237,1971,1.303,1972,1.303,1973,1.624,1974,1.28,1975,1.894,1976,1.303,1977,1.28,1978,1.28,1979,1.28,1980,1.303,1981,1.303,1982,1.28,1983,1.303,1984,1.105,1985,1.196,1986,1.28,1987,1.303,1988,1.303,1989,1.303,1990,1.303,1991,1.303,1992,1.28,1993,1.258,1994,1.303,1995,1.28,1996,1.258,1997,1.258,1998,1.303,1999,2.005,2000,2.697,2001,1.303,2002,1.28,2003,1.303,2004,1.303,2005,1.303,2006,1.303,2007,1.303,2008,1.649,2009,1.071,2010,1.303,2011,1.303,2012,1.872,2013,1.258,2014,1.258,2015,1.303,2016,1.303,2017,1.872,2018,2.005,2019,1.303,2020,1.303,2021,2.245,2022,1.904,2023,2.245,2024,1.28,2025,1.258,2026,1.039,2027,1.28,2028,1.258,2029,1.237,2030,1.055,2031,1.303,2032,1.122,2227,1.748,2228,3.242]],["title/interfaces/IDataPoint.html",[40,0.012,1197,1.739]],["body/interfaces/IDataPoint.html",[3,0.122,4,0.114,5,0.114,10,0.33,11,0.43,12,1.249,13,1.309,20,0.005,21,0.833,22,0.695,24,0.336,28,0.346,33,1.172,34,0.566,35,1.549,36,1.549,37,1.289,39,0.393,40,0.025,41,0.811,42,1.699,47,1.722,53,0.718,57,1.616,75,0.839,78,0.002,79,0.002,80,0.002,83,1.513,85,0.516,89,1.204,90,1.304,97,1.62,102,0.844,106,0.822,110,0.447,116,0.778,119,0.646,131,2.375,136,0.876,145,1.814,163,0.945,164,1.788,168,1.316,183,1.189,187,0.551,198,1.51,213,2.205,222,2.056,229,0.945,238,2.589,244,0.893,245,0.931,251,2.536,254,1.209,257,1.453,284,1.513,285,1.322,287,0.987,289,1.341,294,0.768,303,2.029,313,1.323,314,1.972,328,0.945,333,1.875,334,1.239,368,0.958,384,0.811,399,1.151,411,0.987,417,1.047,439,1.016,443,1.504,444,1.572,446,1.893,447,1.572,453,1.645,455,2.012,459,1.793,464,1.473,465,1.549,476,2.145,482,0.893,524,1.945,525,1.483,530,1.251,531,1.251,532,1.251,533,1.251,539,1.527,541,1.189,545,1.62,547,1.251,548,1.504,553,1.251,557,1.936,561,1.936,571,1.251,572,1.645,575,1.23,576,1.983,580,0.789,589,1.23,591,0.987,595,1.251,596,1.325,599,1.251,634,0.748,636,1.013,642,2.205,646,2.109,674,0.972,712,1.527,713,1.923,714,1.983,728,0.844,729,1.132,743,1.49,744,1.114,745,0.972,747,2.165,750,2.071,753,1.097,761,1.016,769,1.254,775,1.114,782,1.722,790,0.958,795,1.51,797,2.551,803,1.325,807,1.047,809,1.001,821,1.23,826,1.23,888,1.151,930,1.169,944,2.116,968,1.08,1003,1.08,1056,1.189,1057,1.251,1058,1.251,1059,1.251,1061,2.265,1063,0.945,1065,0.945,1174,0.918,1182,2.165,1197,2.487,1214,1.189,1215,1.189,1232,2.177,1243,1.209,1263,1.132,1265,1.752,1319,2.449,1326,1.549,1428,1.189,1440,2.739,1586,1.23,1610,2.3,1631,1.189,1690,1.23,1734,1.251,1747,1.169,1778,1.251,1798,2.373,1890,0.469,1891,1.23,1892,1.274,1893,1.936,1894,1.671,1895,1.527,1896,1.251,1897,1.23,1898,1.251,1899,0.972,1900,0.88,1901,0.958,1902,2.368,1903,1.23,1904,1.209,1905,1.936,1906,1.274,1907,1.23,1908,1.23,1909,1.097,1910,1.251,1911,1.251,1912,1.724,1913,1.87,1914,1.114,1915,1.774,1916,3.15,1917,1.274,1918,1.84,1919,1.132,1920,2.368,1921,1.274,1922,1.97,1923,1.936,1924,1.936,1925,1.274,1926,1.936,1927,2.288,1928,1.84,1929,1.274,1930,1.08,1931,1.274,1932,1.189,1933,1.189,1934,1.84,1935,1.151,1936,1.274,1937,1.274,1938,0.958,1939,1.274,1940,1.23,1941,1.871,1942,1.936,1943,1.251,1944,1.936,1945,1.274,1946,1.23,1947,1.274,1948,2.513,1949,1.274,1950,1.251,1951,1.274,1952,1.936,1953,1.23,1954,1.097,1955,1.251,1956,1.251,1957,1.132,1958,2.368,1959,1.274,1960,2,1961,1.549,1962,1.274,1963,1.274,1964,1.274,1965,1.274,1966,1.251,1967,1.97,1968,1.274,1969,1.251,1970,1.209,1971,1.274,1972,1.274,1973,1.596,1974,1.251,1975,1.867,1976,1.274,1977,1.251,1978,1.251,1979,1.251,1980,1.274,1981,1.274,1982,1.251,1983,1.274,1984,1.08,1985,1.169,1986,1.251,1987,1.274,1988,1.274,1989,1.274,1990,1.274,1991,1.274,1992,1.251,1993,1.23,1994,1.274,1995,1.251,1996,1.23,1997,1.23,1998,1.274,1999,1.97,2000,2.665,2001,1.274,2002,1.251,2003,1.274,2004,1.274,2005,1.274,2006,1.274,2007,1.274,2008,1.62,2009,1.047,2010,1.274,2011,1.274,2012,1.84,2013,1.23,2014,1.23,2015,1.274,2016,1.274,2017,1.84,2018,1.97,2019,1.274,2020,1.274,2021,2.213,2022,1.871,2023,2.213,2024,1.251,2025,1.23,2026,1.016,2027,1.251,2028,1.23,2029,1.209,2030,1.032,2031,1.274,2032,1.097]],["title/interfaces/IDataPointsPayload.html",[40,0.012,453,1.712]],["body/interfaces/IDataPointsPayload.html",[3,0.124,4,0.116,5,0.116,10,0.24,11,0.316,12,1.242,13,1.307,17,0.45,20,0.005,21,0.839,24,0.301,28,0.348,33,1.186,34,0.575,35,1.568,36,1.568,37,1.304,39,0.393,40,0.025,41,0.815,42,1.711,47,1.734,53,0.729,57,1.626,75,0.847,78,0.002,79,0.002,80,0.002,83,1.528,85,0.523,89,1.219,90,1.308,97,1.636,102,0.857,106,0.834,110,0.452,116,0.79,119,0.656,131,2.387,136,0.873,145,1.821,163,0.959,164,1.797,168,1.301,183,1.193,187,0.56,198,1.522,213,2.014,222,1.397,229,0.959,238,2.52,244,0.906,245,0.946,251,2.546,254,1.228,257,1.467,284,1.528,285,1.331,287,1.545,289,1.352,294,0.78,303,2.041,313,1.334,314,1.986,328,0.959,333,1.89,334,1.251,368,0.973,384,0.823,399,1.168,411,1.002,417,1.063,439,1.032,443,1.522,444,1.591,446,1.906,447,1.591,453,2.032,455,2.283,459,1.805,464,1.487,465,1.568,476,2.16,482,0.906,524,1.959,525,1.5,530,1.271,531,1.271,532,1.271,533,1.271,539,1.545,541,1.207,545,1.636,547,1.271,548,1.522,553,1.271,557,1.959,561,1.959,571,1.271,572,1.665,575,1.249,576,2,580,0.801,589,1.249,591,1.002,595,1.271,596,1.34,599,1.271,634,0.759,636,1.025,642,2.219,646,2.129,674,0.987,712,1.545,713,1.942,714,2,728,0.857,729,1.15,743,1.502,744,1.131,745,0.987,747,2.182,750,2.256,753,1.114,761,1.032,769,1.549,775,1.131,782,1.832,790,0.973,795,1.522,797,2.567,803,1.34,807,1.64,809,1.017,821,1.249,826,1.249,888,1.168,930,1.188,944,1.591,968,1.097,1003,1.097,1056,1.207,1057,1.271,1058,1.271,1059,1.271,1061,2.283,1063,0.959,1065,0.959,1174,0.932,1182,2.182,1197,2.647,1214,1.207,1215,1.207,1232,2.198,1243,1.228,1263,1.15,1265,1.772,1319,2.032,1326,1.568,1428,1.207,1440,2.553,1586,1.249,1610,2.319,1631,1.207,1690,1.249,1734,1.271,1747,1.188,1778,1.271,1798,2.129,1890,0.476,1891,1.249,1892,1.293,1893,1.959,1894,1.691,1895,1.545,1896,1.271,1897,1.249,1898,1.271,1899,0.987,1900,0.894,1901,0.973,1902,2.391,1903,1.249,1904,1.228,1905,1.959,1906,1.293,1907,1.249,1908,1.249,1909,1.114,1910,1.271,1911,1.271,1912,1.744,1913,1.882,1914,1.131,1915,1.789,1916,3.164,1917,1.293,1918,1.861,1919,1.15,1920,2.391,1921,1.293,1922,1.994,1923,1.959,1924,1.959,1925,1.293,1926,1.959,1927,2.31,1928,1.861,1929,1.293,1930,1.097,1931,1.293,1932,1.207,1933,1.207,1934,1.858,1935,1.168,1936,1.293,1937,1.293,1938,0.973,1939,1.293,1940,1.249,1941,1.893,1942,1.959,1943,1.271,1944,1.959,1945,1.293,1946,1.249,1947,1.293,1948,2.528,1949,1.293,1950,1.271,1951,1.293,1952,1.959,1953,1.249,1954,1.114,1955,1.271,1956,1.271,1957,1.15,1958,2.391,1959,1.293,1960,2.014,1961,1.568,1962,1.293,1963,1.293,1964,1.293,1965,1.293,1966,1.271,1967,1.994,1968,1.293,1969,1.271,1970,1.228,1971,1.293,1972,1.293,1973,1.615,1974,1.271,1975,1.885,1976,1.293,1977,1.271,1978,1.271,1979,1.271,1980,1.293,1981,1.293,1982,1.271,1983,1.293,1984,1.097,1985,1.188,1986,1.271,1987,1.293,1988,1.293,1989,1.293,1990,1.293,1991,1.293,1992,1.271,1993,1.249,1994,1.293,1995,1.271,1996,1.249,1997,1.249,1998,1.293,1999,1.994,2000,2.687,2001,1.293,2002,1.271,2003,1.293,2004,1.293,2005,1.293,2006,1.293,2007,1.293,2008,2.001,2009,1.063,2010,1.293,2011,1.293,2012,1.861,2013,1.249,2014,1.249,2015,1.293,2016,1.293,2017,1.861,2018,1.994,2019,1.293,2020,1.293,2021,2.234,2022,2.31,2023,2.234,2024,1.271,2025,1.249,2026,1.032,2027,1.271,2028,1.249,2029,1.228,2030,1.048,2031,1.293,2032,1.114,2227,1.735,2229,3.218]],["title/interfaces/IDataSeries.html",[40,0.012,213,1.398]],["body/interfaces/IDataSeries.html",[3,0.12,4,0.113,5,0.113,10,0.265,11,0.489,12,1.255,13,1.311,17,0.437,20,0.005,21,0.827,24,0.323,28,0.345,33,1.159,34,0.558,35,1.531,36,1.531,37,1.274,39,0.392,40,0.025,41,0.807,42,1.688,47,1.71,53,0.708,57,1.733,75,0.831,78,0.002,79,0.002,80,0.002,83,1.499,85,0.508,89,1.19,90,1.312,97,1.605,102,0.832,106,0.809,110,0.442,116,0.767,119,0.637,131,2.364,136,0.879,145,1.807,163,0.93,164,1.956,168,1.294,183,1.185,187,0.543,198,1.622,213,2.101,222,1.365,229,0.93,238,2.257,244,0.879,245,1.424,251,2.526,254,1.849,257,1.439,284,1.499,285,1.389,287,0.972,289,1.33,294,1.174,303,2.016,313,1.312,314,1.958,328,0.93,333,1.86,334,1.227,368,1.465,384,0.798,399,1.133,411,0.972,417,1.032,439,1.001,443,1.487,444,1.554,446,1.879,447,1.554,453,1.626,455,2.247,459,1.78,464,1.459,465,1.531,476,2.13,482,0.879,524,1.932,525,1.465,530,1.233,531,1.233,532,1.233,533,1.233,539,1.509,541,1.171,545,1.605,547,1.233,548,1.487,553,1.233,557,1.914,561,1.914,571,1.233,572,1.626,575,1.211,576,1.968,580,0.777,589,1.211,591,0.972,595,1.233,596,1.309,599,1.233,634,0.736,636,1.001,642,2.191,646,2.549,674,0.958,712,1.509,713,1.905,714,1.968,728,0.832,729,1.115,743,1.478,744,1.098,745,0.958,747,2.147,750,2.054,753,1.08,761,1.001,769,1.854,775,1.098,782,1.81,790,0.944,795,1.498,797,2.535,803,1.309,807,1.032,809,0.986,821,1.881,826,1.211,888,1.133,930,1.152,944,1.561,968,1.064,1003,1.064,1056,1.171,1057,1.233,1058,1.233,1059,1.233,1061,2.247,1063,1.445,1065,0.93,1174,0.904,1182,2.147,1197,2.282,1214,1.171,1215,1.171,1232,2.157,1243,1.191,1263,1.115,1265,1.731,1319,1.993,1326,2.116,1428,1.171,1440,2.512,1586,1.211,1610,2.282,1631,1.171,1690,1.211,1734,1.233,1747,1.152,1778,1.233,1798,2.354,1890,0.462,1891,1.211,1892,1.254,1893,2.345,1894,1.651,1895,1.509,1896,1.233,1897,1.211,1898,1.233,1899,0.958,1900,0.867,1901,0.944,1902,2.345,1903,1.211,1904,1.191,1905,1.914,1906,1.254,1907,1.211,1908,1.211,1909,1.08,1910,1.233,1911,1.233,1912,1.704,1913,1.859,1914,1.098,1915,1.76,1916,3.136,1917,1.254,1918,1.818,1919,1.115,1920,2.345,1921,1.254,1922,1.947,1923,1.914,1924,1.914,1925,1.254,1926,1.914,1927,2.266,1928,1.818,1929,1.254,1930,1.064,1931,1.254,1932,1.171,1933,1.171,1934,1.823,1935,1.133,1936,1.254,1937,1.254,1938,0.944,1939,1.254,1940,1.211,1941,1.849,1942,1.914,1943,1.233,1944,1.914,1945,1.254,1946,1.211,1947,1.254,1948,2.497,1949,1.254,1950,1.233,1951,1.254,1952,1.914,1953,1.211,1954,1.08,1955,1.233,1956,1.233,1957,1.115,1958,2.345,1959,1.254,1960,1.986,1961,1.531,1962,1.254,1963,1.254,1964,1.254,1965,1.254,1966,1.233,1967,2.387,1968,1.947,1969,1.914,1970,1.849,1971,1.947,1972,1.947,1973,2.18,1974,1.914,1975,2.085,1976,1.947,1977,1.914,1978,1.914,1979,1.914,1980,1.947,1981,1.947,1982,1.914,1983,1.947,1984,1.064,1985,1.152,1986,1.233,1987,1.254,1988,1.254,1989,1.254,1990,1.254,1991,1.254,1992,1.233,1993,1.211,1994,1.254,1995,1.233,1996,1.211,1997,1.211,1998,1.254,1999,1.947,2000,2.644,2001,1.254,2002,1.233,2003,1.254,2004,1.254,2005,1.254,2006,1.254,2007,1.254,2008,1.602,2009,1.032,2010,1.254,2011,1.254,2012,1.818,2013,1.211,2014,1.211,2015,1.254,2016,1.254,2017,1.818,2018,1.947,2019,1.254,2020,1.254,2021,2.192,2022,1.849,2023,2.192,2024,1.233,2025,1.211,2026,1.001,2027,1.233,2028,1.211,2029,1.191,2030,1.016,2031,1.254,2032,1.08,2227,1.683,2230,3.122]],["title/interfaces/IDimensionConfig.html",[40,0.012,139,2.296]],["body/interfaces/IDimensionConfig.html",[0,0.049,3,0.11,4,0.103,5,0.103,10,0.113,11,0.289,17,1.123,19,1.526,20,0.005,21,0.793,22,1.049,24,0.327,28,0.309,39,0.343,40,0.023,41,0.441,52,1.082,75,0.4,78,0.001,79,0.002,80,0.001,83,2.5,85,1.131,89,1.568,90,0.785,95,3.427,100,1.433,101,3.331,102,1.206,103,3.967,104,1.401,105,1.401,106,1.456,108,4.063,110,0.813,111,2.695,112,1.933,114,3.209,115,3.014,116,2.031,124,3.847,126,1.054,135,3.467,136,0.582,139,4.109,142,2.231,145,1.887,148,2.931,154,0.946,155,2.267,157,1.433,158,2.44,159,1.584,160,3.736,161,1.584,162,1.584,163,1.903,165,1.584,168,1.4,170,2.44,171,2.379,172,1.543,179,2.002,182,2.816,183,0.373,184,2.216,185,3.356,186,2.379,198,2.02,218,1.13,257,2.213,258,1.314,273,1.24,285,0.518,289,1.268,301,1.582,313,1.723,314,2.093,321,0.841,334,1.601,384,1.892,404,3.766,446,0.742,459,0.703,464,1.112,488,1.039,489,1.996,524,1.496,525,1.698,529,1.468,539,2.736,545,2.374,548,1.723,552,2.993,580,0.712,590,1.468,591,1.409,592,2.75,593,1.543,596,0.773,597,1.022,598,1.504,627,1.238,634,2.316,636,2.042,642,1.293,647,1.37,674,1.389,712,2.575,713,2.23,714,1.876,718,2.322,728,0.762,743,0.999,745,1.959,762,1.401,774,3.331,778,3.347,779,1.287,780,2.609,795,0.64,809,0.904,817,3.356,833,2.633,941,3.199,1019,1.433,1063,1.903,1142,1.584,1159,1.504,1174,2.327,1199,1.543,1326,1.43,1367,1.727,1450,4.024,1540,4.095,1541,4.69,1542,3.442,1543,4.095,1544,4.095,1550,2.506,1554,2.506,1558,2.506,1562,2.506,1637,1.584,1639,1.584,1640,1.584,1641,1.543,1644,5.679,1646,1.13,1651,2.379,1660,1.543,1667,1.543,1673,2.506,1677,1.584,1682,2.527,1683,1.401,1686,1.504,1687,1.543,1692,1.543,1693,2.379,1698,2.69,1701,1.504,1702,2.477,1766,2.506,1767,1.584,1857,1.504,1858,1.543,1859,1.543,1860,1.543,1861,1.543,1862,2.44,1863,1.401,1864,1.543,1890,0.423,1895,2.303,1913,1.547,1915,0.752,1948,0.931,1960,2.367,1973,1.473,2026,0.918,2033,1.584,2034,3.96,2035,2.168,2036,4.095,2037,1.629,2038,3.635,2039,3.193,2040,4.147,2041,3.198,2042,2.577,2043,2.168,2044,4.242,2045,3.577,2046,4.447,2047,3.688,2048,3.535,2049,5.294,2050,3.635,2051,4.573,2052,3.535,2053,1.629,2054,1.262,2055,1.584,2056,2.506,2057,1.584,2058,1.584,2059,2.44,2060,1.584,2061,1.584,2062,2.633,2063,2.34,2064,1.584,2065,1.543,2066,1.629,2067,1.584,2068,1.584,2069,1.584,2070,1.629,2071,1.629,2072,1.504,2073,1.37,2074,1.629,2075,2.379,2076,1.629,2077,1.341,2078,1.629,2079,2.44,2080,2.577,2081,2.577,2082,2.168,2083,2.168,2084,1.629,2085,1.584,2086,1.543,2087,1.629,2088,1.629,2231,2.861,2232,2.861,2233,2.861,2234,2.861,2235,2.861,2236,2.861,2237,2.861,2238,2.861]],["title/interfaces/IDimensions.html",[40,0.012,598,2.682]],["body/interfaces/IDimensions.html",[0,0.056,3,0.127,4,0.12,5,0.12,10,0.131,11,0.324,20,0.005,21,0.378,24,0.278,28,0.324,39,0.354,40,0.023,41,0.495,52,1.214,75,0.464,78,0.002,79,0.003,80,0.002,83,2.513,85,0.54,89,1.698,90,0.71,95,3.53,100,1.662,101,3.57,102,1.353,103,3.609,104,1.624,105,1.624,106,1.6,108,3.797,110,0.746,111,2.638,112,1.83,114,3.175,115,2.949,116,2.009,124,2.955,126,1.182,135,3.685,136,0.631,139,3.972,142,1.92,145,1.876,148,2.721,154,1.096,155,2.544,157,1.662,158,2.738,159,1.836,160,3.467,161,1.836,162,1.836,163,2.061,165,1.836,168,1.4,170,2.738,171,2.669,172,1.788,179,1.973,182,3.049,183,0.432,184,2.487,185,3.634,186,2.669,198,1.935,218,1.31,257,2.259,258,1.523,285,0.601,289,1.373,301,1.738,313,1.786,314,2.21,321,0.975,334,1.691,384,2.011,404,3.241,446,0.86,459,0.815,464,1.247,488,1.204,489,2.24,524,1.644,525,1.866,529,1.701,539,2.836,545,2.461,548,1.893,552,3.241,580,0.826,590,1.701,591,1.581,592,3.021,593,1.788,596,0.896,597,1.185,598,2.669,627,1.435,634,2.254,636,1.999,642,1.451,647,1.589,674,1.558,712,2.627,713,1.979,714,1.492,718,2.605,728,0.884,743,1.121,745,1.558,762,1.624,774,3.312,778,2.881,779,1.492,780,2.315,795,0.742,809,1.048,817,3.634,833,2.893,941,3.401,1019,1.662,1063,2.061,1142,1.836,1159,1.743,1174,2.37,1199,1.788,1326,1.604,1367,1.938,1450,3.464,1540,2.812,1541,3.828,1542,1.788,1543,1.836,1544,1.836,1550,1.836,1554,1.836,1558,1.836,1562,1.836,1637,1.836,1639,1.836,1640,1.836,1641,1.788,1644,5.621,1646,1.31,1651,2.669,1660,1.788,1667,1.788,1673,2.812,1677,1.836,1682,2.776,1683,1.624,1686,1.743,1687,1.788,1692,1.788,1693,2.669,1698,2.955,1701,1.743,1702,2.722,1766,2.812,1767,1.836,1857,1.743,1858,1.788,1859,1.788,1860,1.788,1861,1.788,1862,2.738,1863,1.624,1864,1.788,1890,0.49,1895,2.447,1913,1.675,1915,0.872,1948,1.08,1960,2.312,1973,1.08,2026,1.064,2033,1.836,2034,4.243,2035,2.432,2036,4.353,2037,1.888,2038,2.891,2039,2.833,2040,3.875,2041,2.544,2042,1.888,2043,1.589,2044,3.823,2045,3.224,2046,3.828,2047,3.174,2048,2.812,2049,4.972,2050,2.891,2051,3.936,2052,2.812,2053,1.888,2054,1.463,2055,1.836,2056,2.812,2057,1.836,2058,1.836,2059,2.738,2060,1.836,2061,1.836,2062,2.893,2063,2.571,2064,1.836,2065,1.788,2066,1.888,2067,1.836,2068,1.836,2069,1.836,2070,1.888,2071,1.888,2072,1.743,2073,1.589,2074,1.888,2075,2.669,2076,1.888,2077,1.555,2078,1.888,2079,2.738,2080,2.891,2081,2.891,2082,2.432,2083,2.432,2084,1.888,2085,1.836,2086,1.788,2087,1.888,2088,1.888]],["title/interfaces/IElementPosition.html",[40,0.012,942,2.992]],["body/interfaces/IElementPosition.html",[3,0.268,4,0.251,5,0.251,10,0.276,11,0.541,20,0.005,24,0.354,28,0.268,39,0.365,40,0.024,41,0.826,42,1.622,47,1.644,78,0.003,79,0.004,80,0.003,85,1.133,110,0.635,111,3.191,116,2.336,136,0.773,168,1.427,283,4.061,284,1.758,285,1.261,294,2.215,597,2.489,634,2.244,636,1.965,743,2.018,782,1.644,797,2.802,942,4.97,944,2.228,1890,1.03,1895,2.64,1928,3.181,1930,2.889,1975,2.169,2008,2.302,2023,3.373,2030,2.76,2239,5.412,2240,6.587,2241,5.412,2242,5.953,2243,4.689,2244,4.689,2245,4.689,2246,4.689]],["title/interfaces/IEnhancedLineCapConfig.html",[40,0.012,2118,3.305]],["body/interfaces/IEnhancedLineCapConfig.html",[0,0.112,3,0.184,4,0.172,5,0.172,10,0.189,11,0.423,12,1.099,13,0.631,20,0.005,21,0.756,22,1.326,24,0.306,28,0.365,34,0.853,38,1.255,39,0.365,40,0.024,41,0.742,52,1.966,53,1.083,78,0.002,79,0.003,80,0.002,85,0.777,89,1.87,90,0.927,102,2.191,109,1.637,126,1.112,136,0.893,145,1.739,154,3.089,160,2.923,164,1.425,168,1.35,183,0.863,198,2.29,213,2.085,214,2.392,218,1.886,222,1.345,244,1.345,251,2.174,257,2.166,259,3.357,267,2.985,272,4.463,285,1.2,289,1.716,294,1.157,296,2.888,297,2.888,298,3.574,299,3.646,300,3.175,301,2.144,303,2.35,306,2.888,309,2.888,310,2.51,313,1.492,321,1.403,327,2.338,328,1.423,331,2.449,332,2.392,333,1.326,336,1.403,337,1.99,580,1.189,636,1.785,728,1.766,743,1.815,785,2.813,790,2.004,795,1.483,811,3.813,968,3.046,1266,2.888,1369,4.143,1534,3.67,1595,2.888,1806,4.215,1807,4.95,1811,3.67,1890,0.706,1899,2.523,1900,2.284,1901,1.444,1913,1.845,1915,2.001,1919,2.368,1934,2.523,1954,3.173,1960,1.308,1961,1.509,2009,2.19,2035,2.287,2039,4.209,2047,3.043,2054,4.32,2073,2.287,2089,3.093,2090,3.093,2091,3.214,2092,4.461,2093,4.461,2094,3.773,2095,3.214,2096,5.124,2097,4.461,2098,3.886,2099,3.214,2100,4.758,2101,5.326,2102,3.214,2103,2.644,2104,3.214,2105,2.575,2106,4.461,2107,2.575,2108,4.143,2109,4.293,2110,4.293,2111,4.143,2112,3.093,2113,3.093,2114,3.886,2115,3.093,2116,5.326,2117,5.535,2118,4.93,2119,2.985,2120,3.214,2121,3.214,2122,3.214,2123,2.985,2124,3.214,2125,3.214,2126,3.214,2127,2.985,2128,4.461,2129,4.293,2130,2.985,2131,3.214,2132,4.461,2133,4.293,2134,2.8,2135,3.214,2136,3.214,2137,3.093,2138,3.093,2139,5.124,2140,3.214,2141,3.214,2142,3.093,2143,2.985,2144,3.214,2145,3.214,2146,3.214,2147,3.214,2148,3.214,2149,2.8]],["title/interfaces/IFormatters.html",[40,0.012,2163,2.905]],["body/interfaces/IFormatters.html",[3,0.186,4,0.174,5,0.174,10,0.328,11,0.426,12,0.822,13,0.639,17,0.676,20,0.005,22,0.948,24,0.308,28,0.257,34,0.864,39,0.382,40,0.023,41,0.806,42,1.126,47,1.141,75,1.156,78,0.002,79,0.003,80,0.002,85,0.787,95,1.814,97,1.806,110,0.839,112,1.495,119,1.563,126,1.556,128,2.132,134,2.427,136,0.839,142,1.857,145,1.887,168,1.363,179,1.83,182,2.132,183,0.63,187,0.841,196,1.495,226,2.014,229,1.993,231,1.831,249,3.806,284,2.476,285,0.875,289,1.723,313,0.948,326,2.835,334,1.854,336,1.421,337,2.785,368,2.022,379,3.919,441,2.753,576,1.964,644,3.131,766,1.943,768,2.607,769,1.237,778,2.785,780,2.508,782,1.141,784,4.697,803,1.306,807,2.209,848,3.131,891,3.93,1498,2.367,1508,4.179,1614,2.835,1663,3.604,1665,2.835,1682,2.175,1702,3.958,1798,1.7,1890,0.715,1909,1.673,1912,2.35,1913,2.358,1938,3.074,1961,2.112,2008,2.209,2030,2.176,2040,3.069,2043,3.202,2045,2.092,2062,3.134,2063,2.014,2082,2.316,2083,2.316,2150,4.179,2151,3.022,2152,4.249,2153,3.254,2155,4.634,2156,3.022,2157,3.022,2158,3.131,2159,3.131,2160,3.131,2161,4.362,2162,4.835,2163,4.362,2164,1.937,2165,3.131,2166,2.924,2167,3.022,2168,3.254,2169,3.254,2170,5.841,2171,3.919,2172,6.443,2173,2.835,2174,3.254,2175,4.5,2176,4.179,2177,2.677,2178,2.835,2179,2.835,2180,4.846,2181,4.603,2182,4.5,2183,2.924,2184,2.924,2185,4.839,2186,2.835,2187,2.835,2188,3.254,2189,3.254,2190,3.131,2191,2.835,2192,4.846,2193,3.254,2194,5.087,2195,2.835,2196,3.254,2197,3.254,2198,4.33,2199,3.254,2200,3.254,2201,3.254,2227,2.607,2247,4.835]],["title/interfaces/IGaugeThresholdsRendererConfig.html",[40,0.012,1958,2.015]],["body/interfaces/IGaugeThresholdsRendererConfig.html",[3,0.122,4,0.115,5,0.115,10,0.268,11,0.432,12,1.235,13,1.301,20,0.005,21,0.835,22,0.96,24,0.318,28,0.347,33,1.177,34,0.569,35,1.555,36,1.555,37,1.294,39,0.393,40,0.025,41,0.812,42,1.703,47,1.726,53,1.116,57,1.619,75,0.841,78,0.002,79,0.002,80,0.002,83,1.518,85,0.518,89,1.209,90,1.305,97,1.625,102,0.849,106,0.826,110,0.449,116,0.782,119,0.649,131,2.379,136,0.865,145,1.879,163,0.949,164,1.791,168,1.317,183,1.191,187,0.554,198,1.514,213,2.004,222,1.386,229,0.949,238,2.278,244,0.897,245,0.936,251,2.494,254,1.215,257,1.64,284,1.518,285,1.325,287,0.991,289,1.344,294,0.772,303,2.119,313,1.327,314,1.976,328,0.949,333,1.88,334,1.243,368,0.963,384,0.815,399,1.156,411,0.991,417,1.052,439,1.021,443,1.51,444,1.578,446,1.897,447,1.578,453,1.652,455,2.019,459,1.797,464,1.477,465,1.555,476,2.15,482,0.897,524,1.949,525,1.488,530,1.257,531,1.257,532,1.257,533,1.257,539,1.532,541,1.195,545,1.625,547,1.257,548,1.51,553,1.257,557,1.943,561,1.943,571,1.257,572,1.652,575,1.236,576,1.989,580,1.225,589,1.236,591,0.991,595,1.257,596,1.33,599,1.257,634,0.751,636,1.017,642,2.209,646,2.379,674,0.977,712,1.532,713,1.929,714,1.989,728,0.849,729,1.138,743,1.494,744,1.12,745,0.977,747,2.17,750,2.076,753,1.102,761,1.021,769,1.259,775,1.12,782,1.726,790,0.963,795,1.514,797,2.556,803,1.33,807,1.052,809,1.006,821,1.236,826,1.236,888,1.156,930,1.175,944,1.581,968,1.677,1003,1.085,1056,1.195,1057,1.257,1058,1.257,1059,1.257,1061,2.271,1063,0.949,1065,0.949,1174,1.426,1182,2.17,1197,2.306,1214,1.195,1215,1.195,1232,2.184,1243,1.215,1263,1.138,1265,1.758,1319,2.019,1326,1.555,1428,1.195,1440,2.539,1586,1.91,1610,2.636,1631,1.195,1690,1.236,1734,1.257,1747,1.175,1778,1.257,1798,2.115,1890,0.471,1891,1.236,1892,1.28,1893,1.943,1894,1.677,1895,1.532,1896,1.257,1897,1.236,1898,1.257,1899,0.977,1900,0.885,1901,0.963,1902,2.375,1903,1.236,1904,1.215,1905,2.672,1906,1.28,1907,1.236,1908,1.236,1909,1.102,1910,1.257,1911,1.257,1912,1.73,1913,1.874,1914,1.12,1915,1.779,1916,3.155,1917,1.28,1918,1.847,1919,1.138,1920,2.375,1921,1.28,1922,1.978,1923,1.943,1924,1.943,1925,1.28,1926,1.943,1927,2.295,1928,1.847,1929,1.28,1930,1.085,1931,1.28,1932,1.195,1933,1.195,1934,1.846,1935,1.156,1936,1.28,1937,1.28,1938,0.963,1939,1.28,1940,1.236,1941,1.878,1942,1.943,1943,1.257,1944,1.943,1945,1.28,1946,1.236,1947,1.28,1948,2.518,1949,1.28,1950,1.257,1951,1.28,1952,1.943,1953,1.236,1954,1.102,1955,1.257,1956,1.257,1957,1.758,1958,2.672,1959,2.72,1960,2.119,1961,2.444,1962,1.28,1963,1.28,1964,1.28,1965,1.28,1966,1.257,1967,1.978,1968,1.28,1969,1.257,1970,1.215,1971,1.28,1972,1.28,1973,1.602,1974,1.257,1975,1.873,1976,1.28,1977,1.257,1978,1.257,1979,1.257,1980,1.28,1981,1.28,1982,1.257,1983,1.28,1984,1.085,1985,1.175,1986,1.257,1987,1.28,1988,1.28,1989,1.28,1990,1.28,1991,1.28,1992,1.257,1993,1.236,1994,1.28,1995,1.257,1996,1.236,1997,1.236,1998,1.28,1999,1.978,2000,2.672,2001,1.28,2002,1.257,2003,1.28,2004,1.28,2005,1.28,2006,1.28,2007,1.28,2008,1.627,2009,1.052,2010,1.28,2011,1.28,2012,1.847,2013,1.236,2014,1.236,2015,1.28,2016,1.28,2017,1.847,2018,1.978,2019,1.28,2020,1.28,2021,2.22,2022,1.878,2023,2.22,2024,1.257,2025,1.236,2026,1.021,2027,1.257,2028,1.236,2029,1.215,2030,1.037,2031,1.28,2032,1.102]],["title/interfaces/IGrid.html",[40,0.012,539,1.589]],["body/interfaces/IGrid.html",[0,0.049,3,0.111,4,0.105,5,0.105,10,0.115,11,0.292,17,1.233,19,1.674,20,0.005,21,0.849,22,1.104,24,0.323,28,0.31,39,0.344,40,0.023,41,0.446,52,1.094,75,0.406,78,0.001,79,0.002,80,0.001,83,2.539,85,1.047,89,1.827,90,0.9,95,3.437,100,1.453,101,3.563,102,1.219,103,3.416,104,1.421,105,1.421,106,1.815,108,3.631,110,0.71,111,2.496,112,1.902,114,3.022,115,2.791,116,1.913,124,2.714,126,1.065,135,3.894,136,0.587,139,3.826,142,1.787,145,1.823,148,3.053,154,0.959,155,2.292,157,1.453,158,2.467,159,1.606,160,3.281,161,1.606,162,1.606,163,1.918,165,1.606,168,1.368,170,2.467,171,2.405,172,1.564,179,2.024,182,2.838,183,0.378,184,2.241,185,3.381,186,2.405,198,1.902,218,1.146,257,2.294,258,1.332,273,1.253,285,0.525,289,1.689,301,2.095,313,1.813,314,2.343,321,0.852,334,1.609,384,2.421,404,3.016,446,1.668,447,1.467,459,1.124,464,1.58,488,1.053,489,2.499,524,1.51,525,2.441,529,3.3,539,2.947,545,2.557,548,1.974,552,3.488,580,0.722,590,1.488,591,1.764,592,3.15,593,1.564,596,0.784,597,1.036,598,1.525,627,1.255,634,2.111,636,1.893,642,1.307,647,2.192,674,1.974,712,2.821,713,2.063,714,1.345,718,3.3,728,0.773,743,1.251,745,1.404,762,1.421,774,3.73,778,2.68,779,2.059,780,2.414,795,0.649,809,0.917,817,3.381,833,2.657,941,3.752,1019,1.453,1063,1.918,1142,1.606,1159,2.405,1174,2.338,1199,1.564,1326,2.033,1367,2.455,1450,3.223,1540,2.534,1541,3.562,1542,1.564,1543,1.606,1544,1.606,1550,1.606,1554,1.606,1558,1.606,1562,1.606,1637,3.562,1638,4.102,1639,3.562,1640,3.562,1641,3.469,1644,5.679,1646,1.146,1651,3.381,1660,2.467,1667,2.467,1673,3.562,1677,2.534,1682,3.15,1683,1.421,1686,1.525,1687,1.564,1692,2.467,1693,2.405,1698,2.714,1701,1.525,1702,2.499,1766,3.562,1767,1.606,1857,1.525,1858,1.564,1859,1.564,1860,1.564,1861,1.564,1862,2.467,1863,1.421,1864,1.564,1890,0.429,1895,2.316,1913,1.559,1915,0.762,1948,0.944,1960,2.211,1973,0.944,2026,0.93,2033,1.606,2034,3.986,2035,2.192,2036,4.119,2037,1.652,2038,2.605,2039,2.602,2040,3.706,2041,2.292,2042,1.652,2043,1.39,2044,3.591,2045,3.029,2046,3.562,2047,2.954,2048,2.534,2049,4.802,2050,2.605,2051,3.663,2052,2.534,2053,1.652,2054,1.28,2055,1.606,2056,2.534,2057,1.606,2058,1.606,2059,2.467,2060,1.606,2061,1.606,2062,2.657,2063,2.361,2064,1.606,2065,1.564,2066,1.652,2067,1.606,2068,1.606,2069,1.606,2070,1.652,2071,1.652,2072,1.525,2073,1.39,2074,1.652,2075,2.405,2076,1.652,2077,1.36,2078,1.652,2079,3.469,2080,3.663,2081,3.663,2082,3.081,2083,3.081,2084,2.605,2085,2.534,2086,1.564,2087,1.652,2088,1.652,2248,2.901,2249,2.901,2250,2.901,2251,2.901,2252,2.901,2253,2.901,2254,2.901,2255,2.901,2256,2.901,2257,2.901,2258,2.901,2259,2.901]],["title/interfaces/IGridConfig.html",[40,0.012,135,2.392]],["body/interfaces/IGridConfig.html",[0,0.054,3,0.123,4,0.115,5,0.115,10,0.127,11,0.315,20,0.005,21,0.365,22,0.962,24,0.319,28,0.321,39,0.352,40,0.023,41,0.482,52,1.181,75,0.448,78,0.002,79,0.002,80,0.002,83,2.511,85,0.521,89,1.903,90,0.691,95,3.506,100,1.603,101,4.1,102,2.065,103,3.931,104,3.322,105,3.322,106,2.009,108,3.934,110,0.737,111,2.6,112,1.807,114,3.135,115,2.908,116,1.984,124,2.89,126,1.58,135,3.787,136,0.737,139,4.064,142,1.885,145,1.957,148,2.682,154,1.058,155,2.475,157,1.603,158,2.664,159,1.772,160,3.418,161,1.772,162,1.772,163,2.023,165,1.772,168,1.383,170,2.664,171,2.597,172,1.726,179,1.962,182,2.993,183,0.417,184,2.419,185,3.566,186,2.597,198,1.991,218,1.264,257,2.301,258,1.469,285,0.579,289,1.348,301,1.7,313,1.771,314,2.182,321,0.94,334,1.669,384,1.982,404,3.181,446,0.83,459,0.786,464,1.213,488,1.162,489,2.661,524,1.608,525,1.825,529,1.641,539,2.813,545,2.441,548,1.851,552,3.181,580,0.797,590,1.641,591,1.538,592,2.955,593,1.726,596,0.865,597,1.143,598,1.682,627,1.384,634,2.183,636,1.947,642,1.938,647,1.533,674,1.516,712,2.665,713,1.935,714,1.452,718,2.534,728,1.316,743,1.091,745,1.516,762,1.567,774,3.25,778,2.827,779,1.44,780,2.264,795,1.105,809,1.011,817,3.566,833,3.438,941,3.352,1019,1.603,1063,2.023,1142,1.772,1159,1.682,1174,2.48,1199,2.664,1326,1.561,1367,1.885,1450,3.399,1540,2.735,1541,3.757,1542,1.726,1543,1.772,1544,1.772,1550,1.772,1554,1.772,1558,1.772,1562,1.772,1637,1.772,1639,1.772,1640,1.772,1641,1.726,1644,5.623,1646,1.264,1651,2.597,1660,1.726,1667,1.726,1673,2.735,1677,1.772,1682,2.715,1683,1.567,1686,1.682,1687,1.726,1692,1.726,1693,3.566,1698,2.89,1701,1.682,1702,2.661,1766,2.735,1767,1.772,1857,1.682,1858,1.726,1859,1.726,1860,1.726,1861,1.726,1862,2.664,1863,1.567,1864,1.726,1890,0.473,1895,2.413,1913,1.644,1915,1.299,1948,1.042,1960,2.345,1973,1.042,2026,1.026,2033,1.772,2034,4.175,2035,2.366,2036,4.291,2037,1.822,2038,2.813,2039,2.77,2040,3.83,2041,2.475,2042,1.822,2043,1.533,2044,3.761,2045,3.172,2046,3.757,2047,3.115,2048,2.735,2049,4.928,2050,2.813,2051,3.863,2052,2.735,2053,1.822,2054,1.412,2055,1.772,2056,2.735,2057,1.772,2058,1.772,2059,2.664,2060,1.772,2061,1.772,2062,2.829,2063,2.514,2064,1.772,2065,1.726,2066,1.822,2067,1.772,2068,1.772,2069,1.772,2070,1.822,2071,1.822,2072,1.682,2073,1.533,2074,2.813,2075,2.597,2076,1.822,2077,1.5,2078,1.822,2079,2.664,2080,2.813,2081,2.813,2082,2.366,2083,2.366,2084,1.822,2085,1.772,2086,1.726,2087,1.822,2088,1.822]],["title/interfaces/IHasInnerScale.html",[40,0.012,2198,3.305]],["body/interfaces/IHasInnerScale.html",[3,0.188,4,0.177,5,0.177,10,0.33,11,0.431,12,0.83,13,0.648,20,0.005,24,0.31,28,0.259,34,0.876,39,0.383,40,0.023,41,0.85,42,1.142,47,1.157,75,1.08,78,0.002,79,0.003,80,0.002,95,1.84,97,1.824,110,0.842,112,1.51,119,1.574,126,1.572,128,2.163,134,2.451,136,0.822,142,1.875,145,1.893,168,1.366,179,1.838,182,2.163,183,0.639,187,0.853,196,1.51,226,2.043,229,2.012,231,1.849,249,3.843,284,2.462,285,0.888,289,1.732,313,0.961,326,2.875,334,1.863,336,1.441,337,2.043,368,2.041,379,3.958,441,2.792,576,1.984,644,3.176,766,1.971,768,2.644,769,1.254,778,2.813,780,2.533,782,1.157,784,4.166,803,1.325,807,2.231,848,3.176,891,3.96,1498,2.401,1508,4.22,1614,2.875,1663,3.64,1665,2.875,1682,2.206,1702,2.977,1798,1.724,1890,0.725,1909,1.697,1912,2.374,1913,2.364,1938,3.079,1961,2.133,2008,2.231,2030,2.197,2040,3.099,2043,3.233,2045,2.121,2062,2.299,2063,2.043,2082,2.349,2083,2.349,2150,4.22,2151,3.065,2152,4.37,2153,3.301,2155,4.668,2156,3.065,2157,3.065,2158,3.176,2159,3.176,2160,3.176,2161,4.395,2162,4.584,2163,3.843,2164,1.421,2165,3.176,2166,2.966,2167,3.065,2168,3.301,2169,3.301,2170,5.87,2171,3.958,2172,6.456,2173,2.875,2174,3.301,2175,4.544,2176,4.22,2177,2.715,2178,2.875,2179,2.875,2180,4.876,2181,4.623,2182,4.544,2183,2.966,2184,2.966,2185,4.86,2186,2.875,2187,2.875,2188,3.301,2189,3.301,2190,3.176,2191,2.875,2192,4.876,2193,3.301,2194,5.113,2195,2.875,2196,3.301,2197,3.301,2198,5,2199,5.598,2200,3.301,2201,3.301]],["title/interfaces/IHighlightStrategy.html",[40,0.012,272,2.992]],["body/interfaces/IHighlightStrategy.html",[0,0.111,3,0.18,4,0.168,5,0.168,10,0.185,12,1.091,13,0.994,17,1.052,19,1.799,20,0.005,21,0.978,22,1.067,24,0.319,28,0.363,34,0.835,38,1.228,39,0.363,40,0.024,41,0.733,52,1.561,53,1.059,78,0.002,79,0.003,80,0.002,89,1.848,90,0.913,102,2.17,109,1.618,126,1.088,136,0.848,145,1.725,154,3.012,160,2.879,164,1.403,168,1.333,179,1.534,183,1.061,198,2.257,213,2.347,214,2.341,218,1.845,222,1.316,244,1.316,251,2.149,257,2.077,259,3.318,267,2.92,272,4.775,273,1.788,274,4.228,276,4.228,277,4.228,285,1.182,289,1.876,294,1.823,296,3.948,297,2.825,298,4.787,299,4.365,300,4.253,301,2.567,303,2.483,306,3.948,307,3.196,309,3.948,310,3.955,313,1.475,321,1.373,327,2.288,328,1.393,331,2.396,332,2.341,333,1.298,336,1.373,337,1.947,580,1.163,636,1.683,728,1.739,743,1.798,785,2.771,790,1.974,795,1.46,811,3.769,968,2.224,1266,2.825,1369,4.08,1534,3.614,1595,2.825,1806,4.166,1807,3.614,1811,3.614,1890,0.691,1899,2.499,1900,2.262,1901,1.413,1913,2.289,1915,1.977,1919,2.332,1934,2.499,1954,2.819,1960,1.28,1961,1.476,2009,2.157,2035,2.238,2039,3.935,2047,2.997,2054,4.019,2073,2.238,2089,3.026,2090,3.026,2091,3.145,2092,4.394,2093,4.394,2094,3.716,2095,3.145,2096,5.064,2097,4.394,2098,3.827,2099,3.145,2100,4.703,2101,5.275,2102,3.145,2103,2.587,2104,3.145,2105,2.519,2106,4.394,2107,2.519,2108,4.08,2109,4.228,2110,4.228,2111,4.08,2112,3.026,2113,3.026,2114,3.827,2115,3.026,2116,4.873,2117,5.064,2118,4.228,2119,2.92,2120,3.145,2121,3.145,2122,3.145,2123,2.92,2124,3.145,2125,3.145,2126,3.145,2127,2.92,2128,4.394,2129,4.228,2130,2.92,2131,3.145,2132,4.394,2133,4.228,2134,2.739,2135,3.145,2136,3.145,2137,3.026,2138,3.026,2139,5.064,2140,3.145,2141,3.145,2142,3.026,2143,2.92,2144,3.145,2145,3.145,2146,3.145,2147,3.145,2148,3.145,2149,2.739,2260,4.673,2261,4.673,2262,4.673]],["title/interfaces/IInteractionCoordinatesPayload.html",[40,0.012,2246,3.435]],["body/interfaces/IInteractionCoordinatesPayload.html",[3,0.274,4,0.257,5,0.257,10,0.282,11,0.548,20,0.005,24,0.265,28,0.274,39,0.368,40,0.024,41,0.9,42,1.659,47,1.682,78,0.004,79,0.004,80,0.004,85,1.16,110,0.65,111,2.392,116,1.751,136,0.784,168,1.322,283,4.118,284,1.799,285,1.291,294,2.237,597,2.546,634,1.682,636,1.473,743,2.116,782,1.682,797,3.051,942,4.179,944,1.873,1890,1.054,1895,2.219,1928,3.596,1930,3.396,1975,2.219,2008,2.356,2023,3.537,2030,2.798,2239,5.538,2240,5.538,2241,5.538,2242,6.037,2243,4.798,2244,4.798,2245,5.787,2246,5.787]],["title/interfaces/IInteractionDataPointEvent.html",[40,0.012,1215,1.915]],["body/interfaces/IInteractionDataPointEvent.html",[3,0.124,4,0.116,5,0.116,10,0.27,11,0.434,12,1.239,13,1.303,20,0.005,21,0.839,24,0.311,28,0.348,33,1.187,34,0.575,35,1.568,36,1.568,37,1.305,39,0.393,40,0.025,41,0.836,42,1.712,47,1.735,53,0.73,57,1.627,75,0.847,78,0.002,79,0.002,80,0.002,83,1.528,85,0.524,89,1.219,90,1.308,97,1.636,102,0.858,106,0.835,110,0.453,116,0.791,119,0.657,131,2.388,136,0.867,145,1.821,163,0.96,164,1.797,168,1.301,183,1.194,187,0.56,198,1.523,213,2.014,222,1.398,229,0.96,238,2.289,244,0.907,245,0.946,251,2.546,254,1.228,257,1.468,284,1.528,285,1.331,287,1.002,289,1.352,294,0.78,303,2.042,313,1.334,314,1.986,328,0.96,333,1.891,334,1.252,368,0.974,384,0.824,399,1.169,411,2.119,417,1.064,439,1.033,443,1.523,444,1.592,446,1.906,447,1.592,453,1.666,455,2.033,459,1.806,464,1.488,465,1.568,476,2.161,482,0.907,524,1.959,525,1.501,530,1.271,531,1.271,532,1.271,533,1.271,539,1.545,541,1.208,545,1.636,547,1.271,548,1.523,553,1.271,557,1.96,561,1.96,571,1.271,572,1.666,575,1.25,576,2,580,0.802,589,1.25,591,1.002,595,1.271,596,1.341,599,1.271,634,0.76,636,1.026,642,2.219,646,2.13,674,0.988,712,1.545,713,1.942,714,2,728,0.858,729,1.15,743,1.623,744,1.132,745,0.988,747,2.183,750,2.089,753,1.114,761,1.033,769,1.27,775,1.132,782,1.735,790,0.974,795,1.645,797,2.675,803,1.341,807,1.064,809,1.017,821,1.25,826,1.25,888,1.169,930,1.188,944,1.592,968,1.097,1003,1.097,1056,1.208,1057,1.271,1058,1.271,1059,1.271,1061,2.284,1063,0.96,1065,0.96,1174,0.933,1182,2.183,1197,2.647,1214,1.208,1215,1.862,1232,2.199,1243,1.228,1263,1.15,1265,1.773,1319,2.033,1326,1.568,1428,1.208,1440,2.554,1586,1.25,1610,2.32,1631,1.208,1690,1.25,1734,1.271,1747,1.188,1778,1.271,1798,2.13,1890,0.476,1891,1.25,1892,1.294,1893,1.96,1894,1.691,1895,1.545,1896,1.271,1897,1.25,1898,1.271,1899,0.988,1900,0.894,1901,0.974,1902,2.392,1903,1.25,1904,1.228,1905,1.96,1906,1.294,1907,1.25,1908,1.25,1909,1.114,1910,1.271,1911,1.271,1912,1.745,1913,1.883,1914,1.132,1915,1.789,1916,3.165,1917,1.294,1918,1.862,1919,1.15,1920,2.392,1921,1.294,1922,1.995,1923,1.96,1924,1.96,1925,1.294,1926,1.96,1927,2.311,1928,1.862,1929,1.294,1930,1.097,1931,1.294,1932,1.208,1933,1.208,1934,1.858,1935,1.169,1936,1.294,1937,1.294,1938,0.974,1939,1.294,1940,1.25,1941,1.894,1942,1.96,1943,1.271,1944,1.96,1945,1.294,1946,1.25,1947,1.294,1948,2.529,1949,1.294,1950,1.271,1951,1.294,1952,1.96,1953,1.25,1954,1.114,1955,1.271,1956,1.271,1957,1.15,1958,2.392,1959,1.294,1960,2.014,1961,1.568,1962,1.294,1963,1.294,1964,1.294,1965,1.294,1966,1.271,1967,1.995,1968,1.294,1969,1.271,1970,1.228,1971,1.294,1972,1.294,1973,1.616,1974,1.271,1975,1.886,1976,1.294,1977,1.271,1978,1.271,1979,1.271,1980,1.294,1981,1.294,1982,1.271,1983,1.294,1984,1.097,1985,1.188,1986,1.271,1987,1.294,1988,1.294,1989,1.294,1990,1.294,1991,1.294,1992,1.271,1993,1.25,1994,1.294,1995,1.271,1996,1.25,1997,1.25,1998,1.294,1999,1.995,2000,2.688,2001,1.294,2002,1.271,2003,1.294,2004,1.294,2005,1.294,2006,1.294,2007,1.294,2008,1.64,2009,1.064,2010,1.294,2011,1.294,2012,1.862,2013,1.25,2014,1.25,2015,1.294,2016,1.294,2017,1.862,2018,1.995,2019,1.294,2020,1.294,2021,2.512,2022,1.894,2023,2.512,2024,1.96,2025,1.25,2026,1.033,2027,1.271,2028,1.25,2029,1.228,2030,1.048,2031,1.294,2032,1.114]],["title/interfaces/IInteractionDataPointsEvent.html",[40,0.012,1214,1.915]],["body/interfaces/IInteractionDataPointsEvent.html",[3,0.124,4,0.116,5,0.116,10,0.27,11,0.434,12,1.239,13,1.303,20,0.005,21,0.839,24,0.311,28,0.348,33,1.186,34,0.575,35,1.568,36,1.568,37,1.304,39,0.393,40,0.025,41,0.836,42,1.711,47,1.734,53,0.729,57,1.626,75,0.847,78,0.002,79,0.002,80,0.002,83,1.528,85,0.523,89,1.219,90,1.308,97,1.636,102,0.857,106,0.834,110,0.452,116,0.79,119,0.656,131,2.387,136,0.867,145,1.821,163,0.959,164,1.797,168,1.301,183,1.193,187,0.56,198,1.522,213,2.014,222,1.397,229,0.959,238,2.289,244,0.906,245,0.946,251,2.501,254,1.228,257,1.467,284,1.528,285,1.331,287,1.002,289,1.352,294,0.78,303,2.041,313,1.334,314,1.986,328,0.959,333,1.89,334,1.251,368,0.973,384,0.823,399,1.168,411,1.002,417,1.063,439,2.182,443,1.522,444,1.591,446,1.906,447,1.591,453,2.283,455,2.283,459,1.805,464,1.487,465,1.568,476,2.16,482,0.906,524,1.959,525,1.5,530,1.271,531,1.271,532,1.271,533,1.271,539,1.545,541,1.207,545,1.636,547,1.271,548,1.522,553,1.271,557,1.959,561,1.959,571,1.271,572,1.665,575,1.249,576,2,580,0.801,589,1.249,591,1.002,595,1.271,596,1.34,599,1.271,634,0.759,636,1.025,642,2.219,646,2.129,674,0.987,712,1.545,713,1.942,714,2,728,0.857,729,1.15,743,1.623,744,1.131,745,0.987,747,2.182,750,2.256,753,1.114,761,1.032,769,1.269,775,1.131,782,1.734,790,0.973,795,1.644,797,2.675,803,1.34,807,1.063,809,1.017,821,1.249,826,1.249,888,1.168,930,1.188,944,1.591,968,1.097,1003,1.097,1056,1.207,1057,1.271,1058,1.271,1059,1.271,1061,2.283,1063,0.959,1065,0.959,1174,0.932,1182,2.182,1197,2.319,1214,1.861,1215,1.207,1232,2.198,1243,1.228,1263,1.15,1265,1.772,1319,2.032,1326,1.568,1428,1.207,1440,2.553,1586,1.249,1610,2.319,1631,1.207,1690,1.249,1734,1.271,1747,1.188,1778,1.271,1798,2.129,1890,0.476,1891,1.249,1892,1.293,1893,1.959,1894,1.691,1895,1.545,1896,1.271,1897,1.249,1898,1.271,1899,0.987,1900,0.894,1901,0.973,1902,2.391,1903,1.249,1904,1.228,1905,1.959,1906,1.293,1907,1.249,1908,1.249,1909,1.114,1910,1.271,1911,1.271,1912,1.744,1913,1.882,1914,1.131,1915,1.789,1916,3.164,1917,1.293,1918,1.861,1919,1.15,1920,2.391,1921,1.293,1922,1.994,1923,1.959,1924,1.959,1925,1.293,1926,1.959,1927,2.31,1928,1.861,1929,1.293,1930,1.097,1931,1.293,1932,1.207,1933,1.207,1934,1.858,1935,1.168,1936,1.293,1937,1.293,1938,0.973,1939,1.293,1940,1.249,1941,1.893,1942,1.959,1943,1.271,1944,1.959,1945,1.293,1946,1.249,1947,1.293,1948,2.528,1949,1.293,1950,1.271,1951,1.293,1952,1.959,1953,1.249,1954,1.114,1955,1.271,1956,1.271,1957,1.15,1958,2.391,1959,1.293,1960,2.014,1961,1.568,1962,1.293,1963,1.293,1964,1.293,1965,1.293,1966,1.271,1967,1.994,1968,1.293,1969,1.271,1970,1.228,1971,1.293,1972,1.293,1973,1.615,1974,1.271,1975,1.885,1976,1.293,1977,1.271,1978,1.271,1979,1.271,1980,1.293,1981,1.293,1982,1.271,1983,1.293,1984,1.097,1985,1.188,1986,1.271,1987,1.293,1988,1.293,1989,1.293,1990,1.293,1991,1.293,1992,1.271,1993,1.249,1994,1.293,1995,1.271,1996,1.249,1997,1.249,1998,1.293,1999,1.994,2000,2.687,2001,1.293,2002,1.271,2003,1.293,2004,1.293,2005,1.293,2006,1.293,2007,1.293,2008,1.64,2009,1.063,2010,1.293,2011,1.293,2012,1.861,2013,1.249,2014,1.249,2015,1.293,2016,1.293,2017,1.861,2018,1.994,2019,1.293,2020,1.293,2021,2.511,2022,2.31,2023,2.511,2024,1.271,2025,1.249,2026,1.032,2027,1.271,2028,1.249,2029,1.228,2030,1.048,2031,1.293,2032,1.114]],["title/interfaces/IInteractionPayload.html",[40,0.012,2023,1.883]],["body/interfaces/IInteractionPayload.html",[3,0.124,4,0.116,5,0.116,10,0.27,11,0.435,12,1.237,13,1.303,20,0.005,21,0.84,24,0.312,28,0.348,33,1.19,34,0.577,35,1.572,36,1.572,37,1.308,39,0.394,40,0.025,41,0.816,42,1.714,47,1.737,53,0.732,57,1.629,75,0.849,78,0.002,79,0.002,80,0.002,83,1.532,85,0.526,89,1.222,90,1.309,97,1.64,102,0.861,106,0.838,110,0.454,116,0.793,119,0.659,131,2.39,136,0.867,145,1.822,163,0.963,164,1.799,168,1.302,183,1.194,187,0.562,198,1.525,213,2.017,222,1.402,229,0.963,238,2.293,244,0.91,245,0.949,251,2.504,254,1.233,257,1.471,284,1.532,285,1.333,287,1.006,289,1.354,294,0.783,303,2.045,313,1.337,314,1.989,328,0.963,333,1.894,334,1.254,368,0.977,384,0.826,399,1.173,411,1.006,417,1.068,439,1.036,443,1.527,444,1.596,446,1.909,447,1.596,453,1.67,455,2.037,459,1.809,464,1.491,465,1.572,476,2.164,482,0.91,524,1.962,525,1.505,530,1.276,531,1.276,532,1.276,533,1.276,539,1.549,541,1.212,545,1.64,547,1.276,548,1.527,553,1.276,557,1.965,561,1.965,571,1.276,572,1.67,575,1.254,576,2.004,580,0.804,589,1.254,591,1.006,595,1.276,596,1.344,599,1.276,634,0.762,636,1.028,642,2.222,646,2.134,674,0.991,712,1.549,713,1.946,714,2.004,728,0.861,729,1.154,743,1.626,744,1.136,745,0.991,747,2.187,750,2.092,753,1.118,761,1.036,769,1.273,775,1.136,782,1.737,790,0.977,795,1.647,797,2.679,803,1.344,807,1.068,809,1.021,821,1.254,826,1.254,888,1.173,930,1.192,944,1.595,968,1.101,1003,1.101,1056,1.212,1057,1.276,1058,1.276,1059,1.276,1061,2.288,1063,0.963,1065,0.963,1174,0.936,1182,2.753,1197,2.324,1214,1.212,1215,1.212,1232,2.204,1243,1.233,1263,1.154,1265,1.778,1319,2.037,1326,1.572,1428,1.212,1440,2.558,1586,1.254,1610,2.324,1631,1.212,1690,1.254,1734,1.276,1747,1.192,1778,1.276,1798,2.134,1890,0.478,1891,1.254,1892,1.298,1893,1.965,1894,1.696,1895,1.549,1896,1.276,1897,1.254,1898,1.276,1899,0.991,1900,0.897,1901,0.977,1902,2.397,1903,1.254,1904,1.233,1905,1.965,1906,1.298,1907,1.254,1908,1.254,1909,1.118,1910,1.276,1911,1.276,1912,1.75,1913,1.885,1914,1.136,1915,1.792,1916,3.168,1917,1.298,1918,1.867,1919,1.154,1920,2.397,1921,1.298,1922,2,1923,1.965,1924,1.965,1925,1.298,1926,1.965,1927,2.316,1928,1.867,1929,1.298,1930,1.101,1931,1.298,1932,1.212,1933,1.212,1934,1.862,1935,1.173,1936,1.298,1937,1.298,1938,0.977,1939,1.298,1940,1.254,1941,1.899,1942,1.965,1943,1.276,1944,1.965,1945,1.298,1946,1.254,1947,1.298,1948,2.532,1949,1.298,1950,1.276,1951,1.298,1952,1.965,1953,1.254,1954,1.118,1955,1.276,1956,1.276,1957,1.154,1958,2.397,1959,1.298,1960,2.017,1961,1.572,1962,1.298,1963,1.298,1964,1.298,1965,1.298,1966,1.276,1967,2,1968,1.298,1969,1.276,1970,1.233,1971,1.298,1972,1.298,1973,1.62,1974,1.276,1975,1.89,1976,1.298,1977,1.276,1978,1.276,1979,1.276,1980,1.298,1981,1.298,1982,1.276,1983,1.298,1984,1.101,1985,1.192,1986,1.276,1987,1.298,1988,1.298,1989,1.298,1990,1.298,1991,1.298,1992,1.276,1993,1.254,1994,1.298,1995,1.276,1996,1.254,1997,1.254,1998,1.298,1999,2,2000,2.693,2001,1.298,2002,1.276,2003,1.298,2004,1.298,2005,1.298,2006,1.298,2007,1.298,2008,1.645,2009,1.068,2010,1.298,2011,1.298,2012,1.867,2013,1.254,2014,1.254,2015,1.298,2016,1.298,2017,1.867,2018,2,2019,1.298,2020,1.298,2021,2.24,2022,1.899,2023,2.516,2024,1.276,2025,1.254,2026,1.036,2027,1.276,2028,1.254,2029,1.233,2030,1.052,2031,1.298,2032,1.118]],["title/interfaces/IInteractionValues.html",[40,0.012,2242,3.583]],["body/interfaces/IInteractionValues.html",[3,0.272,4,0.255,5,0.255,17,0.991,20,0.005,24,0.264,28,0.272,39,0.368,40,0.024,41,0.835,42,1.994,47,2.021,78,0.003,79,0.004,80,0.003,85,1.152,110,0.781,111,2.377,116,1.74,136,0.84,168,1.319,283,4.581,284,2.161,285,1.551,294,2.318,307,3.469,597,2.531,634,1.671,636,1.464,743,2.111,782,2.021,797,2.831,942,4.153,944,1.862,1890,1.047,1895,2.206,1928,3.214,1930,2.919,1975,2.667,2008,2.831,2023,3.398,2030,2.997,2227,3.82,2239,5.504,2240,5.504,2241,6.654,2242,6.465,2243,4.769,2244,4.769,2245,4.769,2246,4.769,2263,7.085]],["title/interfaces/IInteractionValuesPayload.html",[40,0.012,2244,3.435]],["body/interfaces/IInteractionValuesPayload.html",[3,0.274,4,0.257,5,0.257,10,0.282,11,0.548,20,0.005,24,0.265,28,0.274,39,0.368,40,0.024,41,0.9,42,1.659,47,1.682,78,0.004,79,0.004,80,0.004,85,1.16,110,0.65,111,2.392,116,1.751,136,0.784,168,1.322,283,4.118,284,1.799,285,1.291,294,2.443,597,2.546,634,1.682,636,1.473,743,2.116,782,1.682,797,3.051,942,4.179,944,1.873,1890,1.054,1895,2.219,1928,3.225,1930,2.93,1975,2.219,2008,2.356,2023,3.537,2030,2.798,2239,5.538,2240,5.538,2241,5.538,2242,6.73,2243,5.787,2244,5.787,2245,4.798,2246,4.798]],["title/interfaces/ILineAccessors.html",[40,0.012,2105,2.751]],["body/interfaces/ILineAccessors.html",[0,0.147,3,0.239,4,0.225,5,0.225,7,2.337,8,1.394,10,0.247,11,0.583,12,1.218,13,1.341,14,1.53,16,4.379,17,1.106,20,0.005,21,0.711,23,3.873,24,0.295,28,0.334,29,3.788,30,4.057,31,2.984,32,2.695,33,1.891,34,1.553,37,2.403,38,1.637,39,0.351,40,0.022,41,0.891,52,2.186,53,1.97,57,1.304,72,2.86,73,3.274,74,3.274,75,1.215,76,3.652,77,3.652,78,0.003,79,0.004,80,0.003,94,1.532,109,1.339,112,1.394,126,1.45,134,2.262,136,0.568,149,2.86,164,2.028,188,3.962,245,1.831,285,1.128,455,2.09,766,2.503,782,1.47,785,2.644,798,3.195,811,3.121,818,3.894,824,3.05,941,2.695,1065,2.358,1160,2.984,1404,5.324,1890,1.169,1894,2.695,1899,2.427,1900,2.197,1901,2.392,1975,1.939,1984,2.961,2105,4.685,2107,3.359,2164,1.805,2173,3.652,2264,4.84,2265,6.945,2266,6.945,2267,4.944,2268,4.944,2269,4.84,2270,6.102,2271,3.449,2272,3.449,2273,4.84,2274,4.84,2275,4.84,2276,4.374,2277,4.586,2278,4.84,2279,4.84,2280,4.84,2281,4.374,2282,4.586,2283,4.84,2284,4.84,2285,4.586,2286,4.84,2287,4.84,2288,4.84]],["title/interfaces/ILineDataAccessors.html",[40,0.012,2265,3.757]],["body/interfaces/ILineDataAccessors.html",[0,0.148,3,0.242,4,0.228,5,0.228,7,2.368,8,1.412,10,0.25,11,0.586,12,1.164,13,1.298,14,1.55,16,4.415,17,1.325,20,0.005,21,0.72,22,1.131,23,3.905,24,0.235,28,0.336,29,3.819,30,4.09,31,3.022,32,2.73,33,2.196,34,1.425,37,2.414,38,1.659,39,0.353,40,0.022,41,0.895,52,2.196,53,1.982,57,1.321,72,2.897,73,3.317,74,3.317,75,1.223,76,3.7,77,3.7,78,0.003,79,0.004,80,0.003,94,1.541,109,1.357,112,1.412,126,1.469,134,2.291,136,0.575,149,2.897,164,1.975,188,3.995,245,1.854,285,1.143,455,2.117,766,2.536,782,1.489,785,2.679,798,3.237,811,3.161,818,3.944,824,3.09,941,2.73,1065,1.881,1160,3.022,1404,5.367,1890,1.179,1894,2.15,1899,1.936,1900,1.753,1901,1.908,1975,1.965,1984,2.979,2105,4.299,2107,3.402,2164,1.828,2173,3.7,2264,4.902,2265,6.761,2266,6.435,2267,5.464,2268,4.984,2269,4.902,2270,6.138,2271,3.494,2272,3.494,2273,4.902,2274,4.902,2275,4.902,2276,4.431,2277,4.645,2278,4.902,2279,4.902,2280,4.902,2281,4.431,2282,4.645,2283,4.902,2284,4.902,2285,4.645,2286,4.902,2287,4.902,2288,4.902]],["title/interfaces/ILineRendererConfig.html",[40,0.012,2119,3.19]],["body/interfaces/ILineRendererConfig.html",[0,0.108,3,0.172,4,0.162,5,0.162,10,0.178,11,0.405,12,1.077,13,0.593,20,0.005,21,0.724,22,1.411,24,0.343,28,0.36,34,0.802,38,1.18,39,0.36,40,0.024,41,0.78,52,1.517,53,1.018,78,0.002,79,0.003,80,0.002,85,0.73,89,1.808,90,1.03,102,2.132,109,1.583,126,1.477,136,0.884,145,1.813,154,3.228,160,2.799,164,1.364,168,1.308,183,0.827,198,2.293,213,2.017,214,2.249,218,1.772,222,1.264,244,1.264,251,2.103,257,2.124,259,3.247,267,2.806,272,4.95,285,1.333,289,1.677,294,1.088,296,2.715,297,2.715,298,3.422,299,3.526,300,3.04,301,2.074,303,2.368,306,2.715,309,2.715,310,2.359,313,1.569,321,1.319,327,2.198,328,1.338,331,2.302,332,2.249,333,1.247,336,1.319,337,1.87,580,1.117,636,1.745,728,1.691,743,1.935,785,2.694,790,1.919,795,1.42,811,4.23,968,2.163,1266,2.715,1369,4.602,1534,4.076,1595,2.715,1806,4.076,1807,3.514,1811,3.514,1890,0.664,1899,2.765,1900,2.345,1901,1.919,1913,1.784,1915,1.935,1919,2.267,1934,2.591,1954,3.119,1960,1.738,1961,1.418,2009,2.097,2035,2.15,2039,4.024,2047,3.38,2054,4.128,2073,3.04,2089,2.907,2090,2.907,2091,3.021,2092,5.683,2093,5.683,2094,3.613,2095,3.021,2096,5.683,2097,4.956,2098,4.316,2099,3.021,2100,5.278,2101,5.183,2102,3.021,2103,2.485,2104,3.021,2105,2.42,2106,4.272,2107,2.42,2108,3.967,2109,4.111,2110,4.111,2111,3.967,2112,2.907,2113,2.907,2114,3.721,2115,2.907,2116,5.469,2117,5.683,2118,5.183,2119,3.967,2120,4.272,2121,4.272,2122,4.272,2123,5.002,2124,4.272,2125,4.272,2126,5.387,2127,3.967,2128,4.956,2129,4.768,2130,3.967,2131,5.387,2132,5.387,2133,5.677,2134,3.721,2135,4.272,2136,5.387,2137,2.907,2138,2.907,2139,4.956,2140,3.021,2141,3.021,2142,2.907,2143,2.806,2144,3.021,2145,3.021,2146,3.021,2147,3.021,2148,3.021,2149,2.632]],["title/interfaces/ILineSeriesAccessors.html",[40,0.012,2266,3.757]],["body/interfaces/ILineSeriesAccessors.html",[0,0.146,3,0.235,4,0.22,5,0.22,7,2.291,8,1.366,10,0.242,11,0.579,12,1.153,13,1.328,14,1.5,16,4.323,17,1.204,20,0.005,21,0.696,22,1.287,23,3.823,24,0.291,28,0.331,29,3.74,30,4.005,31,2.924,32,2.641,33,1.867,34,1.395,37,2.621,38,1.605,39,0.349,40,0.023,41,0.839,52,2.361,53,2.21,57,1.278,72,2.803,73,3.209,74,3.209,75,1.269,76,3.579,77,3.579,78,0.003,79,0.004,80,0.003,85,0.993,94,1.518,109,1.313,112,1.366,126,1.421,134,2.217,136,0.712,149,2.803,164,2.016,188,3.912,245,1.794,285,1.414,455,2.049,766,2.454,782,1.842,785,3.314,798,3.132,811,3.059,818,3.816,824,2.99,941,2.641,1065,1.82,1160,2.924,1404,5.256,1890,1.154,1894,2.081,1899,1.873,1900,1.696,1901,1.846,1975,2.431,1984,2.934,2105,4.21,2107,3.292,2164,2.262,2173,3.579,2227,3.292,2264,6.066,2265,6.337,2266,6.679,2267,4.881,2268,4.881,2269,4.743,2270,6.371,2271,4.323,2272,4.323,2273,4.743,2274,4.743,2275,4.743,2276,4.287,2277,4.494,2278,4.743,2279,4.743,2280,4.743,2281,4.287,2282,4.494,2283,4.743,2284,4.743,2285,4.494,2286,4.743,2287,4.743,2288,4.743,2289,5.472]],["title/interfaces/ILinearScales.html",[40,0.012,1966,2.015]],["body/interfaces/ILinearScales.html",[3,0.124,4,0.116,5,0.116,10,0.27,11,0.435,12,1.237,13,1.303,20,0.005,21,0.839,24,0.32,28,0.348,33,1.188,34,0.576,35,1.57,36,1.57,37,1.306,39,0.393,40,0.025,41,0.815,42,1.947,47,1.973,53,0.731,57,1.628,75,0.848,78,0.002,79,0.002,80,0.002,83,1.53,89,1.221,90,1.309,97,1.638,102,0.859,106,0.836,110,0.453,116,0.792,119,0.658,131,2.389,136,0.867,145,1.821,163,0.961,164,1.798,168,1.301,183,1.194,187,0.561,198,1.524,213,2.016,222,1.4,229,0.961,238,2.291,244,0.908,245,0.948,251,2.503,254,1.23,257,1.469,284,1.53,285,1.332,287,1.004,289,1.353,294,0.782,303,2.043,313,1.335,314,1.988,328,0.961,333,1.892,334,1.253,368,0.975,384,0.825,399,1.171,411,1.004,417,1.066,439,1.034,443,1.525,444,1.594,446,1.908,447,1.594,453,1.668,455,2.035,459,1.807,464,1.489,465,1.57,476,2.162,482,0.908,524,1.961,525,1.503,530,1.273,531,1.273,532,1.273,533,1.273,539,1.547,541,1.21,545,1.638,547,1.273,548,1.525,553,1.273,557,1.962,561,1.962,571,1.273,572,1.668,575,1.252,576,2.002,580,0.803,589,1.252,591,1.004,595,1.273,596,1.343,599,1.273,634,0.761,636,1.027,642,2.221,646,2.132,674,0.99,712,1.547,713,1.944,714,2.002,728,0.859,729,1.152,743,1.504,744,1.134,745,0.99,747,2.185,750,2.09,753,1.116,761,1.034,769,1.271,775,1.134,782,1.736,790,0.975,795,1.524,797,2.569,803,1.343,807,1.066,809,1.019,821,1.252,826,1.252,888,1.171,930,1.19,944,1.594,968,1.099,1003,1.099,1056,1.21,1057,1.273,1058,1.273,1059,1.273,1061,2.286,1063,0.961,1065,0.961,1174,0.934,1182,2.185,1197,2.322,1214,1.21,1215,1.21,1232,2.201,1243,1.23,1263,1.152,1265,1.776,1319,2.035,1326,1.57,1428,1.21,1440,2.556,1586,1.252,1610,2.322,1631,1.21,1690,1.252,1734,1.273,1747,1.19,1778,1.273,1798,2.132,1890,0.477,1891,1.252,1892,1.296,1893,1.962,1894,1.694,1895,1.547,1896,1.273,1897,1.252,1898,1.273,1899,0.99,1900,0.896,1901,0.975,1902,3.198,1903,1.252,1904,1.23,1905,1.962,1906,1.296,1907,1.252,1908,1.252,1909,1.116,1910,1.273,1911,1.273,1912,1.747,1913,1.884,1914,1.134,1915,1.791,1916,3.166,1917,1.296,1918,1.865,1919,1.152,1920,2.394,1921,1.296,1922,1.997,1923,1.962,1924,1.962,1925,1.296,1926,1.962,1927,2.313,1928,1.865,1929,1.296,1930,1.099,1931,1.296,1932,1.21,1933,1.21,1934,1.86,1935,1.171,1936,1.296,1937,1.296,1938,0.975,1939,1.296,1940,1.252,1941,1.896,1942,1.962,1943,1.273,1944,1.962,1945,1.296,1946,1.252,1947,1.296,1948,2.531,1949,1.296,1950,1.273,1951,1.296,1952,1.962,1953,1.252,1954,1.116,1955,1.273,1956,1.273,1957,1.152,1958,2.394,1959,1.296,1960,2.016,1961,1.57,1962,1.296,1963,1.296,1964,1.296,1965,1.296,1966,1.962,1967,1.997,1968,1.296,1969,1.273,1970,1.23,1971,1.296,1972,1.296,1973,1.618,1974,1.273,1975,1.888,1976,1.296,1977,1.273,1978,1.273,1979,1.273,1980,1.296,1981,1.296,1982,1.273,1983,1.296,1984,1.099,1985,1.19,1986,1.273,1987,1.296,1988,1.296,1989,1.296,1990,1.296,1991,1.296,1992,1.273,1993,1.252,1994,1.296,1995,1.273,1996,1.252,1997,1.252,1998,1.296,1999,1.997,2000,2.69,2001,1.296,2002,1.273,2003,1.296,2004,1.296,2005,1.296,2006,1.296,2007,1.296,2008,1.642,2009,1.066,2010,1.296,2011,1.296,2012,1.865,2013,1.252,2014,1.252,2015,1.296,2016,1.296,2017,1.865,2018,1.997,2019,1.296,2020,1.296,2021,2.238,2022,1.896,2023,2.238,2024,1.273,2025,1.252,2026,1.034,2027,1.273,2028,1.252,2029,1.23,2030,1.05,2031,1.296,2032,1.116]],["title/interfaces/IMarkerInteractionConfig.html",[40,0.012,2100,3.19]],["body/interfaces/IMarkerInteractionConfig.html",[0,0.114,3,0.186,4,0.175,5,0.175,10,0.192,11,0.427,12,1.153,13,0.641,20,0.005,21,0.764,22,0.95,24,0.25,28,0.366,34,0.867,38,1.275,39,0.366,40,0.024,41,0.748,52,1.602,53,1.519,78,0.002,79,0.003,80,0.002,85,0.789,89,1.885,90,0.937,102,2.315,109,1.65,126,1.129,136,0.856,145,1.917,154,3.043,160,2.955,164,1.441,168,1.294,183,0.873,198,2.267,213,2.102,214,2.43,218,1.915,222,1.366,244,1.366,251,2.481,257,2.177,259,3.385,267,3.032,272,4.5,285,1.213,289,1.725,294,1.176,296,2.934,297,2.934,298,3.613,299,3.676,300,3.209,301,2.162,303,2.361,306,2.934,309,2.934,310,2.55,313,1.505,321,1.425,327,2.375,328,1.446,331,2.488,332,2.43,333,1.347,336,1.425,337,2.021,580,1.208,636,1.711,728,2.045,743,1.918,785,2.844,790,2.026,795,1.717,811,3.845,968,2.283,1266,2.934,1369,4.188,1534,3.71,1595,2.934,1806,4.583,1807,3.71,1811,3.71,1890,0.717,1899,2.54,1900,2.495,1901,1.467,1913,1.86,1915,2.283,1919,2.742,1934,2.54,1954,2.865,1960,1.329,1961,2.616,2009,2.214,2035,2.323,2039,3.989,2047,3.076,2054,4.061,2073,2.323,2089,3.142,2090,3.142,2091,3.265,2092,4.51,2093,4.51,2094,3.815,2095,3.265,2096,5.167,2097,4.51,2098,3.928,2099,3.265,2100,5.175,2101,5.818,2102,3.265,2103,2.686,2104,3.265,2105,2.615,2106,4.51,2107,2.615,2108,4.188,2109,4.34,2110,4.34,2111,4.188,2112,3.142,2113,3.142,2114,3.928,2115,5.362,2116,4.971,2117,5.167,2118,4.34,2119,3.032,2120,3.265,2121,3.265,2122,3.265,2123,3.032,2124,3.265,2125,3.265,2126,3.265,2127,3.032,2128,4.51,2129,4.34,2130,3.032,2131,3.265,2132,4.51,2133,4.34,2134,2.844,2135,3.265,2136,3.265,2137,3.142,2138,3.142,2139,5.167,2140,3.265,2141,3.265,2142,3.142,2143,3.032,2144,3.265,2145,3.265,2146,3.265,2147,3.265,2148,3.265,2149,2.844]],["title/interfaces/INoopAccessors.html",[40,0.012,2290,3.965]],["body/interfaces/INoopAccessors.html",[0,0.127,3,0.289,4,0.271,5,0.271,7,2.819,8,1.681,10,0.298,11,0.566,12,1.223,13,1.346,14,1.845,20,0.005,24,0.33,28,0.289,34,1.687,38,1.975,39,0.341,40,0.018,41,0.865,56,3.523,72,3.45,75,1.241,78,0.004,79,0.004,80,0.004,94,1.564,164,1.907,1065,2.644,1890,1.111,1894,3.023,1899,2.722,1900,2.464,1901,2.683,2290,7.334,2291,6.735,2292,6.221]],["title/interfaces/IPopoverPluginConfig.html",[40,0.012,1170,3.965]],["body/interfaces/IPopoverPluginConfig.html",[0,0.085,3,0.192,4,0.18,5,0.18,10,0.198,11,0.436,12,0.958,17,0.698,20,0.005,22,1.188,24,0.327,28,0.368,39,0.263,40,0.012,41,0.487,55,2.164,57,1.045,78,0.002,79,0.003,80,0.002,85,0.812,89,1.226,90,1.09,92,3.505,94,1.666,109,1.469,111,2.945,112,1.963,115,1.873,116,2.058,119,1.892,126,1.162,142,1.898,148,1.728,149,2.292,183,0.89,187,0.868,196,1.117,229,2.037,231,2.542,257,1.888,294,1.21,301,2.472,321,1.467,324,2.16,384,1.748,436,2.692,439,2.191,443,2.097,444,1.601,453,2.812,456,4.426,459,2.226,465,2.159,476,2.727,507,2.624,583,2.692,584,2.692,587,3.019,596,1.846,597,1.783,607,2.391,627,2.16,634,1.612,636,1.412,673,2.624,682,2.501,743,1.72,750,1.532,769,1.748,798,2.561,824,2.445,911,3.36,942,4.006,944,1.796,956,4.133,1020,4.133,1039,4.799,1112,7.604,1117,3.675,1132,3.12,1133,3.12,1138,4.133,1144,3.878,1155,3.878,1156,5.427,1157,3.878,1158,4.475,1159,2.624,1160,2.391,1161,4.475,1162,3.675,1163,3.878,1164,3.878,1165,4.133,1166,2.764,1167,4.133,1168,4.133,1169,4.133,1170,6.51,1173,6.053,1174,1.98,1175,4.133,1178,3.878,1179,4.133,1180,4.133,1181,7.266,1182,3.073,1183,2.927,1186,5.309,1191,3.12,1192,3.12,1193,3.878,1194,3.878,1195,3.505,1196,5.309,1197,2.329,1198,5.658,1199,3.685,1200,5.658,1201,6.125,1202,6.125,1203,5.736,1204,3.878,1205,2.927,1206,3.12,1207,3.505,1208,4.475,1209,4.475,1210,3.36,1211,3.505,1212,4.475,1213,3.878,1214,1.873,1215,1.873,1216,3.675,1217,4.475,1218,4.475,1219,4.475,1220,4.475,1221,4.475,1222,4.475,1223,4.475,1224,4.475,1225,4.475,1226,4.475,1227,4.475,1228,5.03,1229,3.675,1230,4.6,1231,3.675,1232,1.812,1233,3.233,1234,6.451,1235,4.475,1236,5.658,1237,4.133,1238,3.675,1239,4.133,1240,3.878,1241,4.475,1242,4.475,1243,1.905,1244,3.675,1245,4.133,1246,4.475,1247,4.475,1248,4.475,1249,4.475,1250,4.475,1251,5.309,1252,3.878,1253,3.878,1254,3.878,1255,4.475,1256,4.475,1257,4.475,1258,4.475,1259,4.475,1260,3.878,1261,6.451,1262,4.426,1263,1.783,1264,4.475,1265,1.783,1266,3.019,1267,4.475,1268,6.053,1269,4.475,1270,4.475,1271,4.475,1272,4.475,1273,4.475,1890,0.738]],["title/interfaces/IPosition.html",[40,0.012,1319,1.712]],["body/interfaces/IPosition.html",[3,0.123,4,0.115,5,0.115,10,0.268,11,0.432,12,1.235,13,1.301,20,0.005,21,0.835,22,0.96,24,0.331,28,0.347,33,1.178,34,0.57,35,1.556,36,1.556,37,1.295,39,0.393,40,0.025,41,0.812,42,1.94,47,1.966,53,0.723,57,1.62,75,0.842,78,0.002,79,0.002,80,0.002,83,1.519,85,0.519,89,1.21,90,1.317,97,1.626,102,0.849,106,0.827,110,0.449,116,0.783,119,0.65,131,2.38,136,0.866,145,1.817,163,0.95,164,1.791,168,1.358,183,1.191,187,0.555,198,1.515,213,2.005,222,1.387,229,0.95,238,2.279,244,0.898,245,0.937,251,2.495,254,1.216,257,1.459,284,1.519,285,1.325,287,0.993,289,1.345,294,0.773,303,2.034,313,1.327,314,1.977,328,0.95,333,1.881,334,1.244,368,0.964,384,0.815,399,1.157,411,0.993,417,1.054,439,1.022,443,1.511,444,1.58,446,1.898,447,1.58,453,1.653,455,2.02,459,1.798,464,1.478,465,1.556,476,2.151,482,0.898,524,1.95,525,1.49,530,1.259,531,1.259,532,1.259,533,1.259,539,1.534,541,1.196,545,1.626,547,1.259,548,1.511,553,1.259,557,1.945,561,1.945,571,1.259,572,1.653,575,1.237,576,1.99,580,0.794,589,1.237,591,0.993,595,1.259,596,1.331,599,1.259,634,1.598,636,1.513,642,2.21,646,2.117,674,0.978,712,1.534,713,1.93,714,1.99,728,0.849,729,1.139,743,1.495,744,1.121,745,0.978,747,2.171,750,2.078,753,1.103,761,1.022,769,1.26,775,1.121,782,1.727,790,0.964,795,1.515,797,2.557,803,1.331,807,1.054,809,1.007,821,1.237,826,1.237,888,1.157,930,1.176,944,1.78,968,1.086,1003,1.086,1056,1.196,1057,1.259,1058,1.259,1059,1.259,1061,2.272,1063,0.95,1065,0.95,1174,0.924,1182,2.171,1197,2.307,1214,1.196,1215,1.196,1232,2.185,1243,1.216,1263,1.139,1265,1.76,1319,2.272,1326,1.556,1428,1.196,1440,2.541,1586,1.237,1610,2.307,1631,1.196,1690,1.237,1734,1.259,1747,1.176,1778,1.259,1798,2.117,1890,0.471,1891,1.237,1892,1.281,1893,1.945,1894,1.679,1895,1.534,1896,1.259,1897,1.237,1898,1.259,1899,0.978,1900,0.885,1901,0.964,1902,2.377,1903,1.237,1904,1.216,1905,1.945,1906,1.281,1907,1.237,1908,1.237,1909,1.103,1910,1.259,1911,1.259,1912,1.732,1913,1.875,1914,1.121,1915,1.78,1916,3.156,1917,1.281,1918,1.848,1919,1.139,1920,2.377,1921,1.281,1922,1.98,1923,1.945,1924,1.945,1925,1.281,1926,1.945,1927,2.297,1928,1.848,1929,1.281,1930,1.086,1931,1.281,1932,1.196,1933,1.196,1934,1.847,1935,1.157,1936,1.281,1937,1.281,1938,0.964,1939,1.281,1940,1.237,1941,1.879,1942,1.945,1943,1.259,1944,1.945,1945,1.281,1946,1.237,1947,1.281,1948,2.519,1949,1.281,1950,1.259,1951,1.281,1952,1.945,1953,1.237,1954,1.103,1955,1.259,1956,1.259,1957,1.139,1958,2.377,1959,1.281,1960,2.005,1961,1.556,1962,1.281,1963,1.281,1964,1.281,1965,1.281,1966,1.259,1967,1.98,1968,1.281,1969,1.259,1970,1.216,1971,1.281,1972,1.281,1973,1.603,1974,1.259,1975,1.874,1976,1.281,1977,1.259,1978,1.259,1979,1.259,1980,1.281,1981,1.281,1982,1.259,1983,1.281,1984,1.086,1985,1.176,1986,1.259,1987,1.281,1988,1.281,1989,1.281,1990,1.281,1991,1.281,1992,1.259,1993,1.237,1994,1.281,1995,1.259,1996,1.237,1997,1.237,1998,1.281,1999,1.98,2000,2.674,2001,1.281,2002,1.259,2003,1.281,2004,1.281,2005,1.281,2006,1.281,2007,1.281,2008,1.628,2009,1.054,2010,1.281,2011,1.281,2012,1.848,2013,1.237,2014,1.237,2015,1.281,2016,1.281,2017,1.848,2018,1.98,2019,1.281,2020,1.281,2021,2.221,2022,1.879,2023,2.221,2024,1.259,2025,1.237,2026,1.022,2027,1.259,2028,1.237,2029,1.216,2030,1.038,2031,1.281,2032,1.103]],["title/interfaces/IRadialAccessors.html",[40,0.012,2293,3.757]],["body/interfaces/IRadialAccessors.html",[0,0.118,3,0.268,4,0.251,5,0.251,7,2.614,8,1.558,10,0.276,11,0.541,12,1.198,13,1.288,20,0.005,23,3.411,24,0.316,28,0.326,29,4.061,31,3.337,32,3.014,33,2.274,34,1.633,37,2.402,38,1.831,39,0.365,40,0.024,41,0.826,52,2.185,54,2.704,56,3.266,57,1.775,72,3.198,73,3.662,74,3.662,75,1.278,78,0.003,79,0.004,80,0.003,110,0.773,136,0.773,782,2,785,3.599,1538,4.892,1890,1.03,1975,2.64,2164,2.456,2271,4.694,2272,4.694,2293,6.728,2294,5.412,2295,7.175,2296,7.175,2297,5.128,2298,5.412]],["title/interfaces/IRadialDataAccessors.html",[40,0.012,2295,3.757]],["body/interfaces/IRadialDataAccessors.html",[0,0.116,3,0.263,4,0.247,5,0.247,7,2.568,8,1.531,10,0.271,11,0.535,12,1.031,13,1.108,17,0.957,20,0.005,22,1.189,23,3.351,24,0.312,28,0.322,29,4.017,31,3.278,32,2.96,33,2.432,34,1.498,37,2.383,38,1.799,39,0.363,40,0.024,41,0.667,52,2.36,54,2.656,56,3.208,57,1.756,72,3.142,73,3.597,74,3.597,75,1.322,78,0.003,79,0.004,80,0.003,110,0.885,136,0.827,782,2.139,785,3.849,1538,4.805,1890,1.012,1975,2.823,2164,2.627,2227,3.69,2271,5.021,2272,5.021,2293,6.174,2294,6.516,2295,6.958,2296,6.675,2297,5.038,2298,5.317,2299,6.844]],["title/interfaces/IRadialRendererConfig.html",[40,0.012,1941,1.947]],["body/interfaces/IRadialRendererConfig.html",[3,0.119,4,0.111,5,0.111,10,0.264,11,0.425,12,1.231,13,1.296,20,0.005,21,0.823,22,1.328,24,0.346,28,0.344,33,1.15,34,0.552,35,1.519,36,1.519,37,1.264,39,0.392,40,0.025,41,0.826,42,1.68,47,1.702,53,0.7,57,1.6,75,0.825,78,0.002,79,0.002,80,0.002,83,1.489,89,1.181,90,1.298,97,1.594,102,1.774,106,0.801,110,0.607,116,0.759,119,0.981,131,2.356,136,0.873,145,1.884,163,0.921,164,1.773,168,1.362,183,1.183,187,0.538,198,1.614,213,1.976,222,1.354,229,0.921,238,2.246,244,1.354,245,0.908,251,2.474,254,1.179,257,1.43,284,1.489,285,1.306,287,0.962,289,1.323,294,0.749,303,2.008,313,1.305,314,1.949,328,0.921,333,1.85,334,1.22,368,0.934,384,0.79,399,1.122,411,0.962,417,1.021,439,0.991,443,1.475,444,1.542,446,1.871,447,1.542,453,1.613,455,1.98,459,1.772,464,1.45,465,1.519,476,2.12,482,0.87,524,1.922,525,1.454,530,1.22,531,1.22,532,1.22,533,1.22,539,1.497,541,1.159,545,1.594,547,1.22,548,1.475,553,1.22,557,1.899,561,1.899,571,1.22,572,1.613,575,1.199,576,1.957,580,0.769,589,1.199,591,0.962,595,1.22,596,1.299,599,1.22,634,0.729,636,1.22,642,2.182,646,2.075,674,0.948,712,1.497,713,1.893,714,1.957,728,0.823,729,1.718,743,1.47,744,1.086,745,0.948,747,2.136,750,2.214,753,1.07,761,0.991,769,1.23,775,1.086,782,1.702,790,0.934,795,1.49,797,2.525,803,1.299,807,1.021,809,0.976,821,1.199,826,1.199,888,1.122,930,1.14,944,1.551,968,1.053,1003,1.053,1056,1.159,1057,1.22,1058,1.22,1059,1.22,1061,2.235,1063,0.921,1065,0.921,1174,0.895,1182,2.136,1197,2.269,1214,1.159,1215,1.159,1232,2.143,1243,1.179,1263,1.104,1265,1.718,1319,1.98,1326,1.519,1428,1.159,1440,2.498,1586,1.199,1610,2.269,1631,1.159,1690,1.199,1734,1.22,1747,1.14,1778,1.22,1798,2.075,1890,0.457,1891,1.199,1892,1.242,1893,1.899,1894,1.638,1895,1.497,1896,1.22,1897,1.199,1898,1.22,1899,0.948,1900,0.858,1901,0.934,1902,2.33,1903,1.199,1904,1.179,1905,1.899,1906,1.242,1907,1.199,1908,1.199,1909,1.07,1910,1.22,1911,1.22,1912,1.691,1913,1.851,1914,1.086,1915,1.75,1916,3.126,1917,1.242,1918,1.804,1919,1.104,1920,2.33,1921,1.242,1922,1.932,1923,1.899,1924,1.899,1925,1.242,1926,1.899,1927,2.252,1928,1.804,1929,1.242,1930,1.053,1931,1.242,1932,1.159,1933,1.159,1934,2.043,1935,1.122,1936,1.242,1937,1.242,1938,0.934,1939,1.242,1940,1.199,1941,2.252,1942,3.017,1943,2.629,1944,3.017,1945,1.932,1946,1.866,1947,1.932,1948,2.596,1949,1.932,1950,1.899,1951,1.932,1952,3.017,1953,1.866,1954,2.305,1955,2.629,1956,2.629,1957,1.104,1958,2.33,1959,1.242,1960,1.976,1961,1.519,1962,1.242,1963,1.242,1964,1.242,1965,1.242,1966,1.22,1967,1.932,1968,1.242,1969,1.22,1970,1.179,1971,1.242,1972,1.242,1973,1.565,1974,1.22,1975,1.837,1976,1.242,1977,1.22,1978,1.22,1979,1.22,1980,1.242,1981,1.242,1982,1.22,1983,1.242,1984,1.053,1985,1.14,1986,1.22,1987,1.242,1988,1.242,1989,1.242,1990,1.242,1991,1.242,1992,1.22,1993,1.199,1994,1.242,1995,1.22,1996,1.199,1997,1.199,1998,1.242,1999,1.932,2000,2.629,2001,1.242,2002,1.22,2003,1.242,2004,1.242,2005,1.242,2006,1.242,2007,1.242,2008,1.589,2009,1.021,2010,1.242,2011,1.242,2012,1.804,2013,1.199,2014,1.199,2015,1.242,2016,1.242,2017,1.804,2018,1.932,2019,1.242,2020,1.242,2021,2.178,2022,1.834,2023,2.178,2024,1.22,2025,1.199,2026,0.991,2027,1.22,2028,1.199,2029,1.179,2030,1.006,2031,1.242,2032,1.07]],["title/interfaces/IRadialScales.html",[40,0.012,2165,3.305]],["body/interfaces/IRadialScales.html",[3,0.188,4,0.177,5,0.177,10,0.33,11,0.431,12,0.83,13,0.648,20,0.005,24,0.31,28,0.259,34,0.876,39,0.383,40,0.023,41,0.85,42,1.142,47,1.157,75,1.08,78,0.002,79,0.003,80,0.002,95,1.84,97,1.824,110,0.842,112,1.51,119,1.574,126,1.572,128,2.163,134,2.451,136,0.822,142,1.875,145,1.893,168,1.366,179,1.838,182,2.163,183,0.639,187,0.853,196,1.51,226,2.043,229,2.012,231,1.849,249,3.843,284,2.462,285,0.888,289,1.79,313,0.961,326,2.875,334,1.863,336,1.441,337,2.043,368,2.041,379,3.958,441,2.792,576,1.984,644,3.176,766,1.971,768,2.644,769,1.254,778,2.813,780,2.533,782,1.157,784,4.166,803,1.325,807,2.231,848,3.176,891,3.96,1498,2.401,1508,4.22,1614,2.875,1663,3.64,1665,2.875,1682,2.206,1702,2.977,1798,1.724,1890,0.725,1909,1.697,1912,2.374,1913,2.364,1938,3.079,1961,2.133,2008,2.231,2030,2.197,2040,3.099,2043,3.233,2045,2.121,2062,2.299,2063,2.043,2082,2.349,2083,2.349,2150,4.22,2151,3.065,2152,4.339,2153,3.301,2155,4.668,2156,3.065,2157,3.065,2158,3.176,2159,3.176,2160,3.176,2161,4.395,2162,4.584,2163,3.843,2164,1.421,2165,4.372,2166,5.029,2167,3.065,2168,3.301,2169,3.301,2170,5.87,2171,3.958,2172,6.456,2173,2.875,2174,3.301,2175,4.544,2176,4.22,2177,2.715,2178,2.875,2179,2.875,2180,4.876,2181,4.623,2182,4.544,2183,2.966,2184,2.966,2185,4.86,2186,2.875,2187,2.875,2188,3.301,2189,3.301,2190,3.176,2191,2.875,2192,4.876,2193,3.301,2194,5.113,2195,2.875,2196,3.301,2197,3.301,2198,4.372,2199,3.301,2200,3.301,2201,3.301]],["title/interfaces/IRadialSeriesAccessors.html",[40,0.012,2296,3.757]],["body/interfaces/IRadialSeriesAccessors.html",[0,0.117,3,0.265,4,0.249,5,0.249,7,2.589,8,1.544,10,0.273,11,0.538,12,1.036,13,1.114,17,0.965,20,0.005,22,1.195,23,3.379,24,0.257,28,0.324,29,4.037,31,3.305,32,2.985,33,2.266,34,1.506,37,2.599,38,1.814,39,0.364,40,0.024,41,0.673,52,2.365,54,2.678,56,3.235,57,1.765,72,3.168,73,3.627,74,3.627,75,1.326,78,0.003,79,0.004,80,0.003,110,0.769,136,0.83,782,2.147,785,3.863,1538,4.845,1890,1.02,1975,2.834,2164,2.637,2227,3.72,2271,5.039,2272,5.039,2293,6.205,2294,6.548,2295,6.7,2296,6.978,2297,5.079,2298,5.361,2300,6.185]],["title/interfaces/IRectangleAccessors.html",[40,0.012,331,2.618]],["body/interfaces/IRectangleAccessors.html",[0,0.121,3,0.274,4,0.257,5,0.257,7,2.674,8,1.595,10,0.282,11,0.548,12,1.206,13,1.296,14,1.751,20,0.005,24,0.32,28,0.274,33,2.472,34,1.649,35,3.028,36,2.716,37,2.426,38,1.873,39,0.383,40,0.024,41,0.971,52,1.704,53,1.616,78,0.004,79,0.004,80,0.004,110,0.65,204,4.058,209,5.156,210,5.585,216,3.026,217,3.026,218,2.815,331,4.735,1880,4.617,1882,4.617,1884,4.617,1886,4.617,1887,4.798,1890,1.054,2301,5.005,2302,4.798,2303,4.798,2304,4.798]],["title/interfaces/IRectangleDataAccessors.html",[40,0.012,210,2.905]],["body/interfaces/IRectangleDataAccessors.html",[0,0.115,3,0.261,4,0.245,5,0.245,7,2.55,8,1.52,10,0.269,11,0.533,12,1.026,13,1.103,14,1.669,20,0.005,22,1.463,24,0.367,28,0.261,33,2.524,34,1.492,35,3.058,36,2.638,37,2.376,38,1.786,39,0.379,40,0.023,41,0.96,52,1.625,53,1.541,78,0.003,79,0.004,80,0.003,110,0.62,204,3.869,209,4.752,210,5.368,216,2.885,217,2.885,218,2.683,331,4.283,1880,6.107,1882,6.107,1884,6.107,1886,6.107,1887,6.347,1890,1.005,2301,4.772,2302,4.574,2303,4.574,2304,6.347]],["title/interfaces/IRectangleSeriesAccessors.html",[40,0.012,209,2.682]],["body/interfaces/IRectangleSeriesAccessors.html",[0,0.12,3,0.273,4,0.256,5,0.256,7,2.661,8,1.587,10,0.281,11,0.547,12,1.053,13,1.133,14,1.742,20,0.005,22,1.357,24,0.319,28,0.273,33,2.471,34,1.531,35,3.023,36,2.91,37,2.647,38,1.864,39,0.383,40,0.024,41,0.97,52,2.288,53,2.169,78,0.004,79,0.004,80,0.004,110,0.647,204,4.038,209,5.029,210,5.244,216,3.011,217,3.011,218,2.801,331,4.396,1880,4.594,1882,4.594,1884,4.594,1886,4.594,1887,4.775,1890,1.049,2301,4.981,2302,4.775,2303,4.775,2304,4.775]],["title/interfaces/IRenderContainers.html",[40,0.012,2009,1.687]],["body/interfaces/IRenderContainers.html",[3,0.124,4,0.116,5,0.116,10,0.24,11,0.317,12,1.237,13,1.303,17,0.451,20,0.005,21,0.954,24,0.302,28,0.348,33,1.188,34,0.576,35,1.57,36,1.57,37,1.306,39,0.393,40,0.025,41,0.815,42,1.713,47,1.736,53,0.731,57,1.627,75,0.848,78,0.002,79,0.002,80,0.002,83,1.529,85,0.524,89,1.22,90,1.308,97,1.637,102,0.859,106,0.836,110,0.453,116,0.792,119,0.657,131,2.389,136,0.873,145,1.821,163,0.961,164,1.798,168,1.301,183,1.194,187,0.561,198,1.524,213,2.015,222,1.399,229,0.961,238,2.29,244,0.908,245,0.947,251,2.503,254,1.23,257,1.469,284,1.529,285,1.332,287,1.004,289,1.353,294,0.781,303,2.043,313,1.335,314,1.987,328,0.961,333,1.892,334,1.253,368,0.975,384,0.824,399,1.17,411,1.004,417,1.065,439,1.034,443,1.524,444,1.593,446,1.907,447,1.593,453,1.667,455,2.034,459,1.807,464,1.489,465,1.57,476,2.162,482,0.908,524,1.96,525,1.502,530,1.273,531,1.273,532,1.273,533,1.273,539,1.547,541,1.209,545,1.84,547,1.273,548,1.524,553,1.273,557,1.962,561,1.962,571,1.273,572,1.667,575,1.251,576,2.001,580,0.802,589,1.251,591,1.004,595,1.273,596,1.342,599,1.273,634,0.76,636,1.027,642,2.451,646,2.131,674,0.989,712,1.547,713,1.944,714,2.457,728,0.859,729,1.152,743,1.504,744,1.133,745,0.989,747,2.184,750,2.09,753,1.116,761,1.034,769,1.271,775,1.133,782,1.834,790,0.975,795,1.524,797,2.568,803,1.342,807,1.065,809,1.018,821,1.251,826,1.251,888,1.17,930,1.19,944,1.593,968,1.098,1003,1.098,1056,1.209,1057,1.273,1058,1.273,1059,1.273,1061,2.285,1063,0.961,1065,0.961,1174,0.934,1182,2.184,1197,2.321,1214,1.209,1215,1.209,1232,2.201,1243,1.23,1263,1.152,1265,1.775,1319,2.034,1326,1.57,1428,1.209,1440,2.555,1586,1.251,1610,2.321,1631,1.209,1690,1.251,1734,1.273,1747,1.19,1778,1.273,1798,2.131,1890,0.477,1891,1.251,1892,1.295,1893,1.962,1894,1.693,1895,1.547,1896,1.273,1897,1.251,1898,1.273,1899,0.989,1900,0.895,1901,0.975,1902,2.393,1903,1.251,1904,1.23,1905,1.962,1906,1.295,1907,1.251,1908,1.251,1909,1.116,1910,1.273,1911,1.273,1912,1.747,1913,1.883,1914,1.133,1915,1.79,1916,3.166,1917,1.295,1918,1.864,1919,1.152,1920,2.393,1921,1.295,1922,1.996,1923,1.962,1924,1.962,1925,1.295,1926,1.962,1927,2.313,1928,1.864,1929,1.295,1930,1.098,1931,1.295,1932,1.209,1933,1.209,1934,1.86,1935,1.17,1936,1.295,1937,1.295,1938,0.975,1939,1.295,1940,1.251,1941,1.895,1942,1.962,1943,1.273,1944,1.962,1945,1.295,1946,1.251,1947,1.295,1948,2.53,1949,1.295,1950,1.273,1951,1.295,1952,1.962,1953,1.251,1954,1.116,1955,1.273,1956,1.273,1957,1.152,1958,2.393,1959,1.295,1960,2.015,1961,1.57,1962,1.295,1963,1.295,1964,1.295,1965,1.295,1966,1.273,1967,1.996,1968,1.295,1969,1.273,1970,1.23,1971,1.295,1972,1.295,1973,1.617,1974,1.273,1975,1.887,1976,1.295,1977,1.273,1978,1.273,1979,1.273,1980,1.295,1981,1.295,1982,1.273,1983,1.295,1984,1.098,1985,1.19,1986,1.273,1987,1.295,1988,1.295,1989,1.295,1990,1.295,1991,1.295,1992,1.273,1993,1.251,1994,1.295,1995,1.273,1996,1.251,1997,1.251,1998,1.295,1999,1.996,2000,2.689,2001,1.295,2002,1.273,2003,1.295,2004,1.295,2005,1.295,2006,1.295,2007,1.295,2008,2.003,2009,1.642,2010,1.295,2011,1.295,2012,1.864,2013,1.251,2014,1.251,2015,1.295,2016,1.295,2017,1.864,2018,1.996,2019,1.295,2020,1.295,2021,2.237,2022,1.895,2023,2.237,2024,1.273,2025,1.251,2026,1.034,2027,1.273,2028,1.251,2029,1.23,2030,1.049,2031,1.295,2032,1.116,2227,1.738,2305,3.224]],["title/interfaces/IRenderSeries.html",[40,0.012,299,2.444]],["body/interfaces/IRenderSeries.html",[0,0.115,3,0.189,4,0.177,5,0.177,10,0.195,11,0.431,12,1.108,13,0.649,20,0.005,21,0.771,24,0.288,28,0.367,34,0.878,38,1.291,39,0.367,40,0.024,41,0.753,52,1.616,53,1.114,78,0.002,79,0.003,80,0.002,89,1.898,90,0.945,102,2.218,109,1.661,126,1.144,136,0.858,145,1.756,154,3.053,160,2.981,164,1.453,168,1.298,183,0.88,198,2.27,213,2.39,214,2.461,218,1.94,222,2.344,244,1.384,251,2.207,257,2.115,259,3.408,267,3.071,272,4.53,285,1.224,289,1.92,294,1.19,296,2.971,297,2.971,298,3.644,299,3.986,300,3.237,301,2.176,303,2.37,306,2.971,309,2.971,310,2.582,313,1.515,321,1.443,327,2.405,328,1.464,331,2.52,332,2.461,333,1.364,336,1.443,337,2.047,580,1.223,636,1.72,728,1.801,743,1.837,785,2.869,790,2.044,795,1.512,811,3.871,968,2.303,1266,2.971,1369,4.225,1534,3.742,1595,2.971,1806,4.278,1807,3.742,1811,3.742,1890,0.726,1899,2.554,1900,2.312,1901,1.486,1913,1.872,1915,2.031,1919,2.414,1934,2.554,1954,2.881,1960,1.346,1961,1.552,2009,2.75,2035,2.353,2039,4.007,2047,3.103,2054,4.075,2073,2.353,2089,3.182,2090,3.182,2091,3.306,2092,4.549,2093,4.549,2094,3.848,2095,3.306,2096,5.201,2097,4.549,2098,3.962,2099,3.306,2100,4.83,2101,5.39,2102,3.306,2103,2.72,2104,3.306,2105,2.649,2106,4.549,2107,2.649,2108,4.225,2109,4.377,2110,4.377,2111,4.225,2112,3.182,2113,3.182,2114,3.962,2115,3.182,2116,5.004,2117,5.201,2118,4.377,2119,3.071,2120,3.306,2121,3.306,2122,3.306,2123,3.071,2124,3.306,2125,3.306,2126,3.306,2127,3.071,2128,4.549,2129,4.377,2130,3.071,2131,3.306,2132,4.549,2133,4.377,2134,2.88,2135,3.306,2136,3.306,2137,3.182,2138,3.182,2139,5.201,2140,3.306,2141,3.306,2142,3.182,2143,3.071,2144,3.306,2145,3.306,2146,3.306,2147,3.306,2148,3.306,2149,4.879]],["title/interfaces/IRenderStateData.html",[40,0.012,572,1.712]],["body/interfaces/IRenderStateData.html",[3,0.123,4,0.115,5,0.115,10,0.268,11,0.432,12,1.235,13,1.328,20,0.005,21,0.835,22,0.699,24,0.325,28,0.347,33,1.178,34,0.57,35,1.557,36,1.557,37,1.295,39,0.393,40,0.025,41,0.812,42,1.704,47,1.727,53,0.723,57,1.621,75,0.842,78,0.002,79,0.002,80,0.002,83,1.519,85,0.519,89,1.21,90,1.306,97,1.627,102,0.85,106,0.827,110,0.449,116,0.783,119,0.651,131,2.38,136,0.877,145,1.817,163,0.951,164,1.792,168,1.299,183,1.191,187,0.555,198,1.515,213,2.006,222,1.388,229,0.951,238,2.595,244,0.898,245,0.937,251,2.495,254,1.217,257,1.459,284,1.519,285,1.326,287,0.993,289,1.345,294,0.773,303,2.034,313,1.328,314,1.978,328,0.951,333,2.15,334,1.244,368,0.965,384,0.816,399,1.158,411,0.993,417,1.054,439,1.023,443,1.512,444,1.58,446,1.898,447,1.58,453,1.654,455,2.021,459,1.798,464,1.479,465,1.557,476,2.151,482,0.898,524,1.951,525,1.49,530,1.26,531,1.26,532,1.26,533,1.26,539,1.534,541,1.197,545,1.627,547,1.26,548,1.512,553,1.26,557,1.946,561,1.946,571,1.26,572,2.021,575,1.238,576,2.274,580,0.794,589,1.238,591,0.993,595,1.26,596,1.331,599,1.26,634,0.753,636,1.018,642,2.38,646,2.117,674,0.979,712,1.534,713,1.931,714,1.99,728,0.85,729,1.14,743,1.495,744,1.122,745,0.979,747,2.743,750,2.078,753,1.104,761,1.023,769,1.26,775,1.122,782,1.727,790,0.965,795,1.515,797,2.558,803,1.331,807,1.054,809,1.008,821,1.238,826,1.238,888,1.158,930,1.177,944,1.583,968,1.087,1003,1.087,1056,1.197,1057,1.26,1058,1.26,1059,1.26,1061,2.273,1063,0.951,1065,0.951,1174,0.924,1182,2.172,1197,2.308,1214,1.197,1215,1.197,1232,2.186,1243,1.217,1263,1.14,1265,1.761,1319,2.021,1326,1.557,1428,1.197,1440,2.747,1586,1.238,1610,2.308,1631,1.197,1690,1.238,1734,1.26,1747,1.177,1778,1.26,1798,2.382,1890,0.472,1891,1.238,1892,1.282,1893,1.946,1894,1.679,1895,1.534,1896,1.26,1897,1.238,1898,1.26,1899,0.979,1900,0.886,1901,0.965,1902,2.378,1903,1.238,1904,1.217,1905,1.946,1906,1.282,1907,1.238,1908,1.238,1909,1.104,1910,1.26,1911,1.26,1912,1.733,1913,1.875,1914,1.122,1915,1.78,1916,3.156,1917,1.282,1918,1.849,1919,1.14,1920,2.378,1921,1.282,1922,1.98,1923,1.946,1924,1.946,1925,1.282,1926,1.946,1927,2.297,1928,1.849,1929,1.282,1930,1.087,1931,1.282,1932,1.197,1933,1.197,1934,1.848,1935,1.158,1936,1.282,1937,1.282,1938,0.965,1939,1.282,1940,1.238,1941,1.88,1942,1.946,1943,1.26,1944,1.946,1945,1.282,1946,1.238,1947,1.282,1948,2.519,1949,1.282,1950,1.26,1951,1.282,1952,1.946,1953,1.238,1954,1.104,1955,1.26,1956,1.26,1957,1.14,1958,2.378,1959,1.282,1960,2.006,1961,1.557,1962,1.282,1963,1.282,1964,1.282,1965,1.282,1966,1.26,1967,1.98,1968,1.282,1969,1.26,1970,1.217,1971,1.282,1972,1.282,1973,1.604,1974,1.26,1975,1.875,1976,1.282,1977,1.26,1978,1.26,1979,1.26,1980,1.282,1981,1.282,1982,1.26,1983,1.282,1984,1.087,1985,1.177,1986,1.26,1987,1.282,1988,1.282,1989,1.282,1990,1.282,1991,1.282,1992,1.26,1993,1.238,1994,1.282,1995,1.26,1996,1.238,1997,1.238,1998,1.282,1999,1.98,2000,2.675,2001,1.282,2002,1.26,2003,1.282,2004,1.282,2005,1.282,2006,1.282,2007,1.282,2008,1.629,2009,1.054,2010,1.282,2011,1.282,2012,1.849,2013,1.238,2014,1.238,2015,1.282,2016,1.282,2017,1.849,2018,1.98,2019,1.282,2020,1.282,2021,2.222,2022,1.88,2023,2.222,2024,1.26,2025,1.238,2026,1.023,2027,1.26,2028,1.238,2029,1.217,2030,1.038,2031,1.282,2032,1.104]],["title/interfaces/IRenderStatesIndex.html",[40,0.012,802,3.435]],["body/interfaces/IRenderStatesIndex.html",[0,0.134,3,0.238,4,0.223,5,0.223,8,1.385,13,1.292,20,0.005,21,0.899,24,0.231,28,0.303,34,1.106,39,0.37,40,0.024,41,0.768,75,0.866,78,0.003,79,0.004,80,0.003,90,1.385,94,1.527,110,0.832,126,1.441,136,0.903,163,2.348,168,0.854,179,1.606,183,0.806,187,1.077,196,1.385,198,2.04,238,1.927,283,3.773,284,1.987,287,2.697,333,2.188,334,1.885,394,3.427,411,1.927,432,3.743,459,1.52,464,1.935,482,2.219,572,2.643,576,2.546,597,2.211,647,2.965,740,4.166,741,4.009,742,4.346,743,1.366,744,3.046,745,1.899,746,4.556,747,2.778,748,4.556,749,4.556,750,2.417,751,4.556,753,3.259,761,1.985,762,3.857,763,5.531,764,4.556,765,4.009,766,2.487,767,4.166,768,3.337,769,1.583,770,4.556,771,4.556,772,3.869,773,4.009,774,2.965,775,2.176,776,4.166,777,4.166,778,2.579,779,2.785,780,2.322,781,3.743,782,1.46,783,5.102,784,3.946,785,2.627,786,4.166,787,4.346,788,4.166,789,4.166,790,1.872,791,5.302,792,5.302,793,5.302,794,5.302,795,1.385,796,4.166,797,2.046,798,3.175,799,4.556,800,4.556,801,3.337,802,5.302,803,2.128,1890,0.915]],["title/interfaces/IRendererConfig.html",[40,0.012,1934,1.566]],["body/interfaces/IRendererConfig.html",[3,0.122,4,0.115,5,0.115,10,0.268,11,0.431,12,1.235,13,1.305,20,0.005,21,0.834,22,1.18,24,0.331,28,0.347,33,1.175,34,0.568,35,1.552,36,1.552,37,1.291,39,0.393,40,0.025,41,0.811,42,1.702,47,1.724,53,0.72,57,1.618,75,0.84,78,0.002,79,0.002,80,0.002,83,1.516,89,1.207,90,1.305,97,1.623,102,0.847,106,1.753,110,0.448,116,0.78,119,0.648,131,2.377,136,0.865,145,1.894,163,0.947,164,1.789,168,1.317,183,1.19,187,0.553,198,1.512,213,2.002,222,1.384,229,0.947,238,2.276,244,0.895,245,0.934,251,2.493,254,1.212,257,1.456,284,1.706,285,1.323,287,0.989,289,1.343,294,0.77,303,2.031,313,1.325,314,1.975,328,0.947,333,1.877,334,1.241,368,0.961,384,0.813,399,1.154,411,0.989,417,1.05,439,1.019,443,1.508,444,1.576,446,1.895,447,1.576,453,1.649,455,2.016,459,1.795,464,1.475,465,1.552,476,2.148,482,0.895,524,1.948,525,1.486,530,1.255,531,1.255,532,1.255,533,1.255,539,1.53,541,1.192,545,1.623,547,1.255,548,1.508,553,1.255,557,1.94,561,1.94,571,1.255,572,1.649,575,1.233,576,1.986,580,0.791,589,1.233,591,0.989,595,1.255,596,1.327,599,1.255,634,0.75,636,1.015,642,2.207,646,2.112,674,0.975,712,1.53,713,1.926,714,1.986,728,0.847,729,1.135,743,1.492,744,1.117,745,0.975,747,2.168,750,2.074,753,1.1,761,1.019,769,1.257,775,1.117,782,1.724,790,0.961,795,1.512,797,2.554,803,1.826,807,1.05,809,1.004,821,1.233,826,1.233,888,1.154,930,1.173,944,1.579,968,1.083,1003,1.083,1056,1.192,1057,1.255,1058,1.255,1059,1.255,1061,2.268,1063,0.947,1065,0.947,1174,0.921,1182,2.168,1197,2.303,1214,1.192,1215,1.192,1232,2.181,1243,1.212,1263,1.135,1265,1.755,1319,2.016,1326,1.552,1428,1.192,1440,2.536,1586,1.233,1610,2.303,1631,1.192,1690,1.233,1734,1.255,1747,1.173,1778,1.255,1798,2.112,1890,0.47,1891,1.233,1892,1.277,1893,1.94,1894,1.674,1895,1.53,1896,1.255,1897,1.233,1898,1.255,1899,0.975,1900,0.883,1901,0.961,1902,2.372,1903,1.233,1904,1.212,1905,1.94,1906,1.277,1907,1.233,1908,1.233,1909,1.1,1910,1.255,1911,1.255,1912,1.728,1913,1.873,1914,1.117,1915,1.777,1916,3.153,1917,1.277,1918,1.843,1919,1.135,1920,2.372,1921,1.277,1922,1.975,1923,1.94,1924,1.94,1925,1.277,1926,1.94,1927,2.292,1928,1.843,1929,1.277,1930,1.083,1931,1.277,1932,1.192,1933,1.192,1934,2.074,1935,2.454,1936,2.716,1937,1.975,1938,1.486,1939,1.975,1940,2.623,1941,1.875,1942,1.94,1943,1.255,1944,1.94,1945,1.277,1946,1.233,1947,1.277,1948,2.515,1949,1.277,1950,1.255,1951,1.277,1952,1.94,1953,1.233,1954,1.1,1955,1.255,1956,1.255,1957,1.135,1958,2.372,1959,1.277,1960,2.002,1961,1.552,1962,1.277,1963,1.277,1964,1.277,1965,1.277,1966,1.255,1967,1.975,1968,1.277,1969,1.255,1970,1.212,1971,1.277,1972,1.277,1973,1.599,1974,1.255,1975,1.87,1976,1.277,1977,1.255,1978,1.255,1979,1.255,1980,1.277,1981,1.277,1982,1.255,1983,1.277,1984,1.083,1985,1.173,1986,1.255,1987,1.277,1988,1.277,1989,1.277,1990,1.277,1991,1.277,1992,1.255,1993,1.233,1994,1.277,1995,1.255,1996,1.233,1997,1.233,1998,1.277,1999,1.975,2000,2.669,2001,1.277,2002,1.255,2003,1.277,2004,1.277,2005,1.277,2006,1.277,2007,1.277,2008,1.624,2009,1.05,2010,1.277,2011,1.277,2012,1.843,2013,1.233,2014,1.233,2015,1.277,2016,1.277,2017,1.843,2018,1.975,2019,1.277,2020,1.277,2021,2.217,2022,1.875,2023,2.217,2024,1.255,2025,1.233,2026,1.019,2027,1.255,2028,1.233,2029,1.212,2030,1.034,2031,1.277,2032,1.1]],["title/interfaces/IRendererEventPayload.html",[40,0.012,328,1.521]],["body/interfaces/IRendererEventPayload.html",[3,0.123,4,0.116,5,0.116,10,0.269,11,0.433,12,1.248,13,1.302,20,0.005,21,0.885,24,0.319,28,0.347,33,1.183,34,0.573,35,1.563,36,1.563,37,1.3,39,0.393,40,0.025,41,0.814,42,1.708,47,1.731,53,0.727,57,1.624,75,0.845,78,0.002,79,0.002,80,0.002,83,1.524,85,0.521,89,1.215,90,1.307,97,1.632,102,0.854,106,0.831,110,0.451,116,0.787,119,0.654,131,2.384,136,0.878,145,1.819,163,0.956,164,1.795,168,1.3,183,1.192,187,0.558,198,1.519,213,2.01,222,1.393,229,0.956,238,2.285,244,0.903,245,0.942,251,2.581,254,1.223,257,1.464,284,1.524,285,1.329,287,0.998,289,1.349,294,0.777,303,2.038,313,1.331,314,1.982,328,1.475,333,1.886,334,1.248,368,0.969,384,0.82,399,2.466,411,0.998,417,1.059,439,1.028,443,1.518,444,1.586,446,1.903,447,1.586,453,1.66,455,2.027,459,1.905,464,1.484,465,1.563,476,2.156,482,0.903,524,1.955,525,1.496,530,1.266,531,1.266,532,1.266,533,1.266,539,1.54,541,1.203,545,1.632,547,1.266,548,1.518,553,1.266,557,1.953,561,1.953,571,1.266,572,1.66,575,1.244,576,1.996,580,0.798,589,1.244,591,0.998,595,1.266,596,1.336,599,1.266,634,0.756,636,1.022,642,2.215,646,2.124,674,0.984,712,1.54,713,1.937,714,1.996,728,0.854,729,1.145,743,1.499,744,1.127,745,0.984,747,2.178,750,2.084,753,1.11,761,1.028,769,1.265,775,1.127,782,1.731,790,0.969,795,1.642,797,2.671,803,1.336,807,1.059,809,1.013,821,1.244,826,1.244,888,1.164,930,1.183,944,1.588,968,1.092,1003,1.092,1056,1.203,1057,1.266,1058,1.266,1059,1.266,1061,2.279,1063,0.956,1065,0.956,1174,0.929,1182,2.178,1197,2.314,1214,1.203,1215,1.203,1232,2.193,1243,1.223,1263,1.145,1265,1.767,1319,2.027,1326,1.563,1428,1.203,1440,2.753,1586,1.244,1610,2.314,1631,1.203,1690,1.244,1734,1.266,1747,1.183,1778,1.266,1798,2.124,1890,0.474,1891,1.244,1892,1.288,1893,1.953,1894,1.686,1895,1.54,1896,1.266,1897,1.244,1898,1.266,1899,0.984,1900,0.89,1901,0.969,1902,2.385,1903,1.244,1904,1.223,1905,1.953,1906,1.288,1907,1.244,1908,1.244,1909,1.11,1910,1.266,1911,1.266,1912,1.739,1913,2.023,1914,1.127,1915,1.785,1916,3.161,1917,1.288,1918,1.856,1919,1.145,1920,2.385,1921,1.288,1922,1.988,1923,1.953,1924,1.953,1925,1.288,1926,1.953,1927,2.305,1928,1.856,1929,1.288,1930,1.092,1931,1.288,1932,1.203,1933,1.203,1934,1.853,1935,1.164,1936,1.288,1937,1.288,1938,0.969,1939,1.288,1940,1.244,1941,1.887,1942,1.953,1943,1.266,1944,1.953,1945,1.288,1946,1.244,1947,1.288,1948,2.524,1949,1.288,1950,1.266,1951,1.288,1952,1.953,1953,1.244,1954,1.11,1955,1.266,1956,1.266,1957,1.145,1958,2.385,1959,1.288,1960,2.01,1961,1.563,1962,1.288,1963,1.288,1964,1.288,1965,1.288,1966,1.266,1967,1.988,1968,1.288,1969,1.266,1970,1.223,1971,1.288,1972,1.288,1973,1.61,1974,1.266,1975,1.881,1976,1.288,1977,1.266,1978,1.266,1979,1.266,1980,1.288,1981,1.288,1982,1.266,1983,1.288,1984,1.092,1985,1.183,1986,1.266,1987,1.288,1988,1.288,1989,1.288,1990,1.288,1991,1.288,1992,1.266,1993,1.244,1994,1.288,1995,1.266,1996,1.244,1997,1.244,1998,1.288,1999,1.988,2000,2.682,2001,1.288,2002,1.266,2003,1.288,2004,1.288,2005,1.288,2006,1.288,2007,1.288,2008,1.635,2009,1.059,2010,1.288,2011,1.288,2012,1.856,2013,1.244,2014,1.244,2015,1.288,2016,1.288,2017,1.856,2018,1.988,2019,1.288,2020,1.288,2021,2.506,2022,1.887,2023,2.229,2024,1.266,2025,1.244,2026,1.028,2027,1.266,2028,1.244,2029,1.223,2030,1.043,2031,1.288,2032,1.11]],["title/interfaces/IScale.html",[40,0.012,2152,2.251]],["body/interfaces/IScale.html",[3,0.152,4,0.142,5,0.142,10,0.299,11,0.369,12,0.711,13,0.522,17,1.322,19,2.006,20,0.005,21,0.957,22,1.341,24,0.361,28,0.222,34,0.705,39,0.37,40,0.022,41,0.735,42,0.919,47,0.931,75,1.055,78,0.002,79,0.003,80,0.002,85,1.365,95,1.481,97,1.563,110,0.871,112,1.687,119,1.397,126,1.756,128,1.741,134,2.738,136,0.811,142,2.095,145,1.977,168,1.373,179,1.947,182,2.552,183,0.754,187,0.687,196,1.294,226,1.645,229,1.725,231,1.585,249,4.294,273,1.585,284,2.448,285,1.048,289,1.667,313,0.774,326,2.314,334,1.734,336,1.16,337,1.645,368,1.75,379,4.422,441,3.294,576,1.7,644,2.557,766,1.587,768,2.129,769,1.929,778,3.142,780,2.83,782,0.931,784,3.778,803,1.067,807,1.912,848,2.557,891,3.513,1498,2.833,1508,4.714,1614,2.314,1663,4.066,1665,2.314,1682,1.776,1702,2.552,1798,2.034,1890,0.584,1909,1.366,1912,2.034,1913,2.403,1938,3.134,1961,2.383,2008,1.912,2030,1.883,2040,3.463,2043,3.612,2045,2.503,2062,1.851,2063,1.645,2082,2.771,2083,2.771,2150,3.617,2151,2.468,2152,4.123,2153,2.657,2155,4.856,2156,2.468,2157,2.468,2158,2.557,2159,2.557,2160,2.557,2161,5.062,2162,4.768,2163,4.294,2164,1.144,2165,2.557,2166,2.387,2167,4.714,2168,2.657,2169,2.657,2170,6.207,2171,4.919,2172,6.588,2173,3.392,2174,5.077,2175,5.077,2176,4.714,2177,3.204,2178,4.422,2179,4.422,2180,5.213,2181,4.85,2182,5.077,2183,3.499,2184,3.499,2185,5.23,2186,3.392,2187,3.392,2188,3.895,2189,3.895,2190,3.748,2191,3.392,2192,5.406,2193,3.895,2194,5.645,2195,3.392,2196,2.657,2197,2.657,2198,3.748,2199,2.657,2200,2.657,2201,2.657,2306,4.063,2307,4.259,2308,4.063,2309,3.948,2310,3.948,2311,3.948,2312,3.948,2313,3.948,2314,3.948,2315,3.948,2316,3.948,2317,3.948,2318,3.948,2319,3.948,2320,3.948]],["title/interfaces/IScaleSVGElement.html",[40,0.012,2321,4.574]],["body/interfaces/IScaleSVGElement.html",[0,0.033,3,0.075,4,0.07,5,0.07,8,0.436,10,0.17,11,0.211,12,0.24,13,0.258,17,0.601,20,0.005,24,0.123,28,0.347,39,0.075,40,0.01,41,0.19,42,1.606,47,1.892,55,2.45,57,0.9,59,1.143,75,1.005,78,0.001,79,0.002,80,0.002,83,1.655,85,0.317,87,2.14,89,1.056,90,0.601,94,1.54,95,3.723,96,0.798,103,0.895,106,1.115,108,1.935,109,0.419,112,1.377,113,1.263,114,1.965,115,1.613,116,1.244,119,1.843,120,1.263,124,0.934,126,2.088,128,1.457,131,1.446,134,2.382,136,0.758,139,1.487,142,1.822,145,0.865,148,2.489,149,0.895,151,1.897,153,2.736,154,1.421,157,2.537,158,1.051,160,0.86,168,1.056,171,3.448,172,3.537,179,0.877,182,2.499,183,0.254,184,3.014,185,1.025,186,1.025,187,0.339,188,3.286,196,2.169,198,1.133,226,1.377,231,2.777,258,0.895,283,1.583,284,2.245,285,0.917,289,1.006,312,1.312,313,1.111,314,0.527,319,1.219,320,1.219,324,0.843,333,0.541,334,0.889,336,1.928,337,0.812,339,1.312,368,0.59,369,1.614,396,1.263,418,1.179,446,0.505,459,0.479,460,1.435,464,0.812,476,1.264,524,1.748,529,1,539,1.764,541,3.391,545,1.864,548,1.319,552,1.549,572,1.109,580,1.26,581,1.179,583,1.051,584,1.051,585,1.515,586,1.435,596,1.531,597,0.696,607,2.06,620,2.736,630,1.747,634,1.015,635,1.515,636,1.171,648,1.614,655,1.747,673,1.737,674,1.014,682,3.932,714,0.573,761,0.625,769,1.903,775,1.162,779,0.877,795,1.544,803,1.368,817,1.025,833,1.549,834,2.521,881,5.518,944,0.868,958,2.432,975,2.962,976,1.747,1039,3.02,1205,1.143,1213,1.515,1233,2.785,1261,1.614,1262,1.263,1289,3.279,1317,1.515,1318,1.435,1367,0.744,1386,1.614,1542,1.782,1641,1.782,1646,0.77,1660,1.051,1663,1.051,1667,1.782,1680,1.312,1681,1.263,1682,1.935,1683,0.955,1701,1.025,1702,0.86,1714,1.747,1717,1.747,1718,3.854,1719,3.854,1720,2.962,1723,1.747,1724,1.747,1741,1.747,1750,1.747,1751,3.854,1754,1.747,1759,1.747,1764,1.747,1765,1.747,1806,2.381,1831,3.854,1833,2.962,1863,0.955,1890,0.288,1897,1.282,1908,0.757,1915,1.13,1930,0.664,1938,0.59,1950,0.77,2025,2.199,2028,0.757,2030,2.004,2032,0.675,2040,1.974,2044,1,2049,2.381,2057,4.119,2058,2.381,2059,2.319,2062,3.371,2063,0.812,2069,1.079,2072,1.737,2075,2.979,2077,0.914,2086,3.72,2108,4.651,2127,1.219,2150,1.219,2152,2.499,2164,0.565,2281,1.369,2321,4.538,2322,1.95,2323,1.95,2324,3.305,2325,3.305,2326,4.301,2327,4.301,2328,5.064,2329,3.305,2330,1.95,2331,1.95,2332,1.95,2333,1.95,2334,1.747,2335,2.962,2336,2.962,2337,1.95,2338,3.305,2339,1.95,2340,2.432,2341,1.747,2342,1.95,2343,1.614,2344,1.614,2345,1.95,2346,2.567,2347,2.962,2348,2.567,2349,3.305,2350,1.95,2351,1.95,2352,1.95,2353,1.95,2354,1.95,2355,1.95,2356,1.95,2357,1.95,2358,3.305,2359,3.305,2360,1.95,2361,1.95,2362,1.95,2363,1.95,2364,1.435,2365,1.95,2366,1.95,2367,1.95,2368,4.301,2369,1.95,2370,1.95,2371,1.95,2372,4.301,2373,1.95,2374,1.95,2375,1.95,2376,3.305,2377,1.95,2378,1.95,2379,1.95,2380,3.305,2381,5.88,2382,1.95,2383,1.95,2384,4.301,2385,6.156,2386,6.561,2387,1.95,2388,5.667,2389,1.95,2390,3.305,2391,3.305,2392,1.95,2393,1.95,2394,1.95,2395,1.95,2396,1.95,2397,3.305,2398,1.95,2399,1.95,2400,5.064,2401,1.95,2402,1.95,2403,1.95,2404,2.736,2405,1.95,2406,3.305,2407,1.95,2408,1.95,2409,1.95,2410,1.95,2411,1.95,2412,3.305,2413,1.95,2414,1.95,2415,1.95,2416,1.95,2417,3.305,2418,1.95,2419,1.95,2420,1.95,2421,1.95,2422,1.95,2423,1.95,2424,1.95,2425,3.305,2426,1.95,2427,1.95,2428,1.435,2429,3.305,2430,1.95,2431,1.95,2432,1.95,2433,4.301,2434,1.95,2435,1.95,2436,1.95,2437,1.95,2438,1.95,2439,1.95,2440,1.95,2441,3.305,2442,1.95,2443,1.95,2444,1.95,2445,4.301,2446,3.305,2447,1.95,2448,1.95,2449,1.95,2450,1.95,2451,3.854,2452,1.95,2453,3.305,2454,1.95,2455,4.301,2456,1.95,2457,1.95,2458,1.95,2459,1.95,2460,3.305,2461,1.95,2462,1.95,2463,3.305,2464,1.95,2465,1.95,2466,1.95,2467,1.95,2468,1.95,2469,1.95,2470,1.95,2471,1.95,2472,1.95,2473,1.95,2474,4.692,2475,1.95,2476,1.614,2477,1.95,2478,1.95,2479,1.95,2480,1.95,2481,1.95,2482,1.95,2483,1.95,2484,1.95,2485,1.95,2486,1.95,2487,5.064,2488,1.614,2489,1.95,2490,3.854,2491,5.097,2492,1.95,2493,1.95,2494,1.95,2495,1.95,2496,1.95,2497,1.95,2498,3.305,2499,1.747,2500,1.95,2501,5.064,2502,1.95,2503,1.95,2504,1.95,2505,1.614,2506,3.305,2507,3.305,2508,1.95,2509,1.95,2510,1.95,2511,1.95,2512,1.95,2513,3.305,2514,1.95,2515,1.95,2516,3.305,2517,3.305,2518,1.95,2519,1.95,2520,1.95,2521,1.95,2522,1.95,2523,1.95,2524,1.95,2525,1.95,2526,1.95,2527,1.95,2528,1.95,2529,1.95,2530,1.95,2531,1.95,2532,1.95,2533,1.95,2534,1.95,2535,1.95,2536,1.95,2537,1.95,2538,3.305,2539,1.95,2540,1.95,2541,4.301,2542,4.301,2543,1.435,2544,1.95,2545,1.95,2546,1.95,2547,2.736,2548,1.614,2549,1.95,2550,1.95,2551,1.95,2552,4.301,2553,1.95,2554,1.95,2555,1.95,2556,1.95,2557,1.95,2558,1.95,2559,1.95,2560,1.95,2561,1.95,2562,6.901,2563,1.95,2564,3.305,2565,3.305,2566,3.305,2567,1.95,2568,3.305,2569,1.95,2570,1.614,2571,1.95,2572,1.95,2573,1.95,2574,5.064,2575,5.064,2576,5.064,2577,1.95,2578,5.064,2579,1.95,2580,4.301,2581,1.95,2582,5.064,2583,1.95,2584,1.95,2585,1.95,2586,1.95,2587,1.95,2588,3.305,2589,5.064,2590,1.95,2591,1.95,2592,1.95,2593,3.305,2594,3.305,2595,3.305,2596,3.305,2597,5.064,2598,1.95,2599,1.95,2600,1.95,2601,3.305,2602,3.305,2603,3.305,2604,1.95,2605,4.301,2606,1.95,2607,1.95,2608,1.95,2609,1.95,2610,1.95,2611,1.95,2612,1.95,2613,1.95,2614,1.95,2615,1.95,2616,3.305,2617,4.301,2618,1.95,2619,1.95,2620,3.305,2621,3.305,2622,1.95,2623,3.305,2624,1.435,2625,1.95,2626,1.747,2627,1.95,2628,1.95,2629,1.95,2630,1.95,2631,1.95,2632,3.305,2633,1.95,2634,1.95,2635,1.95,2636,1.95,2637,1.95,2638,1.95,2639,1.95,2640,1.95,2641,1.95,2642,1.95,2643,1.95,2644,1.95,2645,1.95,2646,1.95,2647,5.667,2648,7.659,2649,7.367,2650,1.95,2651,1.95,2652,1.95,2653,3.305,2654,1.95,2655,1.95,2656,3.305,2657,1.95,2658,1.95,2659,1.95,2660,3.305,2661,1.95,2662,1.95,2663,1.747,2664,3.305,2665,1.95,2666,4.301,2667,1.95,2668,1.95,2669,1.95,2670,1.95,2671,1.95,2672,1.95,2673,1.95,2674,3.305,2675,5.064,2676,6.561,2677,1.95,2678,1.95,2679,1.95,2680,1.95,2681,2.962,2682,4.301,2683,1.95,2684,1.95,2685,1.95,2686,1.95,2687,1.95,2688,3.305,2689,1.95,2690,1.95,2691,1.747,2692,1.95,2693,1.95,2694,3.305,2695,1.95,2696,3.305,2697,1.95,2698,1.95,2699,1.95,2700,1.95,2701,3.305,2702,1.95,2703,3.305,2704,1.95,2705,1.95,2706,1.95,2707,1.95,2708,1.95,2709,1.95,2710,1.95,2711,1.95,2712,1.95,2713,1.95,2714,1.95,2715,3.305,2716,5.667,2717,1.95,2718,1.95,2719,1.95,2720,1.95,2721,1.95,2722,1.95,2723,1.95,2724,1.95,2725,1.95,2726,1.95,2727,1.95,2728,1.95,2729,1.95,2730,3.305,2731,1.95,2732,1.95,2733,1.95,2734,1.95,2735,1.95,2736,1.95,2737,1.95,2738,1.95,2739,1.95,2740,3.305,2741,3.305,2742,2.224,2743,3.305,2744,3.305,2745,1.95,2746,1.95,2747,1.95,2748,1.95,2749,1.95,2750,1.95,2751,3.305,2752,1.95,2753,1.515,2754,1.747,2755,1.95,2756,1.95,2757,1.95,2758,1.95,2759,1.95,2760,4.301,2761,4.301,2762,1.95,2763,1.95,2764,1.95,2765,1.95,2766,1.95,2767,1.95,2768,1.95,2769,1.95,2770,1.95,2771,1.95,2772,1.95,2773,1.747,2774,1.95,2775,1.747,2776,1.747,2777,1.95,2778,1.95,2779,1.95,2780,1.95,2781,1.95,2782,1.95,2783,1.95,2784,1.95,2785,1.95,2786,1.95,2787,1.747,2788,1.95,2789,1.95,2790,1.747,2791,1.95,2792,1.95,2793,1.515,2794,1.95,2795,4.301,2796,1.95,2797,1.95,2798,1.95,2799,1.95,2800,1.95,2801,2.962,2802,1.95,2803,1.95,2804,1.95,2805,1.95,2806,1.95,2807,1.95,2808,1.95,2809,1.95,2810,1.95,2811,1.95]],["title/interfaces/ISeriesAccessors.html",[36,1.612,40,0.012]],["body/interfaces/ISeriesAccessors.html",[3,0.125,4,0.117,5,0.117,10,0.241,11,0.318,12,1.237,13,1.304,17,0.453,20,0.005,21,0.841,24,0.302,28,0.348,33,1.193,34,0.579,35,1.576,36,1.922,37,1.599,39,0.394,40,0.025,41,0.817,42,1.717,47,1.74,53,0.735,57,1.631,75,0.955,78,0.002,79,0.002,80,0.002,83,1.535,89,1.225,90,1.31,97,1.643,102,0.864,106,0.84,110,0.455,116,0.796,119,0.661,131,2.393,136,0.874,145,1.824,163,0.966,164,1.801,168,1.303,183,1.195,187,0.564,198,1.528,213,2.02,222,1.405,229,0.966,238,2.296,244,0.913,245,0.952,251,2.506,254,1.237,257,1.474,284,1.535,285,1.335,287,1.009,289,1.357,294,0.785,303,2.047,313,1.339,314,1.992,328,0.966,333,1.897,334,1.257,368,0.98,384,0.829,399,1.177,411,1.009,417,1.071,439,1.039,443,1.531,444,1.6,446,1.912,447,1.6,453,1.674,455,2.041,459,1.811,464,1.494,465,1.576,476,2.167,482,0.913,524,1.965,525,1.509,530,1.28,531,1.28,532,1.28,533,1.28,539,1.553,541,1.216,545,1.643,547,1.28,548,1.531,553,1.28,557,1.97,561,1.97,571,1.28,572,1.674,575,1.258,576,2.007,580,0.807,589,1.258,591,1.009,595,1.28,596,1.348,599,1.28,634,0.765,636,1.031,642,2.225,646,2.139,674,0.994,712,1.553,713,1.951,714,2.007,728,0.864,729,1.158,743,1.508,744,1.14,745,0.994,747,2.191,750,2.096,753,1.122,761,1.039,769,1.276,775,1.14,782,1.838,790,0.98,795,1.528,797,2.574,803,1.348,807,1.071,809,1.024,821,1.258,826,1.258,888,1.177,930,1.196,944,1.599,968,1.105,1003,1.105,1056,1.216,1057,1.28,1058,1.28,1059,1.28,1061,2.292,1063,0.966,1065,0.966,1174,0.939,1182,2.191,1197,2.328,1214,1.216,1215,1.216,1232,2.208,1243,1.237,1263,1.158,1265,1.782,1319,2.041,1326,1.576,1428,1.216,1440,2.563,1586,1.258,1610,2.328,1631,1.216,1690,1.258,1734,1.28,1747,1.196,1778,1.28,1798,2.139,1890,0.479,1891,1.258,1892,1.303,1893,1.97,1894,1.7,1895,1.553,1896,1.28,1897,1.258,1898,1.28,1899,0.994,1900,0.9,1901,0.98,1902,2.402,1903,1.258,1904,1.237,1905,1.97,1906,1.303,1907,1.258,1908,1.258,1909,1.122,1910,1.28,1911,1.28,1912,1.754,1913,1.888,1914,1.14,1915,1.795,1916,3.171,1917,1.303,1918,1.872,1919,1.158,1920,2.402,1921,1.303,1922,2.005,1923,1.97,1924,1.97,1925,1.303,1926,1.97,1927,2.321,1928,1.872,1929,1.303,1930,1.105,1931,1.303,1932,1.216,1933,1.216,1934,1.866,1935,1.177,1936,1.303,1937,1.303,1938,0.98,1939,1.303,1940,1.258,1941,1.904,1942,1.97,1943,1.28,1944,1.97,1945,1.303,1946,1.258,1947,1.303,1948,2.536,1949,1.303,1950,1.28,1951,1.303,1952,1.97,1953,1.258,1954,1.122,1955,1.28,1956,1.28,1957,1.158,1958,2.402,1959,1.303,1960,2.02,1961,1.576,1962,1.303,1963,1.303,1964,1.303,1965,1.303,1966,1.28,1967,2.005,1968,1.303,1969,1.28,1970,1.237,1971,1.303,1972,1.303,1973,1.624,1974,1.28,1975,1.894,1976,1.303,1977,1.28,1978,1.28,1979,1.28,1980,1.303,1981,1.303,1982,1.28,1983,1.303,1984,1.105,1985,1.196,1986,1.28,1987,1.303,1988,1.303,1989,1.303,1990,1.303,1991,1.303,1992,1.28,1993,1.258,1994,1.303,1995,1.28,1996,1.258,1997,1.258,1998,1.303,1999,2.005,2000,2.697,2001,1.303,2002,1.28,2003,1.303,2004,1.303,2005,1.303,2006,1.303,2007,1.303,2008,1.649,2009,1.071,2010,1.303,2011,1.303,2012,1.872,2013,1.258,2014,1.258,2015,1.303,2016,1.303,2017,1.872,2018,2.005,2019,1.303,2020,1.303,2021,2.245,2022,1.904,2023,2.245,2024,1.28,2025,1.258,2026,1.039,2027,1.28,2028,1.258,2029,1.237,2030,1.055,2031,1.303,2032,1.122,2227,1.748,2812,3.242]],["title/interfaces/ISetDomainEventPayload.html",[40,0.012,2029,1.947]],["body/interfaces/ISetDomainEventPayload.html",[3,0.125,4,0.117,5,0.117,10,0.241,11,0.319,12,1.238,13,1.304,17,0.454,20,0.005,21,0.842,24,0.302,28,0.348,33,1.194,34,0.58,35,1.578,36,1.578,37,1.313,39,0.394,40,0.025,41,0.817,42,1.718,47,1.741,53,0.736,57,1.632,75,0.851,78,0.002,79,0.002,80,0.002,83,1.536,89,1.227,90,1.31,97,1.645,102,0.865,106,0.842,110,0.456,116,0.797,119,0.662,131,2.394,136,0.874,145,1.824,163,0.968,164,1.802,168,1.303,183,1.196,187,0.565,198,1.529,213,2.022,222,1.407,229,0.968,238,2.298,244,0.914,245,0.954,251,2.507,254,1.239,257,1.475,284,1.536,285,1.336,287,1.011,289,1.358,294,0.787,303,2.049,313,1.34,314,1.994,328,0.968,333,1.899,334,1.258,368,0.982,384,0.83,399,1.179,411,1.011,417,1.073,439,1.041,443,1.533,444,1.602,446,1.914,447,1.602,453,1.676,455,2.043,459,1.813,464,1.495,465,1.578,476,2.169,482,0.914,524,1.967,525,1.511,530,1.282,531,1.282,532,1.282,533,1.282,539,1.555,541,1.218,545,1.645,547,1.282,548,1.533,553,1.282,557,1.973,561,1.973,571,1.282,572,1.676,575,1.26,576,2.009,580,0.808,589,1.26,591,1.011,595,1.282,596,1.35,599,1.282,634,0.766,636,1.032,642,2.226,646,2.141,674,0.996,712,1.555,713,1.953,714,2.009,728,0.865,729,1.16,743,1.509,744,1.142,745,0.996,747,2.192,750,2.098,753,1.124,761,1.041,769,1.278,775,1.142,782,1.741,790,0.982,795,1.529,797,2.576,803,1.35,807,1.073,809,1.026,821,1.26,826,1.26,888,1.179,930,1.198,944,1.6,968,1.106,1003,1.106,1056,1.218,1057,1.282,1058,1.282,1059,1.282,1061,2.294,1063,0.968,1065,0.968,1174,0.941,1182,2.192,1197,2.33,1214,1.218,1215,1.218,1232,2.211,1243,1.239,1263,1.16,1265,1.785,1319,2.043,1326,1.578,1428,1.218,1440,2.565,1586,1.26,1610,2.33,1631,1.218,1690,1.26,1734,1.282,1747,1.198,1778,1.282,1798,2.141,1890,0.48,1891,1.26,1892,1.305,1893,1.973,1894,1.702,1895,1.555,1896,1.282,1897,1.26,1898,1.282,1899,0.996,1900,0.902,1901,0.982,1902,2.404,1903,1.26,1904,1.239,1905,1.973,1906,1.305,1907,1.26,1908,1.26,1909,1.124,1910,1.282,1911,1.282,1912,1.756,1913,1.889,1914,1.142,1915,1.797,1916,3.173,1917,1.305,1918,1.874,1919,1.16,1920,2.404,1921,1.305,1922,2.008,1923,1.973,1924,1.973,1925,1.305,1926,1.973,1927,2.323,1928,1.874,1929,1.305,1930,1.106,1931,1.305,1932,1.218,1933,1.218,1934,1.868,1935,1.179,1936,1.305,1937,1.305,1938,0.982,1939,1.305,1940,1.26,1941,1.906,1942,1.973,1943,1.282,1944,1.973,1945,1.305,1946,1.26,1947,1.305,1948,2.537,1949,1.305,1950,1.282,1951,1.305,1952,1.973,1953,1.26,1954,1.124,1955,1.282,1956,1.282,1957,1.16,1958,2.404,1959,1.305,1960,2.022,1961,1.578,1962,1.305,1963,1.305,1964,1.305,1965,1.305,1966,1.282,1967,2.008,1968,1.305,1969,1.282,1970,1.239,1971,1.305,1972,1.305,1973,1.626,1974,1.282,1975,1.896,1976,1.305,1977,1.282,1978,1.282,1979,1.282,1980,1.305,1981,1.305,1982,1.282,1983,1.305,1984,1.106,1985,1.198,1986,1.282,1987,1.305,1988,1.305,1989,1.305,1990,1.305,1991,1.305,1992,1.282,1993,1.26,1994,1.305,1995,1.282,1996,1.26,1997,1.26,1998,1.305,1999,2.008,2000,2.7,2001,1.305,2002,1.282,2003,1.305,2004,1.305,2005,1.305,2006,1.305,2007,1.305,2008,1.651,2009,1.073,2010,1.305,2011,1.305,2012,1.874,2013,1.26,2014,1.26,2015,1.305,2016,1.305,2017,1.874,2018,2.008,2019,1.305,2020,1.305,2021,2.247,2022,1.906,2023,2.247,2024,1.282,2025,1.26,2026,1.041,2027,1.282,2028,1.26,2029,1.906,2030,1.626,2031,1.305,2032,1.124,2227,1.75,2813,3.247]],["title/interfaces/ISideIndicatorAccessors.html",[40,0.012,2814,3.583]],["body/interfaces/ISideIndicatorAccessors.html",[0,0.116,3,0.193,4,0.181,5,0.181,8,1.122,10,0.199,11,0.498,12,1.179,13,1.268,14,1.231,20,0.005,22,0.711,24,0.255,28,0.363,33,1.639,35,2.166,36,2.166,37,2.31,38,1.318,39,0.338,40,0.022,41,0.761,42,1.167,47,1.183,52,1.867,55,1.393,56,2.35,57,1.05,72,2.302,78,0.002,79,0.003,80,0.002,85,0.816,91,2.635,94,1.55,96,2.051,109,1.474,110,0.712,111,2.62,115,2.571,119,1.593,134,2.488,136,0.457,142,1.393,147,3.247,148,1.735,151,2.211,164,2.086,183,0.653,187,0.872,188,3.433,196,1.533,198,1.122,213,1.373,216,3.731,217,3.731,222,2.364,226,3.498,231,2.705,244,1.412,245,2.014,257,1.215,289,1.667,294,1.661,299,3.283,300,2.401,301,1.93,303,2.053,321,1.473,324,2.169,327,2.455,328,1.494,332,2.512,334,1.036,336,1.473,337,2.089,384,1.282,418,3.032,488,1.82,634,1.842,636,1.416,669,3.247,671,3.375,729,1.791,790,1.516,941,2.169,1063,1.494,1166,2.776,1174,1.986,1191,3.134,1192,3.134,1205,2.939,1206,3.134,1207,3.52,1534,2.776,1610,1.708,1643,3.691,1698,4.836,1709,3.134,1807,2.776,1809,3.134,1890,0.741,1914,2.41,1916,2.882,1934,2.576,1957,1.791,1960,1.373,2045,2.169,2098,2.939,2814,5.484,2815,3.895,2816,7.399,2817,3.247,2818,6.47,2819,6.47,2820,3.375,2821,5.045,2822,3.895,2823,4.018,2824,5.693,2825,5.045,2826,3.895,2827,3.895,2828,3.52,2829,3.895,2830,3.895,2831,5.045,2832,5.045,2833,3.895,2834,3.895,2835,3.895,2836,3.895,2837,3.895,2838,3.895,2839,3.895,2840,3.691,2841,3.247,2842,3.895,2843,5.045,2844,3.691,2845,3.895,2846,5.325,2847,3.895,2848,6.067,2849,3.52,2850,3.895,2851,3.895,2852,3.895,2853,6.067,2854,3.895,2855,3.895,2856,3.895,2857,3.895,2858,3.895,2859,3.895,2860,3.895,2861,3.895,2862,3.895,2863,3.895,2864,3.895,2865,3.895,2866,3.691,2867,3.247,2868,3.895]],["title/interfaces/ISideIndicatorDataAccessors.html",[40,0.012,2818,3.757]],["body/interfaces/ISideIndicatorDataAccessors.html",[0,0.117,3,0.194,4,0.182,5,0.182,8,1.127,10,0.2,11,0.499,12,1.117,13,1.164,14,1.238,20,0.005,22,0.715,24,0.188,28,0.364,33,2.011,35,2.474,36,2.173,37,2.314,38,1.325,39,0.338,40,0.023,41,0.82,42,1.173,47,1.189,52,1.872,55,1.4,56,2.363,57,1.055,72,2.314,78,0.002,79,0.003,80,0.002,85,0.82,91,2.649,94,1.552,96,2.062,109,1.479,110,0.714,111,2.627,115,2.581,119,1.597,134,2.497,136,0.46,142,1.4,147,3.264,148,1.744,151,2.223,164,2.036,183,0.656,187,0.877,188,3.446,196,1.539,198,1.127,213,1.38,216,3.738,217,3.738,222,2.369,226,3.505,231,2.707,244,1.419,245,2.301,257,1.221,289,1.671,294,1.667,299,3.294,300,2.414,301,1.937,303,2.058,321,1.481,324,2.18,327,2.468,328,1.502,332,2.525,334,1.041,336,1.481,337,2.1,384,1.289,418,3.048,488,1.83,634,1.847,636,1.421,669,3.264,671,3.392,729,1.8,790,1.524,941,2.18,1063,1.502,1166,2.79,1174,2.268,1191,3.15,1192,3.15,1205,2.955,1206,3.15,1207,3.539,1534,2.79,1610,1.717,1643,3.71,1698,4.818,1709,3.15,1807,2.79,1809,3.15,1890,0.745,1914,2.418,1916,2.89,1934,2.581,1957,1.8,1960,1.884,2045,2.18,2098,2.955,2814,4.83,2815,3.915,2816,7.367,2817,3.264,2818,6.193,2819,5.764,2820,3.392,2821,5.063,2822,3.915,2823,4.032,2824,6.219,2825,5.063,2826,3.915,2827,3.915,2828,3.539,2829,3.915,2830,3.915,2831,5.063,2832,5.063,2833,3.915,2834,3.915,2835,3.915,2836,3.915,2837,3.915,2838,3.915,2839,3.915,2840,3.71,2841,3.264,2842,3.915,2843,5.063,2844,3.71,2845,3.915,2846,5.344,2847,3.915,2848,6.083,2849,3.539,2850,3.915,2851,3.915,2852,3.915,2853,6.083,2854,3.915,2855,3.915,2856,3.915,2857,3.915,2858,3.915,2859,3.915,2860,3.915,2861,3.915,2862,3.915,2863,3.915,2864,3.915,2865,3.915,2866,3.71,2867,3.264,2868,3.915]],["title/interfaces/ISideIndicatorSeriesAccessors.html",[40,0.012,2819,3.757]],["body/interfaces/ISideIndicatorSeriesAccessors.html",[0,0.114,3,0.186,4,0.175,5,0.175,8,1.085,10,0.192,11,0.49,12,1.068,13,1.187,14,1.191,20,0.005,22,1.174,24,0.308,28,0.361,33,1.602,35,2.117,36,2.425,37,2.6,38,1.275,39,0.334,40,0.022,41,0.807,42,1.129,47,1.144,52,2.148,55,1.347,56,2.274,57,1.016,72,2.227,78,0.002,79,0.003,80,0.002,85,0.789,91,2.55,94,1.532,96,1.985,109,1.65,110,0.792,111,2.576,115,2.514,119,1.565,134,2.433,136,0.442,142,1.347,147,3.142,148,1.679,151,2.14,164,2.017,183,0.632,187,0.844,188,3.357,196,1.499,198,1.085,213,1.329,216,4.043,217,4.043,222,2.332,226,3.449,231,2.69,244,1.366,245,2.255,257,1.176,289,1.644,294,1.624,299,3.209,300,2.323,301,1.887,303,2.017,321,1.425,324,2.099,327,2.375,328,1.446,332,2.43,334,1.002,336,1.425,337,2.021,384,1.241,418,2.934,488,1.761,634,1.811,636,1.385,669,4.34,671,4.51,729,1.733,790,1.467,941,2.099,1063,1.446,1166,2.686,1174,2.224,1191,3.032,1192,3.032,1205,2.844,1206,3.032,1207,3.406,1534,2.686,1610,1.653,1643,4.932,1698,4.854,1709,3.032,1807,2.686,1809,3.032,1890,0.717,1914,2.356,1916,3.315,1934,2.54,1957,1.733,1960,1.329,2045,2.099,2098,2.844,2814,4.705,2815,3.769,2816,7.432,2817,3.142,2818,5.65,2819,6.094,2820,3.265,2821,4.932,2822,3.769,2823,3.928,2824,5.963,2825,6.395,2826,5.205,2827,6.431,2828,3.406,2829,3.769,2830,3.769,2831,4.932,2832,4.932,2833,3.769,2834,3.769,2835,3.769,2836,3.769,2837,3.769,2838,3.769,2839,3.769,2840,3.571,2841,3.142,2842,3.769,2843,4.932,2844,3.571,2845,3.769,2846,5.205,2847,3.769,2848,5.963,2849,3.406,2850,3.769,2851,3.769,2852,3.769,2853,5.963,2854,3.769,2855,3.769,2856,3.769,2857,3.769,2858,3.769,2859,3.769,2860,3.769,2861,3.769,2862,3.769,2863,3.769,2864,3.769,2865,3.769,2866,3.571,2867,3.142,2868,3.769]],["title/interfaces/ISimpleThresholdZone.html",[40,0.012,2869,3.965]],["body/interfaces/ISimpleThresholdZone.html",[3,0.277,4,0.26,5,0.26,10,0.286,11,0.552,20,0.005,22,1.364,24,0.345,28,0.277,39,0.356,40,0.021,78,0.004,79,0.004,80,0.004,85,1.172,136,0.877,168,1.378,216,4.376,217,4.353,285,1.679,313,1.413,368,2.18,417,3.252,790,2.18,1610,2.949,1709,5.41,1890,1.066,2012,3.48,2177,5.135,2869,6.723,2870,5.967,2871,7.165,2872,7.757,2873,6.46,2874,5.599,2875,5.599,2876,5.599,2877,5.599]],["title/interfaces/ISpark.html",[40,0.012,767,3.435]],["body/interfaces/ISpark.html",[0,0.13,3,0.229,4,0.215,5,0.215,8,1.331,10,0.236,11,0.49,13,1.298,20,0.005,21,0.876,22,1.274,24,0.335,28,0.295,34,1.063,39,0.366,40,0.024,41,0.58,75,0.832,78,0.003,79,0.004,80,0.003,85,0.968,90,1.417,94,1.499,110,0.82,126,1.385,136,0.913,163,2.289,168,0.82,179,1.566,183,0.775,187,1.035,196,1.331,198,2.081,238,1.852,283,3.678,284,1.938,287,2.648,333,2.133,334,1.857,394,3.294,411,1.852,432,4.644,459,1.461,464,2.207,482,2.163,572,2.577,576,2.499,597,2.126,647,2.85,740,4.005,741,3.854,742,4.178,743,1.313,744,2.99,745,1.826,746,4.38,747,2.727,748,4.38,749,4.38,750,2.609,751,4.38,753,3.355,761,1.908,762,4.164,763,5.971,764,5.653,765,4.974,766,3.086,767,5.169,768,4.845,769,2.298,770,4.38,771,4.38,772,3.719,773,3.854,774,2.85,775,2.092,776,4.005,777,4.005,778,2.479,779,2.677,780,2.232,781,3.598,782,1.404,783,4.974,784,3.847,785,2.525,786,4.005,787,4.178,788,4.005,789,4.005,790,1.799,791,5.169,792,5.169,793,5.169,794,5.169,795,1.331,796,4.005,797,1.966,798,3.052,799,4.38,800,4.38,801,3.208,802,4.005,803,1.607,1890,0.88]],["title/interfaces/IStackMetadata.html",[40,0.012,2204,4.225]],["body/interfaces/IStackMetadata.html",[3,0.3,4,0.281,5,0.281,10,0.309,11,0.579,20,0.005,24,0.338,39,0.349,40,0.022,78,0.004,79,0.004,80,0.004,145,1.826,168,1.403,216,4.191,217,4.191,404,3.659,448,6.064,1890,1.154,2202,6.996,2203,6.996,2204,7.511]],["title/interfaces/IStartEndRangeAccessors.html",[40,0.012,2302,3.435]],["body/interfaces/IStartEndRangeAccessors.html",[0,0.121,3,0.274,4,0.257,5,0.257,7,2.674,8,1.595,10,0.282,11,0.548,12,1.057,13,1.136,14,1.751,20,0.005,24,0.32,28,0.274,33,2.502,34,1.536,35,3.099,36,2.716,37,2.426,38,1.873,39,0.383,40,0.024,41,0.971,52,1.704,53,1.616,78,0.004,79,0.004,80,0.004,110,0.65,204,4.058,209,4.852,210,5.255,216,4.068,217,4.068,218,2.815,331,4.409,1880,4.617,1882,4.617,1884,4.617,1886,4.617,1887,4.798,1890,1.054,2301,5.005,2302,5.787,2303,4.798,2304,4.798]],["title/interfaces/IStatusAccessors.html",[40,0.012,2878,3.757]],["body/interfaces/IStatusAccessors.html",[0,0.123,3,0.279,4,0.262,5,0.262,7,2.724,8,1.624,10,0.288,11,0.554,12,1.212,13,0.959,20,0.005,24,0.27,28,0.358,33,2.078,38,1.908,39,0.358,40,0.021,41,0.907,54,2.818,57,1.52,78,0.004,79,0.004,80,0.004,94,1.7,96,3.557,164,1.869,196,1.945,202,4.539,205,6.491,207,5.434,209,4.569,214,3.638,259,3.203,417,2.873,1890,1.074,2878,6.849,2879,6.012,2880,7.776,2881,5.345,2882,6.012,2883,6.012,2884,6.012,2885,6.012,2886,6.012,2887,6.012,2888,6.012]],["title/interfaces/IStatusDataAccessors.html",[40,0.012,2880,3.965]],["body/interfaces/IStatusDataAccessors.html",[0,0.123,3,0.279,4,0.262,5,0.262,7,2.724,8,1.624,10,0.288,11,0.554,12,1.068,13,0.959,20,0.005,24,0.27,28,0.358,33,2.306,38,1.908,39,0.358,40,0.021,41,0.907,54,2.818,57,1.52,78,0.004,79,0.004,80,0.004,94,1.7,96,3.557,164,1.869,196,1.945,202,4.539,205,6.263,207,5.816,209,4.569,214,3.638,259,3.203,417,3.258,1890,1.074,2878,6.399,2879,6.012,2880,7.66,2881,5.345,2882,6.012,2883,6.012,2884,6.012,2885,6.012,2886,6.012,2887,6.012,2888,6.012]],["title/interfaces/ITextOverflowArgs.html",[40,0.012,2056,2.826]],["body/interfaces/ITextOverflowArgs.html",[0,0.056,3,0.127,4,0.119,5,0.119,10,0.131,11,0.323,20,0.005,21,0.378,24,0.293,28,0.324,39,0.354,40,0.023,41,0.494,52,1.213,75,0.463,78,0.002,79,0.003,80,0.002,83,2.505,89,1.697,90,0.709,95,3.529,100,1.659,101,3.567,102,1.351,103,3.607,104,1.621,105,1.621,106,1.598,108,3.795,110,0.746,111,2.636,112,1.829,114,3.173,115,2.947,116,2.008,124,2.952,126,1.181,135,3.683,136,0.63,139,3.97,142,1.919,145,1.875,148,2.719,154,1.094,155,2.541,157,1.659,158,2.734,159,1.833,160,3.465,161,1.833,162,1.833,163,2.059,165,1.833,168,1.405,170,2.734,171,3.914,172,1.785,179,1.973,182,3.047,183,0.431,184,2.483,185,3.631,186,2.666,198,1.934,218,1.307,257,2.258,258,1.52,285,0.599,289,1.372,301,1.736,313,1.785,314,2.209,321,0.973,334,1.69,384,2.009,404,3.238,446,0.858,459,0.813,464,1.246,488,1.202,489,2.237,524,1.642,525,1.864,529,1.698,539,2.835,545,2.46,548,1.891,552,3.238,580,0.824,590,1.698,591,1.579,592,3.018,593,1.785,596,0.895,597,1.183,598,1.74,627,1.432,634,2.175,636,1.943,642,1.449,647,1.586,674,1.556,712,2.626,713,1.977,714,1.49,718,2.601,728,0.882,743,1.12,745,1.556,762,1.621,774,3.309,778,2.878,779,1.49,780,2.313,795,0.741,809,1.046,817,3.631,833,2.89,941,3.398,1019,1.659,1063,2.059,1142,1.833,1159,1.74,1174,2.369,1199,1.785,1326,1.602,1367,1.935,1450,3.46,1540,2.808,1541,3.825,1542,1.785,1543,1.833,1544,1.833,1550,1.833,1554,1.833,1558,1.833,1562,1.833,1637,1.833,1639,1.833,1640,1.833,1641,1.785,1644,5.62,1646,1.307,1651,2.666,1660,1.785,1667,1.785,1673,2.808,1677,1.833,1682,2.773,1683,1.621,1686,1.74,1687,1.785,1692,1.785,1693,2.666,1698,2.952,1701,1.74,1702,2.719,1766,2.808,1767,1.833,1857,1.74,1858,1.785,1859,1.785,1860,1.785,1861,1.785,1862,2.734,1863,1.621,1864,1.785,1890,0.49,1895,2.446,1913,1.674,1915,0.87,1948,1.078,1960,2.31,1973,1.078,2026,1.062,2033,1.833,2034,4.24,2035,2.429,2036,4.35,2037,1.885,2038,2.887,2039,2.83,2040,3.873,2041,2.541,2042,1.885,2043,1.586,2044,3.82,2045,3.222,2046,3.825,2047,3.172,2048,2.808,2049,4.97,2050,2.887,2051,3.933,2052,2.808,2053,1.885,2054,1.46,2055,1.833,2056,3.413,2057,3.825,2058,3.825,2059,2.734,2060,1.833,2061,1.833,2062,2.89,2063,2.568,2064,1.833,2065,1.785,2066,1.885,2067,1.833,2068,1.833,2069,1.833,2070,1.885,2071,1.885,2072,1.74,2073,1.586,2074,1.885,2075,2.666,2076,1.885,2077,1.552,2078,1.885,2079,2.734,2080,2.887,2081,2.887,2082,2.429,2083,2.429,2084,1.885,2085,1.833,2086,1.785,2087,1.885,2088,1.885]],["title/interfaces/ITickLabelConfig.html",[40,0.012,170,2.751]],["body/interfaces/ITickLabelConfig.html",[0,0.055,3,0.124,4,0.117,5,0.117,10,0.128,11,0.318,20,0.005,21,0.369,22,0.968,24,0.29,28,0.322,39,0.352,40,0.023,41,0.486,52,1.191,75,0.697,78,0.002,79,0.002,80,0.002,83,2.498,85,0.526,89,1.676,90,0.697,95,3.513,100,1.621,101,3.53,102,1.328,103,3.574,104,1.584,105,1.584,106,1.575,108,3.767,110,0.74,111,2.612,112,1.814,114,3.249,115,2.921,116,2.056,124,2.91,126,1.16,135,3.649,136,0.622,139,3.946,142,1.896,145,1.866,148,2.694,154,1.069,155,2.496,157,1.621,158,2.686,159,1.792,160,3.693,161,1.792,162,1.792,163,2.034,165,1.792,168,1.402,170,3.276,171,3.874,172,3.68,179,1.966,182,3.01,183,0.422,184,3.342,185,4.263,186,3.194,198,1.962,218,1.278,257,2.269,258,1.486,285,0.902,289,1.356,301,1.711,313,1.775,314,2.191,321,0.951,334,1.676,384,1.991,404,3.2,446,0.839,459,0.795,464,1.224,488,1.175,489,2.198,524,1.619,525,1.837,529,1.66,539,2.82,545,2.447,548,1.864,552,3.2,580,1.24,590,1.66,591,1.551,592,2.975,593,1.745,596,0.874,597,1.156,598,1.701,627,1.4,634,2.164,636,1.951,642,1.423,647,1.55,674,1.529,712,2.607,713,1.948,714,1.464,718,2.556,728,0.862,743,1.1,745,1.529,762,2.44,774,3.269,778,2.844,779,1.456,780,2.28,795,0.724,809,1.574,817,3.587,833,3.2,941,3.367,1019,1.621,1063,2.034,1142,2.759,1159,1.701,1174,2.349,1199,1.745,1326,1.574,1367,1.901,1450,3.419,1540,2.759,1541,3.779,1542,1.745,1543,1.792,1544,1.792,1550,1.792,1554,1.792,1558,1.792,1562,1.792,1637,1.792,1639,1.792,1640,1.792,1641,1.745,1644,5.608,1646,1.967,1651,2.619,1660,1.745,1667,1.745,1673,2.759,1677,1.792,1682,2.734,1683,1.584,1686,1.701,1687,1.745,1692,1.745,1693,2.619,1698,3.269,1701,1.701,1702,3.01,1766,2.759,1767,1.792,1857,1.701,1858,1.745,1859,1.745,1860,1.745,1861,1.745,1862,2.686,1863,1.584,1864,1.745,1890,0.478,1895,2.424,1913,1.654,1915,0.85,1948,1.053,1960,2.293,1973,1.053,2026,1.038,2033,1.792,2034,4.196,2035,2.91,2036,4.31,2037,1.842,2038,2.837,2039,2.79,2040,3.844,2041,2.496,2042,1.842,2043,1.55,2044,3.78,2045,3.367,2046,3.779,2047,3.134,2048,2.759,2049,4.941,2050,2.837,2051,3.886,2052,2.759,2053,1.842,2054,1.427,2055,1.792,2056,2.759,2057,1.792,2058,1.792,2059,3.68,2060,1.792,2061,1.792,2062,3.2,2063,2.844,2064,2.759,2065,2.686,2066,2.837,2067,2.759,2068,2.759,2069,2.759,2070,3.886,2071,1.842,2072,1.701,2073,1.55,2074,1.842,2075,2.619,2076,1.842,2077,1.517,2078,1.842,2079,2.686,2080,2.837,2081,2.837,2082,2.387,2083,2.387,2084,1.842,2085,1.792,2086,1.745,2087,1.842,2088,1.842]],["title/interfaces/ITooltipNode.html",[40,0.012,1323,4.225]],["body/interfaces/ITooltipNode.html",[0,0.078,3,0.176,4,0.165,5,0.165,8,1.025,10,0.255,11,0.411,13,0.851,17,1.041,20,0.005,24,0.24,28,0.37,38,1.204,39,0.176,40,0.011,41,0.628,42,1.499,47,1.519,54,1.778,55,2.722,75,1.129,78,0.002,79,0.003,80,0.002,90,1.129,94,1.5,111,1.537,112,2.027,114,1.778,116,1.125,126,1.733,128,2.02,136,0.869,142,2.243,151,2.839,168,1.25,183,0.597,196,1.903,231,2.663,238,3.09,244,1.29,301,2.274,312,3.083,313,1.459,314,1.237,321,1.346,334,1.33,337,1.908,435,4.364,437,4.333,452,3.216,476,1.892,477,2.839,487,2.536,488,1.663,491,2.967,493,2.77,496,2.408,511,2.349,519,3.665,524,1.221,580,1.14,581,2.77,583,2.47,584,2.47,607,3.565,627,1.981,634,1.519,636,1.33,735,3.372,750,1.405,769,1.647,805,2.967,830,3.818,863,4.333,864,4.333,871,4.52,874,4.52,880,4.333,889,3.372,897,3.083,916,3.083,944,1.204,968,2.899,1000,3.372,1039,5.227,1148,3.792,1204,3.559,1233,2.967,1244,3.372,1268,6.273,1274,3.559,1278,6.414,1292,4.106,1293,4.106,1294,4.106,1295,4.106,1296,4.106,1301,4.106,1302,3.792,1306,5.77,1307,4.106,1309,4.106,1310,5.77,1311,4.106,1312,8.123,1313,6.672,1314,5.77,1315,4.106,1316,4.106,1317,3.559,1318,3.372,1319,2.498,1320,4.106,1321,6.685,1322,3.792,1323,6.163,1324,4.106,1325,4.106,1326,1.447,1327,4.106,1328,4.106,1329,4.106,1330,4.106,1331,4.106,1332,4.106,1333,4.106,1334,5.77,1335,4.106,1336,4.106,1337,4.106,1338,4.106,1339,4.106,1340,4.106,1341,4.106,1342,3.792,1343,4.106,1344,5.77,1345,5.77,1346,5.33,1347,5.77,1348,5.77,1349,4.106,1350,5.77,1351,4.106,1352,4.106,1353,6.672,1354,4.106,1355,4.106,1356,5.77,1357,4.106,1358,4.106,1359,5.77,1360,4.106,1361,6.672,1362,5.77,1363,4.106,1364,4.106,1365,4.106,1366,4.106,1367,2.456,1368,4.106,1369,2.863,1370,4.106,1371,4.106,1372,7.237,1373,4.106,1374,4.106,1375,5.77,1376,4.106,1377,4.106,1378,4.106,1379,4.106,1380,3.792,1381,4.106,1382,3.559,1383,4.106,1384,4.106,1385,4.106,1386,3.792,1387,4.106,1388,4.106,1389,4.106,1390,4.106,1391,4.106,1392,4.106,1393,4.106,1394,5.77,1395,5.77,1396,5.77,1397,6.672,1398,4.106,1399,4.106,1400,4.106,1401,3.792,1402,4.106,1403,3.792,1404,3.083,1405,4.106,1406,4.106,1407,5.77,1408,4.106,1409,4.106,1410,4.106,1411,4.106,1412,4.106,1413,4.106,1414,4.106,1415,4.106,1416,4.106,1417,4.106,1418,4.106,1419,4.106,1420,4.106,1421,4.106,1422,4.106,1423,4.106,1890,0.677]],["title/interfaces/ITooltipPosition.html",[40,0.012,1442,3.965]],["body/interfaces/ITooltipPosition.html",[0,0.077,3,0.174,4,0.163,5,0.163,10,0.179,11,0.407,12,0.987,17,0.633,20,0.005,24,0.169,28,0.365,34,0.809,39,0.325,40,0.011,41,0.721,42,1.722,47,1.745,55,2.054,57,0.948,78,0.002,79,0.003,80,0.002,85,0.736,90,0.893,94,1.626,109,0.973,111,2.842,112,1.895,114,3.118,115,2.395,116,1.112,119,1.302,131,1.824,136,0.413,142,1.773,149,2.079,154,2.11,168,1.02,183,0.832,196,1.655,201,2.932,216,2.71,217,3.41,231,2.658,238,1.409,251,1.824,259,1.997,285,1.156,287,1.988,294,1.097,301,2.263,321,1.33,324,1.958,333,1.257,334,1.816,336,1.876,404,2.993,411,1.988,435,5.407,436,2.441,437,3.047,438,3.517,439,2.047,440,3.517,441,4.573,442,3.517,443,1.959,444,1.452,451,3.332,452,3.179,453,2.696,455,1.519,456,4.135,458,4.96,459,1.568,460,3.332,463,3.332,465,2.017,469,3.517,476,1.876,511,2.322,524,1.206,572,1.519,576,1.876,580,1.127,581,2.738,583,2.441,584,2.441,586,3.332,587,2.738,596,2.17,597,1.617,607,3.058,634,1.068,636,0.935,673,2.38,682,3.705,750,1.389,761,1.452,766,2.972,781,4.858,801,2.441,803,1.223,824,2.217,886,3.179,888,1.644,930,1.671,944,2.374,1132,2.83,1133,2.83,1143,7.017,1155,3.517,1156,4.135,1157,3.517,1163,3.517,1164,3.517,1182,1.452,1183,2.654,1193,3.517,1194,3.517,1195,3.179,1197,2.52,1210,4.979,1211,3.179,1216,3.332,1228,4.7,1229,3.332,1230,3.047,1231,3.332,1232,1.644,1233,2.932,1238,3.332,1240,3.517,1251,4.96,1252,3.517,1253,3.517,1254,3.517,1260,3.517,1278,6.08,1319,2.842,1424,3.748,1427,5.723,1428,1.699,1437,7.478,1438,3.517,1439,5.286,1440,2.395,1441,4.7,1442,6.828,1443,7.013,1444,3.748,1445,3.748,1446,3.517,1447,5.286,1448,5.723,1449,4.058,1450,2.268,1451,4.058,1452,6.651,1453,6.651,1454,6.651,1455,6.651,1456,6.581,1457,5.723,1458,4.058,1459,4.058,1460,5.723,1461,4.058,1462,4.058,1463,4.058,1464,4.058,1465,6.63,1466,4.058,1467,4.058,1468,4.058,1469,5.194,1470,5.746,1471,4.058,1472,4.058,1473,4.058,1474,4.058,1475,4.058,1476,3.517,1477,3.517,1478,5.723,1479,4.058,1480,4.058,1481,3.517,1482,4.058,1483,4.058,1484,4.058,1485,6.651,1486,4.058,1487,4.058,1488,4.058,1489,4.058,1490,4.058,1491,4.058,1492,4.058,1493,4.058,1494,4.058,1495,4.058,1496,4.058,1497,4.058,1498,2.217,1499,3.332,1500,4.058,1501,3.748,1502,4.058,1503,3.748,1504,4.058,1505,4.058,1506,4.058,1507,4.058,1508,2.83,1509,3.517,1510,2.83,1511,3.517,1512,3.517,1513,5.723,1514,3.748,1515,3.332,1516,4.058,1517,4.058,1518,4.058,1519,4.058,1890,0.669]],["title/interfaces/IValueProvider.html",[40,0.012,1061,1.712]],["body/interfaces/IValueProvider.html",[3,0.123,4,0.116,5,0.116,10,0.269,11,0.316,12,1.236,13,1.302,17,0.692,19,0.767,20,0.005,21,0.885,22,0.455,24,0.311,28,0.347,33,1.183,34,0.573,35,1.564,36,1.564,37,1.301,39,0.393,40,0.025,41,0.814,42,1.709,47,1.732,53,0.727,57,1.624,75,0.95,78,0.002,79,0.002,80,0.002,83,1.525,89,1.215,90,1.307,97,1.632,102,0.855,106,0.832,110,0.451,116,0.788,119,0.654,131,2.385,136,0.878,145,1.819,163,0.956,164,1.795,168,1.3,179,1.009,183,1.206,187,0.558,198,1.52,213,2.011,222,1.394,229,0.956,238,2.285,244,0.903,245,0.942,251,2.499,254,1.224,257,1.464,273,1.356,284,1.525,285,1.329,287,0.999,289,1.349,294,0.777,303,2.039,313,1.332,314,1.983,328,0.956,333,1.887,334,1.249,368,0.97,384,0.82,399,1.164,411,0.999,417,1.06,439,1.029,443,1.518,444,1.587,446,1.903,447,1.587,453,1.661,455,2.028,459,1.803,464,1.484,465,1.564,476,2.157,482,0.903,524,1.956,525,1.497,530,1.266,531,1.266,532,1.266,533,1.266,539,1.541,541,1.203,545,1.632,547,1.266,548,1.518,553,1.266,557,1.954,561,1.954,571,1.266,572,1.661,575,1.245,576,1.996,580,0.798,589,1.245,591,0.999,595,1.266,596,1.337,599,1.266,634,0.757,636,1.023,642,2.216,646,2.125,674,0.984,712,1.541,713,1.938,714,1.996,728,0.855,729,1.146,743,1.5,744,1.128,745,0.984,747,2.178,750,2.084,753,1.11,761,1.029,769,1.266,775,1.128,782,1.732,790,0.97,795,1.52,797,2.563,803,1.337,807,1.06,809,1.013,821,1.245,826,1.245,888,1.164,930,1.184,944,1.588,968,1.093,1003,1.093,1056,1.203,1057,1.266,1058,1.266,1059,1.266,1061,2.463,1063,0.956,1065,0.956,1174,0.929,1182,2.178,1197,2.315,1214,1.203,1215,1.203,1232,2.194,1243,1.224,1263,1.146,1265,1.768,1319,2.028,1326,1.564,1428,1.203,1440,2.549,1586,1.245,1610,2.315,1631,1.203,1690,1.245,1734,1.266,1747,1.184,1778,1.266,1798,2.125,1890,0.474,1891,1.245,1892,1.289,1893,1.954,1894,1.686,1895,1.541,1896,1.266,1897,1.245,1898,1.266,1899,0.984,1900,0.891,1901,0.97,1902,2.386,1903,1.245,1904,1.224,1905,1.954,1906,1.289,1907,1.245,1908,1.245,1909,1.11,1910,1.266,1911,1.266,1912,1.74,1913,1.959,1914,1.128,1915,1.785,1916,3.161,1917,1.289,1918,1.857,1919,1.146,1920,2.386,1921,1.289,1922,1.989,1923,1.954,1924,1.954,1925,1.289,1926,1.954,1927,2.305,1928,1.857,1929,1.289,1930,1.093,1931,1.289,1932,1.203,1933,1.203,1934,1.854,1935,1.164,1936,1.289,1937,1.289,1938,0.97,1939,1.289,1940,1.245,1941,1.888,1942,1.954,1943,1.266,1944,1.954,1945,1.289,1946,1.245,1947,1.289,1948,2.525,1949,1.289,1950,1.266,1951,1.289,1952,1.954,1953,1.245,1954,1.11,1955,1.266,1956,1.266,1957,1.146,1958,2.386,1959,1.289,1960,2.011,1961,1.564,1962,1.289,1963,1.289,1964,1.289,1965,1.289,1966,1.266,1967,1.989,1968,1.289,1969,1.266,1970,1.224,1971,1.289,1972,1.289,1973,1.611,1974,1.266,1975,1.881,1976,1.289,1977,1.266,1978,1.266,1979,1.266,1980,1.289,1981,1.289,1982,1.266,1983,1.289,1984,1.093,1985,1.184,1986,1.266,1987,1.289,1988,1.289,1989,1.289,1990,1.289,1991,1.289,1992,1.266,1993,1.245,1994,1.289,1995,1.266,1996,1.245,1997,1.245,1998,1.289,1999,1.989,2000,2.682,2001,1.289,2002,1.266,2003,1.289,2004,1.289,2005,1.289,2006,1.289,2007,1.289,2008,1.635,2009,1.06,2010,1.289,2011,1.289,2012,1.857,2013,1.245,2014,1.245,2015,1.289,2016,1.289,2017,1.857,2018,1.989,2019,1.289,2020,1.289,2021,2.23,2022,1.888,2023,2.23,2024,1.266,2025,1.245,2026,1.029,2027,1.266,2028,1.245,2029,1.224,2030,1.044,2031,1.989,2032,2.351,2889,3.208,2890,2.492,2891,3.208]],["title/interfaces/IValueThicknessAccessors.html",[40,0.012,2303,3.435]],["body/interfaces/IValueThicknessAccessors.html",[0,0.121,3,0.274,4,0.257,5,0.257,7,2.674,8,1.595,10,0.282,11,0.548,12,1.057,13,1.136,14,1.751,20,0.005,24,0.32,28,0.274,33,2.502,34,1.536,35,3.099,36,2.716,37,2.426,38,1.873,39,0.383,40,0.024,41,0.971,52,1.704,53,1.616,78,0.004,79,0.004,80,0.004,110,0.874,204,4.058,209,4.852,210,5.255,216,3.026,217,3.026,218,3.785,331,4.409,1880,4.617,1882,4.617,1884,4.617,1886,4.617,1887,4.798,1890,1.054,2301,5.005,2302,4.798,2303,5.787,2304,4.798]],["title/interfaces/IXYAccessors.html",[40,0.012,2892,3.757]],["body/interfaces/IXYAccessors.html",[0,0.113,3,0.256,4,0.24,5,0.24,7,2.5,10,0.264,11,0.526,12,1.205,13,1.338,20,0.005,24,0.307,28,0.344,29,3.192,30,3.418,31,3.192,32,2.883,33,2.239,34,1.601,37,2.461,38,1.751,39,0.36,40,0.023,41,0.804,42,2.086,47,2.114,52,1.973,53,1.87,57,1.727,60,4.165,62,4.165,75,1.154,78,0.003,79,0.004,80,0.003,94,1.455,109,1.433,110,0.752,136,0.752,164,1.927,245,2.424,303,1.751,646,2.343,782,1.946,785,3.502,1065,2.459,1160,3.192,1890,0.985,1894,2.811,1899,2.531,1900,2.291,1901,2.495,1975,2.569,2103,3.69,2164,2.39,2181,4.232,2267,6.016,2268,4.165,2271,4.568,2272,4.568,2823,3.907,2892,6.073,2893,5.177,2894,6.759,2895,6.41,2896,4.905]],["title/interfaces/IXYDataAccessors.html",[40,0.012,2267,3.19]],["body/interfaces/IXYDataAccessors.html",[0,0.111,3,0.251,4,0.236,5,0.236,7,2.455,10,0.259,11,0.52,12,1.092,13,1.265,17,0.915,20,0.005,24,0.304,28,0.342,29,3.134,30,3.357,31,3.134,32,2.831,33,2.413,34,1.457,37,2.446,38,1.72,39,0.358,40,0.024,41,0.638,42,2.305,47,2.336,52,1.951,53,1.849,57,1.708,60,4.091,62,4.091,75,1.243,78,0.003,79,0.004,80,0.003,94,1.438,109,1.407,110,0.849,136,0.811,164,1.754,245,2.734,303,1.72,646,2.301,782,2.097,785,3.773,1065,1.951,1160,3.134,1890,0.968,1894,2.23,1899,2.008,1900,1.818,1901,1.979,1975,2.767,2103,3.623,2164,2.575,2181,4.773,2227,3.528,2267,5.817,2268,4.091,2271,4.921,2272,4.921,2823,3.837,2892,4.817,2893,6.338,2894,6.241,2895,7.229,2896,4.817,2897,6.545]],["title/interfaces/IXYGridConfig.html",[40,0.012,2075,2.682]],["body/interfaces/IXYGridConfig.html",[0,0.055,3,0.125,4,0.118,5,0.118,10,0.129,11,0.32,20,0.005,21,0.372,24,0.275,28,0.323,39,0.353,40,0.023,41,0.595,52,1.199,75,0.456,78,0.002,79,0.002,80,0.002,83,2.5,85,0.531,89,1.684,90,0.701,95,3.621,100,3.434,101,3.543,102,1.336,103,3.586,104,1.598,105,1.598,106,1.584,108,4.024,110,0.766,111,2.621,112,1.82,114,3.157,115,2.93,116,1.998,124,2.926,126,1.167,135,3.813,136,0.625,139,3.955,142,1.904,145,1.903,148,2.703,154,1.657,155,2.512,157,1.635,158,2.704,159,1.807,160,3.445,161,1.807,162,1.807,163,2.043,165,1.807,168,1.386,170,2.704,171,2.636,172,1.759,179,1.968,182,3.023,183,0.425,184,2.456,185,3.603,186,2.636,198,1.926,218,1.288,257,2.273,258,2.302,285,0.591,289,1.362,301,1.72,313,1.779,314,2.197,321,0.959,334,1.681,384,1.998,404,3.214,446,0.846,459,0.801,464,1.232,488,1.821,489,2.212,524,1.628,525,1.847,529,1.674,539,2.825,545,2.452,548,1.874,552,3.662,580,0.812,590,1.674,591,1.561,592,2.991,593,1.759,596,0.882,597,1.166,598,1.715,627,2.169,634,2.168,636,1.938,642,1.432,647,1.563,674,1.539,712,2.614,713,1.959,714,1.474,718,2.572,728,0.869,743,1.348,745,1.539,762,1.598,774,3.283,778,2.856,779,1.468,780,2.292,795,0.73,809,1.031,817,3.603,833,2.863,941,3.379,1019,2.512,1063,2.043,1142,1.807,1159,1.715,1174,2.356,1199,1.759,1326,1.584,1367,1.913,1450,3.434,1540,2.777,1541,3.795,1542,1.759,1543,1.807,1544,1.807,1550,1.807,1554,1.807,1558,1.807,1562,1.807,1637,1.807,1639,1.807,1640,1.807,1641,1.759,1644,5.623,1646,1.288,1651,2.636,1660,1.759,1667,1.759,1673,2.777,1677,1.807,1682,2.748,1683,1.598,1686,1.715,1687,1.759,1692,1.759,1693,2.636,1698,2.926,1701,1.715,1702,2.694,1766,2.777,1767,1.807,1857,2.636,1858,2.704,1859,2.704,1860,2.704,1861,2.704,1862,3.696,1863,2.456,1864,2.704,1890,0.482,1895,2.432,1913,1.661,1915,0.858,1948,1.632,1960,2.3,1973,1.062,2026,1.608,2033,1.807,2034,4.212,2035,2.402,2036,4.324,2037,1.858,2038,2.855,2039,2.804,2040,3.855,2041,2.512,2042,1.858,2043,1.563,2044,4.006,2045,3.2,2046,3.795,2047,3.147,2048,2.777,2049,4.952,2050,2.855,2051,3.903,2052,2.777,2053,1.858,2054,1.439,2055,1.807,2056,2.777,2057,1.807,2058,1.807,2059,2.704,2060,1.807,2061,1.807,2062,2.863,2063,2.856,2064,1.807,2065,1.759,2066,1.858,2067,1.807,2068,1.807,2069,1.807,2070,1.858,2071,1.858,2072,1.715,2073,1.563,2074,1.858,2075,3.603,2076,2.855,2077,2.351,2078,2.855,2079,2.704,2080,2.855,2081,2.855,2082,2.402,2083,2.402,2084,1.858,2085,1.807,2086,1.759,2087,1.858,2088,1.858]],["title/interfaces/IXYScales.html",[40,0.012,326,2.992]],["body/interfaces/IXYScales.html",[3,0.187,4,0.176,5,0.176,10,0.329,11,0.429,12,0.826,13,0.644,20,0.005,24,0.324,28,0.258,34,0.871,39,0.383,40,0.023,41,0.848,42,1.931,47,1.957,75,1.076,78,0.002,79,0.003,80,0.002,95,1.829,97,1.816,110,0.841,112,1.504,119,1.569,126,1.565,128,2.15,134,2.441,136,0.821,142,1.867,145,1.891,168,1.365,179,1.835,182,2.15,183,0.635,187,0.848,196,1.504,226,2.031,229,2.004,231,1.842,249,3.828,284,2.459,285,0.883,289,1.787,313,0.956,326,3.942,334,1.859,336,1.433,337,2.031,368,2.033,379,3.942,441,2.776,576,1.976,644,3.158,766,1.959,768,2.629,769,1.247,778,2.801,780,2.523,782,1.15,784,4.156,803,1.317,807,2.222,848,3.158,891,3.947,1498,2.387,1508,4.203,1614,2.858,1663,3.625,1665,2.858,1682,2.193,1702,2.965,1798,1.714,1890,0.721,1909,1.687,1912,2.364,1913,2.362,1938,3.077,1961,2.124,2008,2.222,2030,2.189,2040,3.087,2043,3.22,2045,2.109,2062,2.286,2063,2.031,2082,2.335,2083,2.335,2150,4.203,2151,3.047,2152,4.393,2153,3.282,2155,4.654,2156,3.047,2157,3.047,2158,3.158,2159,3.158,2160,3.158,2161,4.381,2162,4.574,2163,3.828,2164,1.412,2165,3.158,2166,2.948,2167,3.047,2168,3.282,2169,3.282,2170,5.858,2171,3.942,2172,6.451,2173,2.858,2174,3.282,2175,4.526,2176,4.203,2177,2.699,2178,2.858,2179,2.858,2180,4.864,2181,4.615,2182,4.526,2183,2.948,2184,2.948,2185,4.851,2186,2.858,2187,2.858,2188,3.282,2189,3.282,2190,3.158,2191,2.858,2192,4.864,2193,3.282,2194,5.102,2195,2.858,2196,3.282,2197,3.282,2198,4.355,2199,3.282,2200,3.282,2201,3.282]],["title/interfaces/IXYSeriesAccessors.html",[40,0.012,2894,3.583]],["body/interfaces/IXYSeriesAccessors.html",[0,0.111,3,0.252,4,0.237,5,0.237,7,2.461,10,0.26,11,0.521,12,1.094,13,1.309,17,0.917,20,0.005,22,1.321,24,0.304,28,0.342,29,3.141,30,3.364,31,3.141,32,2.837,33,2.227,34,1.46,37,2.654,38,1.724,39,0.358,40,0.024,41,0.639,42,2.071,47,2.099,52,2.336,53,2.214,57,1.711,60,4.1,62,4.1,75,1.244,78,0.003,79,0.004,80,0.003,94,1.44,109,1.41,110,0.745,136,0.811,164,1.756,245,2.401,303,1.724,646,2.306,782,2.099,785,3.777,1065,1.955,1160,3.141,1890,0.97,1894,2.235,1899,2.012,1900,1.822,1901,1.983,1975,2.77,2103,3.631,2164,2.578,2181,4.19,2227,3.536,2267,5.562,2268,4.1,2271,4.926,2272,4.926,2823,3.845,2892,4.828,2893,6.347,2894,6.539,2895,6.347,2896,4.828,2898,5.879]],["title/interfaces/IZoneCrossPoint.html",[40,0.012,2013,1.981]],["body/interfaces/IZoneCrossPoint.html",[3,0.123,4,0.116,5,0.116,10,0.269,11,0.433,12,1.239,13,1.306,20,0.005,21,0.837,22,0.701,24,0.311,28,0.347,33,1.182,34,0.572,35,1.562,36,1.562,37,1.3,39,0.393,40,0.025,41,0.835,42,1.708,47,1.731,53,0.726,57,1.623,75,0.844,78,0.002,79,0.002,80,0.002,83,1.524,85,0.521,89,1.214,90,1.307,97,1.631,102,0.854,106,0.831,110,0.451,116,0.787,119,0.653,131,2.384,136,0.866,145,1.863,163,0.955,164,1.794,168,1.3,183,1.192,187,0.557,198,1.519,213,2.01,222,1.393,229,0.955,238,2.284,244,0.902,245,0.941,251,2.581,254,1.222,257,1.463,284,1.524,285,1.328,287,0.997,289,1.348,294,0.776,303,2.038,313,1.331,314,1.982,328,0.955,333,1.886,334,1.248,368,0.969,384,0.819,399,1.163,411,0.997,417,1.059,439,1.027,443,1.517,444,1.586,446,1.902,447,1.586,453,1.659,455,2.026,459,1.802,464,1.483,465,1.562,476,2.156,482,0.902,524,1.955,525,1.495,530,1.265,531,1.265,532,1.265,533,1.265,539,1.539,541,1.202,545,1.631,547,1.265,548,1.517,553,1.265,557,1.952,561,1.952,571,1.265,572,1.659,575,1.243,576,1.995,580,0.798,589,1.243,591,0.997,595,1.265,596,1.336,599,1.265,634,0.756,636,1.022,642,2.215,646,2.123,674,0.983,712,1.539,713,1.936,714,1.995,728,0.854,729,1.145,743,1.499,744,1.126,745,0.983,747,2.177,750,2.083,753,1.109,761,1.027,769,1.265,775,1.126,782,1.731,790,0.969,795,1.519,797,2.562,803,1.336,807,1.059,809,1.012,821,1.243,826,1.243,888,1.163,930,1.182,944,1.587,968,1.092,1003,1.092,1056,1.202,1057,1.265,1058,1.265,1059,1.265,1061,2.278,1063,0.955,1065,0.955,1174,0.928,1182,2.177,1197,2.313,1214,1.202,1215,1.202,1232,2.192,1243,1.222,1263,1.145,1265,1.766,1319,2.278,1326,1.562,1428,1.855,1440,2.547,1586,1.243,1610,2.642,1631,1.202,1690,1.243,1734,1.265,1747,1.182,1778,1.265,1798,2.123,1890,0.474,1891,1.243,1892,1.288,1893,1.952,1894,1.685,1895,1.539,1896,1.265,1897,1.243,1898,1.265,1899,0.983,1900,0.89,1901,0.969,1902,2.384,1903,1.243,1904,1.222,1905,1.952,1906,1.288,1907,1.243,1908,1.243,1909,1.109,1910,1.265,1911,1.265,1912,1.739,1913,1.879,1914,1.126,1915,1.784,1916,3.228,1917,1.288,1918,1.855,1919,1.145,1920,2.384,1921,1.288,1922,1.987,1923,1.952,1924,1.952,1925,1.288,1926,1.952,1927,2.304,1928,1.855,1929,1.288,1930,1.092,1931,1.288,1932,1.202,1933,1.202,1934,1.853,1935,1.163,1936,1.288,1937,1.288,1938,0.969,1939,1.288,1940,1.243,1941,1.887,1942,1.952,1943,1.265,1944,1.952,1945,1.288,1946,1.243,1947,1.288,1948,2.524,1949,1.288,1950,1.265,1951,1.288,1952,1.952,1953,1.243,1954,1.109,1955,1.265,1956,1.265,1957,1.145,1958,2.384,1959,1.288,1960,2.124,1961,1.562,1962,1.288,1963,1.288,1964,1.288,1965,1.288,1966,1.265,1967,1.987,1968,1.288,1969,1.265,1970,1.222,1971,1.288,1972,1.288,1973,1.61,1974,1.265,1975,1.88,1976,1.288,1977,1.265,1978,1.265,1979,1.265,1980,1.288,1981,1.288,1982,1.265,1983,1.288,1984,1.092,1985,1.182,1986,1.265,1987,1.288,1988,1.288,1989,1.288,1990,1.288,1991,1.288,1992,1.265,1993,1.243,1994,1.288,1995,1.265,1996,1.243,1997,1.243,1998,1.288,1999,1.987,2000,2.681,2001,1.288,2002,1.265,2003,1.288,2004,1.288,2005,1.288,2006,1.288,2007,1.288,2008,1.634,2009,1.059,2010,1.987,2011,1.987,2012,2.547,2013,1.919,2014,1.919,2015,2.728,2016,1.288,2017,1.855,2018,1.987,2019,1.288,2020,1.288,2021,2.228,2022,1.887,2023,2.228,2024,1.265,2025,1.243,2026,1.027,2027,1.265,2028,1.243,2029,1.222,2030,1.043,2031,1.288,2032,1.109]],["title/interfaces/IZoomPluginConfiguration.html",[40,0.012,2899,4.225]],["body/interfaces/IZoomPluginConfiguration.html",[0,0.081,3,0.185,4,0.173,5,0.173,10,0.19,11,0.424,12,1.064,20,0.005,21,0.548,22,0.944,24,0.179,28,0.384,39,0.256,40,0.012,41,0.468,55,2.672,75,0.931,78,0.003,79,0.003,80,0.002,83,2.08,89,1.875,90,0.931,94,1.526,96,2.722,97,1.298,103,2.205,106,1.725,112,1.074,114,1.864,119,1.357,126,1.549,132,2.816,142,1.848,145,1.537,148,1.662,149,2.205,168,1.235,183,0.995,187,0.836,196,2.054,198,1.074,226,2.773,231,2.564,258,3.506,301,1.874,313,1.497,314,2.227,319,3.002,320,3.002,321,1.411,324,2.078,332,2.406,336,1.955,347,3.536,436,2.59,443,2.042,444,1.54,447,1.54,459,1.634,465,2.103,476,1.955,524,1.28,545,2.063,583,2.59,584,2.59,587,2.905,596,1.798,597,1.716,615,3.977,636,0.993,642,1.372,643,3.977,673,2.525,709,3.977,712,2.072,761,1.54,795,1.844,798,2.464,803,1.298,834,2.816,891,2.464,944,1.262,1019,2.406,1132,3.002,1133,3.002,1166,2.659,1182,1.54,1183,2.816,1191,3.002,1192,3.002,1205,2.816,1206,3.002,1263,2.377,1367,1.833,1469,3.373,1512,3.731,1651,2.525,1680,3.233,1681,3.111,1683,2.352,1693,2.525,1732,3.977,1747,1.772,1795,5.51,1806,4.564,1816,3.731,1863,2.352,1890,0.71,1915,1.749,1927,1.833,2029,2.539,2039,2.205,2044,2.464,2054,2.118,2065,2.59,2077,2.252,2114,2.816,2152,2.935,2245,3.233,2246,4.479,2476,3.977,2505,3.977,2753,3.731,2793,5.17,2820,3.233,2899,6.825,2900,4.305,2901,7.759,2902,5.964,2903,5.964,2904,5.964,2905,8.624,2906,3.977,2907,3.977,2908,4.305,2909,3.536,2910,3.977,2911,4.305,2912,4.305,2913,4.305,2914,4.305,2915,4.305,2916,4.305,2917,4.305,2918,4.305,2919,4.305,2920,3.731,2921,5.932,2922,4.305,2923,4.305,2924,4.305,2925,4.305,2926,4.305,2927,4.305,2928,4.305,2929,4.305,2930,4.305,2931,4.305,2932,4.305,2933,3.731,2934,4.305,2935,4.305,2936,4.305,2937,4.305,2938,3.977,2939,4.305,2940,4.305,2941,4.305,2942,4.305,2943,4.305,2944,4.305,2945,4.305,2946,4.305,2947,4.305,2948,7.167,2949,4.305,2950,4.305,2951,4.305,2952,4.305,2953,4.305,2954,4.305,2955,4.305,2956,5.964,2957,4.305,2958,4.305,2959,4.305,2960,4.305,2961,4.305,2962,3.977,2963,4.305,2964,4.305,2965,4.305,2966,4.305,2967,4.305,2968,4.305,2969,4.305,2970,4.305,2971,4.305,2972,4.305,2973,4.305,2974,3.977,2975,4.479,2976,3.977,2977,4.305,2978,4.305,2979,4.305,2980,4.305,2981,4.305,2982,6.844,2983,5.964,2984,7.388,2985,4.305,2986,5.964,2987,6.404,2988,5.964,2989,4.305,2990,5.51,2991,4.305,2992,5.964,2993,6.844,2994,5.964,2995,4.305,2996,4.305,2997,4.305,2998,4.305,2999,4.305,3000,4.305,3001,4.305,3002,4.305,3003,3.977,3004,4.305,3005,4.305,3006,4.305]],["title/classes/InteractionLabelPlugin.html",[0,0.087,2346,3.965]],["body/classes/InteractionLabelPlugin.html",[0,0.11,2,1.142,3,0.179,4,0.168,5,0.168,10,0.184,11,0.415,14,1.142,17,1.363,19,1.112,20,0.005,21,0.742,22,0.659,24,0.279,28,0.378,39,0.179,41,0.731,42,1.892,47,1.097,54,1.805,55,2.376,78,0.002,79,0.003,80,0.002,83,1.894,85,0.756,90,0.91,94,1.79,95,2.441,96,3.07,109,1.399,110,0.808,112,1.679,117,3.564,126,1.515,131,1.328,136,0.684,142,1.807,149,2.135,151,3.585,160,2.87,168,0.897,171,3.42,179,1.808,183,1.21,184,2.277,187,0.809,196,1.679,226,1.937,231,2.751,258,2.987,273,1.782,289,0.924,301,1.832,317,3.612,318,3.612,321,1.366,324,2.011,329,3.012,336,1.366,404,2.18,436,2.507,443,2.849,444,2.918,446,1.946,447,2.407,464,1.142,465,2.981,466,2.907,471,2.907,472,2.907,473,2.907,474,2.907,476,1.366,545,2.311,583,2.507,584,2.507,587,2.812,596,2.027,597,1.661,607,3.116,633,3.265,634,1.535,636,0.961,682,3.259,743,1.794,769,1.189,783,4.214,784,2.329,886,3.265,888,1.688,930,1.716,944,1.71,959,4.168,1132,2.907,1133,2.907,1143,3.612,1177,3.85,1182,1.491,1183,2.726,1210,4.379,1263,1.661,1436,4.168,1450,3.759,1469,4.568,1470,5.83,1476,3.612,1477,3.612,1481,5.83,1509,3.612,1631,1.745,1680,3.13,1681,3.012,1683,2.277,1684,3.85,1689,3.85,1702,2.051,1703,4.168,1747,1.716,1816,5.83,2041,2.329,2060,3.602,2063,4.062,2067,2.575,2152,2.87,2243,3.13,2244,4.379,2271,2.575,2306,3.265,2346,5.83,2474,5.387,2488,3.85,2490,4.168,2491,3.85,2499,5.831,2547,3.85,2909,3.423,2920,5.83,2933,3.612,3007,7.946,3008,6.507,3009,5.831,3010,7.505,3011,4.65,3012,4.65,3013,4.65,3014,4.168,3015,3.612,3016,4.168,3017,4.65,3018,4.65,3019,4.168,3020,4.65,3021,4.65,3022,4.168,3023,6.507,3024,4.65,3025,4.168,3026,5.831,3027,3.85,3028,6.507,3029,4.65,3030,4.168,3031,4.65,3032,4.168,3033,4.168,3034,4.168,3035,4.168,3036,5.387,3037,4.168,3038,4.168,3039,4.65,3040,4.65,3041,4.65,3042,4.65,3043,4.65,3044,7.505,3045,4.65,3046,4.65,3047,4.65,3048,4.65,3049,4.65,3050,4.65,3051,6.507,3052,4.65,3053,4.65,3054,4.65,3055,4.65,3056,4.65,3057,4.65,3058,4.65,3059,4.65,3060,4.168,3061,6.507,3062,4.65,3063,7.505,3064,4.65,3065,4.65,3066,4.168,3067,4.65,3068,6.507,3069,8.556,3070,4.65,3071,6.507,3072,4.65,3073,4.65,3074,4.65,3075,4.65,3076,4.65,3077,4.65,3078,4.65,3079,4.65,3080,4.65,3081,4.168,3082,4.65,3083,4.65,3084,4.65,3085,4.65]],["title/classes/InteractionLinePlugin.html",[0,0.087,2348,3.965]],["body/classes/InteractionLinePlugin.html",[0,0.138,2,1.332,3,0.208,4,0.196,5,0.196,10,0.215,11,0.461,12,0.667,17,1.363,20,0.005,21,0.619,24,0.269,28,0.378,39,0.208,41,0.792,42,1.683,44,3.809,49,3.809,55,2.579,57,1.136,78,0.003,79,0.004,80,0.003,83,1.824,85,0.882,90,1.011,94,1.803,95,2.712,96,3.326,109,1.166,110,0.741,112,1.617,117,3.762,119,1.106,126,1.263,136,0.495,142,1.507,154,3.254,179,1.894,183,1.254,187,0.944,196,1.213,226,2.26,231,2.638,258,3.318,273,1.98,289,1.077,301,2.036,321,1.594,324,2.346,436,2.924,443,2.954,444,3.04,446,2.107,447,2.607,464,1.332,465,3.08,466,3.39,471,3.39,472,3.39,473,3.39,474,3.39,476,1.594,545,2.196,583,2.924,584,2.924,587,3.28,596,2.196,597,1.938,607,2.598,633,3.809,743,1.993,769,1.387,886,3.809,888,1.969,930,2.002,944,1.9,1132,3.39,1133,3.39,1182,1.739,1183,3.18,1210,4.865,1263,1.938,1450,3.621,1469,5.075,1470,6.315,1476,4.214,1477,4.214,1631,2.035,1680,3.651,1681,3.513,1683,2.656,1747,2.002,1832,4.862,1836,4.862,2152,3.188,2243,3.651,2244,4.865,2348,6.315,2474,7.177,2488,4.491,2909,3.993,2920,6.315,2933,4.214,3007,7.77,3009,6.478,3015,4.214,3016,4.862,3019,4.862,3022,4.862,3025,4.862,3026,6.478,3027,4.491,3030,4.862,3032,4.862,3033,4.862,3034,4.862,3035,4.862,3036,5.984,3037,4.862,3038,4.862,3086,7.228,3087,5.425,3088,5.425,3089,5.425,3090,5.425,3091,5.425,3092,5.425,3093,7.228,3094,5.425,3095,5.425,3096,5.425,3097,5.425,3098,5.425,3099,8.129,3100,5.425,3101,5.425,3102,4.491,3103,5.425,3104,5.425,3105,5.425,3106,5.425,3107,5.425,3108,5.425]],["title/components/LegendComponent.html",[477,2.251,513,2.826]],["body/components/LegendComponent.html",[0,0.124,3,0.213,4,0.2,5,0.2,8,1.639,10,0.219,11,0.467,13,1.325,17,1.332,20,0.005,21,0.937,24,0.325,28,0.282,39,0.213,52,1.752,57,1.159,78,0.003,79,0.004,80,0.003,90,1.271,94,1.756,106,2.357,109,1.879,110,0.797,112,1.639,136,0.852,142,2.428,154,1.83,183,0.721,187,0.963,441,5.176,477,3.232,478,3.066,479,4.172,482,2.806,484,3.066,485,6.067,486,6.067,487,5.585,488,3.641,489,2.442,490,3.349,493,4.431,495,4.302,496,2.911,497,4.976,498,3.349,499,3.349,500,2.986,501,3.349,502,3.066,503,2.84,504,3.349,505,3.066,506,3.349,507,2.911,508,3.349,509,3.066,510,3.349,511,2.84,512,3.349,513,4.839,514,3.349,515,3.066,516,3.349,517,3.066,518,3.349,519,3.153,520,2.986,521,3.246,522,3.349,731,7.257,747,2.803,824,3.588,830,4.887,832,3.727,833,2.596,834,3.246,863,5.528,864,5.528,880,4.932,897,3.727,916,3.727,1121,7.527,1145,5.693,2026,2.35,2063,3.053,2143,5.839,2824,6.171,3109,5.538,3110,7.328,3111,8.213,3112,8.213,3113,8.213,3114,8.213,3115,5.538,3116,5.538,3117,8.859,3118,6.568,3119,6.568,3120,6.8,3121,7.328,3122,5.538,3123,5.538,3124,9.342,3125,5.538,3126,6.568,3127,5.538,3128,6.568,3129,5.538,3130,7.328,3131,7.328,3132,5.538,3133,5.538,3134,5.538,3135,5.538,3136,5.538]],["title/classes/LegendInteractionAssist.html",[0,0.087,3137,4.574]],["body/classes/LegendInteractionAssist.html",[0,0.095,2,0.704,3,0.11,4,0.103,5,0.103,8,0.641,10,0.18,11,0.289,12,1.134,13,1.256,14,0.704,17,1.157,19,1.77,20,0.005,21,0.917,22,1.05,24,0.316,28,0.332,30,2.325,32,1.24,34,0.512,39,0.174,54,1.113,55,2.401,59,4.081,75,0.786,78,0.001,79,0.002,80,0.001,85,0.737,86,2.227,90,1.264,94,1.793,96,1.173,109,0.975,110,0.773,112,1.656,119,1.303,126,1.309,131,0.819,136,0.892,142,0.796,145,1.665,154,0.947,163,2.66,168,0.625,179,1.688,183,1.239,187,0.499,196,2.064,226,2.663,229,0.855,231,2.634,238,2.503,244,2.184,245,1.878,251,2.214,270,1.857,273,1.242,283,3.545,284,1.613,285,1.157,287,1.99,294,0.695,301,1.584,321,0.842,324,1.24,333,2.656,334,1.907,336,1.652,341,2.374,360,2.227,379,1.681,380,2.227,394,3.113,395,1.93,396,1.857,399,1.041,400,3.337,411,2.167,439,0.919,446,1.175,453,0.962,459,0.704,463,2.11,464,1.113,482,1.277,525,1.371,572,1.887,575,1.759,576,1.878,578,4.656,580,0.714,581,1.734,583,1.546,584,1.546,585,2.227,590,1.47,591,0.893,596,1.225,597,1.024,642,1.295,669,1.857,718,1.47,731,3.522,740,1.93,741,5.489,744,2.247,747,2.049,753,3.127,761,0.919,763,4.888,769,1.635,773,2.936,776,1.93,777,1.93,780,2.777,781,3.4,782,1.952,783,4.509,784,3.202,786,1.93,788,4.302,789,1.93,791,1.93,792,3.051,793,3.051,794,4.302,795,0.641,796,3.051,797,1.858,798,1.47,801,2.444,802,4.302,803,1.727,811,1.436,817,2.956,832,1.93,833,1.344,834,1.681,836,2.227,850,1.47,941,1.961,945,4.063,1003,0.977,1056,1.701,1061,1.521,1156,2.936,1160,1.373,1182,0.919,1183,2.658,1195,2.013,1197,1.545,1198,2.374,1210,1.93,1211,2.013,1214,1.701,1232,2.32,1266,2.742,1302,2.374,1380,2.374,1382,3.522,1515,3.337,1650,5.728,1663,3.032,1900,0.796,1946,1.113,1993,1.113,1995,1.132,2000,1.132,2044,1.47,2061,1.587,2063,3.23,2072,3.359,2077,1.344,2142,2.936,2364,2.11,2626,2.57,2787,2.57,3137,5.728,3138,8.476,3139,2.57,3140,6.392,3141,6.392,3142,4.534,3143,6.392,3144,4.534,3145,4.534,3146,2.867,3147,7.417,3148,4.534,3149,4.534,3150,2.867,3151,2.867,3152,5.624,3153,2.867,3154,2.867,3155,4.534,3156,2.867,3157,6.392,3158,4.534,3159,2.867,3160,2.867,3161,2.867,3162,2.867,3163,4.534,3164,2.867,3165,3.753,3166,4.534,3167,2.867,3168,2.867,3169,2.867,3170,2.374,3171,2.867,3172,2.227,3173,2.867,3174,4.534,3175,4.534,3176,3.753,3177,4.534,3178,6.962,3179,4.534,3180,4.534,3181,2.867,3182,4.534,3183,3.753,3184,2.867,3185,2.867,3186,2.57,3187,2.867,3188,2.867,3189,4.534,3190,2.57,3191,2.867,3192,2.867,3193,2.867,3194,2.867,3195,2.867,3196,5.624,3197,2.57,3198,2.867,3199,2.867,3200,2.867,3201,2.867,3202,2.867,3203,4.534,3204,2.867,3205,4.534,3206,4.534,3207,4.534,3208,2.867,3209,2.867,3210,2.867,3211,2.867,3212,3.753,3213,4.063,3214,2.867,3215,2.867,3216,4.534,3217,2.867,3218,4.534,3219,2.867,3220,2.867,3221,2.867,3222,5.624,3223,2.867,3224,2.867,3225,2.867,3226,2.867,3227,2.867,3228,2.867,3229,2.867,3230,2.867,3231,2.867,3232,4.534,3233,2.867,3234,2.867,3235,2.867,3236,2.867,3237,2.867,3238,4.534,3239,2.867,3240,4.534,3241,2.867,3242,2.867,3243,2.867,3244,5.624,3245,2.867,3246,2.867,3247,5.624,3248,2.867,3249,2.867,3250,2.57,3251,2.867,3252,2.867,3253,2.867,3254,2.867,3255,2.867,3256,2.867,3257,2.867,3258,4.534,3259,2.57,3260,2.57,3261,2.867,3262,2.867,3263,4.534,3264,4.534,3265,2.57,3266,2.867,3267,2.867,3268,2.867,3269,2.867,3270,4.534,3271,5.624,3272,2.867,3273,4.534,3274,2.867,3275,2.867,3276,2.867,3277,2.867,3278,2.867,3279,2.867,3280,2.374,3281,4.534,3282,2.867,3283,2.867,3284,2.867,3285,2.867,3286,2.867,3287,2.867,3288,2.867,3289,2.867,3290,2.867,3291,2.57,3292,2.867,3293,2.867,3294,2.867,3295,2.867,3296,2.867,3297,2.867,3298,2.867,3299,5.624,3300,2.867,3301,2.867,3302,2.867,3303,2.867,3304,2.867,3305,4.534,3306,2.867,3307,2.867,3308,2.867,3309,2.867,3310,2.867,3311,5.624,3312,2.867,3313,6.962,3314,4.534,3315,2.867,3316,5.624,3317,2.867,3318,2.867,3319,2.867,3320,4.534,3321,2.867,3322,6.392,3323,2.867,3324,2.867,3325,4.534,3326,4.534,3327,2.57,3328,2.867,3329,4.534,3330,2.867,3331,2.867,3332,2.867,3333,2.867,3334,4.534,3335,4.534,3336,2.867]],["title/components/LegendSeriesComponent.html",[477,2.251,515,2.826]],["body/components/LegendSeriesComponent.html",[0,0.098,3,0.151,4,0.142,5,0.142,8,1.289,10,0.156,13,1.356,14,0.964,17,1.397,19,1.799,20,0.005,21,0.987,22,1.136,24,0.343,28,0.308,39,0.221,52,1.916,55,2.225,78,0.002,79,0.003,80,0.002,85,1.498,90,1.12,94,1.768,106,2.57,109,1.239,110,0.764,112,1.936,119,0.801,126,1.342,131,1.122,136,0.81,142,2.089,145,2.031,154,1.298,164,1.239,179,1.847,183,1.044,187,0.683,196,1.873,198,1.792,231,1.076,273,1.579,333,2.326,334,1.191,394,2.174,404,1.841,417,2.86,421,5.166,459,1.848,477,2.542,478,2.174,479,3.281,480,8.302,482,2.687,484,2.174,487,5.281,488,3.463,489,1.732,490,2.375,493,3.485,495,3.051,496,2.064,497,4.283,498,2.375,499,2.375,500,2.117,501,2.375,502,2.174,503,2.014,504,2.375,505,2.174,506,2.375,507,2.064,508,2.375,509,2.174,510,2.375,511,2.014,512,2.375,513,4.436,514,2.375,515,4.165,516,2.375,517,2.174,518,2.375,519,2.235,520,2.117,521,2.302,522,2.375,642,1.95,747,2.19,761,1.259,778,2.401,779,1.767,801,2.117,824,2.822,830,4.646,832,2.643,833,1.841,834,2.302,862,5.653,871,4.047,905,3.251,1013,3.251,1115,5.166,1121,5.653,1127,5.166,1145,5.844,1173,5.844,1174,2.426,1276,5.166,1277,5.166,1285,3.519,1681,2.543,1918,3.006,1960,2.294,2040,3.845,2824,6.178,3118,8.255,3119,6.12,3120,3.251,3126,7.181,3337,8.302,3338,3.927,3339,5.764,3340,7.523,3341,7.523,3342,7.523,3343,7.523,3344,6.829,3345,8.013,3346,8.013,3347,5.764,3348,5.764,3349,5.764,3350,3.927,3351,3.927,3352,5.764,3353,3.927,3354,3.927,3355,7.523,3356,3.927,3357,7.523,3358,3.927,3359,5.764,3360,3.927,3361,7.523,3362,5.764,3363,3.927,3364,3.927,3365,3.927,3366,3.927,3367,3.927,3368,3.927,3369,3.927,3370,5.764,3371,3.927,3372,3.927,3373,3.927,3374,3.927,3375,3.927,3376,3.927,3377,3.927,3378,3.927,3379,3.927,3380,3.927,3381,3.519,3382,5.764,3383,3.927,3384,7.523,3385,3.927,3386,6.829,3387,3.927,3388,5.764,3389,3.927,3390,3.927,3391,5.764,3392,3.927,3393,3.927,3394,3.927,3395,3.927,3396,3.927,3397,3.927,3398,3.927,3399,3.927,3400,3.927,3401,3.519,3402,3.927,3403,5.764,3404,3.927,3405,3.927,3406,3.927,3407,3.927,3408,3.927,3409,3.927,3410,3.927,3411,3.927,3412,3.927,3413,3.927,3414,3.927,3415,3.927,3416,3.927]],["title/classes/LineAccessors.html",[0,0.087,2270,3.583]],["body/classes/LineAccessors.html",[0,0.154,2,1.348,3,0.211,4,0.198,5,0.198,7,2.06,8,1.63,10,0.218,11,0.594,12,1.238,13,1.324,14,2.009,15,3.855,16,5.264,17,1.38,19,1.313,20,0.005,21,0.933,22,0.779,23,4.563,24,0.324,28,0.314,29,3.917,30,4.195,31,2.63,32,2.375,33,1.742,34,1.302,37,2.29,38,1.443,39,0.335,40,0.021,41,0.849,42,1.278,47,1.295,52,2.168,53,1.854,57,1.712,60,3.432,62,3.432,72,2.521,73,2.886,74,2.886,75,1.144,76,3.219,77,3.219,78,0.003,79,0.004,80,0.003,85,0.893,94,1.793,109,2.003,110,0.746,112,1.63,117,3.036,126,1.278,134,2.645,136,0.501,149,2.521,164,2.003,188,3.65,245,2.141,285,0.994,455,2.445,646,1.93,766,2.928,782,1.295,785,2.331,798,2.816,811,3.65,818,4.555,824,3.568,941,3.152,1065,1.637,1160,3.917,1404,5.863,1890,1.077,1894,1.871,1899,1.685,1900,1.525,1901,1.66,1975,1.709,1984,3.175,2105,4.409,2107,3.929,2164,1.591,2173,4.272,2264,7.239,2265,6.412,2266,6.412,2267,5.112,2268,5.667,2269,4.265,2270,6.366,2271,3.04,2272,3.04,2273,5.661,2274,5.661,2275,5.661,2276,5.116,2277,5.364,2278,5.661,2279,5.661,2280,5.661,2281,5.116,2282,5.364,2283,5.661,2284,5.661,2285,5.364,2286,4.265,2287,4.265,2288,4.265,2823,3.219,2894,3.855,2896,4.042,3417,7.287,3418,7.287,3419,5.491,3420,5.491,3421,5.491]],["title/classes/LineSelectSeriesInteractionStrategy.html",[0,0.087,2130,3.19]],["body/classes/LineSelectSeriesInteractionStrategy.html",[0,0.089,2,1.294,3,0.202,4,0.19,5,0.19,8,1.585,10,0.339,11,0.452,12,1.176,13,1.264,17,1.25,19,1.915,20,0.005,21,0.914,22,1.215,24,0.343,28,0.368,38,1.384,39,0.202,40,0.013,55,1.463,57,1.484,78,0.003,79,0.003,80,0.003,94,1.755,97,2.164,109,1.132,110,0.48,112,1.178,119,1.074,126,1.65,128,3.126,130,2.999,131,1.505,136,0.646,151,2.323,154,2.342,164,1.132,168,1.319,179,1.633,183,1.116,187,0.916,196,1.178,213,2.347,222,2.256,231,2.347,238,2.494,271,4.092,272,4.696,273,1.941,274,4.59,276,4.59,277,4.59,289,1.869,294,1.941,296,4.286,298,5.158,299,4.582,300,4.582,301,2.694,303,2.252,306,4.286,307,3.47,309,4.286,310,4.21,312,6.018,321,1.548,323,5.868,324,2.279,327,2.579,328,1.57,332,2.639,337,2.195,384,1.347,385,4.721,398,6.631,399,3.246,400,5.896,410,4.721,411,2.867,545,1.915,607,2.523,633,3.699,636,1.088,743,1.974,795,1.585,797,1.741,891,2.702,944,1.384,1182,2.867,1197,2.415,1317,4.092,1318,3.877,1665,3.088,1806,2.916,1807,2.916,1808,4.361,1918,1.976,2054,3.126,2105,2.84,2107,5.327,2130,4.43,2570,4.361,2843,5.896,2844,3.877,2974,4.361,3422,8.941,3423,8.941,3424,8.01,3425,5.868,3426,5.268,3427,5.268,3428,5.268,3429,6.352,3430,8.01,3431,5.268,3432,5.268,3433,5.268,3434,5.268,3435,5.268,3436,5.268,3437,5.268,3438,5.268,3439,5.268,3440,5.268,3441,7.088,3442,8.01,3443,4.092,3444,5.268,3445,5.268,3446,5.268,3447,5.268,3448,4.721,3449,5.268,3450,5.268,3451,4.721,3452,5.268,3453,5.268]],["title/classes/LinearScale.html",[0,0.087,2344,4.225]],["body/classes/LinearScale.html",[0,0.083,2,1.205,3,0.189,4,0.177,5,0.177,10,0.194,11,0.431,14,1.205,17,1.442,19,2.353,20,0.005,21,1.122,22,1.395,24,0.375,28,0.26,39,0.189,41,0.658,75,0.686,78,0.002,79,0.003,80,0.002,85,0.798,91,3.55,94,1.864,97,1.825,109,1.452,110,0.796,117,4.242,126,1.143,134,3.167,136,0.759,145,1.994,168,1.412,179,2.021,196,1.952,220,5.133,273,1.85,284,2.601,295,4.486,313,0.962,336,1.442,682,2.459,769,1.975,1902,3.05,1913,2.342,1938,2.922,2152,3.848,2161,4.397,2162,3.55,2163,2.794,2171,3.96,2178,5.415,2179,5.415,2181,3.465,2183,4.67,2184,4.67,2185,5.148,2186,3.96,2187,3.96,2191,2.877,2192,4.528,2194,5.598,2195,3.96,2306,5.842,2307,4.972,2308,5.842,2340,3.613,2344,5.592,3454,9.017,3455,4.064,3456,6.054,3457,5.592,3458,6.054,3459,5.248,3460,4.399,3461,4.399,3462,4.399,3463,4.399,3464,4.399,3465,4.909,3466,4.909,3467,4.399,3468,4.909,3469,4.399,3470,4.399,3471,4.399,3472,4.399,3473,4.399,3474,4.399,3475,4.399,3476,4.399,3477,4.399,3478,4.399,3479,4.399,3480,4.399,3481,4.399,3482,4.399,3483,4.399,3484,4.909,3485,4.399,3486,4.399,3487,4.909,3488,4.064,3489,4.399,3490,4.399,3491,4.064,3492,4.909]],["title/classes/MappedValueProvider.html",[0,0.087,3493,4.574]],["body/classes/MappedValueProvider.html",[0,0.155,2,1.701,3,0.266,4,0.25,5,0.25,8,1.89,10,0.274,11,0.539,13,1.116,14,1.701,17,1.275,19,1.656,20,0.005,21,0.79,22,0.982,24,0.339,28,0.266,39,0.266,54,2.687,55,1.923,75,0.968,78,0.003,79,0.004,80,0.003,85,1.126,94,1.745,109,1.489,110,0.887,136,0.77,179,1.412,183,1.1,187,1.205,273,2.314,295,3.734,307,4.136,627,3.654,782,1.634,850,5.077,1061,3.059,1065,2.829,1646,3.336,1903,3.278,1913,2.358,2032,3.285,2890,5.38,3493,7.572,3494,9.492,3495,4.862,3496,6.563,3497,6.563,3498,6.563,3499,6.563,3500,6.218,3501,6.563,3502,6.926,3503,9.116,3504,6.207,3505,6.926,3506,6.207,3507,5.733,3508,6.926,3509,6.926]],["title/classes/MarkerUtils.html",[0,0.087,3510,4.574]],["body/classes/MarkerUtils.html",[0,0.147,2,1.18,3,0.185,4,0.173,5,0.173,10,0.264,11,0.424,12,0.938,17,1.211,19,1.826,20,0.005,21,0.871,22,1.083,24,0.322,28,0.353,34,0.858,38,1.262,39,0.185,42,1.118,47,1.133,52,1.591,53,2.181,78,0.002,79,0.003,80,0.002,91,2.525,94,1.453,96,4.066,97,2.419,102,1.28,109,1.974,110,0.789,111,1.612,112,1.074,116,1.18,119,0.979,126,1.549,136,0.877,137,3.233,164,1.033,168,1.194,179,1.557,183,1.074,196,1.074,213,2.258,222,1.874,231,2.564,273,1.823,285,1.492,289,1.637,300,3.948,301,2.586,310,4.55,321,1.411,322,5.17,324,2.879,326,4.833,327,2.352,328,1.432,334,1.789,384,1.953,399,2.772,411,2.695,541,1.802,545,2.626,607,2.301,633,3.373,646,2.34,673,3.498,714,2.698,795,1.489,809,2.103,944,1.749,958,3.536,1003,2.602,1128,3.536,1182,2.643,1196,6.404,1197,2.602,1215,1.802,1511,5.17,1536,4.305,1656,6.958,1663,3.588,1698,3.187,1806,3.684,1918,1.802,2055,4.959,2185,2.59,2336,4.305,2491,3.977,2570,3.977,2753,3.731,2754,5.964,2775,5.964,2793,3.731,2849,3.373,2948,3.977,3081,4.305,3448,4.305,3510,5.964,3511,8.957,3512,4.804,3513,7.636,3514,7.636,3515,6.655,3516,6.655,3517,6.655,3518,4.804,3519,8.244,3520,4.804,3521,4.804,3522,6.844,3523,8.957,3524,4.804,3525,8.244,3526,7.759,3527,6.655,3528,4.804,3529,6.655,3530,4.673,3531,6.655,3532,5.964,3533,6.655,3534,4.804,3535,4.804,3536,4.804,3537,4.804,3538,4.804,3539,4.804,3540,4.804,3541,6.655,3542,4.804,3543,4.804,3544,6.655,3545,4.804,3546,4.804,3547,4.804,3548,7.636,3549,4.804,3550,4.804,3551,4.804,3552,4.804,3553,4.804,3554,4.804,3555,4.804,3556,6.844,3557,6.655,3558,4.804,3559,4.804,3560,4.804,3561,4.804,3562,4.804,3563,4.804,3564,4.804,3565,4.804,3566,4.804,3567,4.804,3568,4.804,3569,4.804,3570,4.804,3571,6.655,3572,4.804,3573,4.804,3574,4.804,3575,4.804]],["title/classes/MissingDataLineRendererConfig.html",[0,0.087,3576,4.574]],["body/classes/MissingDataLineRendererConfig.html",[0,0.119,2,1.723,3,0.27,4,0.253,5,0.253,8,1.905,10,0.278,11,0.543,12,1.235,17,1.333,20,0.005,24,0.261,28,0.327,39,0.27,78,0.003,79,0.004,80,0.003,84,4.386,85,1.141,94,1.826,106,2.377,109,2.05,110,0.869,126,1.982,142,2.365,148,2.947,154,3.351,167,6.289,168,0.968,176,5.809,187,1.221,303,2.665,336,2.502,1954,3.173,1957,3.042,1985,3.142,2107,3.783,2119,5.731,2123,5.731,2133,5.938,3576,7.632,3577,9.768,3578,7.632,3579,7.017,3580,7.632,3581,6.289]],["title/classes/NoopAccessors.html",[0,0.087,2292,4.225]],["body/classes/NoopAccessors.html",[0,0.126,2,1.831,3,0.287,4,0.269,5,0.269,7,2.797,8,1.976,10,0.295,11,0.563,12,1.196,13,1.312,14,2.311,17,1.316,20,0.005,24,0.329,28,0.287,34,1.578,38,1.96,39,0.339,40,0.018,41,0.727,56,3.495,72,3.423,75,1.235,78,0.004,79,0.004,80,0.004,94,1.775,164,1.603,1065,2.223,1894,2.541,1899,2.288,1900,2.071,1901,2.255,2290,7.31,2291,8.72,2292,7.312,2300,7.916,3582,7.457]],["title/classes/NoopRenderer.html",[0,0.087,3583,4.574]],["body/classes/NoopRenderer.html",[0,0.068,2,0.99,3,0.155,4,0.212,5,0.145,10,0.376,11,0.375,12,1.227,13,1.255,17,1.385,19,2.292,20,0.005,21,1.102,22,1.347,24,0.367,28,0.325,38,1.06,39,0.155,41,0.573,53,0.914,75,0.564,78,0.002,79,0.003,80,0.002,85,1.455,90,0.822,94,1.828,96,2.404,97,1.588,109,1.638,110,0.739,112,1.315,117,4.027,119,0.822,130,2.296,131,1.152,134,3.247,136,0.771,148,2.034,154,1.942,164,0.867,168,1.295,179,1.971,183,1.165,187,0.702,188,3.817,196,1.704,198,1.315,213,2.647,220,4.337,222,2.519,246,2.714,251,2.682,270,4.491,273,1.61,274,5.652,276,3.806,277,4.934,283,2.815,284,2.133,285,1.064,287,1.255,289,1.946,294,2.049,298,4.108,299,4.497,300,4.438,301,2.7,303,2.652,307,2.878,310,4.257,321,1.185,327,1.975,328,1.202,333,2.348,336,2.037,343,2.521,368,1.777,384,2.162,394,2.233,395,2.714,396,2.612,411,1.255,439,1.293,545,1.588,592,2.878,642,1.98,714,1.727,728,1.074,743,1.297,747,2.925,780,2.858,795,1.315,801,2.174,803,1.873,811,2.02,850,3.908,944,1.06,1160,1.931,1166,3.254,1262,2.612,1265,1.441,1289,4.934,1319,2.556,1367,1.539,1498,2.878,1510,2.521,1646,2.738,1649,2.968,1664,2.968,1811,2.233,1839,2.968,1914,2.679,1915,1.06,1930,1.374,1932,1.513,1933,1.513,1934,1.803,1935,1.464,1938,2.556,1984,1.374,1985,1.488,2009,1.942,2017,1.513,2021,2.169,2041,2.02,2094,2.296,2103,2.233,2134,3.445,2149,2.364,2152,3.36,2180,3.445,2290,3.133,2428,2.968,2624,4.326,2742,3.956,2817,2.612,2840,2.968,2841,4.491,2866,2.968,2867,5.652,2975,2.714,3530,2.832,3583,5.267,3584,8.099,3585,4.565,3586,5.919,3587,4.565,3588,4.565,3589,4.565,3590,4.565,3591,4.565,3592,3.339,3593,3.339,3594,3.339,3595,3.339,3596,4.033,3597,5.386,3598,4.033,3599,4.033,3600,5.386,3601,4.033,3602,3.339,3603,2.968,3604,2.968,3605,4.326,3606,3.133,3607,5.919,3608,3.339,3609,3.133,3610,3.133,3611,3.133,3612,3.339,3613,2.714,3614,3.133,3615,3.133,3616,2.968,3617,3.133,3618,3.339,3619,3.133,3620,3.339,3621,5.386,3622,3.133,3623,5.608,3624,3.339,3625,2.612,3626,3.339,3627,4.126,3628,3.133,3629,3.339,3630,3.133,3631,3.339,3632,3.133,3633,3.339,3634,3.133,3635,4.033,3636,4.033,3637,4.033]],["title/classes/NoopScale.html",[0,0.087,3638,4.574]],["body/classes/NoopScale.html",[0,0.089,2,1.292,3,0.202,4,0.19,5,0.19,8,1.584,10,0.209,11,0.452,14,1.292,17,1.438,19,2.287,20,0.005,21,1.091,22,1.356,24,0.368,28,0.272,39,0.202,78,0.003,79,0.003,80,0.003,94,1.856,95,1.974,97,2.163,126,1.225,130,5.356,131,2.687,136,0.815,142,1.462,145,2.044,164,1.523,168,1.41,179,1.997,187,0.915,196,2.191,226,3.336,273,1.94,295,4.617,313,1.032,769,2.19,1913,2.373,1938,2.987,2152,3.531,2155,4.283,2162,4.208,2163,4.558,2167,5.004,2171,4.694,2178,5.021,2179,5.021,2185,5.28,2186,5.021,2187,5.021,2191,4.152,2192,5.021,2194,5.741,2195,5.021,2306,6.013,2307,5.214,2308,6.013,3455,4.357,3459,5.503,3460,6.348,3467,4.717,3638,6.348,3639,10.31,3640,5.263,3641,5.263,3642,5.263,3643,5.263,3644,5.263,3645,4.717,3646,5.263,3647,5.263,3648,5.263,3649,5.263,3650,5.263,3651,5.263,3652,5.263,3653,5.263,3654,5.263,3655,5.263,3656,4.717,3657,4.717]],["title/modules/NuiChartsModule.html",[3658,4.225,3659,3.757]],["body/modules/NuiChartsModule.html",[0,0.09,3,0.205,4,0.192,5,0.192,20,0.005,24,0.198,28,0.395,32,3.486,39,0.205,78,0.003,79,0.004,80,0.003,90,1.341,91,2.801,154,1.761,285,0.965,313,1.045,314,1.44,380,4.141,478,5.521,481,6.403,482,2.528,496,2.801,500,5.376,502,5.521,503,3.664,505,5.521,507,5.241,509,5.521,511,5.114,513,5.521,515,5.521,517,5.521,520,5.376,806,5.914,807,1.761,827,6.801,831,4.777,832,3.588,833,2.499,834,3.125,836,4.141,846,3.923,911,3.588,933,4.777,990,4.777,1110,4.777,1128,3.923,1274,6.26,1321,6.671,1322,4.413,1438,4.141,1904,2.034,2032,1.845,2543,3.923,2921,5.55,3170,4.413,3337,4.413,3658,4.413,3659,7.775,3660,4.413,3661,4.141,3662,6.671,3663,6.671,3664,4.777,3665,4.777,3666,4.777,3667,4.777,3668,7.178,3669,5.33,3670,7.144,3671,6.403,3672,5.33,3673,5.33,3674,5.33,3675,5.33,3676,5.33,3677,5.33,3678,5.33,3679,7.144,3680,7.144,3681,7.144,3682,5.33,3683,5.33,3684,5.33,3685,5.33,3686,5.33,3687,5.33,3688,5.33,3689,8.058,3690,4.777,3691,7.144,3692,6.403,3693,5.33,3694,5.33,3695,4.777]],["title/classes/PathMarker.html",[0,0.087,3696,4.574]],["body/classes/PathMarker.html",[0,0.157,2,1.572,3,0.246,4,0.231,5,0.231,8,1.8,10,0.254,11,0.513,12,0.989,14,1.572,17,1.291,19,1.924,20,0.005,21,0.918,22,1.141,24,0.328,28,0.246,39,0.246,52,1.924,53,1.451,55,1.778,57,2.033,78,0.003,79,0.004,80,0.003,85,1.309,90,1.125,94,1.773,110,0.734,136,0.934,179,1.641,183,1.048,187,1.113,196,1.432,231,1.753,273,2.204,334,1.323,488,2.921,524,2.587,541,3.464,625,5.737,673,5,682,4.03,730,5.299,782,1.51,941,3.48,1003,2.998,1367,3.07,1614,3.752,1646,3.177,1656,7.172,1692,3.451,1809,5.77,1996,3.583,1997,3.122,2046,3.544,2047,3.694,2054,2.823,2220,6.661,3696,8.526,3697,9.513,3698,5.737,3699,7.211,3700,8.046,3701,5.737,3702,7.211,3703,8.046,3704,6.401,3705,6.401,3706,6.401,3707,6.401,3708,6.401,3709,6.401,3710,6.401,3711,6.401,3712,6.401,3713,6.401,3714,6.401,3715,6.401,3716,6.401,3717,6.401,3718,7.211,3719,6.401,3720,6.401]],["title/classes/PieRenderer.html",[0,0.087,3721,4.574]],["body/classes/PieRenderer.html",[0,0.069,2,1.004,3,0.157,4,0.214,5,0.147,10,0.389,11,0.379,12,1.23,13,1.258,17,1.393,19,2.316,20,0.005,21,1.113,22,1.363,24,0.371,28,0.228,39,0.157,41,0.579,53,0.927,75,0.83,78,0.002,79,0.003,80,0.002,85,1.461,90,0.83,94,1.825,96,2.429,97,1.604,109,1.751,110,0.799,112,1.328,117,4.151,119,0.834,134,2.155,136,0.775,148,2.654,168,1.389,179,1.976,183,1.061,196,1.563,198,1.328,213,2.608,220,4.366,222,2.529,246,2.752,251,2.69,257,0.991,270,4.526,273,1.626,274,5.677,276,3.845,277,3.845,283,2.843,284,2.143,285,1.075,287,1.273,289,1.909,294,2.059,298,3.768,299,4.069,300,4.069,301,2.529,303,2.629,307,2.907,310,3.12,313,0.802,333,2.359,336,2.054,343,2.556,368,1.795,384,2.173,394,2.264,395,2.752,396,2.648,411,1.273,439,1.311,545,1.604,592,2.907,642,1.996,682,2.048,714,1.744,728,1.09,743,1.31,747,2.935,780,2.877,795,1.328,801,2.205,803,1.888,811,2.048,850,3.933,944,1.075,966,7.434,1063,1.219,1160,1.959,1166,3.287,1262,2.648,1265,1.461,1289,4.967,1319,1.992,1367,1.56,1498,2.907,1510,2.556,1593,3.386,1594,4.168,1595,2.473,1646,2.76,1649,3.01,1664,3.01,1811,2.264,1839,3.01,1914,1.438,1915,1.075,1930,1.393,1932,1.534,1933,1.534,1934,1.821,1935,1.485,1938,2.569,1941,1.56,1953,1.587,1984,1.393,1985,1.509,2009,1.962,2017,1.534,2021,2.191,2041,2.048,2094,2.328,2134,3.48,2149,2.397,2152,3.382,2180,3.48,2185,3.201,2428,3.01,2624,4.37,2742,3.996,2817,2.648,2841,3.845,2867,4.526,2975,2.752,3530,2.871,3585,4.612,3586,5.958,3587,4.612,3588,4.612,3589,4.612,3590,4.612,3591,4.612,3592,3.386,3593,3.386,3594,3.386,3595,3.386,3597,4.612,3600,3.177,3602,3.386,3603,3.01,3604,3.01,3605,4.37,3606,3.177,3607,5.958,3608,3.386,3609,3.177,3610,3.177,3611,3.177,3612,3.386,3613,2.752,3614,3.177,3615,3.177,3616,3.01,3617,3.177,3618,3.386,3619,3.177,3620,3.386,3621,5.43,3622,3.177,3623,5.645,3624,3.386,3625,2.648,3626,3.386,3627,4.168,3628,3.177,3629,3.386,3630,3.177,3631,3.386,3632,3.177,3633,3.386,3634,3.177,3721,5.321,3722,4.089,3723,5.937,3724,5.937,3725,4.089,3726,4.089,3727,3.665,3728,4.089,3729,4.089,3730,4.089,3731,4.089,3732,4.089,3733,4.089,3734,6.989,3735,3.177,3736,4.089,3737,4.089,3738,4.089,3739,4.089]],["title/classes/ProcessedColorProvider.html",[0,0.087,1075,3.965]],["body/classes/ProcessedColorProvider.html",[0,0.113,2,1.637,3,0.256,4,0.323,5,0.24,8,1.846,10,0.264,11,0.526,14,1.637,17,1.31,19,1.593,20,0.005,21,0.76,22,0.945,24,0.248,28,0.256,39,0.256,52,2.345,54,2.586,55,2.291,78,0.003,79,0.004,80,0.003,85,1.084,94,1.729,109,1.433,110,0.608,112,1.491,136,0.907,179,1.359,183,1.167,187,1.159,196,1.491,231,1.825,273,2.26,294,1.999,607,3.192,782,1.572,815,6.066,830,4.232,850,4.232,891,4.596,1061,3.291,1075,6.41,1160,3.952,1289,5.343,1646,3.258,1901,2.495,2032,3.241,2890,5.177,3495,4.679,3507,5.517,3740,9.366,3741,8.251,3742,7.395,3743,8.251,3744,8.251,3745,8.251,3746,5.973,3747,8.032,3748,5.973,3749,7.395,3750,6.664,3751,6.664,3752,6.664,3753,8.251,3754,6.664,3755,6.664,3756,9.626,3757,8.251,3758,6.664,3759,6.664]],["title/classes/RadialAccessors.html",[0,0.087,2297,3.757]],["body/classes/RadialAccessors.html",[0,0.116,2,1.687,3,0.264,4,0.248,5,0.248,7,2.577,8,1.88,10,0.272,11,0.536,12,1.163,13,1.251,14,1.687,15,4.822,17,1.27,19,1.642,20,0.005,21,0.783,22,0.974,23,4.116,24,0.313,28,0.323,29,4.026,31,3.289,32,2.971,33,2.263,34,1.502,37,2.387,38,1.805,39,0.364,40,0.024,41,0.669,52,2.172,54,2.665,56,3.22,57,1.76,72,3.153,73,3.61,74,3.61,75,1.27,78,0.003,79,0.004,80,0.003,110,0.766,136,0.766,206,6.156,782,1.983,785,3.568,1538,4.822,1975,2.617,2164,2.435,2271,4.654,2272,4.654,2293,6.686,2294,7.352,2295,6.967,2296,6.967,2297,6.187,2298,5.335,3760,7.533]],["title/classes/RadialPopoverPlugin.html",[0,0.087,3761,4.574]],["body/classes/RadialPopoverPlugin.html",[0,0.09,2,1.308,3,0.205,4,0.192,5,0.192,10,0.211,11,0.455,12,0.654,17,1.44,20,0.005,24,0.344,28,0.205,39,0.205,41,0.839,78,0.003,79,0.004,80,0.003,85,0.866,90,1.255,94,1.858,109,2.029,110,0.842,111,2.887,112,1.925,116,2.113,117,4.279,119,1.884,148,2.471,151,3.149,179,2.001,183,1.278,196,1.191,231,2.458,257,1.29,273,1.956,301,2.268,384,1.826,436,2.871,439,2.289,443,2.98,444,3.115,446,2.395,447,2.962,453,1.787,456,3.449,459,1.978,464,1.753,465,2.835,466,3.329,471,3.329,472,3.329,473,3.329,474,3.329,476,2.098,607,2.551,634,1.684,636,1.475,673,2.799,682,2.668,743,1.176,750,1.634,766,2.869,942,3.122,944,1.876,1112,7.33,1117,7.56,1144,4.137,1156,3.449,1165,5.911,1166,3.953,1167,5.911,1168,5.911,1169,5.911,1170,5.546,1173,6.257,1174,2.068,1175,4.409,1178,4.137,1179,4.409,1180,4.409,1181,4.409,1182,1.708,1183,3.122,1186,4.137,1213,5.546,1228,5.255,1229,3.92,1230,3.584,1231,3.92,1232,1.933,1233,3.449,1234,5.911,1236,4.409,1237,4.409,1238,3.92,1239,4.409,1441,5.255,3102,4.409,3735,5.546,3761,6.399,3762,5.325,3763,5.325,3764,5.325,3765,5.325,3766,5.325,3767,5.325,3768,5.325,3769,5.325,3770,5.325,3771,5.325,3772,5.325,3773,5.325,3774,5.325,3775,5.325,3776,5.325,3777,5.325,3778,7.14,3779,7.14,3780,5.325,3781,4.773]],["title/classes/RadialTooltipsPlugin.html",[0,0.087,3782,4.574]],["body/classes/RadialTooltipsPlugin.html",[0,0.074,2,1.068,3,0.167,4,0.224,5,0.157,10,0.172,11,0.396,12,0.763,17,1.398,19,1.04,20,0.005,21,0.496,22,0.617,24,0.332,28,0.321,34,0.777,39,0.167,41,0.605,42,2.194,47,2.223,55,1.723,59,2.549,78,0.002,79,0.003,80,0.002,83,1.097,85,0.707,89,1.068,90,1.213,94,1.833,109,1.696,110,0.719,111,3.063,112,1.388,114,2.408,115,3.254,117,4.167,119,1.265,136,0.566,151,3.826,168,1.231,179,1.945,183,1.242,196,1.618,216,3.789,217,3.682,231,2.581,251,1.242,273,1.7,285,0.787,287,1.354,294,1.054,301,1.748,303,1.901,307,2.129,313,0.852,334,1.495,339,2.927,343,3.878,435,5.351,436,2.344,437,6.668,438,4.82,439,2.32,440,4.82,441,3.533,442,4.82,443,2.85,444,2.979,445,5.137,446,2.249,447,2.782,450,3.897,451,3.201,452,4.357,453,2.428,454,3.897,455,2.428,456,2.816,457,3.897,458,4.82,459,1.524,460,3.201,461,3.897,462,3.897,463,3.201,464,1.524,465,2.636,466,2.718,467,3.897,468,3.897,469,3.378,470,3.897,471,2.718,472,2.718,473,2.718,474,2.718,476,2.126,503,3.183,524,1.653,576,1.823,597,1.553,634,1.026,636,0.899,682,3.108,766,2.907,781,2.63,782,1.026,850,2.23,944,1.631,957,3.378,966,3.6,967,3.897,1197,2.114,1278,5.615,1319,2.082,1346,3.6,1367,1.659,1437,5.137,1438,3.378,1441,4.567,1442,6.129,1443,3.6,1452,3.6,1453,3.6,1454,3.6,1455,3.6,1456,6.739,1485,5.137,1498,3.038,1499,3.201,1501,3.6,1511,3.378,1514,3.6,1587,3.378,1593,5.137,1594,5.54,1595,2.63,2077,2.038,2166,4.375,2364,3.201,2404,3.6,2649,3.6,2742,2.927,3060,3.897,3066,3.897,3102,3.6,3186,3.897,3425,5.137,3605,3.201,3613,2.927,3735,6.129,3781,3.897,3782,5.561,3783,3.897,3784,6.205,3785,5.561,3786,6.205,3787,4.349,3788,4.349,3789,4.349,3790,4.349,3791,4.349,3792,6.484,3793,5.561,3794,3.897,3795,3.897,3796,5.561,3797,3.6,3798,3.897,3799,3.6,3800,3.897,3801,3.897,3802,3.897,3803,5.561,3804,4.349,3805,4.349,3806,4.349,3807,4.349,3808,4.349,3809,4.349,3810,6.205,3811,4.349,3812,4.349,3813,7.235,3814,4.349,3815,4.349,3816,4.349,3817,4.349,3818,4.349,3819,6.205,3820,4.349,3821,4.349,3822,3.897,3823,4.349,3824,4.349,3825,4.349,3826,4.349,3827,4.349,3828,7.89,3829,4.349,3830,6.205,3831,4.349,3832,7.235,3833,4.349,3834,4.349,3835,4.349,3836,4.349,3837,4.349,3838,3.897,3839,7.477,3840,4.349,3841,4.349]],["title/classes/RectangleAccessors.html",[0,0.087,204,2.905]],["body/classes/RectangleAccessors.html",[0,0.12,2,1.736,3,0.272,4,0.255,5,0.255,7,2.652,8,1.913,10,0.28,11,0.545,12,1.175,13,1.263,14,2.259,17,1.286,20,0.005,24,0.319,28,0.272,33,2.47,34,1.528,35,3.02,36,2.702,37,2.417,38,1.858,39,0.382,40,0.024,41,0.954,52,1.69,53,1.602,78,0.003,79,0.004,80,0.003,110,0.645,204,4.869,209,5.023,210,5.441,216,3,217,3,218,2.791,331,4.717,1880,4.577,1882,4.577,1884,4.577,1886,4.577,1887,4.757,2301,6.711,2302,4.757,2303,4.757,2304,4.757,3842,8.554,3843,6.335]],["title/classes/Renderer.html",[0,0.087,303,1.341]],["body/classes/Renderer.html",[0,0.098,2,0.736,3,0.115,4,0.209,5,0.108,10,0.377,11,0.369,12,1.253,13,1.29,14,0.736,17,1.312,19,2.092,20,0.005,21,1.028,22,1.217,24,0.343,28,0.336,34,0.535,39,0.115,53,1.064,75,0.656,78,0.001,79,0.002,80,0.001,85,1.328,90,0.656,94,1.786,95,1.761,96,2.367,97,1.563,109,1.695,110,0.765,112,1.687,119,1.18,130,1.706,131,0.856,134,1.088,136,0.832,148,2.267,168,1.206,179,1.881,183,1.063,187,0.521,196,1.989,198,1.591,213,2.59,220,4.777,222,2.663,231,2.066,245,0.881,246,3.16,251,2.765,270,4.885,273,1.286,274,4.242,276,3.04,277,3.04,283,3.406,284,2.275,285,1.287,287,1.461,289,1.891,294,2.185,298,3.531,299,4.019,300,3.909,301,2.57,303,1.234,307,2.298,310,3.442,313,1.134,314,1.563,321,0.881,323,3.886,324,1.296,328,0.893,332,1.501,333,2.561,334,2.047,336,2.216,343,2.934,368,2.15,384,2.274,394,3.204,395,3.16,396,3.04,399,1.088,411,2.039,418,1.812,439,1.505,545,1.921,580,0.746,581,1.812,592,2.298,607,2.248,642,2.154,646,1.65,714,2.09,718,1.537,728,1.251,743,1.277,747,3.071,761,0.961,780,3.148,795,1.465,798,1.537,801,2.531,803,1.921,811,2.351,850,4.186,944,1.521,1160,2.248,1162,2.206,1166,3.204,1191,1.873,1192,1.873,1197,1.021,1205,1.757,1206,1.873,1262,3.04,1265,1.677,1289,5.286,1319,2.198,1367,1.791,1481,3.647,1498,3.207,1510,2.934,1529,2.481,1534,1.659,1597,2.686,1646,2.978,1649,2.206,1656,2.328,1664,3.455,1811,2.599,1839,3.455,1897,1.163,1903,2.246,1904,1.143,1907,1.163,1914,1.65,1915,1.234,1930,1.6,1932,1.761,1933,1.761,1934,2.419,1935,1.704,1938,2.689,1984,1.021,1985,1.106,2009,2.35,2017,1.761,2021,2.417,2041,2.351,2045,1.296,2094,3.294,2134,3.839,2149,2.752,2152,3.477,2156,2.934,2177,1.659,2180,3.839,2272,2.599,2428,3.455,2624,4.821,2663,2.686,2742,4.408,2820,2.017,2841,3.04,2867,3.748,2975,3.16,3522,2.686,3530,3.296,3556,2.686,3585,4.496,3586,3.647,3587,3.647,3588,3.647,3589,3.647,3590,3.647,3591,3.647,3597,3.647,3600,3.647,3603,3.455,3604,3.455,3605,4.821,3606,3.647,3607,6.341,3609,3.647,3610,3.647,3611,3.647,3613,3.16,3614,3.647,3615,3.647,3616,3.455,3617,3.647,3619,3.647,3621,5.86,3622,3.647,3623,6.008,3625,3.04,3627,3.296,3628,2.328,3630,3.647,3632,3.647,3634,3.647,3844,2.997,3845,4.207,3846,4.207,3847,2.997,3848,2.997,3849,2.997,3850,2.997,3851,2.997,3852,2.997,3853,2.997,3854,2.997,3855,2.997,3856,2.997,3857,2.997,3858,2.997,3859,2.997,3860,2.997,3861,2.997,3862,2.997,3863,2.997,3864,4.207,3865,2.997,3866,2.997,3867,2.997,3868,2.997,3869,2.997,3870,2.997,3871,2.997,3872,2.997,3873,4.694,3874,4.694,3875,2.997,3876,2.997,3877,2.997,3878,2.997,3879,2.997,3880,2.997,3881,2.997,3882,2.997,3883,2.997,3884,2.997,3885,2.997,3886,2.997,3887,2.997,3888,2.997,3889,2.997,3890,2.997,3891,2.686,3892,2.997,3893,4.694,3894,2.997,3895,2.997,3896,2.997,3897,4.694,3898,2.997,3899,2.997]],["title/components/RichLegendTileComponent.html",[477,2.251,517,2.826]],["body/components/RichLegendTileComponent.html",[0,0.089,3,0.202,4,0.19,5,0.19,8,1.585,10,0.209,11,0.452,13,1.243,14,1.294,17,1.338,19,1.259,20,0.005,21,0.977,22,1.136,24,0.343,28,0.329,39,0.202,52,2.25,55,2.225,78,0.003,79,0.003,80,0.003,90,1.25,94,1.783,110,0.84,119,1.074,136,0.872,145,1.724,179,1.445,184,3.47,196,1.585,273,1.941,477,3.126,478,2.916,479,4.035,480,8.024,482,2.952,483,4.721,484,2.916,485,5.868,486,5.868,487,5.545,488,3.613,489,2.323,490,5.181,491,4.59,492,6.352,493,4.286,494,6.352,495,4.092,496,2.769,497,4.877,498,3.185,499,3.185,500,2.84,501,3.185,502,2.916,503,2.702,504,3.185,505,2.916,506,3.185,507,2.769,508,3.185,509,2.916,510,3.185,511,2.702,512,3.185,513,4.95,514,3.185,515,4.95,516,3.185,517,4.743,518,5.785,519,2.999,520,2.84,521,3.088,522,3.185,779,3.188,823,6.223,824,3.47,830,4.586,841,4.092,862,6.631,874,6.016,905,4.361,1000,5.896,1090,4.721,1145,5.506,1318,3.877,1342,4.361,2063,2.953,2164,1.526,3128,6.352,3327,6.352,3337,4.361,3381,4.721,3401,4.721,3690,4.721,3692,9.168,3900,8.01,3901,8.568,3902,8.568,3903,8.01,3904,8.568,3905,5.268,3906,7.088,3907,5.268,3908,5.268,3909,5.268,3910,5.268,3911,5.268,3912,5.268,3913,5.268,3914,5.268,3915,7.088,3916,5.268,3917,7.088,3918,5.268,3919,5.268,3920,5.268,3921,5.268,3922,5.268,3923,5.268,3924,5.268,3925,5.268,3926,5.268]],["title/classes/Scale.html",[0,0.087,284,1.288]],["body/classes/Scale.html",[0,0.079,2,1.144,3,0.179,4,0.168,5,0.168,8,1.457,10,0.185,11,0.415,17,1.42,19,2.257,20,0.005,21,1.077,22,1.339,24,0.371,28,0.313,39,0.179,55,1.294,75,1.137,78,0.002,79,0.003,80,0.002,94,1.866,95,1.747,97,2.197,109,1.4,110,0.742,112,1.042,126,1.084,134,3.54,136,0.685,142,1.294,145,2.013,164,1.4,168,1.396,179,1.971,187,0.81,188,4.443,196,2.139,220,5.502,229,1.388,273,1.784,284,2.16,295,4.05,313,1.472,329,3.016,336,1.369,682,3.763,769,2.08,1367,1.777,1527,4.174,1730,3.856,1809,2.911,1913,2.423,1938,2.991,2152,4.163,2155,4.542,2161,5.05,2162,3.948,2163,4.276,2167,4.695,2171,4.403,2172,3.016,2178,4.769,2179,4.769,2181,2.389,2183,3.939,2184,3.939,2185,5.258,2186,4.769,2187,4.769,2191,3.818,2192,4.769,2194,5.717,2195,4.769,2306,4.573,2307,4.794,2308,4.573,2340,5.529,2343,3.856,3459,3.618,3488,3.856,3491,3.856,3656,4.174,3927,4.658,3928,4.658,3929,4.658,3930,4.658,3931,4.658,3932,4.658,3933,4.658,3934,4.658,3935,4.658,3936,4.658,3937,4.658,3938,4.658,3939,4.658,3940,4.658,3941,4.658,3942,4.658,3943,4.658,3944,4.658,3945,4.658,3946,4.658,3947,4.658,3948,4.658,3949,4.658,3950,4.658,3951,6.514,3952,4.658,3953,4.174,3954,4.658,3955,4.658,3956,4.658,3957,4.658,3958,4.658,3959,4.658,3960,4.658,3961,4.658,3962,4.658,3963,4.658,3964,4.658,3965,4.658,3966,4.658,3967,4.658,3968,6.514]],["title/interfaces/ScalesIndex.html",[40,0.012,1682,2.296]],["body/interfaces/ScalesIndex.html",[3,0.188,4,0.177,5,0.177,10,0.329,12,0.829,13,0.647,17,0.685,20,0.005,24,0.309,28,0.259,34,0.875,39,0.383,40,0.023,41,0.81,42,1.14,47,1.155,75,1.079,78,0.002,79,0.003,80,0.002,85,0.796,95,1.837,97,1.822,110,0.842,112,1.508,119,1.573,126,1.57,128,2.159,134,2.448,136,0.842,142,1.873,145,1.893,168,1.366,179,1.837,182,2.159,183,0.638,187,0.852,196,1.508,226,2.04,229,2.01,231,1.847,249,3.839,284,2.482,285,0.886,289,1.731,307,2.397,313,0.96,326,2.87,334,1.862,336,1.439,337,2.04,368,2.332,379,3.953,441,2.787,576,1.981,644,3.171,766,1.967,768,2.64,769,1.252,778,2.809,780,2.53,782,1.591,784,4.163,803,1.323,807,2.228,848,4.367,891,3.956,1498,2.397,1508,4.215,1614,2.87,1663,3.636,1665,2.87,1682,3.034,1702,2.974,1798,1.721,1890,0.724,1909,2.334,1912,2.371,1913,2.364,1938,3.078,1961,2.13,2008,2.549,2030,2.195,2040,3.096,2043,3.23,2045,2.118,2062,2.295,2063,2.04,2082,2.345,2083,2.345,2150,4.215,2151,3.06,2152,4.26,2153,3.295,2155,4.664,2156,3.06,2157,3.06,2158,3.171,2159,3.171,2160,3.171,2161,4.391,2162,4.581,2163,3.839,2164,1.418,2165,3.171,2166,2.961,2167,3.06,2168,3.295,2169,3.295,2170,5.867,2171,3.953,2172,6.455,2173,2.87,2174,3.295,2175,4.539,2176,4.215,2177,2.711,2178,2.87,2179,2.87,2180,4.872,2181,4.621,2182,4.539,2183,2.961,2184,2.961,2185,4.857,2186,2.87,2187,2.87,2188,3.295,2189,3.295,2190,3.171,2191,2.87,2192,4.872,2193,3.295,2194,5.11,2195,2.87,2196,3.295,2197,3.295,2198,4.367,2199,3.295,2200,3.295,2201,3.295,2227,2.64,3969,4.896]],["title/classes/SequentialChartMarkerProvider.html",[0,0.087,3970,4.225]],["body/classes/SequentialChartMarkerProvider.html",[0,0.156,2,1.744,3,0.273,4,0.256,5,0.256,10,0.281,11,0.547,13,1.133,14,1.744,17,1.289,19,1.698,20,0.005,21,0.81,22,1.007,24,0.264,28,0.33,39,0.273,41,0.836,53,1.945,54,2.756,78,0.004,79,0.004,80,0.004,85,1.155,90,1.2,94,1.688,109,1.527,110,0.782,117,3.574,179,1.448,183,0.925,187,1.235,273,2.35,627,3.711,815,4.6,850,5.107,1003,3.262,1078,5.88,1646,3.387,1900,2.766,2032,3.19,3495,4.987,3496,6.664,3497,6.664,3498,6.664,3499,6.664,3500,6.314,3501,6.664,3748,6.366,3970,7.102,3971,7.102,3972,7.613,3973,7.103,3974,6.366,3975,6.366,3976,7.103]],["title/classes/SequentialColorProvider.html",[0,0.087,1077,4.225]],["body/classes/SequentialColorProvider.html",[0,0.157,2,1.759,3,0.275,4,0.258,5,0.258,10,0.284,11,0.55,13,1.139,14,1.759,17,1.294,19,1.713,20,0.005,21,0.817,22,1.016,24,0.267,28,0.275,39,0.275,41,0.84,52,2.062,54,2.78,78,0.004,79,0.004,80,0.004,85,1.165,94,1.693,109,1.54,110,0.786,117,3.592,136,0.844,179,1.461,183,0.933,273,2.362,627,3.73,815,4.639,850,5.118,1060,6.42,1065,2.974,1077,7.139,1078,5.931,1646,3.405,2032,3.202,3495,5.03,3496,6.699,3497,6.699,3498,6.699,3499,6.699,3500,6.347,3501,6.699,3504,6.42,3971,7.139,3972,7.631,3974,6.42,3975,6.42,3977,7.164]],["title/classes/SequentialValueProvider.html",[0,0.087,3972,3.965]],["body/classes/SequentialValueProvider.html",[0,0.153,2,1.659,3,0.26,4,0.244,5,0.244,8,1.861,10,0.33,11,0.531,13,1.1,14,1.659,17,1.261,19,1.615,20,0.005,21,0.771,22,0.958,24,0.336,28,0.26,39,0.26,54,2.622,55,2.311,78,0.003,79,0.004,80,0.003,85,1.099,94,1.735,109,1.453,110,0.931,136,0.759,168,0.932,179,1.378,183,1.084,187,1.175,196,1.511,231,1.851,273,2.279,294,2.016,336,1.985,627,3.6,782,1.594,850,5.047,1061,3.026,1646,3.286,1913,2.342,2032,3.257,2890,5.249,3495,4.744,3496,6.464,3497,6.464,3498,6.464,3499,6.464,3500,6.125,3501,6.464,3506,6.056,3507,5.594,3971,7.791,3972,6.464,3978,9.411,3979,6.757,3980,6.757,3981,6.757,3982,6.757,3983,6.757,3984,8.322,3985,8.322,3986,6.757,3987,6.757,3988,6.757]],["title/classes/SideIndicatorAccessors.html",[0,0.087,2828,3.583]],["body/classes/SideIndicatorAccessors.html",[0,0.116,2,1.22,3,0.191,4,0.179,5,0.179,8,1.523,10,0.197,11,0.496,12,1.16,13,1.247,14,1.909,17,1.087,20,0.005,22,0.704,24,0.254,28,0.363,33,1.628,35,2.152,36,2.152,37,2.303,38,1.305,39,0.337,40,0.022,41,0.757,42,1.156,47,1.172,52,1.858,55,1.379,56,2.328,57,1.04,72,2.28,78,0.002,79,0.003,80,0.002,85,0.808,91,2.611,94,1.688,96,2.032,109,1.464,110,0.709,111,2.608,115,2.555,119,1.585,134,2.472,136,0.453,142,1.379,147,3.217,148,1.719,151,2.191,164,2.029,183,0.647,187,0.864,188,3.411,196,1.523,198,1.111,213,1.36,216,3.719,217,3.719,222,2.355,226,3.484,231,2.7,244,1.399,245,2.001,257,1.204,289,1.661,294,1.65,299,3.262,300,2.379,301,1.918,303,2.042,321,1.459,324,2.149,327,2.432,328,1.48,332,2.488,334,1.026,336,1.459,337,2.069,384,1.27,418,3.004,488,1.803,634,1.833,636,1.407,669,3.217,671,3.343,729,1.774,790,1.502,941,2.149,1063,1.48,1166,2.75,1174,1.973,1191,3.105,1192,3.105,1205,2.912,1206,3.105,1207,3.487,1534,2.75,1610,1.692,1643,3.656,1698,4.783,1709,4.257,1807,2.75,1809,3.105,1914,2.394,1916,2.868,1934,2.565,1957,2.433,1960,1.36,2045,2.149,2098,2.912,2814,5.457,2815,6.496,2816,7.423,2817,3.217,2818,6.155,2819,6.155,2820,3.343,2821,5.013,2822,3.859,2823,3.992,2824,5.674,2825,5.013,2826,3.859,2827,3.859,2828,4.782,2829,3.859,2830,3.859,2831,5.013,2832,5.013,2833,3.859,2834,3.859,2835,3.859,2836,3.859,2837,3.859,2838,3.859,2839,3.859,2840,3.656,2841,3.217,2842,3.859,2843,5.013,2844,3.656,2845,3.859,2846,5.29,2847,3.859,2848,6.037,2849,3.487,2850,3.859,2851,3.859,2852,3.859,2853,6.037,2854,3.859,2855,3.859,2856,3.859,2857,3.859,2858,3.859,2859,3.859,2860,3.859,2861,3.859,2862,3.859,2863,3.859,2864,3.859,2865,3.859,2866,3.656,2867,3.217,2868,3.859,3989,6.81,3990,4.967]],["title/classes/SparkChartAssist.html",[0,0.087,3991,4.574]],["body/classes/SparkChartAssist.html",[0,0.061,2,0.888,3,0.139,4,0.13,5,0.13,8,1.213,10,0.258,11,0.346,13,1.074,14,0.888,17,1.346,19,1.943,20,0.005,21,0.927,22,1.152,24,0.346,28,0.372,34,0.646,39,0.139,53,0.819,55,1.506,78,0.002,79,0.003,80,0.002,83,2.187,85,0.882,87,5.458,90,1.42,94,1.826,97,2.508,109,1.812,110,0.808,112,1.885,115,2.71,126,1.682,132,3.812,134,2.623,136,0.836,142,2.15,145,1.091,148,2.812,154,1.195,168,1.067,179,1.657,183,1.098,187,0.629,188,2.715,196,1.818,198,1.818,231,2.428,244,2.441,258,1.66,273,1.485,283,3.46,285,1.401,295,1.949,324,1.564,329,2.341,333,2.007,334,0.747,336,1.911,420,6.937,432,5.459,439,1.159,446,2.247,453,2.182,476,1.593,525,1.639,576,2.123,580,1.349,590,1.854,591,1.125,596,0.977,597,1.291,682,1.811,729,1.936,741,6.276,744,2.286,747,1.738,750,2.659,753,2.812,761,1.159,766,2.178,767,6.319,768,1.949,769,1.663,773,5.013,776,2.433,777,3.648,781,3.278,783,4.679,786,3.648,788,4.863,798,1.854,807,2.387,815,2.341,891,2.78,1003,1.232,1053,2.993,1056,2.904,1061,2.597,1156,2.341,1162,3.99,1182,1.159,1183,2.119,1211,2.538,1216,2.661,1297,4.858,1499,3.99,1515,2.661,1663,4.381,1684,2.993,1730,2.993,1737,4.488,1900,2.15,1969,2.14,2022,2.756,2063,1.506,2216,4.858,2346,5.052,2347,4.858,2348,4.211,2824,3.511,2909,2.661,3027,2.993,3117,4.858,3139,3.24,3147,3.24,3165,2.993,3197,7.283,3212,5.981,3259,3.24,3260,3.24,3291,3.24,3970,2.993,3991,4.858,3992,9.692,3993,6.504,3994,6.504,3995,6.504,3996,8.427,3997,9.629,3998,5.421,3999,7.225,4000,3.615,4001,5.421,4002,3.615,4003,4.858,4004,3.615,4005,5.421,4006,5.421,4007,3.615,4008,5.421,4009,3.615,4010,5.421,4011,3.615,4012,3.615,4013,3.615,4014,3.615,4015,3.615,4016,3.615,4017,5.421,4018,6.504,4019,3.615,4020,3.615,4021,5.421,4022,3.615,4023,5.421,4024,7.225,4025,5.421,4026,5.421,4027,3.615,4028,3.615,4029,7.225,4030,5.421,4031,3.615,4032,3.24,4033,3.24,4034,3.615,4035,3.615,4036,3.24,4037,3.24,4038,3.615,4039,3.615,4040,3.615,4041,3.615,4042,6.504,4043,5.421,4044,3.615,4045,6.504,4046,3.615,4047,3.615,4048,3.615,4049,3.615,4050,3.615,4051,3.615,4052,3.615,4053,3.615,4054,3.615,4055,8.127,4056,3.615,4057,5.421,4058,7.74,4059,3.615,4060,3.615,4061,6.504,4062,3.615,4063,3.615,4064,3.615,4065,3.615,4066,3.615,4067,3.615,4068,3.615,4069,3.615,4070,6.504,4071,5.421,4072,3.615,4073,3.615,4074,3.615,4075,3.615,4076,3.615,4077,3.615,4078,3.615,4079,3.615,4080,3.615,4081,3.615,4082,6.504,4083,3.615,4084,3.615,4085,3.615,4086,3.615,4087,3.615]],["title/classes/StatusAccessors.html",[0,0.087,2881,3.757]],["body/classes/StatusAccessors.html",[0,0.116,2,1.683,3,0.263,4,0.247,5,0.247,7,2.571,8,1.877,10,0.271,11,0.535,12,1.162,13,1.199,14,1.683,17,1.357,19,1.638,20,0.005,21,0.782,22,0.972,24,0.338,28,0.349,33,2.007,38,1.801,39,0.349,40,0.02,41,0.818,54,2.659,57,1.435,78,0.003,79,0.004,80,0.003,94,1.667,96,4.039,109,1.804,110,0.765,136,0.625,164,2.033,196,1.877,202,5.246,205,6.53,207,5.246,208,6.141,209,4.411,214,3.432,259,3.022,417,2.998,2289,6.141,2878,6.679,2879,8.175,2880,7.346,2881,6.178,2882,7.512,2883,7.512,2884,6.949,2885,5.673,2886,5.673,2887,5.673,2888,5.673,2898,6.141,3760,6.141,4088,6.852,4089,6.852,4090,6.852,4091,6.852]],["title/classes/SvgMarker.html",[0,0.087,4092,4.225]],["body/classes/SvgMarker.html",[0,0.156,2,1.734,3,0.271,4,0.255,5,0.255,8,1.912,10,0.28,14,1.734,17,1.285,19,2.043,20,0.005,21,0.975,22,1.212,24,0.318,28,0.328,39,0.271,52,2.043,78,0.003,79,0.004,80,0.003,85,1.148,94,1.753,136,0.932,179,1.743,183,1.113,187,1.228,196,1.579,273,2.341,319,4.412,320,4.412,673,5.021,682,3.536,1003,3.132,1367,3.261,1646,3.375,1809,5.342,1996,3.707,1997,3.317,2220,7.076,3698,6.327,3699,7.66,3701,6.327,3718,7.66,4092,7.076,4093,9.554,4094,8.547,4095,8.547,4096,7.06,4097,7.06,4098,7.06,4099,7.06,4100,7.06,4101,8.547,4102,7.06]],["title/classes/TextColorProvider.html",[0,0.087,1079,4.225]],["body/classes/TextColorProvider.html",[0,0.098,2,1.422,3,0.223,4,0.209,5,0.209,10,0.229,11,0.481,14,1.422,17,1.174,19,1.384,20,0.005,21,0.66,22,0.821,24,0.313,28,0.342,39,0.223,41,0.736,52,2.382,55,2.096,78,0.003,79,0.004,80,0.003,85,0.942,94,1.568,109,1.245,110,0.528,117,3.144,131,2.54,136,0.765,168,1.226,179,1.712,183,0.754,187,1.007,196,1.688,231,2.792,273,2.067,307,3.695,313,1.135,334,1.735,336,1.701,815,5.436,830,2.97,850,3.87,957,6.521,1061,2.984,1065,2.502,1072,5.19,1073,5.19,1074,5.19,1075,7.165,1076,5.19,1079,6.247,1089,4.794,1091,4.794,1098,8.753,1099,5.19,1367,2.879,1498,2.835,1509,4.498,1646,2.979,2032,2.905,2114,4.424,2166,3.502,3495,4.066,3746,6.763,3749,5.19,4103,7.546,4104,8.395,4105,8.895,4106,8.395,4107,5.791,4108,5.791,4109,5.791,4110,5.791,4111,5.19,4112,5.791,4113,5.19,4114,5.791,4115,5.19,4116,5.791,4117,5.791,4118,5.791,4119,5.791,4120,5.791,4121,7.546,4122,7.546,4123,5.791,4124,7.546,4125,5.791,4126,5.791,4127,5.791,4128,4.794,4129,5.791,4130,5.791,4131,5.791,4132,7.546,4133,7.546,4134,5.791,4135,8.895,4136,5.791,4137,8.895,4138,5.791,4139,8.895,4140,8.895,4141,7.546,4142,5.791,4143,5.791,4144,5.791,4145,7.546,4146,5.791,4147,8.395,4148,5.791,4149,5.791,4150,5.791,4151,5.791]],["title/injectables/ThresholdsService.html",[843,3.965,3668,3.965]],["body/injectables/ThresholdsService.html",[0,0.042,1,4.131,3,0.095,4,0.275,5,0.09,9,5.69,10,0.098,11,0.258,12,1.223,13,1.282,14,0.61,17,1.328,19,1.885,20,0.005,21,0.899,22,1.118,23,3.582,24,0.302,28,0.351,33,1.659,38,0.652,39,0.095,42,1.703,47,1.799,54,0.963,55,0.689,57,1.356,59,2.993,75,1.102,78,0.001,79,0.002,80,0.001,85,1.24,89,0.61,90,0.905,91,1.305,94,1.656,96,2.407,106,0.644,109,1.639,110,0.839,112,1.552,119,1.653,126,0.94,128,1.781,136,0.226,142,1.798,154,2.52,164,1.742,168,0.704,179,1.608,183,0.323,187,0.432,196,1.636,213,2.658,216,3.52,217,3.44,218,0.98,222,1.138,226,1.683,229,1.93,231,2.648,238,0.773,244,1.138,245,1.729,251,2.494,257,0.979,273,1.901,284,1.019,285,1.172,288,1.929,289,1.827,294,0.602,295,1.338,297,1.501,303,2.072,313,0.487,325,2.225,327,1.216,334,1.828,336,1.5,339,2.719,368,0.751,379,1.455,417,2.52,435,2.368,439,0.796,455,1.713,482,1.138,484,2.827,496,1.305,524,1.076,580,1.962,634,0.953,648,3.344,753,2.978,762,1.978,765,3.307,766,1.623,769,1.505,772,2.525,780,0.931,785,1.054,787,2.836,803,1.976,807,1.335,809,1.276,815,3.307,818,2.525,843,3.138,844,2.055,846,2.973,850,3.018,891,1.273,911,1.671,925,2.225,944,1.062,957,5.03,1061,2.455,1065,1.522,1096,2.055,1128,1.827,1160,2.818,1195,1.743,1244,2.973,1245,4.228,1319,3.217,1326,1.276,1367,0.947,1382,3.138,1401,3.344,1440,1.515,1446,1.929,1498,1.216,1587,1.929,1610,3.294,1646,0.98,1663,1.338,1698,1.934,1709,3.677,1737,3.344,1774,3.62,1808,2.055,1809,4.338,1863,1.978,1913,0.979,1916,1.49,1934,2.244,1935,0.901,1940,0.963,1946,1.567,1953,0.963,1954,0.859,1977,0.98,1984,1.376,1993,1.982,2012,3.597,2013,1.982,2014,2.839,2064,3.257,2068,1.374,2077,1.164,2079,3.172,2101,2.616,2105,1.338,2107,2.178,2111,4.766,2116,2.616,2123,1.552,2127,3.677,2138,1.608,2176,3.192,2177,3.257,2181,1.273,2270,2.836,2364,2.973,2548,3.344,2681,2.225,2742,2.719,2814,1.743,2816,3.759,2824,1.608,2825,1.827,2828,4.131,2831,1.827,2832,1.827,2869,4.571,2871,4.871,2874,3.138,2875,1.929,2876,3.138,2877,6.296,2878,1.827,2881,1.827,2962,2.055,2976,2.055,2987,1.929,3183,6.056,3213,3.62,3250,2.225,3280,3.344,3443,3.138,3530,2.836,3578,3.62,3580,2.225,3603,2.973,3627,1.743,3668,3.138,3702,3.62,3747,2.225,3797,4.871,3799,2.055,3846,3.62,3864,4.577,4032,2.225,4033,2.225,4128,4.871,4152,8.294,4153,2.483,4154,4.039,4155,4.039,4156,4.571,4157,5.107,4158,4.039,4159,4.039,4160,4.039,4161,4.039,4162,4.039,4163,4.039,4164,4.039,4165,4.039,4166,2.483,4167,6.94,4168,4.039,4169,2.483,4170,9.88,4171,5.107,4172,7.316,4173,2.483,4174,2.483,4175,3.344,4176,2.225,4177,2.483,4178,5.107,4179,2.483,4180,4.577,4181,2.225,4182,2.055,4183,2.483,4184,2.225,4185,6.475,4186,5.884,4187,2.483,4188,5.107,4189,2.483,4190,4.039,4191,6.94,4192,5.884,4193,5.884,4194,2.483,4195,3.62,4196,5.107,4197,5.884,4198,2.483,4199,2.483,4200,2.483,4201,2.483,4202,2.483,4203,4.039,4204,2.483,4205,6.94,4206,6.475,4207,4.039,4208,2.483,4209,4.039,4210,4.039,4211,5.884,4212,2.483,4213,3.62,4214,3.62,4215,4.039,4216,4.039,4217,2.483,4218,5.884,4219,4.039,4220,3.62,4221,4.039,4222,3.62,4223,4.039,4224,2.483,4225,2.483,4226,2.483,4227,2.483,4228,2.483,4229,4.039,4230,2.483,4231,2.483,4232,4.039,4233,2.483,4234,5.107,4235,2.483,4236,5.107,4237,2.483,4238,2.483,4239,2.483,4240,2.483,4241,4.039,4242,2.483,4243,2.483,4244,2.483,4245,2.483,4246,4.039,4247,2.483,4248,2.483,4249,2.483,4250,2.483,4251,2.483,4252,2.483,4253,2.483,4254,4.039,4255,2.483,4256,2.483,4257,2.483,4258,2.483,4259,2.483,4260,5.107,4261,2.483,4262,2.483,4263,2.483,4264,2.483,4265,4.039,4266,2.483,4267,2.483,4268,2.483,4269,2.483,4270,4.039,4271,2.483,4272,4.039,4273,2.483,4274,2.483,4275,2.483,4276,2.483,4277,2.483,4278,2.483,4279,2.483,4280,2.483,4281,2.483,4282,2.483,4283,2.483,4284,2.483,4285,2.483,4286,2.483,4287,2.483,4288,2.483,4289,2.483,4290,2.483,4291,2.483,4292,2.483,4293,4.039,4294,2.483,4295,2.483,4296,2.483,4297,4.039,4298,2.483,4299,2.483,4300,5.884,4301,4.039,4302,7.316,4303,2.483,4304,2.483,4305,2.483,4306,2.483,4307,2.483,4308,2.483,4309,2.483,4310,2.483,4311,2.483,4312,2.483,4313,2.483,4314,2.483,4315,2.483,4316,2.483,4317,2.483,4318,2.483,4319,2.483,4320,2.483,4321,2.483,4322,2.483,4323,5.107,4324,2.483,4325,5.107,4326,2.483,4327,2.483,4328,5.107,4329,2.483,4330,5.107,4331,5.107,4332,5.107,4333,5.107,4334,5.107,4335,5.107,4336,6.475,4337,2.483,4338,2.483,4339,2.483,4340,2.483,4341,2.483,4342,2.483,4343,2.483,4344,4.039,4345,2.483,4346,4.039,4347,2.483,4348,2.483,4349,4.039,4350,2.483,4351,2.483,4352,2.483,4353,2.483,4354,2.483,4355,2.483]],["title/classes/TimeScale.html",[0,0.087,4356,4.574]],["body/classes/TimeScale.html",[0,0.081,2,1.176,3,0.184,4,0.173,5,0.173,10,0.19,11,0.423,14,1.176,17,1.439,19,2.343,20,0.005,21,1.118,22,1.39,24,0.374,28,0.316,39,0.184,41,0.647,75,1.209,78,0.004,79,0.003,80,0.002,85,0.779,91,3.49,94,1.862,95,1.796,97,1.794,109,1.427,110,0.751,117,4.231,126,1.114,134,3.139,136,0.751,145,1.986,168,1.384,179,2.013,196,1.934,220,5.093,231,1.819,273,1.819,284,2.596,295,4.438,313,1.301,336,1.407,682,2.398,769,1.949,784,2.398,1913,2.33,1938,2.908,2152,3.813,2155,4.015,2161,4.339,2162,3.49,2163,2.725,2171,3.892,2178,5.379,2179,5.379,2181,3.405,2183,4.609,2184,4.609,2185,5.12,2186,3.892,2187,3.892,2191,2.807,2192,4.469,2194,5.568,2195,3.892,2306,5.78,2307,4.887,2308,5.78,2340,3.524,3455,3.964,3456,5.951,3457,5.497,3458,5.951,3459,5.158,3461,4.291,3462,4.291,3463,4.291,3464,4.291,3469,4.291,3470,4.291,3471,4.291,3472,4.291,3473,4.291,3474,4.291,3475,4.291,3476,4.291,3477,4.291,3478,4.291,3479,4.291,3480,4.291,3481,4.291,3482,4.291,3483,4.291,3485,4.291,3486,4.291,3488,3.964,3489,4.291,3490,4.291,3491,3.964,3645,4.291,3657,4.291,4356,5.951,4357,8.948,4358,7.623,4359,4.788,4360,7.744,4361,4.788,4362,4.788,4363,5.951,4364,4.788,4365,4.788,4366,4.788,4367,4.788]],["title/classes/UtilityService.html",[0,0.087,329,3.305]],["body/classes/UtilityService.html",[0,0.07,2,1.017,3,0.159,4,0.149,5,0.149,10,0.324,12,0.736,13,0.547,17,1.23,19,2.154,20,0.005,21,0.973,22,1.21,24,0.336,28,0.328,39,0.159,42,1.639,47,1.413,55,1.664,57,1.787,75,0.838,78,0.004,79,0.003,80,0.002,85,0.674,94,1.36,96,4.099,109,0.89,110,0.861,112,1.575,114,1.607,119,1.837,128,1.827,136,0.746,151,1.827,154,1.98,168,1.417,179,1.837,183,0.78,196,2.2,217,1.758,226,2.496,229,2.299,231,2.614,245,2.405,273,1.641,284,1.776,285,0.75,289,1.626,294,1.706,319,2.589,320,2.589,329,3.88,334,1.455,336,2.648,371,3.429,411,1.289,487,3.898,607,2.87,674,1.271,778,2.933,780,2.641,803,1.902,832,4.033,833,2.809,834,4.127,850,3.073,891,3.957,928,3.712,1096,4.96,1367,2.686,1428,1.554,1663,2.233,1680,2.788,1681,2.682,1701,2.177,1907,1.607,1913,2.259,1930,1.411,2152,4.112,2166,4.257,2177,2.293,2181,4.513,2185,3.795,2242,4.207,2308,2.908,2938,3.429,2975,2.788,2987,3.217,2990,3.429,3003,3.429,3015,3.217,3036,4.96,3183,3.429,3604,3.048,3891,3.712,4195,3.712,4368,4.142,4369,5.992,4370,5.992,4371,5.992,4372,5.992,4373,5.992,4374,5.992,4375,8.533,4376,4.142,4377,4.142,4378,4.142,4379,5.992,4380,4.142,4381,7.04,4382,5.992,4383,4.142,4384,9.443,4385,4.142,4386,4.142,4387,4.142,4388,4.142,4389,4.142,4390,8.533,4391,7.04,4392,4.142,4393,5.992,4394,4.142,4395,4.142,4396,5.992,4397,4.142,4398,7.04,4399,4.142,4400,7.04,4401,7.715,4402,7.715,4403,4.142,4404,4.142,4405,4.142,4406,4.142,4407,4.142,4408,4.142,4409,4.142,4410,5.992,4411,4.142,4412,4.142,4413,8.533,4414,4.142,4415,4.142,4416,4.142,4417,4.142,4418,9.443,4419,4.142,4420,4.142,4421,4.142,4422,4.142,4423,3.712,4424,5.992,4425,4.142,4426,5.992,4427,4.142,4428,4.142,4429,4.142,4430,5.992,4431,7.04,4432,4.142,4433,4.142,4434,4.142,4435,4.142,4436,4.142,4437,4.142,4438,4.142,4439,7.04,4440,4.142,4441,4.142,4442,4.142,4443,4.142,4444,4.142,4445,4.142,4446,4.142,4447,4.142,4448,4.142,4449,4.142,4450,4.142,4451,4.142,4452,4.142,4453,4.142,4454,9.324,4455,4.142,4456,4.142,4457,4.142,4458,7.04,4459,4.142,4460,4.142,4461,4.142,4462,4.142,4463,4.142,4464,7.04,4465,4.142,4466,7.04,4467,4.142,4468,4.142,4469,4.142,4470,5.992,4471,4.142,4472,4.142,4473,3.712,4474,4.142,4475,4.142,4476,4.142,4477,5.992,4478,4.142,4479,4.142,4480,4.142]],["title/classes/VerticalBarAccessors.html",[0,0.087,4481,4.574]],["body/classes/VerticalBarAccessors.html",[0,0.11,2,1.595,3,0.25,4,0.234,5,0.234,7,2.436,10,0.257,11,0.518,12,1.239,13,1.332,14,1.595,15,5.7,16,5.138,17,1.41,19,1.552,20,0.005,21,0.741,22,0.921,23,3.179,24,0.375,28,0.34,38,1.707,39,0.25,41,0.791,56,3.806,57,2,58,7.127,59,5.951,75,0.908,78,0.003,79,0.004,80,0.003,117,4.06,164,1.745,202,6.179,204,4.622,207,5.8,209,5.122,210,4.622,211,5.376,212,5.376,214,3.253,259,4.213,295,4.377,1003,2.213,1061,3.317,1873,7.276,1874,5.82,1875,5.82,1876,5.82,1877,5.82,1878,5.82,1879,5.82,1880,4.205,1881,5.82,1882,4.205,1883,5.82,1884,4.205,1885,7.276,1886,4.205,1888,5.82,1889,5.82,2304,4.37,4481,7.276,4482,9.28]],["title/classes/XYAccessors.html",[0,0.087,2268,3.19]],["body/classes/XYAccessors.html",[0,0.111,2,1.605,3,0.251,4,0.236,5,0.236,7,2.452,10,0.259,11,0.52,12,1.2,13,1.308,17,1.14,20,0.005,24,0.304,28,0.341,29,3.131,30,3.353,31,3.131,32,2.828,33,2.224,34,1.456,37,2.445,38,1.718,39,0.357,40,0.023,41,0.637,42,2.165,47,2.194,52,1.949,53,1.848,57,1.948,60,5.096,62,5.096,75,1.14,78,0.003,79,0.004,80,0.003,94,1.721,109,1.91,110,0.81,136,0.743,164,1.91,245,2.396,303,1.718,646,2.866,782,1.923,785,3.46,1065,1.948,1160,3.905,1894,2.227,1899,2.006,1900,1.816,1901,1.977,1975,2.538,2103,3.619,2164,2.362,2181,4.181,2267,5.814,2268,5.096,2271,4.514,2272,4.514,2823,4.779,2892,4.812,2893,6.902,2894,6.531,2895,6.333,2896,6.001,3843,5.859,4483,6.537]],["title/classes/XYGridConfig.html",[0,0.087,87,3.305]],["body/classes/XYGridConfig.html",[0,0.089,2,1.291,3,0.202,4,0.19,5,0.19,8,1.583,10,0.208,11,0.451,14,1.965,17,1.381,20,0.005,24,0.35,28,0.329,39,0.202,41,0.69,75,1.197,78,0.003,79,0.003,80,0.003,83,2.373,84,3.287,87,5.183,90,1.197,94,1.813,95,3.212,96,3.765,97,2.486,98,5.891,99,5.891,100,4.009,101,3.39,102,1.886,103,3.25,104,3.466,105,3.466,106,1.835,108,4.302,109,2.153,110,0.893,111,3.156,112,2.209,113,6.275,114,3.65,115,3.529,116,2.31,117,3.835,119,1.95,120,6.091,121,4.765,122,4.97,124,3.39,126,2.08,128,3.122,129,3.692,130,4.874,131,2.445,132,5.68,133,3.87,134,3.341,135,4.315,136,0.479,137,3.539,138,3.87,139,2.365,140,3.18,141,3.87,142,2.223,143,3.87,144,3.87,145,1.058,146,3.87,148,2.77,149,2.414,155,4.476,157,2.634,174,4.353,181,5.861,187,0.915,201,4.585,249,2.993,258,2.414,261,4.085,262,4.353,407,4.353,488,2.905,552,2.465,627,2.274,1515,5.211,1828,4.713,1850,4.713,1857,2.764,1858,2.835,1859,2.835,1860,2.835,1861,2.835,1862,2.835,1863,2.575,1864,2.835,2075,4.206,2543,3.87,3581,4.713,4484,9.204,4485,5.258,4486,5.258,4487,5.258,4488,5.258,4489,5.258,4490,5.258,4491,7.079,4492,7.079,4493,5.258,4494,5.258,4495,5.258,4496,5.258,4497,5.258,4498,5.258]],["title/classes/XYRenderer.html",[0,0.087,2823,2.992]],["body/classes/XYRenderer.html",[0,0.067,2,0.965,3,0.151,4,0.208,5,0.142,10,0.391,11,0.368,12,1.228,13,1.281,17,1.373,19,2.281,20,0.005,21,1.098,22,1.34,24,0.369,28,0.341,34,0.702,38,1.033,39,0.151,41,0.562,42,0.915,47,0.927,53,0.891,57,0.823,75,1.052,78,0.002,79,0.003,80,0.002,85,1.408,90,0.549,94,1.818,96,2.359,97,1.558,109,1.618,110,0.731,112,1.683,117,4.009,119,0.801,136,0.789,148,1.996,168,1.27,179,1.945,183,1.091,187,0.684,196,1.874,198,1.29,213,2.688,220,4.284,222,2.594,231,1.579,246,2.645,251,2.725,270,4.424,273,1.579,274,5.19,276,4.874,277,3.735,283,2.762,284,2.114,285,1.237,287,1.223,289,1.992,294,2.196,298,3.683,299,4.253,300,4.146,301,2.594,303,2.593,307,3.685,310,3.031,319,2.456,320,2.456,321,1.155,322,4.48,324,1.7,327,1.924,328,1.171,329,2.545,330,3.522,333,2.327,336,2.007,337,1.637,343,2.456,360,3.053,368,1.744,382,3.522,384,2.142,394,2.176,395,2.645,396,2.545,411,1.223,439,1.26,482,1.107,484,2.176,545,1.558,592,2.823,607,2.762,642,1.951,714,1.694,728,1.047,743,1.273,747,2.906,780,2.823,795,1.29,801,2.118,803,1.845,811,1.968,850,3.86,944,1.033,1160,1.882,1166,3.193,1262,2.545,1265,1.404,1289,4.874,1319,2.525,1367,1.499,1498,2.823,1503,3.253,1510,2.456,1529,4.774,1646,2.697,1649,2.892,1664,2.892,1665,2.304,1811,2.176,1839,2.892,1914,1.382,1915,1.033,1930,1.339,1932,1.474,1933,1.474,1934,1.769,1935,1.427,1938,2.533,1979,1.552,1984,1.339,1985,1.45,1992,1.552,2009,1.906,2017,1.474,2021,2.128,2041,1.968,2094,2.237,2103,2.176,2134,3.38,2149,2.304,2152,3.319,2180,3.38,2428,2.892,2624,4.245,2742,3.881,2817,2.545,2823,3.38,2841,4.424,2849,2.759,2867,4.424,2975,2.645,3530,2.759,3585,4.48,3586,5.846,3587,4.48,3588,4.48,3589,4.48,3590,4.48,3591,4.48,3592,3.253,3593,3.253,3594,3.253,3595,3.253,3597,5.307,3600,3.053,3602,3.253,3603,2.892,3604,2.892,3605,4.245,3606,3.053,3607,5.846,3608,3.253,3609,3.053,3610,3.053,3611,5.307,3612,3.253,3613,3.881,3614,3.053,3615,3.053,3616,2.892,3617,3.053,3618,3.253,3619,3.053,3620,3.253,3621,5.307,3622,3.053,3623,5.539,3624,3.253,3625,2.545,3626,3.253,3627,4.049,3628,3.053,3629,3.253,3630,3.053,3631,3.253,3632,3.053,3633,3.253,3634,3.053,4473,3.522,4499,7.526,4500,3.93,4501,3.93,4502,3.93,4503,3.93,4504,3.93,4505,3.93,4506,3.93,4507,3.93,4508,3.93,4509,3.93,4510,3.93,4511,3.93,4512,3.93,4513,3.93,4514,3.93]],["title/interfaces/ZoneCross.html",[40,0.012,2874,3.965]],["body/interfaces/ZoneCross.html",[3,0.28,4,0.263,5,0.263,10,0.289,11,0.556,20,0.005,22,1.369,24,0.347,28,0.28,39,0.358,40,0.021,78,0.004,79,0.004,80,0.004,136,0.881,168,1.201,216,4.361,217,4.361,285,1.577,313,1.429,368,2.204,417,3.262,790,2.204,1610,2.484,1709,4.556,1890,1.078,2012,3.269,2177,5.606,2869,5.662,2870,6.034,2871,6.034,2872,6.533,2873,6.533,2874,6.769,2875,5.662,2876,5.662,2877,5.662]],["title/classes/ZoomPlugin.html",[0,0.087,2910,4.225]],["body/classes/ZoomPlugin.html",[0,0.073,2,1.051,3,0.165,4,0.154,5,0.154,10,0.17,11,0.391,12,1.019,14,1.051,17,1.343,19,1.024,20,0.005,21,0.7,22,0.607,24,0.309,28,0.378,39,0.236,40,0.01,41,0.598,55,2.609,75,0.858,78,0.003,79,0.003,80,0.002,83,1.977,89,1.762,90,1.095,94,1.79,96,3.53,97,1.938,103,1.966,106,1.591,109,1.542,110,0.654,112,0.958,114,1.661,117,3.455,119,1.251,126,1.429,132,2.51,136,0.39,142,1.992,145,0.862,148,2.711,149,1.966,168,1.19,179,1.812,183,1.223,187,0.745,196,1.988,198,0.958,226,2.557,231,2.49,258,3.293,273,1.681,301,1.728,313,1.406,314,2.116,319,2.676,320,2.676,321,1.258,324,1.852,332,2.145,336,1.803,347,3.151,418,2.589,436,2.308,443,2.789,444,2.85,446,1.86,447,2.85,459,1.507,464,1.051,465,2.872,466,2.676,471,2.676,472,2.676,473,2.676,474,2.676,476,1.803,524,1.141,545,1.938,583,2.308,584,2.308,587,2.589,596,1.658,597,1.529,615,3.545,636,0.885,642,1.223,643,3.545,673,2.25,709,3.545,712,1.91,761,1.373,795,1.752,798,2.196,803,1.157,834,2.51,891,2.196,944,1.125,1019,2.145,1132,2.676,1133,2.676,1166,3.971,1176,3.837,1177,3.545,1182,1.373,1183,2.51,1191,2.676,1192,2.676,1205,2.51,1206,2.676,1263,2.192,1367,1.633,1469,3.006,1512,3.326,1651,2.25,1680,2.882,1681,2.773,1683,2.096,1693,2.25,1732,3.545,1747,1.58,1795,5.08,1806,4.337,1816,3.326,1863,2.096,1915,1.613,1927,1.633,2029,2.341,2039,1.966,2044,2.196,2054,1.888,2065,2.308,2077,2.007,2114,2.51,2152,2.706,2245,2.882,2246,4.13,2476,3.545,2505,3.545,2753,3.326,2793,4.767,2820,2.882,2899,7.358,2900,8.148,2901,6.428,2902,5.5,2903,5.5,2904,5.5,2905,8.521,2906,3.545,2907,3.545,2908,3.837,2909,3.151,2910,5.08,2911,3.837,2912,3.837,2913,3.837,2914,3.837,2915,3.837,2916,3.837,2917,3.837,2918,3.837,2919,3.837,2920,5.572,2921,6.086,2922,3.837,2923,3.837,2924,3.837,2925,3.837,2926,3.837,2927,3.837,2928,3.837,2929,3.837,2930,3.837,2931,3.837,2932,3.837,2933,3.326,2934,3.837,2935,3.837,2936,3.837,2937,3.837,2938,3.545,2939,3.837,2940,3.837,2941,3.837,2942,3.837,2943,3.837,2944,3.837,2945,3.837,2946,3.837,2947,3.837,2948,6.865,2949,3.837,2950,3.837,2951,3.837,2952,3.837,2953,3.837,2954,3.837,2955,3.837,2956,5.5,2957,3.837,2958,3.837,2959,3.837,2960,3.837,2961,3.837,2962,3.545,2963,3.837,2964,3.837,2965,3.837,2966,3.837,2967,3.837,2968,3.837,2969,3.837,2970,3.837,2971,3.837,2972,3.837,2973,3.837,2974,3.545,2975,4.13,2976,3.545,2977,3.837,2978,3.837,2979,3.837,2980,3.837,2981,3.837,2982,6.428,2983,5.5,2984,7.021,2985,3.837,2986,5.5,2987,6.086,2988,5.5,2989,3.837,2990,5.08,2991,3.837,2992,5.5,2993,6.428,2994,5.5,2995,3.837,2996,3.837,2997,3.837,2998,3.837,2999,3.837,3000,3.837,3001,3.837,3002,3.837,3003,3.545,3004,3.837,3005,3.837,3006,3.837,3014,3.837,4515,4.282,4516,4.282,4517,4.282,4518,4.282]],["title/dependencies.html",[3661,4.763,4519,4.276]],["body/dependencies.html",[20,0.005,52,1.874,78,0.004,79,0.004,80,0.004,91,4.119,119,1.598,313,1.938,314,2.456,883,7.024,884,7.024,885,7.024,1128,5.769,1904,3.469,3176,6.489,3661,7.064,4176,7.024,4520,7.838,4521,7.838,4522,7.838,4523,9.094,4524,9.094,4525,9.094,4526,7.838,4527,7.838]],["title/miscellaneous/enumerations.html",[4528,3.002,4529,5.495]],["body/miscellaneous/enumerations.html",[10,0.246,12,1.067,20,0.005,52,2.184,53,1.79,78,0.003,79,0.004,80,0.003,90,1.105,109,1.698,110,0.966,187,1.374,201,4.026,216,3.685,217,3.685,285,1.125,294,1.914,332,3.957,333,2.194,404,3.703,459,1.527,488,3.316,497,5.2,602,7.079,669,4.026,671,5.316,732,4.829,741,4.026,742,4.365,743,1.372,744,2.186,750,1.907,789,4.184,791,5.316,792,5.316,793,5.316,794,5.316,1017,5.572,1065,1.853,1182,2.533,1265,3.101,1450,3.957,1586,3.545,1610,2.691,1891,2.412,1905,3.119,1915,1.634,1918,2.963,1920,3.119,1923,3.119,1924,3.119,1926,3.119,1927,3.013,1957,3.263,2012,2.332,2090,4.026,2108,4.937,2109,5.115,2110,5.115,2111,4.937,2112,4.026,2113,4.026,2114,4.63,2870,5.147,2875,4.829,2876,4.829,2877,6.136,3120,6.539,3172,4.829,4528,4.365,4529,5.572,4530,8.106,4531,7.899,4532,8.187,4533,7.899,4534,7.899,4535,5.572,4536,6.217,4537,6.217,4538,5.572,4539,5.572,4540,7.781,4541,5.572,4542,5.572,4543,5.572,4544,8.187,4545,8.187,4546,7.899,4547,6.217,4548,7.899,4549,5.572,4550,6.217,4551,6.217,4552,5.572,4553,6.217]],["title/index.html",[10,0.169,963,3.321,4554,3.54]],["body/index.html",[5,0.298,12,1.016,20,0.005,28,0.318,32,2.893,78,0.003,79,0.004,80,0.003,83,1.687,90,1.156,91,4.928,92,4.695,112,1.496,134,2.428,154,2.21,187,1.163,259,3.647,289,1.328,314,1.806,417,2.21,429,5.993,432,4.044,435,3.92,477,2.949,482,1.883,503,3.43,552,3.135,642,1.91,766,3.944,772,4.18,795,1.496,830,3.43,849,5.993,865,5.536,963,6.423,1062,5.536,1065,1.993,1203,4.922,1403,5.536,1404,4.501,1510,4.18,1594,4.695,1813,5.993,1893,2.64,1898,3.544,1900,1.857,1970,2.551,1986,2.64,2022,3.154,2077,3.876,2094,4.707,2162,3.515,2282,4.922,2776,5.993,3172,5.195,3212,5.536,3443,5.195,3457,5.536,3532,5.993,3625,4.331,3659,6.607,3662,5.536,3663,5.536,3671,5.993,3695,5.993,3742,5.993,4156,5.195,4182,5.536,4220,5.993,4423,5.993,4554,6.845,4555,5.536,4556,6.687,4557,6.687,4558,5.993,4559,6.687,4560,6.687,4561,6.687,4562,6.687,4563,6.687,4564,6.687,4565,6.687,4566,6.687,4567,6.687,4568,6.687,4569,6.687,4570,6.687,4571,6.687,4572,6.687,4573,6.687,4574,5.993,4575,6.687,4576,6.687,4577,5.993,4578,6.687,4579,6.687,4580,8.269,4581,6.687,4582,5.993,4583,6.687,4584,5.993,4585,6.687,4586,5.993,4587,6.687,4588,6.687,4589,6.687,4590,6.687,4591,6.687,4592,6.687,4593,8.269,4594,6.687,4595,6.687,4596,6.687,4597,8.269,4598,6.687,4599,6.687,4600,6.687,4601,5.993,4602,5.536,4603,5.536,4604,5.993,4605,5.536]],["title/license.html",[963,3.321,4554,3.54,4606,3.832]],["body/license.html",[0,0.062,4,0.335,5,0.313,17,0.509,20,0.003,21,0.621,28,0.14,78,0.003,79,0.003,80,0.002,85,0.592,134,1.321,184,3.549,187,0.633,188,1.822,217,1.544,244,2.546,257,0.881,301,1.534,336,1.069,379,4.775,456,2.356,459,0.893,580,1.804,711,3.26,747,1.166,750,1.116,775,1.279,818,2.274,821,1.412,846,2.678,865,3.012,935,3.012,1063,2.428,1160,1.742,1230,2.448,1243,2.078,1367,1.388,1440,1.365,1510,5.427,1614,3.827,1631,1.365,1646,3.064,1662,3.26,1709,3.404,1775,3.26,1811,3.015,1857,2.862,1890,0.538,1896,2.862,1909,3.253,1960,1.985,1973,1.184,1978,1.436,1982,1.436,1984,2.469,2002,1.436,2014,1.412,2021,1.342,2022,1.388,2036,5.006,2047,1.67,2048,3.614,2052,4.916,2072,2.862,2077,2.553,2079,2.936,2085,3.015,2129,2.356,2143,4.08,2157,2.274,2164,2.248,2276,2.554,2277,2.678,2281,3.824,2543,2.678,2547,3.012,2548,3.012,2691,3.26,2773,3.26,3172,2.826,3176,3.012,3190,8.745,3265,3.26,3280,5.404,3443,7.95,3451,3.26,3500,2.678,3613,2.448,3616,4.009,3627,2.554,3785,3.26,3822,3.26,3838,3.26,3839,3.26,3845,6.495,3953,3.26,4003,5.85,4175,8.12,4182,3.012,4214,3.26,4222,3.26,4360,3.012,4552,3.26,4558,3.26,4574,5.85,4577,5.85,4582,5.85,4584,6.956,4586,3.26,4606,9.157,4607,7.248,4608,6.528,4609,3.638,4610,3.638,4611,3.638,4612,8.879,4613,9.4,4614,7.248,4615,7.761,4616,9.568,4617,9.042,4618,3.638,4619,3.638,4620,9.042,4621,9.298,4622,7.761,4623,5.446,4624,3.638,4625,7.761,4626,3.638,4627,3.638,4628,7.248,4629,3.638,4630,8.879,4631,7.248,4632,3.638,4633,6.528,4634,5.446,4635,3.638,4636,3.638,4637,5.446,4638,3.638,4639,5.446,4640,3.638,4641,3.638,4642,3.638,4643,3.638,4644,3.638,4645,3.638,4646,3.638,4647,3.638,4648,6.528,4649,5.446,4650,3.638,4651,3.638,4652,8.146,4653,5.446,4654,6.528,4655,6.528,4656,3.638,4657,3.26,4658,3.638,4659,3.638,4660,3.638,4661,3.638,4662,6.528,4663,5.446,4664,3.638,4665,8.879,4666,5.446,4667,3.638,4668,5.446,4669,9.758,4670,3.638,4671,3.638,4672,3.638,4673,3.638,4674,5.446,4675,3.638,4676,3.638,4677,3.638,4678,3.638,4679,7.248,4680,7.761,4681,3.638,4682,5.446,4683,7.248,4684,5.446,4685,3.638,4686,7.761,4687,5.446,4688,3.638,4689,3.638,4690,6.528,4691,3.638,4692,3.638,4693,3.638,4694,3.638,4695,5.446,4696,3.638,4697,3.638,4698,3.638,4699,6.528,4700,3.638,4701,3.638,4702,3.638,4703,3.638,4704,3.638,4705,7.248,4706,9.042,4707,3.638,4708,5.446,4709,6.528,4710,5.446,4711,5.446,4712,5.446,4713,6.528,4714,5.446,4715,6.528,4716,5.446,4717,5.446,4718,5.446,4719,5.446,4720,3.638,4721,5.446,4722,3.638,4723,7.761,4724,8.445,4725,5.446,4726,5.446,4727,5.446,4728,3.638,4729,5.446,4730,3.638,4731,3.638,4732,3.638,4733,6.528,4734,3.638,4735,3.638,4736,3.638,4737,5.446,4738,5.446,4739,3.638,4740,3.638,4741,3.638,4742,3.638,4743,3.638,4744,3.638,4745,5.446,4746,3.638,4747,3.638,4748,3.638,4749,3.638,4750,3.638,4751,3.638,4752,6.528,4753,3.638,4754,3.638,4755,6.528,4756,3.638,4757,3.638,4758,3.638,4759,3.638,4760,8.684,4761,3.638,4762,3.638,4763,3.638,4764,3.638,4765,7.248,4766,5.446,4767,3.638,4768,3.638,4769,3.638,4770,6.528,4771,3.638,4772,3.638,4773,5.446,4774,5.446,4775,3.638,4776,3.638,4777,3.638,4778,3.638,4779,5.446,4780,3.638,4781,3.638,4782,3.638,4783,3.638,4784,3.638,4785,3.638,4786,3.638,4787,3.638,4788,6.528,4789,7.248,4790,3.638,4791,3.638,4792,3.638,4793,3.638,4794,3.638,4795,3.638,4796,3.638,4797,3.638,4798,5.446,4799,3.638,4800,3.638,4801,5.446,4802,3.638,4803,3.638,4804,3.638,4805,3.638,4806,3.638,4807,7.248,4808,6.528,4809,6.528,4810,6.528,4811,5.446,4812,6.528,4813,5.446,4814,5.446,4815,5.446,4816,3.638,4817,3.638,4818,3.638,4819,3.638,4820,3.638,4821,3.638,4822,5.446,4823,3.638,4824,3.638,4825,3.638,4826,7.761,4827,3.638,4828,3.638,4829,3.638,4830,3.638,4831,3.638,4832,3.638,4833,3.638,4834,3.638,4835,7.761,4836,3.638,4837,3.638,4838,3.638,4839,3.638,4840,3.638,4841,3.638,4842,3.638,4843,3.638,4844,3.638,4845,3.638,4846,3.638,4847,3.638,4848,3.638,4849,3.638,4850,3.638,4851,6.528,4852,3.638,4853,3.638,4854,3.638,4855,3.26,4856,3.638,4857,5.446,4858,3.638,4859,3.638,4860,3.638,4861,3.638,4862,3.638,4863,3.638,4864,3.638,4865,3.638,4866,3.638,4867,3.638,4868,3.638,4869,3.638,4870,3.638,4871,3.638,4872,5.446,4873,5.446,4874,3.638,4875,3.638,4876,3.638,4877,3.638,4878,3.638,4879,1.462,4880,3.638,4881,3.638,4882,3.638,4883,3.638,4884,3.638,4885,3.638,4886,3.638,4887,3.638,4888,3.638,4889,3.638,4890,3.638,4891,3.638]],["title/modules.html",[3660,5.744]],["body/modules.html",[20,0.005,78,0.004,79,0.005,80,0.004,673,4.304,1845,7.34,3659,6.028,3660,6.78,4855,7.34,4892,8.19]],["title/overview.html",[4555,5.744]],["body/overview.html",[2,1.627,20,0.005,32,2.866,78,0.003,79,0.004,80,0.003,151,2.922,201,4.291,336,2.416,478,5.497,479,3.772,482,1.866,500,5.353,502,5.497,505,5.497,507,5.219,509,5.497,511,5.093,513,5.497,515,5.497,517,5.497,520,5.353,804,5.148,827,6.58,844,5.486,1890,0.98,2032,2.293,2543,4.877,2921,6.387,3170,5.486,3658,6.807,3659,7.843,3661,5.148,3662,5.486,3663,5.486,3664,5.939,3665,5.939,3666,5.939,3667,5.939,3668,6.944,4555,5.486,4893,6.626,4894,6.626]],["title/miscellaneous/typealiases.html",[4528,3.002,4895,6.131]],["body/miscellaneous/typealiases.html",[10,0.291,12,0.904,13,1.157,20,0.004,24,0.348,33,2.094,37,2.302,78,0.004,79,0.004,80,0.004,83,1.855,164,1.883,185,3.865,186,3.865,268,6.088,269,6.088,270,5.673,271,6.804,281,7.85,285,1.331,289,1.858,313,1.441,314,2.366,545,2.366,728,1.959,784,4.388,797,2.43,803,2.366,891,5.148,1630,6.088,1690,2.853,1691,7.85,1702,3.243,1891,2.853,1908,2.853,1909,2.545,1910,2.903,1911,2.903,1912,3.405,1938,2.223,2008,2.43,2025,2.853,2026,2.358,2027,2.903,2028,3.399,2033,4.071,2059,4.722,2063,3.064,2151,4.596,2160,4.762,2161,4.986,2162,3.865,4528,5.163,4530,8.465,4896,7.353,4897,6.59,4898,7.353]],["title/miscellaneous/variables.html",[4528,3.002,4899,5.495]],["body/miscellaneous/variables.html",[0,0.042,4,0.09,10,0.099,12,0.724,13,0.675,20,0.005,24,0.375,42,1.776,47,1.8,52,2.487,53,0.917,57,0.521,59,1.458,78,0.003,79,0.002,80,0.001,89,0.611,90,1.441,102,0.663,106,0.645,109,2.196,110,0.925,111,2.175,112,0.905,115,2.431,119,2.055,120,1.611,121,1.674,122,1.746,126,1.509,131,0.71,136,0.894,142,1.123,148,0.861,151,3.989,157,1.246,168,0.894,179,0.507,182,1.097,196,1.317,198,1.144,201,1.611,216,2.751,217,2.751,226,1.036,231,2.161,244,0.7,251,0.71,257,1.427,283,3.327,284,1.847,285,0.45,288,3.142,289,0.803,294,0.603,303,1.344,307,1.98,336,2.242,394,2.239,395,2.722,396,2.619,400,2.977,417,0.822,435,3.799,436,3.494,443,0.763,451,2.977,455,1.357,488,3.769,497,5.911,524,1.362,576,1.502,585,3.142,586,2.977,603,3.625,635,1.932,669,1.611,670,2.229,671,2.722,672,2.229,673,1.307,674,0.763,680,2.229,732,1.932,743,0.893,750,2.246,766,2.604,768,2.756,784,2.026,795,0.556,801,2.181,834,1.458,850,2.074,886,2.84,887,3.625,944,1.344,1019,1.246,1062,2.059,1084,2.229,1089,7.677,1091,6.713,1156,2.619,1178,3.971,1186,1.932,1196,3.142,1230,1.674,1278,3.441,1289,4.941,1367,0.949,1424,2.059,1439,2.059,1444,2.059,1445,2.059,1446,1.932,1447,3.349,1456,5.035,1498,1.218,1510,1.554,1610,0.847,1614,1.458,1630,2.059,1646,0.982,1665,4.292,1688,3.625,1689,3.349,1900,1.42,1915,0.654,1935,1.468,1938,1.546,1940,1.57,1941,0.949,1942,0.982,1943,0.982,1944,0.982,1948,0.809,1952,0.982,1955,0.982,1956,0.982,1957,1.445,1961,0.786,1974,1.597,2024,0.982,2030,1.317,2100,1.554,2115,1.611,2151,1.554,2152,2.255,2156,2.528,2157,1.554,2158,1.611,2159,2.619,2161,2.91,2176,1.554,2177,1.377,2190,2.619,2243,2.722,2245,2.722,2276,1.746,2285,1.83,2334,3.625,2335,3.625,2340,3.763,2341,3.625,2343,2.059,2364,1.83,2381,2.229,2404,2.059,2451,2.229,2649,2.059,2790,3.625,2801,2.229,2817,2.619,2821,2.977,2906,3.349,2907,3.349,3015,1.932,3165,3.349,3425,7.007,3429,3.625,3526,3.625,3613,1.674,3623,2.977,3625,2.619,3727,3.625,3735,1.932,3783,2.229,3792,4.582,3793,2.229,3794,2.229,3795,2.229,3796,3.625,3797,2.059,3798,2.229,3799,2.059,3800,2.229,3801,3.625,3802,2.229,3803,4.582,4036,3.625,4037,3.625,4092,2.059,4111,4.582,4113,4.582,4115,4.582,4128,6.061,4156,3.142,4175,2.059,4180,3.625,4181,2.229,4184,3.625,4213,3.625,4360,5.365,4363,3.625,4528,1.746,4530,4.876,4532,8.515,4535,2.229,4538,2.229,4539,2.229,4540,8.181,4541,4.582,4542,6.225,4543,4.582,4544,4.582,4545,4.582,4549,8.667,4657,2.229,4897,2.229,4899,2.229,4900,4.045,4901,7.63,4902,4.045,4903,4.045,4904,4.045,4905,4.045,4906,5.112,4907,4.045,4908,4.045,4909,5.112,4910,5.89,4911,5.112,4912,4.045,4913,4.045,4914,4.045,4915,4.045,4916,5.112,4917,5.89,4918,4.045,4919,4.045,4920,4.045,4921,5.112,4922,4.045,4923,2.487,4924,2.487,4925,2.487,4926,2.487,4927,2.487,4928,2.487,4929,2.487,4930,2.487,4931,2.487,4932,2.487,4933,2.487,4934,2.487,4935,2.487,4936,2.487,4937,2.487,4938,2.487,4939,2.487,4940,2.487,4941,2.487,4942,2.487,4943,2.487,4944,4.045,4945,2.487,4946,2.487,4947,6.481,4948,5.89,4949,2.487,4950,2.487,4951,2.487,4952,2.487,4953,7.321,4954,6.946,4955,6.946,4956,6.946,4957,6.946,4958,6.946,4959,6.946,4960,6.946,4961,5.112,4962,8.109,4963,2.487,4964,5.112,4965,4.045,4966,2.487,4967,2.487,4968,2.487,4969,5.89,4970,5.89,4971,2.487,4972,4.045,4973,2.487,4974,4.045,4975,4.045,4976,4.045,4977,6.481,4978,4.045,4979,4.045,4980,4.045,4981,4.045,4982,4.045,4983,4.045,4984,4.045,4985,5.89,4986,7.63,4987,2.487,4988,2.487,4989,8.85,4990,4.045,4991,4.045,4992,2.487,4993,4.045,4994,2.487,4995,4.045,4996,2.487,4997,2.487,4998,2.487,4999,2.487,5000,4.045,5001,5.89,5002,5.112,5003,4.045,5004,2.487,5005,4.045,5006,4.045,5007,2.487,5008,2.487,5009,5.112,5010,2.487,5011,2.487,5012,2.487,5013,2.487,5014,2.487,5015,2.487,5016,2.487,5017,2.487,5018,2.487,5019,2.487,5020,2.487,5021,2.487,5022,2.487,5023,4.045,5024,2.487,5025,2.487,5026,2.487,5027,2.487,5028,4.045,5029,2.487,5030,2.487,5031,2.487,5032,2.487,5033,2.487,5034,2.487,5035,2.487,5036,2.487,5037,5.89,5038,2.487,5039,2.487,5040,2.487,5041,2.487,5042,2.487,5043,2.487,5044,2.487,5045,2.487,5046,2.487,5047,2.487,5048,2.487,5049,4.045,5050,2.487,5051,2.487,5052,2.487,5053,2.487,5054,4.045,5055,2.487,5056,2.487,5057,2.487,5058,2.487,5059,2.487,5060,2.487,5061,4.045,5062,2.487,5063,2.487,5064,2.487,5065,2.487,5066,2.487]],["title/additional-documentation/layout.html",[2164,1.239,4601,3.832,4879,1.718]],["body/additional-documentation/layout.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types.html",[90,0.514,187,0.64,2164,1.066,4879,1.478]],["body/additional-documentation/chart-types.html",[20,0.005,78,0.004,79,0.005,80,0.004,89,1.994,90,1.136,154,2.684,187,1.413,259,4.093,417,2.684,432,4.911,503,4.165,1594,5.702,4602,6.723,4603,6.723]],["title/additional-documentation/chart-types/line.html",[154,1.413,2164,1.239,4879,1.718]],["body/additional-documentation/chart-types/line.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar.html",[259,1.886,2164,1.239,4879,1.718]],["body/additional-documentation/chart-types/bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/bucketed-bar.html",[259,1.622,2164,1.066,4602,3.046,4879,1.478]],["body/additional-documentation/chart-types/bar/bucketed-bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/status.html",[417,1.413,2164,1.239,4879,1.718]],["body/additional-documentation/chart-types/bar/status.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/waterfall.html",[2164,1.239,4603,3.54,4879,1.718]],["body/additional-documentation/chart-types/bar/waterfall.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/area.html",[89,1.05,2164,1.239,4879,1.718]],["body/additional-documentation/chart-types/area.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/pie-and-donut.html",[503,1.887,1594,2.583,2164,1.066,4879,1.478]],["body/additional-documentation/chart-types/pie-and-donut.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/spark.html",[432,2.585,2164,1.239,4879,1.718]],["body/additional-documentation/chart-types/spark.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins.html",[552,2.004,2164,1.239,4879,1.718]],["body/additional-documentation/plugins.html",[20,0.005,78,0.004,79,0.005,80,0.004,435,4.821,552,3.855,1203,6.054]],["title/additional-documentation/plugins/tooltips.html",[435,2.506,2164,1.239,4879,1.718]],["body/additional-documentation/plugins/tooltips.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins/popovers.html",[1203,3.147,2164,1.239,4879,1.718]],["body/additional-documentation/plugins/popovers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/thresholds.html",[2164,1.239,4156,3.321,4879,1.718]],["body/additional-documentation/thresholds.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/timeframe-selection.html",[314,0.994,2164,1.066,4604,3.297,4879,1.478]],["body/additional-documentation/timeframe-selection.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage.html",[772,2.299,2164,1.066,4605,3.046,4879,1.478]],["body/additional-documentation/advanced-usage.html",[12,0.995,20,0.005,78,0.004,79,0.005,80,0.004,83,2.043,90,1.132,289,1.608,482,2.281,772,5.062,795,1.812,830,4.154,1065,2.414,1900,2.249,1970,3.09,2162,4.256,3625,5.245,4605,6.705]],["title/additional-documentation/advanced-usage/chart.html",[90,0.598,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/chart.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/legend.html",[482,1.204,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/legend.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure.html",[830,1.887,1970,1.403,2164,1.066,4879,1.478]],["body/additional-documentation/advanced-usage/input-structure.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/data.html",[12,0.525,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/input-structure/data.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/colors.html",[1065,1.274,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/input-structure/colors.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/markers.html",[1900,1.187,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/input-structure/markers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/events.html",[795,0.956,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/events.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/grid.html",[83,1.079,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/grid.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales.html",[289,0.849,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/scales.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/domains.html",[2164,1.239,3625,2.769,4879,1.718]],["body/additional-documentation/advanced-usage/scales/domains.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/formatters.html",[2162,2.247,2164,1.239,4879,1.718]],["body/additional-documentation/advanced-usage/scales/formatters.html",[20,0.005,78,0.004,79,0.005,80,0.004]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["0",{"_index":119,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["0).append(\"tspan\").text",{"_index":2613,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0).classed(ignore_interaction_class",{"_index":2551,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["0.05",{"_index":4141,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["0.0722",{"_index":4115,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":2428,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["0.15",{"_index":1084,"title":{},"body":{"classes/ChartPalette.html":{},"miscellaneous/variables.html":{}}}],["0.2126",{"_index":4111,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.3",{"_index":5029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.5",{"_index":1689,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"miscellaneous/variables.html":{}}}],["0.7152",{"_index":4113,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0a4",{"_index":5008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0m",{"_index":5007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0x0001",{"_index":4457,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x002d",{"_index":4460,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0030",{"_index":4458,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0041",{"_index":4462,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x005f",{"_index":4461,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0061",{"_index":4463,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0080",{"_index":4459,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x3",{"_index":4441,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x8)).tostring(16",{"_index":4442,"title":{},"body":{"classes/UtilityService.html":{}}}],["0z",{"_index":5009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0zm",{"_index":4973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":336,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1).fill(0",{"_index":1612,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["1,1",{"_index":2121,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["1.0.0",{"_index":4525,"title":{},"body":{"dependencies.html":{}}}],["1.105",{"_index":4965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.105.895",{"_index":4966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.3.0",{"_index":4526,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":4520,"title":{},"body":{"dependencies.html":{}}}],["1.528",{"_index":5001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.572",{"_index":4983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.573",{"_index":4980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626.855",{"_index":4994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626zm0",{"_index":4998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.791",{"_index":4970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.854",{"_index":4999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.951",{"_index":4992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":201,"title":{},"body":{"classes/AxisConfig.html":{},"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/XYGridConfig.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":635,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["10px",{"_index":1006,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["11.7.0",{"_index":4522,"title":{},"body":{"dependencies.html":{}}}],["12.92",{"_index":4117,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["15",{"_index":4553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["16",{"_index":4439,"title":{},"body":{"classes/UtilityService.html":{}}}],["1].value",{"_index":1618,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["2",{"_index":151,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/UtilityService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2)).tostring",{"_index":3571,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["2,2",{"_index":2122,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["2.0",{"_index":4608,"title":{},"body":{"license.html":{}}}],["2.1.3",{"_index":4527,"title":{},"body":{"dependencies.html":{}}}],["2.121",{"_index":4986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.121zm0",{"_index":4987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.209",{"_index":4969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.237",{"_index":4993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.63",{"_index":4995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.766",{"_index":4996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.828",{"_index":4988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907",{"_index":5000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907z",{"_index":5004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":121,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"components/ChartMarkerComponent.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":2354,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["2004",{"_index":4610,"title":{},"body":{"license.html":{}}}],["2020",{"_index":4883,"title":{},"body":{"license.html":{}}}],["255",{"_index":4147,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["2c",{"_index":4968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c1.105",{"_index":4963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2zm0",{"_index":4967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1017,"title":{},"body":{"components/ChartMarkerComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3.145",{"_index":4982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146",{"_index":4981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146z",{"_index":4984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.354",{"_index":4979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.805",{"_index":5012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":122,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["3304",{"_index":1864,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["4",{"_index":4549,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["4.001",{"_index":4977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703",{"_index":5002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703z",{"_index":5013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.945",{"_index":5003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95",{"_index":4989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95z",{"_index":4990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4l8,0l0,8l",{"_index":5010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xxx",{"_index":4435,"title":{},"body":{"classes/UtilityService.html":{}}}],["4z",{"_index":4971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":120,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":4524,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":4642,"title":{},"body":{"license.html":{}}}],["5367",{"_index":4952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5753",{"_index":2837,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["69",{"_index":4893,"title":{},"body":{"overview.html":{}}}],["8",{"_index":3425,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["8,0l0",{"_index":5011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.001",{"_index":4976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["855",{"_index":4997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["895",{"_index":4964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8z",{"_index":4974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8zm0",{"_index":4978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":4618,"title":{},"body":{"license.html":{}}}],["900",{"_index":3092,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["901",{"_index":3024,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["96",{"_index":4894,"title":{},"body":{"overview.html":{}}}],["__",{"_index":4292,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__domaincalculatedwithticks",{"_index":2174,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["__side",{"_index":4354,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__thresholds",{"_index":4223,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["_active",{"_index":3398,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_approximateticks",{"_index":194,"title":{},"body":{"classes/AxisConfig.html":{}}}],["_backgroundcolors",{"_index":1082,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_bottomscaleid",{"_index":2360,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_config",{"_index":1711,"title":{},"body":{"classes/Grid.html":{}}}],["_d3scale",{"_index":3950,"title":{},"body":{"classes/Scale.html":{}}}],["_height",{"_index":1565,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["_index",{"_index":4027,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_interactive",{"_index":3399,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty",{"_index":3380,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionprimary",{"_index":3413,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionsecondary",{"_index":3414,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isnil",{"_index":3913,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.unitlabel",{"_index":3924,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.value",{"_index":3923,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_leftscaleid",{"_index":2361,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_rightscaleid",{"_index":2362,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["_scales",{"_index":1710,"title":{},"body":{"classes/Grid.html":{}}}],["_seriesid",{"_index":4020,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_seriesrenderstate",{"_index":3397,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_standardcolors",{"_index":1080,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_state",{"_index":4018,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_target",{"_index":1712,"title":{},"body":{"classes/Grid.html":{}}}],["_textcolors",{"_index":1081,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_width",{"_index":1564,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["a.element.attrs(axesstyles[a.scaleid",{"_index":2410,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a.scaleid",{"_index":2409,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["a?.iszoneedge",{"_index":4282,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["a?.x",{"_index":4280,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["above",{"_index":1230,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["absolute",{"_index":1511,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition",{"_index":3819,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.x",{"_index":3825,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.y",{"_index":3826,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absolutex0",{"_index":45,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutex1",{"_index":46,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey0",{"_index":50,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey1",{"_index":51,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absorb",{"_index":4572,"title":{},"body":{"index.html":{}}}],["abstract",{"_index":220,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/XYRenderer.html":{}}}],["acc",{"_index":2429,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acc[next.scaleid",{"_index":2425,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["accept",{"_index":1736,"title":{},"body":{"classes/Grid.html":{}}}],["acceptance",{"_index":4854,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":4851,"title":{},"body":{"license.html":{}}}],["access",{"_index":1326,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["accessing",{"_index":3179,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["accessor",{"_index":245,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["accessor(d",{"_index":3891,"title":{},"body":{"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["accessor(datapoint",{"_index":4409,"title":{},"body":{"classes/UtilityService.html":{}}}],["accessor(series.data[nearestindex",{"_index":376,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["accessor(zone.data[0",{"_index":4299,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors",{"_index":164,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPalette.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["accessors.data.active(dataseries.data[0",{"_index":2850,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.data.color",{"_index":4248,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.end",{"_index":4247,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.start",{"_index":4245,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.thickness",{"_index":4241,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.y",{"_index":4312,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.activecolor",{"_index":2854,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.color",{"_index":4313,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.end(dataseries.id",{"_index":2860,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.inactivecolor",{"_index":2853,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.start(dataseries.id",{"_index":2859,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.ts",{"_index":7,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{}}}],["accessors.ts:10",{"_index":2897,"title":{},"body":{"interfaces/IXYDataAccessors.html":{}}}],["accessors.ts:11",{"_index":3582,"title":{},"body":{"classes/NoopAccessors.html":{}}}],["accessors.ts:12",{"_index":2300,"title":{},"body":{"interfaces/IRadialSeriesAccessors.html":{},"classes/NoopAccessors.html":{}}}],["accessors.ts:15",{"_index":4089,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:16",{"_index":2289,"title":{},"body":{"interfaces/ILineSeriesAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:18",{"_index":2898,"title":{},"body":{"interfaces/IXYSeriesAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:22",{"_index":208,"title":{},"body":{"classes/BarAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:23",{"_index":206,"title":{},"body":{"classes/BarAccessors.html":{},"classes/RadialAccessors.html":{}}}],["accessors.ts:24",{"_index":3760,"title":{},"body":{"classes/RadialAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:28",{"_index":26,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:29",{"_index":18,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:30",{"_index":4483,"title":{},"body":{"classes/XYAccessors.html":{}}}],["accessors.ts:34",{"_index":3843,"title":{},"body":{"classes/RectangleAccessors.html":{},"classes/XYAccessors.html":{}}}],["accessors.ts:35",{"_index":3842,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:37",{"_index":3419,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:38",{"_index":3417,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:40",{"_index":3418,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:6",{"_index":2299,"title":{},"body":{"interfaces/IRadialDataAccessors.html":{}}}],["accessors.ts:7",{"_index":1874,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors.ts:8",{"_index":1873,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/noop",{"_index":3635,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["accessors/rectangle",{"_index":214,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/xy",{"_index":2269,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["accessorsuffix",{"_index":350,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["accommodate",{"_index":2793,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["accommodating",{"_index":1761,"title":{},"body":{"classes/Grid.html":{}}}],["accordingly",{"_index":2746,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["acquired",{"_index":2275,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["act",{"_index":4586,"title":{},"body":{"index.html":{},"license.html":{}}}],["acting",{"_index":4627,"title":{},"body":{"license.html":{}}}],["actions",{"_index":3264,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["active",{"_index":2824,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["active(active",{"_index":3383,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["activechanged",{"_index":3111,"title":{},"body":{"components/LegendComponent.html":{}}}],["activecolor",{"_index":2825,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["acts",{"_index":4833,"title":{},"body":{"license.html":{}}}],["actual",{"_index":1163,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["actual_component",{"_index":522,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["actually",{"_index":4268,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["actualtextelements",{"_index":2632,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["actualtextelements.push(this",{"_index":2635,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["add",{"_index":2077,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":1862,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["addendum",{"_index":4781,"title":{},"body":{"license.html":{}}}],["additional",{"_index":2164,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/XYAccessors.html":{},"license.html":{}}}],["additions",{"_index":4681,"title":{},"body":{"license.html":{}}}],["addlimitentry(accessor",{"_index":4298,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.end",{"_index":4306,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.start",{"_index":4305,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addplugin",{"_index":527,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["addplugin(plugin",{"_index":547,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["addplugins",{"_index":528,"title":{},"body":{"classes/Chart.html":{}}}],["addplugins(...plugins",{"_index":550,"title":{},"body":{"classes/Chart.html":{}}}],["adjust",{"_index":2745,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjustaxisticks(labelgroup",{"_index":2527,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["adjusted",{"_index":715,"title":{},"body":{"classes/Chart.html":{}}}],["adjustedindex",{"_index":3185,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["adjustment",{"_index":2998,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["adjustments",{"_index":1826,"title":{},"body":{"classes/Grid.html":{}}}],["adjustrenderingarea",{"_index":1784,"title":{},"body":{"classes/Grid.html":{}}}],["adjusts",{"_index":1783,"title":{},"body":{"classes/Grid.html":{}}}],["advanced",{"_index":4605,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["advised",{"_index":4849,"title":{},"body":{"license.html":{}}}],["aftercontentinit",{"_index":862,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterviewinit",{"_index":823,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterwards",{"_index":1779,"title":{},"body":{"classes/Grid.html":{}}}],["again",{"_index":3266,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["against",{"_index":4738,"title":{},"body":{"license.html":{}}}],["agree",{"_index":4862,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":4810,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":4796,"title":{},"body":{"license.html":{}}}],["aids",{"_index":771,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["algorithm",{"_index":1369,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["alias",{"_index":1690,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":4896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":1458,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["alignment",{"_index":1835,"title":{},"body":{"classes/Grid.html":{}}}],["allaxislabels",{"_index":2538,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["allaxislabels.foreach((group",{"_index":2540,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["alleging",{"_index":4742,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1979,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/XYRenderer.html":{}}}],["allowedrange",{"_index":3071,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["allows",{"_index":2961,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["alone",{"_index":4734,"title":{},"body":{"license.html":{}}}],["along",{"_index":4771,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":4780,"title":{},"body":{"license.html":{}}}],["alphadecay(0.3",{"_index":1413,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["already",{"_index":3499,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["alternately",{"_index":2779,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["always",{"_index":929,"title":{},"body":{"components/ChartComponent.html":{}}}],["anchor",{"_index":3065,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["and(b",{"_index":4756,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":4762,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":4767,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":4214,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["angle",{"_index":3828,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["angular",{"_index":835,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["angular.json",{"_index":4583,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1284,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["angular/cdk/overlay",{"_index":1438,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["angular/core",{"_index":496,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["angular/localize/init",{"_index":3678,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["animate",{"_index":1282,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animate(300",{"_index":1290,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animations",{"_index":1286,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["annotations",{"_index":4672,"title":{},"body":{"license.html":{}}}],["annular",{"_index":1947,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["annulargrowth",{"_index":1944,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularpadding",{"_index":1943,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularwidth",{"_index":1942,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["any).bandwidth",{"_index":2583,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).getbbox",{"_index":3057,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["any).getboundingclientrect().width",{"_index":2766,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any).innerhtml",{"_index":2768,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["any)[measuretype",{"_index":2699,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["anything",{"_index":4568,"title":{},"body":{"index.html":{}}}],["apache",{"_index":4607,"title":{},"body":{"license.html":{}}}],["api",{"_index":3,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["apis",{"_index":1983,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["app's",{"_index":4573,"title":{},"body":{"index.html":{}}}],["appear",{"_index":4776,"title":{},"body":{"license.html":{}}}],["appearance",{"_index":672,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["append",{"_index":1810,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"fecolormatrix",{"_index":678,"title":{},"body":{"classes/Chart.html":{}}}],["append(\"line",{"_index":3104,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["append(\"rect",{"_index":1802,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"svg",{"_index":632,"title":{},"body":{"classes/Chart.html":{}}}],["appendix",{"_index":4668,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":4808,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1643,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["applies",{"_index":4728,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1811,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["applying",{"_index":670,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":3953,"title":{},"body":{"classes/Scale.html":{},"license.html":{}}}],["appropriateness",{"_index":4821,"title":{},"body":{"license.html":{}}}],["approximate",{"_index":2071,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks",{"_index":165,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks(ticks",{"_index":199,"title":{},"body":{"classes/AxisConfig.html":{}}}],["arbitrary",{"_index":1968,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["arc",{"_index":3734,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arc.outerradius(range[1",{"_index":3737,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arcdata",{"_index":1598,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcdata[i",{"_index":1616,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["architect",{"_index":4591,"title":{},"body":{"index.html":{}}}],["archives",{"_index":4882,"title":{},"body":{"license.html":{}}}],["arcs",{"_index":1608,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers",{"_index":1603,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["arcsformarkers.foreach((arcdatum",{"_index":1605,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["area",{"_index":89,"title":{"additional-documentation/chart-types/area.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["area's",{"_index":2968,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["areaaccessors",{"_index":1,"title":{"classes/AreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.end",{"_index":4287,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.start",{"_index":4285,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.series.color",{"_index":4289,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaclass",{"_index":2091,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areagridconfig",{"_index":81,"title":{"classes/AreaGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{}}}],["areas",{"_index":2095,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areasize",{"_index":987,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["arelabelupdatesenabled",{"_index":3010,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["args",{"_index":2061,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["argument",{"_index":928,"title":{},"body":{"components/ChartComponent.html":{},"classes/UtilityService.html":{}}}],["arguments.length",{"_index":4448,"title":{},"body":{"classes/UtilityService.html":{}}}],["arising",{"_index":4839,"title":{},"body":{"license.html":{}}}],["around",{"_index":3457,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{},"index.html":{}}}],["arr",{"_index":2663,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Renderer.html":{}}}],["arr.indexof(element",{"_index":2671,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arr.push(next",{"_index":2668,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array",{"_index":368,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{}}}],["array(data.length",{"_index":1611,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["array.from(arr",{"_index":3886,"title":{},"body":{"classes/Renderer.html":{}}}],["array.length",{"_index":2701,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.map((tick",{"_index":2703,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["array.reduce((prev",{"_index":2697,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions",{"_index":2707,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["arrayofpositions.reduce((p",{"_index":2714,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["aside",{"_index":1449,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["aspects",{"_index":2034,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["asserted",{"_index":4868,"title":{},"body":{"license.html":{}}}],["asserting",{"_index":1731,"title":{},"body":{"classes/Grid.html":{}}}],["assign",{"_index":4025,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assigned",{"_index":3702,"title":{},"body":{"classes/PathMarker.html":{},"injectables/ThresholdsService.html":{}}}],["assist",{"_index":744,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["assist's",{"_index":763,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["assist.ts",{"_index":3139,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["assist.ts:100",{"_index":4016,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:28",{"_index":4014,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:30",{"_index":4004,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:32",{"_index":4002,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:320",{"_index":3148,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:325",{"_index":3160,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:34",{"_index":4007,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:341",{"_index":3151,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:345",{"_index":3153,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:36",{"_index":4001,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:370",{"_index":3156,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:38",{"_index":4012,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:384",{"_index":3159,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:39",{"_index":4013,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:394",{"_index":3150,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:40",{"_index":4011,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:400",{"_index":3154,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:41",{"_index":4009,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:55",{"_index":4028,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:65",{"_index":4031,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:84",{"_index":4015,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:92",{"_index":4022,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:96",{"_index":4019,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assistant",{"_index":770,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assists/chart",{"_index":3138,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assists/spark",{"_index":3992,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assists/types.ts",{"_index":742,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"miscellaneous/enumerations.html":{}}}],["assists/types.ts:23",{"_index":2219,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:34",{"_index":2217,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:39",{"_index":2218,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:58",{"_index":754,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:59",{"_index":757,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:60",{"_index":756,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:61",{"_index":755,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:62",{"_index":758,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:65",{"_index":760,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["associated",{"_index":775,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["association",{"_index":764,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["assume",{"_index":4823,"title":{},"body":{"license.html":{}}}],["attach",{"_index":4870,"title":{},"body":{"license.html":{}}}],["attached",{"_index":4667,"title":{},"body":{"license.html":{}}}],["attempts",{"_index":2778,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["attr",{"_index":730,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/PathMarker.html":{}}}],["attr(\"class",{"_index":1816,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"id",{"_index":676,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["attr(\"stroke",{"_index":2979,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"transform",{"_index":2499,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["attr(\"type",{"_index":679,"title":{},"body":{"classes/Chart.html":{}}}],["attr(\"values",{"_index":681,"title":{},"body":{"classes/Chart.html":{}}}],["attribute",{"_index":3703,"title":{},"body":{"classes/PathMarker.html":{}}}],["attributes",{"_index":1839,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["attribution",{"_index":4765,"title":{},"body":{"license.html":{}}}],["attrs",{"_index":633,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["attrs(attrs",{"_index":3106,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["attrs[attr",{"_index":3716,"title":{},"body":{"classes/PathMarker.html":{}}}],["authorized",{"_index":4623,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":4662,"title":{},"body":{"license.html":{}}}],["autoheight",{"_index":1540,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["automatically",{"_index":1948,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["automaticdomain",{"_index":5048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowidth",{"_index":1541,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["available",{"_index":2691,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["avoid",{"_index":627,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/XYGridConfig.html":{}}}],["avoidance",{"_index":1368,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["avoidtooltipcollisions",{"_index":1370,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["away",{"_index":1445,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["axes",{"_index":2025,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["axes.reduce((acc",{"_index":2430,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axes_style_change",{"_index":4925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axes_style_change_event",{"_index":2334,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axesstyles",{"_index":2400,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis",{"_index":95,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{}}}],["axis.bottom.fit",{"_index":2735,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticklabel.overflowhandler",{"_index":2738,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.ticksize",{"_index":2493,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.bottom.visible",{"_index":2736,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup",{"_index":2449,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.labelgroup.selectall(\"*\").remove",{"_index":2459,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left",{"_index":2511,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.fit",{"_index":2723,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.padding",{"_index":2507,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.ticksize",{"_index":2506,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.left.visible",{"_index":2724,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.fit",{"_index":2728,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.padding",{"_index":2516,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.right.ticksize",{"_index":2517,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(leftgridlines",{"_index":2469,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.call(tickaxis",{"_index":2457,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axis.tickgroup.selectall(\"*\").remove",{"_index":2460,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisbottom",{"_index":2326,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig",{"_index":113,"title":{"classes/AxisConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/XYGridConfig.html":{}}}],["axisconfig.bottom.ticklabel.horizontalpadding",{"_index":2587,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.maxwidth",{"_index":2581,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.bottom.ticklabel.overflowhandler",{"_index":2564,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.fit",{"_index":2596,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.padding",{"_index":2599,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.horizontalpadding",{"_index":2602,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.maxwidth",{"_index":2579,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticklabel.overflowhandler",{"_index":2603,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.left.ticksize",{"_index":2600,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.fit",{"_index":2588,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.padding",{"_index":2591,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.horizontalpadding",{"_index":2594,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.maxwidth",{"_index":2577,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticklabel.overflowhandler",{"_index":2595,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisconfig.right.ticksize",{"_index":2592,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator",{"_index":2381,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["axisgenerator(clonedscale.d3scale",{"_index":5058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axisgenerator(scale.copytolinear().d3scale",{"_index":2452,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgenerator(scale.d3scale",{"_index":2445,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisgroup.selectall(\"g:not(.tick",{"_index":2633,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels",{"_index":2561,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axislabels.foreach((group",{"_index":2621,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisleft",{"_index":2327,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisright",{"_index":2328,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisscale",{"_index":2155,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["axistop",{"_index":2329,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisx",{"_index":2355,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyleft",{"_index":2356,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["axisyright",{"_index":2357,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["b",{"_index":2987,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["b?.iszoneedge",{"_index":4283,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["b?.x",{"_index":4281,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["back",{"_index":3824,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["background",{"_index":2111,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/enumerations.html":{}}}],["backgroundcolor",{"_index":3903,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["backgroundcolors",{"_index":1058,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["backgrounddata",{"_index":4259,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["backgroundopacity",{"_index":1083,"title":{},"body":{"classes/ChartPalette.html":{}}}],["band",{"_index":288,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["band_center",{"_index":4900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bandscale",{"_index":2338,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bandwidth",{"_index":2153,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["bar",{"_index":259,"title":{"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["bar/bar",{"_index":2104,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["baraccessors",{"_index":202,"title":{"classes/BarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors.data.status",{"_index":2887,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["baraccessors:22",{"_index":1875,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:23",{"_index":1876,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:34",{"_index":1877,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:35",{"_index":1878,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["barclass",{"_index":2140,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bargridconfig",{"_index":255,"title":{"classes/BarGridConfig.html":{}},"body":{"classes/BarGridConfig.html":{}}}],["barhighlightstrategy",{"_index":267,"title":{"classes/BarHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barhorizontalgridconfig",{"_index":403,"title":{"classes/BarHorizontalGridConfig.html":{}},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["barrenderer",{"_index":297,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["barrenderer(rendererconfig",{"_index":4256,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["barrenderer.min_bar_thickness",{"_index":2147,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bars",{"_index":2139,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barserieshighlightstrategy",{"_index":409,"title":{"classes/BarSeriesHighlightStrategy.html":{}},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["barstatusgridconfig",{"_index":416,"title":{"classes/BarStatusGridConfig.html":{}},"body":{"classes/BarStatusGridConfig.html":{}}}],["barstylesfn",{"_index":386,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["bartooltipsplugin",{"_index":433,"title":{"classes/BarTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{}}}],["base",{"_index":2272,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["based",{"_index":1367,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["basetype",{"_index":2037,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["basic",{"_index":489,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["basiclegendtilecomponent",{"_index":478,"title":{"components/BasicLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["basics",{"_index":983,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[0",{"_index":986,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[1",{"_index":989,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basis",{"_index":4811,"title":{},"body":{"license.html":{}}}],["bbox",{"_index":1481,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Renderer.html":{}}}],["bbox.height",{"_index":3068,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.left",{"_index":1486,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.top",{"_index":1488,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.width",{"_index":3070,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.y",{"_index":3063,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bc",{"_index":4114,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["before",{"_index":1382,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["behalf",{"_index":4686,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":811,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["behaviorsubject",{"_index":582,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{}}}],["being",{"_index":1021,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["belong",{"_index":1346,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["below",{"_index":4182,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["beneficial",{"_index":4646,"title":{},"body":{"license.html":{}}}],["between",{"_index":765,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["beyond",{"_index":1763,"title":{},"body":{"classes/Grid.html":{}}}],["bg",{"_index":4542,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bigger",{"_index":2690,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["binary",{"_index":4388,"title":{},"body":{"classes/UtilityService.html":{}}}],["bind",{"_index":4678,"title":{},"body":{"license.html":{}}}],["bisect",{"_index":4421,"title":{},"body":{"classes/UtilityService.html":{}}}],["black",{"_index":1092,"title":{},"body":{"classes/ChartPalette.html":{}}}],["block",{"_index":3133,"title":{},"body":{"components/LegendComponent.html":{}}}],["boilerplate",{"_index":4871,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":145,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["booleans",{"_index":2042,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["bootstrap",{"_index":3170,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["border",{"_index":155,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["border.node",{"_index":1822,"title":{},"body":{"classes/Grid.html":{}}}],["border.style(\"stroke",{"_index":1820,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfig",{"_index":4486,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfig(\"nui",{"_index":4491,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfigs",{"_index":1770,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfigs[side",{"_index":1780,"title":{},"body":{"classes/Grid.html":{}}}],["borderkey",{"_index":1691,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{}}}],["borderkeys",{"_index":1771,"title":{},"body":{"classes/Grid.html":{}}}],["bordermidpoint",{"_index":1688,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/variables.html":{}}}],["borders",{"_index":101,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["borders[side",{"_index":1781,"title":{},"body":{"classes/Grid.html":{}}}],["both",{"_index":2138,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["bottom",{"_index":115,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["bottomlabelaxis",{"_index":2444,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale",{"_index":2732,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscale?.iscontinuous",{"_index":2737,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid",{"_index":2367,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["bottomscaleid(id",{"_index":2370,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["boundaries",{"_index":2099,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["boundary",{"_index":2876,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["bounds",{"_index":1922,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["brackets",{"_index":4873,"title":{},"body":{"license.html":{}}}],["break",{"_index":2688,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["breaking",{"_index":2078,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["breakpoints",{"_index":4260,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["broadcast",{"_index":2005,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["broadcasted",{"_index":820,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["browse",{"_index":4892,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1845,"title":{},"body":{"classes/Grid.html":{},"modules.html":{}}}],["brush",{"_index":2905,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushbehavior",{"_index":2902,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushelement",{"_index":2923,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushend",{"_index":2989,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushmove",{"_index":2985,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushselection",{"_index":2903,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstart",{"_index":2981,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstartx",{"_index":2924,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushx",{"_index":2904,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["bsrgb",{"_index":4150,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["bucketed",{"_index":4602,"title":{"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["bug",{"_index":2913,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["build",{"_index":529,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["build(element",{"_index":553,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["buildaxes(container",{"_index":2644,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["buildborders(container",{"_index":1768,"title":{},"body":{"classes/Grid.html":{}}}],["builddatamanager",{"_index":683,"title":{},"body":{"classes/Chart.html":{}}}],["buildgrid",{"_index":684,"title":{},"body":{"classes/Chart.html":{}}}],["buildinteractionlabel(target",{"_index":3080,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["buildplugins",{"_index":1638,"title":{},"body":{"classes/Grid.html":{},"interfaces/IGrid.html":{}}}],["buildplugins(chart",{"_index":1660,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["buildrenderengine(lasagna",{"_index":688,"title":{},"body":{"classes/Chart.html":{}}}],["buildrenderingarea(clippathid",{"_index":1799,"title":{},"body":{"classes/Grid.html":{}}}],["builds",{"_index":1766,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["built",{"_index":3067,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bus",{"_index":591,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["bus.ts",{"_index":1620,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:15",{"_index":1622,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:8",{"_index":1624,"title":{},"body":{"classes/EventBus.html":{}}}],["buses",{"_index":822,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["bynens",{"_index":4446,"title":{},"body":{"classes/UtilityService.html":{}}}],["c",{"_index":1096,"title":{},"body":{"classes/ChartPalette.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["calculate",{"_index":1498,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["calculateaxesstyles(e",{"_index":2411,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculated",{"_index":451,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["calculatedbottomwidth",{"_index":2582,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedleftwidth",{"_index":2597,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculatedrightwidth",{"_index":2589,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["calculates",{"_index":957,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["calculating",{"_index":1142,"title":{},"body":{"components/ChartPopoverComponent.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["calculation",{"_index":2742,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["calculation/automatic",{"_index":2343,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/Scale.html":{},"miscellaneous/variables.html":{}}}],["calculations",{"_index":1939,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["calculator",{"_index":2160,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["call",{"_index":2787,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["call(bottomlabelaxis",{"_index":2450,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["callbackfn(result",{"_index":4476,"title":{},"body":{"classes/UtilityService.html":{}}}],["called",{"_index":3282,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["caps",{"_index":2117,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["capture",{"_index":2956,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["carry",{"_index":4758,"title":{},"body":{"license.html":{}}}],["case",{"_index":2775,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["catch",{"_index":378,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["category",{"_index":215,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cause",{"_index":2281,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["causing",{"_index":2782,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cd",{"_index":873,"title":{},"body":{"components/ChartComponent.html":{}}}],["center",{"_index":1456,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["certain",{"_index":1989,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["change",{"_index":2026,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2773,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"license.html":{}}}],["changedetection",{"_index":1276,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy",{"_index":1285,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1277,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetector",{"_index":1000,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectorref",{"_index":874,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changes",{"_index":926,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes.plugin",{"_index":949,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["changes.plugin.isfirstchange",{"_index":1130,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["changes[\"active",{"_index":3134,"title":{},"body":{"components/LegendComponent.html":{}}}],["changes[\"chart",{"_index":898,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"chart\"].previousvalue",{"_index":900,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"color",{"_index":1026,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"marker",{"_index":1025,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"plugin",{"_index":1332,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["changes[\"plugin\"].currentvalue",{"_index":1333,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["character",{"_index":4838,"title":{},"body":{"license.html":{}}}],["charge",{"_index":4715,"title":{},"body":{"license.html":{}}}],["chart",{"_index":90,"title":{"classes/Chart.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage/chart.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage.html":{}}}],["chart's",{"_index":713,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chart'},{'name",{"_index":501,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["chart(grid",{"_index":4068,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(labelplugin",{"_index":4085,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(new",{"_index":4071,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.getgrid().config(lastspark",{"_index":4080,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.hasplugin(interactionlabelplugin",{"_index":4083,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.removeplugin(interactionlabelplugin",{"_index":4087,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.updatedimensions",{"_index":4081,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart/chart.component",{"_index":3688,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["chart_component",{"_index":814,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{}}}],["chart_markers",{"_index":4036,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs1",{"_index":4037,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs2",{"_index":4904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs3",{"_index":4905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s",{"_index":4902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s_extended",{"_index":4903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status",{"_index":4926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status_event",{"_index":886,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["chartassist",{"_index":3147,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.chartassistsubject.pipe",{"_index":3274,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassist.getlabel(chartseries",{"_index":3260,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.getvisibleserieswithlegend",{"_index":3272,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype",{"_index":791,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["chartassisteventtype.emphasizeseries",{"_index":3203,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.resetvisibleseries",{"_index":3205,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.toggleseries",{"_index":3207,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata",{"_index":740,"title":{"classes/ChartAssistRenderStateData.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(series.id",{"_index":3310,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(seriesid",{"_index":3334,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistseriesdefaults",{"_index":3168,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistsubject",{"_index":3191,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartcollection",{"_index":856,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectionid",{"_index":852,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectioniddirective",{"_index":520,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartcollectionservice",{"_index":827,"title":{"injectables/ChartCollectionService.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["chartcomponent",{"_index":500,"title":{"components/ChartComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentcomponent",{"_index":502,"title":{"components/ChartDonutContentComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentplugin",{"_index":939,"title":{"classes/ChartDonutContentPlugin.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["chartelement",{"_index":1228,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.getboundingclientrect",{"_index":1482,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsetheight",{"_index":1247,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["chartelement.offsetleft",{"_index":1237,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.offsetparent.getboundingclientrect",{"_index":1484,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsettop",{"_index":1239,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartevent.broadcast",{"_index":2942,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartevent.data",{"_index":2944,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartindex",{"_index":2007,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chartmarker",{"_index":3699,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["chartmarkercomponent",{"_index":505,"title":{"components/ChartMarkerComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpalette",{"_index":1053,"title":{"classes/ChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SparkChartAssist.html":{}}}],["chartpalette(chart_palette_cs1",{"_index":4010,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartplugin",{"_index":465,"title":{"classes/ChartPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:11",{"_index":473,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:13",{"_index":474,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:15",{"_index":471,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:7",{"_index":466,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:9",{"_index":472,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartpopovercomponent",{"_index":507,"title":{"components/ChartPopoverComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpopoverplugin",{"_index":1117,"title":{"classes/ChartPopoverPlugin.html":{}},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:11",{"_index":3775,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:13",{"_index":3776,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:15",{"_index":3773,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:28",{"_index":3765,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:30",{"_index":3769,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:32",{"_index":3767,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:34",{"_index":3763,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:36",{"_index":3768,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:43",{"_index":3766,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:51",{"_index":3764,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:56",{"_index":3772,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:68",{"_index":3771,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:7",{"_index":3770,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:9",{"_index":3774,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartposition",{"_index":1485,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["chartposition.x",{"_index":1516,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartposition.y",{"_index":1518,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["charts",{"_index":766,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chartseries",{"_index":781,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["chartseries.accessors.data?.[dataaccessorkey",{"_index":3184,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data.length",{"_index":3182,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data[chartseries.data.length",{"_index":3230,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.id",{"_index":4049,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartseries.renderer",{"_index":3806,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseries.scales.r",{"_index":3808,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseriesset",{"_index":768,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chartseriesset.map(cs",{"_index":5035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charttooltipcomponent",{"_index":509,"title":{"components/ChartTooltipComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipdirective",{"_index":1321,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["charttooltipscomponent",{"_index":511,"title":{"components/ChartTooltipsComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipsplugin",{"_index":437,"title":{"classes/ChartTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:11",{"_index":3790,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:126",{"_index":467,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:13",{"_index":3791,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:131",{"_index":470,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:15",{"_index":3788,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:63",{"_index":454,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:65",{"_index":450,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:7",{"_index":3787,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:70",{"_index":462,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:75",{"_index":457,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:88",{"_index":461,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:9",{"_index":3789,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:98",{"_index":468,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["check",{"_index":1532,"title":{},"body":{"classes/DataSeries.html":{}}}],["child",{"_index":2764,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["children",{"_index":2916,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["choose",{"_index":4852,"title":{},"body":{"license.html":{}}}],["circle",{"_index":3792,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":4739,"title":{},"body":{"license.html":{}}}],["claims",{"_index":4729,"title":{},"body":{"license.html":{}}}],["clampedx",{"_index":3074,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["clamps",{"_index":4378,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange",{"_index":4369,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange(value",{"_index":4376,"title":{},"body":{"classes/UtilityService.html":{}}}],["class",{"_index":0,"title":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["class.inverse",{"_index":3348,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["class.nui",{"_index":3925,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["classed(\"hidden",{"_index":1837,"title":{},"body":{"classes/Grid.html":{}}}],["classed(\"interaction",{"_index":3436,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classed(\"nui",{"_index":2465,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(\"sw",{"_index":2648,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["classed(`${classname}${getpointereventsclass()}${getpointereventsclickclass",{"_index":3552,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["classed(`pointer",{"_index":3437,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["classname",{"_index":2055,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{}}}],["classref",{"_index":564,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["classrefs",{"_index":570,"title":{},"body":{"classes/Chart.html":{}}}],["cleanup",{"_index":2003,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["cleartimeout(this.closetimeout",{"_index":1363,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.collisiontimeout",{"_index":1357,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2618,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["cleartimeout(this.opentimeout",{"_index":1354,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.reconcilemarginsdebounce",{"_index":2796,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["click",{"_index":1918,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"miscellaneous/enumerations.html":{}}}],["clickable",{"_index":2115,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["clicked",{"_index":1917,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["clientrect",{"_index":1040,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.height",{"_index":1046,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.width",{"_index":1045,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.x",{"_index":1043,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.y",{"_index":1044,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clip",{"_index":1652,"title":{},"body":{"classes/Grid.html":{}}}],["clippathid",{"_index":1728,"title":{},"body":{"classes/Grid.html":{}}}],["clipped",{"_index":1747,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["clockwise",{"_index":3800,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":2330,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clone(this._config.dimension.margin",{"_index":2639,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["clonedeep",{"_index":4032,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["clonedeep(scale",{"_index":5056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clonedeep(sourceseries.data",{"_index":4244,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(sparks",{"_index":4052,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config",{"_index":4188,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config.statestyles",{"_index":4315,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedscale",{"_index":5055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["close",{"_index":1175,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closepending",{"_index":1328,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closepopoversubject",{"_index":1165,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closest",{"_index":4195,"title":{},"body":{"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["closestdataindex",{"_index":4418,"title":{},"body":{"classes/UtilityService.html":{}}}],["closetimeout",{"_index":1331,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closetooltips",{"_index":1295,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["clr",{"_index":3753,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["cluster_nuichartsmodule",{"_index":3664,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_declarations",{"_index":3665,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_exports",{"_index":3667,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_providers",{"_index":3666,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["code",{"_index":4574,"title":{},"body":{"index.html":{},"license.html":{}}}],["codeunit",{"_index":4454,"title":{},"body":{"classes/UtilityService.html":{}}}],["collection",{"_index":807,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["collection.service",{"_index":831,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"modules/NuiChartsModule.html":{}}}],["collection.service.ts",{"_index":845,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection.service.ts:14",{"_index":855,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection/chart",{"_index":806,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{}}}],["collectionid",{"_index":839,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{}}}],["collections",{"_index":848,"title":{},"body":{"injectables/ChartCollectionService.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["collision",{"_index":1244,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["collisionforce",{"_index":1407,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["collisiontimeout",{"_index":1330,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["color",{"_index":52,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYSeriesAccessors.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/XYAccessors.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["color.helper",{"_index":1074,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["color1",{"_index":4131,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["color2",{"_index":4132,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["coloraccessor",{"_index":2852,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["coloraccessor(dataseries.id",{"_index":2857,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["colordefinitions",{"_index":4106,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.dark",{"_index":4126,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.light",{"_index":4127,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colorprovider",{"_index":23,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["colorprovider.get(d.__thresholds.status",{"_index":4251,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colorprovider.get(series.value",{"_index":4290,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colors",{"_index":1065,"title":{"additional-documentation/advanced-usage/input-structure/colors.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["column",{"_index":3000,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["combination",{"_index":4735,"title":{},"body":{"license.html":{}}}],["comment",{"_index":4875,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":4847,"title":{},"body":{"license.html":{}}}],["common",{"_index":3172,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["common/chart",{"_index":587,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/data",{"_index":588,"title":{},"body":{"classes/Chart.html":{}}}],["common/event",{"_index":590,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["common/lasagna",{"_index":593,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["common/mouse",{"_index":2337,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/palette/chart",{"_index":4035,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/default",{"_index":3167,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["common/palette/palettes",{"_index":4038,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/sequential",{"_index":4039,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/render",{"_index":594,"title":{},"body":{"classes/Chart.html":{}}}],["common/scales/band",{"_index":2339,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/domain",{"_index":2342,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/helpers/convert",{"_index":3017,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["common/scales/linear",{"_index":2345,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["common/scales/types",{"_index":1683,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/types",{"_index":597,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["common/utility.service",{"_index":1684,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["commonly",{"_index":1910,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["communication",{"_index":4690,"title":{},"body":{"license.html":{}}}],["compare",{"_index":293,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["comparison",{"_index":369,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{}}}],["compensate",{"_index":4420,"title":{},"body":{"classes/UtilityService.html":{}}}],["compiled",{"_index":4659,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":4887,"title":{},"body":{"license.html":{}}}],["complies",{"_index":4786,"title":{},"body":{"license.html":{}}}],["component",{"_index":477,"title":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"index.html":{}}}],["component_template",{"_index":498,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["computed",{"_index":4466,"title":{},"body":{"classes/UtilityService.html":{}}}],["computer",{"_index":4844,"title":{},"body":{"license.html":{}}}],["condition",{"_index":2683,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["condition(elementstodisplay",{"_index":2694,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conditions",{"_index":4613,"title":{},"body":{"license.html":{}}}],["config",{"_index":148,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["config(config",{"_index":1667,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["config.classname",{"_index":1817,"title":{},"body":{"classes/Grid.html":{}}}],["config.color",{"_index":1821,"title":{},"body":{"classes/Grid.html":{}}}],["config.cursor",{"_index":2436,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.dimension.margin",{"_index":2437,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.eventstreamid",{"_index":1161,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["config.gridticks",{"_index":2391,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.interactionplugins",{"_index":2438,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.interactive",{"_index":2432,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.showbottomaxis",{"_index":422,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts",{"_index":84,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:10",{"_index":167,"title":{},"body":{"classes/AxisConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:11",{"_index":1856,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:13",{"_index":175,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:14",{"_index":1548,"title":{},"body":{"classes/DimensionConfig.html":{},"classes/GridConfig.html":{}}}],["config.ts:16",{"_index":174,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:21",{"_index":1547,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:22",{"_index":166,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:23",{"_index":4485,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["config.ts:27",{"_index":178,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:28",{"_index":1854,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:29",{"_index":1546,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:3",{"_index":419,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts:30",{"_index":1855,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:31",{"_index":1545,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:32",{"_index":181,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:34",{"_index":1561,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:36",{"_index":169,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{}}}],["config.ts:38",{"_index":1563,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:47",{"_index":1549,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:49",{"_index":1551,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:51",{"_index":1552,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:6",{"_index":107,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["config.ts:60",{"_index":1557,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:62",{"_index":1559,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:64",{"_index":1560,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:7",{"_index":176,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:74",{"_index":1553,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:76",{"_index":1555,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:78",{"_index":1556,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:8",{"_index":3579,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:9",{"_index":3581,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.visible",{"_index":2443,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["config.width",{"_index":1819,"title":{},"body":{"classes/Grid.html":{}}}],["config/grid",{"_index":1685,"title":{},"body":{"classes/Grid.html":{}}}],["config/xy",{"_index":2351,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["configuration",{"_index":257,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":2076,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configure",{"_index":2132,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["configurecharteventsubscriptions(eventbus",{"_index":3285,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["configurecssfilters",{"_index":666,"title":{},"body":{"classes/Chart.html":{}}}],["configured",{"_index":1159,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configureeventsubscriptions(eventbus",{"_index":4073,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["configuring",{"_index":2280,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["confine",{"_index":2957,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["conflict",{"_index":2781,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["conflicts",{"_index":3501,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["conform",{"_index":1986,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["conforming",{"_index":88,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["connectedposition",{"_index":1437,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["connection",{"_index":3796,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points",{"_index":3801,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points[sectionindex].x",{"_index":3834,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["connection_points[sectionindex].y",{"_index":3835,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["consequential",{"_index":4837,"title":{},"body":{"license.html":{}}}],["consider",{"_index":250,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["considered",{"_index":5047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considers",{"_index":5045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":4029,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["consistent",{"_index":4859,"title":{},"body":{"license.html":{}}}],["consistently",{"_index":2792,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["consists",{"_index":748,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["conspicuously",{"_index":4702,"title":{},"body":{"license.html":{}}}],["const",{"_index":231,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1953,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"injectables/ThresholdsService.html":{}}}],["constants",{"_index":324,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["constitutes",{"_index":4743,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(@host",{"_index":3914,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(@inject(chart_component",{"_index":840,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(@optional",{"_index":3400,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(baraccessors",{"_index":4088,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["constructor(changedetector",{"_index":998,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["constructor(chartassist",{"_index":3146,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["constructor(chartcomponent",{"_index":825,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(colorprovider",{"_index":15,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["constructor(colors",{"_index":1060,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["constructor(config",{"_index":418,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(d",{"_index":3700,"title":{},"body":{"classes/PathMarker.html":{}}}],["constructor(dataseries",{"_index":1522,"title":{},"body":{"classes/DataSeries.html":{}}}],["constructor(elref",{"_index":870,"title":{},"body":{"components/ChartComponent.html":{}}}],["constructor(formattername",{"_index":3011,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["constructor(grid",{"_index":538,"title":{},"body":{"classes/Chart.html":{}}}],["constructor(id",{"_index":3459,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["constructor(legend",{"_index":3350,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(legendseries",{"_index":3905,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(loggerservice",{"_index":4166,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["constructor(markers",{"_index":3973,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["constructor(protected",{"_index":4100,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(public",{"_index":798,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(readonly",{"_index":1464,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["constructor(scalekey",{"_index":278,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["constructor(seriesid",{"_index":752,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["constructor(showbottomaxis",{"_index":4000,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["constructor(sourceprovider",{"_index":3746,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["constructor(svg",{"_index":4096,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(tooltippositionoffset",{"_index":1425,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["constructor(valuemap",{"_index":3502,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["constructor(values",{"_index":3979,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["construed",{"_index":4782,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1972,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["consumers",{"_index":1893,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["contained",{"_index":4769,"title":{},"body":{"license.html":{}}}],["container",{"_index":714,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["container.append(\"g",{"_index":2647,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["container.append(\"line",{"_index":1815,"title":{},"body":{"classes/Grid.html":{}}}],["container.attr(\"transform",{"_index":2756,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["containers",{"_index":2149,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["containing",{"_index":1650,"title":{},"body":{"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{}}}],["content",{"_index":935,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"license.html":{}}}],["content'},{'name",{"_index":504,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["content.component",{"_index":3683,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["content.component.html",{"_index":937,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.less",{"_index":936,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts",{"_index":934,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:15",{"_index":940,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:18",{"_index":943,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content/chart",{"_index":933,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"modules/NuiChartsModule.html":{}}}],["content]=\"serieshasadditionalcontent",{"_index":3926,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["contentposition",{"_index":938,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubject",{"_index":960,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubscription",{"_index":948,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["contents",{"_index":4777,"title":{},"body":{"license.html":{}}}],["context",{"_index":4907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":3880,"title":{},"body":{"classes/Renderer.html":{}}}],["continuous",{"_index":2176,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":4637,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":4104,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["contribution",{"_index":4680,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":4733,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":4788,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":4706,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":4744,"title":{},"body":{"license.html":{}}}],["control",{"_index":4628,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":4629,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":3210,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["conversion",{"_index":3802,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["conversions",{"_index":4660,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2306,"title":{},"body":{"interfaces/IScale.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["convert(scale",{"_index":3073,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["convert(value",{"_index":2183,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["converted",{"_index":2182,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["converts",{"_index":1508,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["coordinate",{"_index":2181,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["coordinates",{"_index":1930,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["copies",{"_index":4750,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4755,"title":{},"body":{"license.html":{}}}],["copy/paste",{"_index":4596,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":4621,"title":{},"body":{"license.html":{}}}],["core/chart",{"_index":857,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["core/common/palette/default",{"_index":31,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["core/common/renderer",{"_index":2103,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["core/common/scales/helpers/is",{"_index":3537,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["core/common/scales/types",{"_index":327,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["core/common/types",{"_index":38,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["core/common/utility.service",{"_index":330,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/XYRenderer.html":{}}}],["core/grid/config/xy",{"_index":4034,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["core/plugins/chart",{"_index":946,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/plugins/tooltips/chart",{"_index":1320,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["core/plugins/types",{"_index":947,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/types",{"_index":2822,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["correction",{"_index":1693,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["corresponding",{"_index":2180,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/XYRenderer.html":{}}}],["corresponds",{"_index":3009,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["counter",{"_index":2682,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["counterclaim",{"_index":4740,"title":{},"body":{"license.html":{}}}],["courtesy",{"_index":4444,"title":{},"body":{"classes/UtilityService.html":{}}}],["cover",{"_index":1242,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["crash",{"_index":629,"title":{},"body":{"classes/Chart.html":{}}}],["create",{"_index":4598,"title":{},"body":{"index.html":{}}}],["createborder(container",{"_index":1814,"title":{},"body":{"classes/Grid.html":{}}}],["createchart(lastspark",{"_index":4066,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["created",{"_index":1813,"title":{},"body":{"classes/Grid.html":{},"index.html":{}}}],["created3scale",{"_index":3488,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["creates",{"_index":1809,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/PathMarker.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"injectables/ThresholdsService.html":{}}}],["creating",{"_index":1774,"title":{},"body":{"classes/Grid.html":{},"injectables/ThresholdsService.html":{}}}],["creation",{"_index":4155,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["critical",{"_index":4545,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cross",{"_index":2014,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["crosshair",{"_index":137,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{}}}],["crosspoints",{"_index":4276,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["cs.renderer.getdomainoffiltereddata(cs",{"_index":5042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[next",{"_index":5038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[scalekey",{"_index":5043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":732,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["css.escape",{"_index":4381,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssclass",{"_index":219,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cssescape",{"_index":4370,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssescape(value",{"_index":4379,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssfilterid",{"_index":602,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/enumerations.html":{}}}],["cssfilterid.grayscale",{"_index":677,"title":{},"body":{"classes/Chart.html":{}}}],["current",{"_index":779,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["current.data.length",{"_index":974,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer",{"_index":970,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer.getinnerradius(current.scales.r.range",{"_index":973,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["currently",{"_index":3250,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["currenttooltipdirectivesindex",{"_index":1343,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["currenttooltipdirectivesindex[seriesid",{"_index":1349,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cursor",{"_index":102,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["curve",{"_index":2097,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvefactory",{"_index":2096,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvetype",{"_index":2092,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["custom",{"_index":785,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{}}}],["customary",{"_index":4804,"title":{},"body":{"license.html":{}}}],["customizations",{"_index":4569,"title":{},"body":{"index.html":{}}}],["customized",{"_index":4566,"title":{},"body":{"index.html":{}}}],["cycle",{"_index":4023,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["d",{"_index":57,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["d.__thresholds",{"_index":4249,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.__thresholds.status",{"_index":4250,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.active",{"_index":2829,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["d.category",{"_index":223,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["d.defined",{"_index":2288,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.end",{"_index":4288,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.hasownproperty(\"defined",{"_index":2287,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.height",{"_index":1791,"title":{},"body":{"classes/Grid.html":{}}}],["d.index",{"_index":1253,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.margin.bottom",{"_index":2744,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.left",{"_index":2725,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.right",{"_index":2730,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.margin.top",{"_index":2741,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.left",{"_index":2722,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.marginlocked?.right",{"_index":2727,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.name",{"_index":1537,"title":{},"body":{"classes/DataSeries.html":{}}}],["d.outerheight",{"_index":2721,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerheight(oldouterheight",{"_index":2748,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth",{"_index":2719,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.outerwidth(oldouterwidth",{"_index":2747,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["d.position",{"_index":1254,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.position.width",{"_index":1249,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["d.position.x",{"_index":1236,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["d.position.y",{"_index":3780,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["d.start",{"_index":4286,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.status",{"_index":2888,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["d.value",{"_index":1538,"title":{},"body":{"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["d.width",{"_index":1790,"title":{},"body":{"classes/Grid.html":{}}}],["d.x",{"_index":60,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d.y",{"_index":62,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d3",{"_index":313,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["d3's",{"_index":3458,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["d3scale",{"_index":2167,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["d3selection",{"_index":545,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["d[\"__stack_x\"]?.end",{"_index":66,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_x\"]?.start",{"_index":64,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.end",{"_index":70,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.start",{"_index":68,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["damages",{"_index":4835,"title":{},"body":{"license.html":{}}}],["dark",{"_index":1091,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["darken",{"_index":3743,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["darker",{"_index":4140,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["dasharray",{"_index":2120,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["data",{"_index":12,"title":{"additional-documentation/advanced-usage/input-structure/data.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["data.__bar",{"_index":227,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.end",{"_index":235,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.start",{"_index":228,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.coordinates",{"_index":2949,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.coordinates.x",{"_index":2950,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.datapoints",{"_index":3288,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.end",{"_index":236,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.filter((d",{"_index":3890,"title":{},"body":{"classes/Renderer.html":{}}}],["data.foreach((d",{"_index":1613,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data.index",{"_index":3289,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.interactiontype",{"_index":3287,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.length",{"_index":1597,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/Renderer.html":{}}}],["data.push(value",{"_index":3097,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["data.start",{"_index":230,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.value",{"_index":221,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data[i",{"_index":1617,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["data_point_interaction_reset",{"_index":322,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/MarkerUtils.html":{},"classes/XYRenderer.html":{}}}],["data_point_not_found",{"_index":323,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["dataaccessor",{"_index":33,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["dataaccessorkey",{"_index":3178,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["dataaccessors",{"_index":352,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"end",{"_index":357,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"start",{"_index":355,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["datafrom",{"_index":4196,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.x",{"_index":4323,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.y",{"_index":4325,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datamanager",{"_index":557,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["datapoint",{"_index":411,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["datapoint.data",{"_index":3805,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.index",{"_index":3186,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.position",{"_index":1502,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.x",{"_index":1504,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.y",{"_index":1505,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.height",{"_index":1506,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.width",{"_index":1507,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint?.position?.x",{"_index":3543,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapoint?.position?.y",{"_index":3545,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapointindex",{"_index":310,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datapointposition",{"_index":4508,"title":{},"body":{"classes/XYRenderer.html":{}}}],["datapointpositions",{"_index":438,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoints",{"_index":439,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["datapoints[seriesid",{"_index":4077,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["datapointsleft",{"_index":1234,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["datapointstop",{"_index":3779,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["datapointsubject",{"_index":3522,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["datapointsubject.next",{"_index":3556,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["dataseries",{"_index":222,"title":{"classes/DataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["dataseries.accessors",{"_index":1536,"title":{},"body":{"classes/DataSeries.html":{},"classes/MarkerUtils.html":{}}}],["dataseries.accessors.data?.[scalename",{"_index":3887,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.[scalename]?.(datum",{"_index":3885,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.x",{"_index":4505,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.accessors.data?.y",{"_index":4506,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.data",{"_index":1529,"title":{},"body":{"classes/DataSeries.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data.length",{"_index":2849,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data[index",{"_index":4504,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.id",{"_index":1528,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataseries.name",{"_index":1531,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataset",{"_index":3610,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datashift",{"_index":4321,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.x",{"_index":4332,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.y",{"_index":4331,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato",{"_index":4191,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.x",{"_index":4322,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.y",{"_index":4324,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["date",{"_index":4360,"title":{},"body":{"classes/TimeScale.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":4432,"title":{},"body":{"classes/UtilityService.html":{}}}],["dates",{"_index":5019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datetimeformatter",{"_index":4363,"title":{},"body":{"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["datum",{"_index":1897,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{}}}],["debounce",{"_index":881,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IScaleSVGElement.html":{}}}],["debouncing",{"_index":2619,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["declarations",{"_index":3662,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["decorator",{"_index":3865,"title":{},"body":{"classes/Renderer.html":{}}}],["decorators",{"_index":1008,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["deemphasized",{"_index":2109,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["deemphasizes",{"_index":3252,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["deep",{"_index":291,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["default",{"_index":109,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["default_border_class_name",{"_index":1632,"title":{},"body":{"classes/Grid.html":{}}}],["default_config",{"_index":1166,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["default_margin",{"_index":98,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_marker_container_class",{"_index":3513,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["default_marker_interaction_config",{"_index":3526,"title":{},"body":{"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["default_padding",{"_index":99,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_radial_renderer_config",{"_index":3727,"title":{},"body":{"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["defaultarcobject",{"_index":1593,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["defaultcolorprovider",{"_index":29,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["defaulting",{"_index":2379,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["defaultmarkerprovider",{"_index":30,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["defaultpalette",{"_index":3166,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["defaults",{"_index":3726,"title":{},"body":{"classes/PieRenderer.html":{}}}],["defaultsdeep",{"_index":1191,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaultsdeep(this.config",{"_index":1206,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaulttextoverflowhandler",{"_index":173,"title":{},"body":{"classes/AxisConfig.html":{}}}],["defaultvalue",{"_index":3503,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["defend",{"_index":4864,"title":{},"body":{"license.html":{}}}],["define",{"_index":1946,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["defines",{"_index":2274,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["defining",{"_index":1895,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["definition",{"_index":1709,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"license.html":{}}}],["definitions",{"_index":3627,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["deliberate",{"_index":4830,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3661,"title":{"dependencies.html":{}},"body":{"modules/NuiChartsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1990,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["deprecated",{"_index":2833,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["derivative",{"_index":4669,"title":{},"body":{"license.html":{}}}],["derive",{"_index":4186,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["derived",{"_index":1662,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["deriving",{"_index":2896,"title":{},"body":{"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["describe",{"_index":1892,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["describing",{"_index":1978,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["description",{"_index":85,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["descriptionprimary",{"_index":3342,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["descriptionsecondary",{"_index":3343,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["design",{"_index":4557,"title":{},"body":{"index.html":{}}}],["designated",{"_index":4704,"title":{},"body":{"license.html":{}}}],["designed",{"_index":4559,"title":{},"body":{"index.html":{}}}],["designers",{"_index":4561,"title":{},"body":{"index.html":{}}}],["desired",{"_index":2074,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["destroy",{"_index":443,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["destroy_event",{"_index":585,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/variables.html":{}}}],["destruction",{"_index":2004,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["detects",{"_index":4177,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["determine",{"_index":2041,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determined",{"_index":3614,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determines",{"_index":2175,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["determining",{"_index":2129,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"license.html":{}}}],["devdependencies",{"_index":4579,"title":{},"body":{"index.html":{}}}],["diamond",{"_index":4991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dictionary",{"_index":2008,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["diff",{"_index":2716,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["different",{"_index":711,"title":{},"body":{"classes/Chart.html":{},"license.html":{}}}],["differs",{"_index":3180,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["digit",{"_index":5023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dimension",{"_index":103,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.height",{"_index":2970,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.padding",{"_index":2471,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["dimension.width",{"_index":2476,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensionconfig",{"_index":140,"title":{"classes/DimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["dimensionconfig.autoheight",{"_index":719,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.autowidth",{"_index":722,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight",{"_index":734,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight(dimensions.height",{"_index":1757,"title":{},"body":{"classes/Grid.html":{}}}],["dimensionconfig.outerwidth",{"_index":737,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerwidth(dimensions.width",{"_index":1755,"title":{},"body":{"classes/Grid.html":{}}}],["dimensions",{"_index":712,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensions.height",{"_index":720,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["dimensions.width",{"_index":723,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["direct",{"_index":4633,"title":{},"body":{"license.html":{}}}],["direction",{"_index":4635,"title":{},"body":{"license.html":{}}}],["directive",{"_index":804,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"overview.html":{}}}],["directives",{"_index":519,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["directiveschanged",{"_index":1350,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["directly",{"_index":254,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["disable",{"_index":833,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{}}}],["disableheightcorrection",{"_index":1785,"title":{},"body":{"classes/Grid.html":{}}}],["disablerenderareaheightcorrection",{"_index":104,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["disablerenderareawidthcorrection",{"_index":105,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["disablewidthcorrection",{"_index":1787,"title":{},"body":{"classes/Grid.html":{}}}],["disclaimer",{"_index":4806,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":4700,"title":{},"body":{"license.html":{}}}],["display",{"_index":2072,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["displayed",{"_index":2073,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["displaying",{"_index":2546,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["distribute",{"_index":4723,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":4770,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":4615,"title":{},"body":{"license.html":{}}}],["divided",{"_index":3793,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["diy",{"_index":366,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["document",{"_index":4619,"title":{},"body":{"license.html":{}}}],["document.createelement(\"path",{"_index":3708,"title":{},"body":{"classes/PathMarker.html":{}}}],["documentation",{"_index":4654,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":2570,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["dom",{"_index":4929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain",{"_index":1938,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domain(clonedscale",{"_index":5057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain(domain",{"_index":2187,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["domain.ts",{"_index":4917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain[0",{"_index":3892,"title":{},"body":{"classes/Renderer.html":{}}}],["domaincalculator",{"_index":2161,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domains",{"_index":3625,"title":{"additional-documentation/advanced-usage/scales/domains.html":{}},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["don't",{"_index":2548,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["donut",{"_index":503,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["donutgaugerenderingutil",{"_index":1584,"title":{"classes/DonutGaugeRenderingUtil.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugerenderingutil.generatearcvalues(data",{"_index":1599,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["donutgaugethresholdsrenderer",{"_index":1962,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["down",{"_index":4947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["draw",{"_index":274,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["draw(renderer",{"_index":296,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["draw(renderseries",{"_index":2841,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["drawable",{"_index":1987,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["drawgrids(config",{"_index":2461,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["drawing",{"_index":2098,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["drawline",{"_index":996,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["drawmarker",{"_index":3515,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["drawmarker(datapoint",{"_index":3521,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["draws",{"_index":3086,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["drawticks(config",{"_index":2442,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["driven",{"_index":2158,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ds",{"_index":58,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["dt",{"_index":4431,"title":{},"body":{"classes/UtilityService.html":{}}}],["dynamic",{"_index":3864,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["e",{"_index":2404,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["e.data",{"_index":2413,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["e.g",{"_index":1899,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/XYAccessors.html":{}}}],["each",{"_index":580,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["each(borderkeys",{"_index":1773,"title":{},"body":{"classes/Grid.html":{}}}],["each(eventlist",{"_index":3896,"title":{},"body":{"classes/Renderer.html":{}}}],["each(function",{"_index":393,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["each(nodes",{"_index":1416,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["each(object.keys(eventhandlers",{"_index":3292,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["each(object.keys(this.datapoints",{"_index":1490,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["each(object.keys(this.streams",{"_index":1628,"title":{},"body":{"classes/EventBus.html":{}}}],["each(this.plugins",{"_index":692,"title":{},"body":{"classes/Chart.html":{}}}],["each(this.scales.x.list",{"_index":2473,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["each(this.scales.y.list",{"_index":2479,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["easier",{"_index":4880,"title":{},"body":{"license.html":{}}}],["east",{"_index":3798,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["edge",{"_index":1428,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{}}}],["editorial",{"_index":4670,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2046,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["efficient",{"_index":367,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["eight",{"_index":4958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elaborations",{"_index":4673,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":4687,"title":{},"body":{"license.html":{}}}],["element",{"_index":524,"title":{},"body":{"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":2240,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["element.clientheight",{"_index":1379,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.clientwidth",{"_index":1378,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsetleft",{"_index":1376,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsettop",{"_index":1377,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["elementref",{"_index":871,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{}}}],["elements",{"_index":674,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["elementsfiltering(elementstofilter",{"_index":2680,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay",{"_index":2675,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.indexof(element",{"_index":2679,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstodisplay.length",{"_index":2693,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter((element",{"_index":2687,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.filter(element",{"_index":2670,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter.reduce((prev",{"_index":2665,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["elementstofilter[0",{"_index":2664,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis",{"_index":2605,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis\").empty",{"_index":2608,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsis.node()?.getcomputedtextlength",{"_index":2614,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ellipsiswidth",{"_index":2058,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["elref",{"_index":876,"title":{},"body":{"components/ChartComponent.html":{}}}],["emitevent(renderer",{"_index":3452,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["emits",{"_index":1173,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{}}}],["emitted",{"_index":789,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emitting",{"_index":3605,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["emphasis/visibility",{"_index":1991,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["emphasise",{"_index":344,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["emphasisstate",{"_index":751,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasisstate+visible",{"_index":749,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["emphasize",{"_index":3251,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasized",{"_index":2110,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizedseries",{"_index":2414,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedseries.length",{"_index":2419,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscale.id",{"_index":2426,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales",{"_index":2420,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizedyscales.length",{"_index":2424,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["emphasizeseries",{"_index":794,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizeseries(seriesid",{"_index":3149,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasizing",{"_index":2027,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["emphasizing/deemphasizing",{"_index":2403,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["empty",{"_index":1665,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["empty_continuous_domain",{"_index":2156,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["emptyshapes",{"_index":4911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":2145,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enabled",{"_index":1961,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["enabledatapointhighlighting",{"_index":1956,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["enableexternalevents",{"_index":2901,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["enableminbarthickness",{"_index":2148,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enables",{"_index":2101,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enableserieshighlighting",{"_index":1955,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["encapsulation",{"_index":485,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["enclosed",{"_index":4872,"title":{},"body":{"license.html":{}}}],["end",{"_index":217,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["endaccessor",{"_index":356,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["endaccessor(d",{"_index":383,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["ending",{"_index":4197,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["endx",{"_index":1882,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["endy",{"_index":1886,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["engage",{"_index":2955,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["engine",{"_index":595,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enhanced",{"_index":2116,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enhancedlinecap",{"_index":2136,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enlarged",{"_index":1241,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["ensure",{"_index":2938,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["ensures",{"_index":2999,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["entered",{"_index":1921,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enters",{"_index":2010,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["entire",{"_index":2545,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["entirely",{"_index":4565,"title":{},"body":{"index.html":{}}}],["entities",{"_index":3500,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"license.html":{}}}],["entity",{"_index":2036,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["entityid",{"_index":2890,"title":{},"body":{"interfaces/IValueProvider.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["entries",{"_index":922,"title":{},"body":{"components/ChartComponent.html":{}}}],["entries[0].isintersecting",{"_index":931,"title":{},"body":{"components/ChartComponent.html":{}}}],["enum",{"_index":790,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"interfaces/ZoneCross.html":{}}}],["enumerations",{"_index":4529,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2606,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["equal",{"_index":2069,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["error(\"accessor",{"_index":3889,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"bottomborder",{"_index":1829,"title":{},"body":{"classes/Grid.html":{}}}],["error(\"can't",{"_index":4507,"title":{},"body":{"classes/XYRenderer.html":{}}}],["error(\"chart",{"_index":1231,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["error(\"clr",{"_index":3755,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["error(\"container",{"_index":3538,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["error(\"grid",{"_index":608,"title":{},"body":{"classes/Chart.html":{}}}],["error(\"labelcontent",{"_index":3053,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["error(\"position",{"_index":1393,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"radius",{"_index":978,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["error(\"renderer.config.strokewidth",{"_index":3433,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["error(\"seriesid",{"_index":1348,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"statestyles",{"_index":3871,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"tick",{"_index":2711,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["error(\"unable",{"_index":1503,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/XYRenderer.html":{}}}],["error(\"value",{"_index":4412,"title":{},"body":{"classes/UtilityService.html":{}}}],["error(\"xscale",{"_index":2488,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["error(\"yleftscale",{"_index":2503,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["errors",{"_index":381,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["eslint",{"_index":832,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{}}}],["eslint/no",{"_index":836,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{}}}],["etc",{"_index":1901,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/ProcessedColorProvider.html":{},"classes/XYAccessors.html":{}}}],["even",{"_index":1775,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["event",{"_index":459,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["event.data",{"_index":3027,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoint",{"_index":1218,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoint.seriesid",{"_index":1217,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoints",{"_index":1216,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoints[chartseries.id",{"_index":3221,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.data.foreach(series",{"_index":1473,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["event.data.interactiontype",{"_index":1211,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.ischartinview",{"_index":1477,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["event.payload[key",{"_index":3277,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.target.releasepointercapture(event.pointerid",{"_index":2967,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["event.target.setpointercapture(event.pointerid",{"_index":2965,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["eventbus",{"_index":525,"title":{"classes/EventBus.html":{}},"body":{"classes/Chart.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(interaction_data_points_event).subscribe((event",{"_index":4074,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(key).subscribe((event",{"_index":3293,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventbus.getstream(mouse_active_event).subscribe((event",{"_index":4078,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventemitter",{"_index":1121,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["eventhandlers",{"_index":3286,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventhandlers[key](event.data",{"_index":3294,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventlist",{"_index":3893,"title":{},"body":{"classes/Renderer.html":{}}}],["eventname",{"_index":399,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["events",{"_index":795,"title":{"additional-documentation/advanced-usage/events.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["eventstreamid",{"_index":1181,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["evil",{"_index":1823,"title":{},"body":{"classes/Grid.html":{}}}],["example",{"_index":1631,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"license.html":{}}}],["examples",{"_index":3742,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"index.html":{}}}],["except",{"_index":4003,"title":{},"body":{"classes/SparkChartAssist.html":{},"license.html":{}}}],["excludes",{"_index":1937,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["excluding",{"_index":2048,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["exclusive",{"_index":4714,"title":{},"body":{"license.html":{}}}],["executed",{"_index":4797,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":4825,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":4647,"title":{},"body":{"license.html":{}}}],["exist",{"_index":3539,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existing",{"_index":3565,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existingspark.id",{"_index":4060,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["existingsparkindex",{"_index":4057,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["exits",{"_index":2011,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expect",{"_index":1988,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expected",{"_index":2872,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["explicitly",{"_index":4790,"title":{},"body":{"license.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["exported",{"_index":4202,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["exports",{"_index":3663,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":4813,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1762,"title":{},"body":{"classes/Grid.html":{}}}],["extended",{"_index":1439,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":41,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["extent",{"_index":3862,"title":{},"body":{"classes/Renderer.html":{}}}],["extent(data",{"_index":3884,"title":{},"body":{"classes/Renderer.html":{}}}],["extracted",{"_index":1371,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["facilitate",{"_index":1981,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["facilitates",{"_index":4154,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["fails",{"_index":248,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["failure",{"_index":4845,"title":{},"body":{"license.html":{}}}],["fallback_formatter",{"_index":3018,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["false",{"_index":142,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["false).classed(\"tick",{"_index":2532,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["far",{"_index":1444,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1325,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["fee",{"_index":4853,"title":{},"body":{"license.html":{}}}],["fields",{"_index":2277,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["fifty",{"_index":4640,"title":{},"body":{"license.html":{}}}],["figure",{"_index":4493,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":4748,"title":{},"body":{"license.html":{}}}],["files",{"_index":4655,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1807,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["filter",{"_index":669,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["filter(c",{"_index":4266,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["filter(event",{"_index":3219,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["filter(rs",{"_index":2415,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filterdatabydomain",{"_index":3587,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdatabydomain(data",{"_index":3606,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdefs",{"_index":526,"title":{},"body":{"classes/Chart.html":{}}}],["filtered",{"_index":3621,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filtereddata",{"_index":3873,"title":{},"body":{"classes/Renderer.html":{}}}],["filterrepeatedelements(elementstofilter",{"_index":2662,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["filters",{"_index":3609,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterscale",{"_index":3876,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.domain",{"_index":3882,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.iscontinuous",{"_index":3879,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.isdomainfixed",{"_index":3878,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscales",{"_index":3623,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["filterscales[fixedscalekey",{"_index":3877,"title":{},"body":{"classes/Renderer.html":{}}}],["find",{"_index":3015,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["find(scales[\"x\"].index",{"_index":3034,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["finddatapointbyvalue",{"_index":275,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["finddatapointbyvalue(series",{"_index":304,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex",{"_index":315,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex(series.data",{"_index":358,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findnearestindex",{"_index":4371,"title":{},"body":{"classes/UtilityService.html":{}}}],["findnearestindex(haystack",{"_index":4383,"title":{},"body":{"classes/UtilityService.html":{}}}],["fine",{"_index":1405,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["firefox",{"_index":2753,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["first",{"_index":648,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["firstcodeunit",{"_index":4455,"title":{},"body":{"classes/UtilityService.html":{}}}],["fit",{"_index":158,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["fitbottomaxis(d",{"_index":2758,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fitness",{"_index":4817,"title":{},"body":{"license.html":{}}}],["five",{"_index":4955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixdomain",{"_index":2307,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["fixdomain(domain",{"_index":2191,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["fixed",{"_index":2190,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["fixeddomains",{"_index":5033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixedscalekey",{"_index":3874,"title":{},"body":{"classes/Renderer.html":{}}}],["fixleftmargin",{"_index":2574,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["fixrightmargin",{"_index":2575,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["flag",{"_index":2170,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["flexible",{"_index":4562,"title":{},"body":{"index.html":{}}}],["fn",{"_index":3747,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["following",{"_index":4752,"title":{},"body":{"license.html":{}}}],["force",{"_index":1314,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["force(\"collisionforce",{"_index":1414,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide",{"_index":1310,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide((node",{"_index":1408,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation",{"_index":1311,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation(nodes",{"_index":1412,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["foreground",{"_index":2114,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/TextColorProvider.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["form",{"_index":1909,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":3176,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"dependencies.html":{},"license.html":{}}}],["formatsecond",{"_index":4912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter",{"_index":784,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["formatter.ts",{"_index":4910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter?.(value",{"_index":3052,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["formattername",{"_index":783,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["formatters",{"_index":2162,"title":{"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["formatters/datetime",{"_index":4364,"title":{},"body":{"classes/TimeScale.html":{}}}],["formatting",{"_index":3177,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["forming",{"_index":2053,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["forwardref",{"_index":867,"title":{},"body":{"components/ChartComponent.html":{}}}],["found",{"_index":3617,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["four",{"_index":4954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":4717,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":4219,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["front",{"_index":643,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["full",{"_index":4187,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["function",{"_index":891,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ProcessedColorProvider.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":3846,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["future",{"_index":1859,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gap",{"_index":1694,"title":{},"body":{"classes/Grid.html":{}}}],["gauge",{"_index":1586,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["gauge/constants",{"_index":1906,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gauge/types",{"_index":1596,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["gauge_quantity_series_id",{"_index":4913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gauge_remainder_series_id",{"_index":4914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gauge_threshold_markers_series_id",{"_index":4915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gc",{"_index":4112,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["generatearcvalues(data",{"_index":1607,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generated",{"_index":2085,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["generates",{"_index":4178,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["generatethresholdarcdata",{"_index":1589,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generatethresholdarcdata(data",{"_index":1590,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["generic",{"_index":1911,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["get(entityid",{"_index":2031,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["get(this.interaction",{"_index":3894,"title":{},"body":{"classes/Renderer.html":{}}}],["getabsoluteposition(relativeposition",{"_index":1514,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getabsoluteposition(valarr",{"_index":3777,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["getabsoluteposition(valuesarray",{"_index":1227,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["getapproximateticks",{"_index":177,"title":{},"body":{"classes/AxisConfig.html":{}}}],["getarc(range",{"_index":3736,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getautomaticdomain",{"_index":2340,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomain(chartseriesset",{"_index":5049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithincludedinterval",{"_index":4918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks",{"_index":2341,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks(config",{"_index":2393,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getbackgroundcolors",{"_index":1068,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getbackgrounds",{"_index":4158,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgrounds(sourceseries",{"_index":4169,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4258,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getchartcollection",{"_index":853,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getchartcollection(collectionid",{"_index":854,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getcloser(a",{"_index":4427,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex",{"_index":4372,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex(haystack",{"_index":4393,"title":{},"body":{"classes/UtilityService.html":{}}}],["getcolorvaluebyname",{"_index":1073,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["getcolorvaluebyname(c",{"_index":1097,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getcolorvaluebyname(input",{"_index":4119,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcontainerstatestyles",{"_index":3585,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getcontentposition(areasize",{"_index":982,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["getcontrastratio(color1",{"_index":4134,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcrosspoint",{"_index":4159,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspoint(datafrom",{"_index":4190,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy",{"_index":4160,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy(datafrom",{"_index":4198,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getd3scale",{"_index":3656,"title":{},"body":{"classes/NoopScale.html":{},"classes/Scale.html":{}}}],["getdata",{"_index":4090,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getdatamanager",{"_index":530,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getdatapointindex",{"_index":276,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointindex(renderer",{"_index":306,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["getdatapointindex(series",{"_index":3611,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition",{"_index":3586,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition(dataseries",{"_index":3597,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain",{"_index":3588,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain(data",{"_index":3619,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata",{"_index":3589,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata(dataseries",{"_index":3622,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getelementstohide(elementstofilter",{"_index":2672,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["geteventbus",{"_index":531,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getfixeddomains(chartseriesset",{"_index":5034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgrid",{"_index":532,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gethighlightedvalue",{"_index":2216,"title":{},"body":{"interfaces/IChartAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethighlightedvalue(chartseries",{"_index":786,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethorizontalsetup",{"_index":1459,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["gethorizontalsetup(tooltippositionoffset",{"_index":1467,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getinnerradius",{"_index":3723,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinnerradius(range",{"_index":3730,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinteractive",{"_index":3372,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getinteractivearea",{"_index":1639,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getlabel(chartseries",{"_index":3181,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getlasagna",{"_index":1640,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getmaxtextwidth(array",{"_index":2700,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getouterradius",{"_index":3724,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterradius(range",{"_index":3732,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterwidthdimensioncorrection",{"_index":1764,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["getoverlayposition(angle",{"_index":3831,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getpointereventsclass",{"_index":3547,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getpointereventsclickclass",{"_index":3549,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getrelativeluminance(rgbcolor",{"_index":4144,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getrenderengine",{"_index":533,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getrequiredlayers",{"_index":2867,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["gets",{"_index":778,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/UtilityService.html":{}}}],["getscalevalues",{"_index":4373,"title":{},"body":{"classes/UtilityService.html":{}}}],["getscalevalues(scales",{"_index":4396,"title":{},"body":{"classes/UtilityService.html":{}}}],["getsectionindex(angle",{"_index":3840,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getseries",{"_index":4091,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getseriesgroups(seriesset",{"_index":3315,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getseriesrenderstate",{"_index":3375,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getseriesstates",{"_index":3141,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getsideindicators",{"_index":4161,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsideindicators(zones",{"_index":4200,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsinglevalue(data",{"_index":241,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["getstandardcolors",{"_index":1066,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getstate",{"_index":759,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["getstream",{"_index":1621,"title":{},"body":{"classes/EventBus.html":{}}}],["getstream(streamid",{"_index":1623,"title":{},"body":{"classes/EventBus.html":{}}}],["getsvg",{"_index":1996,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["getter",{"_index":2082,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["gettextcolors",{"_index":1070,"title":{},"body":{"classes/ChartPalette.html":{}}}],["gettextmeasurement(array",{"_index":2695,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getthresholdline",{"_index":4162,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdline(zone",{"_index":4203,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines",{"_index":4163,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines(zones",{"_index":4207,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones",{"_index":4164,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones(sourceseries",{"_index":4210,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["gettickdistance(array",{"_index":2705,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["getting",{"_index":963,"title":{"index.html":{},"license.html":{}},"body":{"classes/ChartDonutContentPlugin.html":{},"index.html":{}}}],["gettooltipposition(datapoint",{"_index":1501,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getvalueaccessor(accessor",{"_index":4408,"title":{},"body":{"classes/UtilityService.html":{}}}],["getverticalsetup",{"_index":1451,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getverticalsetup(tooltippositionoffset",{"_index":1466,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getvisibleserieswithlegend",{"_index":788,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["getvisibleserieswithlegendbackup",{"_index":3193,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getxyvalues",{"_index":4374,"title":{},"body":{"classes/UtilityService.html":{}}}],["getxyvalues(xscales",{"_index":4399,"title":{},"body":{"classes/UtilityService.html":{}}}],["give",{"_index":4753,"title":{},"body":{"license.html":{}}}],["given",{"_index":850,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":292,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["going",{"_index":3799,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["goodwill",{"_index":4842,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4890,"title":{},"body":{"license.html":{}}}],["grant",{"_index":4709,"title":{},"body":{"license.html":{}}}],["granted",{"_index":4649,"title":{},"body":{"license.html":{}}}],["granting",{"_index":4624,"title":{},"body":{"license.html":{}}}],["grants",{"_index":4711,"title":{},"body":{"license.html":{}}}],["grayscale",{"_index":671,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grayscale_color_matrix",{"_index":603,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["grayscale_filter",{"_index":2821,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":83,"title":{"classes/Grid.html":{},"additional-documentation/advanced-usage/grid.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["grid's",{"_index":1644,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["grid.bottomscaleid",{"_index":3035,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["grid.default_border_class_name",{"_index":1818,"title":{},"body":{"classes/Grid.html":{}}}],["grid.eventbus",{"_index":611,"title":{},"body":{"classes/Chart.html":{}}}],["grid.grid_class_name",{"_index":1727,"title":{},"body":{"classes/Grid.html":{}}}],["grid.grid_elements_layer_name",{"_index":1746,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_height_correction",{"_index":1792,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_width_correction",{"_index":1795,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid.rendering_area_clip_path_prefix",{"_index":1729,"title":{},"body":{"classes/Grid.html":{}}}],["grid.rendering_area_layer_name",{"_index":1804,"title":{},"body":{"classes/Grid.html":{}}}],["grid.tick_dimension_correction",{"_index":1765,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["grid.ts",{"_index":2323,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grid.updatechartdimensionssubject",{"_index":609,"title":{},"body":{"classes/Chart.html":{}}}],["grid/config/spark",{"_index":4041,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["grid/grid",{"_index":2908,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid/types",{"_index":599,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["grid/xy",{"_index":2909,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["grid_class_name",{"_index":1633,"title":{},"body":{"classes/Grid.html":{}}}],["grid_elements_layer_name",{"_index":1634,"title":{},"body":{"classes/Grid.html":{}}}],["gridconfig",{"_index":132,"title":{"classes/GridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig.dimension.width",{"_index":2997,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig.disablerenderareawidthcorrection",{"_index":2996,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["gridconfig:11",{"_index":146,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:14",{"_index":141,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:16",{"_index":133,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:28",{"_index":138,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:30",{"_index":143,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:32",{"_index":144,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["griddimension",{"_index":3058,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.height",{"_index":3062,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.width",{"_index":3072,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["gridelementslayer",{"_index":1708,"title":{},"body":{"classes/Grid.html":{}}}],["gridgroupselection",{"_index":2463,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridplugin",{"_index":651,"title":{},"body":{"classes/Chart.html":{}}}],["grids",{"_index":1734,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gridselection",{"_index":2468,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridticks",{"_index":159,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["gridx",{"_index":2359,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["gridy",{"_index":2358,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grossly",{"_index":4831,"title":{},"body":{"license.html":{}}}],["group",{"_index":817,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["grouped",{"_index":2203,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["groupid",{"_index":3157,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["grouping",{"_index":810,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["groups",{"_index":2650,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection",{"_index":2541,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.append(\"title\").text(titletext",{"_index":2558,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"pointer",{"_index":2552,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.classed(\"tick",{"_index":2569,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.data()[0",{"_index":2554,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").attr(\"x",{"_index":2550,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"text\").call(overflowhandler",{"_index":2625,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["groupselection.select(\"title\").empty",{"_index":2553,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["grow",{"_index":1949,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gsrgb",{"_index":4148,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["hack",{"_index":2754,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["handle",{"_index":1213,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialPopoverPlugin.html":{}}}],["handleclose",{"_index":1360,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handled",{"_index":1164,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["handlelabelupdate",{"_index":3029,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["handlelineupdate",{"_index":3094,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["handlemarginupdate",{"_index":2637,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleopen",{"_index":1341,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handler",{"_index":186,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":3784,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["handleseriesstatechange(e",{"_index":2405,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflow(labelgroup",{"_index":2560,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handleticklabeloverflowdebounceindex",{"_index":2366,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["handling",{"_index":2065,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["harmless",{"_index":4866,"title":{},"body":{"license.html":{}}}],["hasinnerscale(scale",{"_index":2200,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["hasinputdescription",{"_index":3340,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasinputunitlabel",{"_index":3901,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinputvalue",{"_index":3902,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinteractionlabel",{"_index":4082,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["hasplugin",{"_index":534,"title":{},"body":{"classes/Chart.html":{}}}],["hasplugin(classref",{"_index":562,"title":{},"body":{"classes/Chart.html":{}}}],["hasprojecteddescription",{"_index":3341,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasrightyaxis",{"_index":2641,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["having",{"_index":4221,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["haystack",{"_index":4390,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.findindex(straw",{"_index":4416,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.length",{"_index":4413,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack[0",{"_index":4415,"title":{},"body":{"classes/UtilityService.html":{}}}],["height",{"_index":634,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["height(value",{"_index":1550,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["heightoffset",{"_index":3061,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["helper",{"_index":3169,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["helps",{"_index":341,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["here",{"_index":911,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IPopoverPluginConfig.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{}}}],["hereby",{"_index":4710,"title":{},"body":{"license.html":{}}}],["herein",{"_index":4793,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":2108,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"miscellaneous/enumerations.html":{}}}],["hide",{"_index":460,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hidesubject",{"_index":440,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hiding",{"_index":1202,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["high",{"_index":4465,"title":{},"body":{"classes/UtilityService.html":{}}}],["highlight",{"_index":270,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["highlight_data_point",{"_index":4927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_data_point_event",{"_index":4919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series",{"_index":4928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series_event",{"_index":400,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["highlightdata",{"_index":3222,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdata.index",{"_index":3225,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapoint",{"_index":277,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapoint(renderer",{"_index":309,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["highlightdatapoint(renderseries",{"_index":3600,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapresentpredicate",{"_index":3224,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapresentpredicate(highlightdata",{"_index":3227,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlighted",{"_index":287,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlighteddatapoints",{"_index":3993,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["highlights",{"_index":3008,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["highlightstrategy",{"_index":2141,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["hold",{"_index":4865,"title":{},"body":{"license.html":{}}}],["horizontal",{"_index":404,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["horizontalbaraccessors",{"_index":1871,"title":{"classes/HorizontalBarAccessors.html":{}},"body":{"classes/HorizontalBarAccessors.html":{}}}],["horizontalpadding",{"_index":171,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["host",{"_index":1145,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["hostbinding",{"_index":3378,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.${legend_series_class_name",{"_index":3391,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.inverse",{"_index":3394,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbindings",{"_index":3347,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener",{"_index":3379,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener(\"click",{"_index":3410,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlisteners",{"_index":3349,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hour",{"_index":5021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover",{"_index":1265,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["hovered",{"_index":1919,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["hovering",{"_index":2142,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["htmlelement",{"_index":541,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{}}}],["http://www.apache.org/licenses",{"_index":4611,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4889,"title":{},"body":{"license.html":{}}}],["https://github.com/angular/zone.js/issues/1011",{"_index":912,"title":{},"body":{"components/ChartComponent.html":{}}}],["https://github.com/d3/d3",{"_index":2918,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["https://github.com/mathiasbynens/css.escape.git",{"_index":4447,"title":{},"body":{"classes/UtilityService.html":{}}}],["https://github.com/ng",{"_index":3866,"title":{},"body":{"classes/Renderer.html":{}}}],["https://jira.solarwinds.com/browse/nui",{"_index":4951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/a/1968345",{"_index":4320,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["https://www.w3.org/tr/wcag20/#contrast",{"_index":4129,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["https://www.w3.org/tr/wcag20/relative",{"_index":4142,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["huge",{"_index":1022,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["i).valueof",{"_index":4411,"title":{},"body":{"classes/UtilityService.html":{}}}],["iaccessors",{"_index":34,"title":{"interfaces/IAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["iallaround",{"_index":108,"title":{"interfaces/IAllAround.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["iareaaccessors",{"_index":9,"title":{"interfaces/IAreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["iareadataaccessors",{"_index":25,"title":{"interfaces/IAreaDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iarearendererconfig",{"_index":2089,"title":{"interfaces/IAreaRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iareaseriesaccessors",{"_index":27,"title":{"interfaces/IAreaSeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iaxesstylechangeeventpayload",{"_index":2028,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["iaxis",{"_index":2086,"title":{"interfaces/IAxis.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iaxisconfig",{"_index":157,"title":{"interfaces/IAxisConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["iaxisconfig#approximateticks",{"_index":195,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#fit",{"_index":193,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#gridticks",{"_index":190,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticklabel",{"_index":192,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticksize",{"_index":191,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#visible",{"_index":189,"title":{},"body":{"classes/AxisConfig.html":{}}}],["ibandscale",{"_index":2150,"title":{"interfaces/IBandScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ibandscale).bandwidth",{"_index":2584,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ibaraccessors",{"_index":205,"title":{"interfaces/IBarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["ibarchartconfig",{"_index":448,"title":{"interfaces/IBarChartConfig.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["ibardataaccessors",{"_index":207,"title":{"interfaces/IBarDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["ibarrendererconfig",{"_index":2137,"title":{"interfaces/IBarRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iborderconfig",{"_index":1686,"title":{"interfaces/IBorderConfig.html":{}},"body":{"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iborders",{"_index":1687,"title":{"interfaces/IBorders.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ichart",{"_index":464,"title":{"interfaces/IChart.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["ichartassist",{"_index":773,"title":{"interfaces/IChartAssist.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartassist#gethighlightedvalue",{"_index":4065,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassist#update",{"_index":4047,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassistevent",{"_index":796,"title":{"interfaces/IChartAssistEvent.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["ichartassistevents",{"_index":3189,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["ichartassistseries",{"_index":753,"title":{"interfaces/IChartAssistSeries.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["ichartcollectionevent",{"_index":2006,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartcomponent",{"_index":826,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartevent",{"_index":596,"title":{"interfaces/IChartEvent.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["ichartmarker",{"_index":1003,"title":{"interfaces/IChartMarker.html":{}},"body":{"components/ChartMarkerComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/VerticalBarAccessors.html":{}}}],["ichartpalette",{"_index":1056,"title":{"interfaces/IChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartplugin",{"_index":548,"title":{"interfaces/IChartPlugin.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartseries",{"_index":576,"title":{"interfaces/IChartSeries.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["ichartviewstatuseventpayload",{"_index":888,"title":{"interfaces/IChartViewStatusEventPayload.html":{}},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["icon",{"_index":3126,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["icoordinates",{"_index":1928,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["id",{"_index":769,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{}}}],["id.directive",{"_index":3682,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["id.directive.ts",{"_index":808,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["id.directive.ts:20",{"_index":828,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["idataaccessors",{"_index":35,"title":{"interfaces/IDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["idatapoint",{"_index":1197,"title":{"interfaces/IDataPoint.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{}}}],["idatapointspayload",{"_index":453,"title":{"interfaces/IDataPointsPayload.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["idataseries",{"_index":213,"title":{"interfaces/IDataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["ideally",{"_index":1861,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["identification",{"_index":4881,"title":{},"body":{"license.html":{}}}],["identified",{"_index":849,"title":{},"body":{"injectables/ChartCollectionService.html":{},"index.html":{}}}],["identifier",{"_index":1798,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{}}}],["identify",{"_index":1345,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["identifying",{"_index":4874,"title":{},"body":{"license.html":{}}}],["identity",{"_index":4391,"title":{},"body":{"classes/UtilityService.html":{}}}],["idimensionconfig",{"_index":139,"title":{"interfaces/IDimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["idimensionconfig#autoheight",{"_index":1570,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#autowidth",{"_index":1569,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#height",{"_index":1573,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#margin",{"_index":1566,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#marginlocked",{"_index":1568,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerheight",{"_index":1580,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerwidth",{"_index":1575,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#padding",{"_index":1567,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#width",{"_index":1571,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensions",{"_index":598,"title":{"interfaces/IDimensions.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["idomainlimits",{"_index":1931,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["idonutgaugethresholdsrendererconfig",{"_index":1963,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ids",{"_index":4536,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ielementposition",{"_index":942,"title":{"interfaces/IElementPosition.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["ienhancedlinecapconfig",{"_index":2118,"title":{"interfaces/IEnhancedLineCapConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iformatters",{"_index":2163,"title":{"interfaces/IFormatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["igaugethresholddatum",{"_index":1591,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["igaugethresholdsrendererconfig",{"_index":1958,"title":{"interfaces/IGaugeThresholdsRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ignore",{"_index":131,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/TextColorProvider.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["ignore_interaction_class",{"_index":2335,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["ignorefordomaincalculation",{"_index":1940,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["igrid",{"_index":539,"title":{"interfaces/IGrid.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["igrid#build",{"_index":1723,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#buildplugins",{"_index":2431,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["igrid#config",{"_index":1719,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#getinteractivearea",{"_index":1713,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#getlasagna",{"_index":1715,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#target",{"_index":1721,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#update",{"_index":1750,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igrid#updatedimensions",{"_index":1753,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#updateranges",{"_index":1759,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["igridconfig",{"_index":135,"title":{"interfaces/IGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["igridconfig#borders",{"_index":1867,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#cursor",{"_index":1868,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#dimension",{"_index":1866,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#disablerenderareaheightcorrection",{"_index":1869,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#disablerenderareawidthcorrection",{"_index":1870,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#interactive",{"_index":1865,"title":{},"body":{"classes/GridConfig.html":{}}}],["ihasinnerscale",{"_index":2198,"title":{"interfaces/IHasInnerScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ihighlightstrategy",{"_index":272,"title":{"interfaces/IHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["ii",{"_index":4638,"title":{},"body":{"license.html":{}}}],["iii",{"_index":4645,"title":{},"body":{"license.html":{}}}],["iinteractioncoordinatespayload",{"_index":2246,"title":{"interfaces/IInteractionCoordinatesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["iinteractiondatapointevent",{"_index":1215,"title":{"interfaces/IInteractionDataPointEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{}}}],["iinteractiondatapointsevent",{"_index":1214,"title":{"interfaces/IInteractionDataPointsEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["iinteractionevent",{"_index":1929,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionpayload",{"_index":2023,"title":{"interfaces/IInteractionPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionvalues",{"_index":2242,"title":{"interfaces/IInteractionValues.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/UtilityService.html":{}}}],["iinteractionvaluespayload",{"_index":2244,"title":{"interfaces/IInteractionValuesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["ilasagnalayer",{"_index":1914,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["ilineaccessors",{"_index":2105,"title":{"interfaces/ILineAccessors.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["ilineargaugethresholdsrendererconfig",{"_index":1965,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinearscales",{"_index":1966,"title":{"interfaces/ILinearScales.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinedataaccessors",{"_index":2265,"title":{"interfaces/ILineDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["ilinerendererconfig",{"_index":2119,"title":{"interfaces/ILineRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["ilineseriesaccessors",{"_index":2266,"title":{"interfaces/ILineSeriesAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["imarkerinteractionconfig",{"_index":2100,"title":{"interfaces/IMarkerInteractionConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["impersonates",{"_index":3529,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["implementation",{"_index":1499,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["implementations/interfaces",{"_index":1738,"title":{},"body":{"classes/Grid.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/XYGridConfig.html":{}}}],["implied",{"_index":4814,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["imports",{"_index":3695,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["improving",{"_index":4701,"title":{},"body":{"license.html":{}}}],["inability",{"_index":4840,"title":{},"body":{"license.html":{}}}],["inactive",{"_index":2826,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inactivecolor",{"_index":2827,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inbounds",{"_index":4422,"title":{},"body":{"classes/UtilityService.html":{}}}],["incidental",{"_index":4836,"title":{},"body":{"license.html":{}}}],["include",{"_index":4577,"title":{},"body":{"index.html":{},"license.html":{}}}],["included",{"_index":4666,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2276,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":2052,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["inclusion",{"_index":4684,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":4708,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":2915,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["incurred",{"_index":4867,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":4863,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":4856,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2227,"title":{},"body":{"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["indexincrement",{"_index":4424,"title":{},"body":{"classes/UtilityService.html":{}}}],["indexof(fixeddomains[next",{"_index":5040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicated",{"_index":4664,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":1916,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicating",{"_index":1174,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{}}}],["indicator",{"_index":2816,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicators",{"_index":2831,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicatorsactive",{"_index":4346,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["indirect",{"_index":4634,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2143,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"components/LegendComponent.html":{},"license.html":{}}}],["infinite",{"_index":4215,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["infinity",{"_index":976,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["info",{"_index":1178,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":1440,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["informational",{"_index":4778,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":4732,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":4745,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":117,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["initial",{"_index":1020,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["initialization",{"_index":1999,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["initialize",{"_index":444,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["initplugin",{"_index":1129,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["inject",{"_index":829,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectable",{"_index":843,"title":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{}}}],["injectables",{"_index":844,"title":{},"body":{"injectables/ChartCollectionService.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["injected",{"_index":816,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectthresholdsdata",{"_index":4165,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["injectthresholdsdata(dataseries",{"_index":4216,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["inline",{"_index":3132,"title":{},"body":{"components/LegendComponent.html":{}}}],["innerradius(0",{"_index":3739,"title":{},"body":{"classes/PieRenderer.html":{}}}],["innerscale",{"_index":2199,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["inoopaccessors",{"_index":2290,"title":{"interfaces/INoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{}}}],["input",{"_index":830,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/ProcessedColorProvider.html":{},"components/RichLegendTileComponent.html":{},"classes/TextColorProvider.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["input(\"nuichartcollectionid",{"_index":838,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["inputs",{"_index":824,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"components/RichLegendTileComponent.html":{}}}],["inputseriesset",{"_index":776,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["inputseriesset.map(chartseries",{"_index":4048,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks",{"_index":4051,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.length",{"_index":4056,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.map((spark",{"_index":4054,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inside",{"_index":959,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["inspired",{"_index":4319,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["instance",{"_index":941,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/PathMarker.html":{},"classes/SideIndicatorAccessors.html":{}}}],["instanceof",{"_index":620,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["instances",{"_index":3978,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["instantiate",{"_index":2278,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["instead",{"_index":729,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{}}}],["institute",{"_index":4736,"title":{},"body":{"license.html":{}}}],["insures",{"_index":2066,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["intentionally",{"_index":4682,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":743,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interaction_coordinates",{"_index":4931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_coordinates_event",{"_index":2245,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_point",{"_index":4932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_point_event",{"_index":1196,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_points",{"_index":4933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_points_event",{"_index":1156,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["interaction_margin",{"_index":3424,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interaction_series",{"_index":4934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_series_event",{"_index":3429,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["interaction_values",{"_index":4936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active",{"_index":4935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active_event",{"_index":2906,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_values_event",{"_index":2243,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["interactionhandlermap",{"_index":2925,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactionlabel",{"_index":3044,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.empty",{"_index":3046,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.remove",{"_index":3048,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.select(\"text",{"_index":3054,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabellayer",{"_index":3020,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin",{"_index":2346,"title":{"classes/InteractionLabelPlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlabelplugin.layer_name",{"_index":3023,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__rect",{"_index":3083,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__text",{"_index":3085,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlinelayer",{"_index":3090,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionlineplugin",{"_index":2348,"title":{"classes/InteractionLinePlugin.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlineplugin.layer_name",{"_index":3101,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionpath",{"_index":3430,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionpath.empty",{"_index":3434,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionplugins",{"_index":100,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["interactionstrategy",{"_index":2131,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["interactiontype",{"_index":1182,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["interactiontype.click",{"_index":3448,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["interactiontype.hover",{"_index":3557,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["interactiontype.mousedown",{"_index":2928,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mousemove",{"_index":1183,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mouseup",{"_index":2931,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactive",{"_index":106,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interactive(interactive",{"_index":3385,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["interactivearea",{"_index":1707,"title":{},"body":{"classes/Grid.html":{}}}],["interface",{"_index":40,"title":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/XYAccessors.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["interfaces",{"_index":1890,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{},"license.html":{},"overview.html":{}}}],["internal",{"_index":2352,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["intersect",{"_index":4269,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["intersected",{"_index":2020,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["intersection",{"_index":925,"title":{},"body":{"components/ChartComponent.html":{},"injectables/ThresholdsService.html":{}}}],["intersectionobserver",{"_index":892,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserver(this.intersectionobservercallback",{"_index":895,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobservercallback",{"_index":921,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserverentry",{"_index":923,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersections",{"_index":4257,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["interval",{"_index":4213,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["interval[0",{"_index":5051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interval[1",{"_index":5053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformat(moment.locale",{"_index":5025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformatoptions",{"_index":5024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat",{"_index":4920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat(d",{"_index":5020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invert",{"_index":2308,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["invert(coordinate",{"_index":2184,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["invert(next",{"_index":4478,"title":{},"body":{"classes/UtilityService.html":{}}}],["inverted",{"_index":4477,"title":{},"body":{"classes/UtilityService.html":{}}}],["invisible",{"_index":1776,"title":{},"body":{"classes/Grid.html":{}}}],["invoke",{"_index":2624,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["invoked",{"_index":2000,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["invokes",{"_index":2772,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ipopoverpluginconfig",{"_index":1170,"title":{"interfaces/IPopoverPluginConfig.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["iposition",{"_index":1319,"title":{"interfaces/IPosition.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["iradialaccessors",{"_index":2293,"title":{"interfaces/IRadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialdataaccessors",{"_index":2295,"title":{"interfaces/IRadialDataAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialrendererconfig",{"_index":1941,"title":{"interfaces/IRadialRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["iradialscales",{"_index":2165,"title":{"interfaces/IRadialScales.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["iradialseriesaccessors",{"_index":2296,"title":{"interfaces/IRadialSeriesAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["irectangleaccessors",{"_index":331,"title":{"interfaces/IRectangleAccessors.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["irectangledataaccessors",{"_index":210,"title":{"interfaces/IRectangleDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irectangleseriesaccessors",{"_index":209,"title":{"interfaces/IRectangleSeriesAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irendercontainers",{"_index":2009,"title":{"interfaces/IRenderContainers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["irendererconfig",{"_index":1934,"title":{"interfaces/IRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["irenderereventpayload",{"_index":328,"title":{"interfaces/IRendererEventPayload.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["irenderseries",{"_index":299,"title":{"interfaces/IRenderSeries.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["irenderstatedata",{"_index":572,"title":{"interfaces/IRenderStateData.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["irenderstatesindex",{"_index":802,"title":{"interfaces/IRenderStatesIndex.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{}}}],["irrevocable",{"_index":4718,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":2848,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isactiveclassapplied",{"_index":3395,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isapproximatelyequal",{"_index":2800,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isarray",{"_index":317,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["isarray(colors",{"_index":1085,"title":{},"body":{"classes/ChartPalette.html":{}}}],["isarray(value",{"_index":361,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["isarray(xvalue",{"_index":3040,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["isbandscale",{"_index":325,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["isbandscale(scale",{"_index":2196,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["isbandscale(scales.x",{"_index":4243,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["isbottomaxis",{"_index":2674,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscale",{"_index":2152,"title":{"interfaces/IScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["iscale#d3scale",{"_index":3954,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#domain",{"_index":3959,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#fixdomain",{"_index":3962,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#range",{"_index":3955,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reverse",{"_index":3965,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reversed",{"_index":3967,"title":{},"body":{"classes/Scale.html":{}}}],["iscale).filter(s",{"_index":2423,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["iscalesvgelement",{"_index":2321,"title":{"interfaces/IScaleSVGElement.html":{}},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ischartinview",{"_index":930,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["iscontinuous",{"_index":2178,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainfixed",{"_index":2171,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainvalid",{"_index":2179,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isempty",{"_index":1680,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(data.coordinates",{"_index":2946,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(scales",{"_index":3033,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["isempty(this.grid.scales",{"_index":2945,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(this.scales",{"_index":1751,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["isempty(xvalue",{"_index":4472,"title":{},"body":{"classes/UtilityService.html":{}}}],["isempty(yvalue",{"_index":4474,"title":{},"body":{"classes/UtilityService.html":{}}}],["isequal",{"_index":1315,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isequal(currenttooltipdirectivesindex",{"_index":1351,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iseriesaccessors",{"_index":36,"title":{"interfaces/ISeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isetdomaineventpayload",{"_index":2029,"title":{"interfaces/ISetDomainEventPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isfunction",{"_index":1014,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["isfunction(this.marker.getsvg",{"_index":1030,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["ishorizontalclassapplied",{"_index":3393,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isideindicatoraccessors",{"_index":2814,"title":{"interfaces/ISideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["isideindicatordataaccessors",{"_index":2818,"title":{"interfaces/ISideIndicatorDataAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isideindicatorseriesaccessors",{"_index":2819,"title":{"interfaces/ISideIndicatorSeriesAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isimplethresholdzone",{"_index":2869,"title":{"interfaces/ISimpleThresholdZone.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["isinrange",{"_index":3536,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["isinteractiveclassapplied",{"_index":3392,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["islegendactive",{"_index":3994,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["isnan(date.gettime",{"_index":4366,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnan(value",{"_index":3492,"title":{},"body":{"classes/LinearScale.html":{}}}],["isnan(value.gettime",{"_index":4367,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnil",{"_index":1317,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isnil(accessor",{"_index":3888,"title":{},"body":{"classes/Renderer.html":{}}}],["isnil(position.height",{"_index":1391,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(position.width",{"_index":1392,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(renderer.config.strokewidth",{"_index":3432,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isnil(transformval",{"_index":2710,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isopen",{"_index":1204,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["ispark",{"_index":767,"title":{"interfaces/ISpark.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{}}}],["isreversed",{"_index":3949,"title":{},"body":{"classes/Scale.html":{}}}],["isselected",{"_index":3344,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isselectedchange",{"_index":3346,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isserieshidden",{"_index":3142,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["isserieshidden(seriesid",{"_index":3152,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["issue",{"_index":4696,"title":{},"body":{"license.html":{}}}],["istackmetadata",{"_index":2204,"title":{"interfaces/IStackMetadata.html":{}},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["istartendrangeaccessors",{"_index":2302,"title":{"interfaces/IStartEndRangeAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["istatusaccessors",{"_index":2878,"title":{"interfaces/IStatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["istatusdataaccessors",{"_index":2880,"title":{"interfaces/IStatusDataAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["isundefined",{"_index":319,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(collection",{"_index":859,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["isundefined(color",{"_index":4102,"title":{},"body":{"classes/SvgMarker.html":{}}}],["isundefined(index",{"_index":4514,"title":{},"body":{"classes/XYRenderer.html":{}}}],["isundefined(inverted",{"_index":4479,"title":{},"body":{"classes/UtilityService.html":{}}}],["isundefined(maxbottomwidth",{"_index":2586,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxleftwidth",{"_index":2601,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(maxrightwidth",{"_index":2593,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["isundefined(prev",{"_index":971,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(radius",{"_index":977,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(this.brushstartx",{"_index":2982,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(this.selecteddatapointidxfn",{"_index":389,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["isundefined(values.x",{"_index":4512,"title":{},"body":{"classes/XYRenderer.html":{}}}],["isvertical",{"_index":1422,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iszoneedge",{"_index":2015,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["it'll",{"_index":3214,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["it's",{"_index":1404,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["item",{"_index":1302,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["item.id",{"_index":3257,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["item.value.seriesid",{"_index":1340,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iterations(20",{"_index":1411,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itextoverflowargs",{"_index":2056,"title":{"interfaces/ITextOverflowArgs.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iticklabelconfig",{"_index":170,"title":{"interfaces/ITickLabelConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["itooltipnode",{"_index":1323,"title":{"interfaces/ITooltipNode.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itooltipposition",{"_index":1442,"title":{"interfaces/ITooltipPosition.html":{}},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["itself",{"_index":927,"title":{},"body":{"components/ChartComponent.html":{}}}],["ivalueprovider",{"_index":1061,"title":{"interfaces/IValueProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["ivaluethicknessaccessors",{"_index":2303,"title":{"interfaces/IValueThicknessAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["ixyaccessors",{"_index":2892,"title":{"interfaces/IXYAccessors.html":{}},"body":{"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/XYAccessors.html":{}}}],["ixydataaccessors",{"_index":2267,"title":{"interfaces/IXYDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["ixygridconfig",{"_index":2075,"title":{"interfaces/IXYGridConfig.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["ixyscales",{"_index":326,"title":{"interfaces/IXYScales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{}}}],["ixyseriesaccessors",{"_index":2894,"title":{"interfaces/IXYSeriesAccessors.html":{}},"body":{"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["izonecrosspoint",{"_index":2013,"title":{"interfaces/IZoneCrossPoint.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["izoompluginconfiguration",{"_index":2899,"title":{"interfaces/IZoomPluginConfiguration.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["j",{"_index":370,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["january",{"_index":4609,"title":{},"body":{"license.html":{}}}],["keep",{"_index":2789,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["keeping",{"_index":4005,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["keeps",{"_index":3497,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["kept",{"_index":2279,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["key",{"_index":782,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/XYAccessors.html":{}}}],["keyby",{"_index":3161,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyby(seriesset",{"_index":3304,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["keyof",{"_index":335,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{}}}],["keys",{"_index":1975,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["kind",{"_index":1857,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"license.html":{}}}],["known",{"_index":2912,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["label",{"_index":2063,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/typealiases.html":{}}}],["label's",{"_index":2067,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"rect",{"_index":3082,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"text",{"_index":3084,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelcontent",{"_index":3051,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelgroup",{"_index":2087,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["labelgroup.append(\"text",{"_index":2610,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.attr(\"cursor",{"_index":2529,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.classed(\"tick",{"_index":2620,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.select(\".sample",{"_index":2607,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelgroup.selectall(\"g\").each(function",{"_index":2530,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["labelplugin",{"_index":4084,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labelplugin.initialize",{"_index":4086,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labels",{"_index":2062,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["labelwidth",{"_index":3069,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["language",{"_index":4558,"title":{},"body":{"index.html":{},"license.html":{}}}],["large",{"_index":4548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lasagna",{"_index":592,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["lasagna(>(this.container",{"_index":1740,"title":{},"body":{"classes/Grid.html":{}}}],["last",{"_index":3212,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"index.html":{}}}],["lastgridconfig",{"_index":3995,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lastinteractionvaluespayload",{"_index":3019,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lastspark",{"_index":4055,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lasttextwidth",{"_index":2760,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lasttickscalevalue",{"_index":2761,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lastusedindex",{"_index":3983,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["law",{"_index":4809,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":4741,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1649,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layer's",{"_index":2937,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["layer.selectall(`.${interactionlineplugin.layer_name}`).data(data",{"_index":3098,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["layer_name",{"_index":2920,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["layering",{"_index":2080,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["layers",{"_index":3628,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layout",{"_index":4601,"title":{"additional-documentation/layout.html":{}},"body":{"index.html":{}}}],["left",{"_index":116,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/XYGridConfig.html":{}}}],["leftgridlines",{"_index":2466,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid",{"_index":2371,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["leftscaleid(id",{"_index":2374,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["legal",{"_index":4625,"title":{},"body":{"license.html":{}}}],["legend",{"_index":482,"title":{"additional-documentation/advanced-usage/legend.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"index.html":{},"overview.html":{},"additional-documentation/advanced-usage.html":{}}}],["legend's",{"_index":3117,"title":{},"body":{"components/LegendComponent.html":{},"classes/SparkChartAssist.html":{}}}],["legend'},{'name",{"_index":514,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component",{"_index":3381,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component.html",{"_index":3110,"title":{},"body":{"components/LegendComponent.html":{}}}],["legend/legend",{"_index":3689,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend/legend.component",{"_index":3693,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend_series_class_name",{"_index":3382,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendcomponent",{"_index":513,"title":{"components/LegendComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendinteractionassist",{"_index":3137,"title":{"classes/LegendInteractionAssist.html":{}},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendinteractionassist(this",{"_index":3201,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendlabeldata$(chartseries",{"_index":3215,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendorientation",{"_index":3120,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legendorientation.horizontal",{"_index":3409,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendorientation.vertical",{"_index":3121,"title":{},"body":{"components/LegendComponent.html":{}}}],["legendseries",{"_index":3327,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{}}}],["legendseries.length",{"_index":3330,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendseriescomponent",{"_index":515,"title":{"components/LegendSeriesComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendseriesset",{"_index":3187,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["length",{"_index":1701,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/UtilityService.html":{}}}],["lengthlimit",{"_index":362,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["level",{"_index":1894,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/XYAccessors.html":{}}}],["levels",{"_index":279,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["liability",{"_index":4826,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4834,"title":{},"body":{"license.html":{}}}],["library",{"_index":1403,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"index.html":{}}}],["licensable",{"_index":4730,"title":{},"body":{"license.html":{}}}],["license",{"_index":4606,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":4784,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":4886,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":4746,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":4620,"title":{},"body":{"license.html":{}}}],["light",{"_index":1089,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["lighten",{"_index":3744,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["lighter",{"_index":4139,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["limit",{"_index":4205,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.accessor",{"_index":4310,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.zoneboundary",{"_index":4311,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limitation",{"_index":4815,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4891,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3845,"title":{},"body":{"classes/Renderer.html":{},"license.html":{}}}],["limiting",{"_index":5046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limits",{"_index":2064,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["limits[value",{"_index":4301,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["line",{"_index":154,"title":{"additional-documentation/chart-types/line.html":{}},"body":{"classes/AreaGridConfig.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["line.enter",{"_index":3103,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line.exit().remove",{"_index":3107,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line/line",{"_index":2106,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["lineaccessors",{"_index":2270,"title":{"classes/LineAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["linear",{"_index":4551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lineargaugethresholdsrenderer",{"_index":1964,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["linearscale",{"_index":2344,"title":{"classes/LinearScale.html":{}},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LinearScale.html":{}}}],["linearscale).foreach((scale",{"_index":2383,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["linecap",{"_index":2124,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["linerenderer",{"_index":2107,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["linerenderer.getstrokestyledashed(1",{"_index":3580,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["lines",{"_index":2127,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["lineselectseriesinteractionstrategy",{"_index":2130,"title":{"classes/LineSelectSeriesInteractionStrategy.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["link",{"_index":188,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"license.html":{}}}],["list",{"_index":644,"title":{},"body":{"classes/Chart.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["listened",{"_index":1158,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["listening",{"_index":924,"title":{},"body":{"components/ChartComponent.html":{}}}],["listens",{"_index":1155,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lists",{"_index":4694,"title":{},"body":{"license.html":{}}}],["literal",{"_index":307,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["litigation",{"_index":4737,"title":{},"body":{"license.html":{}}}],["llc",{"_index":4885,"title":{},"body":{"license.html":{}}}],["localize",{"_index":3674,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["localizefn",{"_index":3677,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["locally",{"_index":2324,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["located",{"_index":3823,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["lodash/clone",{"_index":2331,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/clonedeep",{"_index":4033,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["lodash/debounce",{"_index":882,"title":{},"body":{"components/ChartComponent.html":{}}}],["lodash/defaultsdeep",{"_index":1192,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/each",{"_index":581,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["lodash/find",{"_index":3016,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lodash/findindex",{"_index":316,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["lodash/get",{"_index":3863,"title":{},"body":{"classes/Renderer.html":{}}}],["lodash/identity",{"_index":4405,"title":{},"body":{"classes/UtilityService.html":{}}}],["lodash/isarray",{"_index":318,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["lodash/isempty",{"_index":1681,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/isequal",{"_index":1316,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["lodash/isfunction",{"_index":1015,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["lodash/isnil",{"_index":1318,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"components/RichLegendTileComponent.html":{}}}],["lodash/isundefined",{"_index":320,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/keyby",{"_index":3162,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["lodash/pickby",{"_index":1194,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lodash/sortby",{"_index":4225,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/unionwith",{"_index":4227,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/uniq",{"_index":2333,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["lodash/values",{"_index":1195,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["loggerservice",{"_index":4167,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["logic",{"_index":3531,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["look",{"_index":4585,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2689,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["loss",{"_index":4841,"title":{},"body":{"license.html":{}}}],["losses",{"_index":4848,"title":{},"body":{"license.html":{}}}],["low",{"_index":4464,"title":{},"body":{"classes/UtilityService.html":{}}}],["lowc",{"_index":4116,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["lt",{"_index":2873,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["luminance",{"_index":4133,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance.xml",{"_index":4143,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance1",{"_index":4135,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance2",{"_index":4137,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["m",{"_index":4972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m0",{"_index":4962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":4663,"title":{},"body":{"license.html":{}}}],["magenta",{"_index":2830,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["magic",{"_index":430,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["mailing",{"_index":4693,"title":{},"body":{"license.html":{}}}],["main",{"_index":4183,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["maintain",{"_index":1739,"title":{},"body":{"classes/Grid.html":{}}}],["maintenance",{"_index":4571,"title":{},"body":{"index.html":{}}}],["make",{"_index":3451,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"license.html":{}}}],["making",{"_index":4651,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":4846,"title":{},"body":{"license.html":{}}}],["managed",{"_index":4698,"title":{},"body":{"license.html":{}}}],["managemarker",{"_index":3516,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["managemarker(dataseries",{"_index":3527,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["management",{"_index":4636,"title":{},"body":{"license.html":{}}}],["manager",{"_index":589,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["manually",{"_index":1863,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["many",{"_index":290,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["map",{"_index":2364,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["map((s",{"_index":4945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(event",{"_index":3220,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["map(rs",{"_index":2418,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["map(s",{"_index":4944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mappedvalueprovider",{"_index":3493,"title":{"classes/MappedValueProvider.html":{}},"body":{"classes/MappedValueProvider.html":{}}}],["margin",{"_index":124,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["margin.left",{"_index":2598,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin.right",{"_index":2590,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2",{"_index":2803,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.bottom",{"_index":2809,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.left",{"_index":2811,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.right",{"_index":2807,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margin2.top",{"_index":2805,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked",{"_index":1542,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginlocked.left",{"_index":2629,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["marginlocked.right",{"_index":2628,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["margins",{"_index":2049,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginsheight",{"_index":1581,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marginswidth",{"_index":1576,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marked",{"_index":4703,"title":{},"body":{"license.html":{}}}],["marker",{"_index":53,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["marker's",{"_index":3519,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker'},{'name",{"_index":506,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["marker.component",{"_index":3684,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["marker.component.html",{"_index":993,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.less",{"_index":992,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts",{"_index":991,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:16",{"_index":1004,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:17",{"_index":1002,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:18",{"_index":1001,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:19",{"_index":1005,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:21",{"_index":1010,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:23",{"_index":1011,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:24",{"_index":1007,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:25",{"_index":1012,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:27",{"_index":999,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.setcolor(color",{"_index":3553,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker.ts",{"_index":3698,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker.ts:14",{"_index":4097,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:18",{"_index":4098,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:26",{"_index":3706,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:38",{"_index":3705,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:8",{"_index":3704,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:9",{"_index":3701,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker/chart",{"_index":990,"title":{},"body":{"components/ChartMarkerComponent.html":{},"modules/NuiChartsModule.html":{}}}],["marker_path_class",{"_index":3514,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteraction",{"_index":2093,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["markerinteractionconfig",{"_index":3523,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.clickable",{"_index":3550,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.enabled",{"_index":3548,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerprovider",{"_index":16,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["markerradius",{"_index":1959,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["markers",{"_index":1900,"title":{"additional-documentation/advanced-usage/input-structure/markers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["markertarget",{"_index":3541,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").classed(markerutils.marker_path_class",{"_index":3563,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").node",{"_index":3564,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).selectall(\"g",{"_index":3560,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.attrs(attrs",{"_index":3554,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.empty",{"_index":3551,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node",{"_index":3561,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node()?.appendchild(utilservice.getsvgfromstring(marker.getsvg",{"_index":3562,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"click",{"_index":3559,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseenter",{"_index":3555,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseleave",{"_index":3558,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils",{"_index":3510,"title":{"classes/MarkerUtils.html":{}},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.default_marker_container_class",{"_index":3525,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.removemarker(container",{"_index":3540,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marks",{"_index":4802,"title":{},"body":{"license.html":{}}}],["markup",{"_index":4095,"title":{},"body":{"classes/SvgMarker.html":{}}}],["match",{"_index":2271,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["matches",{"_index":3496,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["math.abs(first",{"_index":2802,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.abs(test",{"_index":4429,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.abs(topofrange",{"_index":2771,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.ceil(((datapoint?.position?.x",{"_index":3569,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.ceil(((datapoint?.position?.y",{"_index":3573,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.cos(a",{"_index":3816,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.floor(dt",{"_index":4440,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.max(...valuesarray.map(d",{"_index":1248,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.max(0",{"_index":237,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Grid.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.max(automaticdomain[1",{"_index":5052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.max(value",{"_index":1579,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["math.max.apply(null",{"_index":2702,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["math.min(...valarr.map(d",{"_index":3778,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["math.min(...valuesarray.map(d",{"_index":1235,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.min(0",{"_index":234,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.min(automaticdomain[0",{"_index":5050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.min(clientrect.height",{"_index":1051,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(clientrect.width",{"_index":1048,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(prev",{"_index":972,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["math.min(scales.y.range()[0",{"_index":2863,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["math.min(this.levels",{"_index":363,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["math.pi",{"_index":3813,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.random",{"_index":4438,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.round(angle",{"_index":3841,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sin(a",{"_index":3817,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sqrt(2",{"_index":988,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["mathias",{"_index":4445,"title":{},"body":{"classes/UtilityService.html":{}}}],["matrix",{"_index":680,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1933,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["maxbottomwidth",{"_index":2580,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxleftwidth",{"_index":2578,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxrightwidth",{"_index":2576,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["maxsize",{"_index":997,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["maxthickness",{"_index":1952,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["maxwidth",{"_index":2070,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["maybe",{"_index":2168,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["mean",{"_index":4617,"title":{},"body":{"license.html":{}}}],["means",{"_index":3616,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["measurement",{"_index":2673,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measurementcomparison",{"_index":2677,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["measuretype",{"_index":2676,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mechanical",{"_index":4656,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":2081,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["media",{"_index":4661,"title":{},"body":{"license.html":{}}}],["medium",{"_index":4552,"title":{},"body":{"miscellaneous/enumerations.html":{},"license.html":{}}}],["meet",{"_index":4751,"title":{},"body":{"license.html":{}}}],["memberof",{"_index":3707,"title":{},"body":{"classes/PathMarker.html":{}}}],["merchantability",{"_index":4816,"title":{},"body":{"license.html":{}}}],["merely",{"_index":4677,"title":{},"body":{"license.html":{}}}],["merge(line",{"_index":3105,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["mergeddomains",{"_index":5054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergeddomains[0",{"_index":5061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergedomains(domains",{"_index":5044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":484,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["method",{"_index":1663,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["methods",{"_index":273,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["mid",{"_index":4468,"title":{},"body":{"classes/UtilityService.html":{}}}],["middle",{"_index":3066,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["midpoint",{"_index":1146,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["min",{"_index":1932,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["mind",{"_index":2173,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["minimum",{"_index":2146,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["minute",{"_index":5022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":5028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4528,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3578,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["missingdatalinerendererconfig",{"_index":3576,"title":{"classes/MissingDataLineRendererConfig.html":{}},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["mockups",{"_index":2977,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["mode",{"_index":3118,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["modifications",{"_index":4652,"title":{},"body":{"license.html":{}}}],["modified",{"_index":4757,"title":{},"body":{"license.html":{}}}],["modify",{"_index":4779,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":4783,"title":{},"body":{"license.html":{}}}],["modifyzerolines",{"_index":2462,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["modifyzerolines(gridselection",{"_index":2470,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["module",{"_index":3658,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["modules",{"_index":3660,"title":{"modules.html":{}},"body":{"modules/NuiChartsModule.html":{},"modules.html":{}}}],["more",{"_index":2022,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"license.html":{}}}],["mouse",{"_index":1915,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mouse_active",{"_index":4937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouse_active_event",{"_index":3165,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":1920,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseenter",{"_index":1923,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseinteractivearea",{"_index":2336,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["mouseinteractivearea(this.getlasagna().getcontainer",{"_index":2434,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseinteractiveareaplugin",{"_index":2349,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["mouseleave",{"_index":1924,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mousemove",{"_index":1926,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseup",{"_index":1927,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["movement",{"_index":1925,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["moves",{"_index":2911,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["moving",{"_index":346,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["multi",{"_index":1904,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"dependencies.html":{}}}],["multiple",{"_index":1737,"title":{},"body":{"classes/Grid.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["n",{"_index":2715,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["names",{"_index":4801,"title":{},"body":{"license.html":{}}}],["narrow",{"_index":2169,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["nativeevent",{"_index":3895,"title":{},"body":{"classes/Renderer.html":{}}}],["nearest",{"_index":2017,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["nearestindex",{"_index":373,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["necessarily",{"_index":4731,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":2616,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["need",{"_index":343,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needed",{"_index":1262,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needle",{"_index":4384,"title":{},"body":{"classes/UtilityService.html":{}}}],["needs",{"_index":377,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"components/ChartMarkerComponent.html":{}}}],["negative",{"_index":3615,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["negligence",{"_index":4829,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":4832,"title":{},"body":{"license.html":{}}}],["never",{"_index":2784,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["new",{"_index":112,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newbottommargin",{"_index":2743,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["newtopmargin",{"_index":2740,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next",{"_index":834,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["next.getboundingclientrect",{"_index":2698,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["next.invert(x",{"_index":3005,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["next.scaleid",{"_index":2427,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ngaftercontentinit",{"_index":905,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngafterviewinit",{"_index":841,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngfor",{"_index":4026,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ngmodule",{"_index":3671,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":897,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngondestroy",{"_index":916,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngoninit",{"_index":893,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["ngzone",{"_index":872,"title":{},"body":{"components/ChartComponent.html":{}}}],["nice",{"_index":1834,"title":{},"body":{"classes/Grid.html":{}}}],["nine",{"_index":4959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1233,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["node.radius",{"_index":1409,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.x",{"_index":1421,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.y",{"_index":1420,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node_modules/@nova",{"_index":4593,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1389,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["non",{"_index":1614,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/PathMarker.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":2974,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ZoomPlugin.html":{}}}],["noopaccessors",{"_index":2292,"title":{"classes/NoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["nooprenderer",{"_index":3583,"title":{"classes/NoopRenderer.html":{}},"body":{"classes/NoopRenderer.html":{}}}],["noopscale",{"_index":3638,"title":{"classes/NoopScale.html":{}},"body":{"classes/NoopScale.html":{}}}],["normalized_domain",{"_index":2159,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["normally",{"_index":4775,"title":{},"body":{"license.html":{}}}],["note",{"_index":2044,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["nothing",{"_index":4792,"title":{},"body":{"license.html":{}}}],["notice",{"_index":4665,"title":{},"body":{"license.html":{}}}],["notices",{"_index":4760,"title":{},"body":{"license.html":{}}}],["notifying",{"_index":3130,"title":{},"body":{"components/LegendComponent.html":{}}}],["notwithstanding",{"_index":4791,"title":{},"body":{"license.html":{}}}],["nova",{"_index":91,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"components/ChartPopoverComponent.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"dependencies.html":{},"index.html":{}}}],["nui",{"_index":488,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/PathMarker.html":{},"components/RichLegendTileComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["nuichartcollectionid",{"_index":521,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["nuichartsmodule",{"_index":3659,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["nuicommonmodule",{"_index":3679,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuiiconmodule",{"_index":3680,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuipopovermodule",{"_index":3681,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["null",{"_index":226,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopScale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":168,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(d",{"_index":2298,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["number.isfinite(value",{"_index":233,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["numbers",{"_index":1401,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["numeric",{"_index":2177,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1063,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["object.assign",{"_index":1515,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["object.keys(attrs",{"_index":3714,"title":{},"body":{"classes/PathMarker.html":{}}}],["object.keys(borderconfigs",{"_index":1772,"title":{},"body":{"classes/Grid.html":{}}}],["object.keys(datapoints).foreach(seriesid",{"_index":4075,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["object.keys(event.payload).map(key",{"_index":3276,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(filterscales",{"_index":3875,"title":{},"body":{"classes/Renderer.html":{}}}],["object.keys(fixeddomains).reduce((result",{"_index":5036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this._scales).foreach((scalekey",{"_index":2378,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["object.keys(this.seriesgroups",{"_index":3325,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(tooltippositions).map(seriesid",{"_index":1390,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["objects",{"_index":1969,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{}}}],["obligations",{"_index":4857,"title":{},"body":{"license.html":{}}}],["observable",{"_index":3163,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["observer",{"_index":884,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["obtain",{"_index":4888,"title":{},"body":{"license.html":{}}}],["of((chartseries.data",{"_index":3229,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["of(highlightdata.data",{"_index":3228,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["offer",{"_index":4726,"title":{},"body":{"license.html":{}}}],["offset",{"_index":1143,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{}}}],["offsetparentbbox",{"_index":1483,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.left",{"_index":1487,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.top",{"_index":1489,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetx",{"_index":1457,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsety",{"_index":1460,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["ok",{"_index":4543,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["old",{"_index":2783,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldmargin",{"_index":2638,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterheight",{"_index":2720,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["oldouterwidth",{"_index":2718,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["omit",{"_index":3441,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"click",{"_index":3446,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseenter",{"_index":3440,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseleave",{"_index":3445,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"pointerdown",{"_index":2964,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["on(\"pointerup",{"_index":2966,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["once",{"_index":2189,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["onchanges",{"_index":864,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["onclick",{"_index":3411,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["ondestroy",{"_index":863,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["one",{"_index":750,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["ones",{"_index":3253,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oneseriesmode",{"_index":3329,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["onevent",{"_index":3195,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oninit",{"_index":861,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["onsetseriesstates(renderstatedata",{"_index":738,"title":{},"body":{"classes/Chart.html":{}}}],["onupdate(seriesset",{"_index":701,"title":{},"body":{"classes/Chart.html":{}}}],["onupdatedimensions",{"_index":708,"title":{},"body":{"classes/Chart.html":{}}}],["oops",{"_index":1093,"title":{},"body":{"classes/ChartPalette.html":{}}}],["opacity",{"_index":1289,"title":{},"body":{"components/ChartTooltipComponent.html":{},"interfaces/IScaleSVGElement.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1186,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["opening",{"_index":1272,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["openpopoversubject",{"_index":1167,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["opentimeout",{"_index":1329,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opentooltips",{"_index":1296,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opposite",{"_index":3803,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1858,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartSeries.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["optionally",{"_index":2134,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["options",{"_index":1062,"title":{},"body":{"classes/ChartPalette.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options).format(date",{"_index":5026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.backgroundopacity",{"_index":1101,"title":{},"body":{"classes/ChartPalette.html":{}}}],["order",{"_index":1263,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["orientation",{"_index":441,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"components/LegendComponent.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{}}}],["origin",{"_index":3822,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["original",{"_index":4674,"title":{},"body":{"license.html":{}}}],["originx",{"_index":1452,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["originy",{"_index":1453,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["otherwise",{"_index":379,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["out",{"_index":2543,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"modules/NuiChartsModule.html":{},"classes/XYGridConfig.html":{},"license.html":{},"overview.html":{}}}],["outerheight",{"_index":1543,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerheight(value",{"_index":1554,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerradius",{"_index":3810,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["outerwidth",{"_index":1544,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerwidth(value",{"_index":1558,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["output",{"_index":1127,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outputs",{"_index":1115,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outside",{"_index":347,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["outstanding",{"_index":4643,"title":{},"body":{"license.html":{}}}],["over",{"_index":1266,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["overall",{"_index":3124,"title":{},"body":{"components/LegendComponent.html":{}}}],["overflow",{"_index":185,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["overflowhandler",{"_index":172,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["overlap",{"_index":1386,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["overlay",{"_index":3827,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["overlaymodule",{"_index":3670,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["overlaypositions",{"_index":1443,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlaysetup",{"_index":1462,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["overlayx",{"_index":1454,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlayy",{"_index":1455,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overridden",{"_index":4564,"title":{},"body":{"index.html":{}}}],["override",{"_index":731,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["overview",{"_index":4555,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":4622,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":4639,"title":{},"body":{"license.html":{}}}],["p",{"_index":337,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["p.destroy",{"_index":697,"title":{},"body":{"classes/Chart.html":{}}}],["p.initialize",{"_index":693,"title":{},"body":{"classes/Chart.html":{}}}],["p.update",{"_index":707,"title":{},"body":{"classes/Chart.html":{}}}],["p.updatedimensions",{"_index":726,"title":{},"body":{"classes/Chart.html":{}}}],["package",{"_index":4519,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4578,"title":{},"body":{"index.html":{}}}],["packagr/issues/641",{"_index":3868,"title":{},"body":{"classes/Renderer.html":{}}}],["packagr/ng",{"_index":3867,"title":{},"body":{"classes/Renderer.html":{}}}],["padding",{"_index":160,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["padding.bottom",{"_index":2482,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.right",{"_index":2477,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["padding.top",{"_index":2483,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["page",{"_index":4879,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"license.html":{}}}],["palette",{"_index":3197,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["palette.ts",{"_index":1055,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:14",{"_index":1064,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:31",{"_index":1067,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:35",{"_index":1069,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:39",{"_index":1071,"title":{},"body":{"classes/ChartPalette.html":{}}}],["param",{"_index":334,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["parameter",{"_index":2681,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"injectables/ThresholdsService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["parent",{"_index":1232,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{}}}],["parentid",{"_index":3318,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["parsefloat(transformval.slice(transformval.indexof",{"_index":2712,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["parseint(ticks",{"_index":200,"title":{},"body":{"classes/AxisConfig.html":{}}}],["part",{"_index":1896,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["partial",{"_index":718,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["particular",{"_index":4818,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3794,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["party",{"_index":4774,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1664,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["passing",{"_index":2325,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["patent",{"_index":4724,"title":{},"body":{"license.html":{}}}],["path",{"_index":1656,"title":{},"body":{"classes/Grid.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/Renderer.html":{}}}],["path's",{"_index":2102,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["path.getboundingclientrect",{"_index":3567,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"x",{"_index":3568,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"y",{"_index":3572,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path_",{"_index":1653,"title":{},"body":{"classes/Grid.html":{}}}],["path__outline",{"_index":3710,"title":{},"body":{"classes/PathMarker.html":{}}}],["pathmarker",{"_index":3696,"title":{"classes/PathMarker.html":{}},"body":{"classes/PathMarker.html":{}}}],["pathrect",{"_index":3566,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.height",{"_index":3574,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.width",{"_index":3570,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["patterns",{"_index":4560,"title":{},"body":{"index.html":{}}}],["payload",{"_index":797,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["peer",{"_index":4521,"title":{},"body":{"dependencies.html":{}}}],["pending",{"_index":2365,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["pentagon",{"_index":5005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":2976,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["percent",{"_index":4641,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1945,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["perform",{"_index":2002,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["performs",{"_index":4387,"title":{},"body":{"classes/UtilityService.html":{}}}],["period",{"_index":2774,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["periods",{"_index":4179,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["permission",{"_index":4799,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":4648,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":4712,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":4766,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2959,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["pickby",{"_index":1193,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pickby(datapoints",{"_index":1252,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pie",{"_index":1594,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["pie().sort(null",{"_index":1602,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piearcdata",{"_index":3804,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.endangle",{"_index":3815,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.startangle",{"_index":3814,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["pieces",{"_index":4563,"title":{},"body":{"index.html":{}}}],["piegenerator",{"_index":1601,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["piegenerator(arcdata",{"_index":1604,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["pierenderer",{"_index":3721,"title":{"classes/PieRenderer.html":{}},"body":{"classes/PieRenderer.html":{}}}],["pipe",{"_index":3218,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":1469,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["pixel",{"_index":2019,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["pixels",{"_index":2039,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["placed",{"_index":1448,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["placement",{"_index":1703,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{}}}],["places",{"_index":4222,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["play",{"_index":4600,"title":{},"body":{"index.html":{}}}],["playing",{"_index":1402,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["plotted",{"_index":2895,"title":{},"body":{"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/XYAccessors.html":{}}}],["plugin",{"_index":476,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["plugin's",{"_index":2001,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["plugin.chart",{"_index":616,"title":{},"body":{"classes/Chart.html":{}}}],["plugin.ts",{"_index":436,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["plugin.ts:108",{"_index":4517,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:11",{"_index":1108,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:126",{"_index":1434,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:13",{"_index":1109,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:131",{"_index":1436,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:14",{"_index":962,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:15",{"_index":1106,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:17",{"_index":961,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:20",{"_index":3087,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:24",{"_index":965,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:26",{"_index":3013,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:27",{"_index":3089,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:28",{"_index":1177,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:29",{"_index":4516,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:3",{"_index":1104,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:30",{"_index":1188,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:32",{"_index":1185,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:33",{"_index":3012,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:34",{"_index":1172,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:36",{"_index":1187,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:39",{"_index":3014,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:40",{"_index":964,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:41",{"_index":4515,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:43",{"_index":1184,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:49",{"_index":1171,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:5",{"_index":449,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["plugin.ts:51",{"_index":1176,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:56",{"_index":1190,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:63",{"_index":1430,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:65",{"_index":1429,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:68",{"_index":1189,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:7",{"_index":1105,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:70",{"_index":1433,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:75",{"_index":1431,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:81",{"_index":1426,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:88",{"_index":1432,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:9",{"_index":1107,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:90",{"_index":4518,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:94",{"_index":3088,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:98",{"_index":1435,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["pluginindex",{"_index":618,"title":{},"body":{"classes/Chart.html":{}}}],["plugins",{"_index":552,"title":{"additional-documentation/plugins.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["plugins.push(new",{"_index":2433,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/interaction/interaction",{"_index":2347,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{}}}],["plugins/mouse",{"_index":2350,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["plugins/render",{"_index":601,"title":{},"body":{"classes/Chart.html":{}}}],["plugins/types",{"_index":4406,"title":{},"body":{"classes/UtilityService.html":{}}}],["plus",{"_index":2051,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["point",{"_index":251,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["point(s",{"_index":1179,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["pointer",{"_index":1806,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["pointerevents",{"_index":2144,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["points",{"_index":455,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["polyfill",{"_index":885,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["popover",{"_index":1112,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover's",{"_index":1144,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover'},{'name",{"_index":508,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["popover.component",{"_index":3685,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["popover.component.html",{"_index":1114,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.less",{"_index":1113,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts",{"_index":1111,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:30",{"_index":1118,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:32",{"_index":1120,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:34",{"_index":1122,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:36",{"_index":1126,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:39",{"_index":1116,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:41",{"_index":1123,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover/chart",{"_index":1110,"title":{},"body":{"components/ChartPopoverComponent.html":{},"modules/NuiChartsModule.html":{}}}],["popovercomponent",{"_index":1124,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popovers",{"_index":1203,"title":{"additional-documentation/plugins/popovers.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["popovertargetposition",{"_index":1168,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["populate",{"_index":3211,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["portion",{"_index":4094,"title":{},"body":{"classes/SvgMarker.html":{}}}],["position",{"_index":944,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["position.height",{"_index":1398,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.left",{"_index":1150,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.top",{"_index":1152,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.width",{"_index":1148,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.x",{"_index":1395,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.y",{"_index":1396,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["positioned",{"_index":1446,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":1441,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["positions",{"_index":452,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["possibility",{"_index":4850,"title":{},"body":{"license.html":{}}}],["possible",{"_index":3213,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["potential",{"_index":2282,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["potentially",{"_index":3175,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["power",{"_index":4632,"title":{},"body":{"license.html":{}}}],["pre",{"_index":86,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["preferred",{"_index":4650,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":1655,"title":{},"body":{"classes/Grid.html":{}}}],["prepare",{"_index":4720,"title":{},"body":{"license.html":{}}}],["preprocess",{"_index":1995,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["preprocessed",{"_index":1994,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["prerequisite",{"_index":2135,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["prescribed",{"_index":1971,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["present",{"_index":746,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["prev",{"_index":975,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"interfaces/IScaleSVGElement.html":{}}}],["prevent",{"_index":1019,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["previous",{"_index":1380,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["previouschart",{"_index":899,"title":{},"body":{"components/ChartComponent.html":{}}}],["previouschart.destroy",{"_index":901,"title":{},"body":{"components/ChartComponent.html":{}}}],["primarily",{"_index":851,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["primary",{"_index":3355,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["primitive",{"_index":252,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["printed",{"_index":4878,"title":{},"body":{"license.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["problems",{"_index":2284,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["process",{"_index":4392,"title":{},"body":{"classes/UtilityService.html":{}}}],["processdatapoints(datapoints",{"_index":1250,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["processed",{"_index":1076,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["processedcolor",{"_index":3756,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedcolorprovider",{"_index":1075,"title":{"classes/ProcessedColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["processedcolorprovider(this.standardcolors",{"_index":1095,"title":{},"body":{"classes/ChartPalette.html":{}}}],["processedcolorprovider:15",{"_index":4108,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolorprovider:30",{"_index":4109,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolors",{"_index":3752,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedseriesset",{"_index":3234,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processedseriesset.filter(s",{"_index":3237,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processedseriesset.map(s",{"_index":3241,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processes",{"_index":3741,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processhighlighteddatapoints",{"_index":445,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processhighlighteddatapoints(datapoints",{"_index":469,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processor",{"_index":3171,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["product",{"_index":4803,"title":{},"body":{"license.html":{}}}],["project",{"_index":4590,"title":{},"body":{"index.html":{}}}],["projected",{"_index":3370,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projecteddescription",{"_index":3390,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projects",{"_index":4589,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":4759,"title":{},"body":{"license.html":{}}}],["propagate",{"_index":2549,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["property",{"_index":1162,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{}}}],["props",{"_index":1394,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fx",{"_index":1399,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fy",{"_index":1400,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["protected",{"_index":682,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TimeScale.html":{}}}],["provide",{"_index":865,"title":{},"body":{"components/ChartComponent.html":{},"index.html":{},"license.html":{}}}],["provided",{"_index":1646,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providedvalues",{"_index":3982,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider",{"_index":815,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["provider.ts",{"_index":3495,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{}}}],["provider.ts:10",{"_index":3980,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:13",{"_index":3505,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["provider.ts:15",{"_index":3750,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:16",{"_index":3506,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["provider.ts:20",{"_index":4107,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["provider.ts:26",{"_index":3981,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:30",{"_index":3751,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:7",{"_index":3504,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["provider.ts:9",{"_index":3748,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{}}}],["providers",{"_index":32,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"modules/NuiChartsModule.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2079,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["public",{"_index":94,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["publicly",{"_index":4721,"title":{},"body":{"license.html":{}}}],["publishes",{"_index":458,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["publishrenderstates",{"_index":3297,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pull",{"_index":3673,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["purpose",{"_index":4699,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4631,"title":{},"body":{"license.html":{}}}],["put",{"_index":641,"title":{},"body":{"classes/Chart.html":{}}}],["px",{"_index":735,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quantity",{"_index":5031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["querylist",{"_index":1306,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quickly",{"_index":4567,"title":{},"body":{"index.html":{}}}],["quite",{"_index":4575,"title":{},"body":{"index.html":{}}}],["r",{"_index":2166,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/UtilityService.html":{}}}],["radial",{"_index":3735,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["radialaccessors",{"_index":2297,"title":{"classes/RadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["radialpopoverplugin",{"_index":3761,"title":{"classes/RadialPopoverPlugin.html":{}},"body":{"classes/RadialPopoverPlugin.html":{}}}],["radialrenderer",{"_index":966,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["radialrenderer:110",{"_index":3731,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:119",{"_index":3733,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:40",{"_index":3725,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:46",{"_index":3728,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:94",{"_index":3729,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialtooltipsplugin",{"_index":3782,"title":{"classes/RadialTooltipsPlugin.html":{}},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radians",{"_index":3830,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radii",{"_index":4546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["radius",{"_index":968,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["range",{"_index":2185,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["range(range",{"_index":2186,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["range.reverse",{"_index":3957,"title":{},"body":{"classes/Scale.html":{}}}],["range[0",{"_index":3738,"title":{},"body":{"classes/PieRenderer.html":{}}}],["range[1",{"_index":4430,"title":{},"body":{"classes/UtilityService.html":{}}}],["ranges",{"_index":2084,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["rarely",{"_index":1976,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ratio",{"_index":4105,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiodef",{"_index":4130,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotodark",{"_index":4124,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotolight",{"_index":4121,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["raw",{"_index":4398,"title":{},"body":{"classes/UtilityService.html":{}}}],["rc",{"_index":4110,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["reaches",{"_index":1951,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["readable",{"_index":4768,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["reason",{"_index":4869,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2157,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["recalculate",{"_index":2780,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["recalculated",{"_index":2043,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["recalculations",{"_index":2791,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["received",{"_index":456,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["recent",{"_index":1180,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["recipients",{"_index":4754,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":4877,"title":{},"body":{"license.html":{}}}],["reconcilemarginsdebounce",{"_index":2363,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconcilemarginswithdebounce(oldmargin",{"_index":2794,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["reconfigurechart(chart",{"_index":4079,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["reconsider",{"_index":1824,"title":{},"body":{"classes/Grid.html":{}}}],["record",{"_index":803,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["rect",{"_index":2846,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.attrs",{"_index":2865,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.empty",{"_index":2855,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.style(\"filter",{"_index":2858,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rectangleaccessors",{"_index":204,"title":{"classes/RectangleAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:34",{"_index":211,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:35",{"_index":212,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["redistributing",{"_index":4822,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":4749,"title":{},"body":{"license.html":{}}}],["redraw",{"_index":868,"title":{},"body":{"components/ChartComponent.html":{}}}],["reduce",{"_index":3745,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["refactor",{"_index":1735,"title":{},"body":{"classes/Grid.html":{}}}],["refactoring",{"_index":1733,"title":{},"body":{"classes/Grid.html":{}}}],["reference",{"_index":4423,"title":{},"body":{"classes/UtilityService.html":{},"index.html":{}}}],["referenced",{"_index":2285,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":4938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_event",{"_index":887,"title":{},"body":{"components/ChartComponent.html":{},"miscellaneous/variables.html":{}}}],["regarding",{"_index":2021,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["registering",{"_index":813,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["registers",{"_index":847,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["regularshapes",{"_index":4921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":3530,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["relation",{"_index":2016,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["relative",{"_index":1509,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/TextColorProvider.html":{}}}],["relativeposition",{"_index":1513,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.x",{"_index":1517,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.y",{"_index":1519,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["release",{"_index":4581,"title":{},"body":{"index.html":{}}}],["relying",{"_index":645,"title":{},"body":{"classes/Chart.html":{}}}],["remain",{"_index":4675,"title":{},"body":{"license.html":{}}}],["remainder",{"_index":4539,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["removal",{"_index":2836,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["remove",{"_index":2975,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["removemarker",{"_index":3517,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removemarker(target",{"_index":3533,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removeplugin",{"_index":535,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin(classref",{"_index":566,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin?(classref",{"_index":1998,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["removeplugins",{"_index":536,"title":{},"body":{"classes/Chart.html":{}}}],["removeplugins(...classrefs",{"_index":568,"title":{},"body":{"classes/Chart.html":{}}}],["rename",{"_index":837,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["render",{"_index":642,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{}}}],["render_area_height_correction",{"_index":1697,"title":{},"body":{"classes/Grid.html":{}}}],["render_area_width_correction",{"_index":1699,"title":{},"body":{"classes/Grid.html":{}}}],["rendercontainers",{"_index":3634,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["rendered",{"_index":1651,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["renderengine",{"_index":561,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["renderengine(lasagna",{"_index":689,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin",{"_index":600,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin.chart",{"_index":649,"title":{},"body":{"classes/Chart.html":{}}}],["renderer",{"_index":303,"title":{"classes/Renderer.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer#draw",{"_index":2840,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#getdatapointposition",{"_index":3637,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer#getrequiredlayers",{"_index":2866,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#highlightdatapoint",{"_index":3636,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer's",{"_index":4189,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderer.barcontainerclass",{"_index":392,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.config.strokewidth",{"_index":3438,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.default_config",{"_index":3869,"title":{},"body":{"classes/Renderer.html":{}}}],["renderer.drawline(renderseries",{"_index":3449,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getcontainerstatestyles",{"_index":387,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.getdatapoint(renderseries",{"_index":401,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderer.getdatapointposition(renderseries.dataseries",{"_index":3453,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getouterradius(rscale.range",{"_index":3811,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["renderer.ts",{"_index":2817,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer.ts:12",{"_index":4500,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer.ts:14",{"_index":4502,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer.ts:16",{"_index":3596,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:20",{"_index":3601,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:26",{"_index":3599,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:29",{"_index":4501,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer.ts:31",{"_index":3598,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:49",{"_index":3990,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:50",{"_index":3989,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer:107",{"_index":3633,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:116",{"_index":3631,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:128",{"_index":3624,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:152",{"_index":3620,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:169",{"_index":3608,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:189",{"_index":3626,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:22",{"_index":3593,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:39",{"_index":3592,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:44",{"_index":3595,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:52",{"_index":3602,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:62",{"_index":3618,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:73",{"_index":3612,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:84",{"_index":3629,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:94",{"_index":3594,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["rendererconfig",{"_index":4172,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers",{"_index":646,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["renderers/area/area",{"_index":4228,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/accessors/status",{"_index":4229,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/bar",{"_index":4230,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/types",{"_index":475,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["renderers/constants",{"_index":4231,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/line/line",{"_index":4232,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/radial/radial",{"_index":967,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["renderers/side",{"_index":4233,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/types",{"_index":761,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["renderersubject",{"_index":300,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["renderersubject.next",{"_index":398,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["rendering",{"_index":1587,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["rendering_area_clip_path_prefix",{"_index":1635,"title":{},"body":{"classes/Grid.html":{}}}],["rendering_area_layer_name",{"_index":1636,"title":{},"body":{"classes/Grid.html":{}}}],["renderingarea",{"_index":1706,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaattrs",{"_index":1794,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippath",{"_index":1705,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs",{"_index":1789,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs[\"y",{"_index":1793,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer",{"_index":1803,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer.append(\"rect",{"_index":1805,"title":{},"body":{"classes/Grid.html":{}}}],["renderlayername",{"_index":332,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["renderlayername.unclippeddata",{"_index":2835,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rendermarkersvg(svg",{"_index":1033,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["renderseries",{"_index":298,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["renderseries.containers[renderlayername.data",{"_index":385,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.containers[renderlayername.unclippeddata",{"_index":2842,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries",{"_index":2843,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.accessors",{"_index":2845,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data",{"_index":2851,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data[0",{"_index":3444,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.dataseries.data[datapointindex",{"_index":402,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderseries.dataseries.id",{"_index":3442,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.scales",{"_index":2844,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderstate",{"_index":333,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["renderstate.deemphasized",{"_index":395,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.default",{"_index":394,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.emphasisstate",{"_index":3333,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstate.emphasized",{"_index":396,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.hidden",{"_index":801,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.visible",{"_index":3314,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstatedata",{"_index":574,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["renderstates",{"_index":2412,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["renderstatesindex",{"_index":3140,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["repeated",{"_index":2777,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["replaced",{"_index":3265,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["replacement",{"_index":4382,"title":{},"body":{"classes/UtilityService.html":{}}}],["report",{"_index":2914,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["represent",{"_index":3613,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["representation",{"_index":3604,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["representatives",{"_index":4692,"title":{},"body":{"license.html":{}}}],["represented",{"_index":787,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{}}}],["representing",{"_index":762,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["represents",{"_index":809,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"injectables/ThresholdsService.html":{}}}],["reproduce",{"_index":4719,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":4805,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":4614,"title":{},"body":{"license.html":{}}}],["request",{"_index":1246,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["require",{"_index":1974,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":5015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1984,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["requirements",{"_index":3786,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["requires",{"_index":4450,"title":{},"body":{"classes/UtilityService.html":{}}}],["reset",{"_index":2032,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"modules/NuiChartsModule.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"overview.html":{}}}],["resets",{"_index":3248,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetseries",{"_index":3143,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetvisibleseries",{"_index":793,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["resize",{"_index":883,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["resized",{"_index":2623,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["resizehandler",{"_index":890,"title":{},"body":{"components/ChartComponent.html":{}}}],["resizeobserver",{"_index":869,"title":{},"body":{"components/ChartComponent.html":{}}}],["respond",{"_index":1199,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["responsibility",{"_index":4861,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":4820,"title":{},"body":{"license.html":{}}}],["restore",{"_index":2626,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{}}}],["result",{"_index":78,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["result[next",{"_index":5041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[next.id",{"_index":3003,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["resulting",{"_index":2047,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{},"license.html":{}}}],["results",{"_index":80,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["resume",{"_index":3267,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["retain",{"_index":4763,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":246,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["retrieves",{"_index":3174,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["return",{"_index":196,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":253,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["returning",{"_index":340,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["returns",{"_index":179,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["reused",{"_index":710,"title":{},"body":{"classes/Chart.html":{}}}],["reverse",{"_index":2192,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed",{"_index":2194,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed(reversed",{"_index":2195,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["review",{"_index":129,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["revisions",{"_index":4671,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":1072,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(color",{"_index":1099,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.dark",{"_index":4125,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.light",{"_index":4123,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor",{"_index":1098,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgbcolor.b",{"_index":4151,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.g",{"_index":4149,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.opacity",{"_index":1100,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbcolor.r",{"_index":4146,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.tostring",{"_index":1102,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbinput",{"_index":4120,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rich",{"_index":518,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["richlegendtilecomponent",{"_index":517,"title":{"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["rid",{"_index":3450,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["right",{"_index":114,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["rights",{"_index":4858,"title":{},"body":{"license.html":{}}}],["rightscaleid",{"_index":2375,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscaleid(id",{"_index":2377,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rightscalelabelx",{"_index":2515,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["risks",{"_index":4824,"title":{},"body":{"license.html":{}}}],["round",{"_index":2125,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["royalty",{"_index":4716,"title":{},"body":{"license.html":{}}}],["rs.series",{"_index":2417,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rs.state",{"_index":2416,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["rscale",{"_index":3807,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["rsrgb",{"_index":4145,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rule",{"_index":5066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":1383,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["runs",{"_index":1366,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["rxjs",{"_index":321,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["rxjs/operators",{"_index":584,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["s",{"_index":59,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IScaleSVGElement.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"miscellaneous/variables.html":{}}}],["s.id",{"_index":3305,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.indexof(\"__",{"_index":3317,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.substring(0",{"_index":3319,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.renderstate",{"_index":3308,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.showinlegend",{"_index":3238,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s?.scales[\"y",{"_index":2422,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["same",{"_index":818,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["sample",{"_index":2604,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale",{"_index":284,"title":{"classes/Scale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scale's",{"_index":2172,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["scale((node",{"_index":2767,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.__domaincalculatedwithticks",{"_index":2392,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.bandwidth",{"_index":2197,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.domaincalculator",{"_index":2390,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick",{"_index":2556,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[\"tick\"](datum",{"_index":2557,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.formatters[fallback_formatter",{"_index":3050,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.formatters[this.formattername",{"_index":3049,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.id",{"_index":2562,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.innerscale",{"_index":2201,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.iscontinuous",{"_index":2563,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.range()[1",{"_index":2770,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scale.ts",{"_index":3455,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:10",{"_index":4359,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:12",{"_index":3642,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:17",{"_index":3647,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:19",{"_index":3465,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:22",{"_index":3657,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:23",{"_index":3466,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:26",{"_index":4361,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:27",{"_index":3467,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale.ts:28",{"_index":3650,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:29",{"_index":3651,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:31",{"_index":3468,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:32",{"_index":4362,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:34",{"_index":3643,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:35",{"_index":3644,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:36",{"_index":3645,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:41",{"_index":3646,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:45",{"_index":3648,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:49",{"_index":3649,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:53",{"_index":3652,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:58",{"_index":3653,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:59",{"_index":3654,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:6",{"_index":3641,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:60",{"_index":3655,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:7",{"_index":3640,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:8",{"_index":3460,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale:10",{"_index":3463,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:11",{"_index":3461,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:12",{"_index":3462,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:13",{"_index":3464,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:31",{"_index":3469,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:33",{"_index":3474,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:35",{"_index":3475,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:43",{"_index":3477,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:44",{"_index":3478,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:45",{"_index":3479,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:55",{"_index":3470,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:56",{"_index":3471,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:57",{"_index":3472,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:67",{"_index":3473,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:74",{"_index":3476,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:78",{"_index":3480,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:83",{"_index":3481,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:84",{"_index":3482,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:85",{"_index":3483,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale?.id",{"_index":2384,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["scaleid",{"_index":2030,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["scalekey",{"_index":283,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scalelinear",{"_index":1902,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{}}}],["scalelinear](https://d3indepth.com/scales/#scalelinear",{"_index":3484,"title":{},"body":{"classes/LinearScale.html":{}}}],["scalename",{"_index":3607,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["scales",{"_index":289,"title":{"additional-documentation/advanced-usage/scales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["scales(scales",{"_index":1717,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["scales.reduce(callbackfn",{"_index":4480,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales.x.convert(dataseries.accessors.data.x(point",{"_index":4509,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(dataseries.accessors.data.y(point",{"_index":4510,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(end",{"_index":2861,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.convert(start",{"_index":2864,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.range()[0",{"_index":2862,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales/helpers/invert",{"_index":4407,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales/types",{"_index":1907,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["scalesindex",{"_index":1682,"title":{"interfaces/ScalesIndex.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scaletime",{"_index":4358,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaletime](https://d3indepth.com/scales/#scaletime",{"_index":4365,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaling",{"_index":1692,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["scenario",{"_index":2786,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["screen",{"_index":1512,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["scrollable",{"_index":2018,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["se",{"_index":3795,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":4389,"title":{},"body":{"classes/UtilityService.html":{}}}],["searching",{"_index":286,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["second",{"_index":2801,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["secondary",{"_index":3357,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["section",{"_index":3838,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["sectionindex",{"_index":3832,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["sections",{"_index":3839,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["see",{"_index":134,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":312,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["select(\"rect",{"_index":3077,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["select(elementstofilter[0]).text",{"_index":2669,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group",{"_index":2542,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"pointer",{"_index":2622,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"sw",{"_index":2572,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(group).classed(\"tick",{"_index":2537,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(next).text",{"_index":2667,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this).attrs(barstylesfn(renderstate",{"_index":397,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["select(this).classed(\"sw",{"_index":2531,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["select(this.borders.bottom",{"_index":1830,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.left",{"_index":1851,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.right",{"_index":1848,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.top",{"_index":1843,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.element",{"_index":631,"title":{},"body":{"classes/Chart.html":{}}}],["select(tooltip.getoverlayelement",{"_index":1418,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["select_data_point",{"_index":4939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select_data_point_event",{"_index":4922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":3001,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selectall(\".tick",{"_index":2464,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selectallaxislabels(axisgroup",{"_index":2631,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["selected",{"_index":3361,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["selecteddatapointidx",{"_index":388,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatapointidxfn",{"_index":280,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatpointidxfn",{"_index":281,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["selection",{"_index":314,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["selection/issues/81",{"_index":2919,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[0",{"_index":2992,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[1",{"_index":2993,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selector",{"_index":487,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"classes/UtilityService.html":{}}}],["selector(haystack[mid",{"_index":4467,"title":{},"body":{"classes/UtilityService.html":{}}}],["sell",{"_index":4727,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":4540,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sense",{"_index":2645,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["sent",{"_index":4691,"title":{},"body":{"license.html":{}}}],["separable",{"_index":4676,"title":{},"body":{"license.html":{}}}],["separate",{"_index":4795,"title":{},"body":{"license.html":{}}}],["separated",{"_index":812,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["separatorindex",{"_index":3316,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sequence",{"_index":4948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequential",{"_index":1078,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialchartmarkerprovider",{"_index":3970,"title":{"classes/SequentialChartMarkerProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{}}}],["sequentialchartmarkerprovider(chart_markers",{"_index":4008,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sequentialcolorprovider",{"_index":1077,"title":{"classes/SequentialColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider",{"_index":3972,"title":{"classes/SequentialValueProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["sequentialvalueprovider:16",{"_index":3974,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider:26",{"_index":3975,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["series",{"_index":13,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["series'},{'name",{"_index":516,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["series).valueof",{"_index":372,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.accessors.data",{"_index":353,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.accessors.data?.x?.(d",{"_index":4513,"title":{},"body":{"classes/XYRenderer.html":{}}}],["series.component",{"_index":3690,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series.component.html",{"_index":3339,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts",{"_index":3338,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:100",{"_index":3366,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:103",{"_index":3364,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:109",{"_index":3351,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:128",{"_index":3367,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:137",{"_index":3368,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:144",{"_index":3369,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:29",{"_index":3352,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:39",{"_index":3359,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:48",{"_index":3373,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:55",{"_index":3360,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:60",{"_index":3363,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:65",{"_index":3354,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:70",{"_index":3356,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:75",{"_index":3358,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:80",{"_index":3353,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:86",{"_index":3362,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:89",{"_index":3376,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:96",{"_index":3365,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.data",{"_index":360,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/XYRenderer.html":{}}}],["series.data.length",{"_index":375,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["series.id",{"_index":240,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.name",{"_index":239,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.renderstate",{"_index":3311,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["series.state",{"_index":1475,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["series.ts",{"_index":1521,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:10",{"_index":1525,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:11",{"_index":1523,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:5",{"_index":1526,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:6",{"_index":1524,"title":{},"body":{"classes/DataSeries.html":{}}}],["series/legend",{"_index":3337,"title":{},"body":{"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series_id_suffix",{"_index":4157,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["series_state_change",{"_index":4940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series_state_change_event",{"_index":586,"title":{},"body":{"classes/Chart.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["seriesaccessor",{"_index":37,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["seriescolor",{"_index":3112,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesgroups",{"_index":3299,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid",{"_index":3320,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid].push(s.id",{"_index":3321,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["serieshasadditionalcontent",{"_index":3900,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["serieshighlight",{"_index":3216,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesicon",{"_index":3113,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesid",{"_index":238,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["seriesindex",{"_index":3300,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor",{"_index":3196,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor(series",{"_index":3231,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesrenderstate",{"_index":3345,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesrenderstate(renderstate",{"_index":3387,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesscale",{"_index":5037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesscale.iscontinuous",{"_index":5039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesset",{"_index":578,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["seriesset.filter(s",{"_index":3307,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesstatessubject",{"_index":606,"title":{},"body":{"classes/Chart.html":{}}}],["seriestrackbyfn(index",{"_index":3256,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesunitlabel",{"_index":3114,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesvisibilitymap",{"_index":1463,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["serve",{"_index":1609,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["service",{"_index":846,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/Grid.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["service.ts",{"_index":4153,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:205",{"_index":4212,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:229",{"_index":4208,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:261",{"_index":4204,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:27",{"_index":4168,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:295",{"_index":4194,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:363",{"_index":4199,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:374",{"_index":4201,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:40",{"_index":4217,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:76",{"_index":4173,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["set",{"_index":198,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["set_domain",{"_index":4941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set_domain_event",{"_index":2907,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["setactive(active",{"_index":3371,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setapproximateticks(ticks",{"_index":180,"title":{},"body":{"classes/AxisConfig.html":{}}}],["setattributes(attrs",{"_index":3713,"title":{},"body":{"classes/PathMarker.html":{}}}],["setcolor",{"_index":2220,"title":{},"body":{"interfaces/IChartMarker.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setcolor(color",{"_index":1997,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setdatapointstate",{"_index":3590,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setdatapointstate(target",{"_index":3630,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setgroupstate",{"_index":3144,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupstate(groupid",{"_index":3155,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility",{"_index":3145,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility(groupid",{"_index":3158,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setinteractive(interactive",{"_index":3374,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setrenderstate",{"_index":3998,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(_seriesid",{"_index":4017,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(seriesid",{"_index":3332,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sets",{"_index":2040,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{}}}],["setseriesrenderstate(renderstate",{"_index":3377,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setseriesstate",{"_index":3591,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstate(rendercontainers",{"_index":3632,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstates",{"_index":537,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["setseriesstates(renderstatedata",{"_index":571,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["setter",{"_index":2083,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["settimeout",{"_index":1039,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{}}}],["setting",{"_index":2045,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["settings",{"_index":3173,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setvisibility(seriesid",{"_index":3336,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seven",{"_index":4957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shade",{"_index":4961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":4616,"title":{},"body":{"license.html":{}}}],["shape",{"_index":1595,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["shapes",{"_index":5006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["share",{"_index":819,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["shares",{"_index":4644,"title":{},"body":{"license.html":{}}}],["shifted",{"_index":3821,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["shifting",{"_index":152,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["short",{"_index":1908,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["shorthand",{"_index":2188,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["show",{"_index":463,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showbottomaxis",{"_index":420,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/SparkChartAssist.html":{}}}],["showing",{"_index":1201,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["showinlegend",{"_index":1993,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["shown",{"_index":1992,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/XYRenderer.html":{}}}],["shows",{"_index":1500,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["showsubject",{"_index":442,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showtopborder",{"_index":3996,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["side",{"_index":1698,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["side_indicators_layer",{"_index":2838,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["sideindicator",{"_index":4352,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors",{"_index":2828,"title":{"classes/SideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors.series",{"_index":4347,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer",{"_index":2832,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer(rendererconfig",{"_index":4345,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators",{"_index":4344,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators.push(sideindicator",{"_index":4355,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sides",{"_index":2035,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["signature",{"_index":1912,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["similar",{"_index":1732,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["simple",{"_index":4576,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":880,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["simplezones",{"_index":4211,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplezones.map((z",{"_index":4291,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplified",{"_index":2871,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["simulation",{"_index":1312,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulation.on(\"tick",{"_index":1415,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulationnodedatum",{"_index":1313,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["single",{"_index":2024,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["six",{"_index":4956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":958,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/MarkerUtils.html":{}}}],["sizes",{"_index":2038,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["slice",{"_index":3829,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["small",{"_index":4547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["smaller",{"_index":2068,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["smallestdiff",{"_index":2706,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["software",{"_index":4653,"title":{},"body":{"license.html":{}}}],["solarwinds",{"_index":4884,"title":{},"body":{"license.html":{}}}],["sole",{"_index":4860,"title":{},"body":{"license.html":{}}}],["solely",{"_index":4819,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":4556,"title":{},"body":{"index.html":{}}}],["solve",{"_index":429,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"index.html":{}}}],["solves",{"_index":4209,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby",{"_index":4224,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby(breakpoints",{"_index":4284,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sourceaccessors",{"_index":4262,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceprovider",{"_index":3749,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["sourceseries",{"_index":4185,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data",{"_index":4263,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data.x",{"_index":4246,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data.length",{"_index":4237,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data[0].__thresholds",{"_index":4238,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.id",{"_index":4254,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.scales",{"_index":4296,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["space",{"_index":1615,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["spark",{"_index":432,"title":{"additional-documentation/chart-types/spark.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["spark.chart",{"_index":4061,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.chart.update(spark.chartseriesset",{"_index":4064,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.id",{"_index":4058,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist",{"_index":3991,"title":{"classes/SparkChartAssist.html":{}},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig",{"_index":4040,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig(new",{"_index":4043,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparks",{"_index":3997,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spec\\.ts",{"_index":5016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":3785,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["specific",{"_index":1973,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["specified",{"_index":780,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["specifying",{"_index":2875,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["square",{"_index":4975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../automatic",{"_index":4916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../bar",{"_index":4898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chart",{"_index":4923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":4532,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../datetime",{"_index":4909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grid.ts",{"_index":4897,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../palettes.ts",{"_index":4901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../radial",{"_index":4906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":4908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":4530,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/chart",{"_index":805,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["src/chart/chart.component.ts",{"_index":860,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:33",{"_index":877,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:35",{"_index":879,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:37",{"_index":875,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:82",{"_index":878,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/charts.module.ts",{"_index":3669,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["src/constants.ts",{"_index":4924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/chart",{"_index":741,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/chart.ts",{"_index":523,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:152",{"_index":577,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:156",{"_index":579,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:160",{"_index":565,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:166",{"_index":555,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:176",{"_index":573,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:19",{"_index":543,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:20",{"_index":542,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:21",{"_index":546,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:22",{"_index":544,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:31",{"_index":540,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:41",{"_index":558,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:45",{"_index":556,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:49",{"_index":560,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:53",{"_index":559,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:57",{"_index":549,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:62",{"_index":567,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:70",{"_index":551,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:76",{"_index":569,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:82",{"_index":563,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:86",{"_index":554,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/common/chart",{"_index":1103,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["src/core/common/data",{"_index":1520,"title":{},"body":{"classes/DataSeries.html":{}}}],["src/core/common/event",{"_index":1619,"title":{},"body":{"classes/EventBus.html":{}}}],["src/core/common/palette/chart",{"_index":1054,"title":{},"body":{"classes/ChartPalette.html":{}}}],["src/core/common/palette/mapped",{"_index":3494,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["src/core/common/palette/markers/path",{"_index":3697,"title":{},"body":{"classes/PathMarker.html":{}}}],["src/core/common/palette/markers/svg",{"_index":4093,"title":{},"body":{"classes/SvgMarker.html":{}}}],["src/core/common/palette/palettes.ts",{"_index":4943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/palette/processed",{"_index":3740,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["src/core/common/palette/sequential",{"_index":3971,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["src/core/common/palette/text",{"_index":4103,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["src/core/common/renderer.ts",{"_index":3844,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:107",{"_index":3861,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:116",{"_index":3860,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:128",{"_index":3857,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:152",{"_index":3856,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:169",{"_index":3853,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:189",{"_index":3858,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:22",{"_index":3849,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:37",{"_index":3847,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:39",{"_index":3848,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:44",{"_index":3851,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:52",{"_index":3852,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:62",{"_index":3855,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:73",{"_index":3854,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:84",{"_index":3859,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:94",{"_index":3850,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/scales/constants.ts",{"_index":4942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/domain",{"_index":5032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/formatters/datetime",{"_index":5017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/linear",{"_index":3454,"title":{},"body":{"classes/LinearScale.html":{}}}],["src/core/common/scales/noop",{"_index":3639,"title":{},"body":{"classes/NoopScale.html":{}}}],["src/core/common/scales/scale.ts",{"_index":3927,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:10",{"_index":3930,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:11",{"_index":3928,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:12",{"_index":3929,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:13",{"_index":3931,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:31",{"_index":3932,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:33",{"_index":3937,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:35",{"_index":3938,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:38",{"_index":3947,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:43",{"_index":3940,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:44",{"_index":3941,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:45",{"_index":3942,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:55",{"_index":3933,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:56",{"_index":3934,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:57",{"_index":3935,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:67",{"_index":3936,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:74",{"_index":3939,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:78",{"_index":3943,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:83",{"_index":3944,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:84",{"_index":3945,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:85",{"_index":3946,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/time",{"_index":4357,"title":{},"body":{"classes/TimeScale.html":{}}}],["src/core/common/scales/types.ts",{"_index":2151,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/scales/types.ts:103",{"_index":2317,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:110",{"_index":2310,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:117",{"_index":2311,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:124",{"_index":2312,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:129",{"_index":2318,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:134",{"_index":2319,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:141",{"_index":2320,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:146",{"_index":2154,"title":{},"body":{"interfaces/IBandScale.html":{}}}],["src/core/common/scales/types.ts:16",{"_index":2247,"title":{},"body":{"interfaces/IFormatters.html":{}}}],["src/core/common/scales/types.ts:25",{"_index":3969,"title":{},"body":{"interfaces/ScalesIndex.html":{}}}],["src/core/common/scales/types.ts:66",{"_index":2314,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:73",{"_index":2315,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:81",{"_index":2309,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:89",{"_index":2313,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:96",{"_index":2316,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/types.ts",{"_index":1891,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/common/types.ts:139",{"_index":2228,"title":{},"body":{"interfaces/IDataAccessors.html":{}}}],["src/core/common/types.ts:143",{"_index":2812,"title":{},"body":{"interfaces/ISeriesAccessors.html":{}}}],["src/core/common/types.ts:170",{"_index":2230,"title":{},"body":{"interfaces/IDataSeries.html":{}}}],["src/core/common/types.ts:206",{"_index":2221,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:207",{"_index":2222,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:212",{"_index":2209,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:213",{"_index":2208,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:214",{"_index":2211,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:215",{"_index":2210,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:216",{"_index":2205,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:217",{"_index":2212,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:218",{"_index":2206,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:219",{"_index":2214,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:220",{"_index":2215,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:221",{"_index":2213,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:222",{"_index":2207,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:238",{"_index":2224,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:241",{"_index":2225,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:244",{"_index":2226,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:247",{"_index":2223,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:264",{"_index":2305,"title":{},"body":{"interfaces/IRenderContainers.html":{}}}],["src/core/common/types.ts:327",{"_index":2229,"title":{},"body":{"interfaces/IDataPointsPayload.html":{}}}],["src/core/common/types.ts:358",{"_index":2813,"title":{},"body":{"interfaces/ISetDomainEventPayload.html":{}}}],["src/core/common/types.ts:363",{"_index":2889,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/types.ts:364",{"_index":2891,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/utility.service.ts",{"_index":4368,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:179",{"_index":4386,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:204",{"_index":4403,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:224",{"_index":4397,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:24",{"_index":4395,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:63",{"_index":4377,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:75",{"_index":4404,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:92",{"_index":4380,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/grid/config/area",{"_index":82,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["src/core/grid/config/axis",{"_index":156,"title":{},"body":{"classes/AxisConfig.html":{}}}],["src/core/grid/config/bar",{"_index":256,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["src/core/grid/config/dimension",{"_index":1539,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["src/core/grid/config/grid",{"_index":1853,"title":{},"body":{"classes/GridConfig.html":{}}}],["src/core/grid/config/xy",{"_index":4484,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["src/core/grid/grid.ts",{"_index":1630,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/grid/grid.ts:108",{"_index":1666,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:110",{"_index":1668,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:112",{"_index":1669,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:121",{"_index":1672,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:123",{"_index":1674,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:125",{"_index":1675,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:134",{"_index":1659,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:174",{"_index":1661,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:179",{"_index":1676,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:190",{"_index":1678,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:206",{"_index":1679,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:27",{"_index":1647,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:30",{"_index":1642,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:33",{"_index":1654,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:36",{"_index":1648,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:39",{"_index":1657,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:51",{"_index":1658,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:54",{"_index":1645,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:88",{"_index":1670,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:93",{"_index":1671,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/types.ts",{"_index":2033,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/grid/types.ts:100",{"_index":2234,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:225",{"_index":2253,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:232",{"_index":2252,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:239",{"_index":2254,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:247",{"_index":2255,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:248",{"_index":2256,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:255",{"_index":2250,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:263",{"_index":2251,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:270",{"_index":2248,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:277",{"_index":2257,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:285",{"_index":2258,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:292",{"_index":2259,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:299",{"_index":2249,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:53",{"_index":2237,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:59",{"_index":2238,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:66",{"_index":2231,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:72",{"_index":2232,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:80",{"_index":2235,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:86",{"_index":2236,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:94",{"_index":2233,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/xy",{"_index":2322,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["src/core/plugins/chart",{"_index":956,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["src/core/plugins/interaction/interaction",{"_index":3007,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["src/core/plugins/radial",{"_index":3762,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["src/core/plugins/tooltips/bar",{"_index":434,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["src/core/plugins/tooltips/chart",{"_index":1424,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/tooltips/radial",{"_index":3783,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/types.ts",{"_index":2239,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["src/core/plugins/types.ts:6",{"_index":2263,"title":{},"body":{"interfaces/IInteractionValues.html":{}}}],["src/core/plugins/zoom",{"_index":2900,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["src/core/types.ts",{"_index":4535,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/gauge/constants.ts",{"_index":4538,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/legend/legend",{"_index":480,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["src/legend/legend.component.ts",{"_index":3109,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:16",{"_index":3129,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:21",{"_index":3115,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:26",{"_index":3116,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:31",{"_index":3122,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:36",{"_index":3123,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:41",{"_index":3125,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:46",{"_index":3127,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/types.ts",{"_index":4537,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/renderers/accessors/noop",{"_index":2291,"title":{},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["src/renderers/accessors/rectangle",{"_index":2301,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["src/renderers/accessors/xy",{"_index":2893,"title":{},"body":{"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/XYAccessors.html":{}}}],["src/renderers/area/area",{"_index":6,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["src/renderers/bar/accessors/bar",{"_index":203,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["src/renderers/bar/accessors/horizontal",{"_index":1872,"title":{},"body":{"classes/HorizontalBarAccessors.html":{}}}],["src/renderers/bar/accessors/status",{"_index":2879,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["src/renderers/bar/accessors/vertical",{"_index":4482,"title":{},"body":{"classes/VerticalBarAccessors.html":{}}}],["src/renderers/bar/highlight",{"_index":268,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["src/renderers/bar/types.ts",{"_index":2202,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["src/renderers/constants.ts",{"_index":5027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/line/interaction",{"_index":3422,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["src/renderers/line/line",{"_index":2264,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["src/renderers/line/missing",{"_index":3577,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["src/renderers/marker",{"_index":3511,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["src/renderers/noop",{"_index":3584,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["src/renderers/radial/accessors/radial",{"_index":2294,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["src/renderers/radial/gauge/donut",{"_index":1585,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["src/renderers/radial/pie",{"_index":3722,"title":{},"body":{"classes/PieRenderer.html":{}}}],["src/renderers/radial/radial",{"_index":5030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/side",{"_index":2815,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["src/renderers/types.ts",{"_index":2090,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["src/renderers/types.ts:105",{"_index":2261,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:107",{"_index":2262,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:110",{"_index":2260,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/xy",{"_index":4499,"title":{},"body":{"classes/XYRenderer.html":{}}}],["src/styles.less",{"_index":4592,"title":{},"body":{"index.html":{}}}],["src/test.ts",{"_index":5014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/thresholds/thresholds",{"_index":4152,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["src/thresholds/types.ts",{"_index":2870,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["sstring",{"_index":4451,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.charcodeat(0",{"_index":4456,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.length",{"_index":4453,"title":{},"body":{"classes/UtilityService.html":{}}}],["stack",{"_index":2788,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["stacked",{"_index":1696,"title":{},"body":{"classes/Grid.html":{}}}],["standard",{"_index":1957,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["standard_render_layers",{"_index":2820,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.foreground].order",{"_index":2939,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.unclippeddata",{"_index":2868,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["standardcolors",{"_index":1057,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["standardgaugecolor",{"_index":4531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standardgaugethresholdid",{"_index":4533,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standardgaugethresholdmarkerradius",{"_index":1905,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["standardlineargaugethickness",{"_index":4534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["standards",{"_index":93,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["start",{"_index":216,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["start.length",{"_index":365,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor",{"_index":354,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor?.(d",{"_index":359,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["started",{"_index":4554,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starting",{"_index":3797,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["starts",{"_index":1385,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startsimulation(tooltipindex",{"_index":1388,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startx",{"_index":1880,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["starty",{"_index":1884,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["state",{"_index":747,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["stated",{"_index":4725,"title":{},"body":{"license.html":{}}}],["statement",{"_index":4785,"title":{},"body":{"license.html":{}}}],["states",{"_index":3240,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["statestyles",{"_index":1935,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":96,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["stating",{"_index":4761,"title":{},"body":{"license.html":{}}}],["status",{"_index":417,"title":{"additional-documentation/chart-types/bar/status.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["status_category",{"_index":2882,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["status_domain",{"_index":2883,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statusaccessors",{"_index":2881,"title":{"classes/StatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["statusaccessors(colorprovider",{"_index":4240,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["statusaccessors.status_category",{"_index":2884,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statuses",{"_index":4218,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["step",{"_index":4220,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{}}}],["still",{"_index":2962,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["stop",{"_index":1381,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["stoppage",{"_index":4843,"title":{},"body":{"license.html":{}}}],["stored",{"_index":1980,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["strategies/bar",{"_index":269,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategies/line",{"_index":3423,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy",{"_index":2128,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strategy.ts",{"_index":271,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategy.ts:115",{"_index":302,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:12",{"_index":410,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:14",{"_index":3426,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:17",{"_index":282,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:21",{"_index":414,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:26",{"_index":308,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:32",{"_index":413,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:37",{"_index":305,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:61",{"_index":3427,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:65",{"_index":415,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:66",{"_index":3428,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:75",{"_index":412,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:87",{"_index":311,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["stream",{"_index":1198,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["streamid",{"_index":1625,"title":{},"body":{"classes/EventBus.html":{}}}],["streams",{"_index":1626,"title":{},"body":{"classes/EventBus.html":{}}}],["strength(0.5",{"_index":1410,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["strict",{"_index":628,"title":{},"body":{"classes/Chart.html":{}}}],["string",{"_index":136,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["string(value",{"_index":4452,"title":{},"body":{"classes/UtilityService.html":{}}}],["string).pipe",{"_index":1209,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["string).touppercase",{"_index":351,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["stringid",{"_index":1461,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["stroke",{"_index":2054,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/ZoomPlugin.html":{}}}],["strokelinecap",{"_index":2126,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strokestyle",{"_index":2123,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["strokewidth",{"_index":1954,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["structure",{"_index":1970,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["style",{"_index":728,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["style(\"pointer",{"_index":2973,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["style(\"text",{"_index":3064,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["style(this.isvertical",{"_index":1419,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["styledsvg",{"_index":4099,"title":{},"body":{"classes/SvgMarker.html":{}}}],["styles",{"_index":2094,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{}}}],["styleurls",{"_index":491,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["subject",{"_index":301,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["sublicense",{"_index":4722,"title":{},"body":{"license.html":{}}}],["submission",{"_index":4787,"title":{},"body":{"license.html":{}}}],["submit",{"_index":4685,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":4683,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":661,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{}}}],["subscribe((chartevent",{"_index":2941,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["subscribe((d",{"_index":658,"title":{},"body":{"classes/Chart.html":{}}}],["subscribe((event",{"_index":1210,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subscribe((position",{"_index":1140,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["subscribe((rs",{"_index":664,"title":{},"body":{"classes/Chart.html":{}}}],["subscribers",{"_index":3131,"title":{},"body":{"components/LegendComponent.html":{}}}],["subscribing",{"_index":3188,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["subscription",{"_index":945,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["subsequently",{"_index":4707,"title":{},"body":{"license.html":{}}}],["substitute",{"_index":4949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtract",{"_index":3060,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["subtracted",{"_index":2755,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["subtracting",{"_index":2050,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["successfully",{"_index":1264,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["such",{"_index":3190,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["suggested",{"_index":910,"title":{},"body":{"components/ChartComponent.html":{}}}],["summary",{"_index":4181,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":149,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["super(colorprovider",{"_index":1879,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["super(colors",{"_index":3977,"title":{},"body":{"classes/SequentialColorProvider.html":{}}}],["super(config",{"_index":2839,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["super(id",{"_index":3485,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["super(markers",{"_index":3976,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["super(sourceprovider",{"_index":4118,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["super.build",{"_index":2394,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.getabsoluteposition(relativeposition",{"_index":3820,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["super.update",{"_index":2439,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["super.updateranges",{"_index":2484,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["supersede",{"_index":4794,"title":{},"body":{"license.html":{}}}],["support",{"_index":4855,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supporting",{"_index":2273,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["supports",{"_index":4443,"title":{},"body":{"classes/UtilityService.html":{}}}],["svg",{"_index":673,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SvgMarker.html":{},"classes/ZoomPlugin.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["svg_padding",{"_index":1016,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement",{"_index":1034,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.getbbox",{"_index":1041,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.innerhtml",{"_index":1036,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.insertadjacenthtml(\"beforeend",{"_index":1038,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontent",{"_index":994,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgelement",{"_index":1812,"title":{},"body":{"classes/Grid.html":{}}}],["svgelements",{"_index":1767,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["svgmarker",{"_index":4092,"title":{"classes/SvgMarker.html":{}},"body":{"classes/SvgMarker.html":{},"miscellaneous/variables.html":{}}}],["svgmarker(s",{"_index":4946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sw",{"_index":2649,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":3119,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["switchmap",{"_index":3164,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["switchmap(highlightdata",{"_index":3226,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["symmetry",{"_index":1270,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["sync",{"_index":1700,"title":{},"body":{"classes/Grid.html":{}}}],["synchandlermap",{"_index":3192,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronization",{"_index":2283,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["synchronize",{"_index":3263,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronized",{"_index":3268,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncsubscription",{"_index":3194,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist",{"_index":3281,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist(chartassist",{"_index":3269,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syntax",{"_index":4876,"title":{},"body":{"license.html":{}}}],["systems",{"_index":4695,"title":{},"body":{"license.html":{}}}],["t",{"_index":1913,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["t,i",{"_index":4394,"title":{},"body":{"classes/UtilityService.html":{}}}],["t,index",{"_index":4385,"title":{},"body":{"classes/UtilityService.html":{}}}],["tabs",{"_index":4006,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["take",{"_index":4267,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["taken",{"_index":3809,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["takeuntil",{"_index":583,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["takeuntil(chartassist.chart.geteventbus().getstream(destroy_event",{"_index":3275,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["takeuntil(this.destroy",{"_index":1138,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["takeuntil(this.eventbus.getstream(destroy_event",{"_index":2398,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["takeuntil(this.geteventbus().getstream(destroy_event",{"_index":656,"title":{},"body":{"classes/Chart.html":{}}}],["takeuntil(this.initplugin",{"_index":1137,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["target",{"_index":384,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["target(target",{"_index":1673,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["target.append(\"g",{"_index":3081,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["target.append(\"path",{"_index":3435,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.append(\"rect\").attrs",{"_index":2856,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.node().getboundingclientrect",{"_index":3899,"title":{},"body":{"classes/Renderer.html":{}}}],["target.on(nativeevent",{"_index":3898,"title":{},"body":{"classes/Renderer.html":{}}}],["target.select(\"path.interaction",{"_index":3431,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.select(\"rect",{"_index":2847,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.select(`g.${classname",{"_index":3542,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.select(`g.${classname}`).remove",{"_index":3575,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.selectall(`g",{"_index":391,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["targetevent",{"_index":3897,"title":{},"body":{"classes/Renderer.html":{}}}],["technically",{"_index":3672,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["template",{"_index":889,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["templateref",{"_index":1119,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{}}}],["templateurl",{"_index":493,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ten",{"_index":4960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminate",{"_index":4747,"title":{},"body":{"license.html":{}}}],["terms",{"_index":4612,"title":{},"body":{"license.html":{}}}],["test",{"_index":4428,"title":{},"body":{"classes/UtilityService.html":{}}}],["testtext",{"_index":2609,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.classed(\"sample",{"_index":2611,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["testtext.remove",{"_index":2615,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text",{"_index":184,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/RichLegendTileComponent.html":{},"license.html":{}}}],["text\").node",{"_index":2765,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text(labelcontent",{"_index":3055,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["text)\").each(function",{"_index":2634,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["text):last",{"_index":2763,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textcolorprovider",{"_index":1079,"title":{"classes/TextColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["textcolorprovider(this.standardcolors",{"_index":1088,"title":{},"body":{"classes/ChartPalette.html":{}}}],["textcolors",{"_index":1059,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["textinsidenext",{"_index":2666,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks",{"_index":2528,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textofticks.push(this",{"_index":2533,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textoverflowhandler",{"_index":2059,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["textpadding",{"_index":2696,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["textselection",{"_index":2060,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["textselection.node",{"_index":3056,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["texttohide",{"_index":2565,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["texttohide.foreach((group",{"_index":2568,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["theory",{"_index":4827,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":4679,"title":{},"body":{"license.html":{}}}],["thick",{"_index":4492,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["thickness",{"_index":218,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"classes/RectangleAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["thicknesses",{"_index":4550,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["thicknessmap",{"_index":4171,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.__thresholds.status",{"_index":4252,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.status",{"_index":4242,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessx",{"_index":2304,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["thicknessy",{"_index":1887,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["things",{"_index":345,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["third",{"_index":4773,"title":{},"body":{"license.html":{}}}],["this._active",{"_index":3384,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._approximateticks",{"_index":197,"title":{},"body":{"classes/AxisConfig.html":{}}}],["this._backgroundcolors",{"_index":1094,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._bottomscaleid",{"_index":2368,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config",{"_index":1720,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._config.borders.bottom?.visible",{"_index":1838,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.left?.visible",{"_index":1852,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.right?.visible",{"_index":1849,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.top?.visible",{"_index":1846,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.dimension",{"_index":2717,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.height",{"_index":2571,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.margin",{"_index":2798,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.marginlocked",{"_index":2627,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._config.dimension.width",{"_index":2567,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._d3scale",{"_index":3951,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale(value",{"_index":3489,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.domain",{"_index":3961,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.domain(domain",{"_index":3960,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.invert(coordinate",{"_index":3490,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.range",{"_index":3958,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.range(this.isreversed",{"_index":3956,"title":{},"body":{"classes/Scale.html":{}}}],["this._height",{"_index":1574,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this._interactive",{"_index":3386,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._leftscaleid",{"_index":2372,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._rightscaleid",{"_index":2376,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._scales",{"_index":1718,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this._scales[scalekey]?.list?.filter((scale",{"_index":2382,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this._seriesrenderstate",{"_index":3388,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._standardcolors",{"_index":1086,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._target",{"_index":1722,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"clippath",{"_index":1801,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"g",{"_index":1726,"title":{},"body":{"classes/Grid.html":{}}}],["this._textcolors",{"_index":1087,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._width",{"_index":1572,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.accessors",{"_index":1535,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.activechanged.complete",{"_index":3136,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.activechanged.emit(this.active",{"_index":3135,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.addplugin(gridplugin",{"_index":653,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(plugin",{"_index":623,"title":{},"body":{"classes/Chart.html":{}}}],["this.adjustaxisticks(axis.labelgroup",{"_index":2458,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.adjustrenderingarea",{"_index":1743,"title":{},"body":{"classes/Grid.html":{}}}],["this.arelabelupdatesenabled",{"_index":3031,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.aremarginsapproximatelyequal(oldmargin",{"_index":2797,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.avoidtooltipcollisions",{"_index":1359,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.axis.bottom.fit",{"_index":405,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.gridticks",{"_index":263,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.ticklabel.horizontalpadding",{"_index":4498,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.bottom.ticksize",{"_index":265,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.visible",{"_index":423,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.left.fit",{"_index":264,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.left.gridticks",{"_index":261,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.padding",{"_index":4494,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.left.ticksize",{"_index":262,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.visible",{"_index":424,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.right.fit",{"_index":4495,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.padding",{"_index":4497,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.ticksize",{"_index":4496,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axisx",{"_index":2495,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group",{"_index":2651,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.append(\"g",{"_index":2653,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.group.attr(\"transform",{"_index":2489,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup",{"_index":2654,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.attr(\"transform",{"_index":2492,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.labelgroup.select(\".tick:not(.tick",{"_index":2762,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisx.tickgroup",{"_index":2652,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft",{"_index":2509,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group",{"_index":2406,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.group.append(\"g",{"_index":2656,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup",{"_index":2657,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.labelgroup.attr",{"_index":2504,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyleft.tickgroup",{"_index":2655,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright",{"_index":2523,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group",{"_index":2658,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.group.append(\"g",{"_index":2660,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup",{"_index":2661,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.labelgroup.attr",{"_index":2518,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup",{"_index":2659,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright.tickgroup.attr",{"_index":2520,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.axisyright?.group",{"_index":2407,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.backgroundcolor",{"_index":3917,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.baraccessors.data",{"_index":2885,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.baraccessors.series",{"_index":2886,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.borders",{"_index":1749,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.bottom",{"_index":1828,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.bottom.visible",{"_index":408,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.borders.left",{"_index":1850,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.left.visible",{"_index":407,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.right",{"_index":1847,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.top",{"_index":1842,"title":{},"body":{"classes/Grid.html":{}}}],["this.bottomscaleid",{"_index":2388,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.brush",{"_index":2952,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush(this.zoombrushlayer.select(\".brush",{"_index":2971,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.extent([[0",{"_index":2969,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.move(this.brushelement",{"_index":2988,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement",{"_index":2953,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".overlay",{"_index":2972,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".selection",{"_index":2978,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushend",{"_index":2932,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushmove",{"_index":2930,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstart",{"_index":2929,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstartx",{"_index":2984,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.buildaxes(this.gridelementslayer",{"_index":2396,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.buildborders(this.gridelementslayer",{"_index":1748,"title":{},"body":{"classes/Grid.html":{}}}],["this.builddatamanager",{"_index":639,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildgrid",{"_index":638,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildinteractionlabel(this.interactionlabellayer",{"_index":3047,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.buildrenderengine(this.grid.getlasagna",{"_index":640,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildrenderingarea(clippathid",{"_index":1742,"title":{},"body":{"classes/Grid.html":{}}}],["this.calculateaxesstyles(e",{"_index":2408,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.cd.detectchanges",{"_index":920,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1342,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["this.changedetector.markforcheck",{"_index":1052,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["this.chart",{"_index":902,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.build(this.elref.nativeelement",{"_index":903,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.getdatamanager().chartseriesset.reduce((prev",{"_index":969,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getdatamanager().getchartseries(datapoint.seriesid",{"_index":1492,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event",{"_index":1476,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event).next",{"_index":932,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(interaction_coordinates_event",{"_index":2940,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event",{"_index":1468,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event).asobservable",{"_index":3217,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_active_event).next",{"_index":2983,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_event",{"_index":3025,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(refresh_event).subscribe",{"_index":906,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(series_state_change_event",{"_index":1472,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(set_domain_event).next",{"_index":3006,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(this.config.eventstreamid",{"_index":1208,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.chart.getgrid",{"_index":2933,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().config().dimension",{"_index":3059,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().config().dimension.height",{"_index":3102,"title":{},"body":{"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.left",{"_index":1238,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.top",{"_index":1240,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.getgrid().config().dimension.outerheight",{"_index":984,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.outerwidth",{"_index":985,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getgrid().config().dimension.width",{"_index":3781,"title":{},"body":{"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().getinteractivearea",{"_index":2963,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().getlasagna().addlayer",{"_index":3022,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlabelplugin.layer_name",{"_index":3079,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlineplugin.layer_name",{"_index":3108,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().scales",{"_index":3030,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.setseriesstates(this.legendinteractionassist.getseriesstates",{"_index":3298,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.target?.node()?.parentnode",{"_index":1229,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.update(seriesset",{"_index":3243,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.updatedimensions",{"_index":907,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart?.destroy",{"_index":919,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chartassist.getvisibleserieswithlegend",{"_index":3328,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartassistsubject.next",{"_index":3247,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartcollectionservice.getchartcollection(this.collectionid).addchart(this.chartcomponent.chart",{"_index":842,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["this.closepending",{"_index":1353,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closepopoversubject",{"_index":1224,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.complete",{"_index":1225,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.next",{"_index":1273,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closetimeout",{"_index":1364,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closetooltips.next",{"_index":1365,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.collections[collectionid",{"_index":858,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["this.collisiontimeout",{"_index":1358,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.colorprovider",{"_index":73,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.colorprovider.get",{"_index":74,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.config",{"_index":1205,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["this.config().axis",{"_index":2487,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom",{"_index":2389,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.bottom.visible",{"_index":2636,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.left",{"_index":2380,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right",{"_index":2387,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().axis.right.visible",{"_index":2642,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().borders",{"_index":1769,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().dimension",{"_index":1754,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.height",{"_index":1831,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin",{"_index":2573,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.left",{"_index":2750,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.margin.top",{"_index":2752,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config().dimension.width",{"_index":1833,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config().disablerenderareaheightcorrection",{"_index":1786,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().disablerenderareawidthcorrection",{"_index":1788,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().interactive",{"_index":2395,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.config(config",{"_index":1724,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.config.enableexternalevents",{"_index":2943,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.config.interactiontype",{"_index":1212,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.config.interactive",{"_index":4511,"title":{},"body":{"classes/XYRenderer.html":{}}}],["this.config.statestyles",{"_index":3870,"title":{},"body":{"classes/Renderer.html":{}}}],["this.config.statestyles[state",{"_index":3872,"title":{},"body":{"classes/Renderer.html":{}}}],["this.configurecharteventsubscriptions(chart.geteventbus",{"_index":3198,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.configurecssfilters",{"_index":637,"title":{},"body":{"classes/Chart.html":{}}}],["this.configureeventsubscriptions(chart.geteventbus",{"_index":4072,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.container",{"_index":1725,"title":{},"body":{"classes/Grid.html":{}}}],["this.contentposition",{"_index":953,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.complete",{"_index":981,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.next(this.contentposition",{"_index":980,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubscription",{"_index":951,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription.unsubscribe",{"_index":955,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription?.unsubscribe",{"_index":950,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.createborder(container",{"_index":1782,"title":{},"body":{"classes/Grid.html":{}}}],["this.createchart(lastspark",{"_index":4063,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.created3scale",{"_index":3952,"title":{},"body":{"classes/Scale.html":{}}}],["this.data",{"_index":56,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.category(d",{"_index":1885,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.defined",{"_index":2286,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.data.end(d",{"_index":1883,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.start(d",{"_index":1881,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness",{"_index":1888,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness(d",{"_index":1889,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.value",{"_index":242,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.value(data",{"_index":247,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.x(d",{"_index":61,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x0(d",{"_index":65,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x1(d",{"_index":67,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y(d",{"_index":63,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y0(d",{"_index":69,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y1(d",{"_index":71,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.datamanager",{"_index":613,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.scalesindexbykey",{"_index":704,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.update(seriesset",{"_index":702,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.updatescaledomains",{"_index":705,"title":{},"body":{"classes/Chart.html":{}}}],["this.datapointpositions[seriesid",{"_index":1495,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints",{"_index":1260,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints[seriesid",{"_index":1491,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.default_config",{"_index":1207,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.defaultvalue",{"_index":3509,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.destroy",{"_index":1226,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.destroy$.complete",{"_index":1133,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.destroy$.next",{"_index":1132,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.dimension.autoheight",{"_index":425,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.height(30",{"_index":428,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin",{"_index":4489,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.margin.bottom",{"_index":427,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin.right",{"_index":266,"title":{},"body":{"classes/BarGridConfig.html":{}}}],["this.dimension.margin.top",{"_index":426,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.padding",{"_index":4487,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.padding.bottom",{"_index":150,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{}}}],["this.dimension.padding.left",{"_index":406,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.domain().findindex((value",{"_index":3491,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["this.domain(domain",{"_index":3963,"title":{},"body":{"classes/Scale.html":{}}}],["this.drawgrids",{"_index":2510,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawgrids(axis.bottom",{"_index":2496,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawline",{"_index":1037,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.drawticks(axis.bottom",{"_index":2494,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.left",{"_index":2508,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.drawticks(axis.right",{"_index":2522,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.element",{"_index":625,"title":{},"body":{"classes/Chart.html":{},"classes/PathMarker.html":{}}}],["this.element.clientheight",{"_index":721,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.clientwidth",{"_index":724,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.nativeelement.style.left",{"_index":1149,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.nativeelement.style.top",{"_index":1151,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.outerhtml",{"_index":3720,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.element.setattribute(attr",{"_index":3715,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.emitevent(renderer",{"_index":3447,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.emphasisstate",{"_index":800,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.emphasizeseries",{"_index":3204,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(data.seriesid",{"_index":3290,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(legendseries[0].id",{"_index":3331,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.eventbus",{"_index":612,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.destroy",{"_index":695,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(axes_style_change_event).next",{"_index":2402,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.eventbus.getstream(destroy_event).next",{"_index":694,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).next",{"_index":700,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).pipe(untildestroy()).subscribe((e",{"_index":2399,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.filterdatabydomain(filtereddata",{"_index":3881,"title":{},"body":{"classes/Renderer.html":{}}}],["this.filterdefs",{"_index":667,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterdefs?.append(\"filter",{"_index":675,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterrepeatedelements(textofticks",{"_index":2535,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.finddatapointbyvalue(series",{"_index":348,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.findnearestindex(haystack",{"_index":4419,"title":{},"body":{"classes/UtilityService.html":{}}}],["this.fitbottomaxis(d",{"_index":2739,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.fn(clr",{"_index":3758,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.formatters.tick",{"_index":3486,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this.getabsoluteposition(tooltiprelativeposition",{"_index":1496,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getabsoluteposition(validdatapointsvalues",{"_index":1259,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.getbackgroundsdataforcontinuousscale(sourceseries",{"_index":4253,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getbreakpoints(sourceseries",{"_index":4261,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getcontentposition(radius",{"_index":979,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.getcontrastratio(rgbinput",{"_index":4122,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getcrosspointwithy(xy1",{"_index":4264,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getdomain(filtereddata",{"_index":3883,"title":{},"body":{"classes/Renderer.html":{}}}],["this.getelementstohide(axislabels",{"_index":2566,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getgrid().buildplugins(this",{"_index":652,"title":{},"body":{"classes/Chart.html":{}}}],["this.getinteractivearea",{"_index":2435,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(array",{"_index":2684,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyleft.labelgroup",{"_index":2726,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getmaxtextwidth(this.selectallaxislabels(this.axisyright.labelgroup",{"_index":2731,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getouterwidthdimensioncorrection",{"_index":1756,"title":{},"body":{"classes/Grid.html":{}}}],["this.getoverlayposition(a",{"_index":3818,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getrelativeluminance(color1",{"_index":4136,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getrelativeluminance(color2",{"_index":4138,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getsectionindex(angle",{"_index":3833,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getseriesgroups(seriesset",{"_index":3302,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getsinglevalue(data",{"_index":232,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.gettextmeasurement(array",{"_index":2686,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettextmeasurement(elementstofilter",{"_index":2678,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.getthresholdline(limit.series",{"_index":4309,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.gettickdistance(array",{"_index":2685,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettickdistance(axislabels",{"_index":2585,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gettooltipposition(datapoint",{"_index":1494,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getvisibleserieswithlegend",{"_index":3271,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getvisibleserieswithlegendbackup",{"_index":3270,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.grid",{"_index":615,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.build",{"_index":686,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.config",{"_index":2995,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.config().dimension",{"_index":709,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().addlayer",{"_index":2935,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().removelayer(zoomplugin.layer_name",{"_index":2980,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.scales",{"_index":703,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.scales.x.list",{"_index":2991,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.target(this.target",{"_index":685,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updatedimensions(dimensions",{"_index":725,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updateranges",{"_index":706,"title":{},"body":{"classes/Chart.html":{}}}],["this.gridconfig",{"_index":4042,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridconfig.interactionplugins",{"_index":4044,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridelementslayer",{"_index":1744,"title":{},"body":{"classes/Grid.html":{}}}],["this.gridx",{"_index":2497,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridx.tickgroup",{"_index":2498,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy",{"_index":2512,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.gridy.tickgroup",{"_index":2646,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleclose",{"_index":1338,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handlelabelupdate",{"_index":3028,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.handlelineupdate",{"_index":3093,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.handlemarginupdate",{"_index":2441,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleopen",{"_index":1336,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handleseriesstatechange(e",{"_index":2401,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflow(labelgroup",{"_index":2559,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.handleticklabeloverflowdebounceindex[scale.id",{"_index":2617,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.hasrightyaxis",{"_index":2729,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.height",{"_index":1050,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.hidesubject.next",{"_index":1478,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.highlighteddatapoints",{"_index":3258,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.highlighteddatapoints[chartseries.id",{"_index":3259,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.highlighteddatapoints[seriesid",{"_index":4076,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.icon",{"_index":3403,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.id",{"_index":1527,"title":{},"body":{"classes/DataSeries.html":{},"classes/Scale.html":{}}}],["this.initialize",{"_index":654,"title":{},"body":{"classes/Chart.html":{}}}],["this.initplugin",{"_index":1131,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.complete",{"_index":1134,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.next",{"_index":1135,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.inputseriesset",{"_index":3233,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.interaction_margin",{"_index":3439,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.interactionhandlermap",{"_index":2927,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype",{"_index":2947,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype](xcoord",{"_index":2951,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionlabellayer",{"_index":3021,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlabellayer.select(`.${interactionlabelplugin.layer_name",{"_index":3045,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlinelayer",{"_index":3091,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.interactionplugins",{"_index":260,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.interactive",{"_index":421,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"components/LegendSeriesComponent.html":{}}}],["this.interactivearea",{"_index":1714,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.intersectionobserver",{"_index":894,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver.observe(this.elref.nativeelement",{"_index":896,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver?.unobserve(this.elref.nativeelement",{"_index":917,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.isapproximatelyequal(margin1.bottom",{"_index":2808,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.left",{"_index":2810,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.right",{"_index":2806,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.isapproximatelyequal(margin1.top",{"_index":2804,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.ischartinview",{"_index":1470,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.isdomainfixed",{"_index":3964,"title":{},"body":{"classes/Scale.html":{}}}],["this.ishorizontalclassapplied",{"_index":3407,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.islegendactive",{"_index":3291,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.isopen",{"_index":1268,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["this.isreversed",{"_index":3968,"title":{},"body":{"classes/Scale.html":{}}}],["this.isselectedchange.next(!this.isselected",{"_index":3412,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.isserieshidden(s.id",{"_index":3262,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.isvertical",{"_index":1397,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.lasagna",{"_index":1716,"title":{},"body":{"classes/Grid.html":{}}}],["this.lasagna.addlayer",{"_index":1745,"title":{},"body":{"classes/Grid.html":{}}}],["this.lastgridconfig",{"_index":4045,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastgridconfig.interactionplugins",{"_index":4046,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastinteractionvaluespayload",{"_index":3026,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.interactiontype",{"_index":3032,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x",{"_index":3037,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x[xscale.id",{"_index":3038,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastusedindex",{"_index":3985,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.leftscaleid",{"_index":2385,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.legend",{"_index":3401,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["this.legend.active",{"_index":3405,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.activechanged.subscribe((active",{"_index":3402,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.interactive",{"_index":3406,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.orientation",{"_index":3408,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriescolor",{"_index":3918,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legend.seriesicon",{"_index":3404,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriesunitlabel",{"_index":3916,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendinteractionassist",{"_index":3200,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.emphasizeseries(seriesid",{"_index":3254,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.isserieshidden(seriesid",{"_index":3255,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.renderstatesindex",{"_index":3209,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.resetseries",{"_index":3249,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.setgroupvisibility(seriesid",{"_index":3245,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.update(processedseriesset",{"_index":3239,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseries",{"_index":3919,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasinputdescription",{"_index":3921,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasprojecteddescription",{"_index":3922,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseriesset",{"_index":3236,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseriesset.filter(s",{"_index":3261,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.loggerservice.warn(\"thresholds",{"_index":4239,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.margin.bottom",{"_index":1583,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.left",{"_index":1578,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.right",{"_index":1577,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.top",{"_index":1582,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.marker",{"_index":1028,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.getsvg",{"_index":1029,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.setcolor(this.color",{"_index":1027,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.markerprovider",{"_index":76,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.markerprovider.get",{"_index":77,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.maxsize",{"_index":1049,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.movezoneindex(zoneindexes[zone.id",{"_index":4337,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.name",{"_index":1530,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.ngzone.run",{"_index":913,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.ngzone.runoutsideangular",{"_index":914,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.onevent",{"_index":3295,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onevent(event",{"_index":3296,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onsetseriesstates(rs",{"_index":665,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdate(d",{"_index":659,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdatedimensions",{"_index":662,"title":{},"body":{"classes/Chart.html":{}}}],["this.openpopoversubject",{"_index":1222,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.complete",{"_index":1223,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.next",{"_index":1269,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.opentimeout",{"_index":1355,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opentooltips.next",{"_index":1356,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opposite(connection_points[sectionindex].x",{"_index":3836,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.opposite(connection_points[sectionindex].y",{"_index":3837,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.overlaysetup",{"_index":1465,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.plugin.chart.updatedimensions",{"_index":954,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.contentpositionupdatesubject.subscribe((contentposition",{"_index":952,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.hidesubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1337,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.orientation",{"_index":1423,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.showsubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1335,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin?.openpopoversubject.pipe",{"_index":1136,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugin?.updatepositionsubject.pipe",{"_index":1139,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugins.findindex(plugin",{"_index":619,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.foreach(p",{"_index":696,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.push(plugin",{"_index":617,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.splice(pluginindex",{"_index":622,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.unshift(renderengineplugin",{"_index":650,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins[pluginindex].destroy",{"_index":621,"title":{},"body":{"classes/Chart.html":{}}}],["this.popover?.resetsize",{"_index":1141,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popover?.updateposition",{"_index":1153,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popovertargetposition",{"_index":1258,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processdatapoints(datapoints",{"_index":1219,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processedcolors",{"_index":3759,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processedcolors[clr",{"_index":3757,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processhighlighteddatapoints(datapoints",{"_index":1471,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.projecteddescription",{"_index":3415,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.projecteddescription.nativeelement.children.length",{"_index":3416,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.providedvalues",{"_index":3988,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.providedvalues[entityid",{"_index":3984,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.publishrenderstates",{"_index":3244,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.recalculatemargins(this.container",{"_index":2397,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginsdebounce",{"_index":2795,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconcilemarginswithdebounce(oldmargin",{"_index":2640,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.reconfigurechart(this.sparks[existingsparkindex].chart",{"_index":4062,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.redraw",{"_index":904,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.removeplugin(classref",{"_index":624,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine",{"_index":614,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine.setseriesstates(renderstatedata",{"_index":739,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderingarea",{"_index":1741,"title":{},"body":{"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.renderingarea.attrs(renderingareaattrs",{"_index":1797,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath",{"_index":1800,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath.attrs(renderingareaclippathattrs",{"_index":1796,"title":{},"body":{"classes/Grid.html":{}}}],["this.rendermarkersvg(svg",{"_index":1024,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.renderstatesindex[s.id]?.state",{"_index":3242,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.renderstatesindex[series.id",{"_index":3309,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.renderstatesindex[seriesid",{"_index":3313,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.reset",{"_index":3507,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["this.resetseries",{"_index":3306,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resetvisibleseries",{"_index":3206,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resizehandler",{"_index":908,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver",{"_index":909,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.observe((this.elref.nativeelement",{"_index":915,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.unobserve(this.elref.nativeelement",{"_index":918,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.reversed(!this.isreversed",{"_index":3966,"title":{},"body":{"classes/Scale.html":{}}}],["this.rightscaleid",{"_index":2386,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.rightscaleid?.length",{"_index":2643,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scalekey",{"_index":349,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.scales",{"_index":2733,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.x",{"_index":2472,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales.y",{"_index":2478,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales?.x?.list[0].d3scale",{"_index":2759,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].index[this.bottomscaleid",{"_index":2486,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"].list[0].id",{"_index":2369,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"x\"]?.index[this.bottomscaleid",{"_index":2734,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.leftscaleid",{"_index":2502,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].index[this.rightscaleid",{"_index":2514,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.scales[\"y\"].list[0].id",{"_index":2373,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selectallaxislabels(labelgroup",{"_index":2539,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.selecteddatapointidxfn(renderseries.dataseries.id",{"_index":390,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["this.series",{"_index":72,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.series.category",{"_index":224,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.series.category(dataseries.id",{"_index":225,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.seriesgroups",{"_index":3301,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesgroups[groupid",{"_index":3322,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.serieshasadditionalcontent",{"_index":3920,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.seriesindex",{"_index":3303,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesindex[seriesid",{"_index":3335,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor",{"_index":3199,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor(inputseriesset.map(series",{"_index":3235,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesrenderstate",{"_index":3396,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.seriesstatessubject.next(renderstatedata",{"_index":699,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesstatessubject.pipe(untildestroy",{"_index":663,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesvisibilitymap[d.seriesid",{"_index":1479,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.seriesvisibilitymap[series.seriesid",{"_index":1474,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.setattributes",{"_index":3709,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setattributes({\"fill",{"_index":3712,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setgroupstate(group",{"_index":3326,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setrenderstate(s",{"_index":3323,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setvisibility(s",{"_index":3324,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.showbottomaxis",{"_index":4070,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.showsubject.next",{"_index":1497,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.showtopborder",{"_index":4069,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.simulation",{"_index":1361,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.simulation.stop",{"_index":1362,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.sourceprovider.get(entityid",{"_index":3754,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.sparks",{"_index":4053,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.sparks.findindex(existingspark",{"_index":4059,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.startsimulation(this.tooltipdirectivesindex",{"_index":1384,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.streams[key].complete",{"_index":1629,"title":{},"body":{"classes/EventBus.html":{}}}],["this.streams[streamid",{"_index":1627,"title":{},"body":{"classes/EventBus.html":{}}}],["this.styledsvg",{"_index":4101,"title":{},"body":{"classes/SvgMarker.html":{}}}],["this.svg",{"_index":3718,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["this.svg.complete",{"_index":1032,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.next(this.marker.getsvg",{"_index":1031,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.subscribe((svg",{"_index":1023,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svgcontent.nativeelement",{"_index":1035,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.synchandlermap",{"_index":3202,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.synchandlermap[event.type](...args",{"_index":3278,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription",{"_index":3273,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription.unsubscribe",{"_index":3284,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.target",{"_index":630,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["this.target?.append(\"defs",{"_index":668,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.remove",{"_index":698,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"height",{"_index":733,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"width",{"_index":736,"title":{},"body":{"classes/Chart.html":{}}}],["this.toggleseries",{"_index":3208,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.tooltipdirectivesindex",{"_index":1352,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltipdirectivesindex[seriesid",{"_index":1374,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltippositionoffset",{"_index":3812,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.tooltips.foreach(tooltip",{"_index":1344,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unitlabel",{"_index":3915,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.unsubscribe$.complete",{"_index":1339,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unsubscribe$.next",{"_index":1334,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.update",{"_index":1760,"title":{},"body":{"classes/Grid.html":{}}}],["this.update(this.inputseriesset",{"_index":3246,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.update.next(this.plugin?.datapoints",{"_index":1154,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.updateaxes",{"_index":2440,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateborders",{"_index":1752,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatebottomborder",{"_index":1841,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatechartdimensionssubject?.next",{"_index":2799,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updatedimensionssubject",{"_index":610,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.next",{"_index":691,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.pipe(untildestroy",{"_index":660,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatelabel(xscale",{"_index":3039,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.updateline(this.interactionlinelayer",{"_index":3095,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.updatepositionsubject",{"_index":1220,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.complete",{"_index":1221,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.next(this.popovertargetposition",{"_index":1267,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updateranges",{"_index":1758,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatesparks(sparks",{"_index":4050,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.updatesubject.next(seriesset",{"_index":690,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesubject.pipe(untildestroy",{"_index":657,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesvg",{"_index":3717,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.updatetargetdimensions(dimensionconfig",{"_index":717,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatetargetdimensions(this.grid.config().dimension",{"_index":687,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatexaxis",{"_index":2525,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.updateyaxes",{"_index":2526,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["this.valuemap[entityid",{"_index":3508,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.values.length",{"_index":3986,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.values[index",{"_index":3987,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.viewbox",{"_index":1042,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.visible",{"_index":799,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{}}}],["this.width",{"_index":1047,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.zoombrushlayer",{"_index":2934,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.zoombrushlayer.append(\"g",{"_index":2954,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["those",{"_index":3280,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["three",{"_index":4953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["threshold",{"_index":1610,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["thresholdfrom",{"_index":4192,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.x",{"_index":4328,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.y",{"_index":4330,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholds",{"_index":4156,"title":{"additional-documentation/thresholds.html":{}},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["thresholds/thresholds",{"_index":3694,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["thresholds_main_chart_renderer_config",{"_index":4180,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholds_summary_renderer_config",{"_index":4184,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholdsdata",{"_index":1600,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdsdata.push(arcdatum",{"_index":1606,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["thresholdshift",{"_index":4326,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.x",{"_index":4333,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.y",{"_index":4334,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdsservice",{"_index":3668,"title":{"injectables/ThresholdsService.html":{}},"body":{"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["thresholdsservice.series_id_suffix",{"_index":4255,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto",{"_index":4193,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.x",{"_index":4327,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.y",{"_index":4329,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["through",{"_index":821,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["throw",{"_index":607,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["tick",{"_index":1702,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["tick.getattribute(\"transform",{"_index":2709,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick.getboundingclientrect().width",{"_index":2704,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tick_dimension_correction",{"_index":1704,"title":{},"body":{"classes/Grid.html":{}}}],["tick_label_overflow_debounce_interval",{"_index":2353,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickaxis",{"_index":2451,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["tickaxis.scale().ticks(config.approximateticks",{"_index":5059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tickaxis.ticks(config.approximateticks",{"_index":2456,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat",{"_index":2455,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickformat(scale.formatters[\"tick",{"_index":2448,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickgroup",{"_index":2088,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticklabel",{"_index":161,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticks",{"_index":182,"title":{},"body":{"classes/AxisConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ticks(config.approximateticks",{"_index":2446,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticks.length",{"_index":5060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[0",{"_index":5062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[ticks.length",{"_index":5064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksaverage",{"_index":5063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksize",{"_index":162,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticksize(0",{"_index":2447,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(config.ticksize",{"_index":2453,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ticksize(size",{"_index":2467,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tickvalues(scale.bandticks",{"_index":2454,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tile",{"_index":490,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile'},{'name",{"_index":499,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component",{"_index":3691,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tile.component.html",{"_index":494,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.less",{"_index":492,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts",{"_index":483,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:26",{"_index":3909,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:31",{"_index":3910,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:36",{"_index":3907,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:41",{"_index":3908,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:43",{"_index":3906,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:63",{"_index":3912,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:67",{"_index":3911,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile/basic",{"_index":481,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"modules/NuiChartsModule.html":{}}}],["tile/rich",{"_index":3692,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["time",{"_index":4176,"title":{},"body":{"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["timeframe",{"_index":4604,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"index.html":{}}}],["timeinterval",{"_index":4174,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["timeminute(date",{"_index":5018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeout",{"_index":1261,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IScaleSVGElement.html":{}}}],["timescale",{"_index":4356,"title":{"classes/TimeScale.html":{}},"body":{"classes/TimeScale.html":{}}}],["timing",{"_index":1271,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["title",{"_index":2547,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"license.html":{}}}],["titletext",{"_index":2555,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toc",{"_index":4597,"title":{},"body":{"index.html":{}}}],["todo",{"_index":128,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{}}}],["together",{"_index":431,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["toggleseries",{"_index":792,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":2193,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["tooltip",{"_index":1278,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["tooltip'},{'name",{"_index":510,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltip.component",{"_index":3686,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltip.component.html",{"_index":1280,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.less",{"_index":1279,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts",{"_index":1275,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts:22",{"_index":1281,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.directive",{"_index":1322,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["tooltip.elementref.nativeelement.getattribute(\"series",{"_index":1347,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip.getoverlayelement",{"_index":1373,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip_position_offset",{"_index":1447,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["tooltipdirectivesindex",{"_index":1327,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex",{"_index":1387,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex[node.seriesid",{"_index":1417,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositionoffset",{"_index":1427,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltippositions",{"_index":1372,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositions[seriesid",{"_index":1375,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltiprelativeposition",{"_index":1493,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltips",{"_index":435,"title":{"additional-documentation/plugins/tooltips.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/plugins.html":{}}}],["tooltips'},{'name",{"_index":512,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltips.component",{"_index":3687,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltips.component.html",{"_index":1294,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.less",{"_index":1293,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts",{"_index":1292,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts:27",{"_index":1299,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:29",{"_index":1300,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:31",{"_index":1308,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:33",{"_index":1305,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:34",{"_index":1304,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:44",{"_index":1298,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:65",{"_index":1303,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips/chart",{"_index":1274,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["top",{"_index":111,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["topofrange",{"_index":2769,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove",{"_index":2534,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["toremove.foreach((group",{"_index":2536,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["tort",{"_index":4828,"title":{},"body":{"license.html":{}}}],["track",{"_index":3498,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["trackby",{"_index":4024,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn",{"_index":1297,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/SparkChartAssist.html":{}}}],["trackbyfn(_index",{"_index":4021,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn(index",{"_index":1301,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tracking",{"_index":4697,"title":{},"body":{"license.html":{}}}],["trade",{"_index":4800,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":4764,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":4798,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1982,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["transform",{"_index":2491,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["transformation",{"_index":4657,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["transformed",{"_index":2917,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["transforms",{"_index":1157,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["transformval",{"_index":2708,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transformval.indexof",{"_index":2713,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["transition",{"_index":1283,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":enter",{"_index":1288,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":leave",{"_index":1291,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transitionduration",{"_index":1936,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["translate",{"_index":2505,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["translate(${clampedx},0",{"_index":3076,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translate(${rightscalelabelx",{"_index":2519,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${this.config().dimension.width",{"_index":2521,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${tx",{"_index":2757,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translate(${xcoord",{"_index":3546,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["translate(0",{"_index":2490,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{}}}],["translate(0,${heightoffset",{"_index":3078,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translating",{"_index":2544,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["translation",{"_index":4658,"title":{},"body":{"license.html":{}}}],["transparent",{"_index":1808,"title":{},"body":{"classes/Grid.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["triangle",{"_index":4985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1200,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["trigger(\"tooltip",{"_index":1287,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["triggered",{"_index":2960,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["triggering",{"_index":4930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":126,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["true).attr(\"opacity",{"_index":2612,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["try",{"_index":243,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["ts",{"_index":130,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/GridConfig.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/XYGridConfig.html":{}}}],["tuned",{"_index":1406,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["two",{"_index":4128,"title":{},"body":{"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["tx",{"_index":2749,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["ty",{"_index":2751,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4895,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"`cssescape",{"_index":4449,"title":{},"body":{"classes/UtilityService.html":{}}}],["typeof",{"_index":229,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["types",{"_index":187,"title":{"additional-documentation/chart-types.html":{}},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"additional-documentation/chart-types.html":{}}}],["types/d3",{"_index":4523,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{}}}],["typical",{"_index":2241,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["ui/bits",{"_index":1128,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["ui/bits/bundles/css/styles.css",{"_index":4594,"title":{},"body":{"index.html":{}}}],["ui/charts",{"_index":4580,"title":{},"body":{"index.html":{}}}],["ui/charts/bundles/css/styles.css",{"_index":4595,"title":{},"body":{"index.html":{}}}],["unclipped",{"_index":2113,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["unclippeddata",{"_index":2112,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":75,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["under",{"_index":4630,"title":{},"body":{"license.html":{}}}],["understand",{"_index":342,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["union",{"_index":4626,"title":{},"body":{"license.html":{}}}],["unionwith",{"_index":4226,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unionwith(breakpoints",{"_index":4278,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["uniq",{"_index":2332,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["uniq(emphasizedseries.map(s",{"_index":2421,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["unique",{"_index":4277,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unit",{"_index":3128,"title":{},"body":{"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["unitlabel",{"_index":3904,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["unknown",{"_index":4541,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":4789,"title":{},"body":{"license.html":{}}}],["unpredictable",{"_index":4587,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":1324,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["unsyncchartassist",{"_index":3283,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["unsynchronize",{"_index":3279,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["until",{"_index":1950,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["untildestroy",{"_index":655,"title":{},"body":{"classes/Chart.html":{},"interfaces/IScaleSVGElement.html":{}}}],["unused",{"_index":3675,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["up",{"_index":2790,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":446,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["update(inputseriesset",{"_index":777,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["update(seriesset",{"_index":575,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["updateaxes",{"_index":2524,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateborders",{"_index":1840,"title":{},"body":{"classes/Grid.html":{}}}],["updatebottomborder",{"_index":1827,"title":{},"body":{"classes/Grid.html":{}}}],["updatechartdimensionssubject",{"_index":1637,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updated",{"_index":647,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensions",{"_index":447,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["updatedimensions(dimensions",{"_index":1677,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensionssubject",{"_index":605,"title":{},"body":{"classes/Chart.html":{}}}],["updatelabel(scale",{"_index":3043,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["updatelegend",{"_index":3232,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["updateline(layer",{"_index":3096,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["updatepositionsubject",{"_index":1169,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["updateranges",{"_index":1641,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updates",{"_index":774,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatesparks",{"_index":3999,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesparks(sparks",{"_index":4030,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesubject",{"_index":604,"title":{},"body":{"classes/Chart.html":{}}}],["updatesvg",{"_index":3719,"title":{},"body":{"classes/PathMarker.html":{}}}],["updatetargetdimensions(dimensionconfig",{"_index":727,"title":{},"body":{"classes/Chart.html":{}}}],["updatexaxis",{"_index":2485,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updateyaxes",{"_index":2500,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["updating",{"_index":1777,"title":{},"body":{"classes/Grid.html":{}}}],["upon",{"_index":2785,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["url(\"#${cssfilterid.grayscale",{"_index":5065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage",{"_index":772,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["use",{"_index":244,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":285,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useenhancedlinecaps",{"_index":2133,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["useexisting",{"_index":866,"title":{},"body":{"components/ChartComponent.html":{}}}],["user",{"_index":1534,"title":{},"body":{"classes/DataSeries.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["uses",{"_index":745,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["using",{"_index":1160,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["usually",{"_index":1977,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["util.ts",{"_index":1588,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["util.ts:7",{"_index":1592,"title":{},"body":{"classes/DonutGaugeRenderingUtil.html":{}}}],["utility.service",{"_index":3948,"title":{},"body":{"classes/Scale.html":{}}}],["utilityservice",{"_index":329,"title":{"classes/UtilityService.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["utilityservice.clamptorange(x",{"_index":3075,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["utilityservice.findnearestindex(series.data",{"_index":374,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getcloser",{"_index":4425,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getclosestindex(series.data",{"_index":382,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/XYRenderer.html":{}}}],["utilityservice.getscalevalues(xscales",{"_index":4469,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getscalevalues(yscales",{"_index":4471,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getvalueaccessor(accessor",{"_index":4414,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.uuid",{"_index":1730,"title":{},"body":{"classes/Grid.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{}}}],["utils.ts",{"_index":3512,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:157",{"_index":3534,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:23",{"_index":3518,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:26",{"_index":3520,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:37",{"_index":3528,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:96",{"_index":3524,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utilservice",{"_index":3535,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["uuid",{"_index":4375,"title":{},"body":{"classes/UtilityService.html":{}}}],["ux",{"_index":92,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{}}}],["v.12",{"_index":4950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v9",{"_index":2834,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["valid",{"_index":249,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/XYGridConfig.html":{}}}],["validdatapoints",{"_index":1251,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["validdatapointsvalues",{"_index":1255,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["validdatapointsvalues.length",{"_index":1257,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["value",{"_index":110,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":364,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["value.valueof",{"_index":4410,"title":{},"body":{"classes/UtilityService.html":{}}}],["value?.tolocalestring",{"_index":3487,"title":{},"body":{"classes/LinearScale.html":{}}}],["valueaccessor",{"_index":3183,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["valueaccessor(haystack[closestdataindex",{"_index":4426,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor(straw",{"_index":4417,"title":{},"body":{"classes/UtilityService.html":{}}}],["valuemap",{"_index":1903,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"classes/Renderer.html":{}}}],["valueof",{"_index":371,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/UtilityService.html":{}}}],["values",{"_index":294,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values(limits).map((limit",{"_index":4308,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["values(this.renderstatesindex",{"_index":3312,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["values(validdatapoints",{"_index":1256,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["values(validdatapoints).length",{"_index":1480,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["values.x",{"_index":4473,"title":{},"body":{"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["values.y",{"_index":4475,"title":{},"body":{"classes/UtilityService.html":{}}}],["values[this.scalekey",{"_index":338,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["var",{"_index":497,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":4899,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":3532,"title":{},"body":{"classes/MarkerUtils.html":{},"index.html":{}}}],["vars",{"_index":3676,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["vector",{"_index":3711,"title":{},"body":{"classes/PathMarker.html":{}}}],["verbal",{"_index":4688,"title":{},"body":{"license.html":{}}}],["version",{"_index":4582,"title":{},"body":{"index.html":{},"license.html":{}}}],["versions",{"_index":1860,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["vertical",{"_index":1450,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/enumerations.html":{}}}],["verticalbaraccessors",{"_index":4481,"title":{"classes/VerticalBarAccessors.html":{}},"body":{"classes/VerticalBarAccessors.html":{}}}],["vertically",{"_index":1695,"title":{},"body":{"classes/Grid.html":{}}}],["very",{"_index":2776,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"index.html":{}}}],["view",{"_index":4599,"title":{},"body":{"index.html":{}}}],["viewbox",{"_index":995,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild",{"_index":1013,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["viewchild(\"projecteddescription",{"_index":3389,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["viewchild(\"svgcontent",{"_index":1018,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild('svgcontent",{"_index":1009,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild(popovercomponent",{"_index":1125,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["viewchildren",{"_index":1309,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewchildren(charttooltipdirective",{"_index":1307,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewencapsulation",{"_index":495,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewencapsulation.emulated",{"_index":486,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewport",{"_index":1844,"title":{},"body":{"classes/Grid.html":{}}}],["visibility",{"_index":1778,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visible",{"_index":163,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["visual",{"_index":3603,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["visualization",{"_index":1245,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"injectables/ThresholdsService.html":{}}}],["visualizations",{"_index":1898,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["visualize",{"_index":1967,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visualized",{"_index":4503,"title":{},"body":{"classes/XYRenderer.html":{}}}],["visualizing",{"_index":1985,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["void",{"_index":183,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["warn",{"_index":1533,"title":{},"body":{"classes/DataSeries.html":{}}}],["warning",{"_index":4544,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["warranties",{"_index":4812,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4807,"title":{},"body":{"license.html":{}}}],["waterfall",{"_index":4603,"title":{"additional-documentation/chart-types/bar/waterfall.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["ways",{"_index":4588,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":3223,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["we're",{"_index":339,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"components/ChartComponent.html":{},"classes/Grid.html":{},"interfaces/IScaleSVGElement.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["weird",{"_index":1825,"title":{},"body":{"classes/Grid.html":{}}}],["well",{"_index":716,"title":{},"body":{"classes/Chart.html":{}}}],["wherever",{"_index":4772,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1960,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["white",{"_index":1090,"title":{},"body":{"classes/ChartPalette.html":{},"components/RichLegendTileComponent.html":{}}}],["whole",{"_index":1243,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["width",{"_index":636,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["width(value",{"_index":1562,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["width/height",{"_index":2692,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["widthcorrection",{"_index":2994,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthcorrection].map(x",{"_index":3004,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthlimit",{"_index":2057,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["widthoffset",{"_index":1147,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["wish",{"_index":4570,"title":{},"body":{"index.html":{}}}],["within",{"_index":1510,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":4584,"title":{},"body":{"index.html":{},"license.html":{}}}],["words",{"_index":2958,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["work",{"_index":3443,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["workaround",{"_index":626,"title":{},"body":{"classes/Chart.html":{}}}],["works",{"_index":4175,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["worldwide",{"_index":4713,"title":{},"body":{"license.html":{}}}],["wrapper",{"_index":3456,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["writing",{"_index":4705,"title":{},"body":{"license.html":{}}}],["written",{"_index":4689,"title":{},"body":{"license.html":{}}}],["x",{"_index":42,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["x0",{"_index":43,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["x1",{"_index":44,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["x2",{"_index":1832,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["xcoord",{"_index":2948,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["xcoord].sort((a",{"_index":2986,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xcoordinate",{"_index":4401,"title":{},"body":{"classes/UtilityService.html":{}}}],["xfn",{"_index":3099,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale",{"_index":2474,"title":{},"body":{"interfaces/IScaleSVGElement.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["xscale.convert(d",{"_index":3100,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale.range([padding.left",{"_index":2475,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xscales",{"_index":2990,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["xscales.reduce((result",{"_index":3002,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xvalue",{"_index":3036,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{}}}],["xvalue.length",{"_index":3042,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xvalue.slice(0",{"_index":3041,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xxxx",{"_index":4434,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxx",{"_index":4433,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxxxxxx\".replace(/[xy]/g",{"_index":4437,"title":{},"body":{"classes/UtilityService.html":{}}}],["xy",{"_index":147,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["xy.iszoneedge",{"_index":4275,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy.y",{"_index":4272,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy1",{"_index":4270,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2",{"_index":4265,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2].foreach((xy",{"_index":4271,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xyaccessors",{"_index":2268,"title":{"classes/XYAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["xyaccessors:30",{"_index":3420,"title":{},"body":{"classes/LineAccessors.html":{}}}],["xyaccessors:34",{"_index":3421,"title":{},"body":{"classes/LineAccessors.html":{}}}],["xygrid",{"_index":258,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["xygrid(lastspark",{"_index":4067,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["xygrid.tick_label_overflow_debounce_interval",{"_index":2630,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["xygridconfig",{"_index":87,"title":{"classes/XYGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IScaleSVGElement.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["xygridconfig.default_margin",{"_index":4490,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig.default_padding",{"_index":4488,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig:16",{"_index":125,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:23",{"_index":118,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:32",{"_index":127,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:9",{"_index":123,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xyrenderer",{"_index":2823,"title":{"classes/XYRenderer.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["y",{"_index":47,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/IScaleSVGElement.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IXYSeriesAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["y0",{"_index":48,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["y1",{"_index":49,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["y2",{"_index":1836,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["ycoord",{"_index":3544,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["ycoordinate",{"_index":4402,"title":{},"body":{"classes/UtilityService.html":{}}}],["yes",{"_index":295,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChartAssist.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{}}}],["yleftscale",{"_index":2501,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yrightscale",{"_index":2513,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale",{"_index":2480,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscale.range([dimension.height",{"_index":2481,"title":{},"body":{"interfaces/IScaleSVGElement.html":{}}}],["yscales",{"_index":4400,"title":{},"body":{"classes/UtilityService.html":{}}}],["yvalue",{"_index":4470,"title":{},"body":{"classes/UtilityService.html":{}}}],["yxxx",{"_index":4436,"title":{},"body":{"classes/UtilityService.html":{}}}],["z",{"_index":4302,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end",{"_index":4304,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end?.(z.data[0",{"_index":4350,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start",{"_index":4303,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start?.(z.data[0",{"_index":4348,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.series.color?.(z.id",{"_index":4351,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.data",{"_index":4349,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.end",{"_index":4295,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.entered",{"_index":4236,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.id",{"_index":4353,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.start",{"_index":4294,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.status",{"_index":4293,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors",{"_index":4340,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.end?.(zonedatapoint",{"_index":4343,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.start?.(zonedatapoint",{"_index":4342,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zero",{"_index":153,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/DonutGaugeRenderingUtil.html":{},"interfaces/IScaleSVGElement.html":{}}}],["zone",{"_index":2012,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGaugeThresholdsRendererConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zone.accessors.data",{"_index":4341,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.accessors.series.color",{"_index":4314,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data",{"_index":4300,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data[zoneindex",{"_index":4339,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.id}__${zoneboundary}__threshold",{"_index":4316,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.scales",{"_index":4318,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.value",{"_index":4317,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary",{"_index":2877,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zoneboundary.end",{"_index":4307,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary.start",{"_index":4206,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonecross",{"_index":2874,"title":{"interfaces/ZoneCross.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["zonecrosspoints",{"_index":4279,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonedatapoint",{"_index":4338,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneendy",{"_index":4274,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindex",{"_index":4336,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes",{"_index":4234,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes[zone.id",{"_index":4335,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones",{"_index":4170,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.findindex(z",{"_index":4297,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.foreach(z",{"_index":4235,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonestarty",{"_index":4273,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoom",{"_index":2921,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["zoombrushlayer",{"_index":2922,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin",{"_index":2910,"title":{"classes/ZoomPlugin.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.default_config",{"_index":2926,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.layer_name",{"_index":2936,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AreaAccessors.html":{"url":"classes/AreaAccessors.html","title":"class - AreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAreaAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaGridConfig.html":{"url":"classes/AreaGridConfig.html","title":"class - AreaGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/area-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/area-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n */\nexport class AreaGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.dimension.padding.bottom = 2; // for shifting zero-line to bottom border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AxisConfig.html":{"url":"classes/AxisConfig.html","title":"class - AxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/axis-config.ts\n        \n\n            \n                Description\n            \n            \n                See IAxisConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IAxisConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fit\n                            \n                            \n                                    Public\n                                gridTicks\n                            \n                            \n                                    Public\n                                padding\n                            \n                            \n                                    Public\n                                tickLabel\n                            \n                            \n                                    Public\n                                tickSize\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    approximateTicks\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:22\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            gridTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:10\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickLabel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITickLabelConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:13\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        approximateTicks\n                    \n                \n\n                \n                    \n                        getapproximateTicks()\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:27\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n                \n                    \n                        setapproximateTicks(ticks: any)\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:32\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            ticks\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { defaultTextOverflowHandler } from \"../default-text-overflow-handler\";\nimport { IAxisConfig, ITickLabelConfig } from \"../types\";\n\n/** See {@link IAxisConfig} */\nexport class AxisConfig implements IAxisConfig {\n    /** See {@link IAxisConfig#visible} */\n    public visible: boolean = true;\n\n    /** See {@link IAxisConfig#gridTicks} */\n    public gridTicks: boolean = false;\n\n    /** See {@link IAxisConfig#tickSize} */\n    public tickSize: number = 5;\n\n    /** See {@link IAxisConfig#tickLabel} */\n    public tickLabel: ITickLabelConfig = {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    };\n\n    /** See {@link IAxisConfig#fit} */\n    public fit: boolean = false;\n\n    private _approximateTicks: number = 5;\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    get approximateTicks(): any {\n        return this._approximateTicks;\n    }\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    set approximateTicks(ticks: any) {\n        this._approximateTicks = parseInt(ticks, 10);\n    }\n\n    public padding: number = 0;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarAccessors.html":{"url":"classes/BarAccessors.html","title":"class - BarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RectangleAccessors\n            \n\n            \n                Implements\n            \n            \n                            IBarAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarGridConfig.html":{"url":"classes/BarGridConfig.html","title":"class - BarGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n */\nexport class BarGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 5;\n        this.axis.bottom.gridTicks = false;\n        this.axis.left.fit = true;\n        this.axis.bottom.tickSize = 5;\n        this.axis.left.tickSize = 0;\n        this.dimension.margin.right = 0;\n        this.dimension.padding.bottom =  2; // 2 for border\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHighlightStrategy.html":{"url":"classes/BarHighlightStrategy.html","title":"class - BarHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number, selectedDataPointIdxFn?: SelectedDatPointIdxFn)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the data point that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                                \n                                                        selectedDataPointIdxFn\n                                                  \n                                                        \n                                                                        SelectedDatPointIdxFn\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey, scales?: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select } from \"d3-selection\";\nimport findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, DATA_POINT_NOT_FOUND } from \"../../../constants\";\nimport { isBandScale, IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { UtilityService } from \"../../../core/common/utility.service\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName, RenderState } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport type SelectedDatPointIdxFn = (seriesId: string) => number;\n\nexport class BarHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the data point that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1, private selectedDataPointIdxFn?: SelectedDatPointIdxFn) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey, scales);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales, scales?: Scales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                             (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                             (d, i) => {\n                                 const start = startAccessor?.(d, i, series.data, series);\n                                 const lengthLimit = Math.min(this.levels, value.length, start.length);\n                                 // diy efficient array comparison\n                                 for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                        valueOf  startAccessor?.(d, i, series.data, series);\n                        const nearestIndex = UtilityService.findNearestIndex(series.data, value, accessor);\n                        index = (nearestIndex >= series.data.length || accessor(series.data[nearestIndex], nearestIndex) > valueOf) ? -1 : nearestIndex;\n                    } else {\n                        // @ts-ignore\n                        // Needs to catch -1 otherwise typescript errors\n                        index = UtilityService.getClosestIndex(series.data, (d, i) => endAccessor(d, i, series.data, series), value) ?? -1;\n                    }\n                }\n                return index;\n            }\n            return findIndex(series.data,\n                             (d, i) => valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n        const barStylesFn = renderer.getContainerStateStyles;\n        const selectedDataPointIdx = !isUndefined(this.selectedDataPointIdxFn) ? this.selectedDataPointIdxFn(renderSeries.dataSeries.id) : DATA_POINT_NOT_FOUND;\n\n        target.selectAll(`g.${ renderer.barContainerClass }`).each(function (d: any, index: number) {\n            let renderState: RenderState;\n            if (dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n                if (index === selectedDataPointIdx || selectedDataPointIdx === DATA_POINT_NOT_FOUND) {\n                    renderState = RenderState.default;\n                } else {\n                    renderState = RenderState.deemphasized;\n                }\n            } else if (dataPointIndex === index || index === selectedDataPointIdx) {\n                renderState = RenderState.emphasized;\n            } else {\n                renderState = RenderState.deemphasized;\n            }\n            select(this).attrs(barStylesFn(renderState));\n        });\n\n        // rendererSubject.next({\n        //     eventName: HIGHLIGHT_SERIES_EVENT,\n        //     data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n        // });\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHorizontalGridConfig.html":{"url":"classes/BarHorizontalGridConfig.html","title":"class - BarHorizontalGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHorizontalGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-horizontal-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-horizontal-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n */\nexport class BarHorizontalGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = false;\n        this.axis.left.tickSize = 0;\n        this.axis.bottom.gridTicks = true;\n        this.axis.left.fit = true;\n        this.axis.bottom.fit = true;\n        this.axis.bottom.tickSize = 0;\n        this.axis.left.tickSize = 5;\n        this.dimension.padding.left =  2; // 2 for border\n        this.borders.left.visible = true;\n        this.borders.bottom.visible = false;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarSeriesHighlightStrategy.html":{"url":"classes/BarSeriesHighlightStrategy.html","title":"class - BarSeriesHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarSeriesHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the datapoint that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, HIGHLIGHT_SERIES_EVENT } from \"../../../constants\";\nimport { IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport class BarSeriesHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the datapoint that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                             (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                             (d, i) => {\n                                 const start = startAccessor?.(d, i, series.data, series);\n                                 const lengthLimit = Math.min(this.levels, value.length, start.length);\n                                 // diy efficient array comparison\n                                 for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        if (dataPointIndex >= 0 || dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n            rendererSubject.next({\n                eventName: HIGHLIGHT_SERIES_EVENT,\n                data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n            });\n        }\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarStatusGridConfig.html":{"url":"classes/BarStatusGridConfig.html","title":"class - BarStatusGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarStatusGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-status-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-status-grid-config.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\nexport class BarStatusGridConfig extends XYGridConfig {\n    constructor(config: { showBottomAxis: boolean } = {showBottomAxis: true}) {\n        super();\n\n        this.interactive = true;\n        this.interactionPlugins = false;\n        if (!config.showBottomAxis) {\n            this.axis.bottom.visible = false;\n            this.borders.bottom.visible = false;\n        }\n        this.axis.left.visible = false;\n        this.axis.left.gridTicks = false;\n        this.borders.left.visible = false;\n\n        this.dimension.autoHeight = false;\n        this.dimension.margin.top = 0;\n        if (!config.showBottomAxis) {\n            this.dimension.margin.bottom = 0;\n        }\n        this.dimension.height(30); // TODO: solve magic number together with spark chart\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarTooltipsPlugin.html":{"url":"classes/BarTooltipsPlugin.html","title":"class - BarTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/bar-tooltips-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: IBarChartConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/bar-tooltips-plugin.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IBarChartConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IBarChartConfig } from \"../../../renderers/bar/types\";\n\nimport { ChartTooltipsPlugin } from \"./chart-tooltips-plugin\";\n\nexport class BarTooltipsPlugin extends ChartTooltipsPlugin {\n\n    constructor(config?: IBarChartConfig) {\n        super();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BasicLegendTileComponent.html":{"url":"components/BasicLegendTileComponent.html","title":"component - BasicLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BasicLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/basic-legend-tile/basic-legend-tile.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-basic-legend-tile\n            \n\n            \n                styleUrls\n                ./basic-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./basic-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {\n    Component,\n    ViewEncapsulation,\n} from \"@angular/core\";\n\n@Component({\n    selector: \"nui-basic-legend-tile\",\n    templateUrl: \"./basic-legend-tile.component.html\",\n    styleUrls: [\"./basic-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class BasicLegendTileComponent { }\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'BasicLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chart.html":{"url":"classes/Chart.html","title":"class - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChart\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventBus\n                            \n                            \n                                    Public\n                                    Optional\n                                filterDefs\n                            \n                            \n                                    Public\n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPlugin\n                            \n                            \n                                    Public\n                                addPlugins\n                            \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getDataManager\n                            \n                            \n                                    Public\n                                getEventBus\n                            \n                            \n                                    Public\n                                getGrid\n                            \n                            \n                                    Public\n                                getRenderEngine\n                            \n                            \n                                    Public\n                                hasPlugin\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                removePlugin\n                            \n                            \n                                    Public\n                                removePlugins\n                            \n                            \n                                    Public\n                                setSeriesStates\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grid: IGrid)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        grid\n                                                  \n                                                        \n                                                                        IGrid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventBus()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            filterDefs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            target\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         D3Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugins(...plugins: IChartPlugin[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugins\n                                    \n                                            IChartPlugin[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugins(...classRefs: ()[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRefs\n                                    \n                                            ()[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../constants\";\n\nimport { ChartPlugin } from \"./common/chart-plugin\";\nimport { DataManager } from \"./common/data-manager\";\nimport { EventBus } from \"./common/event-bus\";\nimport { Lasagna } from \"./common/lasagna\";\nimport { RenderEngine } from \"./common/render-engine\";\nimport { D3Selection, IAccessors, IChart, IChartEvent, IChartPlugin, IChartSeries, IRenderStateData } from \"./common/types\";\nimport { IDimensionConfig, IDimensions, IGrid } from \"./grid/types\";\nimport { RenderEnginePlugin } from \"./plugins/render-engine-plugin\";\nimport { CssFilterId, GRAYSCALE_COLOR_MATRIX } from \"./types\";\n\nexport class Chart implements IChart {\n    public readonly eventBus = new EventBus();\n    public element: HTMLElement;\n    public target?: D3Selection;\n    public filterDefs?: Selection;\n\n    private dataManager: DataManager; // TODO: interface\n    private renderEngine: RenderEngine; // TODO: interface\n\n    private updateSubject = new BehaviorSubject[]>([]);\n    private updateDimensionsSubject = new Subject();\n    private seriesStatesSubject = new BehaviorSubject([]);\n\n    private plugins: IChartPlugin[] = [];\n\n    constructor(private grid: IGrid) {\n        if (!grid) {\n            throw new Error(\"Grid has to be defined!\");\n        }\n        grid.updateChartDimensionsSubject = this.updateDimensionsSubject;\n        grid.eventBus = this.eventBus;\n    }\n\n    public getEventBus(): EventBus {\n        return this.eventBus;\n    }\n\n    public getDataManager(): DataManager {\n        return this.dataManager;\n    }\n\n    public getRenderEngine(): RenderEngine {\n        return this.renderEngine;\n    }\n\n    public getGrid(): IGrid {\n        return this.grid;\n    }\n\n    public addPlugin(plugin: IChartPlugin) {\n        plugin.chart = this;\n        this.plugins.push(plugin);\n    }\n\n    public removePlugin(classRef: typeof ChartPlugin) {\n        const pluginIndex = this.plugins.findIndex(plugin => plugin instanceof classRef);\n        if (-1 !== pluginIndex) {\n            this.plugins[pluginIndex].destroy();\n            this.plugins.splice(pluginIndex, 1);\n        }\n    }\n\n    public addPlugins(...plugins: IChartPlugin[]) {\n        for (const plugin of plugins) {\n            this.addPlugin(plugin);\n        }\n    }\n\n    public removePlugins(...classRefs: (typeof ChartPlugin)[]) {\n        for (const classRef of classRefs) {\n            this.removePlugin(classRef);\n        }\n    }\n\n    public hasPlugin(classRef: typeof ChartPlugin) {\n        return -1 !== this.plugins.findIndex(plugin => plugin instanceof classRef);\n    }\n\n    public build(element: HTMLElement) {\n        this.element = element;\n\n        // @ts-ignore: Workaround to avoid strict build crash because of type\n        this.target = select(this.element)\n            .append(\"svg\")\n            .attrs({\n                \"class\": \"nui-chart\",\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n            });\n\n        this.configureCssFilters();\n        this.buildGrid();\n\n        this.dataManager = this.buildDataManager();\n        this.renderEngine = this.buildRenderEngine(this.grid.getLasagna(), this.dataManager);\n\n        // Put the render engine at the front of the list since other plugins may be relying on renderers to be updated first\n        const renderEnginePlugin = new RenderEnginePlugin();\n        renderEnginePlugin.chart = this;\n        this.plugins.unshift(renderEnginePlugin);\n\n        for (const gridPlugin of this.getGrid().buildPlugins(this)) {\n            this.addPlugin(gridPlugin);\n        }\n\n        this.initialize();\n\n        const untilDestroy = () => takeUntil(this.getEventBus().getStream(DESTROY_EVENT));\n        this.updateSubject.pipe(untilDestroy())\n            .subscribe((d: IChartSeries[]) => this.onUpdate(d));\n        this.updateDimensionsSubject.pipe(untilDestroy())\n            .subscribe(() => this.onUpdateDimensions());\n        this.seriesStatesSubject.pipe(untilDestroy())\n            .subscribe((rs: IRenderStateData[]) => this.onSetSeriesStates(rs));\n    }\n\n    private configureCssFilters() {\n        this.filterDefs = this.target?.append(\"defs\");\n\n        // filter for applying a grayscale appearance to svg elements\n        this.filterDefs?.append(\"filter\")\n            .attr(\"id\", CssFilterId.Grayscale)\n            .append(\"feColorMatrix\")\n            .attr(\"type\", \"matrix\")\n            .attr(\"values\", GRAYSCALE_COLOR_MATRIX);\n    }\n\n    protected buildDataManager(): DataManager {\n        return new DataManager();\n    }\n\n    protected buildGrid() {\n        if (this.target) {\n            this.grid.target(this.target);\n            this.grid.build();\n\n            this.updateTargetDimensions(this.grid.config().dimension);\n        }\n    }\n\n    protected buildRenderEngine(lasagna: Lasagna, dataManager: DataManager): RenderEngine {\n        return new RenderEngine(lasagna, dataManager);\n    }\n\n    public update(seriesSet: IChartSeries[]) {\n        this.updateSubject.next(seriesSet);\n    }\n\n    public updateDimensions() {\n        this.updateDimensionsSubject.next();\n    }\n\n    public initialize() {\n        each(this.plugins, (p: IChartPlugin) => {\n            p.initialize();\n        });\n    }\n\n    public destroy() {\n        this.eventBus.getStream(DESTROY_EVENT).next({ data: null });\n        this.eventBus.destroy();\n\n        this.plugins.forEach(p => p.destroy());\n\n        this.target?.remove();\n        this.target = undefined;\n    }\n\n    public setSeriesStates(renderStateData: IRenderStateData[]) {\n        this.seriesStatesSubject.next(renderStateData);\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).next({ data: renderStateData });\n    }\n\n    private onUpdate(seriesSet: IChartSeries[]) {\n        this.dataManager.update(seriesSet);\n\n        this.grid.scales = this.dataManager.scalesIndexByKey;\n        this.dataManager.updateScaleDomains();\n        this.grid.updateRanges();\n\n        this.plugins.forEach(p => p.update());\n    }\n\n    private onUpdateDimensions() {\n        const dimensionConfig = this.grid.config().dimension;\n\n        // if the chart is reused with different grid dimensions, the chart's container dimensions need to be adjusted as well\n        this.updateTargetDimensions(dimensionConfig);\n\n        const dimensions: Partial = {};\n        if (dimensionConfig.autoHeight) {\n            dimensions.height = this.element.clientHeight;\n        }\n        if (dimensionConfig.autoWidth) {\n            dimensions.width = this.element.clientWidth;\n        }\n        this.grid.updateDimensions(dimensions);\n\n        this.plugins.forEach(p => p.updateDimensions());\n    }\n\n    private updateTargetDimensions(dimensionConfig: IDimensionConfig) {\n        if (!dimensionConfig.autoHeight) {\n            // use style instead of attr to override css style\n            this.target?.style(\"height\", dimensionConfig.outerHeight() + \"px\");\n        }\n        if (!dimensionConfig.autoWidth) {\n            // use style instead of attr to override css style\n            this.target?.style(\"width\", dimensionConfig.outerWidth() + \"px\");\n        }\n    }\n\n    private onSetSeriesStates(renderStateData: IRenderStateData[]) {\n        this.renderEngine.setSeriesStates(renderStateData);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartAssistRenderStateData.html":{"url":"classes/ChartAssistRenderStateData.html","title":"class - ChartAssistRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartAssistRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n\n            \n\n\n            \n                Implements\n            \n            \n                            IRenderStateData\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasisState\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                seriesId\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seriesId: string, series: IChartAssistSeries, emphasisState, visible)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seriesId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        series\n                                                  \n                                                        \n                                                                    IChartAssistSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emphasisState\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        visible\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            emphasisState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : RenderState.default\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IChartAssistSeries\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:62\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/core/chart-assists/types.ts:65\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex extends Record {\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ChartCollectionIdDirective.html":{"url":"directives/ChartCollectionIdDirective.html","title":"directive - ChartCollectionIdDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ChartCollectionIdDirective\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection-id.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive represents a grouping behavior that is separated from chart components. Any chart component\nregistering the CHART_COMPONENT provider can be injected into this.\nA group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nuiChartCollectionId]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nuiChartCollectionId\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartComponent: IChartComponent, chartCollectionService: ChartCollectionService)\n                    \n                \n                        \n                            \n                                Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartComponent\n                                                  \n                                                        \n                                                                        IChartComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chartCollectionService\n                                                  \n                                                        \n                                                                        ChartCollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        nuiChartCollectionId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, Inject, Input } from \"@angular/core\";\n\nimport { CHART_COMPONENT } from \"../constants\";\nimport { IChartComponent } from \"../core/common/types\";\n\nimport { ChartCollectionService } from \"./chart-collection.service\";\n\n/**\n * This directive represents a grouping behavior that is separated from chart components. Any chart component\n * registering the CHART_COMPONENT provider can be injected into this.\n *\n * A group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n */\n@Directive({\n    selector: \"[nuiChartCollectionId]\",\n})\nexport class ChartCollectionIdDirective implements AfterViewInit {\n    /* eslint-disable-next-line @angular-eslint/no-input-rename */\n    @Input(\"nuiChartCollectionId\")\n    public collectionId: string;\n\n    constructor(@Inject(CHART_COMPONENT) private chartComponent: IChartComponent,\n                private chartCollectionService: ChartCollectionService) {\n    }\n\n    public ngAfterViewInit(): void {\n        this.chartCollectionService.getChartCollection(this.collectionId).addChart(this.chartComponent.chart);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChartCollectionService.html":{"url":"injectables/ChartCollectionService.html","title":"injectable - ChartCollectionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChartCollectionService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection.service.ts\n        \n\n            \n                Description\n            \n            \n                This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getChartCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getChartCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChartCollection(collectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-collection/chart-collection.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { ChartCollection } from \"../core/chart-collection\";\n\n/**\n * This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n */\n@Injectable()\nexport class ChartCollectionService {\n\n    private collections: { [key: string]: ChartCollection } = {};\n\n    public getChartCollection(collectionId: string) {\n        let collection = this.collections[collectionId];\n        if (isUndefined(collection)) {\n            collection = new ChartCollection();\n            this.collections[collectionId] = collection;\n        }\n        return collection;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartComponent.html":{"url":"components/ChartComponent.html","title":"component - ChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart/chart.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterContentInit\n                    AfterViewInit\n                    OnDestroy\n                    IChartComponent\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: CHART_COMPONENT, useExisting: forwardRef(() => ChartComponent),\n}\n                \n            \n\n\n            \n                selector\n                nui-chart\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                    Public\n                                    Optional\n                                resizeObserver\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, ngZone: NgZone, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart/chart.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        chart\n                    \n                \n                \n                    \n                        Type :         IChart\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:33\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            redraw\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            resizeObserver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ResizeObserver\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n} from \"@angular/core\";\nimport debounce from \"lodash/debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport { CHART_COMPONENT, CHART_VIEW_STATUS_EVENT, REFRESH_EVENT } from \"../constants\";\nimport { IChart, IChartComponent, IChartViewStatusEventPayload } from \"../core/common/types\";\n\n@Component({\n    selector: \"nui-chart\",\n    template: \"\",\n    providers: [\n        {\n            provide: CHART_COMPONENT,\n            useExisting: forwardRef(() => ChartComponent),\n        },\n    ],\n})\nexport class ChartComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, IChartComponent, OnChanges {\n\n    @Input() public chart: IChart;\n\n    public resizeObserver?: ResizeObserver;\n    private resizeHandler: Function;\n    private intersectionObserver: IntersectionObserver;\n\n    constructor(private elRef: ElementRef, private ngZone: NgZone, private cd: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        this.intersectionObserver = new IntersectionObserver(this.intersectionObserverCallback);\n        this.intersectionObserver.observe(this.elRef.nativeElement);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"chart\"]) {\n            const previousChart: IChart = changes[\"chart\"].previousValue;\n            if (previousChart) {\n                previousChart.destroy();\n            }\n\n            if (this.chart) {\n                this.chart.build(this.elRef.nativeElement);\n                this.redraw();\n            }\n        }\n    }\n\n    public ngAfterContentInit() {\n        this.chart.getEventBus().getStream(REFRESH_EVENT).subscribe(() => {\n            this.chart.updateDimensions();\n        });\n    }\n\n    public ngAfterViewInit() {\n        this.resizeHandler = debounce(() => this.redraw(), 10);\n        this.resizeObserver = new ResizeObserver(() => {\n            // This was suggested here https://github.com/angular/zone.js/issues/1011\n            this.ngZone.run(() => this.resizeHandler());\n        });\n        this.ngZone.runOutsideAngular(() => this.resizeObserver?.observe((this.elRef.nativeElement)));\n    }\n\n    public ngOnDestroy() {\n        this.intersectionObserver?.unobserve(this.elRef.nativeElement);\n        this.resizeObserver?.unobserve(this.elRef.nativeElement);\n        this.chart?.destroy();\n    }\n\n    public redraw = () => {\n        this.chart.updateDimensions();\n        this.cd.detectChanges();\n    }\n\n    private intersectionObserverCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void => {\n        // Since we're only listening for intersection changes for one target (the chart itself), the 'entries' argument always has just one element.\n        const data: IChartViewStatusEventPayload = { isChartInView: entries[0].isIntersecting };\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartDonutContentComponent.html":{"url":"components/ChartDonutContentComponent.html","title":"component - ChartDonutContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartDonutContentComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-donut-content/chart-donut-content.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-donut-content\n            \n\n            \n                styleUrls\n                ./chart-donut-content.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-donut-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartDonutContentPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:15\n                            \n                        \n                \n                    \n                        The plugin instance \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:18\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { ChartDonutContentPlugin } from \"../core/plugins/chart-donut-content-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-donut-content\",\n    templateUrl: \"./chart-donut-content.component.html\",\n    styleUrls: [\"./chart-donut-content.component.less\"],\n})\nexport class ChartDonutContentComponent implements OnDestroy, OnChanges {\n\n    /** The plugin instance */\n    @Input() public plugin: ChartDonutContentPlugin;\n\n    /** The current content position */\n    public contentPosition: IElementPosition;\n\n    private contentPositionUpdateSubscription: Subscription;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin) {\n            this.contentPositionUpdateSubscription?.unsubscribe();\n\n            this.contentPositionUpdateSubscription = this.plugin.contentPositionUpdateSubject.subscribe((contentPosition: IElementPosition) => {\n                this.contentPosition = contentPosition;\n            });\n\n            this.plugin.chart.updateDimensions();\n        }\n    }\n\n    public ngOnDestroy() {\n        if (this.contentPositionUpdateSubscription) {\n            this.contentPositionUpdateSubscription.unsubscribe();\n        }\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartDonutContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartDonutContentPlugin.html":{"url":"classes/ChartDonutContentPlugin.html","title":"class - ChartDonutContentPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartDonutContentPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-donut-content-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin calculates new size and position for content inside donut chart\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                            \n                                    Public\n                                contentPositionUpdateSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:17\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPositionUpdateSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:14\n                            \n                        \n\n                \n                    \n                        Subject for getting updates on the content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { RadialRenderer } from \"../../renderers/radial/radial-renderer\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\n\nimport { IElementPosition } from \"./types\";\n\n/**\n* This plugin calculates new size and position for content inside donut chart\n*/\nexport class ChartDonutContentPlugin extends ChartPlugin {\n    /** Subject for getting updates on the content position */\n    public contentPositionUpdateSubject = new Subject();\n\n    /** The current content position */\n    public contentPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n\n    public updateDimensions() {\n        const radius = this.chart.getDataManager().chartSeriesSet.reduce((prev: number | undefined, current) => {\n            if (current.renderer instanceof RadialRenderer && !isUndefined(prev)) {\n                return Math.min(prev, current.renderer.getInnerRadius(current.scales.r.range(), current.data.length - 1));\n            }\n            return prev;\n        }, Infinity);\n\n        if (isUndefined(radius)) {\n            throw new Error(\"Radius is undefined\");\n        }\n\n        this.contentPosition = this.getContentPosition(radius);\n        this.contentPositionUpdateSubject.next(this.contentPosition);\n    }\n\n    public destroy(): void {\n        this.contentPositionUpdateSubject.complete();\n    }\n\n    private getContentPosition(areaSize: number): IElementPosition {\n        const basics = [this.chart.getGrid().config().dimension.outerHeight() / 2, this.chart.getGrid().config().dimension.outerWidth() / 2];\n        return {\n            top: basics[0] - (areaSize / Math.sqrt(2)),\n            left: basics[1] - (areaSize / Math.sqrt(2)),\n            width: areaSize * Math.sqrt(2),\n            height: areaSize * Math.sqrt(2),\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartMarkerComponent.html":{"url":"components/ChartMarkerComponent.html","title":"component - ChartMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartMarkerComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-marker/chart-marker.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-marker\n            \n\n            \n                styleUrls\n                ./chart-marker.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-marker.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                svgContent\n                            \n                            \n                                    Public\n                                viewBox\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                drawLine\n                            \n                            \n                                marker\n                            \n                            \n                                maxSize\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-marker/chart-marker.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drawLine\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        marker\n                    \n                \n                \n                    \n                        Type :         IChartMarker\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxSize\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            svgContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('svgContent')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, SimpleChanges, ViewChild } from \"@angular/core\";\nimport isFunction from \"lodash/isFunction\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IChartMarker } from \"../core/common/types\";\n\n/** @ignore */\nconst SVG_PADDING = 3;\n\n@Component({\n    selector: \"nui-chart-marker\",\n    templateUrl: \"./chart-marker.component.html\",\n    styleUrls: [\"./chart-marker.component.less\"],\n})\nexport class ChartMarkerComponent implements OnDestroy, AfterViewInit, OnChanges {\n    @Input() marker: IChartMarker;\n    @Input() drawLine: boolean;\n    @Input() color: string;\n    @Input() maxSize = 20;\n\n    @ViewChild(\"svgContent\") public svgContent: ElementRef;\n\n    public viewBox: string;\n    public height: string = \"10px\"; // size needs to be defined by default to prevent initial svg element from being huge\n    public width: string = \"10px\"; // same here\n\n    private svg = new BehaviorSubject(\"\");\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngAfterViewInit() {\n        this.svg.subscribe((svg: string) => {\n            this.renderMarkerSvg(svg);\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"marker\"] || changes[\"color\"]) {\n            if (changes[\"color\"]) {\n                this.marker.setColor(this.color);\n            }\n            if (this.marker && this.marker.getSvg && isFunction(this.marker.getSvg)) {\n                this.svg.next(this.marker.getSvg());\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.svg.complete();\n    }\n\n    private renderMarkerSvg(svg: string) {\n        const svgContainerElement: any = this.svgContent.nativeElement;\n        const line = ``;\n        svgContainerElement.innerHTML = \"\";\n\n        if (this.drawLine) {\n            svgContainerElement.insertAdjacentHTML(\"beforeend\", line);\n        }\n        svgContainerElement.insertAdjacentHTML(\"beforeend\", svg);\n\n        setTimeout(() => {\n            const clientRect = svgContainerElement.getBBox();\n            this.viewBox = `${clientRect.x - SVG_PADDING} ${clientRect.y - SVG_PADDING} ` +\n                `${clientRect.width + 2 * SVG_PADDING} ${clientRect.height + 2 * SVG_PADDING}`;\n            this.width = Math.min(clientRect.width + 2 * SVG_PADDING, this.maxSize) + \"px\";\n            this.height = Math.min(clientRect.height + 2 * SVG_PADDING, this.maxSize) + \"px\";\n\n            this.changeDetector.markForCheck();\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPalette.html":{"url":"classes/ChartPalette.html","title":"class - ChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/chart-palette.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPalette\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    standardColors\n                                \n                                \n                                    backgroundColors\n                                \n                                \n                                    textColors\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[] | IValueProvider, options: object)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/chart-palette.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                        string[] | IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        standardColors\n                    \n                \n\n                \n                    \n                        getstandardColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        backgroundColors\n                    \n                \n\n                \n                    \n                        getbackgroundColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textColors\n                    \n                \n\n                \n                    \n                        gettextColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:39\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { rgb } from \"d3-color\";\nimport isArray from \"lodash/isArray\";\n\nimport { IChartPalette, IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\nimport { SequentialColorProvider } from \"./sequential-color-provider\";\nimport { TextColorProvider } from \"./text-color-provider\";\n\nexport class ChartPalette implements IChartPalette {\n    private _standardColors: IValueProvider;\n    private _textColors: TextColorProvider;\n    private _backgroundColors: IValueProvider;\n\n    constructor(colors: string[] | IValueProvider, options = {backgroundOpacity: 0.15}) {\n        if (isArray(colors)) {\n            this._standardColors = new SequentialColorProvider( colors);\n        } else {\n            this._standardColors = > colors;\n        }\n        this._textColors = new TextColorProvider(this.standardColors, {light: \"white\", dark: \"black\"}); // TODO: oops!\n        this._backgroundColors = new ProcessedColorProvider(this.standardColors, (c: string) => {\n            const color = getColorValueByName(c);\n            const rgbColor = rgb(color);\n            rgbColor.opacity = options.backgroundOpacity;\n            return rgbColor.toString();\n        });\n    }\n\n    public get standardColors(): IValueProvider {\n        return this._standardColors;\n    }\n\n    public get backgroundColors(): IValueProvider {\n        return this._backgroundColors;\n    }\n\n    public get textColors(): IValueProvider {\n        return this._textColors;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPlugin.html":{"url":"classes/ChartPlugin.html","title":"class - ChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/chart-plugin.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPlugin\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/common/chart-plugin.ts:3\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/chart-plugin.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChart, IChartPlugin } from \"./types\";\n\nexport abstract class ChartPlugin implements IChartPlugin {\n\n    constructor() { }\n\n    public chart: IChart;\n\n    public initialize(): void { }\n\n    public update(): void { }\n\n    public updateDimensions(): void { }\n\n    public destroy(): void { }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartPopoverComponent.html":{"url":"components/ChartPopoverComponent.html","title":"component - ChartPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartPopoverComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-popover/chart-popover.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-popover\n            \n\n            \n                styleUrls\n                ./chart-popover.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                popover\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, element: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-popover/chart-popover.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartPopoverPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        update\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PopoverComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(PopoverComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from \"@angular/core\";\nimport { PopoverComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IDataPointsPayload } from \"../core/common/types\";\nimport { ChartPopoverPlugin } from \"../core/plugins/chart-popover-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-popover\",\n    templateUrl: \"./chart-popover.component.html\",\n    styleUrls: [\"./chart-popover.component.less\"],\n})\nexport class ChartPopoverComponent implements OnChanges, OnInit, OnDestroy {\n\n    @Input() plugin: ChartPopoverPlugin;\n\n    @Input() template: TemplateRef;\n\n    @Output() update = new EventEmitter();\n\n    @ViewChild(PopoverComponent) popover: PopoverComponent;\n\n    private destroy$ = new Subject();\n    private initPlugin$ = new Subject();\n\n    constructor(private changeDetector: ChangeDetectorRef, public element: ElementRef) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin && !changes.plugin.isFirstChange()) {\n            this.initPlugin();\n        }\n    }\n\n    public ngOnInit() {\n        this.initPlugin();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.initPlugin$.complete();\n    }\n\n    private initPlugin() {\n        this.initPlugin$.next();\n\n        this.plugin?.openPopoverSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe(() => {\n            this.changeDetector.markForCheck();\n        });\n\n        this.plugin?.updatePositionSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe((position: IElementPosition) => {\n            this.popover?.resetSize();\n            // calculating a width offset to position the popover's host element at the midpoint of the popover target\n            const widthOffset = position.width / 2;\n            this.element.nativeElement.style.left = position.left + widthOffset + \"px\";\n            this.element.nativeElement.style.top = position.top + \"px\";\n            this.popover?.updatePosition();\n            this.update.next(this.plugin?.dataPoints);\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPopoverPlugin.html":{"url":"classes/ChartPopoverPlugin.html","title":"class - ChartPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\npopover inputs. The listened event can be configured using the 'config.eventStreamId' property.\nThe actual popover is handled by the ChartPopoverComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IPopoverPluginConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/chart-popover-plugin.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IPopoverPluginConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:34\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:28\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:43\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:32\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:36\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:30\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipComponent.html":{"url":"components/ChartTooltipComponent.html","title":"component - ChartTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltip\n            \n\n            \n                styleUrls\n                ./chart-tooltip.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltip.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltip.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { animate, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-tooltip\",\n    styleUrls: [\"./chart-tooltip.component.less\"],\n    templateUrl: \"./chart-tooltip.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger(\"tooltip\", [\n            transition(\":enter\", [\n                style({ opacity: 0 }),\n                animate(300, style({ opacity: 1 })),\n            ]),\n            transition(\":leave\", [\n                animate(300, style({ opacity: 0 })),\n            ]),\n        ]),\n    ],\n})\nexport class ChartTooltipComponent {\n    @Input() template: TemplateRef;\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipsComponent.html":{"url":"components/ChartTooltipsComponent.html","title":"component - ChartTooltipsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipsComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltips.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltips\n            \n\n            \n                styleUrls\n                ./chart-tooltips.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltips.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeTooltips\n                            \n                            \n                                    Public\n                                openTooltips\n                            \n                            \n                                tooltips\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                trackByFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-tooltips/chart-tooltips.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartTooltipsPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(index: number, item: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-tooltips/chart-tooltips.component.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closeTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChildren(ChartTooltipDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.closePending = true;\n        clearTimeout(this.closeTimeout);\n\n        this.closeTimeout = setTimeout(() => {\n            this.closeTooltips.next();\n            this.closePending = false;\n            this.isOpen = false;\n        });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n                            tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartTooltipsPlugin.html":{"url":"classes/ChartTooltipsPlugin.html","title":"class - ChartTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\nThe actual tooltips are handled by the ChartTooltipsComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tooltipPositionOffset: number, orientation: \"right\" | \"top\")\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tooltipPositionOffset\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Offset of a tooltip from edge of a highlighted element\n\n                                                        \n                                                \n                                                \n                                                        orientation\n                                                  \n                                                        \n                                                                    \"right\" | \"top\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:65\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:63\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:75\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:70\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData,\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSeries.html":{"url":"classes/DataSeries.html","title":"class - DataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/data-series.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDataSeries\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessors\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSeries: IDataSeries)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSeries\n                                                  \n                                                        \n                                                                        IDataSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            accessors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataSeries, SeriesAccessor } from \"./types\";\n\nexport class DataSeries implements IDataSeries {\n\n    public id: string;\n    public accessors: {\n        data?: Record;\n        series?: Record;\n    };\n    public data: any[];\n    public name: string;\n\n    constructor(dataSeries: IDataSeries) {\n        this.id = dataSeries.id;\n        this.data = dataSeries.data;\n        this.name = dataSeries.name;\n        // TODO: here we can check if default accessors are valid and warn user\n        this.accessors = dataSeries.accessors || {\n            data: {\n                category: (d: any) => d.name,\n                value: (d: any) => d.value,\n            }, series: {},\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DimensionConfig.html":{"url":"classes/DimensionConfig.html","title":"class - DimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/dimension-config.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDimensionConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoHeight\n                            \n                            \n                                    Public\n                                autoWidth\n                            \n                            \n                                    Public\n                                margin\n                            \n                            \n                                    Public\n                                marginLocked\n                            \n                            \n                                    Public\n                                padding\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:31\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:29\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            margin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            marginLocked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:21\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:47\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:49\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:51\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:74\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:76\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:78\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:60\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:62\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:64\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:34\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:36\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:38\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IDimensionConfig } from \"../types\";\n\nexport class DimensionConfig implements IDimensionConfig {\n    private _width: number = 0;\n    private _height: number = 0;\n    /** See {@link IDimensionConfig#margin} */\n    public margin: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#padding} */\n    public padding: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#marginLocked} */\n    public marginLocked: IAllAround = {\n        top: false,\n        right: false,\n        bottom: false,\n        left: false,\n    };\n\n    /** See {@link IDimensionConfig#autoWidth} */\n    public autoWidth = true;\n    /** See {@link IDimensionConfig#autoHeight} */\n    public autoHeight = true;\n\n    /** See {@link IDimensionConfig#width} */\n    public width(): number;\n    /** See {@link IDimensionConfig#width} */\n    public width(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#width} */\n    public width(value?: number): any {\n        if (value === undefined) {\n            return this._width;\n        }\n        this._width = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#height} */\n    public height(): number;\n    /** See {@link IDimensionConfig#height} */\n    public height(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#height} */\n    public height(value?: number): any {\n        if (value === undefined) {\n            return this._height;\n        }\n        this._height = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(): number;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value?: number): any {\n        const marginsWidth = this.margin.right + this.margin.left;\n        if (value === undefined) {\n            return this._width + marginsWidth;\n        }\n        this._width = Math.max(value - marginsWidth, 0);\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(): number;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value?: number): any {\n        const marginsHeight = this.margin.top + this.margin.bottom;\n        if (value === undefined) {\n            return this._height + marginsHeight;\n        }\n        this._height = Math.max(value - marginsHeight, 0);\n        return this;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DonutGaugeRenderingUtil.html":{"url":"classes/DonutGaugeRenderingUtil.html","title":"class - DonutGaugeRenderingUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DonutGaugeRenderingUtil\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/gauge/donut-gauge-rendering-util.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                generateThresholdArcData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            generateThresholdArcData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateThresholdArcData(data: IGaugeThresholdDatum[])\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/radial/gauge/donut-gauge-rendering-util.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            IGaugeThresholdDatum[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DefaultArcObject[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DefaultArcObject } from \"d3\";\nimport { pie } from \"d3-shape\";\n\nimport { IGaugeThresholdDatum } from \"../../../gauge/types\";\n\nexport class DonutGaugeRenderingUtil {\n    public static generateThresholdArcData(data: IGaugeThresholdDatum[]): DefaultArcObject[] {\n        if (!data.length) {\n            return [];\n        }\n\n        const arcData: number[] = DonutGaugeRenderingUtil.generateArcValues(data);\n        const thresholdsData: any[] = [];\n        const pieGenerator = pie().sort(null);\n        const arcsForMarkers = pieGenerator(arcData);\n\n        arcsForMarkers.forEach((arcDatum: any, i: number) => {\n            if (i % 2 === 1) {\n                thresholdsData.push(arcDatum);\n            }\n        });\n        return thresholdsData;\n    }\n\n    private static generateArcValues(data: IGaugeThresholdDatum[]): number[] {\n        // arcs with a value of zero serve as the threshold points\n        const arcData: number[] = Array(data.length * 2 - 1).fill(0);\n        data.forEach((d: IGaugeThresholdDatum, i: number) => {\n            // arcs with a non-zero value serve as the space between the threshold points\n            arcData[i * 2] = i === 0 ? d.value : d.value - data[i - 1].value;\n        });\n        return arcData;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventBus.html":{"url":"classes/EventBus.html","title":"class - EventBus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventBus\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/event-bus.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStream(streamId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    streamId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subject\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport { Subject } from \"rxjs\";\n\nexport class EventBus {\n\n    private streams: { [key: string]: Subject } = {};\n\n    public getStream(streamId: string): Subject {\n        if (!this.streams[streamId]) {\n            this.streams[streamId] = new Subject();\n        }\n        return this.streams[streamId];\n    }\n\n    public destroy() {\n        each(Object.keys(this.streams), (key: string) => {\n            this.streams[key].complete();\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grid.html":{"url":"classes/Grid.html","title":"class - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/grid.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IGrid\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_BORDER_CLASS_NAME\n                            \n                            \n                                    Public\n                                eventBus\n                            \n                            \n                                    Static\n                                GRID_CLASS_NAME\n                            \n                            \n                                    Static\n                                GRID_ELEMENTS_LAYER_NAME\n                            \n                            \n                                    Static\n                                RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                            \n                                    Static\n                                RENDERING_AREA_LAYER_NAME\n                            \n                            \n                                    Public\n                                updateChartDimensionsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                buildPlugins\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                getInteractiveArea\n                            \n                            \n                                    Public\n                                getLasagna\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                updateRanges\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_BORDER_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-border\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:30\n                            \n                        \n\n                \n                    \n                        Class name applied to each of the grid's borders by default \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventBus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:54\n                            \n                        \n\n                \n                    \n                        Event bus provided by the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-grid\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:27\n                            \n                        \n\n                \n                    \n                        Class name for the grid \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_ELEMENTS_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"grid-elements\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:36\n                            \n                        \n\n                \n                    \n                        Name for the lasagna layer containing the grid's rendered elements \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"clip-path_\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:33\n                            \n                        \n\n                \n                    \n                        Prefix applied to the rendering area clip path id \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"rendering-area\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:39\n                            \n                        \n\n                \n                    \n                        Name for the rendering area lasagna layer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateChartDimensionsSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:51\n                            \n                        \n\n                \n                    \n                        Subject for indicating that the chart's dimensions should be updated \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:134\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:174\n                \n            \n\n\n            \n                \n                    Derived classes override this method to build the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart instance to pass to each plugin\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        Default implementation returns an empty array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:108\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGridConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:110\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config?: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:112\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IGridConfig | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:88\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:93\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :     Lasagna\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:121\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:123\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target?: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:125\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:179\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:190\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:206\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { IChart, IChartEvent, IChartPlugin } from \"../common/types\";\nimport { D3Selection } from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\n\nimport { GridConfig } from \"./config/grid-config\";\nimport { IAllAround, IBorderConfig, IBorders, IDimensions, IGrid, IGridConfig } from \"./types\";\n\nexport const borderMidpoint = 0.5;\n\n// eslint-disable-next-line @typescript-eslint/no-type-alias\ntype BorderKey = keyof IAllAround;\n\n/**\n * @implements {IGrid}\n * Implementation for the dimensions, scaling, interactive area, and borders of a basic grid\n */\nexport abstract class Grid implements IGrid {\n    /** Class name for the grid */\n    public static GRID_CLASS_NAME = \"nui-chart-grid\";\n\n    /** Class name applied to each of the grid's borders by default */\n    public static DEFAULT_BORDER_CLASS_NAME = \"nui-chart-border\";\n\n    /** Prefix applied to the rendering area clip path id */\n    public static RENDERING_AREA_CLIP_PATH_PREFIX = \"clip-path_\";\n\n    /** Name for the lasagna layer containing the grid's rendered elements */\n    public static GRID_ELEMENTS_LAYER_NAME = \"grid-elements\";\n\n    /** Name for the rendering area lasagna layer */\n    public static RENDERING_AREA_LAYER_NAME = \"rendering-area\";\n\n    /** @ignore Height correction needed to prevent interaction gap between vertically stacked charts */\n    public static RENDER_AREA_HEIGHT_CORRECTION = 1;\n\n    /** @ignore Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area */\n    public static RENDER_AREA_WIDTH_CORRECTION = 1;\n\n    /** @ignore Width correction needed to sync bottom border length and grid width to tick placement */\n    public static TICK_DIMENSION_CORRECTION = 1;\n\n    /** Subject for indicating that the chart's dimensions should be updated */\n    public updateChartDimensionsSubject: Subject;\n\n    /** Event bus provided by the chart */\n    public eventBus: EventBus;\n\n    /** d3 container for the grid */\n    protected container: D3Selection;\n\n    /** d3 selection for the grid's rendering area clip path */\n    protected renderingAreaClipPath: D3Selection;\n\n    /** d3 selection for the grid's rendering area */\n    protected renderingArea: D3Selection;\n\n    /** d3 selection for the grid's interactive area */\n    protected interactiveArea: D3Selection;\n\n    /** The grid's layer manager */\n    protected lasagna: Lasagna;\n\n    /** Lasagna layer for the grid's rendered elements */\n    protected gridElementsLayer: Selection;\n\n    /** Definition of the grid's borders as rendered */\n    protected borders: Partial = {};\n\n    /** Property value of the grid's scales */\n    protected _scales: ScalesIndex;\n\n    /** Property value of the grid's configuration */\n    protected _config: IGridConfig;\n\n    /** Property value of the grid's target d3 selection */\n    protected _target: D3Selection;\n\n\n    /** See {@link IGrid#getInteractiveArea} */\n    public getInteractiveArea(): D3Selection {\n        return this.interactiveArea;\n    }\n\n    /** See {@link IGrid#getLasagna} */\n    public getLasagna(): Lasagna {\n        return this.lasagna;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IGridConfig): IGridConfig | this {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    /** See {@link IGrid#target} */\n    public target(): D3Selection;\n    /** See {@link IGrid#target} */\n    public target(target: D3Selection): IGrid;\n    /** See {@link IGrid#target} */\n    public target(target?: D3Selection): D3Selection | IGrid {\n        if (target === undefined) {\n            return this._target;\n        }\n        this._target = target;\n        return this;\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        if (!this.config()) {\n            const config = new GridConfig();\n            this.config(config);\n        }\n\n        this.container = this._target.append(\"g\")\n            .attrs({\n                \"class\": Grid.GRID_CLASS_NAME,\n            });\n\n        const clipPathId = Grid.RENDERING_AREA_CLIP_PATH_PREFIX + UtilityService.uuid();\n        // Asserting similar type to avoid refactoring all the grids\n        // TODO: Refactor lasagna service to accept multiple D3Selection types\n        //  or refactor grid implementations/interfaces to maintain the same selection type\n        this.lasagna = new Lasagna(>(this.container), clipPathId);\n        this.renderingArea = this.buildRenderingArea(clipPathId);\n        this.adjustRenderingArea();\n\n        this.gridElementsLayer = this.lasagna.addLayer({\n            name: Grid.GRID_ELEMENTS_LAYER_NAME,\n            order: 100,\n            clipped: false,\n        });\n\n        const borders = this.buildBorders(this.gridElementsLayer);\n        if (borders) {\n            this.borders = borders;\n        }\n\n        return this;\n    }\n\n    /**\n     * Derived classes override this method to build the grid's plugins\n     *\n     * @param {IChart} chart The chart instance to pass to each plugin\n     *\n     * @returns {IChartPlugin[]} Default implementation returns an empty array\n     */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        return [];\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        this.updateBorders();\n        this.adjustRenderingArea();\n        return this;\n    }\n\n    /** See {@link IGrid#updateDimensions} */\n    public updateDimensions(dimensions: Partial): IGrid {\n        const dimensionConfig = this.config().dimension;\n\n        if (dimensions.width) {\n            dimensionConfig.outerWidth(dimensions.width - this.getOuterWidthDimensionCorrection());\n        }\n        if (dimensions.height) {\n            dimensionConfig.outerHeight(dimensions.height);\n        }\n\n        this.adjustRenderingArea();\n        this.updateRanges();\n\n        return this;\n    }\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        this.update();\n        return this;\n    }\n\n    /**\n     * Calculate the width correction needed for accommodating grid elements that may extend beyond the chart's configured width\n     */\n    protected getOuterWidthDimensionCorrection() {\n        return Grid.TICK_DIMENSION_CORRECTION;\n    }\n\n    /**\n     * Builds the grid borders as SVGElements based on the specified configuration\n     *\n     * @param {D3Selection} container d3 container for the borders\n     *\n     * @returns {Partial} The grid's borders\n     */\n    protected buildBorders(container: D3Selection): Partial | undefined {\n        if (!this.config() || !this.config().borders) {\n            return;\n        }\n\n        const borderConfigs = this.config().borders;\n        const borders: Partial = {};\n        const borderKeys = Object.keys(borderConfigs);\n        each(borderKeys, (side: BorderKey) => {\n            // We're creating even invisible borders and updating visibility afterwards\n            if (borderConfigs[side]) {\n                borders[side] = this.createBorder(container, borderConfigs[side]) ?? undefined;\n            }\n        });\n\n        return borders;\n    }\n\n    /**\n     * Adjusts the grid's rendering area and clip path based on the grid's configured width and height\n     */\n    protected adjustRenderingArea = () => {\n        const d = this.config().dimension;\n        const disableHeightCorrection = this.config().disableRenderAreaHeightCorrection;\n        const disableWidthCorrection = this.config().disableRenderAreaWidthCorrection;\n\n        const renderingAreaClipPathAttrs = {\n            \"width\": d.width(),\n            \"height\": d.height() + (disableHeightCorrection ? 0 : Grid.RENDER_AREA_HEIGHT_CORRECTION),\n        } as any;\n\n        if (!disableHeightCorrection) {\n            renderingAreaClipPathAttrs[\"y\"] = -Grid.RENDER_AREA_HEIGHT_CORRECTION;\n        }\n\n        const renderingAreaAttrs = {\n            ...renderingAreaClipPathAttrs,\n            // Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area\n            \"width\": Math.max(0, d.width() - (disableWidthCorrection ? 0 : Grid.RENDER_AREA_WIDTH_CORRECTION)),\n        };\n\n        this.renderingAreaClipPath.attrs(renderingAreaClipPathAttrs);\n        this.renderingArea.attrs(renderingAreaAttrs);\n    }\n\n    /**\n     * Builds the grid's rendering area as a layer on the lasagna\n     *\n     * @param {string} clipPathId The clip path identifier\n     *\n     * @returns {D3Selection} The grid's rendering area\n     */\n    private buildRenderingArea(clipPathId: string): D3Selection {\n        this.renderingAreaClipPath = this._target.append(\"clipPath\")\n            .attr(\"id\", clipPathId)\n            .append(\"rect\");\n\n        const renderingAreaContainer = this.lasagna.addLayer({\n            name: Grid.RENDERING_AREA_LAYER_NAME,\n            order: -1,\n            clipped: true,\n        });\n        return renderingAreaContainer.append(\"rect\")\n            .attrs({\n                \"pointer-events\": \"all\",\n                \"fill\": \"transparent\",\n            });\n    }\n\n    /**\n     * Creates a border with the specified configuration in the provided container\n     *\n     * @param {D3Selection} container The container to append the border to\n     * @param {IBorderConfig} config The configuration to apply to the border\n     *\n     * @returns {SVGElement} The created border\n     */\n    private createBorder(container: D3Selection, config: IBorderConfig): SVGElement | null {\n        const border = container.append(\"line\")\n            .attr(\"class\", config.className || Grid.DEFAULT_BORDER_CLASS_NAME);\n\n        if (config.width) {\n            // use style instead of attr to override css style\n            border.style(\"stroke-width\", config.width);\n        }\n        if (config.color) {\n            // use style instead of attr to override css style\n            border.style(\"stroke\", config.color);\n        }\n\n        return border.node();\n    }\n\n    // TODO: borders are evil. reconsider!\n    // We're using borders instead of axis line and because of that we need to do these weird size adjustments\n    protected updateBottomBorder() {\n        if (!this.borders.bottom) {\n            throw new Error(\"BottomBorder is not defined\");\n        }\n        select(this.borders.bottom)\n            .attrs({\n                \"x1\": 0,\n                \"y1\": this.config().dimension.height() - borderMidpoint,\n                \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                \"y2\": this.config().dimension.height() - borderMidpoint,\n            })\n            .classed(\"hidden\", !this._config.borders.bottom?.visible);\n    }\n\n    /**\n     * Updates the d3 line positioning and visibility attributes of each of the configured borders\n     */\n    protected updateBorders() {\n        if (this.borders.bottom) {\n            this.updateBottomBorder();\n        }\n        if (this.borders.top) {\n            select(this.borders.top)\n                .attrs({\n                    \"x1\": 0,\n                    \"y1\": borderMidpoint, // the line was outside of the viewport in some browser when set to 0\n                    \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                    \"y2\": borderMidpoint,\n                })\n                .classed(\"hidden\", !this._config.borders.top?.visible);\n        }\n        if (this.borders.right) {\n            select(this.borders.right)\n                .attrs({\n                    \"x1\": this.config().dimension.width() - borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": this.config().dimension.width() - borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.right?.visible);\n        }\n        if (this.borders.left) {\n            select(this.borders.left)\n                .attrs({\n                    \"x1\": borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.left?.visible);\n        }\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GridConfig.html":{"url":"classes/GridConfig.html","title":"class - GridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/grid-config.ts\n        \n\n            \n                Description\n            \n            \n                See IGridConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:28\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:30\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:32\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:11\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IBorderConfig, IDimensionConfig, IGridConfig } from \"../types\";\n\nimport { DimensionConfig } from \"./dimension-config\";\n\n/** See {@link IGridConfig} */\nexport class GridConfig implements IGridConfig {\n\n    // We should avoid this kind of option in future versions of GridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    /** See {@link IGridConfig#interactive} */\n    public interactive: boolean = true;\n\n    /** See {@link IGridConfig#dimension} */\n    public dimension: IDimensionConfig = new DimensionConfig();\n    /** See {@link IGridConfig#borders} */\n    public borders: IAllAround = {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    };\n    /** See {@link IGridConfig#cursor} */\n    public cursor = \"crosshair\";\n    /** See {@link IGridConfig#disableRenderAreaHeightCorrection} */\n    public disableRenderAreaHeightCorrection = false;\n    /** See {@link IGridConfig#disableRenderAreaWidthCorrection} */\n    public disableRenderAreaWidthCorrection = false;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HorizontalBarAccessors.html":{"url":"classes/HorizontalBarAccessors.html","title":"class - HorizontalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HorizontalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/horizontal-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class HorizontalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.end(d, i, s, ds),\n            startY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessY: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccessors.html":{"url":"interfaces/IAccessors.html","title":"interface - IAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Accessors describe the data for the consumers.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data point level accessors for defining what part of a datum is used for visualizations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISeriesAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAllAround.html":{"url":"interfaces/IAllAround.html","title":"interface - IAllAround","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAllAround\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining aspects of the top, right, bottom, and left sides of a grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the bottom of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the left side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the right side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the top of an entity \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaAccessors.html":{"url":"interfaces/IAreaAccessors.html","title":"interface - IAreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IAreaDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IAreaSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaDataAccessors.html":{"url":"interfaces/IAreaDataAccessors.html","title":"interface - IAreaDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        absoluteX0\n                                \n                                \n                                        absoluteX1\n                                \n                                \n                                        absoluteY0\n                                \n                                \n                                        absoluteY1\n                                \n                                \n                                        x\n                                \n                                \n                                        x0\n                                \n                                \n                                        x1\n                                \n                                \n                                        y\n                                \n                                \n                                        y0\n                                \n                                \n                                        y1\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX0\n                                    \n                                \n                                \n                                    \n                                        absoluteX0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX1\n                                    \n                                \n                                \n                                    \n                                        absoluteX1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY0\n                                    \n                                \n                                \n                                    \n                                        absoluteY0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY1\n                                    \n                                \n                                \n                                    \n                                        absoluteY1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x0\n                                    \n                                \n                                \n                                    \n                                        x0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                    \n                                \n                                \n                                    \n                                        x1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y0\n                                    \n                                \n                                \n                                    \n                                        y0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                    \n                                \n                                \n                                    \n                                        y1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaRendererConfig.html":{"url":"interfaces/IAreaRendererConfig.html","title":"interface - IAreaRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the area renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaClass\n                                \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaClass\n                                    \n                                \n                                \n                                    \n                                        areaClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the areas \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the area boundaries \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The width of the area path's stroke in pixels. Default is 1. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaSeriesAccessors.html":{"url":"interfaces/IAreaSeriesAccessors.html","title":"interface - IAreaSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxis.html":{"url":"interfaces/IAxis.html","title":"interface - IAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxis\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a d3 axis entity\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        group\n                                \n                                \n                                        labelGroup\n                                \n                                \n                                        tickGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:     Axis\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Axis\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                    \n                                \n                                \n                                    \n                                        group:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelGroup\n                                    \n                                \n                                \n                                    \n                                        labelGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis label \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickGroup\n                                    \n                                \n                                \n                                    \n                                        tickGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis ticks \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxisConfig.html":{"url":"interfaces/IAxisConfig.html","title":"interface - IAxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of a grid axis \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        approximateTicks\n                                \n                                \n                                        fit\n                                \n                                \n                                        gridTicks\n                                \n                                \n                                        padding\n                                \n                                \n                                        tickLabel\n                                \n                                \n                                        tickSize\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        approximateTicks\n                                    \n                                \n                                \n                                    \n                                        approximateTicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The approximate number of ticks to display \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fit\n                                    \n                                \n                                \n                                    \n                                        fit:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether to fit the grid margins to the axis labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridTicks\n                                    \n                                \n                                \n                                    \n                                        gridTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether grid ticks should be displayed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the axis padding \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickLabel\n                                    \n                                \n                                \n                                    \n                                        tickLabel:         ITickLabelConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITickLabelConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the tick labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickSize\n                                    \n                                \n                                \n                                    \n                                        tickSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The length of the ticks in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the axis should be visible \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBandScale.html":{"url":"interfaces/IBandScale.html","title":"interface - IBandScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBandScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bandwidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bandwidth\n                        \n                        \n                    \n                \n            \n            \n                \nbandwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarAccessors.html":{"url":"interfaces/IBarAccessors.html","title":"interface - IBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IBarDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBarDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarChartConfig.html":{"url":"interfaces/IBarChartConfig.html","title":"interface - IBarChartConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarChartConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for bar charts\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        grouped\n                                \n                                \n                                            Optional\n                                        horizontal\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grouped\n                                    \n                                \n                                \n                                    \n                                        grouped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontal\n                                    \n                                \n                                \n                                    \n                                        horizontal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarDataAccessors.html":{"url":"interfaces/IBarDataAccessors.html","title":"interface - IBarDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRectangleDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        cssClass\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                                \n                                        start\n                                \n                                \n                                            Optional\n                                        thickness\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cssClass\n                                    \n                                \n                                \n                                    \n                                        cssClass:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarRendererConfig.html":{"url":"interfaces/IBarRendererConfig.html","title":"interface - IBarRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the bar renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        barClass\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableMinBarThickness\n                                \n                                \n                                            Optional\n                                        highlightStrategy\n                                \n                                \n                                            Optional\n                                        padding\n                                \n                                \n                                            Optional\n                                        pointerEvents\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        barClass\n                                    \n                                \n                                \n                                    \n                                        barClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the mouse cursor style to use when hovering over individual bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableMinBarThickness\n                                    \n                                \n                                \n                                    \n                                        enableMinBarThickness:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightStrategy\n                                    \n                                \n                                \n                                    \n                                        highlightStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the padding on both sides of each bar \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointerEvents\n                                    \n                                \n                                \n                                    \n                                        pointerEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables pointer events on the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorderConfig.html":{"url":"interfaces/IBorderConfig.html","title":"interface - IBorderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorderConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        visible\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class name \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the border should be visible \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The thickness of the border \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorders.html":{"url":"interfaces/IBorders.html","title":"interface - IBorders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorders\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n\n            \n\n            \n                Extends\n            \n            \n                        IAllAround\n            \n\n\n\n\n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChart.html":{"url":"interfaces/IChart.html","title":"interface - IChart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        target\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addPlugin\n                                \n                                \n                                    build\n                                \n                                \n                                    destroy\n                                \n                                \n                                    getDataManager\n                                \n                                \n                                    getEventBus\n                                \n                                \n                                    getGrid\n                                \n                                \n                                    getRenderEngine\n                                \n                                \n                                        Optional\n                                    removePlugin\n                                \n                                \n                                    setSeriesStates\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \naddPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:216\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \ngetGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Optional\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \nremovePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \nsetSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssist.html":{"url":"interfaces/IChartAssist.html","title":"interface - IChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing an assistant that aids in chart usage\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getHighlightedValue\n                                \n                                \n                                    getVisibleSeriesWithLegend\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:34\n                \n            \n\n\n            \n                \n                    Gets the current highlighted value for the specified series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart series to get the highlighted value for\n\n                                    \n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key for the datapoint value scale\n\n                                    \n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The name of the formatter if a custom formatter name is set on the scale\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | undefined\n\n                    \n                    \n                        The highlighted value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:39\n                \n            \n\n\n            \n                \n                    Returns visible series that are represented by a legend\n\n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:23\n                \n            \n\n\n            \n                \n                    Updates the series set for the chart assist's associated chart\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The updated set of series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex extends Record {\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistEvent.html":{"url":"interfaces/IChartAssistEvent.html","title":"interface - IChartAssistEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for chart assist events \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        payload\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ChartAssistEventType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChartAssistEventType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex extends Record {\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistSeries.html":{"url":"interfaces/IChartAssistSeries.html","title":"interface - IChartAssistSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IChartSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        preprocess\n                                \n                                \n                                            Optional\n                                        showInLegend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        preprocess\n                                    \n                                \n                                \n                                    \n                                        preprocess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether this series should be preprocessed in the chart assist\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInLegend\n                                    \n                                \n                                \n                                    \n                                        showInLegend:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether this series should be shown in the legend\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartEvent.html":{"url":"interfaces/IChartEvent.html","title":"interface - IChartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        broadcast\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcast\n                                    \n                                \n                                \n                                    \n                                        broadcast:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartMarker.html":{"url":"interfaces/IChartMarker.html","title":"interface - IChartMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSvg\n                                \n                                \n                                    setColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \ngetSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPalette.html":{"url":"interfaces/IChartPalette.html","title":"interface - IChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        backgroundColors\n                                \n                                \n                                        standardColors\n                                \n                                \n                                        textColors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColors\n                                    \n                                \n                                \n                                    \n                                        backgroundColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        standardColors\n                                    \n                                \n                                \n                                    \n                                        standardColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textColors\n                                    \n                                \n                                \n                                    \n                                        textColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPlugin.html":{"url":"interfaces/IChartPlugin.html","title":"interface - IChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface defining a chart plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chart\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    destroy\n                                \n                                \n                                    initialize\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:247\n                \n            \n\n\n            \n                \n                    Perform plugin cleanup - Invoked automatically on chart destruction \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \ninitialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:238\n                \n            \n\n\n            \n                \n                    Initialize the plugin - Invoked automatically on chart initialization \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:241\n                \n            \n\n\n            \n                \n                    Update the plugin - Invoked automatically on chart update \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:244\n                \n            \n\n\n            \n                \n                    Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated chart - set automatically on chart initialization\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartSeries.html":{"url":"interfaces/IChartSeries.html","title":"interface - IChartSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                The set of elements required for a chart to visualize some data\n\n            \n\n            \n                Extends\n            \n            \n                        IDataSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        renderer\n                                \n                                \n                                            Optional\n                                        renderState\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:         Renderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Renderer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The renderer to be used for visualizing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderState\n                                    \n                                \n                                \n                                    \n                                        renderState:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Represents an emphasis/visibility state of this series\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about how chart data should conform to the drawable area.\nGrids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\nuses 'x' and 'y' as the keys for its scales.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartViewStatusEventPayload.html":{"url":"interfaces/IChartViewStatusEventPayload.html","title":"interface - IChartViewStatusEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartViewStatusEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for the chart's visibility status in relation to the nearest scrollable parent\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isChartInView\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isChartInView\n                                    \n                                \n                                \n                                    \n                                        isChartInView:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether at least one pixel of the chart's parent element has\nintersected with the visible area of its nearest scrollable parent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataAccessors.html":{"url":"interfaces/IDataAccessors.html","title":"interface - IDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:139\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPoint.html":{"url":"interfaces/IDataPoint.html","title":"interface - IDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        index\n                                \n                                \n                                            Optional\n                                        position\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data index \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         IPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Position \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPointsPayload.html":{"url":"interfaces/IDataPointsPayload.html","title":"interface - IDataPointsPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPointsPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Collection of one or more data points as a dictionary of seriesId to IDataPoint\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        IDataPoint\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:327\n                            \n                        \n                \n                    \n                        Series id as key to highlighted data point \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataSeries.html":{"url":"interfaces/IDataSeries.html","title":"interface - IDataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A set of data to visualize on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessors\n                                \n                                \n                                        data\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:170\n                            \n                        \n                \n                    \n                        Allow any properties to be stored on this object to facilitate the transfer of data from APIs \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessors\n                                    \n                                \n                                \n                                    \n                                        accessors:     A\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     A\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors describing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     D[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     D[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\nrenderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\ndata point properties directly, but usually through accessors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensionConfig.html":{"url":"interfaces/IDimensionConfig.html","title":"interface - IDimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid dimensions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        autoHeight\n                                \n                                \n                                        autoWidth\n                                \n                                \n                                        margin\n                                \n                                \n                                            Optional\n                                        marginLocked\n                                \n                                \n                                        padding\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    height\n                                \n                                \n                                    height\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    width\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:66\n                \n            \n\n\n            \n                \n                    Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid height\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:72\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:94\n                \n            \n\n\n            \n                \n                    Sets the grid's height by subtracting the grid's vertical margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new height plus the grid's vertical margins     *\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:100\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- including vertical margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height plus vertical margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:80\n                \n            \n\n\n            \n                \n                    Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new width plus the grid's horizontal margins\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:86\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- including horizontal margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width plus horizontal margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:53\n                \n            \n\n\n            \n                \n                    Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid width\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:59\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoHeight\n                                    \n                                \n                                \n                                    \n                                        autoHeight:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its height \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoWidth\n                                    \n                                \n                                \n                                    \n                                        autoWidth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its width \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margin\n                                    \n                                \n                                \n                                    \n                                        margin:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left margin sizes in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marginLocked\n                                    \n                                \n                                \n                                    \n                                        marginLocked:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left padding sizes in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensions.html":{"url":"interfaces/IDimensions.html","title":"interface - IDimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensions\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The width and height of an grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IElementPosition.html":{"url":"interfaces/IElementPosition.html","title":"interface - IElementPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IElementPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining an element's position \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        top\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnhancedLineCapConfig.html":{"url":"interfaces/IEnhancedLineCapConfig.html","title":"interface - IEnhancedLineCapConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnhancedLineCapConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the enhanced line caps \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fill\n                                \n                                \n                                            Optional\n                                        radius\n                                \n                                \n                                            Optional\n                                        stroke\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the fill color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the radius in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stroke\n                                    \n                                \n                                \n                                    \n                                        stroke:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatters.html":{"url":"interfaces/IFormatters.html","title":"interface - IFormatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFormatters\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for scale formatters \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        tick\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [p: string]:        Formatter | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:16\n                            \n                        \n                \n                    \n                        Additional formatters \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tick\n                                    \n                                \n                                \n                                    \n                                        tick:         Formatter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Formatter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Formatter for tick labels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGaugeThresholdsRendererConfig.html":{"url":"interfaces/IGaugeThresholdsRendererConfig.html","title":"interface - IGaugeThresholdsRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGaugeThresholdsRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Standard configuration for gauge threshold renderers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enabled\n                                \n                                \n                                            Optional\n                                        markerRadius\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the renderer is enabled \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerRadius\n                                    \n                                \n                                \n                                    \n                                        markerRadius:         StandardGaugeThresholdMarkerRadius | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StandardGaugeThresholdMarkerRadius | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The radius of each threshold marker \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrid.html":{"url":"interfaces/IGrid.html","title":"interface - IGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGrid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The basic interface for a grid's dimensions, scaling, interaction, and borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        eventBus\n                                \n                                \n                                        scales\n                                \n                                \n                                            Optional\n                                        updateChartDimensionsSubject\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    build\n                                \n                                \n                                    buildPlugins\n                                \n                                \n                                    config\n                                \n                                \n                                    config\n                                \n                                \n                                    getInteractiveArea\n                                \n                                \n                                    getLasagna\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                                \n                                    updateRanges\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:270\n                \n            \n\n\n            \n                \n                    Builds the grid's rendered elements\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \nbuildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:299\n                \n            \n\n\n            \n                \n                    Builds the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        The set of generated plugins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:255\n                \n            \n\n\n            \n                \n                    getter for the grid configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGridConfig\n\n                    \n                    \n                        The grid configuration\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:263\n                \n            \n\n\n            \n                \n                    setter for the grid configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \ngetInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:232\n                \n            \n\n\n            \n                \n                    Provides access to the grid's interactive area\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's interactive area\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \ngetLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:225\n                \n            \n\n\n            \n                \n                    Provides access to the grid's layering mechanism\n\n\n                    \n                    \n                    \n                        Returns :     Lasagna\n\n                    \n                    \n                        The grid's layering mechanism\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:239\n                \n            \n\n\n            \n                \n                    getter for the grid's target d3 selection\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's target d3 selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:247\n                \n            \n\n\n            \n                \n                    setter for the grid's target d3 selection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The grid's new target d3 selection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:248\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:277\n                \n            \n\n\n            \n                \n                    Updates the grid's rendered elements based on the current scales and configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:285\n                \n            \n\n\n            \n                \n                    Updates the grid's dimensions as specified\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid dimensions\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \nupdateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:292\n                \n            \n\n\n            \n                \n                    Updates the ranges on the grid's scales based on the grid's configured dimensions\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventBus\n                                    \n                                \n                                \n                                    \n                                        eventBus:     EventBus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EventBus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Chart event bus\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         ScalesIndex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScalesIndex\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The grid scales\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateChartDimensionsSubject\n                                    \n                                \n                                \n                                    \n                                        updateChartDimensionsSubject:     Subject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subject\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subject for indicating that the chart's dimensions should be updated\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridConfig.html":{"url":"interfaces/IGridConfig.html","title":"interface - IGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Basic grid configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        borders\n                                \n                                \n                                        cursor\n                                \n                                \n                                        dimension\n                                \n                                \n                                            Optional\n                                        disableRenderAreaHeightCorrection\n                                \n                                \n                                            Optional\n                                        disableRenderAreaWidthCorrection\n                                \n                                \n                                        interactive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        borders\n                                    \n                                \n                                \n                                    \n                                        borders:     IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's borders \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String indicating the desired cursor style \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension\n                                    \n                                \n                                \n                                    \n                                        dimension:         IDimensionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDimensionConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's dimensions \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRenderAreaHeightCorrection\n                                    \n                                \n                                \n                                    \n                                        disableRenderAreaHeightCorrection:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set to true to disable the render area height correction \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableRenderAreaWidthCorrection\n                                    \n                                \n                                \n                                    \n                                        disableRenderAreaWidthCorrection:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set to true to disable the render area width correction \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the grid will respond to mouse events \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHasInnerScale.html":{"url":"interfaces/IHasInnerScale.html","title":"interface - IHasInnerScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHasInnerScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        innerScale\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        innerScale\n                                    \n                                \n                                \n                                    \n                                        innerScale:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHighlightStrategy.html":{"url":"interfaces/IHighlightStrategy.html","title":"interface - IHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    draw\n                                \n                                \n                                    getDataPointIndex\n                                \n                                \n                                    highlightDataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataPointIndex(renderer: T, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \nhighlightDataPoint(renderer: T, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionCoordinatesPayload.html":{"url":"interfaces/IInteractionCoordinatesPayload.html","title":"interface - IInteractionCoordinatesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionCoordinatesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_COORDINATES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     ICoordinates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICoordinates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The coordinates of an interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointEvent.html":{"url":"interfaces/IInteractionDataPointEvent.html","title":"interface - IInteractionDataPointEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding a single data point\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoint\n                                    \n                                \n                                \n                                    \n                                        dataPoint:         IDataPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointsEvent.html":{"url":"interfaces/IInteractionDataPointsEvent.html","title":"interface - IInteractionDataPointsEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointsEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding one or more data points\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoints\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoints\n                                    \n                                \n                                \n                                    \n                                        dataPoints:         IDataPointsPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPointsPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionPayload.html":{"url":"interfaces/IInteractionPayload.html","title":"interface - IInteractionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValues.html":{"url":"interfaces/IInteractionValues.html","title":"interface - IInteractionValues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValues\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleKey: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/types.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValuesPayload.html":{"url":"interfaces/IInteractionValuesPayload.html","title":"interface - IInteractionValuesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValuesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_VALUES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:         IInteractionValues\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IInteractionValues\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The values of the interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineAccessors.html":{"url":"interfaces/ILineAccessors.html","title":"interface - ILineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ILineDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ILineSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(public colorProvider = defaultColorProvider(), public markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineDataAccessors.html":{"url":"interfaces/ILineDataAccessors.html","title":"interface - ILineDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IXYDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        defined\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defined\n                                    \n                                \n                                \n                                    \n                                        defined:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(public colorProvider = defaultColorProvider(), public markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineRendererConfig.html":{"url":"interfaces/ILineRendererConfig.html","title":"interface - ILineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the line renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        enhancedLineCap\n                                \n                                \n                                            Optional\n                                        interactionStrategy\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeLinecap\n                                \n                                \n                                            Optional\n                                        strokeStyle\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                                \n                                            Optional\n                                        useEnhancedLineCaps\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the lines \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enhancedLineCap\n                                    \n                                \n                                \n                                    \n                                        enhancedLineCap:         IEnhancedLineCapConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnhancedLineCapConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionStrategy\n                                    \n                                \n                                \n                                    \n                                        interactionStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configure the interaction behavior for markers \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeLinecap\n                                    \n                                \n                                \n                                    \n                                        strokeLinecap:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-linecap of the line, e.g. \"round\" \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeStyle\n                                    \n                                \n                                \n                                    \n                                        strokeStyle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the width of the line in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useEnhancedLineCaps\n                                    \n                                \n                                \n                                    \n                                        useEnhancedLineCaps:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set whether enhanced line caps should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineSeriesAccessors.html":{"url":"interfaces/ILineSeriesAccessors.html","title":"interface - ILineSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Series accessors used in LineAccessors.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:16\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Color of the series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Marker for the series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(public colorProvider = defaultColorProvider(), public markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILinearScales.html":{"url":"interfaces/ILinearScales.html","title":"interface - ILinearScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILinearScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMarkerInteractionConfig.html":{"url":"interfaces/IMarkerInteractionConfig.html","title":"interface - IMarkerInteractionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMarkerInteractionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for marker interaction \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clickable\n                                \n                                \n                                        enabled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clickable\n                                    \n                                \n                                \n                                    \n                                        clickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer style mouse cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Enables mouse events on data point markers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INoopAccessors.html":{"url":"interfaces/INoopAccessors.html","title":"interface - INoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  INoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPopoverPluginConfig.html":{"url":"interfaces/IPopoverPluginConfig.html","title":"interface - IPopoverPluginConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPopoverPluginConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for the popover plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        eventStreamId\n                                \n                                \n                                            Optional\n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventStreamId\n                                    \n                                \n                                \n                                    \n                                        eventStreamId:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the event stream the plugin will respond to \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The type of interaction that will trigger the showing and hiding of the popovers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, INTERACTION_DATA_POINT_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPosition.html":{"url":"interfaces/IPosition.html","title":"interface - IPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Position on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialAccessors.html":{"url":"interfaces/IRadialAccessors.html","title":"interface - IRadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRadialDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRadialSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialDataAccessors.html":{"url":"interfaces/IRadialDataAccessors.html","title":"interface - IRadialDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:6\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialRendererConfig.html":{"url":"interfaces/IRadialRendererConfig.html","title":"interface - IRadialRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        annularGrowth\n                                \n                                \n                                            Optional\n                                        annularPadding\n                                \n                                \n                                            Optional\n                                        annularWidth\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableDataPointHighlighting\n                                \n                                \n                                            Optional\n                                        enableSeriesHighlighting\n                                \n                                \n                                            Optional\n                                        maxThickness\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        annularGrowth\n                                    \n                                \n                                \n                                    \n                                        annularGrowth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularPadding\n                                    \n                                \n                                \n                                    \n                                        annularPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularWidth\n                                    \n                                \n                                \n                                    \n                                        annularWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDataPointHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableDataPointHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSeriesHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableSeriesHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxThickness\n                                    \n                                \n                                \n                                    \n                                        maxThickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    annularGrowth is a percentage value to define annular width automatically.\nIt will grow until it reaches maxThickness.\nSet one to 0 to use annularWidth constant value instead \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialScales.html":{"url":"interfaces/IRadialScales.html","title":"interface - IRadialScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        r\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        r\n                                    \n                                \n                                \n                                    \n                                        r:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialSeriesAccessors.html":{"url":"interfaces/IRadialSeriesAccessors.html","title":"interface - IRadialSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:12\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleAccessors.html":{"url":"interfaces/IRectangleAccessors.html","title":"interface - IRectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRectangleDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleDataAccessors.html":{"url":"interfaces/IRectangleDataAccessors.html","title":"interface - IRectangleDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        endX\n                                \n                                \n                                            Optional\n                                        endY\n                                \n                                \n                                            Optional\n                                        startX\n                                \n                                \n                                            Optional\n                                        startY\n                                \n                                \n                                            Optional\n                                        thicknessX\n                                \n                                \n                                            Optional\n                                        thicknessY\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                    \n                                \n                                \n                                    \n                                        endX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                    \n                                \n                                \n                                    \n                                        endY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                    \n                                \n                                \n                                    \n                                        startX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                    \n                                \n                                \n                                    \n                                        startY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessX\n                                    \n                                \n                                \n                                    \n                                        thicknessX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessY\n                                    \n                                \n                                \n                                    \n                                        thicknessY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleSeriesAccessors.html":{"url":"interfaces/IRectangleSeriesAccessors.html","title":"interface - IRectangleSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderContainers.html":{"url":"interfaces/IRenderContainers.html","title":"interface - IRenderContainers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderContainers\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of render container name to render container\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        D3Selection\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:264\n                            \n                        \n                \n                    \n                        Container name as key to render container \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderSeries.html":{"url":"interfaces/IRenderSeries.html","title":"interface - IRenderSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        containers\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        containers\n                                    \n                                \n                                \n                                    \n                                        containers:         IRenderContainers\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRenderContainers\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    unclippedData = \"unclipped-data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Enable the minimum bar thickness (BarRenderer.MIN_BAR_THICKNESS) */\n    enableMinBarThickness?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStateData.html":{"url":"interfaces/IRenderStateData.html","title":"interface - IRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about the render state of a series\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        series\n                                \n                                \n                                        seriesId\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IChartSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChartSeries\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series render state \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStatesIndex.html":{"url":"interfaces/IRenderStatesIndex.html","title":"interface - IRenderStatesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStatesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Record\n            \n\n\n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex extends Record {\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererConfig.html":{"url":"interfaces/IRendererConfig.html","title":"interface - IRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ignoreForDomainCalculation\n                                \n                                \n                                            Optional\n                                        interactive\n                                \n                                \n                                            Optional\n                                        stateStyles\n                                \n                                \n                                            Optional\n                                        transitionDuration\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreForDomainCalculation\n                                    \n                                \n                                \n                                    \n                                        ignoreForDomainCalculation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Excludes series from scale domain calculations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stateStyles\n                                    \n                                \n                                \n                                    \n                                        stateStyles:         Record>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Record>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transitionDuration\n                                    \n                                \n                                \n                                    \n                                        transitionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererEventPayload.html":{"url":"interfaces/IRendererEventPayload.html","title":"interface - IRendererEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for events regarding a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        eventName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about the data point \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                    \n                                \n                                \n                                    \n                                        eventName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the event \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScale.html":{"url":"interfaces/IScale.html","title":"interface - IScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a scale \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        __domainCalculatedWithTicks\n                                \n                                \n                                        d3Scale\n                                \n                                \n                                            Optional\n                                        domainCalculator\n                                \n                                \n                                        formatters\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        isDomainFixed\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    convert\n                                \n                                \n                                    domain\n                                \n                                \n                                    domain\n                                \n                                \n                                    fixDomain\n                                \n                                \n                                    invert\n                                \n                                \n                                    isContinuous\n                                \n                                \n                                    isDomainValid\n                                \n                                \n                                    range\n                                \n                                \n                                    range\n                                \n                                \n                                    reverse\n                                \n                                \n                                    reversed\n                                \n                                \n                                    reversed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \nconvert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:81\n                \n            \n\n\n            \n                \n                    Converts a value to its corresponding coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The coordinate corresponding to the specified value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:110\n                \n            \n\n\n            \n                \n                    Gets the scale's domain\n\n\n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        The scale's domain\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:117\n                \n            \n\n\n            \n                \n                    Sets the scale's domain\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \nfixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:124\n                \n            \n\n\n            \n                \n                    Shorthand method for setting the domain and isDomainFixed at once\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's fixed domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \ninvert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:89\n                \n            \n\n\n            \n                \n                    Converts a coordinate to its corresponding value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The coordinate to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value corresponding to the specified coordinate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \nisContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is continuous\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is continuous (numeric), false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \nisDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:73\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is valid\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is valid, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:96\n                \n            \n\n\n            \n                \n                    Gets the scale's range\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:103\n                \n            \n\n\n            \n                \n                    Sets the scale's range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new range\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \nreverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:129\n                \n            \n\n\n            \n                \n                    Reverse the scale orientation by toggling the reversed flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:134\n                \n            \n\n\n            \n                \n                    Getter for the reversed flag (see #reverse)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:141\n                \n            \n\n\n            \n                \n                    Setter for the reversed flag (see #reverse)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        __domainCalculatedWithTicks\n                                    \n                                \n                                \n                                    \n                                        __domainCalculatedWithTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain has been recalculated with ticks in mind \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d3Scale\n                                    \n                                \n                                \n                                    \n                                        d3Scale:         AxisScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AxisScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domainCalculator\n                                    \n                                \n                                \n                                    \n                                        domainCalculator:         DomainCalculator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DomainCalculator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Method used to calculate the scale's domain \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatters\n                                    \n                                \n                                \n                                    \n                                        formatters:         IFormatters\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IFormatters\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scales formatters \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scale identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDomainFixed\n                                    \n                                \n                                \n                                    \n                                        isDomainFixed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain of this scale is not recalculated \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScaleSVGElement.html":{"url":"interfaces/IScaleSVGElement.html","title":"interface - IScaleSVGElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScaleSVGElement\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/xy-grid.ts\n        \n\n            \n                Description\n            \n            \n                Locally used interface for passing scales and associated SVG elements\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        element\n                                \n                                \n                                        scaleId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                    \n                                \n                                \n                                    \n                                        element:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaleId\n                                    \n                                \n                                \n                                    \n                                        scaleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { axisBottom, axisLeft, axisRight, axisTop } from \"d3-axis\";\nimport { select } from \"d3-selection\";\nimport clone from \"lodash/clone\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isNil from \"lodash/isNil\";\nimport isUndefined from \"lodash/isUndefined\";\nimport uniq from \"lodash/uniq\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { AXES_STYLE_CHANGE_EVENT, DESTROY_EVENT, IGNORE_INTERACTION_CLASS, SERIES_STATE_CHANGE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { MouseInteractiveArea } from \"../common/mouse-interactive-area\";\nimport { BandScale } from \"../common/scales/band-scale\";\nimport { getAutomaticDomain, getAutomaticDomainWithTicks } from \"../common/scales/domain-calculation/automatic-domain\";\nimport { LinearScale } from \"../common/scales/linear-scale\";\nimport { IBandScale, IScale, ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IAxesStyleChangeEventPayload, IChart, IChartEvent, IChartPlugin, IRenderStateData } from \"../common/types\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\nimport { MouseInteractiveAreaPlugin } from \"../plugins/mouse-interactive-area-plugin\";\n\nimport { XYGridConfig } from \"./config/xy-grid-config\";\nimport { Grid } from \"./grid\";\nimport { IAllAround, IAxis, IAxisConfig, IDimensionConfig, IGrid, IXYGridConfig, TextOverflowHandler } from \"./types\";\n\n/**\n * Locally used interface for passing scales and associated SVG elements\n *\n * @internal\n */\ninterface IScaleSVGElement {\n    scaleId: string;\n    element: D3Selection;\n}\n\nexport class XYGrid extends Grid implements IGrid {\n    public static TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL = 200;\n\n    protected axisX: IAxis = {};\n    protected axisYLeft: IAxis = {};\n    protected axisYRight: IAxis = {};\n    protected gridY: IAxis = {};\n    protected gridX: IAxis = {};\n\n    private _bottomScaleId?: string;\n    private _leftScaleId?: string;\n    private _rightScaleId: string;\n    private reconcileMarginsDebounce: any;\n    // map of scale id to pending debounce timeout\n    private handleTickLabelOverflowDebounceIndex: Record = {};\n\n    /**\n     * Returns the id of the bottom axis scale\n     */\n    public get bottomScaleId(): string | undefined {\n        if (this._bottomScaleId) {\n            return this._bottomScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"x\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the bottom axis scale\n     */\n    public set bottomScaleId(id: string | undefined) {\n        this._bottomScaleId = id;\n    }\n\n    /**\n     * Returns the id of the left axis scale\n     */\n    public get leftScaleId(): string | undefined {\n        if (this._leftScaleId) {\n            return this._leftScaleId;\n        }\n        if (!isEmpty(this.scales)) {\n            return this.scales[\"y\"].list[0].id;\n        }\n    }\n\n    /**\n     * Sets the id of the left axis scale\n     */\n    public set leftScaleId(id: string | undefined) {\n        this._leftScaleId = id;\n    }\n\n    /**\n     * Returns the id of the right axis scale\n     */\n    public get rightScaleId() {\n        return this._rightScaleId;\n    }\n\n    /**\n     * Sets the id of the right axis scale\n     */\n    public set rightScaleId(id: string) {\n        this._rightScaleId = id;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n\n        if (this._scales) {\n            Object.keys(this._scales).forEach((scaleKey) => {\n                // Defaulting to left\n                let config: IAxisConfig = this.config().axis.left;\n                let axisGenerator: any;\n                if (scaleKey !== \"x\" && scaleKey !== \"y\") {\n                    return;\n                }\n                this._scales[scaleKey]?.list?.filter((scale) => scale instanceof LinearScale).forEach((scale) => {\n                    if (scale?.id === this.leftScaleId) {\n                        config = this.config().axis.left;\n                        axisGenerator = axisLeft;\n                    } else if (scale?.id === this.rightScaleId) {\n                        config = this.config().axis.right;\n                        axisGenerator = axisRight;\n                    } else if (scale?.id === this.bottomScaleId) {\n                        config = this.config().axis.bottom;\n                        axisGenerator = axisBottom;\n                    }\n                    if (scale.domainCalculator === getAutomaticDomain && config.gridTicks) {\n                        scale.__domainCalculatedWithTicks = true;\n                        scale.domainCalculator = getAutomaticDomainWithTicks(config, axisGenerator);\n                    }\n                });\n            });\n        }\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IXYGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IXYGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IXYGridConfig): any {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    constructor(config?: IXYGridConfig) {\n        super();\n        this.config(config || new XYGridConfig());\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        super.build();\n        if (this.config().interactive) {\n            this.interactiveArea = this.renderingArea;\n        }\n\n        this.buildAxes(this.gridElementsLayer);\n        this.recalculateMargins(this.container);\n\n        const untilDestroy = () => takeUntil(this.eventBus.getStream(DESTROY_EVENT));\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).pipe(untilDestroy()).subscribe((e: IChartEvent) => {\n            const axesStyles = this.handleSeriesStateChange(e);\n\n            this.eventBus.getStream(AXES_STYLE_CHANGE_EVENT).next({ data: axesStyles } as IChartEvent);\n        });\n\n        return this;\n    }\n\n    /**\n     * Handle axis opacity when emphasizing/deemphasizing chart series\n     *\n     * @param e\n     * @private\n     */\n    public handleSeriesStateChange(e: IChartEvent) {\n        if (!this.rightScaleId) {\n            return;\n        }\n\n        const axes: IScaleSVGElement[] = [\n            { scaleId: this.leftScaleId as string, element: this.axisYLeft.group },\n            { scaleId: this.rightScaleId, element: this.axisYRight?.group },\n        ];\n\n        const axesStyles = this.calculateAxesStyles(e, axes);\n\n        for (const a of axes) {\n            if (a.scaleId) {\n                a.element.attrs(axesStyles[a.scaleId]);\n            }\n        }\n\n        return axesStyles;\n    }\n\n    /**\n     * Return opacity for each axis\n     *\n     * @param e\n     * @param axes\n     * @private\n     */\n    private calculateAxesStyles(e: IChartEvent, axes: IScaleSVGElement[]): Record> {\n        const renderStates = e.data as IRenderStateData[];\n\n        const emphasizedSeries = renderStates\n            .filter(rs => rs.state === RenderState.emphasized && rs.series)\n            .map(rs => rs.series);\n\n        if (emphasizedSeries.length > 0) {\n            const emphasizedYScales = uniq(emphasizedSeries.map(s => s?.scales[\"y\"] as IScale).filter(s => !!s));\n            if (emphasizedYScales.length  {\n                        acc[next.scaleId] = { opacity: emphasizedYScale.id === next.scaleId ? 1 : 0.1 };\n                        return acc;\n                    }, {} as Record>);\n                }\n            }\n            return {};\n        } else {\n            return axes.reduce((acc, next) => {\n                acc[next.scaleId] = { opacity: 1 };\n                return acc;\n            }, {} as Record>);\n        }\n    }\n\n    /** See {@link IGrid#buildPlugins} */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        const plugins: IChartPlugin[] = [];\n\n        const config = this.config();\n        if (config.interactive) {\n            plugins.push(new MouseInteractiveAreaPlugin(\n                new MouseInteractiveArea(this.getLasagna().getContainer(), this.getInteractiveArea(), config.cursor, config.dimension.margin)));\n        }\n\n        if (config.interactionPlugins) {\n            plugins.push(new InteractionLinePlugin());\n            plugins.push(new InteractionLabelPlugin());\n        }\n\n        return plugins;\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        super.update();\n\n        this.updateAxes();\n        this.handleMarginUpdate();\n\n        return this;\n    }\n\n    /** @ignore */\n    public drawTicks(config: IAxisConfig, axis: IAxis, scale: IScale, axisGenerator: any) {\n        if (config.visible) {\n            const bottomLabelAxis = axisGenerator(scale.d3Scale)\n                .ticks(config.approximateTicks)\n                .tickSize(0)\n                .tickFormat(scale.formatters[\"tick\"]);\n\n            axis.labelGroup\n                .call(bottomLabelAxis);\n            let tickAxis;\n            if (scale instanceof BandScale) {\n                tickAxis = axisGenerator(scale.copyToLinear().d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickValues(scale.bandTicks())\n                    .tickFormat(() => \"\");\n            } else {\n                tickAxis = axisGenerator(scale.d3Scale)\n                    .tickSize(config.tickSize)\n                    .tickFormat(() => \"\");\n                tickAxis.ticks(config.approximateTicks);\n            }\n            axis.tickGroup.call(tickAxis);\n\n            this.adjustAxisTicks(axis.labelGroup, scale);\n        } else {\n            axis.labelGroup.selectAll(\"*\").remove();\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** @ignore */\n    public drawGrids(config: IAxisConfig, axis: IAxis, axisGenerator: any, scale: IScale, size: number) {\n        const modifyZeroLines = (gridGroupSelection: any) =>\n            gridGroupSelection\n                .selectAll(\".tick line\")\n                .classed(\"nui-zero-line\", (d: any) => d === 0);\n\n        const leftGridLines = axisGenerator(scale.d3Scale)\n            .tickSize(size)\n            .tickFormat(() => \"\")\n            .ticks(config.approximateTicks);\n\n        if (config.gridTicks) {\n            const gridSelection = axis.tickGroup.call(leftGridLines);\n            modifyZeroLines(gridSelection);\n        } else {\n            axis.tickGroup.selectAll(\"*\").remove();\n        }\n    }\n\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        const dimension = this.config().dimension;\n        const padding = dimension.padding;\n\n        if (this.scales.x) {\n            each(this.scales.x.list, xScale => {\n                xScale.range([padding.left, dimension.width() - padding.right]);\n            });\n        }\n        if (this.scales.y) {\n            each(this.scales.y.list, yScale => {\n                yScale.range([dimension.height() - padding.bottom, padding.top]);\n            });\n        }\n\n        super.updateRanges();\n        return this;\n    }\n\n    protected updateXAxis() {\n        const xScale = this.bottomScaleId ? this.scales[\"x\"].index[this.bottomScaleId] : undefined;\n        const axis = this.config().axis;\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        this.axisX.group.attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n        // Additional transform to not overlap with ticks\n        this.axisX.labelGroup.attr(\"transform\", `translate(0, ${axis.bottom.tickSize})`);\n\n        this.drawTicks(axis.bottom, this.axisX, xScale, axisBottom);\n        this.drawGrids(axis.bottom, this.gridX, axisTop, xScale, this.config().dimension.height());\n\n        this.gridX.tickGroup\n            .attr(\"transform\", `translate(0, ${this.config().dimension.height()})`);\n    }\n\n    protected updateYAxes() {\n        const axis = this.config().axis;\n        const yLeftScale = this.leftScaleId ? this.scales[\"y\"].index[this.leftScaleId] : undefined;\n\n        if (!yLeftScale) {\n            throw new Error(\"yLeftScale is not defined\");\n        }\n\n        this.axisYLeft.labelGroup.attr(\n            \"transform\",\n            `translate(${-axis.left.tickSize - axis.left.padding}, 0)`\n        );\n\n        this.drawTicks(axis.left, this.axisYLeft, yLeftScale, axisLeft);\n        this.drawGrids(\n            axis.left,\n            this.gridY,\n            axisRight,\n            yLeftScale,\n            this.config().dimension.width()\n        );\n\n        if (this.rightScaleId) {\n            const yRightScale = this.scales[\"y\"].index[this.rightScaleId];\n            const rightScaleLabelX = axis.right.padding + this.config().dimension.width() + axis.right.tickSize;\n            this.axisYRight.labelGroup.attr(\n                \"transform\",\n                `translate(${rightScaleLabelX}, 0)`\n            );\n            this.axisYRight.tickGroup.attr(\n                \"transform\",\n                `translate(${this.config().dimension.width()}, 0)`\n            );\n            this.drawTicks(axis.right, this.axisYRight, yRightScale, axisRight);\n        }\n    }\n\n    protected updateAxes(): void {\n        if (!this.target()) {\n            return;\n        }\n\n        this.updateXAxis();\n        this.updateYAxes();\n    }\n\n    protected adjustAxisTicks(labelGroup: D3Selection, scale: IScale) {\n        const textOfTicks: HTMLElement[] = [];\n\n        labelGroup.attr(\"cursor\", \"default\");\n\n        labelGroup.selectAll(\"g\").each(function () {\n            select(this).classed(\"sw-hidden\", false).classed(\"tick-hidden-text\", false);\n            textOfTicks.push(this);\n        });\n\n        const toRemove = this.filterRepeatedElements(textOfTicks);\n        toRemove.forEach((group: HTMLElement) => {\n            select(group).classed(\"tick-hidden-text\", true);\n        });\n\n        const allAxisLabels = this.selectAllAxisLabels(labelGroup);\n        allAxisLabels.forEach((group: HTMLElement) => {\n            const groupSelection = select(group);\n            // zero-out the d3-provided x position of all labels since we're manually translating the x position of the entire group;\n            // add IGNORE_INTERACTION_CLASS so that mouse events used for displaying the title don't propagate from the mouse-interactive-area\n            groupSelection.select(\"text\").attr(\"x\", 0).classed(IGNORE_INTERACTION_CLASS, true);\n            groupSelection.classed(\"pointer-events\", true);\n            if (groupSelection.select(\"title\").empty()) {\n                const datum = groupSelection.data()[0];\n                const titleText = (scale.formatters[\"tick\"] ? scale.formatters[\"tick\"](datum) : datum) as string;\n                groupSelection.append(\"title\").text(titleText);\n            }\n        });\n\n        this.handleTickLabelOverflow(labelGroup, scale, allAxisLabels);\n    }\n\n    protected handleTickLabelOverflow(labelGroup: D3Selection, scale: IScale, axisLabels: HTMLElement[]) {\n        const axisConfig = this.config().axis;\n        if (scale.id === this.bottomScaleId && (scale.isContinuous() || !axisConfig.bottom.tickLabel.overflowHandler)) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.width(), true);\n            textToHide.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                groupSelection.classed(\"tick-hidden-text\", true);\n                // disable pointer-events so the title doesn't display for hidden labels\n                groupSelection.classed(\"pointer-events\", false);\n            });\n            return;\n        }\n\n        if (scale.id === this.rightScaleId || scale.id === this.leftScaleId) {\n            const textToHide = this.getElementsToHide(axisLabels, this._config.dimension.height(), false);\n            textToHide.forEach((group: HTMLElement) => {\n                select(group).classed(\"sw-hidden\", true);\n            });\n        }\n\n        const margin = this.config().dimension.margin;\n        let widthLimit = 0;\n        let horizontalPadding = 0;\n        let overflowHandler: TextOverflowHandler | undefined;\n        let fixLeftMargin = false;\n        let fixRightMargin = false;\n        const maxRightWidth = axisConfig.right.tickLabel.maxWidth;\n        const maxLeftWidth = axisConfig.left.tickLabel.maxWidth;\n\n        if (scale.id === this.bottomScaleId) {\n            const maxBottomWidth = axisConfig.bottom.tickLabel.maxWidth;\n            const calculatedBottomWidth = (scale as any).bandwidth ? (scale as IBandScale).bandwidth() : this.getTickDistance(axisLabels);\n\n            if (!isUndefined(maxBottomWidth)) {\n                widthLimit = calculatedBottomWidth > maxBottomWidth ? maxBottomWidth : calculatedBottomWidth;\n            } else {\n                widthLimit = calculatedBottomWidth;\n            }\n\n            horizontalPadding = axisConfig.bottom.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.bottom.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && !axisConfig.right.fit) {\n            const calculatedRightWidth = margin.right - axisConfig.right.padding - axisConfig.right.tickSize;\n\n            if (!isUndefined(maxRightWidth)) {\n                widthLimit = calculatedRightWidth > maxRightWidth ? maxRightWidth : calculatedRightWidth;\n            } else {\n                widthLimit = calculatedRightWidth;\n            }\n\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.leftScaleId && !axisConfig.left.fit) {\n            const calculatedLeftWidth = margin.left - axisConfig.left.padding - axisConfig.left.tickSize;\n\n            if (!isUndefined(maxLeftWidth)) {\n                widthLimit = calculatedLeftWidth > maxLeftWidth ? maxLeftWidth : calculatedLeftWidth;\n            } else {\n                widthLimit = calculatedLeftWidth;\n            }\n\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n\n        } else if (scale.id === this.rightScaleId && axisConfig.right.fit && !isUndefined(maxRightWidth)) {\n            widthLimit = maxRightWidth;\n            horizontalPadding = axisConfig.right.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.right.tickLabel.overflowHandler;\n            fixRightMargin = true;\n\n        } else if (scale.id === this.leftScaleId && axisConfig.left.fit && !isUndefined(maxLeftWidth)) {\n            widthLimit = maxLeftWidth;\n            horizontalPadding = axisConfig.left.tickLabel.horizontalPadding;\n            overflowHandler = axisConfig.left.tickLabel.overflowHandler;\n            fixLeftMargin = true;\n\n        } else {\n            return;\n        }\n\n        if (!overflowHandler) {\n            return;\n        }\n\n        // sample the length of an ellipsis in the current environment\n        let ellipsisWidth = 0;\n        if (labelGroup.select(\".sample-ellipsis\").empty()) {\n            const testText = labelGroup.append(\"text\");\n            const ellipsis = testText.classed(\"sample-ellipsis\", true).attr(\"opacity\", 0).append(\"tspan\").text(\"...\");\n            ellipsisWidth = ellipsis.node()?.getComputedTextLength() || 0;\n            testText.remove();\n        }\n\n        // reset debounce if necessary\n        if (this.handleTickLabelOverflowDebounceIndex[scale.id]) {\n            clearTimeout(this.handleTickLabelOverflowDebounceIndex[scale.id]);\n            this.handleTickLabelOverflowDebounceIndex[scale.id] = null;\n        }\n\n        // hide the labels and disable pointer-events while debouncing\n        labelGroup.classed(\"tick-hidden-text\", true);\n        axisLabels.forEach((group: HTMLElement) => {\n            select(group).classed(\"pointer-events\", false);\n        });\n        // setTimeout used for debounce when the chart is resized\n        this.handleTickLabelOverflowDebounceIndex[scale.id] = setTimeout(() => {\n            axisLabels.forEach((group: HTMLElement) => {\n                const groupSelection = select(group);\n                // invoke the handler for each text element\n                groupSelection.select(\"text\").call(overflowHandler as TextOverflowHandler, { widthLimit, horizontalPadding, ellipsisWidth });\n                // restore pointer events\n                groupSelection.classed(\"pointer-events\", true);\n            });\n\n            const marginLocked = this._config.dimension.marginLocked;\n            if (marginLocked && (fixRightMargin || fixLeftMargin)) {\n                this.handleMarginUpdate();\n                marginLocked.right = fixRightMargin;\n                marginLocked.left = fixLeftMargin;\n            }\n\n            // display the labels\n            labelGroup.classed(\"tick-hidden-text\", false);\n        }, XYGrid.TICK_LABEL_OVERFLOW_DEBOUNCE_INTERVAL);\n    }\n\n    protected selectAllAxisLabels(axisGroup: D3Selection) {\n        const actualTextElements: HTMLElement[] = [];\n        axisGroup.selectAll(\"g:not(.tick-hidden-text)\").each(function () {\n            actualTextElements.push(this);\n        });\n        return actualTextElements;\n    }\n\n    protected getOuterWidthDimensionCorrection() {\n        return this.config().axis.bottom.visible ? Grid.TICK_DIMENSION_CORRECTION : 0;\n    }\n\n    private handleMarginUpdate() {\n        const oldMargin = clone(this._config.dimension.margin);\n        this.recalculateMargins(this.container);\n        this.reconcileMarginsWithDebounce(oldMargin);\n    }\n\n    private hasRightYAxis(): boolean {\n        return this.config().axis.right.visible && this.rightScaleId?.length > 0;\n    }\n\n    private buildAxes(container: D3Selection) {\n        // Grid lines: no sense to have right\n        this.gridY.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridY\", true);\n        this.gridX.tickGroup = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-grid sw-axis-gridX\", true);\n\n        // Axis groups\n        this.axisX.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-x\", true);\n        this.axisX.tickGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-ticks\", true);\n        this.axisX.labelGroup = this.axisX.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-x sw-axis-x-labels\", true);\n\n        this.axisYLeft.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-left\", true);\n        this.axisYLeft.tickGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYLeft.labelGroup = this.axisYLeft.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n\n        this.axisYRight.group = container.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-right\", true);\n        this.axisYRight.tickGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-ticks\", true);\n        this.axisYRight.labelGroup = this.axisYRight.group.append(\"g\")\n            .classed(\"sw-axis sw-axis-y sw-axis-y-labels\", true);\n    }\n\n    private filterRepeatedElements(elementsToFilter: HTMLElement[]) {\n        const arr: HTMLElement[] = [elementsToFilter[0]];\n        elementsToFilter.reduce((prev: any, next: any) => {\n            const textInsideNext = select(next).text();\n            if (textInsideNext !== prev) {\n                arr.push(next);\n            }\n            return textInsideNext;\n        }, elementsToFilter[0] && select(elementsToFilter[0]).text());\n        return elementsToFilter.filter(element => arr.indexOf(element) === -1);\n    }\n\n    private getElementsToHide(elementsToFilter: HTMLElement[], measurement: number, isBottomAxis: boolean) {\n        let elementsToDisplay: HTMLElement[];\n        const measureType = isBottomAxis ? \"width\" : \"height\";\n        const measurementComparison = (this.getTextMeasurement(elementsToFilter, measureType)  elementsToDisplay.indexOf(element) === -1);\n    }\n\n    private elementsFiltering(elementsToFilter: HTMLElement[],\n                              parameter: number,\n                              measureType: string) {\n        let elementsToDisplay: HTMLElement[];\n        let counter = 2;\n        const condition = (array: HTMLElement[]) => measureType === \"width\"\n            ? this.getMaxTextWidth(array) > this.getTickDistance(array)\n            : this.getTextMeasurement(array, measureType) > parameter;\n        do {\n            elementsToDisplay = elementsToFilter.filter((element: HTMLElement, index: number) => (index % counter) === 0);\n            counter++;\n            // Break the loop when we have only 1 tick and its size is bigger than available width/height\n            if (elementsToDisplay.length === 1 && condition(elementsToDisplay)) {\n                break;\n            }\n        } while (condition(elementsToDisplay));\n        return elementsToDisplay;\n    }\n\n    private getTextMeasurement(array: HTMLElement[], measureType: string) {\n        const textPadding = measureType === \"width\" ? 5 : 0;\n        return array.reduce((prev: number, next: HTMLElement) =>\n            prev + (next.getBoundingClientRect() as any)[measureType] + textPadding, 0);\n    }\n\n    private getMaxTextWidth(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        return Math.max.apply(null, array.map((tick: HTMLElement) => tick.getBoundingClientRect().width));\n    }\n\n    private getTickDistance(array: HTMLElement[]) {\n        if (array.length === 0) {\n            return 0;\n        }\n        let smallestDiff = Infinity;\n        const arrayOfPositions = array.map((tick: HTMLElement) => {\n            const transformVal = tick.getAttribute(\"transform\");\n\n            if (isNil(transformVal)) {\n                throw new Error(\"tick transform is not defined\");\n            }\n\n            return parseFloat(transformVal.slice(transformVal.indexOf(\"(\") + 1, transformVal.indexOf(\",\")));\n        });\n\n        arrayOfPositions.reduce((p: number, n: number) => {\n            const diff = n - p;\n            if (diff ) {\n        if (!container) {\n            return;\n        }\n        const d = this._config.dimension;\n        const axis = this.config().axis;\n\n        const oldOuterWidth = d.outerWidth();\n        const oldOuterHeight = d.outerHeight();\n\n        if (!d.marginLocked?.left && axis.left.fit && axis.left.visible) {\n            d.margin.left = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYLeft.labelGroup)) + axis.left.tickSize + axis.left.padding;\n        }\n\n        if (!d.marginLocked?.right && axis.right.fit && this.hasRightYAxis()) {\n            d.margin.right = this.getMaxTextWidth(this.selectAllAxisLabels(this.axisYRight.labelGroup)) + axis.right.tickSize + axis.right.padding;\n        }\n\n        const bottomScale = this.bottomScaleId && this.scales ? this.scales[\"x\"]?.index[this.bottomScaleId] : undefined;\n        if (axis.bottom.fit && axis.bottom.visible && (bottomScale?.isContinuous() || !axis.bottom.tickLabel.overflowHandler)) {\n            this.fitBottomAxis(d);\n        }\n\n        const newTopMargin = d.margin.top; // TODO: Do the calculation, if needed\n        const newBottomMargin = d.margin.bottom; // TODO: Do the calculation, based on bottom Axis height\n\n        d.margin.top = newTopMargin;\n        d.margin.bottom = newBottomMargin;\n\n        // adjust width and height accordingly\n        d.outerWidth(oldOuterWidth);\n        d.outerHeight(oldOuterHeight);\n\n        const tx = this.config().dimension.margin.left;\n        const ty = this.config().dimension.margin.top;\n\n        // Note: This transform results in a firefox hack in MouseInteractiveArea in which\n        // the margins must be subtracted from the mouse event coordinates\n        container.attr(\"transform\", `translate(${tx}, ${ty})`);\n    }\n\n    private fitBottomAxis(d: IDimensionConfig) {\n        const scale = this.scales?.x?.list[0].d3Scale;\n        if (!scale) {\n            return;\n        }\n        let lastTextWidth: number = 0;\n        let lastTickScaleValue: number = 0;\n        const node = this.axisX.labelGroup.select(\".tick:not(.tick-hidden-text):last-child text\").node();\n        if (node) {\n            lastTextWidth = (node as any).getBoundingClientRect().width;\n            lastTickScaleValue = scale((node as any).innerHTML) ?? 0;\n            const topOfRange = scale.range()[1];\n            const diff = (lastTextWidth / 2) - (Math.abs(topOfRange - lastTickScaleValue) / 2);\n            d.margin.right = diff > 0 ? diff : 0;\n        }\n    }\n\n    /**\n     * This method invokes updateRanges if the margins have changed, but only after a debounce period.\n     * ----\n     * The debounce is necessary because, in the case of a very short axis, repeated attempts to\n     * alternately fit axis labels and recalculate ticks may conflict with each other\n     * causing the old and new margins to never be equal upon comparison. This scenario can cause a d3\n     * call stack overflow, but with a debounce, d3 can keep up with the recalculations until the chart\n     * is resized to consistently accommodate the width of the labels.\n     */\n    private reconcileMarginsWithDebounce(oldMargin: IAllAround) {\n        if (this.reconcileMarginsDebounce) {\n            clearTimeout(this.reconcileMarginsDebounce);\n            this.reconcileMarginsDebounce = null;\n        }\n\n        this.reconcileMarginsDebounce = setTimeout(() => {\n            if (!this.areMarginsApproximatelyEqual(oldMargin, this._config.dimension.margin)) {\n                this.updateChartDimensionsSubject?.next();\n            }\n        }, 100);\n    }\n\n    private isApproximatelyEqual = (first: number, second: number) => Math.abs(first - second) , margin2: IAllAround): boolean {\n        return this.isApproximatelyEqual(margin1.top, margin2.top) &&\n            this.isApproximatelyEqual(margin1.right, margin2.right) &&\n            this.isApproximatelyEqual(margin1.bottom, margin2.bottom) &&\n            this.isApproximatelyEqual(margin1.left, margin2.left);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISeriesAccessors.html":{"url":"interfaces/ISeriesAccessors.html","title":"interface - ISeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:143\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISetDomainEventPayload.html":{"url":"interfaces/ISetDomainEventPayload.html","title":"interface - ISetDomainEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISetDomainEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleId: string]:    any[]\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:358\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorAccessors.html":{"url":"interfaces/ISideIndicatorAccessors.html","title":"interface - ISideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator accessors \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ISideIndicatorDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISideIndicatorSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorDataAccessors.html":{"url":"interfaces/ISideIndicatorDataAccessors.html","title":"interface - ISideIndicatorDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator data accessors \n\n            \n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor indicating whether the side indicator should be active \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorSeriesAccessors.html":{"url":"interfaces/ISideIndicatorSeriesAccessors.html","title":"interface - ISideIndicatorSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator series accessors \n\n            \n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        activeColor\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        inactiveColor\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeColor\n                                    \n                                \n                                \n                                    \n                                        activeColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the active color of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the end value of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveColor\n                                    \n                                \n                                \n                                    \n                                        inactiveColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the start value of the side indicator \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISimpleThresholdZone.html":{"url":"interfaces/ISimpleThresholdZone.html","title":"interface - ISimpleThresholdZone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISimpleThresholdZone\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n            \n                Description\n            \n            \n                Used for simplified threshold zone definition. It is expected the start to be .\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISpark.html":{"url":"interfaces/ISpark.html","title":"interface - ISpark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISpark\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the spark chart assist's\nassociation between one of its charts and a series set\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        chart\n                                \n                                \n                                        chartSeriesSet\n                                \n                                \n                                            Optional\n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chartSeriesSet\n                                    \n                                \n                                \n                                    \n                                        chartSeriesSet:     IChartAssistSeries[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IChartAssistSeries[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public series: IChartAssistSeries,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex extends Record {\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStackMetadata.html":{"url":"interfaces/IStackMetadata.html","title":"interface - IStackMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStackMetadata\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStartEndRangeAccessors.html":{"url":"interfaces/IStartEndRangeAccessors.html","title":"interface - IStartEndRangeAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStartEndRangeAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusAccessors.html":{"url":"interfaces/IStatusAccessors.html","title":"interface - IStatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IStatusDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IStatusDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusDataAccessors.html":{"url":"interfaces/IStatusDataAccessors.html","title":"interface - IStatusDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITextOverflowArgs.html":{"url":"interfaces/ITextOverflowArgs.html","title":"interface - ITextOverflowArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITextOverflowArgs\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ellipsisWidth\n                                \n                                \n                                        horizontalPadding\n                                \n                                \n                                        widthLimit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ellipsisWidth\n                                    \n                                \n                                \n                                    \n                                        ellipsisWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        widthLimit\n                                    \n                                \n                                \n                                    \n                                        widthLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITickLabelConfig.html":{"url":"interfaces/ITickLabelConfig.html","title":"interface - ITickLabelConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITickLabelConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the configuration for tick labels \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        horizontalPadding\n                                \n                                \n                                            Optional\n                                        maxWidth\n                                \n                                \n                                            Optional\n                                        overflowHandler\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Padding for left and right sides of label used for calculating text overflow limits\n(number represents the padding on each side)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidth\n                                    \n                                \n                                \n                                    \n                                        maxWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Setting this insures the label's width is smaller or equal to the provided number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overflowHandler\n                                    \n                                \n                                \n                                    \n                                        overflowHandler:         TextOverflowHandler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextOverflowHandler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Handler for text overflow. Set to 'undefined' to disable overflow handling \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipNode.html":{"url":"interfaces/ITooltipNode.html","title":"interface - ITooltipNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipNode\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-tooltips/chart-tooltips.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SimulationNodeDatum\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        radius\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.closePending = true;\n        clearTimeout(this.closeTimeout);\n\n        this.closeTimeout = setTimeout(() => {\n            this.closeTooltips.next();\n            this.closePending = false;\n            this.isOpen = false;\n        });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n                            tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipPosition.html":{"url":"interfaces/ITooltipPosition.html","title":"interface - ITooltipPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Position with extended information for positioning a tooltip \n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        overlayPositions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        overlayPositions\n                                    \n                                \n                                \n                                    \n                                        overlayPositions:     ConnectedPosition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConnectedPosition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData,\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueProvider.html":{"url":"interfaces/IValueProvider.html","title":"interface - IValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get\n                                \n                                \n                                    reset\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(entityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:364\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueThicknessAccessors.html":{"url":"interfaces/IValueThicknessAccessors.html","title":"interface - IValueThicknessAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueThicknessAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        thickness\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYAccessors.html":{"url":"interfaces/IXYAccessors.html","title":"interface - IXYAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IXYDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IXYDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IXYSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IXYSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { Renderer } from \"../../core/common/renderer\";\n\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\nexport interface IXYSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\nexport interface IXYAccessors extends IAccessors {\n    data: IXYDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: IXYSeriesAccessors;\n}\n\nexport class XYAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n    public series: IXYSeriesAccessors;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYDataAccessors.html":{"url":"interfaces/IXYDataAccessors.html","title":"interface - IXYDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/xy-accessors.ts:10\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the x coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the y coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { Renderer } from \"../../core/common/renderer\";\n\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\nexport interface IXYSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\nexport interface IXYAccessors extends IAccessors {\n    data: IXYDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: IXYSeriesAccessors;\n}\n\nexport class XYAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n    public series: IXYSeriesAccessors;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYGridConfig.html":{"url":"interfaces/IXYGridConfig.html","title":"interface - IXYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for an XYGrid\n\n            \n\n            \n                Extends\n            \n            \n                        IGridConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        interactionPlugins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The IAllAround value for the grid's axis configurations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionPlugins\n                                    \n                                \n                                \n                                    \n                                        interactionPlugins:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Add interaction line and label plugins automatically\nNote: This was added to prevent a breaking change. We should avoid this kind of option in future\nversions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { EventBus } from \"../common/event-bus\";\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartEvent, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /** Set of booleans indicating whether a specific margin will be recalculated on chart dimension updates */\n    marginLocked?: IAllAround;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n    /** Set to true to disable the render area height correction */\n    disableRenderAreaHeightCorrection?: boolean;\n    /** Set to true to disable the render area width correction */\n    disableRenderAreaWidthCorrection?: boolean;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Chart event bus\n     */\n    eventBus: EventBus;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYScales.html":{"url":"interfaces/IXYScales.html","title":"interface - IXYScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYSeriesAccessors.html":{"url":"interfaces/IXYSeriesAccessors.html","title":"interface - IXYSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/xy-accessors.ts:18\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Color of the series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Marker for the series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { Renderer } from \"../../core/common/renderer\";\n\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\nexport interface IXYSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\nexport interface IXYAccessors extends IAccessors {\n    data: IXYDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: IXYSeriesAccessors;\n}\n\nexport class XYAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n    public series: IXYSeriesAccessors;\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoneCrossPoint.html":{"url":"interfaces/IZoneCrossPoint.html","title":"interface - IZoneCrossPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoneCrossPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A point at which a data series enters or exits a threshold zone\n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isZoneEdge\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isZoneEdge\n                                    \n                                \n                                \n                                    \n                                        isZoneEdge:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether the cross point is on the edge of a threshold zone \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport { StandardGaugeThresholdMarkerRadius } from \"../../gauge/constants\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n    /** Series */\n    series?: IChartSeries;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead */\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * Standard configuration for gauge threshold renderers\n */\nexport interface IGaugeThresholdsRendererConfig {\n    /** The radius of each threshold marker */\n    markerRadius?: StandardGaugeThresholdMarkerRadius | number;\n    /** Boolean indicating whether the renderer is enabled */\n    enabled?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the DonutGaugeThresholdsRenderer\n */\nexport interface IDonutGaugeThresholdsRendererConfig extends IRadialRendererConfig, IGaugeThresholdsRendererConfig {}\n\n/**\n * @ignore\n * Configuration for the LinearGaugeThresholdsRenderer\n */\nexport interface ILinearGaugeThresholdsRendererConfig extends IRendererConfig, IGaugeThresholdsRendererConfig {}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n    /**\n     * Represents an emphasis/visibility state of this series\n     */\n    renderState?: RenderState;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    /**\n     * Whether this series should be shown in the legend\n     */\n    showInLegend?: boolean;\n    /**\n     * Whether this series should be preprocessed in the chart assist\n     */\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for axes style change when emphasizing series on grid\n */\nexport type IAxesStyleChangeEventPayload = Record>;\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoomPluginConfiguration.html":{"url":"interfaces/IZoomPluginConfiguration.html","title":"interface - IZoomPluginConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoomPluginConfiguration\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableExternalEvents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableExternalEvents\n                                    \n                                \n                                \n                                    \n                                        enableExternalEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        let widthCorrection = 0;\n        const gridConfig = this.grid.config();\n        if (!gridConfig.disableRenderAreaWidthCorrection && selection[1] === gridConfig.dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION) {\n            // Width correction to accommodate similar adjustment in grid. This ensures that the right-most column of pixels on the chart is selectable.\n            widthCorrection = Grid.RENDER_AREA_WIDTH_CORRECTION;\n        }\n\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLabelPlugin.html":{"url":"classes/InteractionLabelPlugin.html","title":"class - InteractionLabelPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLabelPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-label-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Highlights the label on x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                areLabelUpdatesEnabled\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formatterName: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/interaction/interaction-label-plugin.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formatterName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            areLabelUpdatesEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-label\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isArray from \"lodash/isArray\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { convert } from \"../../common/scales/helpers/convert\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { UtilityService } from \"../../common/utility.service\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/** @ignore */\nconst FALLBACK_FORMATTER = \"tick\";\n\n/**\n * Highlights the label on x-axis that corresponds to interaction position\n *\n * @class InteractionLabelPlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLabelPlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-label\";\n\n    public areLabelUpdatesEnabled = true;\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLabelLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    constructor(private formatterName = \"title\") {\n        super();\n    }\n\n    public initialize(): void {\n        this.interactionLabelLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: InteractionLabelPlugin.LAYER_NAME,\n            order: 901,\n            clipped: false,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLabelUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLabelUpdate();\n                }\n            });\n    }\n\n    protected handleLabelUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (!this.areLabelUpdatesEnabled || this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLabel(xScale, isArray(xValue) ? xValue.slice(0, xValue.length - 1) : xValue);\n    }\n\n    protected updateLabel(scale: IScale, value: any) {\n        let interactionLabel: D3Selection = this.interactionLabelLayer.select(`.${InteractionLabelPlugin.LAYER_NAME}`);\n        if (interactionLabel.empty() && !!value) {\n            interactionLabel = this.buildInteractionLabel(this.interactionLabelLayer);\n        } else if (!value) {\n            interactionLabel.remove();\n            return;\n        }\n\n        const formatter = scale.formatters[this.formatterName] || scale.formatters[FALLBACK_FORMATTER];\n        const labelContent = formatter?.(value);\n\n        if (!labelContent) {\n            throw new Error(\"labelContent is not defined\");\n        }\n\n        const textSelection = interactionLabel.select(\"text\")\n            .text(labelContent);\n        const bbox = (textSelection.node() as any).getBBox();\n        const gridDimension = this.chart.getGrid().config().dimension;\n\n        // subtract the relative vertical text offset inside the bbox from\n        // the grid height to determine the label's vertical placement\n        const heightOffset = (gridDimension.height() - bbox.y);\n\n        textSelection\n            .attr(\"transform\", `translate(0, ${heightOffset})`)\n            .style(\"text-anchor\", \"middle\");\n\n        // match the horizontal padding to the built-in bbox vertical padding\n        const horizontalPadding = (bbox.height + bbox.y) * 2;\n\n        const labelWidth = bbox.width + horizontalPadding;\n        const allowedRange: [number, number] = [(labelWidth / 2), gridDimension.width() - (labelWidth / 2)];\n        const x = convert(scale, value, 0.5);\n        const clampedX = UtilityService.clampToRange(x, allowedRange);\n\n        interactionLabel\n            .attr(\"transform\", `translate(${clampedX},0)`)\n            .select(\"rect\")\n            .attrs({\n                \"transform\": `translate(0,${heightOffset})`,\n                \"x\": -(labelWidth / 2),\n                \"y\": bbox.y,\n                \"width\": labelWidth,\n                \"height\": bbox.height,\n            });\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLabelPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private buildInteractionLabel(target: D3Selection): D3Selection {\n        const label = target.append(\"g\")\n            .attr(\"class\", InteractionLabelPlugin.LAYER_NAME);\n\n        label.append(\"rect\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__rect`);\n\n        label.append(\"text\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__text`);\n\n        return label;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLinePlugin.html":{"url":"classes/InteractionLinePlugin.html","title":"class - InteractionLinePlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLinePlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-line-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Draws a vertical line on the x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-line\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/**\n * Draws a vertical line on the x-axis that corresponds to interaction position\n *\n * @class InteractionLinePlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLinePlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-line\";\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLineLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    public initialize(): void {\n        this.interactionLineLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: \"interaction-line\",\n            order: 900,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLineUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLineUpdate();\n                }\n            });\n    }\n\n    private handleLineUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLine(this.interactionLineLayer, xScale, xValue);\n    }\n\n    private updateLine(layer: D3Selection, xScale: IScale, value: any) {\n        const data = [];\n        if (value) {\n            data.push(value);\n        }\n        const line = layer.selectAll(`.${InteractionLinePlugin.LAYER_NAME}`).data(data);\n\n        const xFn = (d: any) => xScale.convert(d);\n        const attrs = {\n            \"class\": InteractionLinePlugin.LAYER_NAME,\n            \"x1\": xFn,\n            \"y1\": 0,\n            \"x2\": xFn,\n            \"y2\": this.chart.getGrid().config().dimension.height(),\n        };\n\n        line.enter()\n            .append(\"line\")\n            .merge(line as any)\n            .attrs(attrs);\n\n        line.exit().remove();\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLinePlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendComponent.html":{"url":"components/LegendComponent.html","title":"component - LegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend\n            \n\n\n\n\n            \n                templateUrl\n                ./legend.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeChanged\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                interactive\n                            \n                            \n                                orientation\n                            \n                            \n                                seriesColor\n                            \n                            \n                                seriesIcon\n                            \n                            \n                                seriesUnitLabel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:21\n                            \n                        \n                \n                    \n                        The active state\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:26\n                            \n                        \n                \n                    \n                        The legend's interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :         LegendOrientation\n\n                    \n                \n                \n                    \n                        Default value : LegendOrientation.vertical\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:31\n                            \n                        \n                \n                    \n                        The legend's orientation\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:36\n                            \n                        \n                \n                    \n                        The legend's overall series color. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:41\n                            \n                        \n                \n                    \n                        The legend's overall series icon. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesUnitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:46\n                            \n                        \n                \n                    \n                        The legend's overall series unit label. Individual legend series may override this.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:16\n                            \n                        \n\n                \n                    \n                        EventEmitter for notifying subscribers of a change in the active state\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, OnDestroy, SimpleChanges, ViewEncapsulation } from \"@angular/core\";\n\nimport { LegendOrientation } from \"./types\";\n\n@Component({\n    selector: \"nui-legend\",\n    // eslint-disable-next-line\n    host: { \"class\": \"d-inline-block\" },\n    templateUrl: \"./legend.component.html\",\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class LegendComponent implements OnChanges, OnDestroy {\n    /**\n     * EventEmitter for notifying subscribers of a change in the active state\n     */\n    public activeChanged = new EventEmitter();\n\n    /**\n     * The active state\n     */\n    @Input() public active = false;\n\n    /**\n     * The legend's interactive mode switch\n     */\n    @Input() public interactive = false;\n\n    /**\n     * The legend's orientation\n     */\n    @Input() public orientation: LegendOrientation = LegendOrientation.vertical;\n\n    /**\n     * The legend's overall series color. Individual legend series may override this.\n     */\n    @Input() public seriesColor: string;\n\n    /**\n     * The legend's overall series icon. Individual legend series may override this.\n     */\n    @Input() public seriesIcon: string;\n\n    /**\n     * The legend's overall series unit label. Individual legend series may override this.\n     */\n    @Input() public seriesUnitLabel: string;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"active\"]) {\n            this.activeChanged.emit(this.active);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.activeChanged.complete();\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LegendInteractionAssist.html":{"url":"classes/LegendInteractionAssist.html","title":"class - LegendInteractionAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LegendInteractionAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/chart-assist.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                renderStatesIndex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasizeSeries\n                            \n                            \n                                    Public\n                                getSeriesStates\n                            \n                            \n                                    Public\n                                isSeriesHidden\n                            \n                            \n                                    Public\n                                resetSeries\n                            \n                            \n                                    Public\n                                setGroupState\n                            \n                            \n                                    Public\n                                setGroupVisibility\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartAssist: ChartAssist)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/chart-assist.ts:320\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartAssist\n                                                  \n                                                        \n                                                                        ChartAssist\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            renderStatesIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRenderStatesIndex\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/chart-assist.ts:320\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            emphasizeSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emphasizeSeries(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:394\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeriesStates()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:341\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IRenderStateData[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSeriesHidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSeriesHidden(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:345\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            resetSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetSeries()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:400\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupState(groupId: string, renderState: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:370\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    renderState\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupVisibility\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupVisibility(groupId: string, visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:384\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport keyBy from \"lodash/keyBy\";\nimport values from \"lodash/values\";\nimport {Observable, of, Subject, Subscription} from \"rxjs\";\nimport {filter, map, switchMap, takeUntil} from \"rxjs/operators\";\n\nimport {\n    DESTROY_EVENT,\n    HIGHLIGHT_SERIES_EVENT,\n    INTERACTION_DATA_POINTS_EVENT,\n    MOUSE_ACTIVE_EVENT,\n} from \"../../constants\";\nimport {RenderState} from \"../../renderers/types\";\nimport {EventBus} from \"../common/event-bus\";\nimport {defaultMarkerProvider, defaultPalette} from \"../common/palette/default-providers\";\nimport {\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    IChartEvent,\n    IChartMarker,\n    IChartPalette,\n    IChartSeries,\n    IDataPoint,\n    IDataPointsPayload,\n    IInteractionDataPointsEvent,\n    InteractionType,\n    IRenderStateData,\n    IValueProvider,\n} from \"../common/types\";\n\nimport {\n    ChartAssistEventType,\n    ChartAssistRenderStateData,\n    IChartAssist,\n    IChartAssistEvent,\n    IRenderStatesIndex,\n} from \"./types\";\n\n/** @ignore */\nconst chartAssistSeriesDefaults: Partial> = {\n    showInLegend: true,\n    preprocess: true,\n};\n\n/**\n * Helper class that helps to bootstrap a chart with legend, using data pre-processor.\n * It will use the most common settings.\n */\nexport class ChartAssist implements IChartAssist {\n\n    /**\n     * Retrieves the display value for a data point on the specified series\n     *\n     * @param chartSeries The series containing the data point to get a label for\n     * @param dataPoint The data point to get a label for\n     * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n     * @param formatterName The name of the formatter to use for formatting the label\n     * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n     *\n     * @returns The display value for a data point\n     */\n    public static getLabel(chartSeries: IChartSeries, dataPoint: any, scaleKey: string, formatterName?: string, dataAccessorKey?: string): any {\n        if (!dataPoint || chartSeries.data.length === 0) {\n            return null;\n        }\n\n        const valueAccessor = chartSeries.accessors.data?.[dataAccessorKey || scaleKey];\n        if (!valueAccessor) {\n            return null;\n        }\n\n        const adjustedIndex = dataPoint.index [] = [];\n    public legendSeriesSet: IChartAssistSeries[] = [];\n\n    /**\n     * Subject for subscribing to IChartAssistEvents such as\n     * ToggleSeries, EmphasizeSeries, and ResetVisibleSeries\n     */\n    public chartAssistSubject = new Subject();\n\n    private syncHandlerMap: Record;\n    private getVisibleSeriesWithLegendBackup: () => IChartAssistSeries>[];\n    private syncSubscription: Subscription;\n    private legendInteractionAssist: LegendInteractionAssist;\n\n    public onEvent: (event: IChartEvent) => void;\n\n    constructor(public chart: IChart,\n                seriesProcessor?: (series: IChartAssistSeries[]) => IChartAssistSeries[],\n                public palette: IChartPalette = defaultPalette(),\n                public markers: IValueProvider = defaultMarkerProvider()) {\n        this.configureChartEventSubscriptions(chart.getEventBus());\n        if (seriesProcessor) {\n            this.seriesProcessor = seriesProcessor;\n        }\n\n        /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n        this.legendInteractionAssist = new LegendInteractionAssist(this);\n\n        this.syncHandlerMap = {\n            [ChartAssistEventType.EmphasizeSeries]: this.emphasizeSeries,\n            [ChartAssistEventType.ResetVisibleSeries]: this.resetVisibleSeries,\n            [ChartAssistEventType.ToggleSeries]: this.toggleSeries,\n        };\n    }\n\n    public get renderStatesIndex(): IRenderStatesIndex {\n        return this.legendInteractionAssist.renderStatesIndex;\n    }\n\n    /**\n     * Convenience stream of highlight events that can be used to populate legend.\n     * It will return highlighted value for the series (while hovering over datapoints) or the last value from series (while not hovering over and if possible),\n     * otherwise it'll return null\n     * @param chartSeries\n     */\n    public legendLabelData$(chartSeries: IChartSeries): Observable {\n        const seriesHighlight$ = this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).asObservable()\n            .pipe(\n                filter(event => event.data.interactionType === InteractionType.MouseMove),\n                map(event => event.data.dataPoints[chartSeries.id])\n            );\n\n        // if there is no highlightData, or index is \"-1\", we'll show the last value from series (if possible)\n        const highlightDataPresentPredicate = (highlightData: any) => highlightData && highlightData.index >= 0;\n\n        return seriesHighlight$\n            .pipe(\n                switchMap(highlightData => highlightDataPresentPredicate(highlightData)\n                    ? of(highlightData.data)\n                    : of((chartSeries.data && chartSeries.data.length) ? chartSeries.data[chartSeries.data.length - 1] : null))\n            );\n    }\n\n    public seriesProcessor(series: IChartAssistSeries[]): IChartAssistSeries[] {\n        return series;\n    }\n\n    public update(inputSeriesSet: IChartAssistSeries[], updateLegend = true): void {\n        this.inputSeriesSet = inputSeriesSet;\n\n        const processedSeriesSet = this.seriesProcessor(inputSeriesSet.map(series => ({\n            ...series,\n            data: series.data || [],\n        })));\n\n        this.legendSeriesSet = processedSeriesSet.filter(s => s.showInLegend || typeof s.showInLegend === \"undefined\");\n\n        if (updateLegend) {\n            this.legendInteractionAssist.update(processedSeriesSet);\n        }\n        // add render states to the series for use in the chart\n        const seriesSet = processedSeriesSet.map(s => Object.assign(\n            { renderState: this.renderStatesIndex[s.id]?.state },\n            s));\n\n        this.chart.update(seriesSet);\n\n        this.publishRenderStates();\n    }\n\n    public toggleSeries = (seriesId: string, visible: boolean): void => {\n        this.legendInteractionAssist.setGroupVisibility(seriesId, visible);\n\n        this.update(this.inputSeriesSet, false);\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ToggleSeries, payload: { seriesId, visible } });\n    }\n\n    /**\n     * Resets all visible series to default state\n     */\n    public resetVisibleSeries = (): void => {\n        this.legendInteractionAssist.resetSeries();\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ResetVisibleSeries, payload: {} });\n    }\n\n    /**\n     * For series that are currently visible, emphasize the given series and deemphasizes all the other ones\n     *\n     * @param seriesId\n     */\n    public emphasizeSeries = (seriesId: string): void => {\n        this.legendInteractionAssist.emphasizeSeries(seriesId);\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.EmphasizeSeries, payload: { seriesId } });\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        return this.legendInteractionAssist.isSeriesHidden(seriesId);\n    }\n\n    public seriesTrackByFn(index: number, item: IChartAssistSeries): string {\n        return item.id;\n    }\n\n    /**\n    * Retrieves the display value for the highlighted data point on the specified series\n    *\n    * @param chartSeries The series containing the highlighted data point to get a label for\n    * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n    * @param formatterName The name of the formatter to use for formatting the label\n    * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n    *\n    * @returns The display value for the highlighted data point\n    */\n    public getHighlightedValue(chartSeries: IChartSeries,\n                               scaleKey: string,\n                               formatterName?: string,\n                               dataAccessorKey?: string): string | number | undefined {\n\n        if (!this.highlightedDataPoints) {\n            return undefined;\n        }\n\n        const dataPoint = this.highlightedDataPoints[chartSeries.id];\n        return ChartAssist.getLabel(chartSeries, dataPoint, scaleKey, formatterName, dataAccessorKey);\n    }\n\n    public getVisibleSeriesWithLegend = (): IChartAssistSeries>[] =>\n        this.legendSeriesSet.filter(s => !this.isSeriesHidden(s.id))\n\n    /**\n     * Synchronize this chart assist's actions with IChartAssistEvents emitted by the specified\n     * chart assist, and override this chart assist's getVisibleSeriesWithLegend method with the\n     * specified chart assist's getVisibleSeriesWithLegend.\n     *\n     * Note: If the chart instance of the specified chart assist is replaced by a new chart,\n     * this method must be invoked again to resume synchronized behavior.\n     *\n     * @param {ChartAssist} chartAssist The chart assist to synchronize with\n     */\n    public syncWithChartAssist(chartAssist: ChartAssist): void {\n        this.getVisibleSeriesWithLegendBackup = this.getVisibleSeriesWithLegend;\n        this.getVisibleSeriesWithLegend = chartAssist.getVisibleSeriesWithLegend;\n\n        this.syncSubscription = chartAssist.chartAssistSubject.pipe(\n            takeUntil(chartAssist.chart.getEventBus().getStream(DESTROY_EVENT))\n        ).subscribe((event: IChartAssistEvent) => {\n            const args = Object.keys(event.payload).map(key => event.payload[key]);\n            this.syncHandlerMap[event.type](...args);\n        });\n    }\n\n    /**\n     * Unsynchronize this chart assist's actions from those of the chart assist\n     * specified in a previous syncWithChartAssist call, and restore this chart\n     * assist's getVisibleSeriesWithLegend method with the instance used before\n     * syncWithChartAssist was called.\n     */\n    public unsyncChartAssist(): void {\n        this.getVisibleSeriesWithLegend = this.getVisibleSeriesWithLegendBackup;\n\n        if (this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n    }\n\n    private configureChartEventSubscriptions(eventBus: EventBus): void {\n        const eventHandlers: { [eventName: string]: (data?: any) => void } = {\n            [INTERACTION_DATA_POINTS_EVENT]: (data: IInteractionDataPointsEvent) => {\n                if (data.interactionType === InteractionType.MouseMove) {\n                    this.highlightedDataPoints = Object.assign({}, data.dataPoints);\n                }\n            },\n            [HIGHLIGHT_SERIES_EVENT]: (data: IDataPoint) => {\n                if (data.index >= 0) {\n                    this.emphasizeSeries(data.seriesId);\n                } else {\n                    this.resetVisibleSeries();\n                }\n            },\n            [MOUSE_ACTIVE_EVENT]: (data: boolean) => {\n                this.isLegendActive = data;\n            },\n        };\n\n        each(Object.keys(eventHandlers), key => {\n            eventBus.getStream(key).subscribe((event) => {\n                eventHandlers[key](event.data);\n                if (this.onEvent) {\n                    this.onEvent(event);\n                }\n            });\n        });\n    }\n\n    private publishRenderStates(): void {\n        this.chart.setSeriesStates(this.legendInteractionAssist.getSeriesStates());\n    }\n}\n\nexport class LegendInteractionAssist {\n\n    private seriesGroups: Record = {};\n    private seriesIndex: Record>;\n\n    public renderStatesIndex: IRenderStatesIndex = {};\n\n    constructor(private chartAssist: ChartAssist) {\n    }\n\n    public update(seriesSet: IChartAssistSeries[]): void {\n        this.seriesGroups = this.getSeriesGroups(seriesSet);\n        this.seriesIndex = keyBy(seriesSet, s => s.id);\n\n        this.resetSeries();\n\n        // override render states\n        for (const series of seriesSet.filter(s => s.renderState)) {\n            this.renderStatesIndex[series.id] =\n                new ChartAssistRenderStateData(series.id,\n                                               series,\n                                               series.renderState === RenderState.hidden ? RenderState.default : series.renderState,\n                                               series.renderState !== RenderState.hidden);\n        }\n    }\n\n    public getSeriesStates(): IRenderStateData[] {\n        return values(this.renderStatesIndex);\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        const renderState = this.renderStatesIndex[seriesId];\n        return renderState && !renderState.visible;\n    }\n\n    private getSeriesGroups(seriesSet: IChartAssistSeries[]) {\n        const seriesGroups: Record = {};\n\n        for (const s of seriesSet) {\n            const separatorIndex = s.id.indexOf(\"__\");\n            const parentId = (separatorIndex >= 0) ? s.id.substring(0, separatorIndex) : s.id;\n\n            if (!seriesGroups[parentId]) {\n                seriesGroups[parentId] = [];\n            }\n            seriesGroups[parentId].push(s.id);\n        }\n\n        return seriesGroups;\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param renderState\n     */\n    public setGroupState(groupId: string, renderState: RenderState): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setRenderState(s, renderState);\n        }\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param visible\n     */\n    public setGroupVisibility(groupId: string, visible: boolean): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setVisibility(s, visible);\n        }\n    }\n\n    public emphasizeSeries(seriesId: string): void {\n        for (const group of Object.keys(this.seriesGroups)) {\n            this.setGroupState(group, group === seriesId ? RenderState.emphasized : RenderState.deemphasized);\n        }\n    }\n\n    public resetSeries(): void {\n        const legendSeries = this.chartAssist.getVisibleSeriesWithLegend();\n        const oneSeriesMode = legendSeries.length === 1;\n\n        if (oneSeriesMode) {\n            this.emphasizeSeries(legendSeries[0].id);\n        } else {\n            for (const group of Object.keys(this.seriesGroups)) {\n                this.setGroupState(group, RenderState.default);\n            }\n        }\n    }\n\n    private setRenderState(seriesId: string, state: RenderState) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.emphasisState = state;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], state);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n    private setVisibility(seriesId: string, visible: boolean) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.visible = visible;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, this.seriesIndex[seriesId], RenderState.default, visible);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendSeriesComponent.html":{"url":"components/LegendSeriesComponent.html","title":"component - LegendSeriesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendSeriesComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-series/legend-series.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend-series\n            \n\n\n\n\n            \n                templateUrl\n                ./legend-series.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputDescription\n                            \n                            \n                                    Public\n                                hasProjectedDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                color\n                            \n                            \n                                descriptionPrimary\n                            \n                            \n                                descriptionSecondary\n                            \n                            \n                                icon\n                            \n                            \n                                interactive\n                            \n                            \n                                isSelected\n                            \n                            \n                                seriesRenderState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                isSelectedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.inverse\n                            \n                            \n                                \n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    interactive\n                                \n                                \n                                    seriesRenderState\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legend: LegendComponent)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-series/legend-series.component.ts:109\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:29\n                            \n                        \n                \n                    \n                        Sets the series active status\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:80\n                            \n                        \n                \n                    \n                        Color of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionPrimary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:65\n                            \n                        \n                \n                    \n                        The primary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionSecondary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:70\n                            \n                        \n                \n                    \n                        The secondary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:75\n                            \n                        \n                \n                    \n                        The series icon\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:39\n                            \n                        \n                \n                    \n                        Sets the series interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isSelected\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:55\n                            \n                        \n                \n                    \n                        Set whether the series is selected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:86\n                            \n                        \n                \n                    \n                        The render state of the legend series\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        isSelectedChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:60\n                            \n                        \n                \n                    \n                        Emits an event with a boolean value indicating a new selected status\n\n                    \n                \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.inverse\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:103\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:96\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:100\n                            \n                        \n\n\n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:128\n                \n            \n\n\n            \n                \n                    Emits an isSelectedChange event on series click if the series is in interactive mode\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a primary or secondary description\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasProjectedDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasProjectedDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a projected description\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n\n                \n                    \n                        setactive(active: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:29\n                                \n                            \n                    \n                        \n                                Sets the series active status\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            active\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new active status\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n\n                \n                    \n                        getinteractive()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:48\n                                \n                            \n                    \n                        \n                                Gets the series interactive mode value\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setinteractive(interactive: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:39\n                                \n                            \n                    \n                        \n                                Sets the series interactive mode switch\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            interactive\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new interactive mode\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n\n                \n                    \n                        getseriesRenderState()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:89\n                                \n                            \n\n                \n                    \n                        setseriesRenderState(renderState)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:86\n                                \n                            \n                    \n                        \n                                The render state of the legend series\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderState\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Host, HostBinding, HostListener, Input, Optional, Output, ViewChild,\n    ViewEncapsulation,\n} from \"@angular/core\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { LegendComponent } from \"../legend.component\";\nimport { LegendOrientation } from \"../types\";\n\n/** @ignore */\nexport const LEGEND_SERIES_CLASS_NAME = \"nui-legend-series\";\n\n@Component({\n    // eslint-disable-next-line\n    host: { \"class\": LEGEND_SERIES_CLASS_NAME },\n    selector: \"nui-legend-series\",\n    templateUrl: \"./legend-series.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LegendSeriesComponent implements AfterContentInit {\n\n    /**\n     * Sets the series active status\n     *\n     * @param {boolean} active The new active status\n     */\n    @Input()\n    public set active(active: boolean) {\n        this._active = active;\n    }\n\n    /**\n     * Sets the series interactive mode switch\n     *\n     * @param {boolean} interactive The new interactive mode\n     */\n    @Input()\n    public set interactive(interactive: boolean) {\n        this._interactive = interactive;\n    }\n\n    /**\n     * Gets the series interactive mode value\n     *\n     * @returns {boolean} The current interactive mode\n     */\n    public get interactive(): boolean {\n        return this._interactive;\n    }\n\n    /**\n     * Set whether the series is selected\n     */\n    @Input() public isSelected = true;\n\n    /**\n     * Emits an event with a boolean value indicating a new selected status\n     */\n    @Output() public isSelectedChange = new EventEmitter();\n\n    /**\n     * The primary description of the series\n     */\n    @Input() public descriptionPrimary: string;\n\n    /**\n     * The secondary description of the series\n     */\n    @Input() public descriptionSecondary: string;\n\n    /**\n     * The series icon\n     */\n    @Input() public icon: string;\n\n    /**\n     * Color of the series\n     */\n    @Input() public color: string;\n\n    /**\n     * The render state of the legend series\n     */\n    @Input()\n    public set seriesRenderState(renderState: RenderState) {\n        this._seriesRenderState = renderState;\n    }\n    public get seriesRenderState(): RenderState {\n        return this._seriesRenderState || RenderState.default;\n    }\n\n    @ViewChild(\"projectedDescription\") private projectedDescription: ElementRef;\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--interactive`)\n    public get isInteractiveClassApplied() {\n        return this._interactive;\n    }\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--horizontal`) public isHorizontalClassApplied = false;\n\n    @HostBinding(`class.inverse`)\n    public get isActiveClassApplied() {\n        return this._active && this.seriesRenderState !== RenderState.hidden;\n    }\n\n    private _seriesRenderState: RenderState;\n    private _active = false;\n    private _interactive = false;\n\n    constructor(@Optional() @Host() private legend: LegendComponent) { }\n\n    public ngAfterContentInit(): void {\n        if (this.legend) {\n            this.legend.activeChanged.subscribe((active: boolean) => this._active = active);\n\n            this.icon = this.icon || this.legend.seriesIcon;\n            this._active = this.legend.active;\n            this.interactive = this.legend.interactive;\n            this.isHorizontalClassApplied = this.legend.orientation === LegendOrientation.horizontal;\n        }\n    }\n\n    /**\n     * Emits an isSelectedChange event on series click if the series is in interactive mode\n     */\n    @HostListener(\"click\")\n    public onClick(): void {\n        if (this.interactive) {\n            this.isSelectedChange.next(!this.isSelected);\n        }\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a primary or secondary description\n     */\n    public hasInputDescription(): boolean {\n        return !_isEmpty(this.descriptionPrimary) || !_isEmpty(this.descriptionSecondary);\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a projected description\n     */\n    public hasProjectedDescription(): boolean {\n        return !!this.projectedDescription && this.projectedDescription.nativeElement.children.length !== 0;\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                        {{ descriptionPrimary }}        {{ descriptionSecondary }}                    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendSeriesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineAccessors.html":{"url":"classes/LineAccessors.html","title":"class - LineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Accessor class supporting the LineRenderer, that defines required inputs acquired from data points.\nThis class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n\nIf colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\nkept in mind when configuring charts as it could cause potential color synchronization problems.\n\nSee referenced data and series interfaces for required properties.\n            \n\n            \n                Extends\n            \n            \n                        XYAccessors\n            \n\n            \n                Implements\n            \n            \n                            ILineAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                colorProvider\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                markerProvider\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            colorProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : defaultColorProvider()\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            markerProvider\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : defaultMarkerProvider()\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYAccessors:30\n\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         XYAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYAccessors:34\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(public colorProvider = defaultColorProvider(), public markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineSelectSeriesInteractionStrategy.html":{"url":"classes/LineSelectSeriesInteractionStrategy.html","title":"class - LineSelectSeriesInteractionStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineSelectSeriesInteractionStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                INTERACTION_MARGIN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            INTERACTION_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 8\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, HIGHLIGHT_SERIES_EVENT, INTERACTION_SERIES_EVENT } from \"../../../constants\";\nimport { Scales } from \"../../../core/common/scales/types\";\nimport { D3Selection, IDataPoint, IDataSeries, InteractionType, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName } from \"../../types\";\nimport { ILineAccessors } from \"../line-accessors\";\nimport { LineRenderer } from \"../line-renderer\";\n\nexport class LineSelectSeriesInteractionStrategy implements IHighlightStrategy {\n    public readonly INTERACTION_MARGIN = 8;\n\n    public draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n\n        let interactionPath: D3Selection = target.select(\"path.interaction\");\n\n        if (isNil(renderer.config.strokeWidth)) {\n            throw new Error(\"renderer.config.strokeWidth is not defined\");\n        }\n\n        if (interactionPath.empty()) {\n            interactionPath = target.append(\"path\")\n                .classed(\"interaction\", true)\n                .classed(`pointer-events pointer-events-click`, true)\n                .attrs({\n                    \"stroke-width\": renderer.config.strokeWidth + (2 * this.INTERACTION_MARGIN),\n                    \"stroke\": \"transparent\",\n                    \"fill\": \"none\",\n                })\n                .on(\"mouseenter\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        // TODO: doesn't work with empty data\n                        index: 0,\n                        data: renderSeries.dataSeries.data[0],\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"mouseleave\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        index: DATA_POINT_NOT_FOUND,\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"click\", (d: any, i: number) => {\n                    this.emitEvent(renderer, INTERACTION_SERIES_EVENT, InteractionType.Click, renderSeries, d, i, rendererSubject);\n                });\n        }\n\n        renderer.drawLine(renderSeries, interactionPath);\n    }\n\n    // TODO: Get rid of this function or make it optional in interface\n    public getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number {\n        // @ts-ignore\n        return;\n    }\n\n    public highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    private emitEvent(renderer: LineRenderer, eventName: string, interactionType: InteractionType, renderSeries: IRenderSeries,\n                      data: any, i: number, rendererSubject: Subject) {\n        const dataPoint: IDataPoint = {\n            seriesId: renderSeries.dataSeries.id,\n            dataSeries: renderSeries.dataSeries,\n            index: i,\n            data: data,\n            position: renderer.getDataPointPosition(renderSeries.dataSeries, i, renderSeries.scales),\n        };\n        rendererSubject.next({\n            eventName: eventName,\n            data: {\n                interactionType: interactionType,\n                payload: dataPoint,\n            },\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinearScale.html":{"url":"classes/LinearScale.html","title":"class - LinearScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinearScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/linear-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleLinear\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/linear-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { scaleLinear } from \"d3-scale\";\n\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleLinear](https://d3indepth.com/scales/#scalelinear)\n */\nexport class LinearScale extends Scale {\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = value => value?.toLocaleString();\n    }\n\n    protected createD3Scale(): any {\n        return scaleLinear();\n    }\n\n    public convert(value: number): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): number {\n        return this._d3Scale.invert(coordinate);\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValueProvider.html":{"url":"classes/MappedValueProvider.html","title":"class - MappedValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/mapped-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(valueMap: literal type, defaultValue?: T)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/mapped-value-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        valueMap\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/mapped-value-provider.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/mapped-value-provider.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class MappedValueProvider implements IValueProvider {\n\n    constructor(private valueMap: { [key: string]: T }, private defaultValue?: T) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T | undefined =>\n        this.valueMap[entityId] || this.defaultValue\n\n    public reset(): void {\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkerUtils.html":{"url":"classes/MarkerUtils.html","title":"class - MarkerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkerUtils\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/marker-utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                            \n                                    Static\n                                    Readonly\n                                MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                drawMarker\n                            \n                            \n                                    Static\n                                manageMarker\n                            \n                            \n                                    Static\n                                removeMarker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:23\n                            \n                        \n\n                \n                    \n                        The default class for the marker's container \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker-path\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:26\n                            \n                        \n\n                \n                    \n                        The class used for the marker's svg path \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            drawMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawMarker(dataPoint: IDataPoint, marker: IChartMarker, color: string, target: D3Selection, dataPointSubject: Subject>, className: string, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                IDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    marker\n                                    \n                                                IChartMarker\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointSubject\n                                    \n                                                Subject>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            manageMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    manageMarker(dataSeries: IDataSeries, scales: IXYScales, dataPointIndex: number, container: D3Selection, rendererSubject: Subject, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:37\n                \n            \n\n\n            \n                \n                    This method impersonates marker related logic used in various renderers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    scales\n                                    \n                                                IXYScales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    container\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMarker(target: D3Selection, className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UtilService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, INTERACTION_DATA_POINT_EVENT } from \"../constants\";\nimport { isInRange } from \"../core/common/scales/helpers/is-in-range\";\nimport { IXYScales } from \"../core/common/scales/types\";\nimport {\n    D3Selection,\n    IAccessors,\n    IChartMarker,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointEvent,\n    InteractionType,\n    IRendererEventPayload,\n} from \"../core/common/types\";\n\nimport { DEFAULT_MARKER_INTERACTION_CONFIG } from \"./constants\";\n\nexport class MarkerUtils {\n\n    /** The default class for the marker's container */\n    public static readonly DEFAULT_MARKER_CONTAINER_CLASS = \"marker\";\n\n    /** The class used for the marker's svg path */\n    public static readonly MARKER_PATH_CLASS = \"marker-path\";\n\n    /**\n     * This method impersonates marker related logic used in various renderers\n     *\n     * @param dataSeries\n     * @param scales\n     * @param dataPointIndex\n     * @param container\n     * @param rendererSubject\n     */\n    public static manageMarker(dataSeries: IDataSeries,\n                               scales: IXYScales,\n                               dataPointIndex: number,\n                               container: D3Selection,\n                               rendererSubject: Subject,\n                               markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG): void {\n        if (!container) {\n            throw new Error(\"Container doesn't exist!\");\n        }\n\n        if (dataSeries.data.length === 0) {\n            MarkerUtils.removeMarker(container);\n            return;\n        }\n\n        const accessors = dataSeries.accessors;\n\n        if (dataPointIndex ,\n                             dataPointSubject: Subject>,\n                             className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS,\n                             markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG) {\n        let markerTarget: D3Selection | D3Selection = target.select(`g.${className}`);\n        const xCoord = dataPoint?.position?.x;\n        const yCoord = dataPoint?.position?.y;\n        const attrs = {\n            \"transform\": `translate(${xCoord}, ${yCoord})`,\n            \"cursor\": \"crosshair\",\n        };\n\n        const getPointerEventsClass = () => `${markerInteractionConfig.enabled ? \" pointer-events\" : \"\"}`;\n        const getPointerEventsClickClass = () => `${markerInteractionConfig.enabled && markerInteractionConfig.clickable ? \" pointer-events-click\" : \"\"}`;\n\n        if (markerTarget.empty()) {\n            markerTarget = target.append(\"g\")\n                .classed(`${className}${getPointerEventsClass()}${getPointerEventsClickClass()}`, true);\n        }\n\n        marker.setColor(color);\n        markerTarget.attrs(attrs);\n\n        markerTarget.on(\"mouseenter\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Hover, dataPoint } });\n        });\n        markerTarget.on(\"mouseleave\", () => {\n            dataPointSubject.next({\n                eventName: INTERACTION_DATA_POINT_EVENT,\n                data: {\n                    interactionType: InteractionType.Hover,\n                    dataPoint: {\n                        ...dataPoint,\n                        index: DATA_POINT_INTERACTION_RESET,\n                    },\n                },\n            });\n        });\n        markerTarget.on(\"click\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Click, dataPoint } });\n        });\n\n        if (!(>markerTarget).selectAll(\"g > *\").size() && markerTarget.node()) {\n            markerTarget.node()?.appendChild(UtilService.getSvgFromString(marker.getSvg()));\n            (>markerTarget).select(\"path\").classed(MarkerUtils.MARKER_PATH_CLASS, true);\n        }\n\n        const path = (>markerTarget).select(\"path\").node() as HTMLElement;\n        if (path && markerInteractionConfig.enabled) {\n            // Hack to accommodate existing Firefox hack in MouseInteractiveArea\n            const pathRect = path.getBoundingClientRect();\n            // 'x' in this case represents the absolute position of the left side of the marker\n            path.setAttribute(\"x\", Math.ceil(((dataPoint?.position?.x as number) - pathRect.width / 2)).toString());\n            // 'y' in this case represents the absolute position of the top side of the marker\n            path.setAttribute(\"y\", Math.ceil(((dataPoint?.position?.y as number) - pathRect.height / 2)).toString());\n        }\n    }\n\n    public static removeMarker(target: D3Selection, className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS) {\n        target.select(`g.${className}`).remove();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingDataLineRendererConfig.html":{"url":"classes/MissingDataLineRendererConfig.html","title":"class - MissingDataLineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingDataLineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/missing-data-line-renderer-config.ts\n        \n\n            \n                Description\n            \n            \n                Standard line renderer config for visualizing missing data \n\n            \n\n\n            \n                Implements\n            \n            \n                            ILineRendererConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interactive\n                            \n                            \n                                    Public\n                                strokeStyle\n                            \n                            \n                                    Public\n                                strokeWidth\n                            \n                            \n                                    Public\n                                useEnhancedLineCaps\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LineRenderer.getStrokeStyleDashed(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            useEnhancedLineCaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ILineRendererConfig } from \"../types\";\n\nimport { LineRenderer } from \"./line-renderer\";\n\n/** Standard line renderer config for visualizing missing data */\nexport class MissingDataLineRendererConfig implements ILineRendererConfig {\n    public strokeWidth = 1;\n    public interactive = false;\n    public strokeStyle = LineRenderer.getStrokeStyleDashed(1);\n    public useEnhancedLineCaps = true;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopAccessors.html":{"url":"classes/NoopAccessors.html","title":"class - NoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            INoopAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopRenderer.html":{"url":"classes/NoopRenderer.html","title":"class - NoopRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/noop-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw line chart\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:16\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:31\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:26\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:20\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Subject} from \"rxjs\";\n\nimport {Renderer} from \"../core/common/renderer\";\nimport {Scales} from \"../core/common/scales/types\";\nimport {IDataSeries, ILasagnaLayer, IPosition, IRendererEventPayload} from \"../core/common/types\";\n\nimport {INoopAccessors} from \"./accessors/noop-accessors\";\nimport {IRenderSeries} from \"./types\";\n\n/**\n * Renderer that is able to draw line chart\n */\nexport class NoopRenderer extends Renderer {\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#highlightDataPoint} */\n    public highlightDataPoint(renderSeries: IRenderSeries,\n                              dataPointIndex: number,\n                              rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [];\n    }\n\n    /** See {@link Renderer#getDataPointPosition} */\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition {\n        // @ts-ignore\n        return;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopScale.html":{"url":"classes/NoopScale.html","title":"class - NoopScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/noop-scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:27\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:53\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/noop-scale.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IFormatters, IScale } from \"./types\";\n\nexport class NoopScale implements IScale {\n    public readonly id: string;\n    public formatters: IFormatters;\n    public isDomainFixed: boolean;\n\n    constructor(id?: string) {}\n\n    public convert(): number {\n        // @ts-ignore\n        return;\n    }\n\n    public invert(): T {\n        // @ts-ignore\n        return;\n    }\n\n    public get d3Scale(): AxisScale {\n        // @ts-ignore\n        return;\n    }\n\n    range(): [number, number];\n    range(range: [number, number]): this;\n    range(range?: [number, number]): [number, number] | this {\n        // @ts-ignore\n        return;\n    }\n\n    domain(): T[];\n    domain(domain: T[]): this;\n    domain(domain?: T[]): any {\n        // @ts-ignore\n        return;\n    }\n\n    public fixDomain(domain: any[]): null {\n        return null;\n    }\n\n    public isContinuous(): boolean {\n        return false;\n    }\n\n    public isDomainValid(): boolean {\n        return true;\n    }\n\n    public reverse(): this {\n        // @ts-ignore\n        return;\n    }\n\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        // @ts-ignore\n        return;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NuiChartsModule.html":{"url":"modules/NuiChartsModule.html","title":"module - NuiChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NuiChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ChartCollectionService\n                        \n                        \n                            ThresholdsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { NgModule } from \"@angular/core\";\n// This is not technically used here, but it does pull in the type for $localize\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { LocalizeFn } from \"@angular/localize/init\";\nimport { NuiCommonModule, NuiIconModule, NuiPopoverModule } from \"@nova-ui/bits\";\nimport \"d3-selection-multi\";\n\nimport { ChartCollectionIdDirective } from \"./chart-collection/chart-collection-id.directive\";\nimport { ChartCollectionService } from \"./chart-collection/chart-collection.service\";\nimport { ChartDonutContentComponent } from \"./chart-donut-content/chart-donut-content.component\";\nimport { ChartMarkerComponent } from \"./chart-marker/chart-marker.component\";\nimport { ChartPopoverComponent } from \"./chart-popover/chart-popover.component\";\nimport { ChartTooltipComponent } from \"./chart-tooltips/chart-tooltip.component\";\nimport { ChartTooltipDirective } from \"./chart-tooltips/chart-tooltip.directive\";\nimport { ChartTooltipsComponent } from \"./chart-tooltips/chart-tooltips.component\";\nimport { ChartComponent } from \"./chart/chart.component\";\nimport { LegendSeriesComponent } from \"./legend/legend-series/legend-series.component\";\nimport { BasicLegendTileComponent } from \"./legend/legend-tile/basic-legend-tile/basic-legend-tile.component\";\nimport { RichLegendTileComponent } from \"./legend/legend-tile/rich-legend-tile/rich-legend-tile.component\";\nimport { LegendComponent } from \"./legend/legend.component\";\nimport { ThresholdsService } from \"./thresholds/thresholds-service\";\n\n@NgModule({\n    imports: [\n        NuiCommonModule,\n        NuiIconModule,\n        NuiPopoverModule,\n        OverlayModule,\n    ],\n    declarations: [\n        LegendComponent,\n        LegendSeriesComponent,\n        BasicLegendTileComponent,\n        RichLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    exports: [\n        LegendComponent,\n        LegendSeriesComponent,\n        RichLegendTileComponent,\n        BasicLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n    ],\n    providers: [\n        ChartCollectionService,\n        ThresholdsService,\n    ],\n})\nexport class NuiChartsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathMarker.html":{"url":"classes/PathMarker.html","title":"class - PathMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/path-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided data for svg path\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(d: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/path-marker.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of PathMarker.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        d\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                value that has to be assigned to 'd' attribute of 'path' element in svg\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/markers/path-marker.ts:8\n                            \n                        \n\n                \n                    \n                        Resulting  HTMLElement \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided data for svg path\n */\nexport class PathMarker implements IChartMarker {\n    /** Resulting  HTMLElement */\n    public element: HTMLElement;\n    protected svg: string;\n\n    /**\n     * Creates an instance of PathMarker.\n     * @param {string} d value that has to be assigned to 'd' attribute of 'path' element in svg\n     * @memberof PathMarker\n     */\n    constructor(d: string) {\n        this.element = document.createElement(\"path\");\n\n        this.setAttributes({\n            \"class\": \"nui-chart-element-marker nui-chart--path__outline\",\n            \"vector-effect\": \"non-scaling-stroke\",\n            \"d\": d,\n        });\n    }\n\n    public setColor(color: string): void {\n        this.setAttributes({\"fill\": color});\n    }\n\n    private setAttributes(attrs: { [key: string]: string }) {\n        for (const attr of Object.keys(attrs)) {\n            this.element.setAttribute(attr, attrs[attr]);\n        }\n\n        this.updateSvg();\n    }\n\n    public getSvg(): string {\n        return this.svg;\n    }\n\n    protected updateSvg() {\n        this.svg = this.element.outerHTML;\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PieRenderer.html":{"url":"classes/PieRenderer.html","title":"class - PieRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PieRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/pie-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw pie chart\n\n            \n\n            \n                Extends\n            \n            \n                        RadialRenderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getInnerRadius\n                            \n                            \n                                    Public\n                                getOuterRadius\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         RadialRenderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         RadialRenderer:40\n\n                            \n                        \n\n                \n                    \n                        Renderer configuration object. Defaults to `DEFAULT_RADIAL_RENDERER_CONFIG` constant value.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:46\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:94\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInnerRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInnerRadius(range: number[], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:110\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOuterRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOuterRadius(range: [number, number], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:119\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Arc, DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"./radial-renderer\";\n\n/**\n * Renderer that is able to draw pie chart\n */\nexport class PieRenderer extends RadialRenderer {\n    protected getArc(range: [number, number], arc: Arc, index: number) {\n        return arc.outerRadius(range[1] - range[0])\n            .innerRadius(0);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessedColorProvider.html":{"url":"classes/ProcessedColorProvider.html","title":"class - ProcessedColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessedColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/processed-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider processes values provided by the source provider using the given function.\nExamples would be darken, lighten, reduce opacity, etc.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, fn: (input: string) => void)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/processed-color-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/processed-color-provider.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/processed-color-provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This color provider processes values provided by the source provider using the given function.\n * Examples would be darken, lighten, reduce opacity, etc.\n */\nexport class ProcessedColorProvider implements IValueProvider {\n\n    private processedColors: { [key: string]: string };\n\n    constructor(private sourceProvider: IValueProvider, private fn: (input: string) => string) {\n        this.reset();\n    }\n\n    public get = (entityId: string): string => {\n        const clr = this.sourceProvider.get(entityId);\n\n        if (!clr) {\n            throw new Error(\"clr is not defined\");\n        }\n\n        let processedColor = this.processedColors[clr];\n        if (!processedColor) {\n            processedColor = this.fn(clr);\n            this.processedColors[clr] = processedColor;\n        }\n        return processedColor;\n    }\n\n    public reset(): void {\n        this.processedColors = {};\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialAccessors.html":{"url":"classes/RadialAccessors.html","title":"class - RadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRadialAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialPopoverPlugin.html":{"url":"classes/RadialPopoverPlugin.html","title":"class - RadialPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/radial-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPopoverPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:34\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:51\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:28\n\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:43\n\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:32\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:36\n\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:30\n\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:68\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ChartPopoverPlugin} from \"./chart-popover-plugin\";\n\n/**\n * Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n */\nexport class RadialPopoverPlugin extends ChartPopoverPlugin {\n    protected getAbsolutePosition(valArr: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valArr.map(d => d.position.x));\n        const dataPointsTop = Math.min(...valArr.map(d => d.position.y));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left\n            + dataPointsLeft + this.chart.getGrid().config().dimension.width() / 2;\n        const top = chartElement.offsetTop + dataPointsTop + this.chart.getGrid().config().dimension.height() / 2;\n        return {\n            top: top,\n            left: left,\n            height: 0,\n            width: 0,\n        };\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialTooltipsPlugin.html":{"url":"classes/RadialTooltipsPlugin.html","title":"class - RadialTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/radial-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport { DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"../../../renderers/radial/radial-renderer\";\nimport { IAccessors, IChartSeries, IDataPoint, IPosition } from \"../../common/types\";\n\nimport { ChartTooltipsPlugin, ITooltipPosition } from \"./chart-tooltips-plugin\";\n\n/**\n * The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\n * on the source element for the tooltip position starting with EAST and going clockwise)\n */\nconst CONNECTION_POINTS: { x: \"start\" | \"center\" | \"end\", y: \"top\" | \"center\" | \"bottom\" }[] =\n    [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ];\n\n/** This conversion map is used to calculate the opposite connection points for the tooltip element */\nconst OPPOSITE: { [key: string]: string } = {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n};\n\n/**\n * This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n */\nexport class RadialTooltipsPlugin extends ChartTooltipsPlugin {\n\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n        const pieArcData: DefaultArcObject = dataPoint.data;\n        const renderer = chartSeries.renderer;\n        const rScale = chartSeries.scales.r;\n        // this calculation was taken from the radial renderer implementation\n        const outerRadius = renderer.getOuterRadius(rScale.range(), dataPoint.index);\n\n        const r = outerRadius + this.tooltipPositionOffset;\n        // pie charts start on the top, so we need to subtract Math.PI / 2\n        const a = (pieArcData.startAngle + pieArcData.endAngle) / 2 - Math.PI / 2;\n\n        return {\n            x: Math.cos(a) * r,\n            y: Math.sin(a) * r,\n            width: 0,\n            height: 0,\n            overlayPositions: [this.getOverlayPosition(a)],\n        };\n    }\n\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        const absolutePosition = super.getAbsolutePosition(relativePosition, chartPosition);\n\n        // radial grid is shifted so that the origin is located in the middle of the rendering area,\n        // so we need to add it back when we're emitting absolute positions for the tooltips\n        absolutePosition.x += this.chart.getGrid().config().dimension.width() / 2;\n        absolutePosition.y += this.chart.getGrid().config().dimension.height() / 2;\n\n        return absolutePosition;\n    }\n\n    /**\n     * Calculate the position for the tooltip overlay based on the angle of the pie slice\n     *\n     * @param {number} angle in radians\n     */\n    private getOverlayPosition(angle: number): ConnectedPosition {\n        const sectionIndex = this.getSectionIndex(angle, 8);\n\n        return {\n            originX: CONNECTION_POINTS[sectionIndex].x,\n            originY: CONNECTION_POINTS[sectionIndex].y,\n            overlayX: this.opposite(CONNECTION_POINTS[sectionIndex].x),\n            overlayY: this.opposite(CONNECTION_POINTS[sectionIndex].y),\n        };\n    }\n\n    /**\n     * Calculates what section of the circle does the given angle belong to\n     *\n     * @param {number} angle in radians\n     * @param {number} sections The number of sections the circle is divided into\n     */\n    private getSectionIndex(angle: number, sections: number) {\n        let sectionIndex = Math.round(angle / (Math.PI * 2 / sections)) % sections;\n        while (sectionIndex \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleAccessors.html":{"url":"classes/RectangleAccessors.html","title":"class - RectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRectangleAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/renderer.ts\n        \n\n            \n                Description\n            \n            \n                The abstract base class for chart renderers with some limited default functionality\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IRendererConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/renderer.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IRendererConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:94\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:44\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:52\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:169\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:73\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:62\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:152\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:128\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:189\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:84\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:116\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:107\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { extent, Numeric } from \"d3-array\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport each from \"lodash/each\";\nimport get from \"lodash/get\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { IRenderSeries, RenderLayerName, RenderState } from \"../../renderers/types\";\n\nimport { EMPTY_CONTINUOUS_DOMAIN, IScale, Scales } from \"./scales/types\";\nimport { D3Selection, IAccessors, IDataPoint, IDataSeries, ILasagnaLayer, IPosition, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"./types\";\n\n/**\n * The abstract base class for chart renderers with some limited default functionality\n */\n// For why the \"dynamic\" decorator is used see https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\nexport abstract class Renderer {\n\n    public static readonly DEFAULT_CONFIG: IRendererConfig = {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    };\n\n    constructor(public config: IRendererConfig = {}) {\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, Renderer.DEFAULT_CONFIG);\n    }\n\n    public interaction: Record = {};\n\n    /**\n     * Draw the visual representation of the provided data series\n     *\n     * @param {IRenderSeries} renderSeries The series to render\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public abstract draw(renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n    /**\n     * Return position of a specified datapoint\n     *\n     * @param {IDataSeries} dataSeries\n     * @param {number} index\n     * @param {Scales} scales\n     * @returns {IPosition}\n     */\n    public abstract getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined;\n\n    /**\n     * Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n     *\n     * @param {IDataSeries} series series from which to determine the index corresponding to the specified values\n     * @param {{ [axis: string]: any }} values the values from which a data point index can be determined\n     * @param {Scales} scales the scales to be used in the index calculation\n     *\n     * @returns {number} negative value means that index is not found\n     */\n    public getDataPointIndex(series: IDataSeries, values: { [axis: string]: any }, scales: Scales): number {\n        return DATA_POINT_NOT_FOUND;\n    }\n\n    /**\n     * Highlight the data point corresponding to the specified data point index\n     *\n     * @param {IRenderSeries} renderSeries The series on which to render the data point highlight\n     * @param {number} dataPointIndex index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    /**\n     * Get the style attributes for the specified state that we need to apply to a series container\n     *\n     * @param {RenderState} state the state for which to retrieve container styles\n     *\n     * @returns {ValueMap} the container styles for the specified state\n     */\n    public getContainerStateStyles = (state: RenderState): ValueMap => {\n        if (!this.config.stateStyles) {\n            throw new Error(\"stateStyles property is not defined\");\n        }\n        return this.config.stateStyles[state || RenderState.default];\n    }\n\n    /**\n     * Set the RenderState of the target data series\n     *\n     * @param {IRenderContainers} renderContainers the render containers of the series\n     * @param {RenderState} state The new state for the target series\n     */\n    public setSeriesState(renderContainers: IRenderContainers, state: RenderState): void {\n    }\n\n    /**\n     * Set the RenderState of the target data point\n     *\n     * @param {D3Selection} target the target data point\n     * @param {RenderState} state The new state for the target data point\n     */\n    public setDataPointState(target: D3Selection, state: RenderState): void {\n    }\n\n    /**\n     * Calculate domain for data filtered by given filterScales\n     *\n     * @param dataSeries\n     * @param filterScales\n     * @param scaleKey\n     * @param scale\n     * @returns array of datapoints from dataSeries filtered by domains of given filterScales\n     */\n    public getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale): any[] {\n        let filteredData = dataSeries.data;\n        for (const fixedScaleKey of Object.keys(filterScales)) {\n            const filterScale = filterScales[fixedScaleKey];\n            if (!filterScale.isDomainFixed || !filterScale.isContinuous()) {\n                continue;\n            }\n\n            filteredData = this.filterDataByDomain(filteredData, dataSeries, fixedScaleKey, filterScale.domain());\n        }\n\n        return this.getDomain(filteredData, dataSeries, scaleKey, scale);\n    }\n\n    /**\n     * Calculate the domain using the data of a series\n     *\n     * @param {any[]} data source data, can be filtered\n     * @param dataSeries related data series\n     * @param {string} scaleName name of the scale for which domain calculation is needed\n     * @param scale\n     *\n     * @returns {[any, any]} min and max values as an array\n     */\n    public getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale): any[] {\n        if (!data || data.length === 0) {\n            return EMPTY_CONTINUOUS_DOMAIN;\n        }\n\n        return extent(data,\n                                        (datum, index, arr) => dataSeries.accessors.data?.[scaleName]?.(datum, index, Array.from(arr), dataSeries));\n    }\n\n    /**\n     * Filters given dataset by domain of provided scale\n     *\n     * @param data\n     * @param dataSeries\n     * @param scaleName\n     * @param domain\n     */\n    public filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[]): any[] {\n        const accessor = dataSeries.accessors.data?.[scaleName];\n\n        // if (isNil(accessor)) {\n        //     throw new Error(\"accessor is not defined\");\n        // }\n\n\n        return data.filter((d, i) => {\n            // @ts-ignore\n            const value = accessor(d, i, data, dataSeries);\n            return value >= domain[0] && value ,\n                               dataPointSubject: Subject, dataPoint: Partial) {\n        const eventList: string[] = get(this.interaction, path, {})[nativeEvent];\n        if (!eventList) {\n            return;\n        }\n\n        each(eventList, (targetEvent: string) => {\n            target.on(nativeEvent, () => {\n                const bbox = target.node().getBoundingClientRect();\n                dataPointSubject.next({\n                    eventName: targetEvent,\n                    data: {\n                        ...dataPoint,\n                        position: bbox,\n                    },\n                });\n            });\n        });\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RichLegendTileComponent.html":{"url":"components/RichLegendTileComponent.html","title":"component - RichLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RichLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-rich-legend-tile\n            \n\n            \n                styleUrls\n                ./rich-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./rich-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                seriesHasAdditionalContent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputUnitLabel\n                            \n                            \n                                    Public\n                                hasInputValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                backgroundColor\n                            \n                            \n                                color\n                            \n                            \n                                unitLabel\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legendSeries: LegendSeriesComponent, legend: LegendComponent, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legendSeries\n                                                  \n                                                        \n                                                                        LegendSeriesComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        backgroundColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:36\n                            \n                        \n                \n                    \n                        The series color\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:41\n                            \n                        \n                \n                    \n                        Color for the text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:26\n                            \n                        \n                \n                    \n                        The series unit label\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:31\n                            \n                        \n                \n                    \n                        The current value of the series\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputUnitLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputUnitLabel()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputValue()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesHasAdditionalContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Host,\n    Input,\n    Optional,\n    ViewEncapsulation,\n} from \"@angular/core\";\nimport _isNil from \"lodash/isNil\";\n\nimport { LegendSeriesComponent } from \"../../legend-series/legend-series.component\";\nimport { LegendComponent } from \"../../legend.component\";\n\n@Component({\n    selector: \"nui-rich-legend-tile\",\n    templateUrl: \"./rich-legend-tile.component.html\",\n    styleUrls: [\"./rich-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class RichLegendTileComponent implements AfterContentInit, AfterViewInit {\n    /**\n     * The series unit label\n     */\n    @Input() public unitLabel: string;\n\n    /**\n     * The current value of the series\n     */\n    @Input() public value: string;\n\n    /**\n     * The series color\n     */\n    @Input() public backgroundColor: string;\n\n    /**\n     * Color for the text\n     */\n    @Input() public color: string;\n\n    public seriesHasAdditionalContent: boolean;\n\n    constructor(@Host() private legendSeries: LegendSeriesComponent,\n                @Optional() @Host() private legend: LegendComponent,\n                private changeDetector: ChangeDetectorRef) { }\n\n    public ngAfterContentInit() {\n        if (this.legend) {\n            this.unitLabel = this.unitLabel || this.legend.seriesUnitLabel;\n            this.backgroundColor = this.backgroundColor || this.legend.seriesColor || \"white\";\n        }\n    }\n\n    public ngAfterViewInit() {\n        if (this.legendSeries) {\n            this.seriesHasAdditionalContent = this.legendSeries.hasInputDescription() || this.legendSeries.hasProjectedDescription();\n            this.changeDetector.detectChanges();\n        }\n    }\n\n    public hasInputValue() {\n        return !_isNil(this.value);\n    }\n\n    public hasInputUnitLabel() {\n        return !_isNil(this.unitLabel);\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' 0\"     [class.nui-rich-legend-tile--series-has-additional-content]=\"seriesHasAdditionalContent\">                        {{ value }}                            {{ unitLabel }}                                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'RichLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scale.html":{"url":"classes/Scale.html","title":"class - Scale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:55\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:67\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:74\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:43\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:78\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:83\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/scale.ts:38\n                                \n                            \n                    \n                        \n                                See IScale \n\n\n                                \n                                    Returns :         AxisScale\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { UtilityService } from \"../utility.service\";\n\nimport { getAutomaticDomain } from \"./domain-calculation/automatic-domain\";\nimport { DomainCalculator, IFormatters, IScale } from \"./types\";\n\nexport abstract class Scale implements IScale {\n\n    public readonly id: string;\n    public domainCalculator: DomainCalculator = getAutomaticDomain;\n    public formatters: IFormatters = {};\n    public isDomainFixed: boolean;\n    private isReversed = false;\n\n    protected readonly _d3Scale: any;\n\n    protected constructor(id?: string) {\n        this.id = id || UtilityService.uuid();\n\n        this._d3Scale = this.createD3Scale();\n    }\n\n    /**\n     * Creates a d3 scale based on the scale's type\n     *\n     * @returns {any} A new d3 scale appropriate to the scale type\n     */\n    protected abstract createD3Scale(): any;\n\n    public abstract convert(value: T): number;\n\n    public abstract invert(coordinate: number): T | undefined;\n\n    public abstract isContinuous(): boolean;\n\n    /** See {@link IScale#d3Scale} */\n    public get d3Scale(): AxisScale {\n        return this._d3Scale;\n    }\n\n    /** See {@link IScale#range} */\n    public range(): [number, number];\n    public range(range: [number, number]): this;\n    public range(range?: [number, number]): any {\n        if (range) {\n            this._d3Scale.range(this.isReversed ? range.reverse() : range);\n            return this;\n        } else {\n            return this._d3Scale.range();\n        }\n    }\n\n    /** See {@link IScale#domain} */\n    public domain(): T[];\n    public domain(domain: T[]): this;\n    public domain(domain?: T[]): any {\n        if (domain) {\n            this._d3Scale.domain(domain);\n            return this;\n        } else {\n            return this._d3Scale.domain();\n        }\n    }\n\n    /** See {@link IScale#fixDomain} */\n    public fixDomain(domain: T[]): this {\n        this.domain(domain);\n        this.isDomainFixed = true;\n        return this;\n    }\n\n    /** See {@link IScale#reverse} */\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => value === undefined);\n    }\n\n    public reverse(): this {\n        return this.reversed(!this.isReversed);\n    }\n\n    /** See {@link IScale#reversed} */\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        if (typeof reversed === \"undefined\") {\n            return this.isReversed;\n        } else {\n            this.isReversed = reversed;\n            return this;\n        }\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScalesIndex.html":{"url":"interfaces/ScalesIndex.html","title":"interface - ScalesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScalesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of scale collections in index and array form \n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:25\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialChartMarkerProvider.html":{"url":"classes/SequentialChartMarkerProvider.html","title":"class - SequentialChartMarkerProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialChartMarkerProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-chart-marker-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided markers to given series.\nIt keeps track of already given markers to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(markers: IChartMarker[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-chart-marker-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IChartMarker[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../types\";\n\nimport { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided markers to given series.\n * It keeps track of already given markers to given entities to avoid conflicts.\n */\nexport class SequentialChartMarkerProvider extends SequentialValueProvider {\n\n    constructor(private markers: IChartMarker[]) {\n        super(markers);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialColorProvider.html":{"url":"classes/SequentialColorProvider.html","title":"class - SequentialColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-color-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class SequentialColorProvider extends SequentialValueProvider {\n\n    constructor(private colors: string[]) {\n        super(colors);\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialValueProvider.html":{"url":"classes/SequentialValueProvider.html","title":"class - SequentialValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided instances of type  to given series.\nIt keeps track of already given instances to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: T[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-value-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/sequential-value-provider.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/sequential-value-provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided instances of type  to given series.\n * It keeps track of already given instances to given entities to avoid conflicts.\n */\nexport class SequentialValueProvider implements IValueProvider {\n\n    private providedValues: { [key: string]: T };\n    private lastUsedIndex: number;\n\n    constructor(private values: T[]) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T => {\n        let value = this.providedValues[entityId];\n        if (!value) {\n            const index = ++this.lastUsedIndex % this.values.length;\n            value = this.values[index];\n            this.providedValues[entityId] = value;\n        }\n        return value;\n    }\n\n    public reset(): void {\n        this.providedValues = {};\n        this.lastUsedIndex = -1;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SideIndicatorAccessors.html":{"url":"classes/SideIndicatorAccessors.html","title":"class - SideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Standard definition for side indicator series and data accessors \n\n            \n\n\n            \n                Implements\n            \n            \n                            ISideIndicatorAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor,\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    /** @deprecated As of Nova v9, use RenderLayerName.unclippedData enum value instead. Removal: NUI-5753 */\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.unclippedData];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [\n            STANDARD_RENDER_LAYERS[RenderLayerName.unclippedData],\n        ];\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SparkChartAssist.html":{"url":"classes/SparkChartAssist.html","title":"class - SparkChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SparkChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/spark-chart-assist.ts\n        \n\n            \n                Description\n            \n            \n                Chart assist implementation to be used with spark charts\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartAssist\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                gridConfig\n                            \n                            \n                                    Public\n                                highlightedDataPoints\n                            \n                            \n                                    Public\n                                isLegendActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                lastGridConfig\n                            \n                            \n                                    Public\n                                markers\n                            \n                            \n                                    Public\n                                palette\n                            \n                            \n                                    Public\n                                    Readonly\n                                showBottomAxis\n                            \n                            \n                                    Public\n                                    Readonly\n                                showTopBorder\n                            \n                            \n                                    Public\n                                sparks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHighlightedValue\n                            \n                            \n                                    Public\n                                getVisibleSeriesWithLegend\n                            \n                            \n                                    Public\n                                setRenderState\n                            \n                            \n                                    Public\n                                trackByFn\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateSparks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(showBottomAxis, showTopBorder, palette: IChartPalette, markers: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showBottomAxis\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        showTopBorder\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        palette\n                                                  \n                                                        \n                                                                        IChartPalette\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            gridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:32\n                            \n                        \n\n                \n                    \n                        Grid config for all sparks except the last (bottom) one \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            highlightedDataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isLegendActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:30\n                            \n                        \n\n                \n                    \n                        Used for keeping tabs on the legend's active state \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            lastGridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:34\n                            \n                        \n\n                \n                    \n                        Grid config for the last (bottom) spark \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            markers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IValueProvider\n\n                        \n                    \n                    \n                        \n                            Default value : new SequentialChartMarkerProvider(CHART_MARKERS)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            palette\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChartPalette\n\n                        \n                    \n                    \n                        \n                            Default value : new ChartPalette(CHART_PALETTE_CS1)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showBottomAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showTopBorder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sparks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ISpark[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:28\n                            \n                        \n\n                \n                    \n                        Collection of ISpark objects \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:84\n                \n            \n\n\n            \n                \n                    See IChartAssist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setRenderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderState(_seriesId: string, _state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(_index: number, spark: ISpark)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:92\n                \n            \n\n\n            \n                \n                    To use the for-cycle trackBy, set the id value on each spark\nand assign this function to the ngFor trackBy property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    spark\n                                    \n                                            ISpark\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:55\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if they all consist of only one series.\nIf one or more sparks has multiple series use the updateSparks method instead.\nSee IChartAssist\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateSparks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSparks(sparks: ISpark[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:65\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if any of them consist of more than one series.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sparks\n                                    \n                                            ISpark[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The collection of sparks to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import cloneDeep from \"lodash/cloneDeep\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { XYGridConfig } from \"../../core/grid/config/xy-grid-config\";\nimport { RenderState } from \"../../renderers/types\";\nimport { Chart } from \"../chart\";\nimport { EventBus } from \"../common/event-bus\";\nimport { ChartPalette } from \"../common/palette/chart-palette\";\nimport { CHART_MARKERS, CHART_PALETTE_CS1 } from \"../common/palette/palettes\";\nimport { SequentialChartMarkerProvider } from \"../common/palette/sequential-chart-marker-provider\";\nimport {\n    IAccessors, IChartAssistSeries, IChartEvent, IChartMarker, IChartPalette, IChartSeries, IDataPointsPayload, InteractionType, IValueProvider,\n} from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\nimport { sparkChartGridConfig } from \"../grid/config/spark-chart-grid-config\";\nimport { XYGrid } from \"../grid/xy-grid\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\n\nimport { ChartAssist } from \"./chart-assist\";\nimport { IChartAssist, ISpark } from \"./types\";\n\n/**\n * Chart assist implementation to be used with spark charts\n */\nexport class SparkChartAssist implements IChartAssist {\n    /** Collection of ISpark objects */\n    public sparks: ISpark[] = [];\n    /** Used for keeping tabs on the legend's active state */\n    public isLegendActive = false;\n    /** Grid config for all sparks except the last (bottom) one */\n    public readonly gridConfig: XYGridConfig;\n    /** Grid config for the last (bottom) spark */\n    public readonly lastGridConfig: XYGridConfig;\n\n    public highlightedDataPoints: IDataPointsPayload = {};\n\n    constructor(public readonly showBottomAxis = true,\n        public readonly showTopBorder = true,\n        public palette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1),\n        public markers: IValueProvider = new SequentialChartMarkerProvider(CHART_MARKERS)) {\n        this.gridConfig = sparkChartGridConfig(new XYGridConfig(), false, showTopBorder);\n        this.gridConfig.interactionPlugins = false;\n\n        this.lastGridConfig = sparkChartGridConfig(new XYGridConfig(), showBottomAxis, showTopBorder);\n        this.lastGridConfig.interactionPlugins = false;\n    }\n\n    /**\n     * Use this method to update the set of sparks if they all consist of only one series.\n     * If one or more sparks has multiple series use the updateSparks method instead.\n     *\n     * See {@link IChartAssist#update}\n     */\n    public update(inputSeriesSet: IChartAssistSeries[]): void {\n        const sparks = inputSeriesSet.map(chartSeries => ({ id: chartSeries.id, chartSeriesSet: [chartSeries] }));\n        this.updateSparks(sparks);\n    }\n\n    /**\n     * Use this method to update the set of sparks if any of them consist of more than one series.\n     *\n     * @param {ISpark[]} sparks The collection of sparks to update\n     */\n    public updateSparks(sparks: ISpark[]): void {\n        const inputSparks = cloneDeep(sparks);\n        this.sparks = inputSparks.map((spark, index): ISpark => {\n            const lastSpark = index === inputSparks.length - 1;\n            const existingSparkIndex = spark.id ? this.sparks.findIndex(existingSpark => existingSpark.id === spark.id) : -1;\n            if (existingSparkIndex !== -1) {\n                spark.chart = this.reconfigureChart(this.sparks[existingSparkIndex].chart as Chart, lastSpark);\n            } else {\n                spark.chart = spark.chart || this.createChart(lastSpark);\n                spark.id = spark.id || UtilityService.uuid();\n            }\n\n            spark.chart.update(spark.chartSeriesSet);\n\n            return spark;\n        });\n    }\n\n    /** See {@link IChartAssist#getHighlightedValue} */\n    public getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number {\n        return ChartAssist.getLabel(chartSeries, this.highlightedDataPoints[chartSeries.id], scaleKey, formatterName);\n    }\n\n    /**\n     * To use the for-cycle trackBy, set the id value on each spark\n     * and assign this function to the ngFor trackBy property\n     */\n    public trackByFn(_index: number, spark: ISpark) {\n        return spark.id;\n    }\n\n    public setRenderState(_seriesId: string, _state: RenderState): void {\n        // not used\n    }\n\n    public getVisibleSeriesWithLegend(): IChartAssistSeries[] {\n        return [];\n    }\n\n    protected createChart(lastSpark: boolean) {\n        const grid = new XYGrid(lastSpark ? this.lastGridConfig : this.gridConfig);\n        const chart = new Chart(grid);\n\n        if (this.showTopBorder || this.showBottomAxis) {\n            chart.addPlugin(new InteractionLinePlugin());\n        }\n        if (lastSpark && this.showBottomAxis) {\n            chart.addPlugin(new InteractionLabelPlugin());\n        }\n\n        this.configureEventSubscriptions(chart.getEventBus());\n\n        return chart;\n    }\n\n    private configureEventSubscriptions(eventBus: EventBus): void {\n        eventBus.getStream(INTERACTION_DATA_POINTS_EVENT).subscribe((event) => {\n            if (event.data.interactionType === InteractionType.MouseMove) {\n                const dataPoints = event.data.dataPoints;\n                Object.keys(dataPoints).forEach(seriesId => {\n                    this.highlightedDataPoints[seriesId] = Object.assign({}, dataPoints[seriesId]);\n                });\n            }\n        });\n        eventBus.getStream(MOUSE_ACTIVE_EVENT).subscribe((event) => {\n            this.isLegendActive = event.data;\n        });\n    }\n\n    private reconfigureChart(chart: Chart, lastSpark: boolean): Chart {\n        chart.getGrid().config(lastSpark ? this.lastGridConfig : this.gridConfig);\n        chart.updateDimensions();\n\n        const hasInteractionLabel = chart.hasPlugin(InteractionLabelPlugin);\n        if (lastSpark && !hasInteractionLabel && this.showBottomAxis) {\n            const labelPlugin = new InteractionLabelPlugin();\n            chart.addPlugin(labelPlugin);\n            labelPlugin.initialize();\n        } else if (!lastSpark && hasInteractionLabel) {\n            chart.removePlugin(InteractionLabelPlugin);\n        }\n\n        return chart;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusAccessors.html":{"url":"classes/StatusAccessors.html","title":"class - StatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IStatusAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                STATUS_CATEGORY\n                            \n                            \n                                    Static\n                                STATUS_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    series\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(barAccessors: IBarAccessors)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/status-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        barAccessors\n                                                  \n                                                        \n                                                                        IBarAccessors\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_CATEGORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"status\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [StatusAccessors.STATUS_CATEGORY]\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        series\n                    \n                \n\n                \n                    \n                        getseries()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SvgMarker.html":{"url":"classes/SvgMarker.html","title":"class - SvgMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SvgMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/svg-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided portion of svg markup\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(svg: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/svg-marker.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        svg\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\n\nimport { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided portion of svg markup\n */\nexport class SvgMarker implements IChartMarker {\n    protected styledSvg: string;\n\n    constructor(protected svg: string) {\n    }\n\n    public getSvg(): string {\n        return this.styledSvg || this.svg;\n    }\n\n    public setColor(color: string): void {\n        this.styledSvg = isUndefined(color) ? color : `${this.svg}`;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextColorProvider.html":{"url":"classes/TextColorProvider.html","title":"class - TextColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/text-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider calculates foreground color based on contrast ratio of provided colors\n\n            \n\n            \n                Extends\n            \n            \n                        ProcessedColorProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, colorDefinitions: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/text-color-provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        colorDefinitions\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         ProcessedColorProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         ProcessedColorProvider:15\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         ProcessedColorProvider\n\n                \n            \n            \n                \n                        Defined in         ProcessedColorProvider:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { rgb, RGBColor } from \"d3-color\";\n\nimport { IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\n\n/** @ignore */\nconst rc = 0.2126;\n/** @ignore */\nconst gc = 0.7152;\n/** @ignore */\nconst bc = 0.0722;\n/** @ignore */\nconst lowc = 1 / 12.92;\n\n/**\n * This color provider calculates foreground color based on contrast ratio of provided colors\n */\nexport class TextColorProvider extends ProcessedColorProvider {\n\n    constructor(sourceProvider: IValueProvider, colorDefinitions: { light: string, dark: string }) {\n        super(sourceProvider, (input: string) => {\n            const color = getColorValueByName(input);\n            const rgbInput = rgb(color);\n\n            const ratioToLight = this.getContrastRatio(rgbInput, rgb(colorDefinitions.light));\n            const ratioToDark = this.getContrastRatio(rgbInput, rgb(colorDefinitions.dark));\n\n            return ratioToDark > ratioToLight ? colorDefinitions.dark : colorDefinitions.light;\n        });\n    }\n\n    /**\n     * Calculate contrast ratio of two given colors (https://www.w3.org/TR/WCAG20/#contrast-ratiodef)\n     *\n     * @param {RGBColor} color1\n     * @param {RGBColor} color2\n     * @returns {number} luminance ratio\n     */\n    private getContrastRatio(color1: RGBColor, color2: RGBColor) {\n        const luminance1 = this.getRelativeLuminance(color1);\n        const luminance2 = this.getRelativeLuminance(color2);\n        let lighter: number;\n        let darker: number;\n        if (luminance1 > luminance2) {\n            lighter = luminance1;\n            darker = luminance2;\n        } else {\n            lighter = luminance2;\n            darker = luminance1;\n        }\n        return (lighter + 0.05) / (darker + 0.05);\n    }\n\n    /**\n     * Calculates relative luminance of given color (https://www.w3.org/TR/WCAG20/relative-luminance.xml)\n     *\n     * @param {RGBColor} rgbColor\n     * @returns {number}\n     */\n    private getRelativeLuminance(rgbColor: RGBColor) {\n        const rsrgb = rgbColor.r / 255;\n        const gsrgb = rgbColor.g / 255;\n        const bsrgb = rgbColor.b / 255;\n\n        const r = rsrgb \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThresholdsService.html":{"url":"injectables/ThresholdsService.html","title":"injectable - ThresholdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThresholdsService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/thresholds-service.ts\n        \n\n            \n                Description\n            \n            \n                This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getBackgrounds\n                            \n                            \n                                    Public\n                                getCrossPoint\n                            \n                            \n                                    Public\n                                getCrossPointWithY\n                            \n                            \n                                    Public\n                                getSideIndicators\n                            \n                            \n                                    Public\n                                getThresholdLine\n                            \n                            \n                                    Public\n                                getThresholdLines\n                            \n                            \n                                    Public\n                                getThresholdZones\n                            \n                            \n                                    Public\n                                injectThresholdsData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBackgrounds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBackgrounds(sourceSeries: IDataSeries, zones: IDataSeries[], scales: Scales, colorProvider: IValueProvider, thicknessMap: Record, rendererConfig: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:76\n                \n            \n\n\n            \n                \n                    This method creates a background series for TimeInterval or continuous (currently only works with time) scale.\nIf the series is continuous it detects intersection of source line data with given threshold zones and generates start / end for status periods.\nOtherwise it will use the start and the end of the band.\nThe default value of the rendererConfig parameter is THRESHOLDS_MAIN_CHART_RENDERER_CONFIG. For a summary chart, usually a smaller status\nchart positioned below a main chart, use THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The data series from which to derive a background visualization\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The scales to be used for the background visualization\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                                \n                                    thicknessMap\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        Map of status to number specifying a custom height per status for the background visualization.\nIf a status is not specified in the map, the default thickness is the full height of the rendering area.\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)\n                                    \n\n                                    \n                                        The renderer's configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPoint(dataFrom: IPosition, dataTo: IPosition, thresholdFrom: IPosition, thresholdTo: IPosition)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:295\n                \n            \n\n\n            \n                \n                    Calculates the point where the data series line will cross a threshold line using the two closest points for each\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data starting point\n\n                                    \n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data ending point\n\n                                    \n                                \n                                \n                                    thresholdFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold starting point\n\n                                    \n                                \n                                \n                                    thresholdTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold ending point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        the position of the cross point or null if lines don't cross\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPointWithY\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPointWithY(dataFrom: IPosition, dataTo: IPosition, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSideIndicators\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSideIndicators(zones: IDataSeries[], scales: Scales, rendererConfig?: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:374\n                \n            \n\n\n            \n                \n                    Creates side indicator data series for given threshold zones\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scales to be used for the side indicators\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Configuration for the renderer. Default is the exported constant 'THRESHOLDS_MAIN_CHART_RENDERER_CONFIG'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLine(zone: IDataSeries, valueAccessor: DataAccessor, zoneBoundary)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:261\n                \n            \n\n\n            \n                \n                    Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    zone\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A zone defined as a data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    valueAccessor\n                                    \n                                                DataAccessor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Accessor for the threshold limit\n\n                                    \n                                \n                                \n                                    zoneBoundary\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ZoneBoundary.Start\n                                    \n\n                                    \n                                        The zone boundary represented by the line. Default is ZoneBoundary.Start.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLines(zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:229\n                \n            \n\n\n            \n                \n                    Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdZones\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdZones(sourceSeries: IDataSeries, simpleZones: ISimpleThresholdZone[], colorProvider: IValueProvider)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:205\n                \n            \n\n\n            \n                \n                    Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\nCreating these series manually is also possible for dynamic threshold limits.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series from which to derive the zones\n\n                                    \n                                \n                                \n                                    simpleZones\n                                    \n                                                ISimpleThresholdZone[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a collection of zones that are each defined by a start value and/or an end value. (A missing\nstart or end value indicates an infinite zone.)\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDataSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            injectThresholdsData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectThresholdsData(dataSeries: IDataSeries, zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:40\n                \n            \n\n\n            \n                \n                    Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\nthe threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\ncalculation, but also in other places, like legend or tooltips.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series that will be enhanced with threshold metadata\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"__thresholds-background\"\n                        \n                    \n                        \n                            \n                                    Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { LoggerService } from \"@nova-ui/bits\";\nimport { Numeric } from \"d3-array\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport sortBy from \"lodash/sortBy\";\nimport unionWith from \"lodash/unionWith\";\nimport values from \"lodash/values\";\n\nimport { isBandScale, Scales } from \"../core/common/scales/types\";\nimport { DataAccessor, IChartAssistSeries, IDataSeries, IPosition, IRendererConfig, IValueProvider, IZoneCrossPoint } from \"../core/common/types\";\nimport { AreaAccessors, IAreaAccessors } from \"../renderers/area/area-accessors\";\nimport { IStatusAccessors } from \"../renderers/bar/accessors/status-accessors\";\nimport { statusAccessors } from \"../renderers/bar/accessors/status-accessors-fn\";\nimport { BarRenderer } from \"../renderers/bar/bar-renderer\";\nimport { THRESHOLDS_MAIN_CHART_RENDERER_CONFIG } from \"../renderers/constants\";\nimport { ILineAccessors, LineAccessors } from \"../renderers/line/line-accessors\";\nimport { LineRenderer } from \"../renderers/line/line-renderer\";\nimport { ISideIndicatorAccessors, SideIndicatorAccessors, SideIndicatorRenderer } from \"../renderers/side-indicator-renderer\";\n\nimport { ISimpleThresholdZone, ZoneBoundary, ZoneCross } from \"./types\";\n\n/**\n * This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n */\n@Injectable()\nexport class ThresholdsService {\n    public static SERIES_ID_SUFFIX = \"__thresholds-background\";\n\n    constructor(private loggerService: LoggerService) {\n    }\n\n    /**\n     * Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\n     * the threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\n     * calculation, but also in other places, like legend or tooltips.\n     *\n     * @param dataSeries source data series that will be enhanced with threshold metadata\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    public injectThresholdsData(dataSeries: IDataSeries,\n                                zones: IDataSeries[]) {\n        const zoneIndexes: Record = {};\n        zones.forEach(z => z.entered = false);\n\n        for (let i = 0; i ,\n                          zones: IDataSeries[],\n                          scales: Scales,\n                          colorProvider: IValueProvider,\n                          thicknessMap: Record = {},\n                          rendererConfig: IRendererConfig = cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)): IChartAssistSeries {\n        if (sourceSeries.data.length > 0 && typeof sourceSeries.data[0].__thresholds === \"undefined\") {\n            this.loggerService.warn(\"Thresholds metadata is not defined on provided data series\", sourceSeries);\n        }\n\n        let data: any[];\n        const accessors = statusAccessors(colorProvider);\n        accessors.data.thickness = (d) => thicknessMap[d.status];\n        if (isBandScale(scales.x)) {\n            data = cloneDeep(sourceSeries.data);\n            accessors.data.start = sourceSeries.accessors.data.x;\n            accessors.data.end = sourceSeries.accessors.data.x;\n            accessors.data.color = (d) => (d.__thresholds && d.__thresholds.status) ?\n                colorProvider.get(d.__thresholds.status) : \"transparent\";\n            accessors.data.thickness = (d) => thicknessMap[d.__thresholds.status];\n        } else {\n            data = this.getBackgroundsDataForContinuousScale(sourceSeries, zones);\n        }\n        return {\n            id: sourceSeries.id + ThresholdsService.SERIES_ID_SUFFIX,\n            data,\n            accessors,\n            scales,\n            renderer: new BarRenderer(rendererConfig),\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates background data for continuous scale based on intersections between the source data and zone definitions.\n     *\n     * @param sourceSeries source data series from which to derive background data\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    private getBackgroundsDataForContinuousScale(sourceSeries: IDataSeries, zones: IDataSeries[]) {\n        const backgroundData: ZoneCross[] = [];\n        const breakPoints = this.getBreakPoints(sourceSeries, zones);\n\n        const zoneIndexes: Record = {};\n        for (let i = 0; i , zones: IDataSeries[]): (IZoneCrossPoint | undefined)[] {\n        const sourceAccessors = sourceSeries.accessors.data;\n\n        let breakPoints: (IZoneCrossPoint | undefined)[] = [];\n\n        for (let i = 0; i  this.getCrossPointWithY(xy1, xy2, y)) // calculate cross points for both limits\n                    .filter(c => c); // take only those that actually intersect\n\n                [xy1, xy2].forEach((xy) => {\n                    if (xy.y === zoneStartY || xy.y === zoneEndY) {\n                        xy.isZoneEdge = true;\n                    }\n                });\n\n                // add all crossPoints, dataPoints, but only those with unique \"x\" coordinate\n                breakPoints = unionWith(breakPoints, zoneCrossPoints, [xy1, xy2], (a, b) => a?.x === b?.x && a?.isZoneEdge === b?.isZoneEdge);\n            }\n        }\n\n        return sortBy(breakPoints, \"x\");\n    }\n\n    /**\n     * Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\n     * Creating these series manually is also possible for dynamic threshold limits.\n     *\n     * @param sourceSeries source data series from which to derive the zones\n     * @param simpleZones a collection of zones that are each defined by a start value and/or an end value. (A missing\n     start or end value indicates an infinite zone.)\n     * @param colorProvider A value provider for the colors to be used for each status\n     */\n    public getThresholdZones(sourceSeries: IDataSeries,\n                             simpleZones: ISimpleThresholdZone[],\n                             colorProvider: IValueProvider): IDataSeries[] {\n        const areaAccessors = new AreaAccessors();\n        areaAccessors.data.start = (d) => d.start;\n        areaAccessors.data.end = (d) => d.end;\n        areaAccessors.series.color = (seriesId, series) => colorProvider.get(series.value);\n\n        return simpleZones.map((z, i) => ({\n            id: sourceSeries.id + \"__\" + z.status + \"-\" + i,\n            value: z.status,\n            data: [\n                { start: z.start, end: z.end },\n            ],\n            scales: sourceSeries.scales,\n            accessors: areaAccessors,\n        }));\n    }\n\n    /**\n     * Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n     *\n     * @param zones Zones defined as data series with IAreaAccessors\n     */\n    public getThresholdLines(zones: IDataSeries[]): IChartAssistSeries[] {\n        if (-1 === zones.findIndex(z => z.entered)) {\n            return [];\n        }\n\n        // TODO: works only for static thresholds\n        const limits: Record, accessor: DataAccessor, zoneBoundary: ZoneBoundary }> = {};\n\n        function addLimitEntry(accessor: DataAccessor, zone: IDataSeries, zoneBoundary: ZoneBoundary) {\n            const value = accessor(zone.data[0], 0, zone.data, zone);\n            if (typeof value !== \"undefined\" && typeof limits[value] === \"undefined\") {\n                limits[value] = { series: zone, accessor, zoneBoundary };\n            }\n        }\n\n        for (const z of zones) {\n            if (z.accessors.data.start && z.accessors.data.end) {\n                addLimitEntry(z.accessors.data.start, z, ZoneBoundary.Start);\n                addLimitEntry(z.accessors.data.end, z, ZoneBoundary.End);\n            }\n        }\n\n        return values(limits).map((limit) => this.getThresholdLine(limit.series, limit.accessor, limit.zoneBoundary));\n    }\n\n    /**\n     * Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n     *\n     * @param zone A zone defined as a data series with IAreaAccessors\n     * @param valueAccessor Accessor for the threshold limit\n     * @param zoneBoundary The zone boundary represented by the line. Default is ZoneBoundary.Start.\n     */\n    public getThresholdLine(zone: IDataSeries,\n                            valueAccessor: DataAccessor,\n                            zoneBoundary = ZoneBoundary.Start): IChartAssistSeries {\n        const accessors = new LineAccessors();\n        accessors.data.y = valueAccessor;\n        accessors.series.color = zone.accessors.series.color;\n        const renderer = new LineRenderer({\n            interactive: false,\n            strokeWidth: 1,\n            strokeStyle: LineRenderer.getStrokeStyleDashed(1),\n            stateStyles: cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG.stateStyles),\n            ignoreForDomainCalculation: true,\n        });\n\n        return {\n            id: `${zone.id}__${zoneBoundary}__threshold-line`,\n            data: zone.data,\n            value: zone.value,\n            accessors,\n            renderer,\n            scales: zone.scales,\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates the point where the data series line will cross a threshold line using the two closest points for each\n     *\n     * @param {IPosition} dataFrom Data starting point\n     * @param {IPosition} dataTo Data ending point\n     * @param {IPosition} thresholdFrom Threshold starting point\n     * @param {IPosition} thresholdTo Threshold ending point\n     * @returns {IPosition} the position of the cross point or `null` if lines don't cross\n     */\n    public getCrossPoint(dataFrom: IPosition, dataTo: IPosition,\n                         thresholdFrom: IPosition, thresholdTo: IPosition): IPosition | undefined {\n        /* Inspired by https://stackoverflow.com/a/1968345 */\n        const dataShift: IPosition = {\n            x: dataTo.x - dataFrom.x,\n            y: dataTo.y - dataFrom.y,\n        };\n        const thresholdShift: IPosition = {\n            x: thresholdTo.x - thresholdFrom.x,\n            y: thresholdTo.y - thresholdFrom.y,\n        };\n        const s = (-dataShift.y * (dataFrom.x - thresholdFrom.x) + dataShift.x * (dataFrom.y - thresholdFrom.y))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n        const t = (thresholdShift.x * (dataFrom.y - thresholdFrom.y) - thresholdShift.y * (dataFrom.x - thresholdFrom.x))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n\n        if (!(s >= 0 && s = 0 && t [], zoneIndexes: Record, x: Numeric, y: Numeric) {\n        for (const zone of zones) {\n            if (!zoneIndexes[zone.id]) {\n                zoneIndexes[zone.id] = 0;\n            }\n\n            const zoneIndex = this.moveZoneIndex(zoneIndexes[zone.id], zone, x);\n            zoneIndexes[zone.id] = zoneIndex;\n\n            const zoneDataPoint = zone.data[zoneIndex];\n\n            const zDataAccessors = zone.accessors.data;\n            const start = zDataAccessors.start?.(zoneDataPoint, zoneIndex, zone.data, zone);\n            const end = zDataAccessors.end?.(zoneDataPoint, zoneIndex, zone.data, zone);\n\n            // TODO: this is not going to work for dynamic thresholds, so still have some work to do here\n            if ((typeof start === \"undefined\" || y >= start) &&\n                (typeof end === \"undefined\" || y , x: Numeric) {\n        while (zoneIndex [],\n                             scales: Scales,\n                             rendererConfig?: IRendererConfig): IChartAssistSeries[] {\n        const sideIndicators: IChartAssistSeries[] = [];\n        const renderer = new SideIndicatorRenderer(rendererConfig || cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG));\n        const indicatorsActive = -1 !== zones.findIndex(z => z.entered);\n        for (const z of zones) {\n            const sideIndicatorAccessors = new SideIndicatorAccessors();\n            sideIndicatorAccessors.series = {\n                start: () => z.accessors.data.start?.(z.data[0], 0, z.data, z),\n                end: () => z.accessors.data.end?.(z.data[0], 0, z.data, z),\n                activeColor: () => z.accessors.series.color?.(z.id, z),\n            };\n\n            const sideIndicator: IChartAssistSeries = {\n                id: z.id + \"__side-indicator\",\n                data: [{ active: indicatorsActive }],\n                accessors: sideIndicatorAccessors,\n                scales,\n                renderer,\n                showInLegend: false,\n            };\n\n            sideIndicators.push(sideIndicator);\n        }\n\n        return sideIndicators;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeScale.html":{"url":"classes/TimeScale.html","title":"class - TimeScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/time-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleTime\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/time-scale.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\nimport { scaleTime } from \"d3-scale\";\n\nimport { datetimeFormatter } from \"./formatters/datetime-formatter\";\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleTime](https://d3indepth.com/scales/#scaletime)\n */\nexport class TimeScale extends Scale {\n\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = datetimeFormatter;\n    }\n\n    protected createD3Scale(): AxisScale {\n        return scaleTime();\n    }\n\n    public convert(value: Date): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): Date | undefined {\n        const date = this._d3Scale.invert(coordinate);\n        const result: Date | undefined = isNaN(date.getTime()) ? undefined : date;\n        return result;\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value.getTime()));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilityService.html":{"url":"classes/UtilityService.html","title":"class - UtilityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilityService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/utility.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clampToRange\n                            \n                            \n                                    Static\n                                cssEscape\n                            \n                            \n                                    Static\n                                findNearestIndex\n                            \n                            \n                                    Static\n                                getClosestIndex\n                            \n                            \n                                    Static\n                                getScaleValues\n                            \n                            \n                                    Static\n                                getXYValues\n                            \n                            \n                                    Static\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            clampToRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clampToRange(value: number, range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:63\n                \n            \n\n\n            \n                \n                    Clamps given value to range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            cssEscape\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cssEscape(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:92\n                \n            \n\n\n            \n                \n                    CSS.escape() replacement\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            findNearestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNearestIndex(haystack: T[], needle: any, selector: (d: T,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:179\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    This method performs a binary search to find an index in the haystack that is the closest representation of given needle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    selector\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        identity\n                                    \n\n                                    \n                                        this function is used to process the haystack elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getClosestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getClosestIndex(haystack: T[], accessor: (d: T,i: number) => void, needle: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessor\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleValues(scales: IScale[], coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:224\n                \n            \n\n\n            \n                \n                    Gets the scale value based on the specified scales and raw coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getXYValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getXYValues(xScales: IScale[], yScales: IScale[], xCoordinate: number, yCoordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:204\n                \n            \n\n\n            \n                \n                    Gets the 'x' and 'y' scale values based on the specified scales and raw x-y coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    xScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    xCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            uuid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uuid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import identity from \"lodash/identity\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { IInteractionValues } from \"../plugins/types\";\n\nimport { invert } from \"./scales/helpers/invert\";\nimport { IScale } from \"./scales/types\";\n\nexport class UtilityService {\n\n    private static getValueAccessor(accessor: (d: any, i: number) => any, dataPoint: any) {\n        const value = accessor(dataPoint, 0);\n        if (typeof value === \"number\" || typeof value === \"string\") {\n            return accessor;\n        }\n        if (value.valueOf && typeof value.valueOf() === \"number\") {\n            return (d: any, i: number) => accessor(d, i).valueOf();\n        }\n\n        throw new Error(\"Value in the data series does not return numeric valueOf().\");\n    }\n\n    public static getClosestIndex(haystack: T[], accessor: (d: T, i: number) => any, needle: any): number | undefined {\n        if (haystack.length === 1) {\n            return 0;\n        } else if (haystack.length === 0) {\n            return;\n        }\n\n        const valueAccessor = UtilityService.getValueAccessor(accessor, haystack[0]);\n        if (typeof needle === \"string\") {\n            return haystack.findIndex(straw => valueAccessor(straw, 0) === needle);\n        }\n\n        let closestDataIndex = this.findNearestIndex(haystack, needle, accessor);\n\n        // Compensate for bisect\n        closestDataIndex = (closestDataIndex > 0) ? closestDataIndex - 1 : closestDataIndex;\n        // Ensure inbounds reference if right end of data\n        closestDataIndex = (closestDataIndex >= haystack.length - 1 && haystack.length !== 1)\n            ? haystack.length - 2\n            : closestDataIndex;\n        const indexIncrement = UtilityService.getCloser(\n            valueAccessor(haystack[closestDataIndex], closestDataIndex),\n            valueAccessor(haystack[closestDataIndex + 1], closestDataIndex + 1),\n            needle);\n\n        return closestDataIndex + indexIncrement;\n    }\n\n    private static getCloser(a: number, b: number, test: number): number {\n        return (Math.abs(test - a)  range[1]) {\n            return range[1];\n        }\n\n        return value;\n    }\n\n    public static uuid() {\n        let dt = new Date().getTime();\n        const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            // eslint-disable-next-line\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            // eslint-disable-next-line\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     *  CSS.escape() replacement\n     * @param value\n     * @returns {string}\n     */\n    public static cssEscape(value: any): string {\n        // TODO: remove when Edge supports CSS.escape\n        // Courtesy of Mathias Bynens: https://github.com/mathiasbynens/CSS.escape.git\n        if (arguments.length === 0) {\n            throw new TypeError(\"`cssEscape` requires an argument.\");\n        }\n        const sstring = String(value);\n        const length = sstring.length;\n        let index = -1;\n        let codeUnit;\n        let result = \"\";\n        const firstCodeUnit = sstring.charCodeAt(0);\n        while (++index = 0x0001 && codeUnit = 0x0030 && codeUnit = 0x0030 && codeUnit = 0x0080 ||\n                codeUnit === 0x002D ||\n                codeUnit === 0x005F ||\n                codeUnit >= 0x0030 && codeUnit = 0x0041 && codeUnit = 0x0061 && codeUnit (haystack: T[], needle: any, selector: (d: T, index: number) => any = identity) {\n        let low = 0, high = haystack == null ? low : haystack.length;\n\n        while (low >> 1, computed = selector(haystack[mid], mid);\n\n            if (computed !== null && (computed [], yScales: IScale[], xCoordinate: number, yCoordinate: number) {\n        const xValue = UtilityService.getScaleValues(xScales, xCoordinate);\n        const yValue = UtilityService.getScaleValues(yScales, yCoordinate);\n\n        const values: IInteractionValues = {};\n        if (!isEmpty(xValue)) {\n            values.x = xValue;\n        }\n        if (!isEmpty(yValue)) {\n            values.y = yValue;\n        }\n        return values;\n    }\n\n    /**\n     * Gets the scale value based on the specified scales and raw coordinate\n     *\n     * @param scales\n     * @param coordinate\n     */\n    public static getScaleValues(scales: IScale[], coordinate: number): Record {\n        function callbackFn(result: Record, next: IScale) {\n            const inverted = invert(next, coordinate);\n            if (isUndefined(inverted)) {\n                return result;\n            }\n\n            result[next.id] = inverted;\n            return result;\n        }\n        return scales.reduce(callbackFn, {});\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerticalBarAccessors.html":{"url":"classes/VerticalBarAccessors.html","title":"class - VerticalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerticalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/vertical-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class VerticalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessX: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n            startY: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.end(d, i, s, ds),\n        };\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYAccessors.html":{"url":"classes/XYAccessors.html","title":"class - XYAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/xy-accessors.ts:30\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/xy-accessors.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { Renderer } from \"../../core/common/renderer\";\n\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\nexport interface IXYSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\nexport interface IXYAccessors extends IAccessors {\n    data: IXYDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: IXYSeriesAccessors;\n}\n\nexport class XYAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n    public series: IXYSeriesAccessors;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYGridConfig.html":{"url":"classes/XYGridConfig.html","title":"class - XYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/xy-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GridConfig\n            \n\n            \n                Implements\n            \n            \n                            IXYGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                disableRenderAreaHeightCorrection\n                            \n                            \n                                    Public\n                                disableRenderAreaWidthCorrection\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:9\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaHeightCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:30\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disableRenderAreaWidthCorrection\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:32\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAllAround, IAxisConfig, IXYGridConfig} from \"../types\";\n\nimport { AxisConfig } from \"./axis-config\";\nimport { BorderConfig } from \"./border-config\";\nimport { GridConfig } from \"./grid-config\";\n\nexport class XYGridConfig extends GridConfig implements IXYGridConfig {\n    /** The default margin */\n    public static readonly DEFAULT_MARGIN: IAllAround = {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    };\n\n    public static readonly DEFAULT_PADDING: IAllAround = {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    };\n\n    public axis: IAllAround = {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    };\n\n    // We should avoid this kind of option in future versions of XYGrid and XYGridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    public interactionPlugins = true;\n\n    constructor() {\n        super();\n\n        this.dimension.padding = Object.assign({}, XYGridConfig.DEFAULT_PADDING);\n        this.dimension.margin = Object.assign({}, XYGridConfig.DEFAULT_MARGIN);\n\n        this.borders.bottom = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left.visible = false; // TODO: figure out if this is the valid default\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 0;\n        this.axis.left.padding = 10;\n\n        this.axis.right.fit = true;\n        this.axis.right.tickSize = 0;\n        this.axis.right.padding = 10;\n\n        this.axis.bottom.tickLabel.horizontalPadding = 5;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYRenderer.html":{"url":"classes/XYRenderer.html","title":"class - XYRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/xy-renderer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:39\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:94\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:44\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:52\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:169\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:73\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:62\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:152\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:128\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:189\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:84\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:116\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:107\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IPosition, IRendererEventPayload } from \"../core/common/types\";\nimport { IRenderSeries } from \"./types\";\nimport { Subject } from \"rxjs\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { DATA_POINT_INTERACTION_RESET } from \"../constants\";\nimport { UtilityService } from \"../core/common/utility.service\";\n\nexport class XYRenderer extends Renderer {\n    // This is empty to allow this renderer to be used for series that represent metadata that may be shown in the legend but not visualized on the chart.\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {}\n\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined {\n        if (index = dataSeries.data.length) {\n            return undefined;\n        }\n        const point = dataSeries.data[index];\n\n        if (!dataSeries.accessors.data?.x || !dataSeries.accessors.data?.y) {\n            throw new Error(\"Can't get dataPointPosition\");\n        }\n        return {\n            x: scales.x.convert(dataSeries.accessors.data.x(point, index, dataSeries.data, dataSeries)),\n            y: scales.y.convert(dataSeries.accessors.data.y(point, index, dataSeries.data, dataSeries)),\n        };\n    }\n\n    public getDataPointIndex(series: IDataSeries, values: { [p: string]: any }, scales: Scales): number {\n        if (!this.config.interactive || isUndefined(values.x)) {\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        const index = UtilityService.getClosestIndex(series.data, (d, i) => series.accessors.data?.x?.(d, i, series.data, series), values.x);\n\n        if (isUndefined(index)) {\n            throw new Error(\"Unable to get data point index\");\n        }\n\n        return index;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZoneCross.html":{"url":"interfaces/ZoneCross.html","title":"interface - ZoneCross","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZoneCross\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZoomPlugin.html":{"url":"classes/ZoomPlugin.html","title":"class - ZoomPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZoomPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IZoomPluginConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/zoom-plugin.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IZoomPluginConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        enableExternalEvents: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"zoom-brush\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        let widthCorrection = 0;\n        const gridConfig = this.grid.config();\n        if (!gridConfig.disableRenderAreaWidthCorrection && selection[1] === gridConfig.dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION) {\n            // Width correction to accommodate similar adjustment in grid. This ensures that the right-most column of pixels on the chart is selectable.\n            widthCorrection = Grid.RENDER_AREA_WIDTH_CORRECTION;\n        }\n\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            resize-observer-polyfill : ^1.5.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @nova-ui/bits : ~11.7.0-0\n        \n            @types/d3 : ^5.0.0\n        \n            @types/d3-selection-multi : ^1.0.0\n        \n            d3 : ^5.0.0\n        \n            d3-color : 1.3.0\n        \n            d3-selection-multi : ^1.0.0\n        \n            d3-time-format : 2.1.3\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChartAssistEventType   (src/.../types.ts)\n                        \n                        \n                            CssFilterId   (src/.../types.ts)\n                        \n                        \n                            InteractionType   (src/.../types.ts)\n                        \n                        \n                            LegendOrientation   (src/.../types.ts)\n                        \n                        \n                            RenderLayerName   (src/.../types.ts)\n                        \n                        \n                            RenderState   (src/.../types.ts)\n                        \n                        \n                            StandardGaugeColor   (src/.../constants.ts)\n                        \n                        \n                            StandardGaugeThresholdId   (src/.../constants.ts)\n                        \n                        \n                            StandardGaugeThresholdMarkerRadius   (src/.../constants.ts)\n                        \n                        \n                            StandardLinearGaugeThickness   (src/.../constants.ts)\n                        \n                        \n                            ZoneBoundary   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/chart-assists/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ChartAssistEventType\n                    \n                \n                    \n                        \n                            Event types that can be emitted from a chart assist \n\n                        \n                    \n                        \n                            \n                                 ToggleSeries\n                            \n                        \n                        \n                            \n                                Value : ToggleSeries\n                            \n                        \n                        \n                            \n                                 ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                Value : ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                 EmphasizeSeries\n                            \n                        \n                        \n                            \n                                Value : EmphasizeSeries\n                            \n                        \n            \n        \n\n    src/core/types.ts\n    \n        \n            \n                \n                    \n                        \n                        CssFilterId\n                    \n                \n                    \n                        \n                            Common CSS filter IDs \n\n                        \n                    \n                        \n                            \n                                 Grayscale\n                            \n                        \n                        \n                            \n                                Value : grayscale\n                            \n                        \n            \n        \n\n    src/core/common/types.ts\n    \n        \n            \n                \n                    \n                        \n                        InteractionType\n                    \n                \n                    \n                        \n                            Mouse interaction types \n\n                        \n                    \n                        \n                            \n                                 Click\n                            \n                        \n                        \n                            \n                                Value : click\n                            \n                        \n                        \n                            \n                                 Hover\n                            \n                        \n                        \n                            \n                                Value : hover\n                            \n                        \n                        \n                            \n                                 MouseDown\n                            \n                        \n                        \n                            \n                                Value : mousedown\n                            \n                        \n                        \n                            \n                                 MouseEnter\n                            \n                        \n                        \n                            \n                                Value : mouseenter\n                            \n                        \n                        \n                            \n                                 MouseLeave\n                            \n                        \n                        \n                            \n                                Value : mouseleave\n                            \n                        \n                        \n                            \n                                 MouseMove\n                            \n                        \n                        \n                            \n                                Value : mousemove\n                            \n                        \n                        \n                            \n                                 MouseUp\n                            \n                        \n                        \n                            \n                                Value : mouseup\n                            \n                        \n            \n        \n\n    src/legend/types.ts\n    \n        \n            \n                \n                    \n                        \n                        LegendOrientation\n                    \n                \n                        \n                            \n                                 vertical\n                            \n                        \n                        \n                            \n                                Value : vertical\n                            \n                        \n                        \n                            \n                                 horizontal\n                            \n                        \n                        \n                            \n                                Value : horizontal\n                            \n                        \n            \n        \n\n    src/renderers/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RenderLayerName\n                    \n                \n                        \n                            \n                                 background\n                            \n                        \n                        \n                            \n                                Value : background\n                            \n                        \n                        \n                            \n                                 data\n                            \n                        \n                        \n                            \n                                Value : data\n                            \n                        \n                        \n                            \n                                 unclippedData\n                            \n                        \n                        \n                            \n                                Value : unclipped-data\n                            \n                        \n                        \n                            \n                                 foreground\n                            \n                        \n                        \n                            \n                                Value : foreground\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RenderState\n                    \n                \n                        \n                            \n                                 hidden\n                            \n                        \n                        \n                            \n                                Value : hidden\n                            \n                        \n                        \n                            \n                                 deemphasized\n                            \n                        \n                        \n                            \n                                Value : deemphasized\n                            \n                        \n                        \n                            \n                                 emphasized\n                            \n                        \n                        \n                            \n                                Value : emphasized\n                            \n                        \n                        \n                            \n                                 default\n                            \n                        \n                        \n                            \n                                Value : default\n                            \n                        \n            \n        \n\n    src/gauge/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        StandardGaugeColor\n                    \n                \n                    \n                        \n                            Standard gauge colors\n\n                        \n                    \n                        \n                            \n                                 Remainder\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-unknown-bg-hover)\n                            \n                        \n                        \n                            \n                                 Ok\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-chart-one)\n                            \n                        \n                        \n                            \n                                 Warning\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-warning)\n                            \n                        \n                        \n                            \n                                 Critical\n                            \n                        \n                        \n                            \n                                Value : var(--nui-color-semantic-critical)\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardGaugeThresholdId\n                    \n                \n                    \n                        \n                            Standard values for gauge threshold marker radii\n\n                        \n                    \n                        \n                            \n                                 Warning\n                            \n                        \n                        \n                            \n                                Value : warning\n                            \n                        \n                        \n                            \n                                 Critical\n                            \n                        \n                        \n                            \n                                Value : critical\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardGaugeThresholdMarkerRadius\n                    \n                \n                    \n                        \n                            Standard values for gauge threshold marker radii\n\n                        \n                    \n                        \n                            \n                                 Small\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 Large\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardLinearGaugeThickness\n                    \n                \n                    \n                        \n                            Standard thicknesses for the linear gauge\n\n                        \n                    \n                        \n                            \n                                 Medium\n                            \n                        \n                        \n                            \n                                Value : 10\n                            \n                        \n                        \n                            \n                                 Large\n                            \n                        \n                        \n                            \n                                Value : 15\n                            \n                        \n            \n        \n\n    src/thresholds/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ZoneBoundary\n                    \n                \n                    \n                        \n                            Used for specifying the start or end boundary of a zone\n\n                        \n                    \n                        \n                            \n                                 Start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 End\n                            \n                        \n                        \n                            \n                                Value : end\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCharts Overview\nNova Charts is a library created to provide potential consumers with solutions for various data visualizations that conform with the Nova Design Language. It's designed to solve common patterns identified by UX designers, but also be very flexible so that pieces of visualizations can be overridden or entirely new visualizations can be customized quickly. As with anything, the more customizations you wish to have, the more work and maintenance you will absorb within your own app's code.\nGetting Started\nGetting started with charts is quite simple:\n\nInclude charts in your package.json file\n \"devDependencies\": {\n     ...\n     \"@nova-ui/charts\": >>last release version\n\n\nAdd a reference to charts styles in your angular.json file. Without this step, the charts will render, but will look and act in unpredictable ways.\n \"projects\": {\n     \"your-project\": {\n         ...\n         \"architect\": {\n             ...\n             \"styles\": [\n                 \"src/styles.less\",\n                 \"./node_modules/@nova-ui/bits/bundles/css/styles.css\",\n                 \"./node_modules/@nova-ui/charts/bundles/css/styles.css\"\n              ],\n\n\nImport NuiChartsModule\n import { NuiChartsModule } from \"@nova-ui/charts\";\n\n @NgModule({\n     declarations: [ ... ],\n     imports: [ NuiChartsModule ],\n     exports: [ ... ],\n     providers: [ ... ]\n })\nCopy/Paste any of our examples (see TOC below) to create your own component, add it to your view and then play around with the options.\n\n\nTOC\n\nLayout\nChart Types\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nPie and Donut\nSpark\n\n\nPlugins\nTooltips\nPopovers\n\n\nThresholds\nTimeframe Selection\nAdvanced Usage\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright 2020 SolarWinds Worldwide, LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NuiChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    69 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    96 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BorderKey   (src/.../grid.ts)\n                        \n                        \n                            D3Selection   (src/.../types.ts)\n                        \n                        \n                            DataAccessor   (src/.../types.ts)\n                        \n                        \n                            DomainCalculator   (src/.../types.ts)\n                        \n                        \n                            Formatter   (src/.../types.ts)\n                        \n                        \n                            IAxesStyleChangeEventPayload   (src/.../types.ts)\n                        \n                        \n                            Scales   (src/.../types.ts)\n                        \n                        \n                            SelectedDatPointIdxFn   (src/.../bar-highlight-strategy.ts)\n                        \n                        \n                            SeriesAccessor   (src/.../types.ts)\n                        \n                        \n                            TextOverflowHandler   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/grid/grid.ts\n    \n    \n        \n            \n                \n                    \n                    BorderKey\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/common/types.ts\n    \n    \n        \n            \n                \n                    \n                    D3Selection\n                \n            \n            \n                \n                    Short-form alias for the most commonly used generic D3 Selection type\n\n                \n            \n            \n                \n                        Selection\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataAccessor\n                \n            \n            \n                \n                    Signature for data accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IAxesStyleChangeEventPayload\n                \n            \n            \n                \n                    Payload for axes style change when emphasizing series on grid\n\n                \n            \n            \n                \n                        Record>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SeriesAccessor\n                \n            \n            \n                \n                    Signature for series accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/common/scales/types.ts\n    \n    \n        \n            \n                \n                    \n                    DomainCalculator\n                \n            \n            \n                \n                    Signature for domain calculator \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Formatter\n                \n            \n            \n                \n                    Signature for label formatters \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scales\n                \n            \n            \n                \n                    Dictionary of scales \n\n                \n            \n            \n                \n                            Record>\n\n                \n            \n        \n    \n    src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SelectedDatPointIdxFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/grid/types.ts\n    \n    \n        \n            \n                \n                    \n                    TextOverflowHandler\n                \n            \n            \n                \n                    Type for tick overflow handler \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AXES_STYLE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            BAND_CENTER   (src/.../constants.ts)\n                        \n                        \n                            borderMidpoint   (src/.../grid.ts)\n                        \n                        \n                            CHART_MARKERS   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S_EXTENDED   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS1   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS2   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS3   (src/.../palettes.ts)\n                        \n                        \n                            CHART_VIEW_STATUS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            CONNECTION_POINTS   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            datetimeFormatter   (src/.../datetime-formatter.ts)\n                        \n                        \n                            DEFAULT_MARKER_INTERACTION_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_RADIAL_RENDERER_CONFIG   (src/.../radial-renderer.ts)\n                        \n                        \n                            DESTROY_EVENT   (src/.../constants.ts)\n                        \n                        \n                            EMPTY_CONTINUOUS_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            emptyShapes   (src/.../palettes.ts)\n                        \n                        \n                            formatSecond   (src/.../datetime-formatter.ts)\n                        \n                        \n                            GAUGE_QUANTITY_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            GAUGE_REMAINDER_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            GAUGE_THRESHOLD_MARKERS_SERIES_ID   (src/.../constants.ts)\n                        \n                        \n                            getAutomaticDomain   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithIncludedInterval   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithTicks   (src/.../automatic-domain.ts)\n                        \n                        \n                            GRAYSCALE_COLOR_MATRIX   (src/.../types.ts)\n                        \n                        \n                            GRAYSCALE_FILTER   (src/.../types.ts)\n                        \n                        \n                            HIGHLIGHT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            HIGHLIGHT_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            IGNORE_INTERACTION_CLASS   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_COORDINATES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINTS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            intlFormat   (src/.../datetime-formatter.ts)\n                        \n                        \n                            MOUSE_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            NORMALIZED_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            OPPOSITE   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            REFRESH_EVENT   (src/.../constants.ts)\n                        \n                        \n                            regularShapes   (src/.../palettes.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            SELECT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SERIES_STATE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SET_DOMAIN_EVENT   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            TOOLTIP_POSITION_OFFSET   (src/.../chart-tooltips-plugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AXES_STYLE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"axes_style_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_VIEW_STATUS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"chart_view_status\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DESTROY_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"destroy\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IGNORE_INTERACTION_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ignore-interaction\"\n                        \n                    \n\n                \n                    \n                        Use this class to prevent DOM elements from triggering mouse-interactive-area events \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_COORDINATES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_coordinates\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINTS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_points\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"mouse_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REFRESH_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"refresh\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SELECT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"select_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERIES_STATE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"series_state_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SET_DOMAIN_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"set_domain\"\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BAND_CENTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n                \n                    \n                        The center position within a band on a band scale \n\n                    \n                \n\n            \n        \n\n    src/core/grid/grid.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            borderMidpoint\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n\n            \n        \n\n    src/core/common/palette/palettes.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_MARKERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SvgMarker[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...regularShapes\n        .map(s => ``),\n    ...emptyShapes\n        .map((s, i) =>\n            `\n            `\n        ),\n].map(s => new SvgMarker(s))\n                        \n                    \n\n                \n                    \n                        Default chart marker set \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-info)\",\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S_EXTENDED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-down-bg)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-critical-bg)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-warning-bg)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-unknown-bg)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-ok-bg)\",\n    \"var(--nui-color-semantic-info)\",\n    \"var(--nui-color-semantic-info-bg)\",\n]\n                        \n                    \n\n                \n                    \n                        Extended status color sequence for charts\nIt will substitute the default one above in v.12\nhttps://jira.solarwinds.com/browse/NUI-5367\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-ten)\",\n]\n                        \n                    \n\n                \n                    \n                        Default single-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n]\n                        \n                    \n\n                \n                    \n                        Default two-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-one-dark)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-two-dark)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-three-dark)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-four-dark)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-five-dark)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-six-dark)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-seven-dark)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-eight-dark)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-nine-dark)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n    \"var(--nui-color-chart-ten-dark)\",\n]\n                        \n                    \n\n                \n                    \n                        Default three-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 2c1.105 0 2-.895 2-2 0-1.105-.895-2-2-2-1.105 0-2 .895-2 2 0 1.105.895 2 2 2zm0 2c-2.209 0-4-1.791-4-4 0-2.209 1.791-4 4-4 2.209 0 4 1.791 4 4 0 2.209-1.791 4-4 4z\", // circle empty\n    \"m-2-2 0 4 4 0 0-4-4 0zm-2-2 8 0 0 8-8 0 0-8z\", // square empty\n    \"m0-4-4 8 8.001 0-4.001-8zm0 3.354 1.573 3.146-3.145 0 1.572-3.146z\", // triangle up empty\n    \"m0-2.121-2.121 2.121 2.121 2.121 2.121-2.121-2.121-2.121zm0-2.828 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond empty\n    \"m0 4-4-8 8.001 0-4.001 8zm0-3.354 1.573-3.146-3.145 0 1.572 3.146z\", // triangle down empty\n    \"m0-1.951-2.237 1.626.855 2.63 2.766 0 .855-2.63-2.237-1.626zm0-1.854 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703 4.001-2.907z\", // pentagon empty\n]\n                        \n                    \n\n                \n                    \n                        Standard open shapes for chart markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            regularShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 0m-4 0a4 4 0 1 0 8 0 4 4 0 1 0-8 0z\", // circle\n    \"m-4,-4l8,0l0,8l-8,0l0,-8z\", // square\n    \"m0-4 4 8-8 0z\", // triangle up\n    \"m0-4.95 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond\n    \"m0 4-4-8 8 0z\", // triangle down\n    \"m0-3.805 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703z\", // pentagon\n]\n                        \n                    \n\n                \n                    \n                        Standard shapes for chart markers \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/radial-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECTION_POINTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ]\n                        \n                    \n\n                \n                    \n                        The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\non the source element for the tooltip position starting with EAST and going clockwise)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OPPOSITE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n}\n                        \n                    \n\n                \n                    \n                        This conversion map is used to calculate the opposite connection points for the tooltip element \n\n                    \n                \n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context(\"./\", true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/formatters/datetime-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            datetimeFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Formatter\n\n                        \n                    \n                    \n                        \n                            Default value : (date: Date): string =>\n    (timeMinute(date) \n                        \n                    \n\n                \n                    \n                        Formatter for dates\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formatSecond\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (d: Date) => intlFormat(d, {hour: \"numeric\", minute: \"2-digit\", second: \"2-digit\"})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intlFormat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (date: Date, options: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(moment.locale(), options).format(date)\n                        \n                    \n\n\n            \n        \n\n    src/renderers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MARKER_INTERACTION_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IMarkerInteractionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    enabled: false,\n    clickable: false,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for marker interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for the thresholds on a chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0.3,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for a thresholds summary chart \n\n                    \n                \n\n            \n        \n\n    src/renderers/radial/radial-renderer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RADIAL_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    annularWidth: 20,\n    annularPadding: 5,\n    maxThickness: 30,\n    annularGrowth: 0.15,\n    cursor: \"default\",\n    enableSeriesHighlighting: true,\n    enableDataPointHighlighting: true,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for Radial Renderer\n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMPTY_CONTINUOUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 0]\n                        \n                    \n\n                \n                    \n                        Domain for series with empty or null data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NORMALIZED_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 1]\n                        \n                    \n\n                \n                    \n                        A reasonable non-data-driven domain for charts  \n\n                    \n                \n\n            \n        \n\n    src/gauge/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_QUANTITY_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"quantity\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_REMAINDER_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"remainder\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GAUGE_THRESHOLD_MARKERS_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"threshold-markers\"\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/domain-calculation/automatic-domain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomain\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n    const fixedDomains = getFixedDomains(chartSeriesSet, scaleKey);\n\n    const domains: any[][] = chartSeriesSet.map(cs => {\n        // find fixed, continuous scales that are referenced by this series\n        const filterScales = Object.keys(fixedDomains).reduce((result, next: string) => {\n            const seriesScale = cs.scales[next];\n            if (seriesScale && seriesScale.isContinuous() && indexOf(fixedDomains[next], seriesScale) !== -1) {\n                result[next] = seriesScale;\n            }\n            return result;\n        }, >>{});\n\n        return cs.renderer.getDomainOfFilteredData(cs, filterScales, scaleKey, cs.scales[scaleKey]);\n    });\n\n    return mergeDomains(domains, scale);\n}\n                        \n                    \n\n                \n                    \n                        Returns automatically calculated domain for given scaleKey based on given set of chart series. It considers scales with fixed domains for limiting\nconsidered data set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithIncludedInterval\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (interval: [number, number]): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => {\n        const automaticDomain = getAutomaticDomain(chartSeriesSet, scaleId, scale);\n\n        return [Math.min(automaticDomain[0], interval[0]), Math.max(automaticDomain[1], interval[1])];\n    }\n                        \n                    \n\n                \n                    \n                        Works like getAutomaticDomain, but also includes provided interval in the calculated result\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (config: IAxisConfig, axisGenerator: any): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n        const mergedDomains = getAutomaticDomain(chartSeriesSet, scaleKey, scale);\n        const clonedScale = cloneDeep(scale);\n        domain(clonedScale, mergedDomains);\n        const tickAxis: any = axisGenerator(clonedScale.d3Scale);\n        const ticks = tickAxis.scale().ticks(config.approximateTicks);\n        if (ticks.length  mergedDomains[0]) {\n            mergedDomains[0] = ticks[0] - ticksAverage;\n        }\n        if (ticks[ticks.length - 1] \n                        \n                    \n\n\n            \n        \n\n    src/core/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_COLOR_MATRIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0      0      0      1 0\n`\n                        \n                    \n\n                \n                    \n                        Transformation matrix value for applying a 100% grayscale appearance to an svg element \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_FILTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `url(\"#${CssFilterId.Grayscale}\")`\n                        \n                    \n\n                \n                    \n                        CSS grayscale filter rule value \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/chart-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TOOLTIP_POSITION_OFFSET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n                \n                    \n                        How far away from the data point position will the tooltip be positioned \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/layout.html":{"url":"additional-documentation/layout.html","title":"additional-page - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types.html":{"url":"additional-documentation/chart-types.html","title":"additional-page - Chart Types","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nChart Types\n\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nArea\nPie and Donut\nSpark\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/line.html":{"url":"additional-documentation/chart-types/line.html","title":"additional-page - Line","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar.html":{"url":"additional-documentation/chart-types/bar.html","title":"additional-page - Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/bucketed-bar.html":{"url":"additional-documentation/chart-types/bar/bucketed-bar.html","title":"additional-page - Bucketed Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/status.html":{"url":"additional-documentation/chart-types/bar/status.html","title":"additional-page - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/waterfall.html":{"url":"additional-documentation/chart-types/bar/waterfall.html","title":"additional-page - Waterfall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/area.html":{"url":"additional-documentation/chart-types/area.html","title":"additional-page - Area","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/pie-and-donut.html":{"url":"additional-documentation/chart-types/pie-and-donut.html","title":"additional-page - Pie and Donut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/spark.html":{"url":"additional-documentation/chart-types/spark.html","title":"additional-page - Spark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins.html":{"url":"additional-documentation/plugins.html","title":"additional-page - Plugins","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nPlugins\n\nTooltips\nPopovers\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/tooltips.html":{"url":"additional-documentation/plugins/tooltips.html","title":"additional-page - Tooltips","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/popovers.html":{"url":"additional-documentation/plugins/popovers.html","title":"additional-page - Popovers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/thresholds.html":{"url":"additional-documentation/thresholds.html","title":"additional-page - Thresholds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/timeframe-selection.html":{"url":"additional-documentation/timeframe-selection.html","title":"additional-page - Timeframe Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage.html":{"url":"additional-documentation/advanced-usage.html","title":"additional-page - Advanced Usage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nAdvanced Usage\n\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/chart.html":{"url":"additional-documentation/advanced-usage/chart.html","title":"additional-page - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/legend.html":{"url":"additional-documentation/advanced-usage/legend.html","title":"additional-page - Legend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure.html":{"url":"additional-documentation/advanced-usage/input-structure.html","title":"additional-page - Input Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/data.html":{"url":"additional-documentation/advanced-usage/input-structure/data.html","title":"additional-page - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/colors.html":{"url":"additional-documentation/advanced-usage/input-structure/colors.html","title":"additional-page - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/markers.html":{"url":"additional-documentation/advanced-usage/input-structure/markers.html","title":"additional-page - Markers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/events.html":{"url":"additional-documentation/advanced-usage/events.html","title":"additional-page - Events","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/grid.html":{"url":"additional-documentation/advanced-usage/grid.html","title":"additional-page - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales.html":{"url":"additional-documentation/advanced-usage/scales.html","title":"additional-page - Scales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/domains.html":{"url":"additional-documentation/advanced-usage/scales/domains.html","title":"additional-page - Domains","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/formatters.html":{"url":"additional-documentation/advanced-usage/scales/formatters.html","title":"additional-page - Formatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
