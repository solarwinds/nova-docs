(self.webpackChunk_nova_ui_charts=self.webpackChunk_nova_ui_charts||[]).push([[3193],{10928:function(t,e,n){var a={"./data-point-selection-prototype.component.html":40334,"./data-point-selection-prototype.component.less":79334,"./data-point-selection-prototype.component.ts":38534,"./data-point-selection-prototype.module.ts":45937,"components/demo/development/data-point-selection/data-point-selection-prototype.component.html":40334,"components/demo/development/data-point-selection/data-point-selection-prototype.component.less":79334,"components/demo/development/data-point-selection/data-point-selection-prototype.component.ts":38534,"components/demo/development/data-point-selection/data-point-selection-prototype.module.ts":45937};function s(t){var e=i(t);return n(e)}function i(t){if(!n.o(a,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return a[t]}s.keys=function(){return Object.keys(a)},s.resolve=i,t.exports=s,s.id=10928},13193:function(t,e,n){"use strict";n.r(e),n.d(e,{DataPointSelectionPrototypeModule:function(){return C}});var a=n(66266),s=n(28425),i=n(4813),o=n(58490),r=n(12232),d=n.n(r),c=n(29569),l=n.n(c),h=n(16738),u=n.n(h),m=n(33018),p=n(13458),g=n(9647);const b="YYYY-MM-DDTHH:mm:ssZ",S="2016-12-25T15:05:00Z";var f=(()=>{return(t=f||(f={})).Up="up",t.Warning="warning",t.Critical="critical",f;var t})();const T=[{path:"",component:(()=>{class t{constructor(){this.xScaleId="xScale",this.selectedDataPoints={},this.labelPlugin=new i.$fK,this.colorProvider={get:t=>"selection-box"===t?"transparent":i.cpE[0],reset:()=>{}},this.handleDataPointsInteraction=t=>{const e=t.data;e.interactionType===i.s_5.Click&&(this.selectedDataPoints=e.dataPoints,this.renderer.config.stateStyles&&(this.renderer.config.stateStyles.deemphasized={opacity:.3}),this.redrawCharts(),this.selectedLabelPosition=this.calculateInteractionLabelPosition(e),this.barChart.getEventBus().getStream(i.hkV).next({data:{interactionType:i.s_5.MouseMove,values:this.selectedLabelPosition}}))},this.handleInteractionLabelUpdates=t=>{const e=t.data;e.interactionType===i.s_5.MouseMove&&d()(e.values)&&this.selectedLabelPosition?(this.labelPlugin.areLabelUpdatesEnabled=!0,this.barChart.getEventBus().getStream(i.hkV).next({data:{interactionType:i.s_5.MouseMove,values:this.selectedLabelPosition},broadcast:!0}),this.labelPlugin.areLabelUpdatesEnabled=!1):e.interactionType===i.s_5.MouseMove&&!d()(e.values)&&(this.labelPlugin.areLabelUpdatesEnabled=!0)},this.handleMouseActive=t=>{this.renderer.config.stateStyles&&(d()(this.selectedDataPoints)||t.data?t.data&&(this.renderer.config.stateStyles.deemphasized={opacity:.1}):this.renderer.config.stateStyles.deemphasized={opacity:.3}),this.barChart.getDataManager().chartSeriesSet.length>0&&this.statusChart.getDataManager().chartSeriesSet.length>0&&this.redrawCharts()},this.selectedDataPointIdxFn=t=>{var e,n,a;return null!==(a=null===(n=null===(e=this.selectedDataPoints)||void 0===e?void 0:e[t])||void 0===n?void 0:n.index)&&void 0!==a?a:i.hZk},this.cssClassAccessor=(t,e,n,a)=>{var s;return d()(this.selectedDataPoints)||"selection-box"!==a.id||(null===(s=this.selectedDataPoints[a.id])||void 0===s?void 0:s.index)!==e?"":"selected"}}ngOnInit(){this.setUpBarChart(),this.setUpStatusChart()}onReset(){this.selectedDataPoints={},this.selectedLabelPosition=void 0,this.redrawCharts(),this.labelPlugin.areLabelUpdatesEnabled=!0,this.barChart.getEventBus().getStream(i.hkV).next({data:{interactionType:i.s_5.MouseMove,values:{}}})}setUpBarChart(){this.barChart=new i.kL2(this.configureBarGrid()),this.barChart.addPlugin(new i.koE),this.barChart.addPlugin(this.labelPlugin),this.barChart.getEventBus().getStream(i.C1c).subscribe(this.handleDataPointsInteraction),this.barChart.getEventBus().getStream(i.hkV).subscribe(this.handleInteractionLabelUpdates),this.barChart.getEventBus().getStream(i.CCM).subscribe(this.handleMouseActive);const t=(0,i.Q6e)({},this.colorProvider);t.data.cssClass=this.cssClassAccessor;const e=(0,i.CQI)();e.x=new i.lTH((0,h.duration)(5,"minutes"),this.xScaleId),t.data.thickness=this.barThickness(e);const n={highlightStrategy:new i.Pkp("x",1,this.selectedDataPointIdxFn),cursor:"pointer"};this.renderer=new i.Z7w(n),this.barChart.update([{id:"series-1",data:[{category:u()(S,b).toDate(),value:66},{category:u()(S,b).add(5,"minutes").toDate(),value:14},{category:u()(S,b).add(10,"minutes").toDate(),value:25},{category:u()(S,b).add(15,"minutes").toDate(),value:55},{category:u()(S,b).add(20,"minutes").toDate(),value:33},{category:u()(S,b).add(25,"minutes").toDate(),value:5}]},{id:"selection-box",data:[{category:u()(S,b).toDate(),value:100},{category:u()(S,b).add(5,"minutes").toDate(),value:100},{category:u()(S,b).add(10,"minutes").toDate(),value:100},{category:u()(S,b).add(15,"minutes").toDate(),value:100},{category:u()(S,b).add(20,"minutes").toDate(),value:100},{category:u()(S,b).add(25,"minutes").toDate(),value:100}]}].map(n=>Object.assign(Object.assign({},n),{accessors:t,renderer:this.renderer,scales:e})))}setUpStatusChart(){this.statusChart=new i.kL2(this.configureStatusGrid()),this.statusChart.addPlugin(new i.koE);const t=new i.jS7;t.fixDomain(i.s1E.STATUS_DOMAIN);const e=new i.lTH((0,h.duration)(5,"minutes"),this.xScaleId);e.fixDomain([u()(S,b).toDate(),u()(S,b).add(25,"minutes").toDate()]);const n={x:e,y:t},a=(0,i.s_I)(new i.oki({[f.Up]:i.lQw[4],[f.Warning]:i.lQw[2],[f.Critical]:i.lQw[1]}));a.data.thickness=t=>t.status===f.Up?i.Z7w.THIN:i.Z7w.THICK,a.data.cssClass=this.cssClassAccessor,this.statusChart.update([{id:"series-1",name:"Series 1",data:[{status:f.Up,start:u()(S,b).toDate(),end:u()(S,b).toDate()},{status:f.Warning,start:u()(S,b).add(5,"minutes").toDate(),end:u()(S,b).add(5,"minutes").toDate()},{status:f.Critical,start:u()(S,b).add(10,"minutes").toDate(),end:u()(S,b).add(10,"minutes").toDate()},{status:f.Up,start:u()(S,b).add(15,"minutes").toDate(),end:u()(S,b).add(15,"minutes").toDate()},{status:f.Critical,start:u()(S,b).add(20,"minutes").toDate(),end:u()(S,b).add(20,"minutes").toDate()},{status:f.Up,start:u()(S,b).add(25,"minutes").toDate(),end:u()(S,b).add(25,"minutes").toDate()}]}].map(t=>Object.assign(Object.assign({},t),{accessors:a,renderer:this.renderer,scales:n})))}configureBarGrid(){const t=new i.TVc;return t.axis.left.visible=!1,t.axis.left.gridTicks=!1,t.axis.bottom.fit=!1,t.borders.top=new i.gyj,t.cursor="pointer",t.dimension.padding.top=0,t.dimension.margin.right=t.dimension.margin.left,new i.Be5(t)}configureStatusGrid(){const t=new i.mEc;return t.axis.bottom.visible=!1,t.cursor="pointer",t.dimension.margin.bottom=0,t.dimension.margin.right=t.dimension.margin.left,t.borders.bottom.visible=!1,new i.Be5(t)}redrawCharts(){this.barChart.update(this.barChart.getDataManager().chartSeriesSet),this.statusChart.update(this.statusChart.getDataManager().chartSeriesSet)}barThickness(t){return(e,n,a,s)=>{var o,r,d,c;let l;const h=(0,i.OQi)(t.x,null===(r=null===(o=s.accessors.data)||void 0===o?void 0:o.startX)||void 0===r?void 0:r.call(o,e,n,s.data,s),0),u=(0,i.OQi)(t.x,null===(c=null===(d=s.accessors.data)||void 0===d?void 0:d.endX)||void 0===c?void 0:c.call(d,e,n,s.data,s),1);return l=Math.abs(h-u),l-="selection-box"===s.id?2:6,l=Math.max(l,i.Z7w.MIN_BAR_THICKNESS),l}}calculateInteractionLabelPosition(t){const e=t.dataPoints[Object.keys(t.dataPoints)[0]],n=[e.dataSeries.scales.x],a=[e.dataSeries.scales.y];if(!e.position||l()(e.position.width)||l()(e.position.height))throw new Error("Can't calculate x and y values");return i.tIi.getXYValues(n,a,e.position.x+e.position.width/2,e.position.y+e.position.height/2)}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=m.Xpm({type:t,selectors:[["ng-component"]],decls:13,vars:3,consts:[["filenamePrefix","data-point-selection-prototype","exampleTitle","Data Point Selection Prototype"],["type","critical",3,"allowDismiss"],["nuiChartCollectionId","collection",1,"d-flex","chart",3,"chart"],["type","button","nui-button","",3,"click"]],template:function(t,e){1&t&&(m.TgZ(0,"nui-example-wrapper",0),m.TgZ(1,"nui-message",1),m.TgZ(2,"strong"),m._uU(3,"Note:"),m.qZA(),m._uU(4," This is only a prototype, so its implementation is unpolished. Please use discretion when copying the code as there are likely solutions more concise and/or elegant than those presented here. "),m.TgZ(5,"strong"),m._uU(6,"For assistance, please contact Blake Simmon or Lukas Holcik."),m.qZA(),m.qZA(),m._UZ(7,"hr"),m._UZ(8,"nui-chart",2),m._UZ(9,"nui-chart",2),m._UZ(10,"hr"),m.TgZ(11,"button",3),m.NdJ("click",function(){return e.onReset()}),m._uU(12,"Reset"),m.qZA(),m.qZA()),2&t&&(m.xp6(1),m.Q6J("allowDismiss",!1),m.xp6(7),m.Q6J("chart",e.statusChart),m.xp6(1),m.Q6J("chart",e.barChart))},directives:[s.hD2,s.qqZ,p.x,g.V,s.r0F],styles:[".selected{stroke:#52d9e3!important}.chart{max-width:800px}\n"],encapsulation:2}),t})(),data:{srlc:{hideIndicator:!0}}}];let C=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=m.oAB({type:t}),t.\u0275inj=m.cJS({providers:[{provide:s.V3$,useFactory:()=>n(10928)}],imports:[[o.l,s.Az_,s.vvu,s.gkT,i.$y4,s.Ts3,a.Bz.forChild(T)]]}),t})()},40334:function(t,e,n){"use strict";n.r(e),e.default='<nui-example-wrapper\n    filenamePrefix="data-point-selection-prototype"\n    exampleTitle="Data Point Selection Prototype"\n>\n    <nui-message type="critical" [allowDismiss]="false">\n        <strong>Note:</strong> This is only a prototype, so its implementation\n        is unpolished. Please use discretion when copying the code as there are\n        likely solutions more concise and/or elegant than those presented here.\n        <strong\n            >For assistance, please contact Blake Simmon or Lukas\n            Holcik.</strong\n        >\n    </nui-message>\n    <hr />\n    <nui-chart\n        class="d-flex chart"\n        [chart]="statusChart"\n        nuiChartCollectionId="collection"\n    ></nui-chart>\n    <nui-chart\n        class="d-flex chart"\n        [chart]="barChart"\n        nuiChartCollectionId="collection"\n    ></nui-chart>\n    <hr />\n    <button type="button" nui-button (click)="onReset()">Reset</button>\n</nui-example-wrapper>\n'},38534:function(t,e,n){"use strict";n.r(e),e.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit, ViewEncapsulation } from "@angular/core";\nimport isEmpty from "lodash/isEmpty";\nimport isUndefined from "lodash/isUndefined";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    BandScale,\n    barAccessors,\n    BarGridConfig,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarStatusGridConfig,\n    BorderConfig,\n    Chart,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S,\n    convert,\n    DataAccessor,\n    DATA_POINT_NOT_FOUND,\n    IAccessors,\n    IBarRendererConfig,\n    IChartEvent,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointsEvent,\n    IInteractionValues,\n    IInteractionValuesPayload,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_VALUES_EVENT,\n    IXYScales,\n    MappedValueProvider,\n    MOUSE_ACTIVE_EVENT,\n    SelectedDatPointIdxFn,\n    StatusAccessors,\n    statusAccessors,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid,\n} from "@nova-ui/charts";\n\nconst format = "YYYY-MM-DDTHH:mm:ssZ";\nconst baseDate = "2016-12-25T15:05:00Z";\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n}\n\n@Component({\n    templateUrl: "./data-point-selection-prototype.component.html",\n    styleUrls: ["./data-point-selection-prototype.component.less"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DataPointSelectionPrototypeComponent implements OnInit {\n    public barChart: Chart;\n    public statusChart: Chart;\n\n    // Use the same \'x\' scale id for both charts to ensure that interaction events such as hover are shared between the charts\n    private xScaleId = "xScale";\n\n    private selectedDataPoints: Record<string, IDataPoint> = {};\n    private labelPlugin = new InteractionLabelPlugin();\n    private renderer: BarRenderer;\n    private selectedLabelPosition?: IInteractionValues;\n\n    private colorProvider = {\n        // sets the bars used to visualize the selection box to \'transparent\'. All other bars just use the first color in the CS1 palette.\n        get: (seriesId: string) =>\n            seriesId === "selection-box" ? "transparent" : CHART_PALETTE_CS1[0],\n        reset: () => {},\n    };\n\n    public ngOnInit() {\n        this.setUpBarChart();\n        this.setUpStatusChart();\n    }\n\n    public onReset() {\n        // Reset the stored selection\n        this.selectedDataPoints = {};\n        this.selectedLabelPosition = undefined;\n\n        // Redraw the charts\n        this.redrawCharts();\n\n        // Re-enable interaction label updates and hide the label by emitting a mouse move \'INTERACTION_VALUES_EVENT\' with empty values.\n        this.labelPlugin.areLabelUpdatesEnabled = true;\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_VALUES_EVENT)\n            .next({\n                data: {\n                    interactionType: InteractionType.MouseMove,\n                    values: {},\n                },\n            });\n    }\n\n    private setUpBarChart() {\n        this.barChart = new Chart(this.configureBarGrid());\n        this.barChart.addPlugin(new InteractionLinePlugin());\n        this.barChart.addPlugin(this.labelPlugin);\n\n        // Setting up data point click handling\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_DATA_POINTS_EVENT)\n            .subscribe(this.handleDataPointsInteraction);\n        // Setting up interaction label update handling\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_VALUES_EVENT)\n            .subscribe(this.handleInteractionLabelUpdates);\n        // Setting up what happens on chart mouseenter and mouseleave\n        this.barChart\n            .getEventBus()\n            .getStream(MOUSE_ACTIVE_EVENT)\n            .subscribe(this.handleMouseActive);\n\n        // The color provider sets the selection boxes to \'transparent\'\n        const accessors = barAccessors({}, this.colorProvider);\n        // The \'cssClassAccessor\' updates the stroke color of the selection box when a time interval is selected\n        accessors.data.cssClass = this.cssClassAccessor;\n\n        const scales = barScales();\n        // Use the same \'x\' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\n        scales.x = new TimeIntervalScale(duration(5, "minutes"), this.xScaleId);\n\n        // The \'barThickness\' method sets the selection box width to be larger than the standard bars\n        accessors.data.thickness = this.barThickness(scales);\n\n        const rendererConfig: IBarRendererConfig = {\n            // Supply a \'selectedDataPointIdxFn\' to the \'BarHighlightStrategy\' to prevent the selected bar\n            // from being deemphasized/grayed out as the chart is hovered.\n            highlightStrategy: new BarHighlightStrategy(\n                "x",\n                1,\n                this.selectedDataPointIdxFn\n            ),\n            cursor: "pointer",\n        };\n        this.renderer = new BarRenderer(rendererConfig);\n\n        // Initialize the bar chart\n        this.barChart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer: this.renderer,\n                scales,\n            }))\n        );\n    }\n\n    private setUpStatusChart() {\n        this.statusChart = new Chart(this.configureStatusGrid());\n        this.statusChart.addPlugin(new InteractionLinePlugin());\n\n        // Setting up the status chart scales\n        const statusYScale = new BandScale();\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        // Use the same \'x\' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\n        const statusXScale = new TimeIntervalScale(\n            duration(5, "minutes"),\n            this.xScaleId\n        );\n        statusXScale.fixDomain([\n            moment(baseDate, format).toDate(),\n            moment(baseDate, format).add(25, "minutes").toDate(),\n        ]);\n        const statusScales = {\n            x: statusXScale,\n            y: statusYScale,\n        };\n\n        // Setting up the status chart accessors\n        const myStatusAccessors = statusAccessors(\n            new MappedValueProvider<string>(getStatusValueMap())\n        );\n        myStatusAccessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // The \'cssClassAccessor\' updates the stroke color of the selection box when a time interval is selected\n        // TODO: Implement \'selection-box\' series for displaying the selection box on the status chart. For reference,\n        // see \'selection-box\' data series on the bar chart.\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\n\n        // Initializing the status chart\n        this.statusChart.update(\n            getStatusData().map((d) => ({\n                ...d,\n                accessors: myStatusAccessors,\n                renderer: this.renderer,\n                scales: statusScales,\n            }))\n        );\n    }\n\n    private configureBarGrid() {\n        const gridConfig = new BarGridConfig();\n\n        gridConfig.axis.left.visible = false;\n        gridConfig.axis.left.gridTicks = false;\n        // Disable \'axis.bottom.fit\' to set left and right margins manually\n        gridConfig.axis.bottom.fit = false;\n        gridConfig.borders.top = new BorderConfig();\n        gridConfig.cursor = "pointer";\n        gridConfig.dimension.padding.top = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n\n        // Use these settings to make the bar chart the same height as the status chart\n        // gridConfig.dimension.autoHeight = false;\n        // gridConfig.dimension.height(30);\n\n        return new XYGrid(gridConfig);\n    }\n\n    private configureStatusGrid() {\n        const gridConfig = new BarStatusGridConfig();\n\n        gridConfig.axis.bottom.visible = false;\n        gridConfig.cursor = "pointer";\n        gridConfig.dimension.margin.bottom = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n        gridConfig.borders.bottom.visible = false;\n\n        return new XYGrid(gridConfig);\n    }\n\n    private redrawCharts() {\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\n        this.statusChart.update(\n            this.statusChart.getDataManager().chartSeriesSet\n        );\n    }\n\n    private handleDataPointsInteraction = (event: IChartEvent) => {\n        const data: IInteractionDataPointsEvent = event.data;\n        // we\'re interested in data point click events here\n        if (data.interactionType === InteractionType.Click) {\n            // set the selected data points\n            this.selectedDataPoints = data.dataPoints;\n\n            if (this.renderer.config.stateStyles) {\n                // change the bar container opacity from 0.1 to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.3,\n                };\n            }\n\n            // redraw the charts to apply the selected data point style\n            this.redrawCharts();\n\n            // store the interaction label position for the selected data point\n            this.selectedLabelPosition =\n                this.calculateInteractionLabelPosition(data);\n\n            // apply the label position based on the click\n            this.barChart\n                .getEventBus()\n                .getStream(INTERACTION_VALUES_EVENT)\n                .next({\n                    data: {\n                        interactionType: InteractionType.MouseMove,\n                        values: this.selectedLabelPosition,\n                    },\n                });\n        }\n    };\n\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\n        const data: IInteractionValuesPayload = event.data;\n\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\n        if (\n            data.interactionType === InteractionType.MouseMove &&\n            isEmpty(data.values) &&\n            this.selectedLabelPosition\n        ) {\n            // ensure label updates are enabled\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n\n            // Update the label with the stored label position by manually emitting an \'INTERACTION_VALUES_EVENT\'.\n            // Note that \'broadcast\' is set to \'true\' to let the \'nuiChartCollection\' directive know that the event is\n            // coming from outside the chart and should not propagate to other charts in the collection.\n            this.barChart\n                .getEventBus()\n                .getStream(INTERACTION_VALUES_EVENT)\n                .next({\n                    data: {\n                        interactionType: InteractionType.MouseMove,\n                        values: this.selectedLabelPosition,\n                    },\n                    broadcast: true,\n                });\n\n            // disable further label updates\n            this.labelPlugin.areLabelUpdatesEnabled = false;\n        } else if (\n            data.interactionType === InteractionType.MouseMove &&\n            !isEmpty(data.values)\n        ) {\n            // allow label updates while the mouse is hovering over the chart\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n        }\n    };\n\n    private handleMouseActive = (event: IChartEvent) => {\n        if (this.renderer.config.stateStyles) {\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\n                // if there\'s a selected data point and the mouse has moved away\n                // from the chart, set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.3,\n                };\n            } else if (event.data) {\n                // if the mouse is over the chart set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.1,\n                };\n            }\n        }\n\n        if (\n            this.barChart.getDataManager().chartSeriesSet.length > 0 &&\n            this.statusChart.getDataManager().chartSeriesSet.length > 0\n        ) {\n            // redraw the charts if we have data\n            this.redrawCharts();\n        }\n    };\n\n    /**\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\n     * to be wider than the standard bars).\n     */\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\n        return (\n            d: any,\n            i: number,\n            series: any[],\n            dataSeries: IDataSeries<IAccessors>\n        ) => {\n            let thickness: number;\n            const x1 = convert(\n                scales.x,\n                dataSeries.accessors.data?.["startX"]?.(\n                    d,\n                    i,\n                    dataSeries.data,\n                    dataSeries\n                ),\n                0\n            );\n            const x2 = convert(\n                scales.x,\n                dataSeries.accessors.data?.["endX"]?.(\n                    d,\n                    i,\n                    dataSeries.data,\n                    dataSeries\n                ),\n                1\n            );\n            thickness = Math.abs(x1 - x2);\n\n            // Allow the selection boxes to be a little wider than the data bars\n            thickness -= dataSeries.id === "selection-box" ? 2 : 6;\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\n            return thickness;\n        };\n    }\n\n    /**\n     * Allows the \'BarHighlightingStrategy\' to know which data point (or bar) on a series is selected, if any.\n     * Return \'DATA_POINT_NOT_FOUND\' if no data point is selected on the specified series.\n     */\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (\n        seriesId: string\n    ): number =>\n        this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\n\n    /**\n     * Sets the stroke color of the selection box when a time interval is selected\n     *\n     * @returns The \'selected\' class (see less file) if a bar is selected, the series id matches the selection box series, and the\n     * selected data point index matches the current index; otherwise, returns an empty string.\n     */\n    private cssClassAccessor = (\n        d: any,\n        i: number,\n        series: any,\n        dataSeries: any\n    ): string =>\n        !isEmpty(this.selectedDataPoints) &&\n        dataSeries.id === "selection-box" &&\n        this.selectedDataPoints[dataSeries.id]?.index === i\n            ? "selected"\n            : "";\n\n    /**\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\n     */\n    private calculateInteractionLabelPosition(\n        data: IInteractionDataPointsEvent\n    ): IInteractionValues {\n        const sampleDataPoint =\n            data.dataPoints[Object.keys(data.dataPoints)[0]];\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\n\n        if (\n            !sampleDataPoint.position ||\n            isUndefined(sampleDataPoint.position.width) ||\n            isUndefined(sampleDataPoint.position.height)\n        ) {\n            throw new Error("Can\'t calculate x and y values");\n        }\n\n        const xCoordinate =\n            sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\n        const yCoordinate =\n            sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\n\n        return UtilityService.getXYValues(\n            xScales,\n            yScales,\n            xCoordinate,\n            yCoordinate\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 66 },\n                {\n                    category: moment(baseDate, format)\n                        .add(5, "minutes")\n                        .toDate(),\n                    value: 14,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(10, "minutes")\n                        .toDate(),\n                    value: 25,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(15, "minutes")\n                        .toDate(),\n                    value: 55,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(20, "minutes")\n                        .toDate(),\n                    value: 33,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(25, "minutes")\n                        .toDate(),\n                    value: 5,\n                },\n            ],\n        },\n\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\n        // outline. The \'fill\' of the boxes is set to transparent by the \'colorProvider\' in the component\n        // above. And, the blue outline of the selected time interval is toggled by the \'cssClassAccessor\'\n        // method in the above component.\n        {\n            id: "selection-box",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 100 },\n                {\n                    category: moment(baseDate, format)\n                        .add(5, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(10, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(15, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(20, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(25, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n            ],\n        },\n    ];\n}\n\nfunction getStatusValueMap() {\n    return {\n        [Status.Up]: CHART_PALETTE_CS_S[4],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\n    };\n}\n\nfunction getStatusData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).toDate(),\n                    end: moment(baseDate, format).toDate(),\n                },\n                {\n                    status: Status.Warning,\n                    start: moment(baseDate, format).add(5, "minutes").toDate(),\n                    end: moment(baseDate, format).add(5, "minutes").toDate(),\n                },\n                {\n                    status: Status.Critical,\n                    start: moment(baseDate, format).add(10, "minutes").toDate(),\n                    end: moment(baseDate, format).add(10, "minutes").toDate(),\n                },\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).add(15, "minutes").toDate(),\n                    end: moment(baseDate, format).add(15, "minutes").toDate(),\n                },\n                {\n                    status: Status.Critical,\n                    start: moment(baseDate, format).add(20, "minutes").toDate(),\n                    end: moment(baseDate, format).add(20, "minutes").toDate(),\n                },\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).add(25, "minutes").toDate(),\n                    end: moment(baseDate, format).add(25, "minutes").toDate(),\n                },\n            ],\n        },\n    ];\n}\n'},45937:function(t,e,n){"use strict";n.r(e),e.default='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    DEMO_PATH_TOKEN,\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { DataPointSelectionPrototypeComponent } from "./data-point-selection-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: DataPointSelectionPrototypeComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [DataPointSelectionPrototypeComponent],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useFactory: () =>\n                (<any>require).context(\n                    `!!raw-loader!./`,\n                    true,\n                    /.*\\.(ts|html|less)$/\n                ),\n        },\n    ],\n})\nexport class DataPointSelectionPrototypeModule {}\n'},79334:function(t){"use strict";t.exports='export default ".selected {\\n    stroke: #52d9e3 !important;\\n}\\n\\n.chart {\\n    max-width: 800px;\\n}\\n";'}}]);