{"version":3,"sources":["webpack:///./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts?fce7","webpack:///./examples/components/demo/thresholds/thresholds-spark/thresholds-spark.example.component.ts?d797","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.html","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts","webpack:///./examples/components/demo/thresholds/chart-docs-thresholds.component.ts?e6c5","./examples/components/demo/thresholds/thresholds-spark/thresholds-spark.example.component.ts","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts","webpack:///./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts?0696","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.html","./examples/components/demo/thresholds/thresholds-basic/thresholds-basic.example.component.ts","./examples/components/demo/thresholds/chart-docs-thresholds.component.ts","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.html","webpack:///./examples/components/demo/thresholds/thresholds-basic/thresholds-basic.example.component.ts?365e","webpack:///./examples/components/demo/thresholds/chart-docs-thresholds.module.ts?3f7a","webpack:///./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts?5ee0","./examples/components/demo/thresholds/chart-docs-thresholds.module.ts","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?6c00","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.html","webpack:///./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts?6fce","./examples/components/demo/thresholds/thresholds-basic/thresholds-basic.example.component.html","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts","webpack:///./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts?9040","./examples/components/demo/thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.html","./examples/components/demo/thresholds/thresholds-spark/thresholds-spark.example.component.html","./examples/components/demo/thresholds/chart-docs-thresholds.component.html"],"names":[],"mappings":"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","file":"components-demo-thresholds-chart-docs-thresholds-module-es2015.js","sourcesContent":["export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport { ISimpleThresholdZone } from \\\"@nova-ui/charts\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-thresholds-summary-test-harness\\\",\\n    templateUrl: \\\"./thresholds-summary-test-harness.component.html\\\",\\n})\\nexport class ThresholdsSummaryTestHarnessComponent implements OnInit {\\n    public data = { \\\"series-1\\\": [10, 30, 70, 30, 10], \\\"series-2\\\": [0, 40, 60, 40, 0] };\\n    public zones: ISimpleThresholdZone[] = [\\n        { status: \\\"error\\\", start: 50 },\\n        { status: \\\"warning\\\", start: 20, end: 50 },\\n    ];\\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \\\"2016-12-25T15:14:29.000Z\\\"\\n\\n    public ngOnInit() {\\n    }\\n\\n    public dataChanged(value: string) {\\n        this.data = this.validateInput(value) || this.data;\\n    }\\n\\n    public zonesChanged(value: string) {\\n        this.zones = this.validateInput(value) || this.zones;\\n    }\\n\\n    private validateInput(value: string) {\\n        let validatedInput: any;\\n        try {\\n            validatedInput = JSON.parse(value);\\n        } catch {\\n        }\\n        return validatedInput;\\n    }\\n\\n}\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport {\\n    BandScale, CHART_MARKERS, CHART_PALETTE_CS1, CHART_PALETTE_CS_S, getColorValueByName, IChartSeries, ILineAccessors,\\n    LineAccessors, LinearScale, LineRenderer, MappedValueProvider, SequentialChartMarkerProvider, SequentialColorProvider,\\n    SparkChartAssist, StatusAccessors, ThresholdsService, TimeScale\\n} from \\\"@nova-ui/charts\\\";\\nimport { rgb } from \\\"d3-color\\\";\\nimport get from \\\"lodash/get\\\";\\nimport moment, { Duration, Moment } from \\\"moment/moment\\\";\\n\\nenum Status {\\n    Error = \\\"error\\\",\\n    Warning = \\\"warning\\\",\\n}\\n\\n@Component({\\n    selector: \\\"nui-thresholds-spark-example\\\",\\n    templateUrl: \\\"./thresholds-spark.example.component.html\\\",\\n})\\nexport class ThresholdsSparkExampleComponent implements OnInit {\\n    public chartAssist: SparkChartAssist;\\n    public statusBgColors = new MappedValueProvider({\\n        [Status.Error]: addOpacity(CHART_PALETTE_CS_S[1], 0.2),\\n        [Status.Warning]: addOpacity(CHART_PALETTE_CS_S[2], 0.3),\\n    }, \\\"transparent\\\");\\n    public statusIcons = { [Status.Error]: \\\"status_critical\\\", [Status.Warning]: \\\"status_warning\\\" };\\n\\n    private renderer: LineRenderer;\\n    private accessors: LineAccessors;\\n    private xScale = new TimeScale();\\n\\n    constructor(private thresholdsService: ThresholdsService) {\\n    }\\n\\n    public ngOnInit() {\\n        this.chartAssist = new SparkChartAssist();\\n        this.renderer = new LineRenderer();\\n        this.accessors = new LineAccessors(new SequentialColorProvider([CHART_PALETTE_CS1[0]]), new SequentialChartMarkerProvider([CHART_MARKERS[0]]));\\n        this.accessors.data.status = (d) => (get(d, \\\"__thresholds.status\\\"));\\n\\n        const seriesSet: IChartSeries<ILineAccessors>[] = getLineSeries(this.xScale, this.renderer, this.accessors);\\n\\n        // Zone definitions tell the threshold service where threshold zones begin and end\\n        const zoneDefinitions = getZoneDefinitions();\\n\\n        const sparks = seriesSet.map(s => {\\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\\n            // start or end value indicates an infinite zone.)\\n            // Those values are then converted into a set of data series in this step.\\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.statusBgColors);\\n\\n            // Backgrounds use the StatusBarRenderer which requires a special set of scales.\\n            // Note that the x scale is shared between the foreground series and the background series.\\n            // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\\n            const bgScales = { x: s.scales.x, y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN) };\\n\\n            // This injects threshold data into every data point of the source series. It is important, because later we can\\n            // access related threshold information from many different places such as the legend.\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n            // We can use the thresholds service to create the background series for each spark\\n            const backgrounds = this.thresholdsService.getBackgrounds(s, zones, bgScales, this.statusBgColors);\\n\\n            return {\\n                id: s.id,\\n                chartSeriesSet: [s, backgrounds],\\n            };\\n        });\\n\\n        this.chartAssist.updateSparks(sparks);\\n    }\\n}\\n\\n/* Chart data */\\nfunction getZoneDefinitions() {\\n    return [\\n        { status: Status.Error, start: 90 },\\n        { status: Status.Warning, start: 70, end: 90 },\\n    ];\\n}\\n\\nfunction getLineSeries(xScale: TimeScale, renderer: LineRenderer, accessors: LineAccessors): IChartSeries<ILineAccessors>[] {\\n    const baseDate = moment([2016, 11, 25]);\\n    const interval = moment.duration(1, \\\"hours\\\");\\n    const series = [\\n        {\\n            id: \\\"shared-pool-size\\\",\\n            name: \\\"Shared pool size\\\",\\n            units: \\\"MB\\\",\\n            values: [67, 16, 3, 56, 26, 68, 74, 45, 54, 81, 13, 90, 72, 61, 97, 32, 64, 22, 60, 11, 53, 77, 88, 49, 66],\\n        },\\n        {\\n            id: \\\"buffer-cache-size\\\",\\n            name: \\\"Buffer cache size\\\",\\n            units: \\\"MB\\\",\\n            values: [5, 15, 52, 75, 64, 74, 6, 24, 100, 26, 91, 38, 4, 45, 93, 44, 59, 48, 99, 96, 53, 72, 32, 69, 27],\\n        },\\n        {\\n            id: \\\"pga-cache-size\\\",\\n            name: \\\"PGA cache size\\\",\\n            units: \\\"MB\\\",\\n            values: [83, 21, 43, 8, 96, 100, 5, 53, 14, 20, 82, 23, 29, 62, 33, 34, 94, 72, 77, 45, 81, 80, 19, 26, 86],\\n        },\\n        {\\n            id: \\\"db-logical-read-rate\\\",\\n            name: \\\"DB logical read rate\\\",\\n            units: \\\"%\\\",\\n            values: [74, 9, 10, 87, 83, 41, 4, 96, 100, 33, 30, 26, 40, 12, 21, 3, 69, 59, 32, 93, 62, 25, 90, 58, 51],\\n        },\\n        {\\n            id: \\\"buffer-cache-hit-ratio\\\",\\n            name: \\\"Buffer cache hit ratio\\\",\\n            units: \\\"rps\\\",\\n            values: [55, 78, 26, 35, 4, 37, 88, 64, 71, 40, 45, 9, 30, 51, 72, 44, 75, 39, 67, 24, 19, 1, 59, 11, 25],\\n        },\\n        {\\n            id: \\\"library-cache-hit-ratio\\\",\\n            name: \\\"Library cache hit ratio\\\",\\n            units: \\\"%\\\",\\n            values: [71, 57, 1, 3, 23, 4, 79, 54, 10, 29, 36, 99, 34, 75, 94, 24, 26, 50, 73, 64, 96, 12, 59, 95, 97],\\n        },\\n    ];\\n\\n    return series.map(s => ({\\n        ...s,\\n        data: getTimeData(s.values, baseDate, interval),\\n        scales: {\\n            x: xScale,\\n            y: new LinearScale(),\\n        },\\n        renderer,\\n        accessors,\\n    }));\\n}\\n\\nfunction getTimeData(values: number[], baseDate: Moment, interval: Duration): { x: Moment, y: number }[] {\\n    return values.map((v, i) => ({\\n        x: baseDate.clone().add(moment.duration(i * interval.asMilliseconds())),\\n        y: v,\\n    }));\\n}\\n\\nfunction addOpacity(c: string, opacity: number): string {\\n    const color = getColorValueByName(c);\\n    const rgbColor = rgb(color);\\n    rgbColor.opacity = opacity;\\n    return rgbColor.toString();\\n}\\n\";","export default \"<div class=\\\"d-flex align-items-start\\\">\\n    <div class=\\\"d-flex flex-column\\\">\\n        <nui-chart class=\\\"thresholds-main-chart\\\" [chart]=\\\"chart\\\" [nuiChartCollectionId]=\\\"uid\\\"></nui-chart>\\n        <nui-chart class=\\\"thresholds-summary-chart\\\" [chart]=\\\"summaryChart\\\" [nuiChartCollectionId]=\\\"uid\\\"></nui-chart>\\n    </div>\\n    <nui-legend class=\\\"ml-2 thresholds-legend\\\"\\n                seriesUnitLabel=\\\"sec\\\"\\n                [active]=\\\"chartAssist.isLegendActive\\\"\\n                [interactive]=\\\"true\\\"\\n                (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n        <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                           [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                           (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                           [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                           [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                           (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n            <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                  [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                  [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                <nui-chart-marker rightEdge\\n                                  [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                  [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                </nui-chart-marker>\\n            </nui-rich-legend-tile>\\n        </nui-legend-series>\\n    </nui-legend>\\n</div>\\n\";","import { Component } from \"@angular/core\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-thresholds-summary-visual-test\",\n    templateUrl: \"./thresholds-summary-visual-test.component.html\",\n})\nexport class ThresholdsSummaryVisualTestComponent {\n    public singleSeries = { \"series-1\": [30, 95, 15, 60, 35] };\n    public thresholdEdges = { \"series-1\": [30, 80, 80, 80, 45, 60, 10, 35] };\n    public singleSeriesNoHits = { \"series-1\": [30, 55, 25, 55, 35] };\n    public multipleSeries = { \"series-1\": [30, 95, 15, 60, 35], \"series-2\": [100, 40, 70, 45, 90] };\n\n    public zones = [\n        { status: \"error\", start: 80 },\n        { status: \"error\", start: -100, end: 10 },\n        { status: \"warning\", start: 60, end: 80 },\n        { status: \"warning\", start: 10, end: 20 },\n    ];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \"2016-12-25T15:14:29.000Z\"\n}\n","export default \"import { Component } from \\\"@angular/core\\\";\\n\\n@Component({\\n    selector: \\\"nui-chart-docs-thresholds\\\",\\n    templateUrl: \\\"./chart-docs-thresholds.component.html\\\",\\n})\\nexport class ChartDocsThresholdsComponent {\\n}\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, CHART_MARKERS, CHART_PALETTE_CS1, CHART_PALETTE_CS_S, getColorValueByName, IChartSeries, ILineAccessors,\n    LineAccessors, LinearScale, LineRenderer, MappedValueProvider, SequentialChartMarkerProvider, SequentialColorProvider,\n    SparkChartAssist, StatusAccessors, ThresholdsService, TimeScale\n} from \"@nova-ui/charts\";\nimport { rgb } from \"d3-color\";\nimport get from \"lodash/get\";\nimport moment, { Duration, Moment } from \"moment/moment\";\n\nenum Status {\n    Error = \"error\",\n    Warning = \"warning\",\n}\n\n@Component({\n    selector: \"nui-thresholds-spark-example\",\n    templateUrl: \"./thresholds-spark.example.component.html\",\n})\nexport class ThresholdsSparkExampleComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n    public statusBgColors = new MappedValueProvider({\n        [Status.Error]: addOpacity(CHART_PALETTE_CS_S[1], 0.2),\n        [Status.Warning]: addOpacity(CHART_PALETTE_CS_S[2], 0.3),\n    }, \"transparent\");\n    public statusIcons = { [Status.Error]: \"status_critical\", [Status.Warning]: \"status_warning\" };\n\n    private renderer: LineRenderer;\n    private accessors: LineAccessors;\n    private xScale = new TimeScale();\n\n    constructor(private thresholdsService: ThresholdsService) {\n    }\n\n    public ngOnInit() {\n        this.chartAssist = new SparkChartAssist();\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(new SequentialColorProvider([CHART_PALETTE_CS1[0]]), new SequentialChartMarkerProvider([CHART_MARKERS[0]]));\n        this.accessors.data.status = (d) => (get(d, \"__thresholds.status\"));\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getLineSeries(this.xScale, this.renderer, this.accessors);\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions = getZoneDefinitions();\n\n        const sparks = seriesSet.map(s => {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.statusBgColors);\n\n            // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n            // Note that the x scale is shared between the foreground series and the background series.\n            // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n            const bgScales = { x: s.scales.x, y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN) };\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places such as the legend.\n            this.thresholdsService.injectThresholdsData(s, zones);\n            // We can use the thresholds service to create the background series for each spark\n            const backgrounds = this.thresholdsService.getBackgrounds(s, zones, bgScales, this.statusBgColors);\n\n            return {\n                id: s.id,\n                chartSeriesSet: [s, backgrounds],\n            };\n        });\n\n        this.chartAssist.updateSparks(sparks);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 90 },\n        { status: Status.Warning, start: 70, end: 90 },\n    ];\n}\n\nfunction getLineSeries(xScale: TimeScale, renderer: LineRenderer, accessors: LineAccessors): IChartSeries<ILineAccessors>[] {\n    const baseDate = moment([2016, 11, 25]);\n    const interval = moment.duration(1, \"hours\");\n    const series = [\n        {\n            id: \"shared-pool-size\",\n            name: \"Shared pool size\",\n            units: \"MB\",\n            values: [67, 16, 3, 56, 26, 68, 74, 45, 54, 81, 13, 90, 72, 61, 97, 32, 64, 22, 60, 11, 53, 77, 88, 49, 66],\n        },\n        {\n            id: \"buffer-cache-size\",\n            name: \"Buffer cache size\",\n            units: \"MB\",\n            values: [5, 15, 52, 75, 64, 74, 6, 24, 100, 26, 91, 38, 4, 45, 93, 44, 59, 48, 99, 96, 53, 72, 32, 69, 27],\n        },\n        {\n            id: \"pga-cache-size\",\n            name: \"PGA cache size\",\n            units: \"MB\",\n            values: [83, 21, 43, 8, 96, 100, 5, 53, 14, 20, 82, 23, 29, 62, 33, 34, 94, 72, 77, 45, 81, 80, 19, 26, 86],\n        },\n        {\n            id: \"db-logical-read-rate\",\n            name: \"DB logical read rate\",\n            units: \"%\",\n            values: [74, 9, 10, 87, 83, 41, 4, 96, 100, 33, 30, 26, 40, 12, 21, 3, 69, 59, 32, 93, 62, 25, 90, 58, 51],\n        },\n        {\n            id: \"buffer-cache-hit-ratio\",\n            name: \"Buffer cache hit ratio\",\n            units: \"rps\",\n            values: [55, 78, 26, 35, 4, 37, 88, 64, 71, 40, 45, 9, 30, 51, 72, 44, 75, 39, 67, 24, 19, 1, 59, 11, 25],\n        },\n        {\n            id: \"library-cache-hit-ratio\",\n            name: \"Library cache hit ratio\",\n            units: \"%\",\n            values: [71, 57, 1, 3, 23, 4, 79, 54, 10, 29, 36, 99, 34, 75, 94, 24, 26, 50, 73, 64, 96, 12, 59, 95, 97],\n        },\n    ];\n\n    return series.map(s => ({\n        ...s,\n        data: getTimeData(s.values, baseDate, interval),\n        scales: {\n            x: xScale,\n            y: new LinearScale(),\n        },\n        renderer,\n        accessors,\n    }));\n}\n\nfunction getTimeData(values: number[], baseDate: Moment, interval: Duration): { x: Moment, y: number }[] {\n    return values.map((v, i) => ({\n        x: baseDate.clone().add(moment.duration(i * interval.asMilliseconds())),\n        y: v,\n    }));\n}\n\nfunction addOpacity(c: string, opacity: number): string {\n    const color = getColorValueByName(c);\n    const rgbColor = rgb(color);\n    rgbColor.opacity = opacity;\n    return rgbColor.toString();\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, BarRenderer, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval, IAccessors, IChartAssistSeries,\n    IChartSeries, ILineAccessors, IScale, ISimpleThresholdZone, IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors,\n    ThresholdsService, thresholdsSummaryGridConfig, thresholdsTopGridConfig, THRESHOLDS_SUMMARY_RENDERER_CONFIG, TimeScale, XYGrid\n} from \"@nova-ui/charts\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport moment from \"moment/moment\";\n\nenum Status {\n    Error = \"error\",\n    Warning = \"warning\",\n    Ok = \"ok\",\n}\n\n@Component({\n    selector: \"nui-thresholds-summary-example\",\n    templateUrl: \"./thresholds-summary.example.component.html\",\n})\nexport class ThresholdsSummaryExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public summaryChartAssist: ChartAssist;\n\n    private thresholdsPalette: ChartPalette;\n\n    constructor(private thresholdsService: ThresholdsService) {\n    }\n\n    public ngOnInit() {\n        // When instantiating the charts, use the provided grid configuration functions for the main grid and summary grid\n        const mainChart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n        const summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\n\n        // Instantiate a chart assist for the main chart and summary chart\n        this.chartAssist = new ChartAssist(mainChart);\n        this.summaryChartAssist = new ChartAssist(summaryChart);\n\n        // Synchronize the legend interaction events between the chart assists\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        // Create scales for the main chart data series\n        // Note that the x scale is shared between the main chart data series, main chart thresholds, and summary visualizations\n        const sharedXScale = new TimeScale();\n        const mainChartDataScales: IXYScales = {\n            x: sharedXScale,\n            y: new LinearScale(),\n        };\n\n        // Set the left scale ID on the main chart grid to let it know which scale to use for the left axis ticks\n        (mainChart.getGrid() as XYGrid).leftScaleId = mainChartDataScales.y.id;\n\n        // To give the data series visualization some vertical breathing room, set the y scale's\n        // domainCalculator by invoking getAutomaticDomainWithIncludedInterval, where the\n        // specified interval is larger than the expected domain of the visualized data\n        mainChartDataScales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\n\n        // Create a palette with a mapped value provider that maps status to color\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\n            [Status.Error]: CHART_PALETTE_CS_S[1],\n            [Status.Warning]: CHART_PALETTE_CS_S[2],\n            [Status.Ok]: CHART_PALETTE_CS_S[4],\n        }, \"transparent\"));\n\n        // Standard line renderer for the data series visualization\n        const renderer = new LineRenderer();\n        // Providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n\n        // Here we define the data series on the main chart which will be visualized as lines.\n        // These series are also used in the creation of the corresponding main chart threshold series\n        // and summary chart series.\n        const mainChartDataSeriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: mainChartDataScales,\n        }));\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n\n        // See the createMainChartThresholdSeriesSet method definition below for how to assemble\n        // the required elements for thresholds on the main chart\n        const mainChartThresholdSeriesSet = this.createMainChartThresholdSeriesSet(mainChartDataSeriesSet, mainChartDataScales, zoneDefinitions);\n\n        // See the createSummarySeriesSet method definition below for how to assemble the required elements\n        // for thresholds on the summary chart\n        const summarySeriesSet = this.createSummarySeriesSet(mainChartDataSeriesSet, sharedXScale, zoneDefinitions);\n\n        // Invoke the update method on each of the chart assists passing the appropriate series sets\n        // ---\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which\n        // the series are passed here. So, in this case, since the 'mainChartDataSeriesSet' appears after the\n        // 'mainChartThresholdSeriesSet' in this array, the main data elements will be rendered in front of the\n        // threshold-related elements on the chart.\n        this.chartAssist.update([...mainChartThresholdSeriesSet, ...mainChartDataSeriesSet]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private createMainChartThresholdSeriesSet(mainChartDataSeriesSet: IChartSeries<ILineAccessors>[],\n                                              mainChartDataScales: IXYScales,\n                                              zoneDefinitions: ISimpleThresholdZone[]) {\n        // Create scales for the main chart thresholds.\n        // Note that the same x scale from the data series scales is used here.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const thresholdScales = {\n            x: mainChartDataScales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of mainChartDataSeriesSet) {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create the threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            // In this case, we're creating backgrounds, side indicators, and threshold lines.\n            // ---\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\n            const seriesThresholds = [\n                this.thresholdsService.getBackgrounds(s, zones, thresholdScales, this.thresholdsPalette.backgroundColors),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(zones, mainChartDataScales),\n            ];\n\n            thresholdSeriesSet.push(...seriesThresholds);\n        }\n        return thresholdSeriesSet;\n    }\n\n    private createSummarySeriesSet(seriesSet: IChartSeries<ILineAccessors>[], xScale: IScale<any>, zoneDefinitions: ISimpleThresholdZone[]) {\n        // Zone definitions let the threshold service know where threshold zones begin and end.\n        //\n        // The summary zones use the same definitions as those on the main chart,\n        // but they also include an \"ok\" zone for time periods during which a threshold is not exceeded.\n        // The reason the main chart thresholds don't include an \"ok\" zone is that there just isn't\n        // a need to visualize the data in an \"ok\" state there.\n        //\n        // On the summary, data falling within the \"ok\" zone is visualized as a thin green line.\n        const summaryZoneDefs = [\n            ...zoneDefinitions,\n            { status: Status.Ok },\n        ];\n\n        // Create scales for the summary chart.\n        // Note that the same x scale from the data series scales of the main chart is used here.\n        // Also note that, similar to the main chart thresholds, the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const summaryScales = {\n            x: xScale,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // A thickness map can be provided to the thresholds service getBackgrounds method if you want to specify a custom\n        // height for the threshold visualization. The default thickness is the full height of the grid.\n        const thicknessMap = { [Status.Ok]: BarRenderer.THIN };\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, summaryZoneDefs, this.thresholdsPalette.standardColors);\n\n            // This injects threshold data into every data point of the source series. It's important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Finally, create the thresholds series by invoking the threshold service's getBackgrounds method\n            // with arguments for the data series, the defined zones, the palette's standard colors\n            // and the predefined THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n            // The renderer config defines the behavior of series when they are emphasized, hidden, etc.\n            return this.thresholdsService.getBackgrounds(s, zones, summaryScales, this.thresholdsPalette.standardColors,\n                thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\n        });\n\n        return summarySeriesSet;\n    }\n}\n\n/** Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 80 },\n        { status: Status.Warning, start: 60, end: 80 },\n    ];\n}\n\nfunction getData(): any[] {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 30 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 95 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 15 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 35 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T15:14:29.909Z\", format), y: 60 },\n                { x: moment(\"2016-12-27T15:14:29.909Z\", format), y: 40 },\n                { x: moment(\"2016-12-29T15:14:29.909Z\", format), y: 70 },\n                { x: moment(\"2016-12-31T15:14:29.909Z\", format), y: 45 },\n                { x: moment(\"2017-01-03T15:14:29.909Z\", format), y: 90 },\n            ],\n        },\n    ];\n}\n","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport {\\n    BandScale, BarRenderer, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval, IAccessors, IChartAssistSeries,\\n    IChartSeries, ILineAccessors, IScale, ISimpleThresholdZone, IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors,\\n    ThresholdsService, thresholdsSummaryGridConfig, thresholdsTopGridConfig, THRESHOLDS_SUMMARY_RENDERER_CONFIG, TimeScale, XYGrid\\n} from \\\"@nova-ui/charts\\\";\\nimport cloneDeep from \\\"lodash/cloneDeep\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\nenum Status {\\n    Error = \\\"error\\\",\\n    Warning = \\\"warning\\\",\\n    Ok = \\\"ok\\\",\\n}\\n\\n@Component({\\n    selector: \\\"nui-thresholds-summary-example\\\",\\n    templateUrl: \\\"./thresholds-summary.example.component.html\\\",\\n})\\nexport class ThresholdsSummaryExampleComponent implements OnInit {\\n    public chartAssist: ChartAssist;\\n    public summaryChartAssist: ChartAssist;\\n\\n    private thresholdsPalette: ChartPalette;\\n\\n    constructor(private thresholdsService: ThresholdsService) {\\n    }\\n\\n    public ngOnInit() {\\n        // When instantiating the charts, use the provided grid configuration functions for the main grid and summary grid\\n        const mainChart = new Chart(new XYGrid(thresholdsTopGridConfig()));\\n        const summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\\n\\n        // Instantiate a chart assist for the main chart and summary chart\\n        this.chartAssist = new ChartAssist(mainChart);\\n        this.summaryChartAssist = new ChartAssist(summaryChart);\\n\\n        // Synchronize the legend interaction events between the chart assists\\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\\n\\n        // Create scales for the main chart data series\\n        // Note that the x scale is shared between the main chart data series, main chart thresholds, and summary visualizations\\n        const sharedXScale = new TimeScale();\\n        const mainChartDataScales: IXYScales = {\\n            x: sharedXScale,\\n            y: new LinearScale(),\\n        };\\n\\n        // Set the left scale ID on the main chart grid to let it know which scale to use for the left axis ticks\\n        (mainChart.getGrid() as XYGrid).leftScaleId = mainChartDataScales.y.id;\\n\\n        // To give the data series visualization some vertical breathing room, set the y scale's\\n        // domainCalculator by invoking getAutomaticDomainWithIncludedInterval, where the\\n        // specified interval is larger than the expected domain of the visualized data\\n        mainChartDataScales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\\n\\n        // Create a palette with a mapped value provider that maps status to color\\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\\n            [Status.Error]: CHART_PALETTE_CS_S[1],\\n            [Status.Warning]: CHART_PALETTE_CS_S[2],\\n            [Status.Ok]: CHART_PALETTE_CS_S[4],\\n        }, \\\"transparent\\\"));\\n\\n        // Standard line renderer for the data series visualization\\n        const renderer = new LineRenderer();\\n        // Providing chartAssist colors and markers to LineAccessors will share them with the line chart\\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\\n\\n        // Here we define the data series on the main chart which will be visualized as lines.\\n        // These series are also used in the creation of the corresponding main chart threshold series\\n        // and summary chart series.\\n        const mainChartDataSeriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\\n            ...d,\\n            accessors,\\n            renderer,\\n            scales: mainChartDataScales,\\n        }));\\n\\n        // Zone definitions tell the threshold service where threshold zones begin and end\\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\\n\\n        // See the createMainChartThresholdSeriesSet method definition below for how to assemble\\n        // the required elements for thresholds on the main chart\\n        const mainChartThresholdSeriesSet = this.createMainChartThresholdSeriesSet(mainChartDataSeriesSet, mainChartDataScales, zoneDefinitions);\\n\\n        // See the createSummarySeriesSet method definition below for how to assemble the required elements\\n        // for thresholds on the summary chart\\n        const summarySeriesSet = this.createSummarySeriesSet(mainChartDataSeriesSet, sharedXScale, zoneDefinitions);\\n\\n        // Invoke the update method on each of the chart assists passing the appropriate series sets\\n        // ---\\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which\\n        // the series are passed here. So, in this case, since the 'mainChartDataSeriesSet' appears after the\\n        // 'mainChartThresholdSeriesSet' in this array, the main data elements will be rendered in front of the\\n        // threshold-related elements on the chart.\\n        this.chartAssist.update([...mainChartThresholdSeriesSet, ...mainChartDataSeriesSet]);\\n        this.summaryChartAssist.update(summarySeriesSet);\\n    }\\n\\n    private createMainChartThresholdSeriesSet(mainChartDataSeriesSet: IChartSeries<ILineAccessors>[],\\n                                              mainChartDataScales: IXYScales,\\n                                              zoneDefinitions: ISimpleThresholdZone[]) {\\n        // Create scales for the main chart thresholds.\\n        // Note that the same x scale from the data series scales is used here.\\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\\n        const thresholdScales = {\\n            x: mainChartDataScales.x,\\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\\n        };\\n\\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\\n        for (const s of mainChartDataSeriesSet) {\\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\\n            // start or end value indicates an infinite zone.)\\n            // Those values are then converted into a set of data series in this step.\\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\\n\\n            // This injects threshold data into every data point of the source series. It is important, because later we can\\n            // access related threshold information from many different places like legend, tooltips or even when calculating\\n            // other threshold related data series, which we do in the following step.\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n\\n            // Here we create the threshold related visuals for this series. The methods on the thresholdService are broken down and\\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\\n            // In this case, we're creating backgrounds, side indicators, and threshold lines.\\n            // ---\\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\\n            const seriesThresholds = [\\n                this.thresholdsService.getBackgrounds(s, zones, thresholdScales, this.thresholdsPalette.backgroundColors),\\n                ...this.thresholdsService.getThresholdLines(zones),\\n                ...this.thresholdsService.getSideIndicators(zones, mainChartDataScales),\\n            ];\\n\\n            thresholdSeriesSet.push(...seriesThresholds);\\n        }\\n        return thresholdSeriesSet;\\n    }\\n\\n    private createSummarySeriesSet(seriesSet: IChartSeries<ILineAccessors>[], xScale: IScale<any>, zoneDefinitions: ISimpleThresholdZone[]) {\\n        // Zone definitions let the threshold service know where threshold zones begin and end.\\n        //\\n        // The summary zones use the same definitions as those on the main chart,\\n        // but they also include an \\\"ok\\\" zone for time periods during which a threshold is not exceeded.\\n        // The reason the main chart thresholds don't include an \\\"ok\\\" zone is that there just isn't\\n        // a need to visualize the data in an \\\"ok\\\" state there.\\n        //\\n        // On the summary, data falling within the \\\"ok\\\" zone is visualized as a thin green line.\\n        const summaryZoneDefs = [\\n            ...zoneDefinitions,\\n            { status: Status.Ok },\\n        ];\\n\\n        // Create scales for the summary chart.\\n        // Note that the same x scale from the data series scales of the main chart is used here.\\n        // Also note that, similar to the main chart thresholds, the y band scale fixes the domain to a single value of STATUS_DOMAIN\\n        const summaryScales = {\\n            x: xScale,\\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\\n        };\\n\\n        // A thickness map can be provided to the thresholds service getBackgrounds method if you want to specify a custom\\n        // height for the threshold visualization. The default thickness is the full height of the grid.\\n        const thicknessMap = { [Status.Ok]: BarRenderer.THIN };\\n\\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\\n            // start or end value indicates an infinite zone.)\\n            // Those values are then converted into a set of data series in this step.\\n            const zones = this.thresholdsService.getThresholdZones(s, summaryZoneDefs, this.thresholdsPalette.standardColors);\\n\\n            // This injects threshold data into every data point of the source series. It's important, because later we can\\n            // access related threshold information from many different places like legend, tooltips or even when calculating\\n            // other threshold related data series, which we do in the following step.\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n\\n            // Finally, create the thresholds series by invoking the threshold service's getBackgrounds method\\n            // with arguments for the data series, the defined zones, the palette's standard colors\\n            // and the predefined THRESHOLDS_SUMMARY_RENDERER_CONFIG.\\n            // The renderer config defines the behavior of series when they are emphasized, hidden, etc.\\n            return this.thresholdsService.getBackgrounds(s, zones, summaryScales, this.thresholdsPalette.standardColors,\\n                thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\\n        });\\n\\n        return summarySeriesSet;\\n    }\\n}\\n\\n/** Chart data */\\nfunction getZoneDefinitions() {\\n    return [\\n        { status: Status.Error, start: 80 },\\n        { status: Status.Warning, start: 60, end: 80 },\\n    ];\\n}\\n\\nfunction getData(): any[] {\\n    const format = \\\"YYYY-MM-DDTHH:mm:ssZ\\\";\\n\\n    return [\\n        {\\n            id: \\\"series-1\\\",\\n            name: \\\"Series 1\\\",\\n            data: [\\n                { x: moment(\\\"2016-12-25T15:14:29.909Z\\\", format), y: 30 },\\n                { x: moment(\\\"2016-12-27T15:14:29.909Z\\\", format), y: 95 },\\n                { x: moment(\\\"2016-12-29T15:14:29.909Z\\\", format), y: 15 },\\n                { x: moment(\\\"2016-12-31T15:14:29.909Z\\\", format), y: 60 },\\n                { x: moment(\\\"2017-01-03T15:14:29.909Z\\\", format), y: 35 },\\n            ],\\n        },\\n        {\\n            id: \\\"series-2\\\",\\n            name: \\\"Series 2\\\",\\n            data: [\\n                { x: moment(\\\"2016-12-25T15:14:29.909Z\\\", format), y: 60 },\\n                { x: moment(\\\"2016-12-27T15:14:29.909Z\\\", format), y: 40 },\\n                { x: moment(\\\"2016-12-29T15:14:29.909Z\\\", format), y: 70 },\\n                { x: moment(\\\"2016-12-31T15:14:29.909Z\\\", format), y: 45 },\\n                { x: moment(\\\"2017-01-03T15:14:29.909Z\\\", format), y: 90 },\\n            ],\\n        },\\n    ];\\n}\\n\";","import { Component, Input, OnChanges, OnInit, SimpleChanges } from \"@angular/core\";\nimport {\n    BandScale, BarRenderer, Chart, ChartAssist, ChartPalette, ChartTooltipsPlugin, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval, IAccessors,\n    IChartAssistSeries, IChartSeries, IDataSeries, ILineAccessors, ISimpleThresholdZone, IXYScales, LineAccessors, LinearScale, LineRenderer,\n    MappedValueProvider, StatusAccessors, ThresholdsService, thresholdsSummaryGridConfig, thresholdsTopGridConfig, THRESHOLDS_SUMMARY_RENDERER_CONFIG,\n    TimeScale, UtilityService, XYGrid,\n} from \"@nova-ui/charts\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport { Moment } from \"moment/moment\";\n\n@Component({\n    selector: \"nui-thresholds-summary-test\",\n    templateUrl: \"./thresholds-summary-test.component.html\",\n})\nexport class ThresholdsSummaryTestComponent implements OnChanges, OnInit {\n    @Input() data: Record<string, number[]>;\n    @Input() zones: ISimpleThresholdZone[];\n    @Input() startDate: Moment;\n\n    public uid = UtilityService.uuid();\n\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\n\n    public chartAssist = new ChartAssist(this.chart);\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\n    public tooltipsPlugin: ChartTooltipsPlugin;\n    public thresholdsPalette: ChartPalette;\n    public thicknessMap: Record<string, number>;\n\n    private accessors: LineAccessors;\n    private renderer: LineRenderer;\n    private scales: IXYScales;\n    private backgroundScales: IXYScales;\n    private summaryScales: IXYScales;\n\n    constructor(private thresholdsService: ThresholdsService) {\n        this.scales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        this.backgroundScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.summaryScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.configureGrids(this.scales.y.id);\n\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\n            \"error\": CHART_PALETTE_CS_S[1],\n            \"warning\": CHART_PALETTE_CS_S[2],\n            \"ok\": CHART_PALETTE_CS_S[4],\n        }, \"transparent\"));\n        this.thicknessMap = { \"ok\": BarRenderer.THIN };\n\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n    }\n\n    public ngOnInit() {\n        this.update(this.data);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"data\"] || changes[\"zones\"]) {\n            this.update(this.data);\n        }\n    }\n\n    private update(data: Record<string, number[]>) {\n        const seriesSet: IChartSeries<ILineAccessors>[] = getDataSeriesSet(data, this.accessors, this.startDate).map((d: any) => ({\n            ...d,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\n            const summaryZoneDefs = [...this.zones, { status: \"ok\" }];\n            const zones = this.thresholdsService.getThresholdZones(s, summaryZoneDefs, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            return this.thresholdsService.getBackgrounds(s, zones, this.summaryScales,\n                this.thresholdsPalette.standardColors, this.thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\n        });\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(s, this.zones, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            thresholdSeriesSet.push(...[\n                this.thresholdsService.getBackgrounds(s, zones, this.backgroundScales, this.thresholdsPalette.backgroundColors),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(zones, this.scales),\n            ]);\n        }\n        // chart assist needs to be used to update data\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private configureGrids(mainChartLeftScaleId: string) {\n        const topGrid = this.chart.getGrid() as XYGrid;\n        topGrid.leftScaleId = mainChartLeftScaleId;\n        const topGridConfig = topGrid.config();\n        topGridConfig.dimension.width(400);\n        topGridConfig.dimension.height(110);\n        topGridConfig.dimension.autoWidth = false;\n        topGridConfig.dimension.autoHeight = false;\n\n        const summaryGridConfig = this.summaryChart.getGrid().config();\n        summaryGridConfig.dimension.width(400);\n        summaryGridConfig.dimension.autoWidth = false;\n    }\n\n}\n\nfunction getDataSeriesSet(data: Record<string, number[]>, accessors: LineAccessors, startDate: Moment): IDataSeries<LineAccessors>[] {\n    const toDataPoint = (y: number, i: number) => ({ x: startDate.clone().add(i, \"d\"), y });\n\n    return Object.keys(data).map((seriesId) => {\n        const seriesData = data[seriesId];\n        const dataValues = seriesData.map(toDataPoint);\n\n        return {\n            id: seriesId,\n            name: seriesId,\n            data: dataValues,\n            accessors,\n        };\n    });\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ISimpleThresholdZone } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"nui-thresholds-summary-test-harness\",\n    templateUrl: \"./thresholds-summary-test-harness.component.html\",\n})\nexport class ThresholdsSummaryTestHarnessComponent implements OnInit {\n    public data = { \"series-1\": [10, 30, 70, 30, 10], \"series-2\": [0, 40, 60, 40, 0] };\n    public zones: ISimpleThresholdZone[] = [\n        { status: \"error\", start: 50 },\n        { status: \"warning\", start: 20, end: 50 },\n    ];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \"2016-12-25T15:14:29.000Z\"\n\n    public ngOnInit() {\n    }\n\n    public dataChanged(value: string) {\n        this.data = this.validateInput(value) || this.data;\n    }\n\n    public zonesChanged(value: string) {\n        this.zones = this.validateInput(value) || this.zones;\n    }\n\n    private validateInput(value: string) {\n        let validatedInput: any;\n        try {\n            validatedInput = JSON.parse(value);\n        } catch {\n        }\n        return validatedInput;\n    }\n\n}\n","export default \"<charts-test-harness>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-single-1\\\" [data]=\\\"singleSeries\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-single-2\\\" [data]=\\\"singleSeriesNoHits\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-single-3\\\" [data]=\\\"thresholdEdges\\\" [zones]=\\\"zones\\\"\\n                                 [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <nui-thresholds-summary-with-interval-scale-test></nui-thresholds-summary-with-interval-scale-test>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-multiple-1\\\" [data]=\\\"multipleSeries\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-multiple-2\\\" [data]=\\\"multipleSeries\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <nui-thresholds-summary-test class=\\\"nui-thresholds-summary-multiple-3\\\" [data]=\\\"multipleSeries\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n</charts-test-harness>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, IAccessors, IChartAssistSeries, IChartSeries, ILineAccessors, ISimpleThresholdZone,\n    IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors, ThresholdsService, TimeIntervalScale, XYGrid\n} from \"@nova-ui/charts\";\nimport moment, { duration } from \"moment/moment\";\n\nenum Status {\n    Error = \"error\",\n    Warning = \"warning\",\n}\n\n@Component({\n    selector: \"nui-thresholds-basic-example\",\n    templateUrl: \"./thresholds-basic.example.component.html\",\n})\nexport class ThresholdsBasicExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n\n    private thresholdsPalette = new ChartPalette(new MappedValueProvider({\n        [Status.Error]: CHART_PALETTE_CS_S[1],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n    }));\n\n    constructor(private thresholdsService: ThresholdsService) {\n    }\n\n    public ngOnInit() {\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeIntervalScale(duration(5, \"minutes\")),\n            // The example highlights time intervals defined by data points because of the type of scale that's used.\n            // All that's necessary to achieve status zones defined by data lines intersecting with threshold zones is\n            // to change the scale type to a continuous time scale by changing the 'x' scale definition to:\n            // x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Set the left scale ID on the chart's grid to let it know which scale to use for the left axis ticks\n        (this.chart.getGrid() as XYGrid).leftScaleId = scales.y.id;\n\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n        // Note that the x scale is shared between the foreground series and the background series.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const bgScales: IXYScales = {\n            x: scales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n        // Here we define the main data series on the chart which will be visualized as lines\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            // In this case, we're creating backgrounds, side indicators, and threshold lines.\n            // ---\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\n            const seriesThresholds = [\n                this.thresholdsService.getBackgrounds(s, zones, bgScales, this.thresholdsPalette.backgroundColors),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(zones, scales),\n            ];\n\n            thresholds.push(...seriesThresholds);\n        }\n\n        // Invoke the update method on the chart assist passing the appropriate series sets\n        // ---\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which the series are\n        // passed here. So, in this case, since the 'seriesSet' appears after the 'thresholds' in this array, the main data elements\n        // will be rendered in front of the threshold-related elements on the chart.\n        this.chartAssist.update([...thresholds, ...seriesSet]);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 90 },\n        { status: Status.Error, end: 10 },\n        { status: Status.Warning, start: 70, end: 90 },\n        { status: Status.Warning, start: 10, end: 30 },\n    ];\n}\n\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            { x: moment(\"2016-12-25T15:05:00Z\", format).toDate(), y: 30 },\n            { x: moment(\"2016-12-25T15:10:00Z\", format).toDate(), y: 95 },\n            { x: moment(\"2016-12-25T15:15:00Z\", format).toDate(), y: 15 },\n            { x: moment(\"2016-12-25T15:20:00Z\", format).toDate(), y: 60 },\n            { x: moment(\"2016-12-25T15:25:00Z\", format).toDate(), y: 35 },\n            { x: moment(\"2016-12-25T15:30:00Z\", format).toDate(), y: 5 },\n            { x: moment(\"2016-12-25T15:35:00Z\", format).toDate(), y: 60 },\n            { x: moment(\"2016-12-25T15:40:00Z\", format).toDate(), y: 84 },\n            { x: moment(\"2016-12-25T15:55:00Z\", format).toDate(), y: 86 },\n            { x: moment(\"2016-12-25T16:00:00Z\", format).toDate(), y: 35 },\n        ],\n    }];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-docs-thresholds\",\n    templateUrl: \"./chart-docs-thresholds.component.html\",\n})\nexport class ChartDocsThresholdsComponent {\n}\n","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart d-flex flex-column\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chartAssist.chart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"summaryChartAssist.chart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries.id\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport {\\n    BandScale, Chart, ChartAssist, ChartPalette, CHART_PALETTE_CS_S, IAccessors, IChartAssistSeries, IChartSeries, ILineAccessors, ISimpleThresholdZone,\\n    IXYScales, LineAccessors, LinearScale, LineRenderer, MappedValueProvider, StatusAccessors, ThresholdsService, TimeIntervalScale, XYGrid\\n} from \\\"@nova-ui/charts\\\";\\nimport moment, { duration } from \\\"moment/moment\\\";\\n\\nenum Status {\\n    Error = \\\"error\\\",\\n    Warning = \\\"warning\\\",\\n}\\n\\n@Component({\\n    selector: \\\"nui-thresholds-basic-example\\\",\\n    templateUrl: \\\"./thresholds-basic.example.component.html\\\",\\n})\\nexport class ThresholdsBasicExampleComponent implements OnInit {\\n    public chart = new Chart(new XYGrid());\\n    public chartAssist = new ChartAssist(this.chart);\\n\\n    private thresholdsPalette = new ChartPalette(new MappedValueProvider({\\n        [Status.Error]: CHART_PALETTE_CS_S[1],\\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\\n    }));\\n\\n    constructor(private thresholdsService: ThresholdsService) {\\n    }\\n\\n    public ngOnInit() {\\n        const accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\\n        const renderer = new LineRenderer();\\n        const scales: IXYScales = {\\n            x: new TimeIntervalScale(duration(5, \\\"minutes\\\")),\\n            // The example highlights time intervals defined by data points because of the type of scale that's used.\\n            // All that's necessary to achieve status zones defined by data lines intersecting with threshold zones is\\n            // to change the scale type to a continuous time scale by changing the 'x' scale definition to:\\n            // x: new TimeScale(),\\n            y: new LinearScale(),\\n        };\\n\\n        // Set the left scale ID on the chart's grid to let it know which scale to use for the left axis ticks\\n        (this.chart.getGrid() as XYGrid).leftScaleId = scales.y.id;\\n\\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\\n        // Note that the x scale is shared between the foreground series and the background series.\\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\\n        const bgScales: IXYScales = {\\n            x: scales.x,\\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\\n        };\\n\\n        // Zone definitions tell the threshold service where threshold zones begin and end\\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\\n        // Here we define the main data series on the chart which will be visualized as lines\\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(d => ({\\n            ...d,\\n            accessors,\\n            renderer,\\n            scales,\\n        }));\\n\\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\\n        for (const s of seriesSet) {\\n            // It's possible to manually define zones by area-like data series with start/end values for every data point. We don't do that\\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\\n            // start or end value indicates an infinite zone.)\\n            // Those values are then converted into a set of data series in this step.\\n            const zones = this.thresholdsService.getThresholdZones(s, zoneDefinitions, this.thresholdsPalette.standardColors);\\n\\n            // This injects threshold data into every data point of the source series. It is important, because later we can\\n            // access related threshold information from many different places like legend, tooltips or even when calculating\\n            // other threshold related data series, which we do in the following step.\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n\\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\\n            // In this case, we're creating backgrounds, side indicators, and threshold lines.\\n            // ---\\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\\n            const seriesThresholds = [\\n                this.thresholdsService.getBackgrounds(s, zones, bgScales, this.thresholdsPalette.backgroundColors),\\n                ...this.thresholdsService.getThresholdLines(zones),\\n                ...this.thresholdsService.getSideIndicators(zones, scales),\\n            ];\\n\\n            thresholds.push(...seriesThresholds);\\n        }\\n\\n        // Invoke the update method on the chart assist passing the appropriate series sets\\n        // ---\\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which the series are\\n        // passed here. So, in this case, since the 'seriesSet' appears after the 'thresholds' in this array, the main data elements\\n        // will be rendered in front of the threshold-related elements on the chart.\\n        this.chartAssist.update([...thresholds, ...seriesSet]);\\n    }\\n}\\n\\n/* Chart data */\\nfunction getZoneDefinitions() {\\n    return [\\n        { status: Status.Error, start: 90 },\\n        { status: Status.Error, end: 10 },\\n        { status: Status.Warning, start: 70, end: 90 },\\n        { status: Status.Warning, start: 10, end: 30 },\\n    ];\\n}\\n\\nfunction getData() {\\n    const format = \\\"YYYY-MM-DDTHH:mm:ssZ\\\";\\n    return [{\\n        id: \\\"series-1\\\",\\n        name: \\\"Series 1\\\",\\n        data: [\\n            { x: moment(\\\"2016-12-25T15:05:00Z\\\", format).toDate(), y: 30 },\\n            { x: moment(\\\"2016-12-25T15:10:00Z\\\", format).toDate(), y: 95 },\\n            { x: moment(\\\"2016-12-25T15:15:00Z\\\", format).toDate(), y: 15 },\\n            { x: moment(\\\"2016-12-25T15:20:00Z\\\", format).toDate(), y: 60 },\\n            { x: moment(\\\"2016-12-25T15:25:00Z\\\", format).toDate(), y: 35 },\\n            { x: moment(\\\"2016-12-25T15:30:00Z\\\", format).toDate(), y: 5 },\\n            { x: moment(\\\"2016-12-25T15:35:00Z\\\", format).toDate(), y: 60 },\\n            { x: moment(\\\"2016-12-25T15:40:00Z\\\", format).toDate(), y: 84 },\\n            { x: moment(\\\"2016-12-25T15:55:00Z\\\", format).toDate(), y: 86 },\\n            { x: moment(\\\"2016-12-25T16:00:00Z\\\", format).toDate(), y: 35 },\\n        ],\\n    }];\\n}\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { FormsModule } from \\\"@angular/forms\\\";\\nimport { RouterModule, Routes } from \\\"@angular/router\\\";\\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \\\"@nova-ui/bits\\\";\\nimport { NuiChartsModule } from \\\"@nova-ui/charts\\\";\\n\\nimport { DemoCommonModule } from \\\"../common/demo-common.module\\\";\\n\\nimport { ChartDocsThresholdsComponent } from \\\"./chart-docs-thresholds.component\\\";\\nimport { ThresholdsBasicExampleComponent } from \\\"./thresholds-basic/thresholds-basic.example.component\\\";\\nimport { ThresholdsSparkExampleComponent } from \\\"./thresholds-spark/thresholds-spark.example.component\\\";\\nimport { ThresholdsSummaryExampleComponent } from \\\"./thresholds-summary/thresholds-summary-example/thresholds-summary.example.component\\\";\\nimport { ThresholdsSummaryTestHarnessComponent } from \\\"./thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component\\\";\\nimport { ThresholdsSummaryTestComponent } from \\\"./thresholds-summary/thresholds-summary-test/thresholds-summary-test.component\\\";\\nimport { ThresholdsSummaryVisualTestComponent } from \\\"./thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component\\\";\\nimport { ThresholdsSummaryWithIntervalScaleTestComponent } from \\\"./thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component\\\";\\n\\nconst exampleRoutes: Routes = [\\n    {\\n        path: \\\"\\\",\\n        component: ChartDocsThresholdsComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"stage\\\": SrlcStage.beta,\\n            },\\n            showThemeSwitcher: true,\\n        },\\n    },\\n    {\\n        path: \\\"basic\\\",\\n        component: ThresholdsBasicExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"spark\\\",\\n        component: ThresholdsSparkExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"summary\\\",\\n        component: ThresholdsSummaryExampleComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"summary-test\\\",\\n        component: ThresholdsSummaryTestHarnessComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n    {\\n        path: \\\"summary-visual-test\\\",\\n        component: ThresholdsSummaryVisualTestComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    declarations: [\\n        ChartDocsThresholdsComponent,\\n        ThresholdsBasicExampleComponent,\\n        ThresholdsSparkExampleComponent,\\n        ThresholdsSummaryExampleComponent,\\n        ThresholdsSummaryTestComponent,\\n        ThresholdsSummaryTestHarnessComponent,\\n        ThresholdsSummaryVisualTestComponent,\\n        ThresholdsSummaryWithIntervalScaleTestComponent,\\n    ],\\n    imports: [\\n        DemoCommonModule,\\n        FormsModule,\\n        NuiChartsModule,\\n        NuiDocsModule,\\n        NuiIconModule,\\n        NuiMessageModule,\\n        RouterModule.forChild(exampleRoutes),\\n    ],\\n    providers: [\\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/) },\\n    ],\\n})\\nexport class ChartDocsThresholdsModule {\\n}\\n\";","export default \"import { Component, OnInit } from \\\"@angular/core\\\";\\nimport {\\n    BandScale,\\n    BarRenderer,\\n    Chart,\\n    ChartAssist,\\n    ChartPalette,\\n    ChartTooltipsPlugin,\\n    CHART_PALETTE_CS_S,\\n    getAutomaticDomainWithIncludedInterval,\\n    IAccessors,\\n    IChartAssistSeries,\\n    IChartSeries,\\n    ILineAccessors,\\n    IXYScales,\\n    LineAccessors,\\n    LinearScale,\\n    LineRenderer,\\n    MappedValueProvider,\\n    StatusAccessors,\\n    ThresholdsService,\\n    thresholdsSummaryGridConfig,\\n    thresholdsTopGridConfig,\\n    THRESHOLDS_SUMMARY_RENDERER_CONFIG,\\n    TimeIntervalScale,\\n    UtilityService,\\n    XYGrid\\n} from \\\"@nova-ui/charts\\\";\\nimport cloneDeep from \\\"lodash/cloneDeep\\\";\\nimport moment, { duration } from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-thresholds-summary-with-interval-scale-test\\\",\\n    templateUrl: \\\"./thresholds-summary-with-interval-scale-test.component.html\\\",\\n})\\nexport class ThresholdsSummaryWithIntervalScaleTestComponent implements OnInit {\\n    public zones = [\\n        { status: \\\"error\\\", start: 80 },\\n        { status: \\\"error\\\", start: -100, end: 10 },\\n        { status: \\\"warning\\\", start: 60, end: 80 },\\n        { status: \\\"warning\\\", start: 10, end: 20 },\\n    ];\\n    public summaryZones = [...this.zones, { status: \\\"ok\\\", start: 20, end: 60 }];\\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \\\"2016-12-25T15:14:29.000Z\\\"\\n    public uid = UtilityService.uuid();\\n\\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\\n\\n    public chartAssist = new ChartAssist(this.chart);\\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\\n    public tooltipsPlugin: ChartTooltipsPlugin;\\n    public thresholdsPalette: ChartPalette;\\n    public thicknessMap: Record<string, number>;\\n\\n    private accessors: LineAccessors;\\n    private renderer: LineRenderer;\\n    private scales: IXYScales;\\n    private backgroundScales: IXYScales;\\n    private summaryScales: IXYScales;\\n\\n    constructor(private thresholdsService: ThresholdsService) {\\n        this.scales = {\\n            x: new TimeIntervalScale(duration(5, \\\"minutes\\\")),\\n            y: new LinearScale(),\\n        };\\n\\n        this.backgroundScales = {\\n            x: this.scales.x,\\n            y: new BandScale(),\\n        };\\n\\n        this.summaryScales = {\\n            x: this.scales.x,\\n            y: new BandScale(),\\n        };\\n\\n        this.configureGrids(this.scales.y.id);\\n\\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\\n\\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n\\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\\n            \\\"error\\\": CHART_PALETTE_CS_S[1],\\n            \\\"warning\\\": CHART_PALETTE_CS_S[2],\\n            \\\"ok\\\": CHART_PALETTE_CS_S[4],\\n        }, \\\"transparent\\\"));\\n        this.thicknessMap = { \\\"ok\\\": BarRenderer.THIN };\\n\\n        this.renderer = new LineRenderer();\\n        this.accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\\n    }\\n\\n    public ngOnInit() {\\n        this.update();\\n    }\\n\\n    private update() {\\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map((d: any) => ({\\n            ...d,\\n            renderer: this.renderer,\\n            accessors: this.accessors,\\n            scales: this.scales,\\n        }));\\n\\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\\n            const zones = this.thresholdsService.getThresholdZones(s, this.summaryZones, this.thresholdsPalette.standardColors);\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n            return this.thresholdsService.getBackgrounds(s, zones, this.summaryScales,\\n                this.thresholdsPalette.standardColors, this.thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\\n        });\\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\\n        for (const s of seriesSet) {\\n            const zones = this.thresholdsService.getThresholdZones(s, this.zones, this.thresholdsPalette.standardColors);\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n            thresholdSeriesSet.push(...[\\n                this.thresholdsService.getBackgrounds(s, zones, this.backgroundScales, this.thresholdsPalette.backgroundColors),\\n                ...this.thresholdsService.getThresholdLines(zones),\\n                ...this.thresholdsService.getSideIndicators(zones, this.scales),\\n            ]);\\n        }\\n        // chart assist needs to be used to update data\\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\\n        this.summaryChartAssist.update(summarySeriesSet);\\n    }\\n\\n    private configureGrids(mainChartLeftScaleId: string) {\\n        const topGrid = this.chart.getGrid() as XYGrid;\\n        topGrid.leftScaleId = mainChartLeftScaleId;\\n        const topGridConfig = topGrid.config();\\n        topGridConfig.dimension.width(400);\\n        topGridConfig.dimension.height(110);\\n        topGridConfig.dimension.autoWidth = false;\\n        topGridConfig.dimension.autoHeight = false;\\n\\n        const summaryGridConfig = this.summaryChart.getGrid().config();\\n        summaryGridConfig.dimension.width(400);\\n        summaryGridConfig.dimension.autoWidth = false;\\n    }\\n\\n}\\n\\nfunction getData() {\\n    const format = \\\"YYYY-MM-DDTHH:mm:ssZ\\\";\\n    return [{\\n        id: \\\"series-1\\\",\\n        name: \\\"Series 1\\\",\\n        data: [\\n            { x: moment(\\\"2016-12-25T15:05:00Z\\\", format).toDate(), y: 30 },\\n            { x: moment(\\\"2016-12-25T15:10:00Z\\\", format).toDate(), y: 80 },\\n            { x: moment(\\\"2016-12-25T15:15:00Z\\\", format).toDate(), y: 80 },\\n            { x: moment(\\\"2016-12-25T15:20:00Z\\\", format).toDate(), y: 80 },\\n            { x: moment(\\\"2016-12-25T15:25:00Z\\\", format).toDate(), y: 45 },\\n            { x: moment(\\\"2016-12-25T15:30:00Z\\\", format).toDate(), y: 60 },\\n            { x: moment(\\\"2016-12-25T15:35:00Z\\\", format).toDate(), y: 10 },\\n            { x: moment(\\\"2016-12-25T15:40:00Z\\\", format).toDate(), y: 35 },\\n        ],\\n    }];\\n}\\n\\n\";","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../common/demo-common.module\";\n\nimport { ChartDocsThresholdsComponent } from \"./chart-docs-thresholds.component\";\nimport { ThresholdsBasicExampleComponent } from \"./thresholds-basic/thresholds-basic.example.component\";\nimport { ThresholdsSparkExampleComponent } from \"./thresholds-spark/thresholds-spark.example.component\";\nimport { ThresholdsSummaryExampleComponent } from \"./thresholds-summary/thresholds-summary-example/thresholds-summary.example.component\";\nimport { ThresholdsSummaryTestHarnessComponent } from \"./thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component\";\nimport { ThresholdsSummaryTestComponent } from \"./thresholds-summary/thresholds-summary-test/thresholds-summary-test.component\";\nimport { ThresholdsSummaryVisualTestComponent } from \"./thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component\";\nimport { ThresholdsSummaryWithIntervalScaleTestComponent } from \"./thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component\";\n\nconst exampleRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartDocsThresholdsComponent,\n        data: {\n            \"srlc\": {\n                \"stage\": SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"basic\",\n        component: ThresholdsBasicExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"spark\",\n        component: ThresholdsSparkExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"summary\",\n        component: ThresholdsSummaryExampleComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"summary-test\",\n        component: ThresholdsSummaryTestHarnessComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n    {\n        path: \"summary-visual-test\",\n        component: ThresholdsSummaryVisualTestComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsThresholdsComponent,\n        ThresholdsBasicExampleComponent,\n        ThresholdsSparkExampleComponent,\n        ThresholdsSummaryExampleComponent,\n        ThresholdsSummaryTestComponent,\n        ThresholdsSummaryTestHarnessComponent,\n        ThresholdsSummaryVisualTestComponent,\n        ThresholdsSummaryWithIntervalScaleTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsThresholdsModule {\n}\n","var map = {\n\t\"./chart-docs-thresholds.component.html\": \"vIjN\",\n\t\"./chart-docs-thresholds.component.ts\": \"5sUz\",\n\t\"./chart-docs-thresholds.module.ts\": \"P3qJ\",\n\t\"./thresholds-basic/thresholds-basic.example.component.html\": \"fdc+\",\n\t\"./thresholds-basic/thresholds-basic.example.component.ts\": \"Nl5z\",\n\t\"./thresholds-spark/thresholds-spark.example.component.html\": \"u9+C\",\n\t\"./thresholds-spark/thresholds-spark.example.component.ts\": \"15el\",\n\t\"./thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.html\": \"MZ3U\",\n\t\"./thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts\": \"BpZJ\",\n\t\"./thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.html\": \"qW1a\",\n\t\"./thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts\": \"/Odg\",\n\t\"./thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.html\": \"39Fa\",\n\t\"./thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts\": \"kEB1\",\n\t\"./thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.html\": \"IZgm\",\n\t\"./thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts\": \"b84I\",\n\t\"./thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.html\": \"ZNpb\",\n\t\"./thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts\": \"XuAt\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"ZHgH\";","export default \"<div class=\\\"d-flex align-items-start\\\">\\n    <div class=\\\"d-flex flex-column\\\">\\n        <nui-chart class=\\\"thresholds-main-chart\\\" [chart]=\\\"chart\\\" [nuiChartCollectionId]=\\\"uid\\\"></nui-chart>\\n        <nui-chart class=\\\"thresholds-summary-chart\\\" [chart]=\\\"summaryChart\\\" [nuiChartCollectionId]=\\\"uid\\\"></nui-chart>\\n    </div>\\n    <nui-legend class=\\\"ml-2 thresholds-legend\\\"\\n                seriesUnitLabel=\\\"sec\\\"\\n                [active]=\\\"chartAssist.isLegendActive\\\"\\n                [interactive]=\\\"true\\\"\\n                (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n        <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                           [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                           (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                           [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                           [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                           (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n            <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                  [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                  [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                <nui-chart-marker rightEdge\\n                                  [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                  [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                </nui-chart-marker>\\n            </nui-rich-legend-tile>\\n        </nui-legend-series>\\n    </nui-legend>\\n</div>\\n\";","export default \"import { Component } from \\\"@angular/core\\\";\\nimport moment from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-thresholds-summary-visual-test\\\",\\n    templateUrl: \\\"./thresholds-summary-visual-test.component.html\\\",\\n})\\nexport class ThresholdsSummaryVisualTestComponent {\\n    public singleSeries = { \\\"series-1\\\": [30, 95, 15, 60, 35] };\\n    public thresholdEdges = { \\\"series-1\\\": [30, 80, 80, 80, 45, 60, 10, 35] };\\n    public singleSeriesNoHits = { \\\"series-1\\\": [30, 55, 25, 55, 35] };\\n    public multipleSeries = { \\\"series-1\\\": [30, 95, 15, 60, 35], \\\"series-2\\\": [100, 40, 70, 45, 90] };\\n\\n    public zones = [\\n        { status: \\\"error\\\", start: 80 },\\n        { status: \\\"error\\\", start: -100, end: 10 },\\n        { status: \\\"warning\\\", start: 60, end: 80 },\\n        { status: \\\"warning\\\", start: 10, end: 20 },\\n    ];\\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \\\"2016-12-25T15:14:29.000Z\\\"\\n}\\n\";","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend seriesUnitLabel=\\\"sec\\\"\\n                    [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"true\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               [descriptionPrimary]=\\\"legendSeries['name']\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"chartAssist.getHighlightedValue(legendSeries, 'y')\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                    <nui-chart-marker rightEdge\\n                                      [marker]=\\\"chartAssist.markers.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\">\\n                    </nui-chart-marker>\\n                </nui-rich-legend-tile>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n</div>\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    ChartTooltipsPlugin,\n    CHART_PALETTE_CS_S,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    thresholdsSummaryGridConfig,\n    thresholdsTopGridConfig,\n    THRESHOLDS_SUMMARY_RENDERER_CONFIG,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid\n} from \"@nova-ui/charts\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport moment, { duration } from \"moment/moment\";\n\n@Component({\n    selector: \"nui-thresholds-summary-with-interval-scale-test\",\n    templateUrl: \"./thresholds-summary-with-interval-scale-test.component.html\",\n})\nexport class ThresholdsSummaryWithIntervalScaleTestComponent implements OnInit {\n    public zones = [\n        { status: \"error\", start: 80 },\n        { status: \"error\", start: -100, end: 10 },\n        { status: \"warning\", start: 60, end: 80 },\n        { status: \"warning\", start: 10, end: 20 },\n    ];\n    public summaryZones = [...this.zones, { status: \"ok\", start: 20, end: 60 }];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // \"2016-12-25T15:14:29.000Z\"\n    public uid = UtilityService.uuid();\n\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\n\n    public chartAssist = new ChartAssist(this.chart);\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\n    public tooltipsPlugin: ChartTooltipsPlugin;\n    public thresholdsPalette: ChartPalette;\n    public thicknessMap: Record<string, number>;\n\n    private accessors: LineAccessors;\n    private renderer: LineRenderer;\n    private scales: IXYScales;\n    private backgroundScales: IXYScales;\n    private summaryScales: IXYScales;\n\n    constructor(private thresholdsService: ThresholdsService) {\n        this.scales = {\n            x: new TimeIntervalScale(duration(5, \"minutes\")),\n            y: new LinearScale(),\n        };\n\n        this.backgroundScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.summaryScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.configureGrids(this.scales.y.id);\n\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\n            \"error\": CHART_PALETTE_CS_S[1],\n            \"warning\": CHART_PALETTE_CS_S[2],\n            \"ok\": CHART_PALETTE_CS_S[4],\n        }, \"transparent\"));\n        this.thicknessMap = { \"ok\": BarRenderer.THIN };\n\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\n    }\n\n    public ngOnInit() {\n        this.update();\n    }\n\n    private update() {\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map((d: any) => ({\n            ...d,\n            renderer: this.renderer,\n            accessors: this.accessors,\n            scales: this.scales,\n        }));\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\n            const zones = this.thresholdsService.getThresholdZones(s, this.summaryZones, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            return this.thresholdsService.getBackgrounds(s, zones, this.summaryScales,\n                this.thresholdsPalette.standardColors, this.thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\n        });\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(s, this.zones, this.thresholdsPalette.standardColors);\n            this.thresholdsService.injectThresholdsData(s, zones);\n            thresholdSeriesSet.push(...[\n                this.thresholdsService.getBackgrounds(s, zones, this.backgroundScales, this.thresholdsPalette.backgroundColors),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(zones, this.scales),\n            ]);\n        }\n        // chart assist needs to be used to update data\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private configureGrids(mainChartLeftScaleId: string) {\n        const topGrid = this.chart.getGrid() as XYGrid;\n        topGrid.leftScaleId = mainChartLeftScaleId;\n        const topGridConfig = topGrid.config();\n        topGridConfig.dimension.width(400);\n        topGridConfig.dimension.height(110);\n        topGridConfig.dimension.autoWidth = false;\n        topGridConfig.dimension.autoHeight = false;\n\n        const summaryGridConfig = this.summaryChart.getGrid().config();\n        summaryGridConfig.dimension.width(400);\n        summaryGridConfig.dimension.autoWidth = false;\n    }\n\n}\n\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            { x: moment(\"2016-12-25T15:05:00Z\", format).toDate(), y: 30 },\n            { x: moment(\"2016-12-25T15:10:00Z\", format).toDate(), y: 80 },\n            { x: moment(\"2016-12-25T15:15:00Z\", format).toDate(), y: 80 },\n            { x: moment(\"2016-12-25T15:20:00Z\", format).toDate(), y: 80 },\n            { x: moment(\"2016-12-25T15:25:00Z\", format).toDate(), y: 45 },\n            { x: moment(\"2016-12-25T15:30:00Z\", format).toDate(), y: 60 },\n            { x: moment(\"2016-12-25T15:35:00Z\", format).toDate(), y: 10 },\n            { x: moment(\"2016-12-25T15:40:00Z\", format).toDate(), y: 35 },\n        ],\n    }];\n}\n\n","export default \"import { Component, Input, OnChanges, OnInit, SimpleChanges } from \\\"@angular/core\\\";\\nimport {\\n    BandScale, BarRenderer, Chart, ChartAssist, ChartPalette, ChartTooltipsPlugin, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval, IAccessors,\\n    IChartAssistSeries, IChartSeries, IDataSeries, ILineAccessors, ISimpleThresholdZone, IXYScales, LineAccessors, LinearScale, LineRenderer,\\n    MappedValueProvider, StatusAccessors, ThresholdsService, thresholdsSummaryGridConfig, thresholdsTopGridConfig, THRESHOLDS_SUMMARY_RENDERER_CONFIG,\\n    TimeScale, UtilityService, XYGrid,\\n} from \\\"@nova-ui/charts\\\";\\nimport cloneDeep from \\\"lodash/cloneDeep\\\";\\nimport { Moment } from \\\"moment/moment\\\";\\n\\n@Component({\\n    selector: \\\"nui-thresholds-summary-test\\\",\\n    templateUrl: \\\"./thresholds-summary-test.component.html\\\",\\n})\\nexport class ThresholdsSummaryTestComponent implements OnChanges, OnInit {\\n    @Input() data: Record<string, number[]>;\\n    @Input() zones: ISimpleThresholdZone[];\\n    @Input() startDate: Moment;\\n\\n    public uid = UtilityService.uuid();\\n\\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\\n\\n    public chartAssist = new ChartAssist(this.chart);\\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\\n    public tooltipsPlugin: ChartTooltipsPlugin;\\n    public thresholdsPalette: ChartPalette;\\n    public thicknessMap: Record<string, number>;\\n\\n    private accessors: LineAccessors;\\n    private renderer: LineRenderer;\\n    private scales: IXYScales;\\n    private backgroundScales: IXYScales;\\n    private summaryScales: IXYScales;\\n\\n    constructor(private thresholdsService: ThresholdsService) {\\n        this.scales = {\\n            x: new TimeScale(),\\n            y: new LinearScale(),\\n        };\\n\\n        this.backgroundScales = {\\n            x: this.scales.x,\\n            y: new BandScale(),\\n        };\\n\\n        this.summaryScales = {\\n            x: this.scales.x,\\n            y: new BandScale(),\\n        };\\n\\n        this.configureGrids(this.scales.y.id);\\n\\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\\n\\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n\\n        this.thresholdsPalette = new ChartPalette(new MappedValueProvider({\\n            \\\"error\\\": CHART_PALETTE_CS_S[1],\\n            \\\"warning\\\": CHART_PALETTE_CS_S[2],\\n            \\\"ok\\\": CHART_PALETTE_CS_S[4],\\n        }, \\\"transparent\\\"));\\n        this.thicknessMap = { \\\"ok\\\": BarRenderer.THIN };\\n\\n        this.renderer = new LineRenderer();\\n        this.accessors = new LineAccessors(this.chartAssist.palette.standardColors, this.chartAssist.markers);\\n    }\\n\\n    public ngOnInit() {\\n        this.update(this.data);\\n    }\\n\\n    public ngOnChanges(changes: SimpleChanges): void {\\n        if (changes[\\\"data\\\"] || changes[\\\"zones\\\"]) {\\n            this.update(this.data);\\n        }\\n    }\\n\\n    private update(data: Record<string, number[]>) {\\n        const seriesSet: IChartSeries<ILineAccessors>[] = getDataSeriesSet(data, this.accessors, this.startDate).map((d: any) => ({\\n            ...d,\\n            renderer: this.renderer,\\n            scales: this.scales,\\n        }));\\n\\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [...seriesSet].map(s => {\\n            const summaryZoneDefs = [...this.zones, { status: \\\"ok\\\" }];\\n            const zones = this.thresholdsService.getThresholdZones(s, summaryZoneDefs, this.thresholdsPalette.standardColors);\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n            return this.thresholdsService.getBackgrounds(s, zones, this.summaryScales,\\n                this.thresholdsPalette.standardColors, this.thicknessMap, cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG));\\n        });\\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\\n        for (const s of seriesSet) {\\n            const zones = this.thresholdsService.getThresholdZones(s, this.zones, this.thresholdsPalette.standardColors);\\n            this.thresholdsService.injectThresholdsData(s, zones);\\n            thresholdSeriesSet.push(...[\\n                this.thresholdsService.getBackgrounds(s, zones, this.backgroundScales, this.thresholdsPalette.backgroundColors),\\n                ...this.thresholdsService.getThresholdLines(zones),\\n                ...this.thresholdsService.getSideIndicators(zones, this.scales),\\n            ]);\\n        }\\n        // chart assist needs to be used to update data\\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\\n        this.summaryChartAssist.update(summarySeriesSet);\\n    }\\n\\n    private configureGrids(mainChartLeftScaleId: string) {\\n        const topGrid = this.chart.getGrid() as XYGrid;\\n        topGrid.leftScaleId = mainChartLeftScaleId;\\n        const topGridConfig = topGrid.config();\\n        topGridConfig.dimension.width(400);\\n        topGridConfig.dimension.height(110);\\n        topGridConfig.dimension.autoWidth = false;\\n        topGridConfig.dimension.autoHeight = false;\\n\\n        const summaryGridConfig = this.summaryChart.getGrid().config();\\n        summaryGridConfig.dimension.width(400);\\n        summaryGridConfig.dimension.autoWidth = false;\\n    }\\n\\n}\\n\\nfunction getDataSeriesSet(data: Record<string, number[]>, accessors: LineAccessors, startDate: Moment): IDataSeries<LineAccessors>[] {\\n    const toDataPoint = (y: number, i: number) => ({ x: startDate.clone().add(i, \\\"d\\\"), y });\\n\\n    return Object.keys(data).map((seriesId) => {\\n        const seriesData = data[seriesId];\\n        const dataValues = seriesData.map(toDataPoint);\\n\\n        return {\\n            id: seriesId,\\n            name: seriesId,\\n            data: dataValues,\\n            accessors,\\n        };\\n    });\\n}\\n\";","export default \"<div class=\\\"nui-thresholds-summary-test-harness\\\">\\n    <nui-thresholds-summary-test [data]=\\\"data\\\" [zones]=\\\"zones\\\" [startDate]=\\\"startDate\\\"></nui-thresholds-summary-test>\\n    <br>\\n    <h2>Data</h2>\\n    <input id=\\\"data-input\\\" type=\\\"text\\\" class=\\\"w-100 mt-5\\\" [ngModel]=\\\"data | json\\\" (ngModelChange)=\\\"dataChanged($event)\\\">\\n    <h2>Zones</h2>\\n    <textarea id=\\\"zones-input\\\" rows=\\\"13\\\" cols=\\\"30\\\" [ngModel]=\\\"zones | json\\\" (ngModelChange)=\\\"zonesChanged($event)\\\"></textarea>\\n</div>\\n\";","export default \"<div *ngFor=\\\"let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn\\\" class=\\\"d-flex\\\">\\n    <nui-chart class=\\\"w-100\\\" [chart]=\\\"spark.chart\\\" nuiChartCollectionId=\\\"example-collection-id\\\"></nui-chart>\\n    <div class=\\\"d-flex flex-column pl-2\\\">\\n        <nui-legend-series *ngIf=\\\"spark.chartSeriesSet[0]; let lineSeries\\\"\\n                           [interactive]=\\\"false\\\"\\n                           [descriptionSecondary]=\\\"lineSeries.name\\\">\\n            <nui-rich-legend-tile [unitLabel]=\\\"lineSeries.units\\\"\\n                                  [value]=\\\"chartAssist.getHighlightedValue(lineSeries, 'y')\\\"\\n                                  [backgroundColor]=\\\"statusBgColors.get(chartAssist.getHighlightedValue(lineSeries, 'status'))\\\"\\n                                  [attr.data-title]=\\\"chartAssist.getHighlightedValue(lineSeries, 'status')\\\">\\n                <nui-icon *ngIf=\\\"chartAssist.getHighlightedValue(lineSeries, 'status'); let status\\\"\\n                          iconSize=\\\"small\\\"\\n                          [icon]=\\\"statusIcons[status]\\\"\\n                          leftEdge></nui-icon>\\n            </nui-rich-legend-tile>\\n        </nui-legend-series>\\n    </div>\\n</div>\\n\";","export default \"<h1>Thresholds</h1>\\n<p>\\n    Unlike in <code>novajs</code> charts, threshold functionality is not built into the chart component.\\n    To get threshold specific elements on your chart you need separate data series that will be used by generic\\n    renderers such as the\\n    <code><a href=\\\"../classes/BarRenderer.html\\\" target=\\\"_blank\\\">BarRenderer</a></code> to\\n    display the threshold visualizations. The process of creating the data series needed for thresholds\\n    consists mainly of the following:\\n</p>\\n<ol>\\n    <li>Creating one or more zone series that define the threshold areas</li>\\n    <li>Injecting the zone data into the standard data series to provide access to this information from the legend, tooltips, etc.</li>\\n    <li>Creating the threshold series that actually visualize the thresholds on the chart</li>\\n    <li>\\n        Creating additional visual elements such as side indicators and horizontal lines indicating\\n        the start and end of each threshold zone\\n    </li>\\n</ol>\\n<p>\\n    To help you with all of this, we've built a\\n    <code><a href=\\\"../injectables/ThresholdsService.html\\\" target=\\\"_blank\\\">ThresholdsService</a></code>\\n    that does the most common tasks in terms of threshold data calculation and new series generation.\\n</p>\\n<p>\\n    Sound complicated still?\\n</p>\\n<p>\\n    Let's give it a try. Check out the inline comments of the following example.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"thresholds-basic\\\"\\n                     exampleTitle=\\\"Basic Thresholds For Line Chart\\\">\\n    <nui-thresholds-basic-example></nui-thresholds-basic-example>\\n</nui-example-wrapper>\\n\\n<p>\\n    For the above example we used\\n    <code><a href=\\\"../classes/TimeIntervalScale.html\\\" target=\\\"_blank\\\">TimeIntervalScale</a></code> for the\\n    horizontal axis, but it can easily be replaced with a continuous\\n    <code><a href=\\\"../classes/TimeScale.html\\\" target=\\\"_blank\\\">TimeScale</a></code> if needed. The\\n    service will do more precise calculations of background colored areas for a continuous scale. For an example\\n    of this, see the <strong>Thresholds Summary</strong> demo farther down the page.\\n</p>\\n\\n<h2>Spark Chart With Thresholds</h2>\\n<p>\\n    The process is similar for a spark chart. To see how, take a look at the inline comments of the example below.\\n</p>\\n<nui-example-wrapper filenamePrefix=\\\"thresholds-spark\\\"\\n                     exampleTitle=\\\"Thresholds For Spark Charts\\\">\\n    <nui-thresholds-spark-example></nui-thresholds-spark-example>\\n</nui-example-wrapper>\\n\\n<nui-message type=\\\"info\\\" [allowDismiss]=\\\"false\\\">\\n    When having multiple series per spark, you need to call\\n    <code><a href=\\\"../classes/SparkChartAssist.html#updateSparks\\\" target=\\\"_blank\\\">updateSparks()</a></code>\\n    method of <code><a href=\\\"../classes/SparkChartAssist.html\\\" target=\\\"_blank\\\">SparkChartAssist</a></code>\\n    instead of <code><a href=\\\"../classes/SparkChartAssist.html#update\\\" target=\\\"_blank\\\">update()</a></code>\\n    as usual. <strong>For general information about implementing spark charts, please see the spark chart page\\n    <a href=\\\"../additional-documentation/spark.html\\\" target=\\\"_parent\\\">here</a></strong>.\\n</nui-message>\\n\\n<h2>Thresholds Summary</h2>\\n<p>\\n    If you want to add an area below the main chart that displays a summary of the threshold data from multiple series,\\n    you can add a second <code><a href=\\\"../components/ChartComponent.html\\\" target=\\\"_blank\\\">nui-chart</a></code>\\n    to the page with the help of an additional instance of\\n    <code><a href=\\\"../classes/ChartAssist.html\\\" target=\\\"_blank\\\">ChartAssist</a></code>. To configure each\\n    of the chart grids to have the correct appearance you can use the\\n    <code><a href=\\\"../miscellaneous/functions.html#thresholdsTopGridConfig\\\" target=\\\"_blank\\\">thresholdsTopGridConfig</a></code>\\n    function for the main chart grid and\\n    the <code><a href=\\\"../miscellaneous/functions.html#thresholdsSummaryGridConfig\\\" target=\\\"_blank\\\">thresholdsSummaryGridConfig</a></code>\\n    function for the summary chart grid.\\n</p>\\n<p>\\n    In order to synchronize the behaviors of the summary chart with the main chart's various legend\\n    interaction behaviors, you can invoke ChartAssist's\\n    <code><a href=\\\"../classes/ChartAssist.html#syncWithChartAssist\\\" target=\\\"_blank\\\">syncWithChartAssist</a></code>\\n    method on the summary chart assist passing a reference to the main chart assist.\\n</p>\\n<p>\\n    The rest of the process is very similar to what's been shown in the previous examples. For more details\\n    about how to implement the summary chart take a look at the inline comments of the example source below.\\n</p>\\n<nui-message type=\\\"warning\\\" [allowDismiss]=\\\"false\\\">\\n    <strong>Note:</strong> By UX design, the threshold visualizations on the main chart of the following example are\\n    only displayed when a series is either hovered on the legend or is the only series selected on the legend. This\\n    behavior is meant to keep the visualizations focused on the primary data and to allow the user to inspect\\n    the secondary threshold data of each series via the legend if desired.\\n</nui-message>\\n<nui-example-wrapper filenamePrefix=\\\"thresholds-summary\\\" exampleTitle=\\\"Thresholds Summary\\\">\\n    <nui-thresholds-summary-example></nui-thresholds-summary-example>\\n</nui-example-wrapper>\\n\\n<p>\\n    Easy! Isn't it?\\n</p>\\n\";"],"sourceRoot":"webpack:///"}