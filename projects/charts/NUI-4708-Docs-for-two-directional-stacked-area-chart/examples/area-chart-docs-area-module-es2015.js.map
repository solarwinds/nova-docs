{"version":3,"sources":["./examples/components/demo/chart-types/area/test/area-chart-test.component.ts","./examples/components/demo/chart-types/area/area-chart-basic/area-chart-basic-example.component.ts","./examples/components/demo/chart-types/area/area-chart-stack/area-chart-stack-example.component.ts","./examples/components/demo/chart-types/area/area-chart-vertical/area-chart-vertical-example.component.ts","./examples/components/demo/chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component.ts","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?5b63","./examples/components/demo/chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts","webpack:///./examples/components/demo/chart-types/area/area-chart-vertical/area-chart-vertical-example.component.less?a2f5","./examples/components/demo/chart-types/area/chart-docs-area.module.ts","./examples/components/demo/chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts","./examples/components/demo/chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.ts","./examples/components/demo/chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.ts","./examples/components/demo/chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.ts","./examples/components/demo/chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.ts","./examples/components/demo/chart-types/area/chart-docs-area.component.ts"],"names":[],"mappings":"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","file":"area-chart-docs-area-module-es2015.js","sourcesContent":["import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"area-chart-test\",\n    templateUrl: \"./area-chart-test.component.html\",\n})\nexport class AreaChartTestComponent {\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { AreaAccessors, areaGrid, AreaRenderer, Chart, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-basic-example\",\n    templateUrl: \"./area-chart-basic-example.component.html\",\n})\nexport class AreaChartBasicExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements\n        this.chart = new Chart(areaGrid());\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    stackedAreaAccessors,\n    TimeScale,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-stack-example\",\n    templateUrl: \"./area-chart-stack-example.component.html\",\n})\nexport class AreaChartStackExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series' numeric values on the same progression domain\n        this.chartAssist = new ChartAssist(this.chart, stackedArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors =  stackedAreaAccessors();\n        // 'y1' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named 'value',so we'll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    XYGrid,\n    XYGridConfig,\n} from \"@nova-ui/charts\";\n\n@Component({\n    selector: \"area-chart-vertical-example\",\n    templateUrl: \"./area-chart-vertical-example.component.html\",\n    styleUrls: [\"./area-chart-vertical-example.component.less\"],\n})\nexport class AreaChartVerticalExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        const gridConfig = new XYGridConfig();\n        // Disable interaction because we don't support a horizontal interaction line yet\n        gridConfig.interactionPlugins = false;\n        gridConfig.axis.left.gridTicks = false;\n        gridConfig.axis.left.tickSize = 0;\n        gridConfig.axis.bottom.gridTicks = true;\n        gridConfig.axis.left.fit = true;\n        gridConfig.axis.bottom.fit = true;\n        gridConfig.axis.bottom.tickSize = 0;\n        gridConfig.axis.left.tickSize = 5;\n        gridConfig.dimension.padding.left = 2; // 2 for border\n        gridConfig.borders.left.visible = true;\n        gridConfig.borders.bottom.visible = false;\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        accessors.data.y = (d, i) => i;\n        accessors.data.x0 = () => 0;\n        accessors.data.x1 = (d) => d.value;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        scales.x.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { value: 12 },\n                { value: 65 },\n                { value: 30 },\n                { value: 40 },\n                { value: 90 },\n                { value: 23 },\n                { value: 12 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"area-chart-bi-directional-stacked-visual-test\",\n    template: `\n        <area-chart-bi-directional-stacked-test [inverted]=\"false\"></area-chart-bi-directional-stacked-test>\n        <area-chart-bi-directional-stacked-test [inverted]=\"true\"></area-chart-bi-directional-stacked-test>\n    `,\n})\nexport class AreaChartBiDirectionalStackedVisualTestComponent {\n}\n","var map = {\n\t\"./area-chart-basic/area-chart-basic-example.component.html\": \"piB5\",\n\t\"./area-chart-basic/area-chart-basic-example.component.ts\": \"MjEx\",\n\t\"./area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.html\": \"fc/A\",\n\t\"./area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.ts\": \"HcfY\",\n\t\"./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.html\": \"vA/m\",\n\t\"./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.ts\": \"yWmf\",\n\t\"./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component.ts\": \"6NCN\",\n\t\"./area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.html\": \"RZLy\",\n\t\"./area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.ts\": \"nX1H\",\n\t\"./area-chart-bi-directional/area-chart-bi-directional-example.component.html\": \"gPTH\",\n\t\"./area-chart-bi-directional/area-chart-bi-directional-example.component.ts\": \"bkcT\",\n\t\"./area-chart-stack-percentage/area-chart-stack-percentage-example.component.html\": \"+NPZ\",\n\t\"./area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts\": \"Mr0e\",\n\t\"./area-chart-stack/area-chart-stack-example.component.html\": \"cOoB\",\n\t\"./area-chart-stack/area-chart-stack-example.component.ts\": \"5qbj\",\n\t\"./area-chart-variable-baseline/area-chart-variable-baseline-example.component.html\": \"2+7X\",\n\t\"./area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts\": \"3OzY\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.html\": \"gtoS\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.less\": \"kxlW\",\n\t\"./area-chart-vertical/area-chart-vertical-example.component.ts\": \"ahTr\",\n\t\"./chart-docs-area.component.html\": \"e7Ie\",\n\t\"./chart-docs-area.component.ts\": \"TdCo\",\n\t\"./chart-docs-area.module.ts\": \"VNrK\",\n\t\"./test/area-chart-test.component.html\": \"Hyit\",\n\t\"./test/area-chart-test.component.ts\": \"zWfn\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"QNbB\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedAreaAccessors,\n    stackedPercentageArea,\n    TimeScale,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-stack-percentage-example\",\n    templateUrl: \"./area-chart-stack-percentage-example.component.html\",\n})\nexport class AreaChartStackPercentageExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series' numeric values on the same progression domain.\n        // In this case we use the 'stackedPercentageArea' preprocessor to scale each series area as a percentage of the sum of all corresponding series values.\n        this.chartAssist = new ChartAssist(this.chart, stackedPercentageArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors =  stackedAreaAccessors();\n        // 'y1' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named 'value',so we'll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"series-2\",\n            name: \"Series 2\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n        {\n            id: \"series-3\",\n            name: \"Series 3\",\n            data: [\n                { x: moment(\"2016-12-25T11:45:29.909Z\", format), value: 17 },\n                { x: moment(\"2016-12-25T12:10:29.909Z\", format), value: 42 },\n                { x: moment(\"2016-12-25T12:50:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T13:15:29.909Z\", format), value: 47 },\n                { x: moment(\"2016-12-25T13:40:29.909Z\", format), value: 90 },\n                { x: moment(\"2016-12-25T13:55:29.909Z\", format), value: 21 },\n                { x: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { x: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { x: moment(\"2016-12-25T15:00:29.909Z\", format), value: 454 },\n                { x: moment(\"2016-12-25T15:25:29.909Z\", format), value: 550 },\n                { x: moment(\"2016-12-25T15:45:29.909Z\", format), value: 7 },\n                { x: moment(\"2016-12-25T16:10:29.909Z\", format), value: 5 },\n                { x: moment(\"2016-12-25T16:30:29.909Z\", format), value: 110 },\n                { x: moment(\"2016-12-25T16:45:29.909Z\", format), value: 550 },\n            ],\n        },\n    ];\n}\n","export default \".chart {\\n  height: 275px;\\n  width: 300px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyZWEtY2hhcnQtdmVydGljYWwtZXhhbXBsZS5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxZQUFBO0FBQ0oiLCJmaWxlIjoiYXJlYS1jaGFydC12ZXJ0aWNhbC1leGFtcGxlLmNvbXBvbmVudC5sZXNzIiwic291cmNlc0NvbnRlbnQiOlsiLmNoYXJ0IHtcbiAgICBoZWlnaHQ6IDI3NXB4O1xuICAgIHdpZHRoOiAzMDBweDtcbn1cbiJdfQ== */\";","/* eslint-disable max-len */\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiDocsModule, NuiIconModule, NuiMessageModule, SrlcStage } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { AreaChartBasicExampleComponent } from \"./area-chart-basic/area-chart-basic-example.component\";\nimport { AreaChartBiDirectionalStackedInvertedExampleComponent } from \"./area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component\";\nimport { AreaChartBiDirectionalStackedTestComponent } from \"./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component\";\nimport { AreaChartBiDirectionalStackedVisualTestComponent }\n    from \"./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component\";\nimport { AreaChartBiDirectionalStackedExampleComponent } from \"./area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component\";\nimport { AreaChartBiDirectionalExampleComponent } from \"./area-chart-bi-directional/area-chart-bi-directional-example.component\";\nimport { AreaChartStackPercentageExampleComponent } from \"./area-chart-stack-percentage/area-chart-stack-percentage-example.component\";\nimport { AreaChartStackExampleComponent } from \"./area-chart-stack/area-chart-stack-example.component\";\nimport { AreaChartVariableBaselineExampleComponent } from \"./area-chart-variable-baseline/area-chart-variable-baseline-example.component\";\nimport { AreaChartVerticalExampleComponent } from \"./area-chart-vertical/area-chart-vertical-example.component\";\nimport { ChartDocsAreaComponent } from \"./chart-docs-area.component\";\nimport { AreaChartTestComponent } from \"./test/area-chart-test.component\";\n/* eslint-enable max-len */\n\nconst exampleRoutes: Routes = [\n    {\n        path: \"\",\n        component: ChartDocsAreaComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: \"basic\",\n        component: AreaChartBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"variable-baseline\",\n        component: AreaChartVariableBaselineExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"vertical\",\n        component: AreaChartVerticalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"test\",\n        component: AreaChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"stacked\",\n        component: AreaChartStackExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"bi-directional\",\n        component: AreaChartBiDirectionalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"bi-directional-stacked\",\n        component: AreaChartBiDirectionalStackedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"bi-directional-stacked-inverted\",\n        component: AreaChartBiDirectionalStackedInvertedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: \"bi-directional-stacked-test\",\n        component: AreaChartBiDirectionalStackedVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsAreaComponent,\n        AreaChartBasicExampleComponent,\n        AreaChartBiDirectionalExampleComponent,\n        AreaChartBiDirectionalStackedExampleComponent,\n        AreaChartBiDirectionalStackedInvertedExampleComponent,\n        AreaChartVariableBaselineExampleComponent,\n        AreaChartVerticalExampleComponent,\n        AreaChartStackExampleComponent,\n        AreaChartStackPercentageExampleComponent,\n        AreaChartTestComponent,\n        AreaChartBiDirectionalStackedTestComponent,\n        AreaChartBiDirectionalStackedVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () => (<any>require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/) },\n    ],\n})\nexport class ChartDocsAreaModule {\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { AreaAccessors, areaGrid, AreaRenderer, Chart, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale } from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-variable-baseline-example\",\n    templateUrl: \"./area-chart-variable-baseline-example.component.html\",\n})\nexport class AreaChartVariableBaselineExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements\n        const grid = areaGrid();\n        // set the 'axis.left.fit' property to 'true' to accommodate the extra width required by the negative sign on the left axis labels\n        grid.config().axis.left.fit = true;\n        // pass the configured grid to the chart's constructor\n        this.chart = new Chart(grid);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // 'y0' defines access to the baseline values we want to visualize, in other words, where the area starts\n        accessors.data.y0 = (d) => d.start;\n        // 'y1' defines access to the top line values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.end;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(d => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Finally, pass the series set to the chart's update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"series-1\",\n            name: \"Series 1\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), start: -58, end: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), start: -5, end: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), start: -40, end: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), start: -30, end: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), start: -10, end: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), start: -47, end: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), start: -58, end: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), start: 0, end: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), start: -25, end: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), start: -20, end: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), start: 5, end: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), start: -20, end: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), start: 15, end: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), start: -15, end: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors, areaGrid, AreaRenderer, Chart, ChartAssist, IAreaAccessors, IChartSeries, IXYScales, LinearScale, TimeScale,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-bi-directional-example\",\n    templateUrl: \"./area-chart-bi-directional-example.component.html\",\n})\nexport class AreaChartBiDirectionalExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist helps with synchronizing hover events between the chart and the legend\n        this.chartAssist = new ChartAssist(this.chart);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors1 = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors1.data.x = (d) => d.timeStamp;\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors1.data.y0 = () => 0;\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors1.data.y1 = (d) => d.value;\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors1.data.y = accessors1.data.absoluteY1;\n        // Even though we're using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        // Take a look also at the marker assignment for the second accessors instance below.\n        accessors1.series.marker = this.chartAssist.markers.get;\n\n        /**\n         * This second AreaAccessors instance flips the sign of the value so that\n         * the area is displayed below the baseline.\n         */\n        const accessors2 = new AreaAccessors();\n        accessors2.data.x = (d) => d.timeStamp;\n        accessors2.data.y0 = () => 0;\n        // Here's where we flip the sign of the value so that the area is displayed below the baseline\n        accessors2.data.y1 = (d) => -d.value;\n        // Both series use the same color accessor so that the second series will use the second color in the sequence\n        accessors2.series.color = accessors1.series.color;\n        // 'y' defines the position of the marker\n        accessors2.data.y = accessors2.data.absoluteY1;\n        // Even though we're using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        accessors2.series.marker = this.chartAssist.markers.get;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        /**\n         * This tick formatter will format values on the left axis as positive both above and baseline as\n         * well as in the legend. For legend setup, see 'chartAssist.getHighlightedValue' usage in the\n         * template file.\n         */\n        scales.y.formatters.tick = (value: number) => `${Math.abs(value)}`;\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: Partial<IChartSeries<IAreaAccessors>>[] = getData().map(d => ({\n            ...d,\n            renderer,\n            scales,\n        }));\n\n        // In this case, each series has its own accessors instance.\n        seriesSet[0].accessors = accessors1;\n        seriesSet[1].accessors = accessors2;\n\n        // Finally, pass the series set to the chart's update method.\n        this.chartAssist.update(seriesSet as IChartSeries<IAreaAccessors>[]);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"up\",\n            name: \"Up Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"down\",\n            name: \"Dn Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-bi-directional-stacked-example\",\n    templateUrl: \"./area-chart-bi-directional-stacked-example.component.html\",\n})\nexport class AreaChartBiDirectionalStackedExampleComponent implements OnInit {\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    public ngOnInit(): void {\n        // The 'updateDomainForEmptySeries' property on each chart's configuration allows the domains for the chart\n        // to update even if it's empty. This keeps the empty chart's domains synchronized with the opposite chart\n        // in case the opposite chart's domain changes.\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistBottom = new ChartAssist(this.chartBottom, stackedArea, this.chartAssistTop.palette, this.chartAssistTop.markers);\n        const accessors = this.createAccessors();\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // We use the same xScale instance on both charts to keep the charts' X domains in sync with each other\n        const xScale = new TimeScale();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scalesTop: IXYScales = {\n            x: xScale,\n            // Use the standard scale orientation on the top chart to stack the chart's series in an upward direction starting at the bottom\n            y: new LinearScale(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            // Invoke 'reverse' on the bottom y-axis scale to stack the chart's series in a downward direction starting at the top.\n            y: new LinearScale().reverse(),\n        };\n\n        // Here we assemble the complete chart series for both charts.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesTop,\n        }));\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] = getDataBottom().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesBottom,\n        }));\n\n        // We need to replace the default domain calculators to take into account the series on both charts\n        const topChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetBottom, getAutomaticDomain);\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetTop, getAutomaticDomain);\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. The chart that is directly\n     * associated with the series has to be invoked first.\n     */\n    public onSelectedChange(legendSeries: IChartAssistSeries<any>, value: boolean, currentChartAssist: ChartAssist): void {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n\n    private createAccessors() {\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        return accessors;\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"www-http-ingress\",\n            name: \"World Wide Web HTTP\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"mssql-server-ingress\",\n            name: \"MSSQL-Server\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"www-http-egress\",\n            name: \"World Wide Web HTTP\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 95 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"mssql-server-egress\",\n            name: \"MSSQL-Server\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 250 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { ChangeDetectorRef, Component, Input, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-bi-directional-stacked-test\",\n    templateUrl: \"./area-chart-bi-directional-stacked-test.component.html\",\n})\nexport class AreaChartBiDirectionalStackedTestComponent implements OnInit {\n    @Input()\n    public inverted = false; // cave mode!\n\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    constructor(public changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        // areaGrid returns an XYGrid configured for displaying an area chart's axes and other grid elements.\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistBottom = new ChartAssist(this.chartBottom, stackedArea, this.chartAssistTop.palette, this.chartAssistTop.markers);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors.data.y = accessors.data.absoluteY1;\n        // Even though we're using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        // Take a look also at the marker assignment for the second accessors instance below.\n        accessors.series.marker = this.chartAssistTop.markers.get;\n        accessors.series.color = this.chartAssistTop.palette.standardColors.get;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        const xScale = new TimeScale();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This test demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scalesTop: IXYScales = {\n            x: xScale,\n            y: this.inverted ? new LinearScale().reverse() : new LinearScale(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            y: this.inverted ? new LinearScale() : new LinearScale().reverse(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesTop,\n        }));\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] = getDataBottom().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesBottom,\n        }));\n\n        // We need to replace domain calculators to reflect series on both charts\n        const topChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetBottom, getAutomaticDomain);\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetTop, getAutomaticDomain);\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. Chart that is directly associated with the series has to be\n     * invoked first.\n     *\n     * @param legendSeries\n     * @param value\n     * @param currentChartAssist\n     */\n    public onSelectedChange(legendSeries: IChartAssistSeries<any>, value: boolean, currentChartAssist: ChartAssist) {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"up1\",\n            name: \"Up Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"down1\",\n            name: \"Dn Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"up2\",\n            name: \"Up Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 95 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"down2\",\n            name: \"Dn Speed\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 250 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from \"@nova-ui/charts\";\nimport moment from \"moment/moment\";\n\n@Component({\n    selector: \"area-chart-bi-directional-stacked-inverted-example\",\n    templateUrl: \"./area-chart-bi-directional-stacked-inverted-example.component.html\",\n})\nexport class AreaChartBiDirectionalStackedInvertedExampleComponent implements OnInit {\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    public ngOnInit(): void {\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), { updateDomainForEmptySeries: true });\n        this.chartAssistBottom = new ChartAssist(this.chartBottom, stackedArea, this.chartAssistTop.palette, this.chartAssistTop.markers);\n        const accessors = this.createAccessors();\n        const renderer = new AreaRenderer();\n        const xScale = new TimeScale();\n\n        /**\n         * Scale Reversal for Inverted Stacks\n         */\n        const scalesTop: IXYScales = {\n            x: xScale,\n            // Invoke 'reverse' on the top chart's y-axis scale to stack the chart's series in a downward direction starting at the top.\n            y: new LinearScale().reverse(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            // Use the standard scale orientation on the bottom chart to stack the chart's series in an upward direction starting at the bottom\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series for both charts.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesTop,\n        }));\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] = getDataBottom().map(d => ({\n            ...d,\n            renderer,\n            accessors,\n            scales: scalesBottom,\n        }));\n\n        // We need to replace the default domain calculators to take into account the series on both charts\n        const topChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetBottom, getAutomaticDomain);\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(() => seriesSetTop, getAutomaticDomain);\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. The chart that is directly\n     * associated with the series has to be invoked first.\n     */\n    public onSelectedChange(legendSeries: IChartAssistSeries<any>, value: boolean, currentChartAssist: ChartAssist): void {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n\n    private createAccessors() {\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart's input data set(s).\n        const accessors = new AreaAccessors();\n\n        // 'x' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n\n        // 'y0' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n\n        // 'y1' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n\n        // 'x' and 'y' accessors define the position of the marker. 'x' was already defined, so now we need to define 'y' as well.\n        // Notice that the 'y' is assigned the 'absoluteY1' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area's value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        return accessors;\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"www-http-ingress\",\n            name: \"World Wide Web HTTP\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"mssql-server-ingress\",\n            name: \"MSSQL-Server\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 70 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = \"YYYY-MM-DDTHH:mm:ssZ\";\n\n    return [\n        {\n            id: \"www-http-egress\",\n            name: \"World Wide Web HTTP\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 33 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 15 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 20 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 6 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 35 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 95 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 38 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 25 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 43 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 28 },\n            ],\n        },\n        {\n            id: \"mssql-server-egress\",\n            name: \"MSSQL-Server\",\n            data: [\n                { timeStamp: moment(\"2016-12-25T11:45:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T12:10:29.909Z\", format), value: 65 },\n                { timeStamp: moment(\"2016-12-25T12:50:29.909Z\", format), value: 30 },\n                { timeStamp: moment(\"2016-12-25T13:15:29.909Z\", format), value: 40 },\n                { timeStamp: moment(\"2016-12-25T13:40:29.909Z\", format), value: 60 },\n                { timeStamp: moment(\"2016-12-25T13:55:29.909Z\", format), value: 23 },\n                { timeStamp: moment(\"2016-12-25T14:20:29.909Z\", format), value: 12 },\n                { timeStamp: moment(\"2016-12-25T14:40:29.909Z\", format), value: 250 },\n                { timeStamp: moment(\"2016-12-25T15:00:29.909Z\", format), value: 45 },\n                { timeStamp: moment(\"2016-12-25T15:25:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T15:45:29.909Z\", format), value: 75 },\n                { timeStamp: moment(\"2016-12-25T16:10:29.909Z\", format), value: 50 },\n                { timeStamp: moment(\"2016-12-25T16:30:29.909Z\", format), value: 85 },\n                { timeStamp: moment(\"2016-12-25T16:45:29.909Z\", format), value: 55 },\n            ],\n        },\n    ];\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-docs-area\",\n    templateUrl: \"./chart-docs-area.component.html\",\n})\nexport class ChartDocsAreaComponent {\n}\n"],"sourceRoot":"webpack:///"}