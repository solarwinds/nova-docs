var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AreaAccessors.html",[0,0.088,1,3.57]],["body/classes/AreaAccessors.html",[0,0.106,1,5.478,2,1.51,3,0.24,4,0.225,5,0.225,6,7.036,7,2.364,8,1.683,9,6.034,10,0.247,11,0.498,12,1.157,13,1.244,14,1.489,15,4.291,16,4.752,17,1.198,18,7.812,19,1.449,20,0.005,21,0.64,22,0.914,23,3.813,24,0.296,25,6.665,26,6.12,27,6.665,28,0.306,29,4.095,30,4.437,31,3.208,32,2.859,33,2.457,34,1.395,35,2.452,36,2.489,37,2.405,38,1.617,39,0.355,40,0.004,41,0.974,42,1.901,43,6.063,44,5.478,45,6.063,46,6.063,47,1.901,48,6.063,49,5.478,50,6.063,51,6.063,52,1.953,53,2.821,54,2.21,55,1.617,56,2.859,57,2.22,58,7.263,59,6.059,60,4.113,61,6.063,62,4.113,63,6.063,64,4.75,65,4.75,66,4.75,67,4.75,68,4.75,69,4.75,70,4.75,71,4.75,72,2.8,73,3.208,74,3.208,75,1.119,76,3.58,77,3.58,78,0.003,79,0.004,80,0.003]],["title/classes/AreaGridConfig.html",[0,0.088,81,4.561]],["body/classes/AreaGridConfig.html",[0,0.103,2,1.469,3,0.233,4,0.219,5,0.219,10,0.24,11,0.489,14,2.067,17,1.4,20,0.005,24,0.367,28,0.233,39,0.233,41,0.868,75,1.285,78,0.003,79,0.004,80,0.003,81,6.876,82,7.675,83,2.214,84,3.715,85,0.98,86,5.957,87,6.655,88,6.35,89,1.919,90,1.263,91,4.49,92,5.382,93,6.35,94,1.806,95,2.914,96,3.722,97,2.438,98,5.643,99,5.643,100,3.833,101,3.664,102,2.057,103,3.586,104,2.028,105,4.926,106,4.105,107,2.163,108,0.898,109,2.993,110,2.056,111,6.03,112,3.526,113,3.526,114,2.244,115,4.066,116,4.621,117,1.735,118,5.708,119,4.001,120,4.175,121,4.621,122,2.906,123,4.621,124,2.057,125,4.621,126,2.616,127,4.175,128,5.096,129,2.617,130,5.598,131,4.378,132,3.294,133,4.192,134,0.545,135,4.001,136,4.378,137,2.724,138,3.593,139,4.378,140,1.216,141,4.378,142,3.85,143,2.049,144,2.782,145,5.334,146,2.782,147,5.954,148,5.954,149,1.41,150,2.974]],["title/classes/AxisConfig.html",[0,0.088,111,3.422]],["body/classes/AxisConfig.html",[0,0.103,2,1.469,3,0.233,4,0.219,5,0.219,8,1.654,10,0.24,11,0.489,17,1.365,19,1.41,20,0.005,21,0.623,22,0.89,24,0.367,28,0.301,39,0.233,55,1.573,78,0.003,79,0.004,80,0.003,84,3.715,85,0.98,94,1.845,107,2.113,108,0.871,111,5.158,117,1.833,118,5.708,124,2.057,132,3.772,140,1.942,151,9.902,152,5.171,153,4.691,154,4.691,155,3.807,156,4.691,157,4.691,158,2.514,159,1.654,160,4.691,161,2.58,162,5.334,163,5.334,164,1.275,165,5.954,166,4.568,167,4.127,168,4.239,169,8.494,170,4.926,171,5.954,172,4.926,173,5.954,174,5.334,175,1.547,176,5.954,177,5.334,178,2.669,179,0.771,180,2.974,181,3.202,182,3.202,183,1.035,184,5.012,185,5.954,186,5.954,187,5.954,188,5.954,189,5.954,190,5.954,191,7.675,192,1.318,193,7.675,194,1.336,195,5.954,196,5.954,197,4.001]],["title/classes/BarAccessors.html",[0,0.088,198,3.176]],["body/classes/BarAccessors.html",[0,0.096,2,1.375,3,0.218,4,0.205,5,0.205,7,2.152,8,1.584,10,0.385,11,0.468,12,1.27,13,1.389,14,1.356,15,3.908,16,4.544,17,1.266,19,1.32,20,0.005,21,0.583,22,0.833,23,3.588,24,0.332,28,0.322,29,3.853,30,4.176,31,2.921,32,2.604,33,2.379,34,1.313,38,1.473,39,0.322,40,0.004,41,0.99,52,1.838,53,2.655,54,2.013,55,1.943,56,2.604,57,1.234,72,2.55,73,2.921,74,2.921,75,1.303,76,3.26,77,3.26,78,0.003,79,0.004,80,0.003,108,0.931,115,3.05,144,2.604,159,1.201,164,1.129,192,2.217,198,4.587,199,7.237,200,5.164,201,5.529,202,6.586,203,5.457,204,4.993,205,4.766,206,4.673,207,4.611,208,4.611,209,2.471,210,2.783,211,6.385,212,3.108,213,3.108,214,2.498,215,4.611,216,2.997,217,4.611,218,2.701,219,6.082,220,4.611,221,4.611,222,3.413,223,6.082,224,4.611,225,2.507,226,6.082,227,2.026,228,6.082,229,6.082,230,4.611,231,4.611,232,6.082,233,4.611,234,1.723,235,4.611,236,4.326,237,4.611,238,4.611,239,4.611,240,1.674,241,1.698,242,4.941,243,4.611,244,4.611,245,3.165,246,4.611,247,1.603,248,4.611,249,4.611,250,2.152]],["title/classes/BarGridConfig.html",[0,0.088,251,4.561]],["body/classes/BarGridConfig.html",[0,0.1,2,1.433,3,0.228,4,0.213,5,0.213,10,0.235,11,0.481,14,2.043,17,1.395,20,0.005,24,0.365,28,0.228,39,0.228,41,0.855,75,1.273,78,0.003,79,0.004,80,0.003,83,2.188,84,3.624,85,0.956,86,5.863,87,6.463,88,6.25,90,1.243,91,4.419,92,5.297,93,6.25,94,1.799,95,2.868,96,3.688,97,2.415,98,5.554,99,5.554,100,3.773,101,3.606,102,2.024,103,3.529,104,1.996,105,4.806,106,4.066,107,2.153,108,0.893,109,2.965,110,2.04,111,5.974,112,3.493,113,3.375,114,2.223,115,4.045,116,4.509,117,1.882,118,6.193,119,3.904,120,4.073,121,4.509,122,2.835,123,4.509,124,2.382,125,4.509,126,2.552,127,4.073,128,5.049,129,2.593,130,5.546,131,4.271,132,3.263,133,4.153,134,0.532,135,3.904,136,4.271,137,2.657,138,3.506,139,4.271,140,1.186,141,4.271,142,3.756,143,1.999,144,2.714,145,5.204,146,3.529,150,2.901,161,2.172,251,6.768,252,6.25,253,1.838,254,3.529,255,3.319,256,4.806,257,4.509,258,6.25,259,5.204,260,5.204,261,5.204,262,5.809]],["title/classes/BarHighlightStrategy.html",[0,0.088,263,3.176]],["body/classes/BarHighlightStrategy.html",[0,0.076,2,1.081,3,0.172,4,0.161,5,0.161,8,1.343,10,0.369,12,0.926,13,1.253,14,1.066,17,1.163,19,1.978,20,0.005,21,0.873,22,1.248,24,0.346,28,0.383,38,1.158,39,0.244,54,1.582,55,1.647,57,1.849,75,0.628,78,0.002,79,0.003,80,0.002,85,0.721,89,1.096,94,1.63,104,1.158,108,0.873,117,0.895,128,2.488,129,1.278,134,0.665,146,2.047,159,0.944,164,1.226,175,1.593,179,0.94,183,0.761,192,1.921,209,2.426,210,2.188,212,1.852,225,1.899,227,2.626,234,1.355,241,1.335,247,1.792,255,1.925,263,3.889,264,7.18,265,7.18,266,5.611,267,3.4,268,4.244,269,1.694,270,4.03,271,5.584,272,4.03,273,4.691,274,3.925,275,7.775,276,7.255,277,7.081,278,4.381,279,4.262,280,2.004,281,1.144,282,5.584,283,1.928,284,5.157,285,1.967,286,5.584,287,5.584,288,5.584,289,5.584,290,2.06,291,3.267,292,3.762,293,5.604,294,4.491,295,4.143,296,4.143,297,2.495,298,4.381,299,2.178,300,5.584,301,4.381,302,3.762,303,3.042,304,4.381,305,2.644,306,4.549,307,4.381,308,3.072,309,0.883,310,1.207,311,3.925,312,3.925,313,3.4,314,3.4,315,2.833,316,2.833,317,1.297,318,6.539,319,6.003,320,1.964,321,4.381,322,6.233,323,3.625,324,3.625,325,3.925,326,4.244,327,2.138,328,1.335,329,2.944,330,4.381,331,2.24,332,2.188,333,2.495,334,1.29,335,5.157,336,2.373,337,1.888,338,3.925,339,3.072,340,3.925,341,3.625,342,3.925,343,2.733,344,3.925,345,3.925,346,3.925,347,3.221,348,3.925,349,3.925,350,6.5,351,3.925,352,3.925,353,3.925,354,3.925,355,3.925,356,3.925,357,3.925,358,6.5,359,7.482,360,7.18,361,3.925,362,3.925,363,3.925,364,3.925,365,3.925,366,3.925,367,3.925,368,1.355,369,3.925,370,5.584,371,6.909,372,5.584,373,7.903,374,4.381,375,4.381,376,4.381,377,3.925,378,4.381,379,2.563,380,4.381,381,4.381,382,4.381,383,4.381,384,1.126,385,3.925,386,4.381,387,4.381,388,7.903,389,4.381,390,4.381,391,4.381,392,4.381,393,4.381,394,2.356,395,4.189,396,2.944,397,4.381,398,3.625,399,1.608,400,3.221,401,3.925,402,3.925]],["title/classes/BarHorizontalGridConfig.html",[0,0.088,403,4.561]],["body/classes/BarHorizontalGridConfig.html",[0,0.099,2,1.418,3,0.225,4,0.211,5,0.211,10,0.232,11,0.478,14,2.032,17,1.392,20,0.005,24,0.364,28,0.225,39,0.225,41,0.849,75,1.268,78,0.003,79,0.004,80,0.003,83,2.176,84,3.586,85,0.946,86,5.823,87,6.447,88,6.207,90,1.235,91,4.389,92,5.261,93,6.207,94,1.797,95,2.848,96,3.673,97,2.406,98,5.516,99,5.516,100,3.747,101,3.581,102,2.01,103,3.505,104,1.982,105,4.756,106,4.05,107,2.148,108,0.891,109,2.953,110,2.033,111,5.95,112,3.479,113,3.361,114,2.214,115,4.036,116,4.461,117,1.876,118,5.95,119,3.863,120,4.031,121,4.461,122,2.806,123,4.461,124,2.524,125,4.461,126,2.525,127,4.031,128,5.028,129,2.583,130,5.523,131,4.226,132,3.25,133,4.136,134,0.527,135,3.863,136,4.226,137,2.63,138,3.469,139,4.226,140,1.174,141,4.226,142,3.717,143,1.978,144,2.685,146,3.505,150,2.871,161,2.402,252,6.207,253,1.825,254,3.505,255,3.296,256,4.756,257,4.461,258,6.207,259,5.15,260,5.15,261,5.15,403,6.721,404,4.136,405,5.748,406,5.748,407,4.756,408,5.15]],["title/classes/BarSeriesHighlightStrategy.html",[0,0.088,409,4.561]],["body/classes/BarSeriesHighlightStrategy.html",[0,0.088,2,1.254,3,0.199,4,0.187,5,0.187,8,1.489,10,0.205,12,0.649,13,1.355,14,1.237,17,1.227,19,2.087,20,0.005,21,0.922,22,1.317,24,0.353,28,0.376,38,1.343,39,0.199,54,1.835,55,1.343,57,1.53,75,0.728,78,0.003,79,0.003,80,0.003,85,0.837,89,1.271,94,1.691,104,1.343,108,0.879,117,1.412,134,0.633,146,2.375,159,1.095,164,1.21,175,1.699,179,1.017,183,0.883,192,1.866,209,2.528,210,2.538,212,2.149,225,2.106,227,2.564,255,2.233,264,7.523,265,7.523,266,5.879,267,3.945,268,4.594,269,1.878,270,4.469,271,6.192,272,4.469,273,5.078,274,4.554,275,8.147,279,4.441,280,1.752,281,1.268,282,6.192,283,2.137,284,5.719,285,1.909,286,6.192,287,6.192,288,6.192,289,6.192,290,2.174,292,4.171,293,5.792,294,4.74,295,4.341,296,4.341,297,2.6,299,2.323,300,6.192,302,4.171,303,3.374,305,3.067,306,4.766,311,4.554,312,4.554,313,3.945,314,3.945,317,1.504,318,6.973,320,2.278,326,4.594,327,2.481,328,1.549,331,2.599,334,1.431,335,5.719,336,1.526,337,2.19,338,4.554,339,3.564,340,4.554,341,4.205,342,4.554,343,3.171,344,4.554,345,4.554,346,4.554,347,3.737,348,4.554,349,4.554,350,7.036,351,4.554,352,4.554,353,4.554,354,4.554,355,4.554,356,4.554,357,4.554,358,6.192,359,7.036,360,6.498,361,4.554,362,4.554,363,4.554,364,4.554,365,4.554,366,4.554,367,4.554,368,1.572,369,4.554,370,6.192,371,5.719,372,4.554,398,4.205,399,1.866,400,5.082,401,4.554,402,4.554,409,6.192,410,4.554,411,2.137,412,5.083,413,5.083,414,5.083,415,5.083]],["title/classes/BarStatusGridConfig.html",[0,0.088,416,4.561]],["body/classes/BarStatusGridConfig.html",[0,0.099,2,1.418,3,0.225,4,0.211,5,0.211,10,0.232,11,0.478,14,1.399,17,1.37,19,1.361,20,0.005,21,0.601,22,0.859,24,0.377,28,0.225,39,0.225,41,0.849,75,1.268,78,0.003,79,0.004,80,0.003,83,2.176,84,3.586,87,6.447,90,0.946,94,1.797,95,2.848,96,3.673,97,2.406,98,5.516,99,5.516,100,3.747,101,3.581,102,2.01,103,3.505,104,1.982,106,4.05,107,2.148,108,0.891,109,2.953,110,2.033,111,5.95,112,3.479,113,3.361,114,2.214,115,4.036,116,4.461,117,1.876,118,5.613,119,3.863,120,4.031,121,4.461,122,2.806,123,4.461,124,2.372,125,4.461,126,3.296,127,4.031,128,5.028,129,2.583,130,5.523,131,4.226,132,3.25,133,4.136,134,0.527,135,3.863,136,4.226,137,2.63,138,3.469,139,4.226,140,1.532,141,4.226,142,3.717,143,2.582,144,2.685,161,2.759,164,0.789,252,6.207,256,4.756,257,4.461,303,3.662,407,4.756,408,5.15,416,6.721,417,2.502,418,4.681,419,5.748,420,6.721,421,5.15,422,7.502,423,5.748,424,5.748,425,5.748,426,5.748,427,5.748,428,5.748,429,5.15,430,5.748,431,5.748,432,3.363]],["title/classes/BarTooltipsPlugin.html",[0,0.088,433,4.561]],["body/classes/BarTooltipsPlugin.html",[0,0.104,2,1.485,3,0.236,4,0.221,5,0.221,10,0.243,11,0.492,12,0.987,14,1.465,17,1.423,19,1.83,20,0.005,21,0.808,22,1.155,24,0.368,28,0.303,39,0.236,41,0.875,78,0.003,79,0.004,80,0.003,90,1.483,94,1.871,107,1.968,108,0.825,109,2.008,110,1.711,112,3.038,115,4.222,143,2.071,144,2.812,175,1.954,179,1.256,247,1.731,269,2.1,283,1.861,291,3.155,297,2.16,303,2.938,418,4.822,433,6.925,434,7.729,435,5.578,436,3.237,437,6.768,438,5.999,439,2.762,440,5.999,441,4.39,442,5.999,443,2.949,444,3.084,445,6.395,446,2.256,447,2.762,448,6.993,449,6.019,450,5.393,451,3.755,452,4.221,453,2.892,454,5.393,455,2.071,456,3.892,457,5.393,458,5.999,459,2.288,460,4.672,461,5.393,462,5.393,463,4.426,464,1.485,465,2.969,466,3.755,467,5.393,468,5.393,469,4.672,470,5.393,471,3.755,472,3.755,473,3.755,474,3.755,475,6.019,476,1.808]],["title/components/BasicLegendTileComponent.html",[477,2.237,478,2.812]],["body/components/BasicLegendTileComponent.html",[0,0.119,3,0.271,4,0.254,5,0.254,20,0.005,21,0.951,28,0.271,39,0.271,78,0.003,79,0.004,80,0.003,90,1.598,477,3.704,478,5.229,479,4.788,480,5.72,481,7.552,482,4.513,483,6.194,484,3.927,485,6.543,486,6.543,487,5.716,488,3.549,489,4.391,490,5.489,491,5.259,492,7.552,493,5.087,494,7.552,495,5.366,496,3.536,497,5.377,498,4.173,499,4.173,500,3.718,501,4.173,502,3.819,503,3.536,504,4.173,505,3.819,506,4.173,507,3.624,508,4.173,509,3.819,510,4.173,511,3.536,512,4.173,513,3.819,514,4.173,515,3.819,516,4.173,517,3.819,518,4.173,519,3.927,520,3.718,521,4.044,522,4.173]],["title/classes/Chart.html",[0,0.088,90,0.838]],["body/classes/Chart.html",[0,0.096,2,0.927,3,0.147,4,0.138,5,0.138,8,1.202,10,0.152,11,0.355,12,0.712,14,0.915,17,1.38,19,2.117,20,0.005,21,0.935,22,1.41,24,0.35,28,0.373,34,0.671,39,0.147,40,0.003,54,1.358,55,2.438,75,0.539,78,0.002,79,0.003,80,0.002,83,1.917,90,1.211,94,1.867,97,1.807,107,0.821,108,0.344,110,1.937,126,2.45,128,2.135,129,1.097,137,2.551,138,2.269,140,0.768,175,1.935,179,1.178,183,0.654,192,1.886,222,1.56,225,2.026,227,2.348,240,1.675,269,1.515,297,1.559,308,2.636,309,0.758,310,2.027,317,1.113,320,1.685,336,1.997,337,1.62,343,2.346,384,1.709,443,2.275,444,2.379,446,1.474,447,2.379,464,1.64,465,2.344,476,2.471,488,1.294,523,3.76,524,2.135,525,3.266,526,6.649,527,4.997,528,5.577,529,3.485,530,2.942,531,2.942,532,2.942,533,2.942,534,5.577,535,4.997,536,5.577,537,4.997,538,3.76,539,2.622,540,3.76,541,3.034,542,3.76,543,3.76,544,3.76,545,1.832,546,3.76,547,2.231,548,2.746,549,3.76,550,5.577,551,3.76,552,3.174,553,2.231,554,3.76,555,3.76,556,3.76,557,3.638,558,3.76,559,3.76,560,3.76,561,3.292,562,5.577,563,3.76,564,7.038,565,3.76,566,4.997,567,3.76,568,5.577,569,3.76,570,5.577,571,2.231,572,2.788,573,3.76,574,4.997,575,2.192,576,2.401,577,3.76,578,2.918,579,3.76,580,1.427,581,2.346,582,5.957,583,2.077,584,2.077,585,3.111,586,2.918,587,2.269,588,3.76,589,1.478,590,3.111,591,1.452,592,2.722,593,2.022,594,3.76,595,2.231,596,1.254,597,1.336,598,1.971,599,1.504,600,5.577,601,3.76,602,3.368,603,4.997,604,3.76,605,3.76,606,3.76,607,1.835,608,3.76,609,3.76,610,3.76,611,3.76,612,6.649,613,5.577,614,3.111,615,3.76,616,3.76,617,5.577,618,5.577,619,4.997,620,3.76,621,3.76,622,3.76,623,3.76,624,3.368,625,3.76,626,1.62,627,3.76,628,3.76,629,6.649,630,3.76,631,3.76,632,2.636,633,0.902,634,4.614,635,0.789,636,3.76,637,3.76,638,3.76,639,3.76,640,3.76,641,3.76,642,3.76,643,3.76,644,3.76,645,3.76,646,3.76,647,3.76,648,3.76,649,3.76,650,3.76,651,3.368,652,3.76,653,3.76,654,3.76,655,3.76,656,3.76,657,3.76,658,3.76,659,2.431,660,3.368,661,2.527,662,3.368,663,2.022,664,1.18,665,3.76,666,3.368,667,3.76,668,3.76,669,3.76,670,3.368,671,3.76,672,3.4,673,3.76,674,3.76,675,3.76,676,3.76,677,3.76,678,3.76,679,3.76,680,3.76,681,3.76,682,3.76,683,3.76,684,3.76,685,3.76,686,6.649,687,3.76,688,3.76,689,3.76,690,3.76,691,3.76,692,3.76,693,3.76,694,3.76,695,3.76,696,3.76,697,3.76,698,3.76,699,3.111,700,3.76,701,3.368,702,2.087,703,1.216,704,1.129,705,3.76,706,3.76,707,3.76,708,1.923,709,5.577,710,3.368,711,3.76,712,5.577,713,3.368,714,3.76,715,3.76,716,3.76,717,3.76,718,3.051,719,2.117,720,4.614,721,4.329,722,4.329,723,3.76,724,3.76,725,4.101,726,3.76,727,3.76,728,3.76,729,3.76]],["title/classes/ChartAssistRenderStateData.html",[0,0.088,730,3.292]],["body/classes/ChartAssistRenderStateData.html",[0,0.141,2,1.362,3,0.216,4,0.203,5,0.203,8,1.575,10,0.223,11,0.465,13,1.278,14,1.344,17,1.262,19,1.308,20,0.005,21,0.857,22,0.825,24,0.311,28,0.286,34,0.986,39,0.372,40,0.005,75,0.791,78,0.003,79,0.004,80,0.003,85,0.909,90,1.607,94,1.723,107,1.596,108,0.853,124,1.958,134,0.916,158,2.757,159,1.575,164,0.758,175,1.473,179,0.715,183,0.96,192,1.222,194,1.955,234,2.803,279,3.488,280,1.853,283,2.533,333,2.042,334,1.804,394,3.929,411,1.708,432,3.231,459,1.634,464,2.02,482,3.598,488,1.9,572,2.774,576,2.389,597,1.962,730,5.295,731,5.811,732,3.712,733,1.596,734,5.438,735,2.227,736,5.124,737,3.027,738,5.124,739,5.124,740,2.533,741,6.357,742,5.523,743,5.523,744,5.523,745,5.523,746,5.523,747,5.523,748,5.523,749,1.786,750,3.071,751,2.895,752,3.712,753,3.712,754,3.712,755,3.571,756,4.725,757,3.571,758,4.275,759,3.488,760,4.911,761,3.873,762,3.571,763,2.17,764,2.895,765,1.4,766,3.873,767,3.873,768,3.333,769,3.446,770,2.58,771,1.962,772,3.571,773,2.636,774,3.571,775,2.249,776,2.475,777,2.027,778,1.326,779,4.559,780,3.567,781,2.379,782,3.571,783,3.712,784,3.571,785,3.571,786,1.76,787,4.725,788,4.725,789,4.725,790,4.725,791,1.239,792,3.571,793,1.842,794,3.05,795,3.873,796,3.873,797,2.895,798,3.571]],["title/directives/ChartCollectionIdDirective.html",[520,2.738,799,3.951]],["body/directives/ChartCollectionIdDirective.html",[0,0.114,3,0.258,4,0.242,5,0.242,8,1.764,10,0.266,14,1.604,17,1.14,19,1.561,20,0.005,21,0.689,22,0.985,24,0.311,28,0.365,38,1.741,39,0.258,55,2.163,78,0.003,79,0.004,80,0.003,85,1.085,90,1.629,94,1.462,134,0.75,179,0.854,320,2.954,459,2.422,477,3.596,479,4.649,484,3.743,487,4.52,496,3.37,500,4.401,519,3.743,520,4.401,521,5.447,763,3.217,765,2.075,771,2.908,791,1.836,799,7.227,800,5.756,801,7.366,802,3.193,803,6.59,804,4.29,805,8.185,806,4.088,807,8.185,808,8.185,809,7.976,810,5.292,811,8.185,812,4.401,813,5.106,814,8.185,815,8.185,816,3.217,817,8.185,818,6.91,819,3.995,820,6.59,821,3.659,822,7.275,823,8.185,824,5.904,825,4.186,826,5.904,827,2.419,828,2.304,829,5.904,830,6.59,831,6.59,832,5.904,833,6.59,834,5.115,835,6.59]],["title/injectables/ChartCollectionService.html",[822,3.743,836,3.57]],["body/injectables/ChartCollectionService.html",[0,0.123,3,0.279,4,0.261,5,0.261,10,0.287,17,0.99,19,1.684,20,0.005,21,0.744,22,1.063,24,0.27,28,0.361,39,0.279,55,1.879,78,0.004,79,0.004,80,0.004,85,1.171,94,1.644,110,1.574,134,0.876,175,1.433,192,1.574,269,2.33,281,1.573,315,4.598,316,4.598,496,3.637,763,3.37,765,2.174,778,1.707,799,6.655,800,5.544,801,7.094,802,3.263,822,6.305,832,6.371,836,6.013,837,5.519,838,7.111,839,6.305,840,8.575,841,5.952,842,7.682,843,4.385,844,8.575,845,8.575,846,8.575,847,8.575,848,7.111,849,9.206,850,7.111,851,8.575,852,7.111]],["title/components/ChartComponent.html",[477,2.237,500,2.738]],["body/components/ChartComponent.html",[0,0.092,3,0.209,4,0.196,5,0.196,8,1.538,10,0.215,11,0.455,12,0.911,14,1.297,17,1.196,19,1.262,20,0.005,21,0.899,22,1.202,24,0.305,28,0.351,32,3.334,38,1.408,39,0.209,54,1.925,55,2.367,78,0.003,79,0.004,80,0.003,90,1.626,94,1.776,107,1.164,108,0.488,110,1.58,179,0.69,197,3.582,227,1.967,320,2.389,339,3.737,384,1.37,464,2.12,477,3.135,478,2.944,479,4.053,482,3.535,484,3.027,487,5.527,488,3.423,489,2.342,490,3.216,496,2.726,497,4.881,498,3.216,499,3.216,500,4.958,501,3.216,502,2.944,503,2.726,504,3.216,505,2.944,506,3.216,507,2.793,508,3.216,509,2.944,510,3.216,511,2.726,512,3.216,513,2.944,514,3.216,515,2.944,516,3.216,517,2.944,518,3.216,519,3.027,520,2.866,521,3.118,522,3.216,524,1.448,740,2.207,809,7.208,818,6.245,819,3.483,821,3.162,825,3.65,834,4.137,853,5.33,854,6.657,855,6.657,856,5.407,857,5.642,858,5.904,859,7.136,860,8.046,861,8.046,862,9.417,863,5.33,864,6.026,865,9.417,866,8.046,867,6.026,868,5.33,869,7.136,870,5.33,871,5.33,872,5.33,873,5.004,874,7.136,875,5.33,876,4.775,877,6.394,878,4.775,879,3.737,880,4.775,881,2.62,882,3.919,883,5.33,884,2.726,885,8.046,886,4.409,887,5.33,888,5.33,889,5.33,890,3.737,891,5.33,892,7.136,893,5.33,894,5.33,895,5.33,896,5.33,897,7.136,898,4.409,899,5.33,900,7.136,901,7.136,902,5.33,903,5.33,904,3.582,905,5.33,906,5.33,907,5.33,908,5.33,909,3.582,910,5.33,911,5.33,912,5.33,913,5.33,914,5.33,915,7.136,916,5.33,917,5.33,918,4.775,919,5.33,920,5.33,921,4.775,922,5.33,923,1.989,924,5.33,925,5.33]],["title/components/ChartDonutContentComponent.html",[477,2.237,502,2.812]],["body/components/ChartDonutContentComponent.html",[0,0.106,3,0.241,4,0.226,5,0.226,8,1.691,10,0.249,11,0.5,17,1.092,20,0.005,21,0.903,24,0.298,28,0.356,39,0.241,55,1.628,78,0.003,79,0.004,80,0.003,90,1.663,94,1.713,317,1.823,476,2.881,477,3.447,478,3.403,479,4.456,482,3.792,484,3.499,487,5.637,488,3.496,489,2.707,490,3.718,491,4.895,493,4.735,496,3.151,497,5.162,498,3.718,499,3.718,500,3.313,501,3.718,502,5.019,503,5.24,504,3.718,505,3.403,506,3.718,507,3.229,508,3.718,509,3.403,510,3.718,511,3.151,512,3.718,513,3.403,514,3.718,515,3.403,516,3.718,517,3.403,518,3.718,519,3.499,520,3.313,521,3.604,522,3.718,776,3.516,800,5.581,819,3.829,825,4.012,854,7.142,856,5.801,886,5.097,909,4.141,926,7.734,927,6.161,928,7.765,929,7.845,930,7.845,931,8.142,932,7.142,933,6.161,934,3.38,935,5.316,936,6.161,937,2.102,938,6.089,939,5.52,940,5.52,941,6.161,942,7.845,943,6.161,944,5.52,945,6.161,946,6.161]],["title/classes/ChartDonutContentPlugin.html",[0,0.088,932,4.212]],["body/classes/ChartDonutContentPlugin.html",[0,0.096,2,1.377,3,0.219,4,0.205,5,0.205,10,0.226,11,0.469,17,1.362,20,0.005,24,0.279,28,0.356,39,0.219,41,0.833,55,1.476,75,1.055,78,0.003,79,0.004,80,0.003,85,0.919,90,1.441,94,1.85,107,1.608,108,0.674,109,2.747,110,2.014,114,2.059,115,3.775,117,1.975,146,3.439,164,1.01,175,1.883,179,1.234,183,0.971,192,1.823,227,2.029,269,2,297,2.543,299,1.539,315,3.611,316,3.611,317,1.653,336,1.677,436,3.003,443,2.946,444,2.664,446,2.176,447,3.082,464,1.377,465,3.081,466,3.484,471,3.484,472,3.484,473,3.484,474,3.484,476,2.473,503,4.872,587,3.37,607,2.726,619,5.003,633,1.977,635,1.728,770,3.439,776,3.691,928,8.234,931,7.378,932,6.091,935,5.121,937,2.504,944,5.003,947,7.528,948,5.714,949,5.714,950,6.595,951,8.235,952,5.584,953,5.584,954,5.714,955,5.584,956,5.584,957,5.714,958,4.62,959,3.37,960,5.584,961,5.584,962,5.584,963,5.584,964,5.584,965,5.584,966,5.584,967,5.584,968,5.584,969,5.584,970,5.584,971,5.584,972,5.584,973,5.584,974,5.584,975,4.62,976,4.334,977,5.584,978,8.754,979,8.754,980,5.584]],["title/components/ChartMarkerComponent.html",[477,2.237,505,2.812]],["body/components/ChartMarkerComponent.html",[0,0.087,3,0.197,4,0.185,5,0.185,8,1.479,10,0.203,11,0.437,14,1.224,17,1.349,19,1.191,20,0.005,21,0.878,22,0.752,24,0.358,28,0.329,38,1.33,39,0.197,52,1.954,53,3.172,54,1.817,55,1.814,78,0.003,79,0.003,80,0.003,90,1.61,94,1.791,107,1.833,108,0.716,110,1.114,119,4.613,129,1.468,134,0.887,140,1.402,146,3.921,149,1.625,179,0.889,227,2.313,317,1.489,377,4.508,477,3.016,478,2.779,479,3.899,482,3.433,484,2.858,487,5.48,488,3.392,489,2.211,490,3.037,491,4.283,493,4.143,496,2.573,497,4.767,498,3.037,499,3.037,500,2.706,501,3.037,502,2.779,503,2.573,504,3.037,505,4.635,506,3.037,507,2.637,508,3.037,509,2.779,510,3.037,511,2.573,512,3.037,513,2.779,514,3.037,515,2.779,516,3.037,517,2.779,518,3.037,519,2.858,520,2.706,521,2.943,522,3.037,524,1.367,582,6.15,633,1.875,635,1.639,663,4.201,725,5.047,800,6.263,813,3.139,818,6.064,819,3.35,824,4.508,825,4.492,834,3.905,856,5.251,857,5.479,864,5.479,867,5.885,873,4.813,890,3.528,904,3.382,909,3.382,949,3.905,981,8.679,982,5.032,983,6.864,984,6.864,985,7.813,986,7.813,987,7.813,988,7.813,989,4.163,990,5.032,991,5.047,992,5.032,993,5.032,994,2.689,995,5.032,996,5.032,997,8.393,998,5.032,999,4.163,1000,5.032,1001,5.032,1002,5.032,1003,5.032,1004,4.163,1005,5.032,1006,5.032,1007,9.278,1008,4.508,1009,5.032,1010,2.513,1011,4.163,1012,5.032,1013,5.032,1014,5.032,1015,5.032,1016,5.032,1017,6.864,1018,5.032,1019,5.032,1020,5.032,1021,5.032,1022,5.032,1023,5.032,1024,5.032,1025,5.032,1026,5.032,1027,5.032,1028,5.032,1029,6.864,1030,3.7,1031,5.032,1032,5.032,1033,5.032,1034,5.032,1035,5.032,1036,5.032,1037,5.032,1038,5.032,1039,5.032,1040,6.864,1041,5.032,1042,5.032,1043,4.508]],["title/classes/ChartPalette.html",[0,0.088,1044,4.212]],["body/classes/ChartPalette.html",[0,0.111,2,1.587,3,0.252,4,0.237,5,0.237,8,1.738,10,0.26,14,1.566,17,1.286,19,1.524,20,0.005,21,0.673,22,0.962,24,0.244,28,0.386,39,0.252,52,2.378,55,2.327,78,0.003,79,0.004,80,0.003,94,1.573,110,1.95,126,2.827,134,0.846,159,1.738,180,3.214,183,1.119,192,2.044,227,2.222,309,1.297,313,4.995,314,4.995,810,5.695,1044,6.672,1045,9.508,1046,6.436,1047,3.344,1048,3.523,1049,3.523,1050,3.523,1051,7.225,1052,3.401,1053,7.287,1054,2.422,1055,6.436,1056,2.849,1057,6.436,1058,6.436,1059,6.436,1060,6.436,1061,6.436,1062,6.436,1063,5.766,1064,5.766,1065,5.766,1066,4.995,1067,5.766,1068,6.672,1069,5.325,1070,6.672,1071,6.436,1072,6.436,1073,6.436,1074,6.436,1075,5.766,1076,6.436,1077,8.807,1078,8.064,1079,6.436,1080,5.325,1081,5.766,1082,5.325,1083,6.436,1084,6.436,1085,8.064,1086,6.436,1087,5.325,1088,6.436,1089,5.766,1090,5.766,1091,6.436,1092,6.436,1093,6.436]],["title/classes/ChartPlugin.html",[0,0.088,465,1.622]],["body/classes/ChartPlugin.html",[0,0.122,2,1.736,3,0.276,4,0.259,5,0.259,8,1.836,10,0.284,11,0.543,14,2.23,17,1.38,20,0.005,24,0.267,28,0.276,39,0.276,78,0.004,79,0.004,80,0.004,90,1.509,94,1.862,175,1.92,179,1.311,183,1.223,216,3.785,269,2.315,436,3.785,443,2.946,444,3.081,446,2.517,447,3.081,464,2.261,465,2.715,548,2.877,1094,10.032,1095,7.038,1096,7.038,1097,7.038,1098,7.038,1099,7.038,1100,7.038]],["title/components/ChartPopoverComponent.html",[477,2.237,507,2.668]],["body/components/ChartPopoverComponent.html",[0,0.093,3,0.212,4,0.199,5,0.199,8,1.553,10,0.218,11,0.459,14,1.316,17,1.289,19,1.281,20,0.005,21,0.904,22,0.808,24,0.351,28,0.37,38,1.429,39,0.212,54,1.953,55,2.142,78,0.003,79,0.004,80,0.003,90,1.63,91,3.164,94,1.654,110,1.794,146,2.527,179,0.701,227,1.49,297,2.265,317,1.601,384,1.39,443,1.673,446,2.142,453,1.832,476,2.596,477,3.166,478,2.987,479,4.093,482,3.561,484,3.072,487,5.539,488,3.431,489,2.376,490,3.264,491,4.496,493,4.349,496,2.766,497,4.91,498,3.264,499,3.264,500,2.908,501,3.264,502,2.987,503,2.766,504,3.264,505,2.987,506,3.264,507,4.531,508,3.264,509,2.987,510,3.264,511,2.766,512,3.264,513,2.987,514,3.264,515,2.987,516,3.264,517,2.987,518,3.264,519,3.072,520,2.908,521,3.164,522,3.264,524,2.516,583,2.987,584,2.987,635,1.135,651,4.845,725,5.299,800,6.111,819,3.518,825,4.145,854,6.706,856,5.447,857,5.683,864,6.313,867,6.061,873,5.054,882,5.959,886,4.475,890,3.792,909,3.635,935,4.216,937,1.449,939,4.845,940,4.845,989,4.475,991,5.299,999,4.475,1004,4.475,1043,4.845,1101,8.468,1102,5.408,1103,7.336,1104,7.207,1105,7.207,1106,6.457,1107,5.408,1108,5.959,1109,5.408,1110,7.262,1111,5.408,1112,6.706,1113,5.408,1114,5.408,1115,8.105,1116,7.207,1117,5.408,1118,6.457,1119,3.977,1120,7.207,1121,5.408,1122,5.408,1123,7.207,1124,3.374,1125,3.374,1126,5.408,1127,5.408,1128,5.408,1129,7.207,1130,5.963,1131,5.408,1132,5.408,1133,2.987,1134,4.198,1135,4.198,1136,4.198,1137,5.408,1138,7.207,1139,4.475,1140,5.408,1141,5.408,1142,5.408,1143,5.408,1144,5.408,1145,5.408]],["title/classes/ChartPopoverPlugin.html",[0,0.088,1108,3.743]],["body/classes/ChartPopoverPlugin.html",[0,0.07,2,1.001,3,0.159,4,0.149,5,0.149,10,0.164,11,0.376,12,1.034,14,0.987,17,1.362,19,0.961,20,0.005,21,0.424,22,0.606,24,0.339,28,0.357,39,0.231,40,0.002,41,0.667,55,1.836,57,0.898,78,0.002,79,0.003,80,0.002,85,0.668,89,1.015,90,1.334,92,2.845,94,1.843,107,2.022,108,0.775,109,2.82,110,1.979,113,1.54,114,2.027,115,3.362,117,1.916,124,1.087,143,2.625,144,1.895,161,1.696,175,1.704,179,1.158,183,0.705,192,0.898,225,1.797,227,2.405,253,1.691,269,1.603,290,1.001,297,2.499,317,1.201,320,1.818,384,1.961,418,2.531,436,2.182,439,2.468,443,2.765,444,2.823,446,1.836,447,2.248,453,2.745,456,4.932,459,2.698,464,1.001,465,2.849,466,2.531,471,2.531,472,2.531,473,2.531,474,2.531,476,2.62,507,3.091,583,2.241,584,2.241,587,2.448,596,1.967,597,1.441,607,1.98,626,1.748,633,1.668,635,1.458,663,2.182,672,2.075,733,1.518,740,1.255,765,1.029,794,2.241,819,2.879,904,2.727,935,4.065,937,2.044,947,7.761,1011,3.357,1030,4.337,1103,7.858,1108,4.337,1124,2.531,1125,2.531,1130,3.357,1135,4.578,1146,4.578,1147,5.467,1148,4.578,1149,5.284,1150,3.091,1151,2.946,1152,5.284,1153,3.35,1154,4.578,1155,4.578,1156,5.749,1157,3.838,1158,5.749,1159,5.749,1160,5.749,1161,6.773,1162,4.057,1163,4.057,1164,6.563,1165,3.49,1166,4.88,1167,3.635,1168,3.357,1169,4.578,1170,4.88,1171,4.88,1172,5.749,1173,2.622,1174,3.45,1175,4.057,1176,4.057,1177,5.393,1178,4.057,1179,4.057,1180,4.057,1181,4.057,1182,2.531,1183,2.531,1184,3.149,1185,3.149,1186,2.845,1187,4.578,1188,2.03,1189,3.357,1190,2.182,1191,3.357,1192,3.635,1193,3.635,1194,4.337,1195,3.149,1196,2.448,1197,2.531,1198,2.845,1199,3.635,1200,3.635,1201,2.727,1202,2.845,1203,3.635,1204,3.357,1205,1.54,1206,1.54,1207,2.983,1208,3.635,1209,3.635,1210,3.635,1211,3.635,1212,3.635,1213,3.635,1214,3.635,1215,3.635,1216,3.635,1217,3.635,1218,3.635,1219,4.337,1220,2.983,1221,3.964,1222,2.983,1223,1.489,1224,2.727,1225,5.749,1226,3.635,1227,4.88,1228,3.357,1229,2.983,1230,3.357,1231,3.149,1232,3.635,1233,3.635,1234,1.567,1235,2.983,1236,3.357,1237,3.635,1238,3.635,1239,3.635,1240,3.635,1241,3.635,1242,4.578,1243,3.149,1244,3.149,1245,3.149,1246,3.635,1247,3.635,1248,3.635,1249,3.635,1250,3.635,1251,3.149,1252,6.226,1253,3.964,1254,1.374,1255,3.635,1256,1.441,1257,2.448,1258,3.635,1259,5.393,1260,3.635,1261,3.635,1262,3.635,1263,3.635,1264,3.635]],["title/components/ChartTooltipComponent.html",[477,2.237,509,2.812]],["body/components/ChartTooltipComponent.html",[0,0.113,3,0.257,4,0.241,5,0.241,10,0.265,17,0.914,20,0.005,21,0.93,24,0.249,28,0.32,39,0.257,78,0.003,79,0.004,80,0.003,90,1.679,117,1.668,336,1.972,477,3.588,478,3.627,479,4.638,482,3.905,484,3.73,487,5.682,488,3.526,489,2.885,490,3.963,491,5.095,493,4.928,496,3.358,497,5.282,498,3.963,499,3.963,500,3.531,501,3.963,502,3.627,503,3.358,504,3.963,505,3.627,506,3.963,507,3.442,508,3.963,509,5.136,510,3.963,511,3.358,512,3.963,513,3.627,514,3.963,515,3.627,516,3.963,517,3.627,518,3.963,519,3.73,520,3.531,521,3.841,522,3.963,718,3.858,800,5.28,819,3.986,825,4.176,882,6.535,1110,7.963,1191,5.433,1265,6.338,1266,6.567,1267,7.316,1268,7.316,1269,5.488,1270,8.166,1271,8.166,1272,6.567,1273,6.567,1274,6.567,1275,6.567,1276,5.433,1277,6.567,1278,6.567,1279,6.567,1280,5.973,1281,8.166,1282,6.567]],["title/components/ChartTooltipsComponent.html",[477,2.237,511,2.604]],["body/components/ChartTooltipsComponent.html",[0,0.068,3,0.154,4,0.144,5,0.144,8,1.24,10,0.275,11,0.367,13,0.79,14,0.955,17,1.279,19,1.363,20,0.005,21,0.836,22,0.86,24,0.303,28,0.365,38,1.037,39,0.154,40,0.002,41,0.444,42,1.401,47,1.401,54,1.417,55,2.514,75,1.076,78,0.002,79,0.003,80,0.002,90,1.551,94,1.663,107,1.257,108,0.527,109,1.309,110,2.001,112,1.542,114,0.981,124,1.827,126,1.724,134,0.811,146,2.689,161,2.159,164,1.185,175,0.791,179,0.508,192,1.77,227,2.596,234,2.914,240,1.178,269,1.564,297,2.336,308,2.751,309,1.374,310,1.081,317,1.161,334,1.191,337,1.691,435,4.889,437,4.581,452,2.751,476,2.255,477,2.529,478,2.167,479,3.269,482,2.995,484,2.229,487,5.255,488,3.242,489,1.724,490,2.368,491,3.591,493,3.474,496,2.007,497,4.265,498,2.368,499,2.368,500,2.11,501,2.368,502,2.167,503,2.007,504,2.368,505,2.167,506,2.368,507,2.057,508,2.368,509,2.167,510,2.368,511,3.84,512,2.368,513,2.167,514,2.368,515,2.167,516,2.368,517,2.167,518,2.368,519,3.872,520,2.11,521,2.295,522,2.368,524,1.066,580,1.49,581,2.448,583,2.167,584,2.167,607,3.327,626,1.691,633,1.382,635,1.208,725,2.885,740,1.213,765,1.459,800,5.727,819,2.809,825,3.486,856,4.581,857,4.78,864,4.78,867,5.265,873,4.036,882,5.012,890,2.751,909,2.637,937,1.051,959,3.474,989,3.246,991,4.232,999,3.246,1030,5.012,1139,3.246,1195,3.045,1224,2.637,1235,2.885,1259,5.828,1265,6.875,1269,6.175,1283,3.515,1284,5.157,1285,5.157,1286,6.107,1287,6.107,1288,5.157,1289,3.924,1290,3.924,1291,3.924,1292,5.157,1293,5.64,1294,3.924,1295,3.924,1296,3.924,1297,6.107,1298,5.157,1299,3.924,1300,3.515,1301,5.157,1302,3.515,1303,7.737,1304,5.157,1305,5.157,1306,3.515,1307,3.515,1308,3.045,1309,2.885,1310,2.309,1311,3.515,1312,6.212,1313,3.246,1314,4.762,1315,3.515,1316,3.515,1317,1.25,1318,3.515,1319,3.515,1320,3.515,1321,3.515,1322,3.515,1323,3.515,1324,3.515,1325,5.157,1326,3.515,1327,3.515,1328,3.515,1329,3.515,1330,3.515,1331,3.515,1332,3.515,1333,3.246,1334,3.515,1335,5.157,1336,5.157,1337,4.762,1338,5.157,1339,5.157,1340,3.515,1341,5.157,1342,3.515,1343,3.515,1344,6.107,1345,3.515,1346,3.515,1347,5.157,1348,3.515,1349,3.515,1350,5.157,1351,3.515,1352,6.107,1353,5.157,1354,3.515,1355,3.515,1356,3.515,1357,3.515,1358,2.223,1359,3.515,1360,2.448,1361,3.515,1362,3.515,1363,6.727,1364,3.515,1365,3.515,1366,5.157,1367,3.515,1368,3.515,1369,3.515,1370,3.515,1371,3.246,1372,3.515,1373,3.045,1374,3.515,1375,3.515,1376,3.515,1377,3.515,1378,3.515,1379,3.515,1380,3.515,1381,3.515,1382,3.515,1383,3.515,1384,3.515,1385,5.157,1386,5.157,1387,5.157,1388,6.107,1389,3.515,1390,3.515,1391,3.515,1392,3.246,1393,3.515,1394,3.246,1395,2.637,1396,3.515,1397,3.515,1398,5.157,1399,3.515,1400,3.515,1401,3.515,1402,3.515,1403,3.515,1404,3.515,1405,3.515,1406,3.515,1407,3.515,1408,3.515,1409,3.515,1410,3.515,1411,3.515,1412,3.515,1413,3.515,1414,3.515]],["title/classes/ChartTooltipsPlugin.html",[0,0.088,437,3.422]],["body/classes/ChartTooltipsPlugin.html",[0,0.065,2,0.921,3,0.146,4,0.137,5,0.137,10,0.151,11,0.353,12,1.085,14,0.909,17,1.335,19,1.314,20,0.005,21,0.58,22,0.829,24,0.323,28,0.356,34,0.667,39,0.307,40,0.002,41,0.749,42,1.611,47,1.611,55,1.75,57,0.827,78,0.002,79,0.003,80,0.002,85,0.913,90,1.289,94,1.827,107,1.711,108,0.671,109,2.913,110,1.882,112,3.432,113,2.107,114,0.934,115,3.25,117,1.133,129,1.619,134,0.342,144,1.745,149,1.314,161,1.596,164,1.075,175,1.713,179,1.156,192,1.466,197,2.51,212,2.346,213,3.099,227,2.57,234,1.155,247,1.904,255,1.641,269,1.508,281,1.018,283,2.267,290,0.921,297,2.294,303,1.823,317,1.105,320,1.674,333,1.044,334,1.699,336,1.666,404,2.592,411,1.716,435,5.816,436,2.008,437,3.729,438,5.14,439,2.534,440,5.14,441,4.96,442,5.14,443,2.701,444,2.75,445,4.591,446,1.75,447,2.142,451,3.462,452,3.891,453,2.88,455,1.91,456,4.74,458,5.69,459,2.17,460,4.307,463,4.08,464,0.921,465,2.782,466,2.33,469,4.307,471,2.33,472,2.33,473,2.33,474,2.33,476,1.989,511,2.838,524,1.508,572,1.265,576,1.619,580,1.418,581,2.33,583,2.062,584,2.062,586,2.898,587,2.254,596,2.445,597,1.327,607,2.709,633,0.896,635,0.783,663,2.008,672,3.387,740,1.155,749,1.208,758,4.288,763,2.603,797,1.957,819,2.709,879,2.618,881,1.371,923,1.394,937,2.2,1124,2.33,1125,2.33,1134,6.778,1146,4.307,1147,4.282,1148,4.307,1154,4.307,1155,4.307,1173,1.208,1174,2.184,1184,2.898,1185,2.898,1186,2.618,1188,2.279,1201,4.45,1202,2.618,1207,2.746,1219,4.08,1220,2.746,1221,2.51,1222,2.746,1223,1.371,1224,2.51,1229,2.746,1231,2.898,1242,4.307,1243,2.898,1244,2.898,1245,2.898,1251,2.898,1269,5.713,1310,2.483,1415,7.512,1416,3.734,1417,3.734,1418,5.933,1419,2.107,1420,3.734,1421,3.734,1422,3.734,1423,3.734,1424,3.734,1425,3.734,1426,3.734,1427,3.346,1428,6.481,1429,2.898,1430,3.09,1431,1.418,1432,2.746,1433,6.08,1434,4.591,1435,3.09,1436,3.09,1437,2.898,1438,4.591,1439,4.972,1440,3.346,1441,1.865,1442,3.346,1443,6.065,1444,6.065,1445,6.065,1446,6.065,1447,6.08,1448,4.972,1449,3.346,1450,3.346,1451,4.972,1452,3.346,1453,3.346,1454,3.346,1455,1.105,1456,3.346,1457,5.933,1458,3.346,1459,3.346,1460,3.346,1461,4.644,1462,5.14,1463,3.346,1464,3.346,1465,3.346,1466,3.346,1467,3.346,1468,2.898,1469,2.898,1470,4.972,1471,3.346,1472,3.346,1473,2.898,1474,3.346,1475,3.346,1476,3.346,1477,6.065,1478,3.346,1479,3.346,1480,3.346,1481,3.346,1482,3.346,1483,3.346,1484,3.346,1485,3.346,1486,3.346,1487,3.346,1488,3.346,1489,3.346,1490,1.823,1491,2.746,1492,3.346,1493,3.09,1494,3.346,1495,3.346,1496,3.346,1497,3.346,1498,3.346,1499,3.346,1500,2.33,1501,2.898,1502,2.414,1503,2.898,1504,2.898,1505,4.972,1506,3.09,1507,2.746,1508,3.346,1509,3.346,1510,3.346,1511,3.346]],["title/classes/DataSeries.html",[0,0.088,218,1.423]],["body/classes/DataSeries.html",[0,0.118,2,1.682,3,0.267,4,0.251,5,0.251,8,1.801,10,0.275,11,0.532,12,1.234,13,1.147,14,1.659,17,1.346,19,1.615,20,0.005,21,0.986,22,1.019,24,0.373,28,0.267,33,1.659,34,1.218,35,2.141,37,1.906,39,0.267,56,3.186,57,1.85,78,0.003,79,0.004,80,0.003,94,1.839,107,1.489,108,0.625,126,2.996,134,0.863,159,2.031,183,1.185,209,2.674,211,5.293,218,2.526,245,3.873,303,3.329,765,2.292,904,4.583,1455,2.474,1512,9.84,1513,6.819,1514,8.359,1515,8.359,1516,6.819,1517,6.819,1518,6.819,1519,6.11,1520,6.11,1521,5.642,1522,6.819,1523,6.819,1524,6.819,1525,6.819,1526,3.766,1527,6.819,1528,6.11,1529,6.819,1530,5.014]],["title/classes/DimensionConfig.html",[0,0.088,138,3.072]],["body/classes/DimensionConfig.html",[0,0.077,2,1.104,3,0.175,4,0.164,5,0.164,8,1.363,10,0.181,11,0.403,17,1.381,19,2.173,20,0.005,21,0.96,22,1.371,24,0.359,28,0.175,39,0.175,55,1.672,75,1.143,78,0.002,79,0.003,80,0.002,84,2.791,94,1.873,106,3.851,107,1.742,108,0.92,109,2.661,112,3.135,113,3.029,114,1.995,117,2.053,122,3.582,124,2.138,132,3.796,137,4.694,138,3.818,155,3.29,162,4.008,164,1.423,172,3.701,174,4.008,175,1.947,183,0.778,184,5.073,192,2.031,227,1.743,269,1.719,291,4.182,633,2.203,635,1.925,1531,9.968,1532,4.053,1533,4.053,1534,5.068,1535,5.068,1536,4.474,1537,4.008,1538,4.474,1539,4.406,1540,4.474,1541,4.474,1542,4.474,1543,4.406,1544,4.474,1545,4.474,1546,4.474,1547,4.406,1548,4.474,1549,4.474,1550,4.406,1551,4.474,1552,4.474,1553,4.474,1554,4.474,1555,4.474,1556,4.474,1557,4.474,1558,4.474,1559,7.339,1560,7.978,1561,7.339,1562,7.978,1563,7.339,1564,7.339,1565,4.474,1566,4.474,1567,4.474,1568,7.339,1569,7.339,1570,4.474,1571,4.474]],["title/classes/EventBus.html",[0,0.088,525,1.9]],["body/classes/EventBus.html",[0,0.126,2,1.794,3,0.285,4,0.267,5,0.267,10,0.294,17,1.21,19,1.722,20,0.005,21,0.76,22,1.087,24,0.276,28,0.34,39,0.285,55,1.921,78,0.004,79,0.004,80,0.004,94,1.784,110,1.61,134,0.902,175,1.751,179,0.942,192,1.61,269,2.361,297,2.751,317,2.152,443,2.978,525,3.244,580,2.76,581,4.536,778,2.086,1572,9.295,1573,7.271,1574,8.69,1575,7.271,1576,8.69,1577,7.271,1578,7.271,1579,7.271,1580,9.295,1581,7.271,1582,7.271]],["title/injectables/GaugeService.html",[836,3.57,1583,4.561]],["body/injectables/GaugeService.html",[0,0.087,3,0.268,4,0.184,5,0.184,10,0.202,11,0.436,12,1.069,13,1.15,17,1.261,19,1.846,20,0.005,21,0.815,22,1.165,24,0.344,28,0.383,33,2.038,34,0.894,38,1.323,39,0.196,52,1.252,55,1.323,59,2.93,78,0.003,79,0.003,80,0.003,94,1.759,96,3.97,107,1.702,108,0.876,110,1.725,117,1.711,124,1.342,134,0.714,143,1.724,159,2.033,161,1.44,164,1.405,175,1.571,183,0.871,192,2.088,209,1.859,218,1.4,227,2.6,236,5.311,269,1.859,285,1.876,291,2.625,299,2.495,315,3.238,316,3.238,488,1.724,496,2.561,497,2.845,578,6.05,750,3.279,765,1.27,836,4.798,837,3.887,957,3.887,958,5.662,1256,1.78,1520,4.487,1583,6.131,1584,5.009,1585,7.794,1586,7.794,1587,7.794,1588,6.843,1589,6.843,1590,6.843,1591,6.843,1592,3.676,1593,7.184,1594,9.771,1595,8.377,1596,5.009,1597,6.843,1598,6.15,1599,5.226,1600,5.009,1601,6.843,1602,5.009,1603,7.794,1604,5.009,1605,6.843,1606,5.009,1607,2.769,1608,2.274,1609,5.009,1610,4.144,1611,5.009,1612,5.009,1613,5.009,1614,5.009,1615,6.843,1616,2.737,1617,6.843,1618,5.009,1619,5.009,1620,5.009,1621,5.009,1622,6.843,1623,4.487,1624,5.009,1625,5.009,1626,5.009,1627,5.009,1628,5.009,1629,5.009,1630,6.843,1631,5.009,1632,1.968,1633,8.377,1634,7.794,1635,6.843,1636,5.009,1637,5.009,1638,6.843,1639,1.809,1640,5.009,1641,4.487,1642,4.487,1643,4.487,1644,5.009,1645,5.009,1646,5.009,1647,5.009]],["title/classes/Grid.html",[0,0.088,83,1.327]],["body/classes/Grid.html",[0,0.123,2,1.306,3,0.103,4,0.096,5,0.096,8,1.141,10,0.106,11,0.269,17,1.301,19,1.682,20,0.005,21,0.945,22,1.062,24,0.339,28,0.329,39,0.165,44,4.254,47,0.638,49,4.254,55,1.115,57,0.58,75,0.869,78,0.001,79,0.002,80,0.001,83,2.355,85,0.431,89,2.235,90,1.279,94,1.819,95,0.995,96,3.818,101,4.355,104,1.115,106,1.93,107,1.751,108,0.712,110,1.172,112,1.658,113,0.995,117,1.451,124,0.702,126,1.853,129,1.94,130,2.632,132,3.508,133,4.004,134,0.684,138,1.582,143,3.109,149,1.254,150,3.88,161,0.754,175,1.855,178,2.719,183,0.733,184,4.383,192,2.037,194,0.946,216,1.41,222,1.088,227,2.4,240,1.267,253,1.476,269,1.146,285,1.053,291,2.211,297,1.858,308,1.838,309,1.566,310,2.141,317,0.776,329,1.762,334,1.376,335,2.169,336,1.822,339,2.958,343,1.635,347,1.927,368,1.305,384,2.238,446,1.603,447,1.365,464,1.64,476,1.267,488,2.088,489,1.152,529,3.724,539,3.095,545,2.645,548,1.904,552,2.014,580,2.697,581,1.635,589,1.03,592,4.183,593,1.41,597,1.499,598,1.374,607,1.279,626,1.129,632,4.982,633,1.271,634,2.169,635,1.727,664,2.23,666,2.349,672,4.571,702,1.904,703,1.712,704,2.243,708,3.82,710,2.349,713,2.349,718,2.517,719,2.01,720,3.49,721,4.709,722,3.274,733,1.156,762,3.423,763,1.03,765,1.069,770,1.225,773,2.014,777,1.549,791,0.588,813,1.635,839,1.927,934,1.818,949,2.035,1010,2.644,1150,2.775,1151,1.309,1153,3.007,1165,1.93,1196,2.546,1253,4.469,1254,1.429,1358,1.629,1419,1.602,1432,1.927,1490,1.279,1491,3.892,1648,2.169,1649,0.995,1650,5.294,1651,5.294,1652,5.294,1653,5.294,1654,5.294,1655,2.924,1656,3.779,1657,3.351,1658,3.351,1659,3.351,1660,2.621,1661,4.461,1662,5.159,1663,2.621,1664,2.621,1665,4.66,1666,3.779,1667,3.18,1668,7.469,1669,4.219,1670,2.621,1671,4.219,1672,7.205,1673,5.161,1674,2.621,1675,2.621,1676,2.621,1677,2.33,1678,2.621,1679,3.779,1680,2.33,1681,3.102,1682,1.452,1683,2.621,1684,3.351,1685,2.621,1686,2.621,1687,2.621,1688,2.621,1689,2.621,1690,3.351,1691,2.621,1692,2.621,1693,2.621,1694,2.33,1695,2.621,1696,2.621,1697,1.838,1698,1.762,1699,2.775,1700,1.309,1701,2.169,1702,2.621,1703,2.775,1704,1.41,1705,7.184,1706,2.169,1707,3.779,1708,1.41,1709,5.501,1710,5.294,1711,2.621,1712,2.621,1713,2.621,1714,2.527,1715,2.621,1716,2.621,1717,1.41,1718,1.175,1719,2.349,1720,2.621,1721,2.621,1722,2.621,1723,2.621,1724,2.621,1725,1.635,1726,2.621,1727,2.621,1728,2.621,1729,2.621,1730,2.621,1731,2.621,1732,4.219,1733,2.621,1734,4.219,1735,5.294,1736,4.219,1737,5.294,1738,4.219,1739,2.621,1740,2.621,1741,2.621,1742,2.621,1743,2.621,1744,6.067,1745,2.621,1746,2.169,1747,2.621,1748,2.169,1749,2.621,1750,1.049,1751,4.219,1752,2.621,1753,2.169,1754,2.621,1755,2.621,1756,2.621,1757,2.621,1758,2.621,1759,5.294,1760,2.621,1761,4.219,1762,2.621,1763,1.475,1764,2.621,1765,2.621,1766,2.621,1767,2.621,1768,2.621,1769,2.621,1770,4.219,1771,2.621,1772,2.621,1773,2.621,1774,2.621,1775,2.621,1776,2.621,1777,2.621,1778,2.621,1779,2.621,1780,2.621,1781,6.649,1782,2.33,1783,1.448,1784,2.621,1785,4.219,1786,2.621,1787,2.621,1788,2.621,1789,2.621,1790,2.349,1791,2.349,1792,2.621,1793,2.621,1794,1.688,1795,2.621,1796,4.219,1797,2.621,1798,2.621,1799,2.621,1800,2.621,1801,4.219,1802,6.067,1803,2.621,1804,4.219,1805,2.621,1806,2.169,1807,2.621,1808,2.621,1809,0.931,1810,2.621,1811,2.621,1812,2.621,1813,2.621,1814,2.621,1815,2.621,1816,2.621,1817,1.489,1818,1.448,1819,2.169,1820,1.635,1821,1.049,1822,2.621,1823,1.448,1824,4.219,1825,2.349,1826,2.621,1827,2.621,1828,2.035,1829,2.621,1830,2.621,1831,4.219,1832,4.219,1833,4.219,1834,2.621,1835,2.621,1836,2.621,1837,2.621,1838,2.621,1839,2.621,1840,3.779,1841,2.621,1842,2.621,1843,6.067,1844,5.435,1845,6.067,1846,6.067,1847,6.067,1848,5.435,1849,6.067,1850,2.621,1851,1.927,1852,2.621,1853,2.621,1854,2.621,1855,2.621,1856,2.621,1857,2.349,1858,2.621,1859,2.621,1860,2.621,1861,2.621,1862,2.349,1863,2.621,1864,2.621]],["title/classes/GridConfig.html",[0,0.088,130,3.176]],["body/classes/GridConfig.html",[0,0.108,2,1.548,3,0.246,4,0.231,5,0.231,8,1.71,10,0.253,11,0.506,17,1.274,20,0.005,24,0.347,28,0.311,39,0.246,75,1.419,78,0.003,79,0.004,80,0.003,84,3.914,85,1.033,94,1.819,101,4.155,102,2.332,103,4.274,104,2.3,106,3.982,107,1.998,108,0.838,109,2.647,110,1.757,112,3.119,113,3.013,114,1.985,124,2.126,126,3.487,127,5.565,128,5.625,129,2.889,130,5.431,132,3.697,133,4.67,134,0.575,135,5.334,137,3.982,138,5.254,140,1.621,143,2.159,170,5.191,183,1.091,184,4.826,488,2.159,552,2.995,626,2.703,1537,5.621,1703,3.288,1865,9.436,1866,6.274,1867,6.274,1868,3.288,1869,3.374,1870,3.374,1871,3.374,1872,3.374,1873,3.374,1874,3.133,1875,3.374,1876,6.274,1877,6.274,1878,6.274,1879,6.274]],["title/classes/HorizontalBarAccessors.html",[0,0.088,1880,4.561]],["body/classes/HorizontalBarAccessors.html",[0,0.11,2,1.576,3,0.25,4,0.235,5,0.235,7,2.468,10,0.258,11,0.511,12,1.28,13,1.377,14,1.555,15,5.63,16,5.086,17,1.396,19,1.513,20,0.005,21,0.668,22,0.955,23,3.119,24,0.381,28,0.344,38,1.689,39,0.25,41,0.908,56,3.751,57,2.1,58,7.083,59,5.909,75,0.915,78,0.003,79,0.004,80,0.003,115,4.018,159,1.73,198,6.132,200,4.56,203,5.746,205,5.076,206,4.56,207,5.287,208,5.287,210,3.192,255,4.169,291,4.208,994,2.199,1052,3.33,1880,7.193,1881,9.21,1882,7.193,1883,5.287,1884,5.726,1885,5.726,1886,5.726,1887,5.726,1888,5.726,1889,4.132,1890,5.726,1891,4.132,1892,5.726,1893,4.132,1894,7.193,1895,4.132,1896,4.295,1897,5.726,1898,5.726]],["title/interfaces/IAccessors.html",[34,0.909,40,0.003]],["body/interfaces/IAccessors.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.433,12,1.294,13,1.339,20,0.005,21,0.768,22,1.015,24,0.317,28,0.348,33,1.206,34,0.885,35,2.133,36,2.165,37,1.386,39,0.398,40,0.005,41,0.914,42,1.786,47,1.786,57,1.716,75,0.866,78,0.002,79,0.002,80,0.002,83,1.292,85,0.53,89,1.24,90,1.521,97,1.643,102,0.862,104,0.85,108,0.454,114,0.805,117,0.657,129,2.357,134,0.869,140,1.785,149,0.762,158,0.952,159,1.916,164,1.281,179,1.184,183,0.559,194,1.525,209,1.994,218,1.386,225,0.98,234,2.27,240,0.966,241,0.98,247,2.557,250,1.243,253,0.783,280,1.533,281,1.422,283,0.995,285,1.351,290,0.794,299,2.022,309,1.369,310,2.022,328,0.98,333,1.899,334,1.252,368,0.995,384,0.827,399,1.181,411,0.995,417,1.073,439,1.041,443,1.533,444,1.604,446,1.939,447,1.604,453,1.679,455,2.081,459,2.172,464,1.492,465,1.58,476,2.204,524,1.994,525,1.851,530,1.287,531,1.287,532,1.287,533,1.287,539,1.58,541,1.243,545,1.667,547,1.287,548,1.556,553,1.287,557,1.983,561,1.983,571,1.287,572,1.679,575,1.265,576,1.764,589,1.265,591,1.243,595,1.287,596,1.654,599,1.287,633,0.772,635,1.04,664,1.01,702,1.556,703,1.956,704,2.041,719,1.222,733,1.484,735,0.98,737,1.927,740,2.101,749,1.041,750,1.09,765,1.257,771,1.143,778,1.762,786,1.025,791,1.525,793,2.448,802,1.073,816,1.265,821,1.265,827,1.181,828,1.125,881,1.181,923,1.201,937,1.621,994,1.107,1047,1.222,1048,1.287,1049,1.287,1050,1.287,1052,2.302,1054,0.966,1056,1.604,1173,2.198,1188,2.338,1205,1.222,1206,1.222,1223,2.22,1234,1.243,1254,1.09,1256,1.761,1310,2.049,1317,1.58,1419,1.222,1431,2.58,1455,0.952,1592,1.201,1607,1.761,1608,1.446,1616,1.287,1632,1.265,1639,2.454,1649,1.222,1682,1.107,1750,1.287,1763,1.125,1794,1.287,1809,2.149,1899,0.488,1900,1.265,1901,2.019,1902,2.419,1903,1.898,1904,1.983,1905,1.983,1906,1.983,1907,1.628,1908,1.604,1909,2.419,1910,1.265,1911,1.243,1912,2.711,1913,1.265,1914,1.287,1915,1.125,1916,1.287,1917,1.287,1918,1.287,1919,1.761,1920,1.887,1921,1.143,1922,1.821,1923,3.194,1924,1.311,1925,1.882,1926,1.162,1927,2.419,1928,1.311,1929,2.019,1930,1.983,1931,1.983,1932,1.311,1933,1.983,1934,2.336,1935,1.882,1936,1.311,1937,1.125,1938,1.311,1939,1.222,1940,1.533,1941,1.181,1942,1.311,1943,1.311,1944,0.995,1945,1.311,1946,1.265,1947,1.915,1948,1.983,1949,1.287,1950,1.983,1951,1.311,1952,1.287,1953,1.311,1954,2.546,1955,1.311,1956,1.311,1957,1.311,1958,1.983,1959,1.265,1960,1.125,1961,1.287,1962,1.287,1963,1.311,1964,1.287,1965,2.019,1966,1.311,1967,1.287,1968,1.243,1969,1.311,1970,1.311,1971,1.983,1972,1.851,1973,1.287,1974,1.956,1975,1.311,1976,1.287,1977,1.287,1978,1.311,1979,1.311,1980,1.311,1981,1.287,1982,1.311,1983,1.107,1984,1.201,1985,1.287,1986,1.311,1987,1.311,1988,1.311,1989,1.311,1990,1.265,1991,1.265,1992,1.265,1993,1.311,1994,2.019,1995,2.718,1996,1.311,1997,1.287,1998,1.311,1999,1.311,2000,1.311,2001,1.311,2002,1.311,2003,1.654,2004,1.073,2005,1.311,2006,1.311,2007,1.882,2008,1.265,2009,1.366,2010,1.265,2011,1.311,2012,1.311,2013,1.882,2014,2.019,2015,1.311,2016,1.311,2017,2.258,2018,1.915,2019,2.258,2020,1.287,2021,1.243,2022,1.073,2023,1.311,2024,1.143]],["title/interfaces/IAllAround.html",[40,0.003,106,2.329]],["body/interfaces/IAllAround.html",[0,0.055,3,0.126,4,0.118,5,0.118,10,0.13,11,0.315,20,0.005,21,0.336,24,0.306,28,0.316,39,0.358,40,0.005,41,0.56,52,1.237,75,0.46,78,0.002,79,0.002,80,0.002,83,2.579,85,0.528,89,1.237,95,3.541,100,1.603,101,3.5,102,1.326,103,3.425,104,1.596,106,3.813,108,0.739,109,2.964,110,1.787,112,3.545,113,3.374,114,2.256,122,2.415,133,3.619,134,0.622,137,3.995,140,1.842,143,2.666,149,0.76,150,2.472,152,1.642,153,2.733,154,1.773,155,3.472,156,1.773,157,1.773,158,2.009,160,1.773,161,1.952,164,1.374,166,2.661,167,2.661,168,1.773,175,1.935,178,3.042,179,0.416,180,2.472,181,3.65,182,2.661,194,1.738,214,1.439,253,2.248,254,1.5,281,0.589,285,1.35,297,1.688,309,1.818,310,2.224,317,0.95,334,1.671,384,1.991,404,3.171,446,0.848,464,1.221,488,1.105,489,2.174,524,1.641,529,1.683,539,2.874,545,2.486,548,1.896,552,3.24,580,1.219,592,2.948,593,1.726,597,1.141,598,1.683,626,1.383,633,2.165,635,1.938,664,1.553,702,2.616,703,1.953,704,1.486,708,2.531,718,1.332,733,1.081,735,1.508,759,1.532,770,2.821,773,1.532,775,2.764,776,1.439,777,2.217,791,0.72,804,1.683,812,3.65,934,3.337,1010,1.603,1054,2.503,1133,1.773,1150,1.683,1165,3.543,1190,1.726,1317,1.577,1358,1.911,1441,3.389,1532,2.733,1533,3.748,1534,1.773,1535,1.773,1539,1.773,1543,1.773,1547,1.773,1550,1.773,1655,1.773,1657,1.773,1658,1.773,1659,1.773,1662,5.576,1667,2.594,1677,1.773,1684,1.773,1690,2.733,1694,1.773,1699,2.763,1700,1.603,1703,1.683,1704,1.726,1708,1.726,1714,3.5,1717,1.726,1718,2.707,1782,2.733,1783,1.773,1821,1.284,1868,1.683,1869,1.726,1870,1.726,1871,1.726,1872,1.726,1873,2.661,1874,1.603,1875,1.726,1899,0.486,1903,2.79,1920,2.195,1922,0.86,1954,1.054,2009,2.224,2025,1.773,2026,4.96,2027,2.883,2028,4.823,2029,1.823,2030,2.811,2031,2.763,2032,3.894,2033,2.472,2034,3.843,2035,3.159,2036,3.171,2037,3.105,2038,2.733,2039,5.048,2040,2.811,2041,3.855,2042,2.733,2043,1.823,2044,1.41,2045,1.773,2046,2.733,2047,1.823,2048,1.823,2049,2.733,2050,1.773,2051,1.773,2052,2.883,2053,2.553,2054,1.773,2055,1.823,2056,1.726,2057,1.823,2058,1.773,2059,1.773,2060,1.823,2061,1.823,2062,1.823,2063,1.726,2064,1.532,2065,1.823,2066,2.661,2067,1.823,2068,1.567,2069,1.823,2070,1.773,2071,2.661,2072,2.811,2073,2.811,2074,2.362,2075,2.362,2076,1.823,2077,1.773,2078,1.773,2079,1.823,2080,1.823]],["title/interfaces/IAreaAccessors.html",[9,3.57,40,0.003]],["body/interfaces/IAreaAccessors.html",[0,0.107,1,4.359,3,0.244,4,0.228,5,0.228,6,4.825,7,2.401,8,1.34,9,6.078,10,0.251,11,0.503,12,1.201,13,1.292,16,3.434,20,0.005,23,3.034,24,0.299,25,6.919,27,6.919,28,0.309,29,4.136,30,4.482,31,3.259,32,2.904,33,2.462,34,1.548,35,2.477,36,2.514,37,2.423,38,1.643,39,0.357,40,0.004,41,1.032,42,1.92,43,6.124,44,5.533,45,6.124,46,6.124,47,1.92,48,6.124,49,5.533,50,6.124,51,6.124,52,1.973,53,2.849,54,2.245,55,1.643,56,2.904,57,2.226,58,7.273,59,6.068,60,4.178,61,6.124,62,4.178,63,6.124,64,4.825,65,4.825,66,4.825,67,4.825,68,4.825,69,4.825,70,4.825,71,4.825,72,2.844,73,3.259,74,3.259,75,1.13,76,3.637,77,3.637,78,0.003,79,0.004,80,0.003,1899,0.942]],["title/interfaces/IAreaDataAccessors.html",[25,3.743,40,0.003]],["body/interfaces/IAreaDataAccessors.html",[0,0.101,1,4.099,3,0.229,4,0.215,5,0.215,6,4.537,7,2.258,8,1.26,9,5.319,10,0.236,11,0.483,12,0.968,13,1.041,16,3.229,20,0.005,23,2.853,24,0.378,25,6.552,27,6.191,28,0.297,29,3.976,30,4.308,31,3.064,32,2.731,33,2.557,34,1.355,35,2.643,36,2.417,37,2.353,38,1.545,39,0.349,40,0.004,41,1.008,42,2.247,43,7.166,44,6.474,45,7.166,46,7.166,47,2.247,48,7.166,49,6.474,50,7.166,51,7.166,52,1.897,53,2.739,54,2.111,55,1.545,56,2.731,57,2.203,58,7.231,59,6.032,60,3.929,61,5.887,62,3.929,63,5.887,64,4.537,65,4.537,66,4.537,67,4.537,68,4.537,69,4.537,70,4.537,71,4.537,72,2.674,73,3.064,74,3.064,75,1.087,76,3.42,77,3.42,78,0.003,79,0.004,80,0.003,1899,0.886]],["title/interfaces/IAreaRendererConfig.html",[40,0.003,2081,3.292]],["body/interfaces/IAreaRendererConfig.html",[0,0.129,3,0.181,4,0.17,5,0.17,10,0.187,11,0.413,12,1.128,13,0.635,20,0.005,21,0.782,22,1.383,24,0.307,28,0.368,34,0.827,38,1.223,39,0.368,40,0.005,41,0.916,52,1.62,53,1.671,78,0.002,79,0.003,80,0.002,85,0.762,89,2.209,90,1.067,102,2.284,107,1.769,124,1.24,134,0.873,140,1.654,149,2.148,155,2.904,159,1.396,164,1.308,179,0.839,194,2.264,209,2.031,210,2.312,218,1.294,240,1.39,247,2.329,253,2.15,255,2.847,263,2.888,268,4.373,281,1.372,285,1.695,290,1.142,292,2.793,293,2.793,294,3.484,295,3.569,296,3.093,297,2.089,299,2.55,302,2.793,305,2.793,306,2.426,309,1.632,317,1.37,327,2.259,328,1.41,331,2.367,332,2.312,333,1.294,336,1.946,337,1.994,580,1.757,635,1.699,718,2.688,733,1.769,751,2.426,781,3.221,786,2.064,791,1.454,806,3.734,959,3.91,1153,2.629,1257,2.793,1360,4.664,1526,3.579,1608,2.487,1817,4.6,1818,3.579,1823,4.129,1899,0.701,1907,2.66,1908,1.497,1920,1.819,1922,2.003,1926,2.7,1940,2.636,1960,3.089,2004,2.161,2009,1.275,2027,2.209,2031,3.9,2036,2.162,2037,2.964,2044,3.985,2064,2.209,2081,4.189,2082,2.993,2083,5.443,2084,5.729,2085,5.729,2086,4.246,2087,4.355,2088,5.729,2089,5.024,2090,4.373,2091,4.355,2092,5.319,2093,5.512,2094,4.355,2095,2.888,2096,2.888,2097,3.111,2098,2.489,2099,4.355,2100,2.489,2101,4.189,2102,4.189,2103,4.189,2104,4.042,2105,3.79,2106,2.426,2107,2.993,2108,4.834,2109,5.024,2110,4.189,2111,2.888,2112,3.111,2113,3.111,2114,3.111,2115,2.888,2116,3.111,2117,3.111,2118,3.111,2119,2.993,2120,4.355,2121,4.189,2122,2.888,2123,3.111,2124,4.355,2125,4.189,2126,2.708,2127,3.111,2128,3.111,2129,2.993,2130,3.111,2131,2.993,2132,5.024,2133,3.111,2134,3.111,2135,2.993,2136,2.888,2137,3.111,2138,2.708]],["title/interfaces/IAreaSeriesAccessors.html",[27,3.743,40,0.003]],["body/interfaces/IAreaSeriesAccessors.html",[0,0.107,1,4.34,3,0.242,4,0.227,5,0.227,6,4.804,7,2.39,8,1.334,9,5.517,10,0.25,11,0.501,12,1.004,13,1.08,16,3.418,20,0.005,22,1.36,23,3.021,24,0.299,25,6.36,27,6.693,28,0.308,29,4.124,30,4.469,31,3.244,32,2.891,33,2.461,34,1.405,35,2.47,36,2.756,37,2.727,38,1.635,39,0.357,40,0.004,41,1.03,42,1.914,43,6.107,44,5.517,45,6.107,46,6.107,47,1.914,48,6.107,49,5.517,50,6.107,51,6.107,52,2.35,53,3.394,54,2.235,55,1.635,56,2.891,57,2.224,58,7.27,59,6.065,60,4.159,61,6.107,62,4.159,63,6.107,64,4.804,65,4.804,66,4.804,67,4.804,68,4.804,69,4.804,70,4.804,71,4.804,72,2.831,73,3.244,74,3.244,75,1.127,76,3.62,77,3.62,78,0.003,79,0.004,80,0.003,1899,0.938]],["title/interfaces/IAxis.html",[40,0.003,2078,2.812]],["body/interfaces/IAxis.html",[0,0.056,3,0.127,4,0.119,5,0.119,10,0.13,11,0.317,20,0.005,21,0.338,24,0.307,28,0.317,39,0.358,40,0.005,41,0.563,52,1.244,75,0.463,78,0.002,79,0.002,80,0.002,83,2.573,85,0.532,89,1.244,95,3.748,100,1.614,101,3.51,102,1.333,103,3.435,104,1.602,106,3.701,108,0.741,109,2.59,110,1.791,112,3.18,113,2.948,114,2.023,122,2.428,133,3.628,134,0.624,137,4.002,140,1.845,143,2.672,149,0.765,150,2.484,152,1.652,153,2.747,154,1.784,155,3.481,156,1.784,157,1.784,158,2.015,160,1.784,161,1.958,164,1.375,166,2.674,167,2.674,168,1.784,175,1.937,178,3.296,179,0.419,180,2.484,181,3.662,182,2.674,194,1.742,214,1.448,253,2.251,254,1.509,281,0.593,285,1.354,297,1.695,309,1.913,310,2.229,317,0.956,334,1.675,384,1.996,404,3.181,446,0.854,464,1.227,488,1.112,489,2.185,524,2.11,529,1.693,539,2.878,545,2.633,548,1.903,552,3.251,580,1.227,592,2.96,593,1.737,597,1.148,598,1.693,626,1.392,633,2.168,635,1.941,664,1.561,702,2.622,703,1.961,704,1.493,708,2.543,718,1.34,733,1.086,735,1.516,759,1.542,770,2.833,773,1.542,775,2.774,776,1.448,777,2.226,791,0.725,804,1.693,812,4.704,934,3.346,1010,1.614,1054,2.045,1133,1.784,1150,1.693,1165,3.553,1190,1.737,1317,1.585,1358,1.921,1441,3.401,1532,2.747,1533,3.761,1534,1.784,1535,1.784,1539,1.784,1543,1.784,1547,1.784,1550,1.784,1655,1.784,1657,1.784,1658,1.784,1659,1.784,1662,5.579,1667,2.607,1677,1.784,1684,1.784,1690,2.747,1694,1.784,1699,2.774,1700,1.614,1703,1.693,1704,1.737,1708,1.737,1714,2.895,1717,1.737,1718,2.718,1782,2.747,1783,1.784,1821,1.292,1868,1.693,1869,1.737,1870,1.737,1871,1.737,1872,1.737,1873,2.674,1874,1.614,1875,1.737,1899,0.49,1903,2.438,1920,1.657,1922,0.866,1954,1.061,2009,2.229,2025,1.784,2026,4.176,2027,2.374,2028,4.468,2029,1.835,2030,2.825,2031,2.774,2032,3.902,2033,2.484,2034,3.854,2035,3.168,2036,3.181,2037,3.115,2038,2.747,2039,5.056,2040,2.825,2041,3.868,2042,2.747,2043,1.835,2044,1.419,2045,1.784,2046,2.747,2047,1.835,2048,1.835,2049,2.747,2050,1.784,2051,1.784,2052,2.895,2053,2.879,2054,1.784,2055,1.835,2056,1.737,2057,1.835,2058,1.784,2059,1.784,2060,1.835,2061,1.835,2062,1.835,2063,1.737,2064,1.542,2065,1.835,2066,2.674,2067,1.835,2068,1.577,2069,1.835,2070,1.784,2071,2.674,2072,2.825,2073,2.825,2074,2.374,2075,2.374,2076,1.835,2077,1.784,2078,2.747,2079,3.868,2080,3.868]],["title/interfaces/IAxisConfig.html",[40,0.003,152,2.604]],["body/interfaces/IAxisConfig.html",[0,0.055,3,0.124,4,0.116,5,0.116,10,0.128,11,0.312,20,0.005,21,0.331,24,0.33,28,0.315,39,0.357,40,0.005,41,0.554,52,1.224,75,0.453,78,0.002,79,0.002,80,0.002,83,2.591,85,0.521,89,1.224,95,3.638,100,1.581,101,3.477,102,1.312,103,3.403,104,1.582,106,3.674,108,0.736,109,2.569,110,1.778,112,3.156,113,2.924,114,2.008,122,2.39,133,3.598,134,0.617,137,3.98,140,1.968,143,2.651,149,0.75,150,2.445,152,2.504,153,4.254,154,3.721,155,3.899,156,3.721,157,3.721,158,2.456,160,3.721,161,1.937,164,1.391,166,3.623,167,2.633,168,1.748,175,1.931,178,3.6,179,0.41,180,2.445,181,3.623,182,2.633,194,1.728,214,1.419,253,2.283,254,1.479,281,0.581,285,1.34,297,1.673,309,1.812,310,2.213,317,0.937,334,1.662,384,1.98,404,3.147,446,0.836,464,1.208,488,1.089,489,2.151,524,1.627,529,1.659,539,2.865,545,2.478,548,1.879,552,3.216,580,1.202,592,2.922,593,1.702,597,1.125,598,1.659,626,1.364,633,2.158,635,1.932,664,1.537,702,2.604,703,1.936,704,1.47,708,2.504,718,1.313,733,1.069,735,1.492,759,1.511,770,2.797,773,1.511,775,2.744,776,1.419,777,2.198,791,0.71,804,1.659,812,3.623,934,3.319,1010,1.581,1054,2.023,1133,1.748,1150,1.659,1165,3.796,1190,1.702,1317,1.56,1358,1.891,1441,3.365,1532,2.704,1533,3.721,1534,1.748,1535,1.748,1539,1.748,1543,1.748,1547,1.748,1550,1.748,1655,1.748,1657,1.748,1658,1.748,1659,1.748,1662,5.568,1667,2.566,1677,1.748,1684,1.748,1690,2.704,1694,1.748,1699,2.739,1700,1.581,1703,1.659,1704,1.702,1708,1.702,1714,2.858,1717,2.633,1718,3.02,1782,2.704,1783,1.748,1821,1.266,1868,1.659,1869,1.702,1870,1.702,1871,1.702,1872,1.702,1873,2.633,1874,1.581,1875,1.702,1899,0.48,1903,2.418,1920,1.639,1922,0.848,1954,1.04,2009,2.397,2025,1.748,2026,4.138,2027,2.337,2028,4.254,2029,1.798,2030,2.781,2031,3.082,2032,4.064,2033,2.445,2034,3.818,2035,3.139,2036,3.147,2037,3.082,2038,2.704,2039,5.107,2040,2.781,2041,3.826,2042,2.704,2043,1.798,2044,1.391,2045,1.748,2046,2.704,2047,1.798,2048,1.798,2049,2.704,2050,1.748,2051,1.748,2052,3.477,2053,2.531,2054,1.748,2055,1.798,2056,1.702,2057,1.798,2058,1.748,2059,1.748,2060,1.798,2061,1.798,2062,2.781,2063,2.633,2064,2.337,2065,1.798,2066,2.633,2067,1.798,2068,1.545,2069,1.798,2070,1.748,2071,2.633,2072,2.781,2073,2.781,2074,2.337,2075,2.337,2076,1.798,2077,1.748,2078,1.748,2079,1.798,2080,1.798]],["title/interfaces/IBandScale.html",[40,0.003,2139,3.292]],["body/interfaces/IBandScale.html",[3,0.187,4,0.175,5,0.175,10,0.331,12,0.845,13,0.655,17,0.664,20,0.005,24,0.288,28,0.259,34,0.852,39,0.388,40,0.005,41,0.975,42,1.16,47,1.16,75,1.088,78,0.002,79,0.003,80,0.002,95,1.811,97,1.798,108,0.838,110,1.465,117,1.552,124,1.773,126,2.095,132,2.429,134,0.817,140,1.904,161,1.902,164,1.359,175,1.843,178,2.138,179,0.618,183,0.829,192,1.465,222,1.979,225,2.016,227,1.823,245,3.758,269,1.798,280,2.455,281,0.875,285,1.714,309,0.961,326,2.79,334,1.846,336,1.432,337,2.055,368,2.046,379,3.87,441,2.709,576,1.93,763,1.874,764,2.5,765,1.209,775,2.695,777,2.429,778,1.145,780,4.005,802,2.207,841,3.084,884,3.885,1455,1.411,1490,2.328,1500,4.128,1599,2.976,1680,3.654,1682,1.641,1699,2.182,1718,2.965,1809,1.694,1899,0.723,1915,1.667,1919,2.351,1920,2.356,1944,3.131,2003,2.207,2022,2.207,2032,3.091,2035,2.055,2052,2.277,2053,2.016,2074,2.277,2075,2.277,2106,3.468,2139,4.912,2140,2.976,2141,4.341,2142,5.514,2143,4.769,2144,4.585,2145,2.976,2146,2.976,2147,2.878,2148,3.084,2149,3.084,2150,3.084,2151,4.315,2152,4.517,2153,3.758,2154,1.432,2155,3.205,2156,2.878,2157,2.976,2158,3.205,2159,3.205,2160,5.792,2161,4.446,2162,3.87,2163,6.403,2164,2.79,2165,3.205,2166,4.446,2167,4.128,2168,2.634,2169,2.79,2170,2.79,2171,4.799,2172,4.796,2173,4.446,2174,2.878,2175,2.878,2176,4.796,2177,2.79,2178,2.79,2179,3.205,2180,3.205,2181,3.084,2182,2.79,2183,4.799,2184,3.205,2185,5.042,2186,2.79,2187,3.205,2188,3.205,2189,4.278,2190,3.205,2191,3.205,2192,3.205]],["title/interfaces/IBarAccessors.html",[40,0.003,201,3.422]],["body/interfaces/IBarAccessors.html",[0,0.1,3,0.226,4,0.212,5,0.212,7,2.229,8,1.244,10,0.388,11,0.479,12,1.268,13,1.389,16,3.188,20,0.005,23,2.817,24,0.286,28,0.328,29,3.943,30,4.273,31,3.026,32,2.697,33,2.395,34,1.495,38,1.525,39,0.328,40,0.004,41,1.003,52,1.881,53,2.717,54,2.084,55,1.988,56,2.697,57,1.278,72,2.641,73,3.026,74,3.026,75,1.317,76,3.377,77,3.377,78,0.003,79,0.004,80,0.003,108,0.935,144,2.697,159,1.244,164,1.149,192,2.228,198,3.601,199,4.776,200,4.273,201,5.624,203,5.737,205,4.82,206,4.273,209,2.499,210,2.883,211,6.495,212,3.18,213,3.18,214,2.587,215,4.776,216,3.104,217,4.776,218,2.721,219,6.224,220,4.776,221,4.776,222,3.472,223,6.224,224,4.776,225,2.55,226,6.224,227,2.073,228,6.224,229,6.224,230,4.776,231,4.776,232,6.224,233,4.776,234,1.785,235,4.776,236,4.48,237,4.776,238,4.776,239,4.776,240,1.733,241,1.759,242,5.056,243,4.776,244,4.776,245,3.279,246,4.776,247,1.66,248,4.776,249,4.776,250,2.229,1899,0.875]],["title/interfaces/IBarChartConfig.html",[40,0.003,448,3.951]],["body/interfaces/IBarChartConfig.html",[3,0.3,4,0.282,5,0.282,10,0.31,11,0.571,20,0.005,22,1.464,24,0.34,39,0.351,40,0.005,78,0.004,79,0.005,80,0.004,85,1.262,140,2.065,164,1.231,212,3.241,213,3.241,253,1.866,255,3.369,404,4.577,448,6.96,763,3.013,1899,1.162,2193,6.869,2194,8.777,2195,6.344]],["title/interfaces/IBarDataAccessors.html",[40,0.003,203,3.176]],["body/interfaces/IBarDataAccessors.html",[0,0.095,3,0.214,4,0.201,5,0.201,7,2.114,8,1.179,10,0.383,11,0.463,12,1.21,13,1.351,16,3.023,20,0.005,22,1.47,23,2.671,24,0.365,28,0.319,29,3.807,30,4.126,31,2.869,32,2.557,33,2.529,34,1.297,38,1.446,39,0.319,40,0.004,41,0.983,52,2.26,53,3.264,54,1.976,55,1.919,56,2.557,57,1.212,72,2.504,73,2.869,74,2.869,75,1.295,76,3.202,77,3.202,78,0.003,79,0.004,80,0.003,108,0.938,144,2.557,159,1.179,164,1.119,192,2.211,198,3.415,199,4.528,200,4.126,201,4.882,203,5.418,205,4.274,206,4.631,209,2.456,210,2.733,211,7.211,212,3.821,213,3.821,214,3.893,215,7.186,216,2.943,217,4.528,218,2.69,219,6.01,220,4.528,221,4.528,222,3.383,223,6.01,224,4.528,225,2.484,226,6.01,227,2.002,228,6.01,229,6.01,230,4.528,231,4.528,232,6.01,233,4.528,234,1.693,235,4.528,236,4.248,237,4.528,238,4.528,239,4.528,240,1.644,241,1.668,242,4.882,243,4.528,244,4.528,245,3.109,246,4.528,247,1.574,248,4.528,249,4.528,250,2.114,1899,0.829]],["title/interfaces/IBarRendererConfig.html",[40,0.003,2129,3.292]],["body/interfaces/IBarRendererConfig.html",[0,0.128,3,0.178,4,0.167,5,0.167,10,0.183,11,0.407,12,1.08,13,0.622,20,0.005,21,0.773,22,1.447,24,0.333,28,0.367,34,0.81,38,1.198,39,0.367,40,0.005,41,0.908,52,1.597,53,1.637,78,0.002,79,0.003,80,0.002,85,0.746,89,1.848,90,1.217,102,2.467,107,1.614,124,1.215,134,0.887,140,1.792,149,2.135,155,3.933,159,1.376,164,1.329,179,0.827,194,2.273,209,2.009,210,2.264,218,1.267,240,1.917,247,2.126,253,2.135,255,3.526,263,3.984,268,4.948,281,1.171,285,1.682,290,1.118,292,2.736,293,2.736,294,3.434,295,3.529,296,3.048,297,2.066,299,2.537,302,2.736,305,2.736,306,2.376,309,1.49,317,1.342,327,2.212,328,1.381,331,2.318,332,2.264,333,1.267,336,1.361,337,1.953,580,2.424,635,1.551,718,3.067,733,1.848,751,2.376,781,3.185,786,2.034,791,1.658,806,4.008,959,3.853,1153,2.575,1257,3.853,1360,3.984,1526,4.083,1608,2.341,1817,4.558,1818,3.526,1823,4.083,1899,0.687,1907,2.778,1908,1.466,1920,1.799,1922,2.15,1926,2.306,1940,2.616,1960,2.584,2004,2.13,2009,1.249,2027,3.048,2031,3.671,2036,2.118,2037,3.382,2044,3.856,2064,2.164,2081,2.931,2082,2.931,2083,3.046,2084,4.291,2085,4.291,2086,4.198,2087,3.046,2088,4.968,2089,4.291,2090,3.735,2091,3.046,2092,4.612,2093,5.469,2094,3.046,2095,2.828,2096,2.828,2097,3.046,2098,2.438,2099,4.291,2100,2.438,2101,4.128,2102,4.128,2103,4.128,2104,3.984,2105,3.735,2106,2.376,2107,2.931,2108,4.779,2109,4.968,2110,4.128,2111,2.828,2112,3.046,2113,3.046,2114,3.046,2115,2.828,2116,3.046,2117,3.046,2118,3.046,2119,2.931,2120,4.968,2121,4.779,2122,2.828,2123,3.046,2124,4.291,2125,4.128,2126,2.652,2127,3.046,2128,3.046,2129,4.128,2130,5.393,2131,4.128,2132,5.898,2133,5.393,2134,5.393,2135,4.128,2136,3.984,2137,5.393,2138,2.652]],["title/interfaces/IBorderConfig.html",[40,0.003,1703,2.668]],["body/interfaces/IBorderConfig.html",[0,0.086,3,0.126,4,0.119,5,0.119,10,0.13,11,0.317,20,0.005,21,0.52,22,1.248,24,0.307,28,0.317,39,0.358,40,0.005,41,0.562,52,1.941,75,0.462,78,0.002,79,0.002,80,0.002,83,2.581,85,0.531,89,1.243,95,3.545,100,1.612,101,3.705,102,1.331,103,3.433,104,1.601,106,3.7,108,0.741,109,2.589,110,1.79,112,3.178,113,2.947,114,2.022,122,2.425,133,3.626,134,0.765,137,4.001,140,1.907,143,2.671,149,0.764,150,3.399,152,1.65,153,2.744,154,1.782,155,3.479,156,1.782,157,1.782,158,2.471,160,1.782,161,1.957,164,1.381,166,2.672,167,2.672,168,1.782,175,1.937,178,3.05,179,0.418,180,2.482,181,3.66,182,2.672,194,1.742,214,2.227,253,2.272,254,1.508,281,0.592,285,1.353,297,1.693,309,1.82,310,2.228,317,0.955,334,1.674,384,1.995,404,3.18,446,0.853,464,1.226,488,1.111,489,2.183,524,1.646,529,1.691,539,2.878,545,2.489,548,1.902,552,3.249,580,1.225,592,2.957,593,1.735,597,1.147,598,1.691,626,1.39,633,2.168,635,1.99,664,1.56,702,2.621,703,1.96,704,1.492,708,2.541,718,1.339,733,1.085,735,1.514,759,1.54,770,2.831,773,1.54,775,2.772,776,1.446,777,2.224,791,0.724,804,1.691,812,3.66,934,3.344,1010,1.612,1054,2.044,1133,1.782,1150,1.691,1165,3.7,1190,1.735,1317,1.583,1358,1.919,1441,3.399,1532,2.744,1533,3.759,1534,1.782,1535,1.782,1539,1.782,1543,1.782,1547,1.782,1550,1.782,1655,1.782,1657,1.782,1658,1.782,1659,1.782,1662,5.578,1667,2.604,1677,1.782,1684,1.782,1690,2.744,1694,1.782,1699,2.772,1700,1.612,1703,2.604,1704,1.735,1708,1.735,1714,2.892,1717,1.735,1718,2.716,1782,2.744,1783,1.782,1821,1.291,1868,1.691,1869,1.735,1870,1.735,1871,1.735,1872,1.735,1873,2.672,1874,1.612,1875,1.735,1899,0.489,1903,2.436,1920,1.656,1922,0.865,1954,1.06,2009,2.301,2025,1.782,2026,4.174,2027,2.372,2028,4.287,2029,1.833,2030,2.822,2031,2.772,2032,3.9,2033,2.482,2034,3.852,2035,3.166,2036,3.18,2037,3.113,2038,2.744,2039,5.055,2040,2.822,2041,3.866,2042,2.744,2043,1.833,2044,2.183,2045,3.759,2046,2.744,2047,1.833,2048,1.833,2049,2.744,2050,1.782,2051,1.782,2052,2.892,2053,2.561,2054,1.782,2055,1.833,2056,1.735,2057,1.833,2058,1.782,2059,1.782,2060,1.833,2061,1.833,2062,1.833,2063,1.735,2064,1.54,2065,1.833,2066,2.672,2067,1.833,2068,1.575,2069,1.833,2070,1.782,2071,2.672,2072,2.822,2073,2.822,2074,2.372,2075,2.372,2076,1.833,2077,1.782,2078,1.782,2079,1.833,2080,1.833]],["title/interfaces/IBorders.html",[40,0.003,1704,2.738]],["body/interfaces/IBorders.html",[0,0.057,3,0.13,4,0.122,5,0.122,20,0.005,21,0.346,24,0.233,28,0.32,39,0.36,40,0.005,41,0.696,52,1.266,75,0.474,78,0.002,79,0.003,80,0.002,83,2.58,85,0.544,89,1.266,95,3.561,100,1.651,101,3.742,102,1.357,103,3.471,104,1.626,106,3.849,108,0.747,109,2.721,110,1.806,112,3.307,113,3.097,114,2.104,122,2.471,133,3.662,134,0.631,137,4.027,140,1.855,143,2.697,149,0.783,150,2.529,152,1.691,153,2.796,154,1.826,155,3.513,156,1.826,157,1.826,158,2.04,160,1.826,161,1.982,164,1.378,166,2.723,167,2.723,168,1.826,175,1.944,178,3.09,179,0.428,180,2.529,181,3.707,182,2.723,194,1.758,214,1.482,253,2.261,254,1.545,281,0.607,285,1.371,297,1.719,309,1.83,310,2.248,317,0.979,334,1.689,384,2.015,404,3.22,446,0.874,464,1.249,488,1.138,489,2.224,524,1.672,529,1.733,539,2.894,545,2.503,548,1.931,552,3.291,580,1.255,592,3.003,593,1.778,597,1.175,598,1.733,626,1.425,633,2.18,635,1.95,664,1.589,702,2.641,703,1.99,704,1.52,708,2.589,718,1.372,733,1.106,735,1.543,759,1.579,770,2.874,773,1.579,775,2.808,776,1.482,777,2.258,791,0.742,804,1.733,812,3.707,934,3.377,1010,1.651,1054,2.07,1133,1.826,1150,1.733,1165,3.586,1190,1.778,1317,1.613,1358,1.955,1441,3.443,1532,2.796,1533,3.807,1534,1.826,1535,1.826,1539,1.826,1543,1.826,1547,1.826,1550,1.826,1655,1.826,1657,1.826,1658,1.826,1659,1.826,1662,5.591,1667,2.654,1677,1.826,1684,1.826,1690,2.796,1694,1.826,1699,2.814,1700,1.651,1703,1.733,1704,2.723,1708,1.778,1714,2.937,1717,1.778,1718,2.757,1782,2.796,1783,2.796,1821,1.323,1868,1.733,1869,1.778,1870,1.778,1871,1.778,1872,1.778,1873,2.723,1874,1.651,1875,1.778,1899,0.501,1903,2.56,1920,1.677,1922,0.886,1954,1.086,2009,2.248,2025,1.826,2026,4.22,2027,2.417,2028,4.505,2029,1.878,2030,2.876,2031,2.814,2032,3.931,2033,2.529,2034,3.895,2035,3.202,2036,3.22,2037,3.154,2038,2.796,2039,5.085,2040,2.876,2041,3.915,2042,2.796,2043,2.876,2044,1.453,2045,1.826,2046,2.796,2047,1.878,2048,1.878,2049,2.796,2050,1.826,2051,1.826,2052,2.937,2053,2.6,2054,1.826,2055,1.878,2056,1.778,2057,1.878,2058,1.826,2059,1.826,2060,1.878,2061,1.878,2062,1.878,2063,1.778,2064,1.579,2065,1.878,2066,2.723,2067,1.878,2068,1.614,2069,1.878,2070,1.826,2071,2.723,2072,2.876,2073,2.876,2074,2.417,2075,2.417,2076,1.878,2077,1.826,2078,1.826,2079,1.878,2080,1.878]],["title/interfaces/IChart.html",[40,0.003,464,1.256]],["body/interfaces/IChart.html",[3,0.119,4,0.112,5,0.112,10,0.266,11,0.42,12,1.273,13,1.298,17,1.22,19,1.693,20,0.005,21,0.9,22,1.257,24,0.333,28,0.343,33,1.155,34,0.543,35,1.49,36,1.512,37,1.326,39,0.396,40,0.005,41,0.895,42,1.74,47,1.74,57,1.677,75,0.836,78,0.002,79,0.002,80,0.002,83,1.237,89,1.187,90,1.503,97,1.586,102,0.815,104,0.804,108,0.435,114,0.76,117,0.621,129,2.309,134,0.86,140,1.757,149,0.72,158,0.9,159,1.764,164,1.267,175,1.766,179,1.24,183,0.529,194,1.479,209,1.943,218,1.326,225,0.927,234,2.211,240,0.913,241,0.927,247,2.474,250,1.175,253,0.74,269,1.289,280,1.479,281,1.312,283,0.94,285,1.311,290,0.75,299,1.97,309,1.329,310,1.97,328,0.927,333,1.843,334,1.208,368,0.94,384,1.695,399,1.116,411,0.94,417,1.014,439,0.984,443,2.211,444,1.535,446,2.091,447,2.313,453,1.608,455,2.008,459,2.116,464,1.626,465,1.512,476,2.275,524,2.059,525,2.178,527,4.252,529,2.487,530,2.638,531,2.638,532,2.638,533,2.638,535,4.252,537,4.252,539,1.859,541,2.254,545,1.97,547,1.898,548,2.069,553,1.898,557,2.335,561,2.335,564,2.725,566,2.725,571,1.898,572,2.234,574,2.725,575,1.865,576,2.086,578,2.36,589,1.195,591,1.175,595,1.217,596,1.583,599,1.217,633,0.73,635,0.996,664,0.955,702,1.49,703,1.888,704,1.98,719,1.155,733,1.44,735,0.927,737,1.859,740,2.039,749,0.984,750,1.03,765,1.203,771,1.08,778,1.716,786,0.969,791,1.479,793,2.385,802,1.014,816,1.195,821,1.195,827,1.116,828,1.063,881,1.116,923,1.135,937,1.564,994,1.047,1047,1.155,1048,1.217,1049,1.217,1050,1.217,1052,2.234,1054,0.913,1056,0.984,1173,2.133,1188,2.269,1205,1.155,1206,1.155,1223,2.142,1234,1.175,1254,1.03,1256,1.686,1310,1.977,1317,1.512,1419,1.155,1431,2.503,1455,0.9,1592,1.135,1607,1.686,1608,0.887,1616,1.217,1632,1.195,1639,1.714,1649,1.155,1682,1.047,1750,1.217,1763,1.063,1794,1.217,1809,2.073,1899,0.461,1900,1.195,1901,1.239,1902,1.898,1903,1.49,1904,1.217,1905,1.217,1906,1.217,1907,0.999,1908,0.984,1909,2.335,1910,1.195,1911,1.175,1912,2.649,1913,1.195,1914,1.217,1915,1.063,1916,1.217,1917,1.217,1918,1.217,1919,1.686,1920,1.844,1921,1.08,1922,1.767,1923,3.14,1924,1.239,1925,1.802,1926,1.098,1927,2.335,1928,1.239,1929,1.933,1930,1.898,1931,1.898,1932,1.239,1933,1.898,1934,2.254,1935,1.802,1936,1.239,1937,1.063,1938,1.239,1939,1.155,1940,1.468,1941,1.116,1942,1.239,1943,1.239,1944,0.94,1945,1.239,1946,1.195,1947,1.833,1948,1.898,1949,1.217,1950,1.898,1951,1.239,1952,1.217,1953,1.239,1954,2.488,1955,1.239,1956,1.239,1957,1.239,1958,1.898,1959,1.195,1960,1.063,1961,1.217,1962,1.217,1963,1.239,1964,1.217,1965,1.933,1966,1.239,1967,1.217,1968,1.175,1969,1.239,1970,1.239,1971,1.898,1972,1.771,1973,1.217,1974,1.888,1975,1.239,1976,1.217,1977,1.217,1978,1.239,1979,1.239,1980,1.239,1981,1.217,1982,1.239,1983,1.047,1984,1.135,1985,1.217,1986,1.239,1987,1.239,1988,1.239,1989,1.239,1990,1.195,1991,1.195,1992,1.195,1993,1.239,1994,1.933,1995,2.638,1996,1.239,1997,1.217,1998,1.239,1999,1.239,2000,1.239,2001,1.239,2002,1.239,2003,1.583,2004,1.014,2005,1.239,2006,1.239,2007,1.802,2008,1.195,2009,1.308,2010,1.195,2011,1.239,2012,1.239,2013,1.802,2014,1.933,2015,1.239,2016,1.239,2017,2.178,2018,1.833,2019,2.178,2020,1.217,2021,1.175,2022,1.014,2023,1.239,2024,1.08,2196,3.041,2197,3.041,2198,3.041,2199,3.041,2200,3.041,2201,3.041,2202,3.041,2203,3.041,2204,3.041,2205,3.041,2206,3.041]],["title/interfaces/IChartAssist.html",[40,0.003,769,3.176]],["body/interfaces/IChartAssist.html",[0,0.124,3,0.21,4,0.197,5,0.197,8,1.153,10,0.216,13,1.356,17,1.122,19,1.694,20,0.005,21,0.965,22,1.069,24,0.306,28,0.28,34,0.956,39,0.369,40,0.005,75,1.025,78,0.003,79,0.004,80,0.003,85,1.327,90,1.648,94,1.278,108,0.877,124,1.434,134,0.922,158,2.386,164,0.982,175,1.86,179,0.927,183,0.93,192,1.184,194,2.115,234,2.213,269,1.944,279,4.109,280,2.182,283,2.855,291,2.804,333,2,334,1.782,394,2.877,411,2.213,432,3.13,446,1.891,459,1.583,464,1.988,482,3.542,488,1.841,572,2.424,576,2.617,597,1.901,730,4.626,731,5.37,732,3.596,733,1.169,734,5.03,735,1.63,736,3.752,737,2.569,738,3.752,739,3.752,740,2.213,741,3.752,749,1.731,750,3.245,751,2.804,752,3.596,753,3.596,754,3.596,755,3.459,756,4.626,757,3.459,758,4.716,759,3.848,760,5.418,761,3.752,762,3.459,763,2.103,764,2.804,765,1.356,766,5.017,767,5.017,768,4.318,769,4.464,770,3.343,771,2.542,772,4.626,773,3.416,774,4.626,775,2.914,776,3.207,777,2.627,778,1.717,779,5.37,780,4.201,781,3.083,782,4.626,783,4.809,784,5.565,785,3.459,786,1.705,787,4.626,788,4.626,789,4.626,790,4.626,791,1.2,792,3.459,793,1.785,794,2.955,795,3.752,796,3.752,797,2.804,798,3.459,1899,0.811,2207,6.41,2208,5.35,2209,5.35,2210,5.35]],["title/interfaces/IChartAssistEvent.html",[40,0.003,792,3.292]],["body/interfaces/IChartAssistEvent.html",[0,0.131,3,0.229,4,0.215,5,0.215,8,1.258,10,0.236,11,0.483,13,1.298,20,0.005,21,0.793,24,0.359,28,0.297,34,1.043,39,0.377,40,0.005,75,0.837,78,0.003,79,0.004,80,0.003,85,0.961,90,1.638,94,1.354,108,0.816,124,1.565,134,0.904,158,2.243,164,0.802,175,1.528,179,0.756,183,1.015,192,1.293,194,1.998,234,2.344,279,3.618,280,1.922,283,2.603,333,2.118,334,1.844,394,3.14,411,1.806,432,3.416,459,1.728,464,2.076,482,3.33,488,2.01,572,2.568,576,2.455,597,2.075,730,4.901,731,3.644,732,3.925,733,1.275,734,5.557,735,1.78,736,4.095,737,2.681,738,4.095,739,4.095,740,2.344,741,4.095,749,1.889,750,3.127,751,3.061,752,3.925,753,3.925,754,3.925,755,3.776,756,4.901,757,3.776,758,4.434,759,3.618,760,5.094,761,4.095,762,3.776,763,2.295,764,3.061,765,1.481,766,4.095,767,4.095,768,3.524,769,3.644,770,2.728,771,2.075,772,3.776,773,2.788,774,3.776,775,2.379,776,2.618,777,2.144,778,1.402,779,4.729,780,3.7,781,2.516,782,3.776,783,3.925,784,3.776,785,3.776,786,1.861,787,5.759,788,4.901,789,4.901,790,4.901,791,1.701,792,4.901,793,2.971,794,3.225,795,4.095,796,4.095,797,3.061,798,3.776,1899,0.885]],["title/interfaces/IChartAssistSeries.html",[40,0.003,750,1.725]],["body/interfaces/IChartAssistSeries.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.434,12,1.282,13,1.312,20,0.005,21,0.77,22,1.161,24,0.325,28,0.349,33,1.212,34,0.578,35,1.563,36,1.587,37,1.392,39,0.398,40,0.005,41,0.946,42,1.791,47,1.791,57,1.72,75,0.87,78,0.002,79,0.003,80,0.002,83,1.298,89,1.245,90,1.523,97,1.649,102,0.867,104,0.855,108,0.456,114,0.809,117,0.661,129,2.362,134,0.869,140,1.89,149,0.766,158,0.958,159,1.801,164,1.282,179,1.186,183,0.563,194,1.529,209,2,218,1.392,225,0.986,234,2.276,240,0.972,241,0.986,247,2.517,250,1.25,253,0.788,280,1.539,281,1.35,283,1.001,285,1.355,290,0.798,299,2.028,309,1.374,310,2.028,328,0.986,333,2.396,334,1.257,368,1.001,384,0.832,399,1.188,411,1.001,417,1.08,439,1.047,443,1.54,444,1.611,446,1.945,447,1.611,453,1.687,455,2.089,459,2.178,464,1.497,465,1.587,476,2.21,524,2,525,1.859,530,1.295,531,1.295,532,1.295,533,1.295,539,1.587,541,1.25,545,1.673,547,1.295,548,1.563,553,1.295,557,1.992,561,1.992,571,1.295,572,1.687,575,1.272,576,1.988,589,1.272,591,1.25,595,1.295,596,1.661,599,1.295,633,0.777,635,1.045,664,1.016,702,1.563,703,1.964,704,2.047,719,1.229,733,1.489,735,0.986,737,1.934,740,2.108,749,1.047,750,1.687,765,1.263,771,1.15,778,1.766,786,1.031,791,1.529,793,2.454,802,1.08,816,1.272,821,1.272,827,1.188,828,1.132,881,1.188,923,1.208,937,1.627,994,1.114,1047,1.229,1048,1.295,1049,1.295,1050,1.295,1052,2.309,1054,0.972,1056,1.047,1173,2.205,1188,2.346,1205,1.229,1206,1.229,1223,2.228,1234,1.25,1254,1.096,1256,1.769,1310,2.056,1317,1.587,1419,1.229,1431,2.588,1455,0.958,1592,1.208,1607,1.769,1608,0.944,1616,1.295,1632,2.679,1639,1.798,1649,1.229,1682,1.114,1750,1.295,1763,1.132,1794,1.295,1809,2.157,1899,0.49,1900,1.272,1901,1.318,1902,1.992,1903,1.563,1904,1.295,1905,1.295,1906,1.295,1907,1.063,1908,1.047,1909,2.428,1910,1.272,1911,1.25,1912,2.717,1913,1.272,1914,1.295,1915,1.132,1916,1.295,1917,1.295,1918,1.295,1919,1.769,1920,1.891,1921,1.15,1922,1.826,1923,3.2,1924,1.318,1925,1.891,1926,1.169,1927,2.428,1928,1.318,1929,2.029,1930,1.992,1931,1.992,1932,1.318,1933,1.992,1934,2.345,1935,1.891,1936,1.318,1937,1.132,1938,1.318,1939,1.229,1940,1.54,1941,1.188,1942,1.318,1943,1.318,1944,1.001,1945,1.318,1946,1.272,1947,1.923,1948,1.992,1949,1.295,1950,1.992,1951,1.318,1952,1.295,1953,1.318,1954,2.552,1955,1.318,1956,1.318,1957,1.318,1958,1.992,1959,1.272,1960,1.132,1961,1.295,1962,1.295,1963,1.318,1964,1.295,1965,2.029,1966,1.318,1967,1.295,1968,1.25,1969,1.318,1970,1.318,1971,1.992,1972,1.859,1973,1.295,1974,1.964,1975,1.318,1976,1.295,1977,1.295,1978,1.318,1979,1.318,1980,1.318,1981,1.295,1982,1.318,1983,1.114,1984,1.208,1985,1.295,1986,1.318,1987,1.318,1988,1.318,1989,1.318,1990,2.679,1991,1.272,1992,1.272,1993,1.318,1994,2.029,1995,2.727,1996,1.318,1997,1.295,1998,1.318,1999,1.318,2000,1.318,2001,1.318,2002,1.318,2003,1.661,2004,1.08,2005,1.318,2006,1.318,2007,1.891,2008,1.272,2009,1.372,2010,1.272,2011,1.318,2012,1.318,2013,1.891,2014,2.029,2015,1.318,2016,1.318,2017,2.266,2018,1.923,2019,2.266,2020,1.295,2021,1.25,2022,1.08,2023,1.318,2024,1.15]],["title/interfaces/IChartEvent.html",[40,0.003,596,1.698]],["body/interfaces/IChartEvent.html",[3,0.128,4,0.12,5,0.12,10,0.276,11,0.436,12,1.291,13,1.313,20,0.005,21,0.772,22,0.749,24,0.318,28,0.349,33,1.219,34,0.582,35,1.572,36,1.596,37,1.4,39,0.399,40,0.005,41,0.919,42,1.797,47,1.797,57,1.726,75,0.874,78,0.002,79,0.003,80,0.002,83,1.306,89,1.253,90,1.526,97,1.657,102,0.874,104,0.862,108,0.459,114,0.816,117,0.666,129,2.368,134,0.871,140,1.849,149,0.772,158,0.965,159,1.805,164,1.284,179,1.188,183,0.567,194,1.535,209,2.007,218,1.4,225,0.994,234,2.284,240,0.979,241,0.994,247,2.522,250,1.26,253,0.794,280,1.546,281,1.355,283,1.009,285,1.361,290,0.805,299,2.035,309,1.379,310,2.035,328,0.994,333,1.913,334,1.263,368,1.009,384,0.838,399,1.197,411,1.009,417,1.088,439,1.055,443,1.549,444,1.621,446,1.951,447,1.621,453,1.697,455,2.099,459,2.186,464,1.505,465,1.596,476,2.218,524,2.007,525,1.87,530,1.305,531,1.305,532,1.305,533,1.305,539,1.596,541,1.26,545,1.681,547,1.305,548,1.572,553,1.305,557,2.004,561,2.004,571,1.305,572,1.697,575,1.282,576,1.779,589,1.282,591,1.26,595,1.305,596,2.034,599,1.305,633,0.783,635,1.051,664,1.024,702,1.572,703,1.973,704,2.055,719,1.238,733,1.495,735,0.994,737,1.943,740,2.116,749,1.055,750,1.105,765,1.27,771,1.159,778,1.773,786,1.039,791,1.535,793,2.463,802,1.088,816,1.282,821,1.282,827,1.197,828,1.14,881,1.197,923,1.217,937,1.634,994,1.122,1047,1.238,1048,1.305,1049,1.305,1050,1.305,1052,2.318,1054,0.979,1056,1.055,1173,2.214,1188,2.355,1205,1.238,1206,1.238,1223,2.239,1234,1.26,1254,1.105,1256,1.78,1310,2.066,1317,1.596,1419,1.238,1431,2.598,1455,0.965,1592,1.217,1607,1.78,1608,0.951,1616,1.305,1632,1.282,1639,1.809,1649,1.238,1682,1.122,1750,1.305,1763,1.14,1794,1.305,1809,2.167,1899,0.494,1900,1.282,1901,1.329,1902,2.004,1903,1.572,1904,1.305,1905,1.305,1906,1.305,1907,1.071,1908,1.055,1909,2.44,1910,1.282,1911,1.26,1912,2.725,1913,1.282,1914,1.305,1915,1.14,1916,1.305,1917,1.305,1918,1.305,1919,1.78,1920,2.038,1921,1.159,1922,1.834,1923,3.207,1924,1.329,1925,1.902,1926,1.178,1927,2.44,1928,1.329,1929,2.041,1930,2.004,1931,2.004,1932,1.329,1933,2.004,1934,2.356,1935,1.902,1936,1.329,1937,1.14,1938,1.329,1939,1.238,1940,1.549,1941,1.197,1942,1.329,1943,1.329,1944,1.009,1945,1.329,1946,1.282,1947,1.935,1948,2.004,1949,1.305,1950,2.004,1951,1.329,1952,1.305,1953,1.329,1954,2.56,1955,1.329,1956,1.329,1957,1.329,1958,2.004,1959,1.282,1960,1.14,1961,1.305,1962,1.305,1963,1.329,1964,1.305,1965,2.041,1966,1.329,1967,1.305,1968,1.26,1969,1.329,1970,1.329,1971,2.004,1972,1.87,1973,1.305,1974,1.973,1975,1.329,1976,1.305,1977,1.305,1978,1.329,1979,1.329,1980,1.329,1981,1.305,1982,1.329,1983,1.122,1984,1.217,1985,1.305,1986,1.329,1987,1.329,1988,1.329,1989,1.329,1990,1.282,1991,1.282,1992,1.282,1993,1.329,1994,2.041,1995,2.738,1996,1.329,1997,1.305,1998,1.329,1999,1.329,2000,2.788,2001,1.329,2002,1.329,2003,1.671,2004,1.088,2005,1.329,2006,1.329,2007,1.902,2008,1.282,2009,1.381,2010,1.282,2011,1.329,2012,1.329,2013,1.902,2014,2.041,2015,1.329,2016,1.329,2017,2.277,2018,1.935,2019,2.277,2020,1.305,2021,1.26,2022,1.088,2023,1.329,2024,1.159]],["title/interfaces/IChartMarker.html",[40,0.003,994,1.752]],["body/interfaces/IChartMarker.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.318,12,1.282,13,1.312,17,0.695,19,0.769,20,0.005,21,0.814,22,0.485,24,0.308,28,0.349,33,1.215,34,0.58,35,1.567,36,1.59,37,1.395,39,0.398,40,0.005,41,0.917,42,1.793,47,1.793,52,0.812,57,1.722,75,0.871,78,0.002,79,0.003,80,0.002,83,1.301,89,1.248,90,1.524,97,1.652,102,0.87,104,0.858,108,0.457,114,0.812,117,0.663,129,2.364,134,0.886,140,1.789,149,0.769,158,0.961,159,1.803,164,1.283,175,1.006,179,1.199,183,0.564,194,1.532,209,2.002,218,1.395,225,0.989,234,2.279,240,0.975,241,0.989,247,2.519,250,1.254,253,0.79,269,1.356,280,1.542,281,1.352,283,1.004,285,1.358,290,0.801,299,2.031,309,1.376,310,2.031,328,0.989,333,1.908,334,1.259,368,1.004,384,0.834,399,1.192,411,1.004,417,1.083,439,1.05,443,1.544,444,1.615,446,1.947,447,1.615,453,1.691,455,2.093,459,2.181,464,1.5,465,1.59,476,2.213,524,2.002,525,1.863,530,1.299,531,1.299,532,1.299,533,1.299,539,1.59,541,1.254,545,1.676,547,1.299,548,1.567,553,1.299,557,1.997,561,1.997,571,1.299,572,1.691,575,1.276,576,1.774,589,1.276,591,1.254,595,1.299,596,1.665,599,1.299,633,0.779,635,1.047,664,1.019,702,1.567,703,1.967,704,2.05,719,1.232,733,1.491,735,0.989,737,1.938,740,2.111,749,1.05,750,1.1,765,1.265,771,1.153,778,1.769,786,1.034,791,1.532,793,2.458,802,1.083,816,1.276,821,1.276,827,1.192,828,1.135,881,1.192,923,1.212,937,1.63,994,1.718,1047,1.232,1048,1.299,1049,1.299,1050,1.299,1052,2.313,1054,0.975,1056,1.05,1173,2.208,1188,2.349,1205,1.232,1206,1.232,1223,2.233,1234,1.254,1254,1.1,1256,1.773,1310,2.06,1317,1.59,1419,1.232,1431,2.592,1455,0.961,1592,1.212,1607,1.773,1608,0.947,1616,1.299,1632,1.276,1639,1.803,1649,1.232,1682,1.117,1750,1.299,1763,1.135,1794,1.299,1809,2.161,1899,0.492,1900,1.276,1901,1.322,1902,1.997,1903,1.567,1904,1.299,1905,1.299,1906,1.299,1907,1.066,1908,1.05,1909,2.433,1910,1.276,1911,1.254,1912,2.72,1913,1.276,1914,1.299,1915,1.135,1916,1.299,1917,1.299,1918,1.299,1919,1.773,1920,1.893,1921,1.153,1922,1.829,1923,3.203,1924,1.322,1925,1.895,1926,1.172,1927,2.433,1928,1.322,1929,2.033,1930,1.997,1931,1.997,1932,1.322,1933,1.997,1934,2.349,1935,1.895,1936,1.322,1937,1.135,1938,1.322,1939,1.232,1940,1.544,1941,1.192,1942,1.322,1943,1.322,1944,1.004,1945,1.322,1946,1.276,1947,1.928,1948,1.997,1949,1.299,1950,1.997,1951,1.322,1952,1.299,1953,1.322,1954,2.555,1955,1.322,1956,1.322,1957,1.322,1958,1.997,1959,1.276,1960,1.135,1961,1.299,1962,1.299,1963,1.322,1964,1.299,1965,2.033,1966,1.322,1967,1.299,1968,1.254,1969,1.322,1970,1.322,1971,1.997,1972,1.863,1973,1.299,1974,1.967,1975,1.322,1976,1.299,1977,1.299,1978,1.322,1979,1.322,1980,1.322,1981,1.299,1982,1.322,1983,1.117,1984,1.212,1985,1.299,1986,1.322,1987,1.322,1988,1.322,1989,1.322,1990,1.276,1991,2.683,1992,1.962,1993,1.322,1994,2.033,1995,2.731,1996,1.322,1997,1.299,1998,1.322,1999,1.322,2000,1.322,2001,1.322,2002,1.322,2003,1.665,2004,1.083,2005,1.322,2006,1.322,2007,1.895,2008,1.276,2009,1.375,2010,1.276,2011,1.322,2012,1.322,2013,1.895,2014,2.033,2015,1.322,2016,1.322,2017,2.27,2018,1.928,2019,2.27,2020,1.299,2021,1.254,2022,1.083,2023,1.322,2024,1.153,2211,4.13,2212,3.246,2213,3.246]],["title/interfaces/IChartPalette.html",[40,0.003,1047,1.933]],["body/interfaces/IChartPalette.html",[3,0.127,4,0.12,5,0.12,10,0.276,11,0.435,12,1.282,13,1.313,20,0.005,21,0.771,24,0.326,28,0.349,33,1.216,34,0.581,35,1.569,36,1.593,37,1.397,39,0.399,40,0.005,41,0.918,42,1.794,47,1.794,57,1.724,75,0.872,78,0.002,79,0.003,80,0.002,83,1.303,89,1.25,90,1.525,97,1.654,102,0.871,104,0.859,108,0.458,114,0.813,117,0.664,129,2.366,134,0.87,140,1.79,149,0.77,158,0.962,159,1.804,164,1.283,179,1.187,183,0.565,194,1.533,209,2.004,218,1.397,225,0.991,234,2.281,240,0.977,241,0.991,247,2.52,250,1.256,253,0.791,280,1.543,281,1.353,283,1.006,285,1.359,290,0.802,299,2.032,309,1.377,310,2.032,328,0.991,333,1.91,334,1.26,368,1.006,384,0.836,399,1.194,411,1.006,417,1.085,439,1.052,443,1.546,444,1.617,446,1.949,447,1.617,453,1.693,455,2.095,459,2.183,464,1.502,465,1.593,476,2.215,524,2.004,525,1.866,530,1.301,531,1.301,532,1.301,533,1.301,539,1.593,541,1.256,545,1.678,547,1.301,548,1.569,553,1.301,557,2,561,2,571,1.301,572,1.693,575,1.278,576,1.776,589,1.278,591,1.256,595,1.301,596,1.667,599,1.301,633,0.781,635,1.049,664,1.021,702,1.569,703,1.969,704,2.052,719,1.235,733,1.492,735,0.991,737,1.94,740,2.113,749,1.052,750,1.102,765,1.267,771,1.155,778,1.77,786,1.036,791,1.533,793,2.46,802,1.085,816,1.278,821,1.278,827,1.194,828,1.137,881,1.194,923,1.214,937,1.631,994,1.119,1047,1.898,1048,2.734,1049,2.734,1050,2.734,1052,2.969,1054,0.977,1056,1.052,1173,2.21,1188,2.352,1205,1.235,1206,1.235,1223,2.235,1234,1.256,1254,1.102,1256,1.776,1310,2.062,1317,1.593,1419,1.235,1431,2.594,1455,0.962,1592,1.214,1607,1.776,1608,0.949,1616,1.301,1632,1.278,1639,1.805,1649,1.235,1682,1.119,1750,1.301,1763,1.137,1794,1.301,1809,2.163,1899,0.493,1900,1.278,1901,1.325,1902,2,1903,1.569,1904,1.301,1905,1.301,1906,1.301,1907,1.068,1908,1.052,1909,2.436,1910,1.278,1911,1.256,1912,2.722,1913,1.278,1914,1.301,1915,1.137,1916,1.301,1917,1.301,1918,1.301,1919,1.776,1920,1.895,1921,1.155,1922,1.831,1923,3.204,1924,1.325,1925,1.898,1926,1.174,1927,2.436,1928,1.325,1929,2.036,1930,2,1931,2,1932,1.325,1933,2,1934,2.351,1935,1.898,1936,1.325,1937,1.137,1938,1.325,1939,1.235,1940,1.546,1941,1.194,1942,1.325,1943,1.325,1944,1.006,1945,1.325,1946,1.278,1947,1.93,1948,2,1949,1.301,1950,2,1951,1.325,1952,1.301,1953,1.325,1954,2.557,1955,1.325,1956,1.325,1957,1.325,1958,2,1959,1.278,1960,1.137,1961,1.301,1962,1.301,1963,1.325,1964,1.301,1965,2.036,1966,1.325,1967,1.301,1968,1.256,1969,1.325,1970,1.325,1971,2,1972,1.866,1973,1.301,1974,1.969,1975,1.325,1976,1.301,1977,1.301,1978,1.325,1979,1.325,1980,1.325,1981,1.301,1982,1.325,1983,1.119,1984,1.214,1985,1.301,1986,1.325,1987,1.325,1988,1.325,1989,1.325,1990,1.278,1991,1.278,1992,1.278,1993,1.325,1994,2.036,1995,2.734,1996,1.325,1997,1.301,1998,1.325,1999,1.325,2000,1.325,2001,1.325,2002,1.325,2003,1.667,2004,1.085,2005,1.325,2006,1.325,2007,1.898,2008,1.278,2009,1.377,2010,1.278,2011,1.325,2012,1.325,2013,1.898,2014,2.036,2015,1.325,2016,1.325,2017,2.273,2018,1.93,2019,2.273,2020,1.301,2021,1.256,2022,1.085,2023,1.325,2024,1.155]],["title/interfaces/IChartPlugin.html",[40,0.003,548,1.598]],["body/interfaces/IChartPlugin.html",[3,0.123,4,0.116,5,0.116,10,0.271,11,0.428,12,1.278,13,1.305,17,0.935,20,0.005,21,0.759,24,0.304,28,0.346,33,1.185,34,0.561,35,1.529,36,1.552,37,1.361,39,0.397,40,0.005,41,0.906,42,1.767,47,1.767,57,1.7,75,0.854,78,0.002,79,0.002,80,0.002,83,1.269,85,0.518,89,1.218,90,1.607,97,1.62,102,0.842,104,0.831,108,0.446,114,0.786,117,0.642,129,2.337,134,0.865,140,1.774,149,0.744,158,0.93,159,1.784,164,1.275,175,1.353,179,1.223,183,0.546,194,1.629,209,1.973,218,1.361,225,0.958,234,2.246,240,0.944,241,0.958,247,2.497,250,1.214,253,0.765,269,1.323,280,1.511,281,1.332,283,0.972,285,1.335,290,0.775,299,2.001,309,1.353,310,2.001,328,0.958,333,1.876,334,1.234,368,0.972,384,0.808,399,1.154,411,0.972,417,1.049,439,1.017,443,2.246,444,2.485,446,2.372,447,2.349,453,1.65,455,2.051,459,2.149,464,1.791,465,1.552,476,2.552,524,1.973,525,1.818,530,1.258,531,1.258,532,1.258,533,1.258,539,1.552,541,1.214,545,1.642,547,1.258,548,1.871,553,1.258,557,1.948,561,1.948,571,1.258,572,1.65,575,1.236,576,1.739,589,1.236,591,1.214,595,1.258,596,1.624,599,1.258,633,0.755,635,1.022,664,0.987,702,2.107,703,2.171,704,2.016,719,1.194,733,1.466,735,0.958,737,1.899,740,2.076,749,1.017,750,1.065,765,1.235,771,1.73,778,1.743,786,1.002,791,1.506,793,2.422,802,1.049,816,1.236,821,1.236,827,1.154,828,1.099,881,1.154,923,1.174,937,1.597,994,1.082,1047,1.194,1048,1.258,1049,1.258,1050,1.258,1052,2.274,1054,0.944,1056,1.017,1173,2.171,1188,2.31,1205,1.194,1206,1.194,1223,2.188,1234,1.214,1254,1.065,1256,1.73,1310,2.019,1317,1.552,1419,1.194,1431,2.548,1455,0.93,1592,1.174,1607,1.73,1608,0.917,1616,1.258,1632,1.236,1639,1.759,1649,1.194,1682,1.082,1750,1.258,1763,1.099,1794,1.258,1809,2.118,1899,0.476,1900,1.236,1901,1.281,1902,1.948,1903,1.871,1904,1.258,1905,1.258,1906,1.258,1907,1.033,1908,1.017,1909,2.384,1910,1.236,1911,1.214,1912,2.685,1913,1.236,1914,1.258,1915,1.099,1916,1.258,1917,1.258,1918,1.258,1919,1.73,1920,1.869,1921,1.117,1922,1.798,1923,3.172,1924,1.281,1925,1.849,1926,1.135,1927,2.384,1928,1.281,1929,1.984,1930,1.948,1931,1.948,1932,1.281,1933,1.948,1934,2.302,1935,1.849,1936,1.281,1937,1.099,1938,1.281,1939,1.194,1940,1.506,1941,1.154,1942,1.281,1943,1.281,1944,0.972,1945,1.281,1946,1.236,1947,1.881,1948,1.948,1949,1.258,1950,1.948,1951,1.281,1952,1.258,1953,1.281,1954,2.904,1955,1.281,1956,1.281,1957,1.281,1958,1.948,1959,1.236,1960,1.099,1961,1.258,1962,1.258,1963,1.281,1964,1.258,1965,1.984,1966,1.281,1967,1.258,1968,1.214,1969,1.281,1970,1.281,1971,1.948,1972,1.818,1973,1.258,1974,1.928,1975,1.281,1976,1.258,1977,1.258,1978,1.281,1979,1.281,1980,1.281,1981,1.258,1982,1.281,1983,1.082,1984,1.174,1985,1.258,1986,1.281,1987,1.281,1988,1.281,1989,1.281,1990,1.236,1991,1.236,1992,1.236,1993,1.281,1994,2.734,1995,3.312,1996,1.984,1997,1.948,1998,1.984,1999,1.984,2000,1.281,2001,1.281,2002,1.281,2003,1.624,2004,1.049,2005,1.281,2006,1.281,2007,1.849,2008,1.236,2009,1.342,2010,1.236,2011,1.281,2012,1.281,2013,1.849,2014,1.984,2015,1.281,2016,1.281,2017,2.225,2018,1.881,2019,2.225,2020,1.258,2021,1.214,2022,1.049,2023,1.281,2024,1.117,2214,3.144,2215,3.144,2216,3.144,2217,3.144]],["title/interfaces/IChartSeries.html",[40,0.003,576,1.485]],["body/interfaces/IChartSeries.html",[3,0.125,4,0.117,5,0.117,10,0.273,11,0.431,12,1.288,13,1.309,20,0.005,21,0.765,24,0.324,28,0.348,33,1.2,34,0.571,35,1.548,36,1.571,37,1.378,39,0.398,40,0.005,41,0.942,42,1.961,47,1.961,57,1.711,75,0.863,78,0.002,79,0.002,80,0.002,83,1.764,85,0.526,89,1.506,90,1.547,97,1.636,102,0.856,104,0.844,108,0.452,114,0.799,117,0.653,129,2.351,134,0.868,140,1.781,149,0.757,158,0.946,159,1.793,164,1.279,179,1.182,183,0.555,194,1.641,209,2.101,218,1.378,225,0.974,234,2.262,240,0.959,241,0.974,247,2.508,250,1.234,253,0.777,280,1.716,281,1.478,283,0.988,285,1.734,290,0.788,299,2.446,309,1.364,310,2.016,328,0.974,333,1.892,334,1.246,368,0.988,384,0.821,399,1.173,411,0.988,417,1.066,439,1.034,443,1.525,444,1.595,446,1.933,447,1.595,453,1.67,455,2.072,459,2.165,464,1.485,465,1.571,476,2.197,524,1.988,525,1.841,530,1.278,531,1.278,532,1.278,533,1.278,539,1.571,541,1.234,545,1.659,547,1.278,548,1.548,553,1.278,557,1.973,561,1.973,571,1.278,572,1.67,575,1.256,576,1.975,589,1.256,591,1.234,595,1.278,596,1.645,599,1.278,633,0.767,635,1.035,664,1.548,702,1.548,703,1.948,704,2.033,719,1.213,733,1.479,735,1.503,737,1.919,740,2.094,749,1.034,750,1.082,765,1.25,771,1.135,778,1.756,786,1.018,791,1.519,793,2.44,802,1.066,816,1.256,821,1.256,827,1.173,828,1.117,881,1.173,923,1.193,937,1.613,994,1.1,1047,1.213,1048,1.278,1049,1.278,1050,1.278,1052,2.293,1054,0.959,1056,1.034,1173,2.19,1188,2.33,1205,1.213,1206,1.213,1223,2.211,1234,1.234,1254,1.082,1256,1.752,1310,2.04,1317,1.571,1419,1.213,1431,2.777,1455,0.946,1592,1.193,1607,1.752,1608,0.932,1616,1.278,1632,1.256,1639,1.781,1649,1.872,1682,1.1,1750,1.973,1763,1.117,1794,1.278,1809,2.139,1899,0.484,1900,1.256,1901,1.301,1902,1.973,1903,1.548,1904,1.278,1905,1.278,1906,1.278,1907,1.049,1908,1.034,1909,2.409,1910,1.256,1911,1.234,1912,2.703,1913,1.256,1914,1.278,1915,1.117,1916,1.278,1917,1.278,1918,1.278,1919,1.752,1920,1.881,1921,1.135,1922,1.814,1923,3.188,1924,1.301,1925,1.872,1926,1.154,1927,2.409,1928,1.301,1929,2.009,1930,1.973,1931,1.973,1932,1.301,1933,1.973,1934,2.326,1935,1.872,1936,1.301,1937,1.117,1938,1.301,1939,1.213,1940,1.525,1941,1.173,1942,1.301,1943,1.301,1944,0.988,1945,1.301,1946,1.256,1947,1.904,1948,1.973,1949,1.278,1950,1.973,1951,1.301,1952,1.278,1953,1.301,1954,2.539,1955,1.301,1956,1.301,1957,1.301,1958,1.973,1959,1.256,1960,1.117,1961,1.278,1962,1.278,1963,1.301,1964,1.278,1965,2.453,1966,1.301,1967,1.278,1968,1.234,1969,1.301,1970,1.301,1971,1.973,1972,1.841,1973,1.278,1974,2.366,1975,1.301,1976,1.278,1977,1.278,1978,1.301,1979,1.301,1980,1.301,1981,1.278,1982,1.301,1983,1.697,1984,1.841,1985,1.973,1986,2.009,1987,2.009,1988,2.009,1989,2.009,1990,1.256,1991,1.256,1992,1.256,1993,1.301,1994,2.009,1995,2.708,1996,1.301,1997,1.278,1998,1.301,1999,1.301,2000,1.301,2001,1.301,2002,1.301,2003,1.645,2004,1.066,2005,1.301,2006,1.301,2007,1.872,2008,1.256,2009,1.359,2010,1.256,2011,1.301,2012,1.301,2013,1.872,2014,2.009,2015,1.301,2016,1.301,2017,2.248,2018,1.904,2019,2.248,2020,1.278,2021,1.234,2022,1.066,2023,1.301,2024,1.135]],["title/interfaces/IChartViewStatusEventPayload.html",[40,0.003,881,1.869]],["body/interfaces/IChartViewStatusEventPayload.html",[3,0.127,4,0.119,5,0.119,10,0.275,11,0.434,12,1.282,13,1.312,20,0.005,21,0.77,24,0.307,28,0.349,33,1.212,34,0.578,35,1.563,36,1.587,37,1.392,39,0.398,40,0.005,41,0.916,42,1.791,47,1.791,57,1.72,75,0.87,78,0.002,79,0.003,80,0.002,83,1.298,85,0.533,89,1.518,90,1.523,97,1.649,102,0.867,104,0.855,108,0.456,114,0.809,117,0.661,129,2.362,134,0.869,140,1.846,149,0.766,158,1.474,159,1.801,164,1.282,179,1.186,183,0.563,194,1.529,209,2,218,1.392,225,0.986,234,2.276,240,0.972,241,0.986,247,2.517,250,1.25,253,0.788,280,1.539,281,1.35,283,1.001,285,1.355,290,0.798,299,2.028,309,1.374,310,2.028,328,0.986,333,1.905,334,1.257,368,1.001,384,0.832,399,1.188,411,1.001,417,1.661,439,1.047,443,1.54,444,1.611,446,1.945,447,1.611,453,1.687,455,2.089,459,2.178,464,1.497,465,1.587,476,2.21,524,2.112,525,1.859,530,1.295,531,1.295,532,1.295,533,1.295,539,1.587,541,1.25,545,1.673,547,1.295,548,1.563,553,1.295,557,1.992,561,1.992,571,1.295,572,1.687,575,1.272,576,1.771,589,1.272,591,1.25,595,1.295,596,1.661,599,1.295,633,0.777,635,1.045,664,1.016,702,1.563,703,2.38,704,2.047,719,1.229,733,1.489,735,0.986,737,1.934,740,2.276,749,1.047,750,1.096,765,1.263,771,1.15,778,1.766,786,1.031,791,1.529,793,2.592,802,1.08,816,1.272,821,1.272,827,1.188,828,1.132,881,1.828,923,2.544,937,1.627,994,1.114,1047,1.229,1048,1.295,1049,1.295,1050,1.295,1052,2.309,1054,0.972,1056,1.047,1173,2.205,1188,2.346,1205,1.229,1206,1.229,1223,2.853,1234,1.25,1254,1.096,1256,1.769,1310,2.056,1317,1.587,1419,1.229,1431,2.588,1455,0.958,1592,1.208,1607,1.769,1608,0.944,1616,1.295,1632,1.272,1639,1.798,1649,1.229,1682,1.114,1750,1.295,1763,1.132,1794,1.992,1809,2.157,1899,0.49,1900,1.272,1901,1.318,1902,1.992,1903,1.563,1904,1.295,1905,1.295,1906,1.295,1907,1.063,1908,1.047,1909,2.428,1910,1.272,1911,1.25,1912,2.717,1913,1.272,1914,1.295,1915,1.132,1916,1.295,1917,1.295,1918,1.295,1919,1.769,1920,1.891,1921,1.15,1922,1.826,1923,3.267,1924,1.318,1925,1.891,1926,1.169,1927,2.428,1928,1.318,1929,2.029,1930,1.992,1931,1.992,1932,1.318,1933,1.992,1934,2.345,1935,1.891,1936,1.318,1937,1.132,1938,1.318,1939,1.229,1940,1.54,1941,1.188,1942,1.318,1943,1.318,1944,1.001,1945,1.318,1946,1.272,1947,1.923,1948,1.992,1949,1.295,1950,1.992,1951,1.318,1952,1.295,1953,1.318,1954,2.552,1955,1.318,1956,1.318,1957,1.318,1958,1.992,1959,1.272,1960,1.132,1961,1.295,1962,1.295,1963,1.318,1964,1.295,1965,2.029,1966,1.318,1967,1.295,1968,1.25,1969,1.318,1970,1.318,1971,1.992,1972,1.859,1973,1.295,1974,1.964,1975,1.318,1976,1.295,1977,1.295,1978,1.318,1979,1.318,1980,1.318,1981,1.295,1982,1.318,1983,1.114,1984,1.208,1985,1.295,1986,1.318,1987,1.318,1988,1.318,1989,1.318,1990,1.272,1991,1.272,1992,1.272,1993,1.318,1994,2.029,1995,2.727,1996,1.318,1997,1.295,1998,1.318,1999,1.318,2000,1.318,2001,1.318,2002,1.318,2003,1.661,2004,1.08,2005,1.318,2006,1.318,2007,1.891,2008,1.272,2009,1.673,2010,1.272,2011,1.318,2012,2.029,2013,2.588,2014,2.776,2015,2.029,2016,2.029,2017,2.266,2018,1.923,2019,2.266,2020,1.295,2021,1.25,2022,1.08,2023,1.318,2024,1.15]],["title/interfaces/IDataAccessors.html",[35,1.598,40,0.003]],["body/interfaces/IDataAccessors.html",[3,0.129,4,0.121,5,0.121,10,0.247,11,0.321,12,1.283,13,1.315,17,0.457,20,0.005,21,0.775,24,0.297,28,0.35,33,1.49,34,0.586,35,1.922,36,1.604,37,1.407,39,0.399,40,0.005,41,0.921,42,1.802,47,1.802,57,1.73,75,0.984,78,0.002,79,0.003,80,0.002,83,1.312,89,1.259,90,1.528,97,1.664,102,0.88,104,0.868,108,0.461,114,0.821,117,0.671,129,2.374,134,0.877,140,1.795,149,0.777,158,0.972,159,1.809,164,1.286,179,1.189,183,0.571,194,1.541,209,2.013,218,1.407,225,1,234,2.291,240,0.986,241,1,247,2.526,250,1.268,253,0.799,280,1.553,281,1.359,283,1.015,285,1.366,290,0.81,299,2.041,309,1.384,310,2.041,328,1,333,1.919,334,1.268,368,1.015,384,0.844,399,1.205,411,1.015,417,1.095,439,1.062,443,1.557,444,1.629,446,1.957,447,1.629,453,1.706,455,2.108,459,2.192,464,1.511,465,1.604,476,2.224,524,2.013,525,1.879,530,1.313,531,1.313,532,1.313,533,1.313,539,1.604,541,1.268,545,1.688,547,1.313,548,1.58,553,1.313,557,2.014,561,2.014,571,1.313,572,1.706,575,1.29,576,1.787,589,1.29,591,1.268,595,1.313,596,1.679,599,1.313,633,0.788,635,1.056,664,1.03,702,1.58,703,1.981,704,2.062,719,1.246,733,1.5,735,1,737,1.951,740,2.124,749,1.062,750,1.112,765,1.276,771,1.166,778,1.876,786,1.046,791,1.541,793,2.47,802,1.095,816,1.29,821,1.29,827,1.205,828,1.148,881,1.205,923,1.225,937,1.641,994,1.13,1047,1.246,1048,1.313,1049,1.313,1050,1.313,1052,2.326,1054,0.986,1056,1.062,1173,2.221,1188,2.363,1205,1.246,1206,1.246,1223,2.248,1234,1.268,1254,1.112,1256,1.789,1310,2.075,1317,1.604,1419,1.246,1431,2.607,1455,0.972,1592,1.225,1607,1.789,1608,0.958,1616,1.313,1632,1.29,1639,1.818,1649,1.246,1682,1.13,1750,1.313,1763,1.148,1794,1.313,1809,2.176,1899,0.497,1900,1.29,1901,1.337,1902,2.014,1903,1.58,1904,1.313,1905,1.313,1906,1.313,1907,1.078,1908,1.062,1909,2.45,1910,1.29,1911,1.268,1912,2.733,1913,1.29,1914,1.313,1915,1.148,1916,1.313,1917,1.313,1918,1.313,1919,1.789,1920,1.902,1921,1.166,1922,1.84,1923,3.213,1924,1.337,1925,1.912,1926,1.186,1927,2.45,1928,1.337,1929,2.051,1930,2.014,1931,2.014,1932,1.337,1933,2.014,1934,2.365,1935,1.912,1936,1.337,1937,1.148,1938,1.337,1939,1.246,1940,1.557,1941,1.205,1942,1.337,1943,1.337,1944,1.015,1945,1.337,1946,1.29,1947,1.945,1948,2.014,1949,1.313,1950,2.014,1951,1.337,1952,1.313,1953,1.337,1954,2.567,1955,1.337,1956,1.337,1957,1.337,1958,2.014,1959,1.29,1960,1.148,1961,1.313,1962,1.313,1963,1.337,1964,1.313,1965,2.051,1966,1.337,1967,1.313,1968,1.268,1969,1.337,1970,1.337,1971,2.014,1972,1.879,1973,1.313,1974,1.981,1975,1.337,1976,1.313,1977,1.313,1978,1.337,1979,1.337,1980,1.337,1981,1.313,1982,1.337,1983,1.13,1984,1.225,1985,1.313,1986,1.337,1987,1.337,1988,1.337,1989,1.337,1990,1.29,1991,1.29,1992,1.29,1993,1.337,1994,2.051,1995,2.747,1996,1.337,1997,1.313,1998,1.337,1999,1.337,2000,1.337,2001,1.337,2002,1.337,2003,1.679,2004,1.095,2005,1.337,2006,1.337,2007,1.912,2008,1.29,2009,1.387,2010,1.29,2011,1.337,2012,1.337,2013,1.912,2014,2.051,2015,1.337,2016,1.337,2017,2.286,2018,1.945,2019,2.286,2020,1.313,2021,1.268,2022,1.095,2023,1.337,2024,1.166,2218,1.765,2219,3.283]],["title/interfaces/IDataPoint.html",[40,0.003,1188,1.752]],["body/interfaces/IDataPoint.html",[3,0.126,4,0.118,5,0.118,10,0.336,11,0.432,12,1.295,13,1.325,20,0.005,21,0.766,22,0.738,24,0.337,28,0.348,33,1.203,34,0.572,35,1.551,36,1.575,37,1.381,39,0.398,40,0.005,41,0.913,42,1.782,47,1.782,57,1.713,75,0.864,78,0.002,79,0.002,80,0.002,83,1.288,85,0.527,89,1.236,90,1.52,97,1.639,102,0.859,104,0.847,108,0.453,114,0.801,117,0.655,129,2.353,134,0.879,140,1.783,149,0.759,158,0.948,159,1.795,164,1.301,179,1.183,183,0.557,194,1.521,209,2.192,218,2.047,225,0.976,234,2.576,240,0.962,241,0.976,247,2.554,250,1.238,253,0.78,280,1.529,281,1.344,283,0.991,285,1.348,290,0.79,299,2.019,309,1.367,310,2.019,328,0.976,333,1.895,334,1.249,368,0.991,384,0.824,399,1.176,411,0.991,417,1.069,439,1.037,443,1.528,444,1.599,446,1.936,447,1.599,453,1.674,455,2.076,459,2.168,464,1.488,465,1.575,476,2.2,524,1.99,525,1.845,530,1.282,531,1.282,532,1.282,533,1.282,539,1.575,541,1.238,545,1.662,547,1.282,548,1.551,553,1.282,557,1.977,561,1.977,571,1.282,572,1.674,575,1.259,576,1.76,589,1.259,591,1.238,595,1.282,596,1.648,599,1.282,633,0.769,635,1.037,664,1.006,702,1.551,703,1.951,704,2.036,719,1.217,733,1.481,735,0.976,737,1.922,740,2.097,749,1.037,750,1.086,765,1.253,771,1.139,778,1.758,786,1.021,791,1.521,793,2.443,802,1.069,816,1.259,821,1.259,827,1.176,828,1.12,881,1.176,923,1.196,937,2.161,994,1.103,1047,1.217,1048,1.282,1049,1.282,1050,1.282,1052,2.297,1054,0.962,1056,1.037,1173,2.193,1188,2.521,1205,1.217,1206,1.217,1223,2.215,1234,1.238,1254,1.086,1256,1.756,1310,2.482,1317,1.575,1419,1.217,1431,2.781,1455,0.948,1592,1.196,1607,1.756,1608,0.935,1616,1.282,1632,1.259,1639,1.785,1649,1.217,1682,1.103,1750,1.282,1763,1.12,1794,1.282,1809,2.409,1899,0.486,1900,1.259,1901,1.305,1902,1.977,1903,1.551,1904,1.282,1905,1.282,1906,1.282,1907,1.052,1908,1.037,1909,2.413,1910,1.259,1911,1.238,1912,2.706,1913,1.259,1914,1.282,1915,1.12,1916,1.282,1917,1.282,1918,1.282,1919,1.756,1920,1.883,1921,1.139,1922,1.817,1923,3.19,1924,1.305,1925,1.876,1926,1.157,1927,2.413,1928,1.305,1929,2.013,1930,1.977,1931,1.977,1932,1.305,1933,1.977,1934,2.33,1935,1.876,1936,1.305,1937,1.12,1938,1.305,1939,1.217,1940,1.528,1941,1.176,1942,1.305,1943,1.305,1944,0.991,1945,1.305,1946,1.259,1947,1.909,1948,1.977,1949,1.282,1950,1.977,1951,1.305,1952,1.282,1953,1.305,1954,2.542,1955,1.305,1956,1.305,1957,1.305,1958,1.977,1959,1.259,1960,1.12,1961,1.282,1962,1.282,1963,1.305,1964,1.282,1965,2.013,1966,1.305,1967,1.282,1968,1.238,1969,1.305,1970,1.305,1971,1.977,1972,1.845,1973,1.282,1974,1.951,1975,1.305,1976,1.282,1977,1.282,1978,1.305,1979,1.305,1980,1.305,1981,1.282,1982,1.305,1983,1.103,1984,1.196,1985,1.282,1986,1.305,1987,1.305,1988,1.305,1989,1.305,1990,1.259,1991,1.259,1992,1.259,1993,1.305,1994,2.013,1995,2.713,1996,1.305,1997,1.282,1998,1.305,1999,1.305,2000,1.305,2001,1.305,2002,1.305,2003,1.648,2004,1.069,2005,1.305,2006,1.305,2007,1.876,2008,1.259,2009,1.362,2010,1.259,2011,1.305,2012,1.305,2013,1.876,2014,2.013,2015,1.305,2016,1.305,2017,2.252,2018,1.909,2019,2.252,2020,1.282,2021,1.238,2022,1.069,2023,1.305,2024,1.139]],["title/interfaces/IDataPointsPayload.html",[40,0.003,453,1.725]],["body/interfaces/IDataPointsPayload.html",[3,0.128,4,0.12,5,0.12,10,0.246,11,0.319,12,1.288,13,1.321,17,0.454,20,0.005,21,0.772,24,0.296,28,0.349,33,1.218,34,0.582,35,1.571,36,1.595,37,1.399,39,0.399,40,0.005,41,0.918,42,1.796,47,1.796,57,1.725,75,0.873,78,0.002,79,0.003,80,0.002,83,1.304,85,0.536,89,1.252,90,1.525,97,1.656,102,0.873,104,0.861,108,0.458,114,0.815,117,0.665,129,2.367,134,0.876,140,1.791,149,0.771,158,0.964,159,1.805,164,1.284,179,1.187,183,0.566,194,1.535,209,2.005,218,1.399,225,0.993,234,2.509,240,0.978,241,0.993,247,2.565,250,1.258,253,0.793,280,1.545,281,1.354,283,1.548,285,1.36,290,0.804,299,2.034,309,1.378,310,2.034,328,0.993,333,1.912,334,1.262,368,1.007,384,0.837,399,1.196,411,1.007,417,1.087,439,1.054,443,1.548,444,1.619,446,1.95,447,1.619,453,2.065,455,2.354,459,2.184,464,1.503,465,1.595,476,2.216,524,2.005,525,1.868,530,1.303,531,1.303,532,1.303,533,1.303,539,1.595,541,1.258,545,1.68,547,1.303,548,1.571,553,1.303,557,2.002,561,2.002,571,1.303,572,1.696,575,1.28,576,1.778,589,1.28,591,1.258,595,1.303,596,1.669,599,1.303,633,0.782,635,1.05,664,1.023,702,1.571,703,1.972,704,2.054,719,1.237,733,1.494,735,0.993,737,1.942,740,2.282,749,1.054,750,1.104,765,1.545,771,1.157,778,1.87,786,1.038,791,1.535,793,2.462,802,1.669,816,1.28,821,1.28,827,1.196,828,1.139,881,1.196,923,1.216,937,1.633,994,1.121,1047,1.237,1048,1.303,1049,1.303,1050,1.303,1052,2.317,1054,0.978,1056,1.054,1173,2.212,1188,2.681,1205,1.237,1206,1.237,1223,2.238,1234,1.258,1254,1.104,1256,1.778,1310,2.065,1317,1.595,1419,1.237,1431,2.597,1455,0.964,1592,1.216,1607,1.778,1608,0.95,1616,1.303,1632,1.28,1639,1.807,1649,1.237,1682,1.121,1750,1.303,1763,1.139,1794,1.303,1809,2.166,1899,0.494,1900,1.28,1901,1.327,1902,2.002,1903,1.571,1904,1.303,1905,1.303,1906,1.303,1907,1.07,1908,1.054,1909,2.438,1910,1.28,1911,1.258,1912,2.724,1913,1.28,1914,1.303,1915,1.139,1916,1.303,1917,1.303,1918,1.303,1919,1.778,1920,1.896,1921,1.157,1922,1.833,1923,3.206,1924,1.327,1925,1.9,1926,1.176,1927,2.438,1928,1.327,1929,2.039,1930,2.002,1931,2.002,1932,1.327,1933,2.002,1934,2.354,1935,1.9,1936,1.327,1937,1.139,1938,1.327,1939,1.237,1940,1.548,1941,1.196,1942,1.327,1943,1.327,1944,1.007,1945,1.327,1946,1.28,1947,1.933,1948,2.002,1949,1.303,1950,2.002,1951,1.327,1952,1.303,1953,1.327,1954,2.559,1955,1.327,1956,1.327,1957,1.327,1958,2.002,1959,1.28,1960,1.139,1961,1.303,1962,1.303,1963,1.327,1964,1.303,1965,2.039,1966,1.327,1967,1.303,1968,1.258,1969,1.327,1970,1.327,1971,2.002,1972,1.868,1973,1.303,1974,1.972,1975,1.327,1976,1.303,1977,1.303,1978,1.327,1979,1.327,1980,1.327,1981,1.303,1982,1.327,1983,1.121,1984,1.216,1985,1.303,1986,1.327,1987,1.327,1988,1.327,1989,1.327,1990,1.28,1991,1.28,1992,1.28,1993,1.327,1994,2.039,1995,2.736,1996,1.327,1997,1.303,1998,1.327,1999,1.327,2000,1.327,2001,1.327,2002,1.327,2003,2.033,2004,1.087,2005,1.327,2006,1.327,2007,1.9,2008,1.28,2009,1.379,2010,1.28,2011,1.327,2012,1.327,2013,1.9,2014,2.039,2015,1.327,2016,1.327,2017,2.275,2018,2.354,2019,2.275,2020,1.303,2021,1.258,2022,1.087,2023,1.327,2024,1.157,2218,1.752,2220,3.258]],["title/interfaces/IDataSeries.html",[40,0.003,209,1.383]],["body/interfaces/IDataSeries.html",[3,0.123,4,0.116,5,0.116,10,0.272,11,0.49,12,1.301,13,1.329,17,0.439,20,0.005,21,0.76,24,0.323,28,0.347,33,1.188,34,0.563,35,1.532,36,1.555,37,1.364,39,0.398,40,0.005,41,0.907,42,1.769,47,1.769,57,1.834,75,0.855,78,0.002,79,0.002,80,0.002,83,1.272,85,0.519,89,1.22,90,1.53,97,1.623,102,0.845,104,0.833,108,0.447,114,0.788,117,0.644,129,2.339,134,0.882,140,1.775,149,0.747,158,0.933,159,1.961,164,1.276,179,1.179,183,0.548,194,1.631,209,2.089,218,1.364,225,0.961,234,2.249,240,0.947,241,1.487,247,2.544,250,1.885,253,0.767,280,1.514,281,1.411,283,0.975,285,1.337,290,1.204,299,2.004,309,1.355,310,2.004,328,0.961,333,1.879,334,1.236,368,1.509,384,0.81,399,1.157,411,0.975,417,1.052,439,1.02,443,1.509,444,1.579,446,1.921,447,1.579,453,1.653,455,2.313,459,2.152,464,1.473,465,1.555,476,2.183,524,1.976,525,1.822,530,1.261,531,1.261,532,1.261,533,1.261,539,1.555,541,1.218,545,1.645,547,1.261,548,1.532,553,1.261,557,1.952,561,1.952,571,1.261,572,1.653,575,1.239,576,1.742,589,1.239,591,1.218,595,1.261,596,1.628,599,1.261,633,0.757,635,1.024,664,0.99,702,1.532,703,1.932,704,2.019,719,1.197,733,1.468,735,0.961,737,1.903,740,2.079,749,1.02,750,1.068,765,1.843,771,1.12,778,1.846,786,1.005,791,1.508,793,2.425,802,1.052,816,1.918,821,1.239,827,1.157,828,1.102,881,1.157,923,1.177,937,1.6,994,1.085,1047,1.197,1048,1.261,1049,1.261,1050,1.261,1052,2.277,1054,1.466,1056,1.02,1173,2.175,1188,2.313,1205,1.197,1206,1.197,1223,2.192,1234,1.218,1254,1.068,1256,1.734,1310,2.023,1317,2.142,1419,1.197,1431,2.552,1455,0.933,1592,1.177,1607,1.734,1608,0.92,1616,1.261,1632,1.239,1639,1.762,1649,1.197,1682,1.085,1750,1.261,1763,1.102,1794,1.261,1809,2.388,1899,0.478,1900,1.239,1901,1.284,1902,2.389,1903,1.532,1904,1.261,1905,1.261,1906,1.261,1907,1.036,1908,1.02,1909,2.389,1910,1.239,1911,1.218,1912,2.689,1913,1.239,1914,1.261,1915,1.102,1916,1.261,1917,1.261,1918,1.261,1919,1.734,1920,1.871,1921,1.12,1922,1.801,1923,3.175,1924,1.284,1925,1.853,1926,1.139,1927,2.389,1928,1.284,1929,1.988,1930,1.952,1931,1.952,1932,1.284,1933,1.952,1934,2.306,1935,1.853,1936,1.284,1937,1.102,1938,1.284,1939,1.197,1940,1.509,1941,1.157,1942,1.284,1943,1.284,1944,0.975,1945,1.284,1946,1.239,1947,1.885,1948,1.952,1949,1.261,1950,1.952,1951,1.284,1952,1.261,1953,1.284,1954,2.526,1955,1.284,1956,1.284,1957,1.284,1958,1.952,1959,1.239,1960,1.102,1961,1.261,1962,1.261,1963,1.284,1964,1.261,1965,2.432,1966,1.988,1967,1.952,1968,1.885,1969,1.988,1970,1.988,1971,2.689,1972,2.509,1973,1.952,1974,2.175,1975,1.988,1976,1.952,1977,1.952,1978,1.988,1979,1.988,1980,1.988,1981,1.952,1982,1.988,1983,1.085,1984,1.177,1985,1.261,1986,1.284,1987,1.284,1988,1.284,1989,1.284,1990,1.239,1991,1.239,1992,1.239,1993,1.284,1994,1.988,1995,2.689,1996,1.284,1997,1.261,1998,1.284,1999,1.284,2000,1.284,2001,1.284,2002,1.284,2003,1.628,2004,1.052,2005,1.284,2006,1.284,2007,1.853,2008,1.239,2009,1.345,2010,1.239,2011,1.284,2012,1.284,2013,1.853,2014,1.988,2015,1.284,2016,1.284,2017,2.229,2018,1.885,2019,2.229,2020,1.261,2021,1.218,2022,1.052,2023,1.284,2024,1.12,2218,1.695,2221,3.153]],["title/interfaces/IDimensionConfig.html",[40,0.003,137,2.329]],["body/interfaces/IDimensionConfig.html",[0,0.049,3,0.111,4,0.105,5,0.105,10,0.115,11,0.287,17,1.114,19,1.505,20,0.005,21,0.724,22,0.95,24,0.327,28,0.302,39,0.348,40,0.005,41,0.51,52,1.126,75,0.408,78,0.001,79,0.002,80,0.001,83,2.574,85,1.14,89,1.126,95,3.455,100,1.421,101,3.306,102,1.207,103,3.849,104,1.477,106,3.939,108,0.814,109,2.669,110,1.906,112,3.238,113,3.038,114,2.06,122,3.595,133,3.441,134,0.582,137,4.164,140,1.877,143,2.904,149,0.674,150,2.249,152,1.455,153,2.488,154,1.572,155,3.782,156,1.572,157,1.572,158,1.881,160,1.572,161,2.301,164,1.39,166,2.422,167,2.422,168,1.572,175,1.972,178,2.849,179,0.369,180,2.249,181,3.418,182,2.422,194,1.893,214,1.275,253,2.215,254,1.329,269,1.224,281,0.522,285,1.264,297,1.562,309,1.765,310,2.126,317,0.842,334,1.597,384,1.893,404,3.738,446,0.752,464,1.111,488,0.979,489,1.979,524,1.519,529,1.492,539,2.79,545,2.413,548,1.755,552,3.034,580,1.08,592,2.729,593,1.53,597,1.011,598,1.492,626,1.226,633,2.34,635,2.06,664,1.414,702,2.586,703,2.24,704,1.909,708,2.303,718,1.181,733,0.984,735,1.937,759,1.358,770,2.612,773,1.358,775,3.259,776,1.275,777,2.543,791,0.638,804,1.492,812,3.418,934,3.174,1010,1.421,1054,1.909,1133,1.572,1150,1.492,1165,3.37,1190,1.53,1317,1.435,1358,1.74,1441,3.996,1532,4.068,1533,4.661,1534,4.068,1535,4.068,1539,2.488,1543,2.488,1547,2.488,1550,2.488,1655,1.572,1657,1.572,1658,1.572,1659,1.572,1662,5.648,1667,2.361,1677,1.572,1684,1.572,1690,2.488,1694,1.572,1699,2.557,1700,1.421,1703,1.492,1704,1.53,1708,1.53,1714,2.669,1717,1.53,1718,2.506,1782,2.488,1783,1.572,1821,1.138,1868,1.492,1869,1.53,1870,1.53,1871,1.53,1872,1.53,1873,2.422,1874,1.421,1875,1.53,1899,0.431,1903,2.312,1920,1.547,1922,0.762,1954,0.935,2009,2.27,2025,1.572,2026,3.934,2027,2.15,2028,4.068,2029,1.616,2030,3.61,2031,3.169,2032,4.205,2033,3.175,2034,4.318,2035,3.55,2036,3.738,2037,3.661,2038,3.511,2039,5.412,2040,3.61,2041,4.545,2042,3.511,2043,1.616,2044,1.25,2045,1.572,2046,2.488,2047,1.616,2048,1.616,2049,2.488,2050,1.572,2051,1.572,2052,2.669,2053,2.363,2054,1.572,2055,1.616,2056,1.53,2057,1.616,2058,1.572,2059,1.572,2060,1.616,2061,1.616,2062,1.616,2063,1.53,2064,1.358,2065,1.616,2066,2.422,2067,1.616,2068,1.389,2069,1.616,2070,1.572,2071,2.422,2072,2.558,2073,2.558,2074,2.15,2075,2.15,2076,1.616,2077,1.572,2078,1.572,2079,1.616,2080,1.616,2222,2.846,2223,2.846,2224,2.846,2225,2.846,2226,2.846,2227,2.846,2228,2.846,2229,2.846]],["title/interfaces/IDimensions.html",[40,0.003,598,2.668]],["body/interfaces/IDimensions.html",[0,0.057,3,0.129,4,0.121,5,0.121,10,0.133,11,0.321,20,0.005,21,0.344,24,0.281,28,0.319,39,0.36,40,0.005,41,0.571,52,1.261,75,0.471,78,0.002,79,0.003,80,0.002,83,2.587,85,0.542,89,1.261,95,3.558,100,1.644,101,3.54,102,1.352,103,3.464,104,1.621,106,3.725,108,0.746,109,2.609,110,1.803,112,3.201,113,2.97,114,2.036,122,2.462,133,3.655,134,0.63,137,4.022,140,1.853,143,2.692,149,0.779,150,2.519,152,1.683,153,2.786,154,1.818,155,3.506,156,1.818,157,1.818,158,2.035,160,1.818,161,1.977,164,1.389,166,2.712,167,2.712,168,1.818,175,1.943,178,3.082,179,0.426,180,2.519,181,3.698,182,2.712,194,1.755,214,1.475,253,2.259,254,1.537,281,0.604,285,1.367,297,1.714,309,1.828,310,2.244,317,0.974,334,1.686,384,2.011,404,3.212,446,0.87,464,1.244,488,1.132,489,2.216,524,1.667,529,1.725,539,2.891,545,2.5,548,1.925,552,3.282,580,1.249,592,2.994,593,1.77,597,1.169,598,2.644,626,1.418,633,2.268,635,2.01,664,1.583,702,2.637,703,1.984,704,1.515,708,2.58,718,1.365,733,1.102,735,1.537,759,1.571,770,2.866,773,1.571,775,2.801,776,1.475,777,2.252,791,0.738,804,1.725,812,3.698,934,3.371,1010,1.644,1054,2.065,1133,1.818,1150,1.725,1165,3.579,1190,1.77,1317,1.607,1358,1.948,1441,3.434,1532,2.786,1533,3.798,1534,1.818,1535,1.818,1539,1.818,1543,1.818,1547,1.818,1550,1.818,1655,1.818,1657,1.818,1658,1.818,1659,1.818,1662,5.588,1667,2.644,1677,1.818,1684,1.818,1690,2.786,1694,1.818,1699,2.806,1700,1.644,1703,1.725,1704,1.77,1708,1.77,1714,2.928,1717,1.77,1718,2.749,1782,2.786,1783,1.818,1821,1.316,1868,1.725,1869,1.77,1870,1.77,1871,1.77,1872,1.77,1873,2.712,1874,1.644,1875,1.77,1899,0.499,1903,2.456,1920,1.673,1922,0.882,1954,1.081,2009,2.244,2025,1.818,2026,4.211,2027,2.408,2028,4.321,2029,1.869,2030,2.865,2031,2.806,2032,3.925,2033,2.519,2034,3.886,2035,3.195,2036,3.212,2037,3.146,2038,2.786,2039,5.079,2040,2.865,2041,3.905,2042,2.786,2043,1.869,2044,1.446,2045,1.818,2046,2.786,2047,1.869,2048,1.869,2049,2.786,2050,1.818,2051,1.818,2052,2.928,2053,2.593,2054,1.818,2055,1.869,2056,1.77,2057,1.869,2058,1.818,2059,1.818,2060,1.869,2061,1.869,2062,1.869,2063,1.77,2064,1.571,2065,1.869,2066,2.712,2067,1.869,2068,1.606,2069,1.869,2070,1.818,2071,2.712,2072,2.865,2073,2.865,2074,2.408,2075,2.408,2076,1.869,2077,1.818,2078,1.818,2079,1.869,2080,1.869]],["title/interfaces/IElementPosition.html",[40,0.003,935,2.978]],["body/interfaces/IElementPosition.html",[3,0.269,4,0.253,5,0.253,10,0.278,11,0.535,20,0.005,24,0.359,28,0.269,39,0.37,40,0.005,41,0.951,42,1.674,47,1.674,78,0.003,79,0.004,80,0.003,85,1.132,108,0.63,109,3.152,114,2.363,134,0.77,164,1.415,279,4.012,280,1.744,281,1.262,290,2.238,597,2.444,633,2.269,635,1.983,733,1.982,778,1.651,793,2.803,935,4.916,937,2.252,1899,1.042,1903,2.638,1935,3.191,1937,2.938,1974,2.225,2003,2.294,2019,3.387,2022,2.803,2230,5.339,2231,6.523,2232,5.339,2233,5.893,2234,4.623,2235,4.623,2236,4.623,2237,4.623]],["title/interfaces/IEnhancedLineCapConfig.html",[40,0.003,2110,3.292]],["body/interfaces/IEnhancedLineCapConfig.html",[0,0.113,3,0.184,4,0.173,5,0.173,10,0.19,11,0.417,12,1.094,13,0.645,20,0.005,21,0.685,22,1.388,24,0.309,28,0.37,34,0.839,38,1.241,39,0.37,40,0.005,41,0.852,52,2.038,53,1.696,78,0.002,79,0.003,80,0.002,85,0.773,89,1.884,90,1.077,102,2.184,107,1.645,124,1.258,134,0.892,140,1.665,149,2.2,155,2.934,159,1.41,164,1.337,179,0.848,194,2.281,209,2.047,210,2.345,218,1.312,240,1.41,247,2.166,253,2.16,255,2.876,263,2.93,268,4.407,281,1.201,285,1.704,290,1.158,292,2.834,293,2.834,294,3.52,295,3.597,296,3.124,297,2.106,299,2.509,302,2.834,305,2.834,306,2.461,309,1.518,317,1.39,327,2.292,328,1.431,331,2.401,332,2.345,333,1.312,336,1.41,337,2.023,580,1.783,635,1.71,718,2.715,733,1.78,751,2.461,781,2.82,786,2.085,791,1.468,806,3.763,959,5.356,1153,2.667,1257,2.834,1360,4.083,1526,3.615,1608,2.377,1817,4.279,1818,4.902,1823,3.615,1899,0.712,1907,2.677,1908,1.519,1920,1.833,1922,2.019,1926,2.364,1940,2.52,1960,3.103,2004,2.183,2009,1.294,2027,2.242,2031,4.06,2036,2.194,2037,2.994,2044,4.243,2064,2.242,2081,3.036,2082,3.036,2083,3.156,2084,4.399,2085,4.399,2086,3.717,2087,3.156,2088,5.063,2089,4.399,2090,3.829,2091,3.156,2092,4.7,2093,5.269,2094,3.156,2095,2.93,2096,2.93,2097,3.156,2098,2.525,2099,4.399,2100,2.525,2101,4.232,2102,4.232,2103,4.232,2104,4.083,2105,3.829,2106,2.461,2107,3.036,2108,5.269,2109,5.477,2110,4.871,2111,2.93,2112,3.156,2113,3.156,2114,3.156,2115,2.93,2116,3.156,2117,3.156,2118,3.156,2119,3.036,2120,4.399,2121,4.232,2122,2.93,2123,3.156,2124,4.399,2125,4.232,2126,2.747,2127,3.156,2128,3.156,2129,3.036,2130,3.156,2131,3.036,2132,5.063,2133,3.156,2134,3.156,2135,3.036,2136,2.93,2137,3.156,2138,2.747]],["title/interfaces/IFormatters.html",[40,0.003,2153,2.892]],["body/interfaces/IFormatters.html",[3,0.184,4,0.173,5,0.173,10,0.329,11,0.417,12,0.836,13,0.646,17,0.655,20,0.005,22,0.979,24,0.31,28,0.257,34,0.84,39,0.387,40,0.005,41,0.923,42,1.145,47,1.145,75,1.168,78,0.002,79,0.003,80,0.002,85,0.774,95,1.786,97,1.781,108,0.835,110,1.451,117,1.54,124,1.756,126,2.067,132,2.406,134,0.835,140,1.898,161,1.884,164,1.348,175,1.79,178,2.108,179,0.609,183,0.818,192,1.451,222,1.951,225,1.997,227,1.806,245,3.722,280,2.471,281,0.863,285,1.705,309,0.948,326,2.752,334,1.838,336,1.413,337,2.823,368,2.026,379,3.833,441,2.672,576,1.912,763,1.849,764,2.466,765,1.192,775,2.669,777,2.406,778,1.129,780,4.536,802,2.186,841,3.041,884,3.856,1455,1.392,1490,2.296,1500,4.088,1599,2.935,1680,3.619,1682,1.619,1699,2.152,1718,3.98,1809,1.671,1899,0.713,1915,1.645,1919,2.328,1920,2.35,1944,3.126,2003,2.186,2022,2.186,2032,3.061,2035,2.027,2052,3.128,2053,1.988,2074,2.245,2075,2.245,2106,3.435,2139,4.237,2140,2.935,2141,4.284,2142,3.161,2144,4.551,2145,2.935,2146,2.935,2147,2.839,2148,3.041,2149,3.041,2150,3.041,2151,4.283,2152,4.775,2153,4.283,2154,1.968,2155,3.161,2156,2.839,2157,2.935,2158,3.161,2159,3.161,2160,5.763,2161,4.404,2162,3.833,2163,6.39,2164,2.752,2165,3.161,2166,4.404,2167,4.088,2168,2.598,2169,2.752,2170,2.752,2171,4.771,2172,4.775,2173,4.404,2174,2.839,2175,2.839,2176,4.775,2177,2.752,2178,2.752,2179,3.161,2180,3.161,2181,3.041,2182,2.752,2183,4.771,2184,3.161,2185,5.016,2186,2.752,2187,3.161,2188,3.161,2189,4.237,2190,3.161,2191,3.161,2192,3.161,2218,2.529,2238,4.704]],["title/interfaces/IGrid.html",[40,0.003,539,1.622]],["body/interfaces/IGrid.html",[0,0.05,3,0.113,4,0.106,5,0.106,10,0.116,11,0.289,17,1.222,19,1.648,20,0.005,21,0.774,22,1.158,24,0.321,28,0.303,39,0.349,40,0.005,41,0.514,52,1.135,75,0.412,78,0.001,79,0.002,80,0.001,83,2.614,85,1.052,89,1.598,90,0.473,95,3.463,100,1.435,101,3.531,102,1.216,103,3.251,104,1.839,106,3.544,108,0.71,109,2.467,110,1.874,112,3.044,113,2.809,114,1.937,122,2.216,133,3.861,134,0.585,137,3.872,140,1.793,143,3.021,149,0.681,150,2.267,152,1.47,153,2.507,154,1.587,155,3.316,156,1.587,157,1.587,158,1.892,160,1.587,161,1.838,164,1.357,166,2.441,167,2.441,168,1.587,175,1.993,178,2.865,179,0.372,180,2.267,181,3.437,182,2.441,194,1.738,214,1.288,253,2.294,254,1.343,269,1.233,281,0.527,285,1.683,297,2.068,309,1.856,310,2.379,317,0.851,334,1.603,384,2.423,404,2.986,446,1.689,447,1.468,464,1.577,488,0.989,489,2.472,524,1.529,529,3.35,539,3.004,545,2.598,548,2.006,552,3.531,580,1.091,592,3.12,593,1.545,597,1.021,598,1.506,626,1.238,633,2.108,635,1.892,664,2.006,702,2.831,703,2.068,704,1.363,708,3.269,718,1.192,733,1.229,735,1.383,759,1.372,770,3.456,773,2.167,775,2.603,776,2.035,777,2.346,791,0.645,804,1.506,812,3.437,934,3.72,1010,1.435,1054,1.919,1133,1.587,1150,2.379,1165,3.544,1190,1.545,1317,2.037,1358,2.469,1441,3.192,1532,2.507,1533,3.53,1534,1.587,1535,1.587,1539,1.587,1543,1.587,1547,1.587,1550,1.587,1655,3.53,1656,4.067,1657,3.53,1658,3.53,1659,3.53,1662,5.645,1667,3.35,1677,2.507,1684,2.507,1690,3.53,1694,2.507,1699,3.184,1700,1.435,1703,1.506,1704,1.545,1708,2.441,1714,2.686,1717,1.545,1718,2.522,1782,3.53,1783,1.587,1821,1.15,1868,1.506,1869,1.545,1870,1.545,1871,1.545,1872,1.545,1873,2.441,1874,1.435,1875,1.545,1899,0.435,1903,2.322,1920,1.555,1922,0.77,1954,0.944,2009,2.135,2025,1.587,2026,3.953,2027,2.167,2028,4.086,2029,1.632,2030,2.578,2031,2.574,2032,3.751,2033,2.267,2034,3.648,2035,2.999,2036,2.986,2037,2.924,2038,2.507,2039,4.903,2040,2.578,2041,3.63,2042,2.507,2043,1.632,2044,1.263,2045,1.587,2046,2.507,2047,1.632,2048,1.632,2049,2.507,2050,1.587,2051,1.587,2052,2.686,2053,2.378,2054,1.587,2055,1.632,2056,1.545,2057,1.632,2058,1.587,2059,1.587,2060,1.632,2061,1.632,2062,1.632,2063,1.545,2064,1.372,2065,1.632,2066,2.441,2067,1.632,2068,1.403,2069,1.632,2070,1.587,2071,3.437,2072,3.63,2073,3.63,2074,3.051,2075,3.051,2076,2.578,2077,2.507,2078,1.587,2079,1.632,2080,1.632,2239,2.874,2240,2.874,2241,2.874,2242,2.874,2243,2.874,2244,2.874,2245,2.874,2246,2.874,2247,2.874,2248,2.874,2249,2.874,2250,2.874]],["title/interfaces/IGridConfig.html",[40,0.003,133,2.378]],["body/interfaces/IGridConfig.html",[0,0.056,3,0.126,4,0.119,5,0.119,10,0.13,11,0.317,20,0.005,21,0.338,24,0.307,28,0.317,39,0.358,40,0.005,41,0.562,52,1.243,75,0.463,78,0.002,79,0.002,80,0.002,83,2.589,85,0.532,89,1.243,95,3.545,100,1.613,101,4.089,102,2.08,103,3.901,104,2.052,106,3.919,108,0.741,109,2.59,110,1.791,112,3.179,113,2.948,114,2.023,122,2.426,133,3.779,134,0.741,137,4.132,140,1.907,143,2.672,149,0.765,150,2.483,152,1.651,153,2.746,154,1.783,155,3.48,156,1.783,157,1.783,158,2.015,160,1.783,161,1.958,164,1.375,166,2.673,167,2.673,168,1.783,175,1.937,178,3.051,179,0.418,180,2.483,181,3.661,182,2.673,194,1.742,214,1.447,253,2.309,254,1.508,281,0.592,285,1.354,297,1.694,309,1.82,310,2.229,317,0.956,334,1.674,384,1.996,404,3.18,446,0.853,464,1.226,488,1.111,489,2.663,524,1.647,529,1.692,539,2.878,545,2.489,548,1.903,552,3.25,580,1.226,592,2.959,593,1.736,597,1.147,598,1.692,626,1.391,633,2.168,635,1.94,664,1.56,702,2.689,703,1.961,704,1.493,708,2.542,718,2.062,733,1.086,735,1.515,759,1.541,770,2.832,773,1.541,775,2.773,776,1.447,777,2.225,791,1.115,804,1.692,812,3.661,934,3.345,1010,1.613,1054,2.044,1133,1.783,1150,1.692,1165,3.82,1190,2.673,1317,1.584,1358,1.92,1441,3.4,1532,2.746,1533,3.76,1534,1.783,1535,1.783,1539,1.783,1543,1.783,1547,1.783,1550,1.783,1655,1.783,1657,1.783,1658,1.783,1659,1.783,1662,5.599,1667,2.606,1677,1.783,1684,1.783,1690,2.746,1694,1.783,1699,2.773,1700,1.613,1703,1.692,1704,1.736,1708,1.736,1714,2.894,1717,1.736,1718,2.717,1782,2.746,1783,1.783,1821,1.292,1868,1.692,1869,1.736,1870,1.736,1871,1.736,1872,1.736,1873,2.673,1874,1.613,1875,1.736,1899,0.489,1903,2.437,1920,1.657,1922,1.332,1954,1.061,2009,2.301,2025,1.783,2026,4.175,2027,2.373,2028,4.288,2029,1.834,2030,2.824,2031,2.773,2032,3.901,2033,2.483,2034,3.853,2035,3.167,2036,3.18,2037,3.114,2038,2.746,2039,5.055,2040,2.824,2041,3.867,2042,2.746,2043,1.834,2044,1.419,2045,1.783,2046,2.746,2047,1.834,2048,1.834,2049,2.746,2050,1.783,2051,1.783,2052,2.894,2053,2.562,2054,1.783,2055,1.834,2056,1.736,2057,1.834,2058,1.783,2059,1.783,2060,1.834,2061,1.834,2062,1.834,2063,1.736,2064,1.541,2065,2.824,2066,2.673,2067,1.834,2068,1.576,2069,1.834,2070,1.783,2071,2.673,2072,2.824,2073,2.824,2074,2.373,2075,2.373,2076,1.834,2077,1.783,2078,1.783,2079,1.834,2080,1.834]],["title/interfaces/IHasInnerScale.html",[40,0.003,2189,3.292]],["body/interfaces/IHasInnerScale.html",[3,0.187,4,0.175,5,0.175,10,0.331,11,0.422,12,0.845,13,0.655,20,0.005,24,0.312,28,0.259,34,0.852,39,0.388,40,0.005,41,0.975,42,1.161,47,1.161,75,1.089,78,0.002,79,0.003,80,0.002,95,1.812,97,1.799,108,0.838,110,1.465,117,1.552,124,1.774,126,2.097,132,2.43,134,0.817,140,1.905,161,1.904,164,1.351,175,1.798,178,2.139,179,0.618,183,0.83,192,1.465,222,1.98,225,2.017,227,1.824,245,3.76,280,2.456,281,0.876,285,1.714,309,0.962,326,2.792,334,1.847,336,1.433,337,2.057,368,2.047,379,3.873,441,2.711,576,1.931,763,1.876,764,2.502,765,1.21,775,2.696,777,2.43,778,1.146,780,4.006,802,2.208,841,3.086,884,3.887,1455,1.413,1490,2.33,1500,4.13,1599,2.978,1680,3.656,1682,1.643,1699,2.184,1718,2.967,1809,1.696,1899,0.723,1915,1.669,1919,2.352,1920,2.357,1944,3.131,2003,2.208,2022,2.208,2032,3.093,2035,2.057,2052,2.279,2053,2.018,2074,2.279,2075,2.279,2106,3.47,2139,4.28,2140,2.978,2141,4.411,2142,3.208,2144,4.587,2145,2.978,2146,2.978,2147,2.881,2148,3.086,2149,3.086,2150,3.086,2151,4.317,2152,4.519,2153,3.76,2154,1.433,2155,3.208,2156,2.881,2157,2.978,2158,3.208,2159,3.208,2160,5.794,2161,4.449,2162,3.873,2163,6.404,2164,2.792,2165,3.208,2166,4.449,2167,4.13,2168,2.636,2169,2.792,2170,2.792,2171,4.801,2172,4.797,2173,4.449,2174,2.881,2175,2.881,2176,4.797,2177,2.792,2178,2.792,2179,3.208,2180,3.208,2181,3.086,2182,2.792,2183,4.801,2184,3.208,2185,5.043,2186,2.792,2187,3.208,2188,3.208,2189,4.914,2190,5.516,2191,3.208,2192,3.208]],["title/interfaces/IHighlightStrategy.html",[40,0.003,268,2.978]],["body/interfaces/IHighlightStrategy.html",[0,0.111,3,0.18,4,0.169,5,0.169,10,0.185,12,1.085,13,1.022,17,1.036,19,1.762,20,0.005,21,0.889,22,1.112,24,0.323,28,0.368,34,0.82,38,1.213,39,0.368,40,0.005,41,0.842,52,1.611,53,1.657,78,0.002,79,0.003,80,0.002,89,1.861,90,1.06,102,2.162,107,1.625,124,1.23,134,0.846,140,1.648,149,2.143,155,2.887,159,1.388,164,1.32,175,1.5,179,1.045,194,2.244,209,2.309,210,2.292,218,1.283,240,1.378,247,2.14,253,2.068,255,2.83,263,2.864,268,4.72,269,1.75,270,4.165,272,4.165,273,4.165,281,1.182,285,1.867,290,1.836,292,3.887,293,2.77,294,4.738,295,4.32,296,4.206,297,2.529,299,2.621,302,3.887,303,3.144,305,3.887,306,3.901,309,1.5,317,1.358,327,2.24,328,1.399,331,2.347,332,2.292,333,1.283,336,1.378,337,1.978,580,1.743,635,1.561,718,2.672,733,1.762,751,2.406,781,2.775,786,2.052,791,1.445,806,3.717,959,3.887,1153,2.607,1257,2.77,1360,4.019,1526,3.558,1608,2.354,1817,4.227,1818,3.558,1823,3.558,1899,0.695,1907,2.65,1908,1.485,1920,2.284,1922,1.994,1926,2.326,1940,2.495,1960,2.602,2004,2.148,2009,1.265,2027,2.191,2031,3.691,2036,2.144,2037,2.947,2044,3.871,2064,2.191,2081,2.968,2082,2.968,2083,3.085,2084,4.329,2085,4.329,2086,3.659,2087,3.085,2088,5.002,2089,4.329,2090,3.768,2091,3.085,2092,4.643,2093,5.217,2094,3.085,2095,2.864,2096,2.864,2097,3.085,2098,2.468,2099,4.329,2100,2.468,2101,4.165,2102,4.165,2103,4.165,2104,4.019,2105,3.768,2106,2.406,2107,2.968,2108,4.812,2109,5.002,2110,4.165,2111,2.864,2112,3.085,2113,3.085,2114,3.085,2115,2.864,2116,3.085,2117,3.085,2118,3.085,2119,2.968,2120,4.329,2121,4.165,2122,2.864,2123,3.085,2124,4.329,2125,4.165,2126,2.685,2127,3.085,2128,3.085,2129,2.968,2130,3.085,2131,2.968,2132,5.002,2133,3.085,2134,3.085,2135,2.968,2136,2.864,2137,3.085,2138,2.685,2251,4.59,2252,4.59,2253,4.59]],["title/interfaces/IInteractionCoordinatesPayload.html",[40,0.003,2237,3.422]],["body/interfaces/IInteractionCoordinatesPayload.html",[3,0.276,4,0.259,5,0.259,10,0.285,11,0.543,20,0.005,24,0.267,28,0.276,39,0.373,40,0.005,41,1.038,42,1.715,47,1.715,78,0.004,79,0.004,80,0.004,85,1.16,108,0.645,109,2.35,114,1.762,134,0.781,164,1.308,279,4.071,280,1.787,281,1.293,290,2.262,597,2.504,633,1.692,635,1.478,733,2.081,778,1.692,793,3.059,935,4.122,937,1.888,1899,1.068,1903,2.212,1935,3.618,1937,3.467,1974,2.28,2003,2.35,2019,3.557,2022,2.844,2230,5.47,2231,5.47,2232,5.47,2233,5.98,2234,4.736,2235,4.736,2236,5.731,2237,5.731]],["title/interfaces/IInteractionDataPointEvent.html",[40,0.003,1206,1.933]],["body/interfaces/IInteractionDataPointEvent.html",[3,0.128,4,0.12,5,0.12,10,0.276,11,0.436,12,1.285,13,1.313,20,0.005,21,0.772,24,0.308,28,0.349,33,1.218,34,0.582,35,1.572,36,1.595,37,1.4,39,0.399,40,0.005,41,0.948,42,1.796,47,1.796,57,1.725,75,0.873,78,0.002,79,0.003,80,0.002,83,1.305,85,0.537,89,1.252,90,1.525,97,1.657,102,0.873,104,0.861,108,0.459,114,0.815,117,0.666,129,2.368,134,0.871,140,1.791,149,0.772,158,0.965,159,1.805,164,1.284,179,1.187,183,0.567,194,1.535,209,2.006,218,1.4,225,0.993,234,2.283,240,0.979,241,0.993,247,2.565,250,1.259,253,0.793,280,1.546,281,1.354,283,1.008,285,1.361,290,0.804,299,2.034,309,1.379,310,2.034,328,0.993,333,1.912,334,1.262,368,1.008,384,0.838,399,1.197,411,2.116,417,1.087,439,1.054,443,1.549,444,1.62,446,1.951,447,1.62,453,1.696,455,2.098,459,2.185,464,1.504,465,1.595,476,2.217,524,2.006,525,1.869,530,1.304,531,1.304,532,1.304,533,1.304,539,1.595,541,1.259,545,1.68,547,1.304,548,1.572,553,1.304,557,2.003,561,2.003,571,1.304,572,1.696,575,1.281,576,1.779,589,1.281,591,1.259,595,1.304,596,1.67,599,1.304,633,0.782,635,1.051,664,1.023,702,1.572,703,1.972,704,2.055,719,1.238,733,1.612,735,0.993,737,1.943,740,2.116,749,1.054,750,1.104,765,1.269,771,1.158,778,1.772,786,1.039,791,1.656,793,2.599,802,1.087,816,1.281,821,1.281,827,1.197,828,1.14,881,1.197,923,1.217,937,1.634,994,1.122,1047,1.238,1048,1.304,1049,1.304,1050,1.304,1052,2.318,1054,0.979,1056,1.054,1173,2.213,1188,2.682,1205,1.238,1206,1.901,1223,2.238,1234,1.259,1254,1.104,1256,1.779,1310,2.066,1317,1.595,1419,1.238,1431,2.597,1455,0.965,1592,1.217,1607,1.779,1608,0.951,1616,1.304,1632,1.281,1639,1.808,1649,1.238,1682,1.122,1750,1.304,1763,1.14,1794,1.304,1809,2.166,1899,0.494,1900,1.281,1901,1.328,1902,2.003,1903,1.572,1904,1.304,1905,1.304,1906,1.304,1907,1.071,1908,1.054,1909,2.439,1910,1.281,1911,1.259,1912,2.725,1913,1.281,1914,1.304,1915,1.14,1916,1.304,1917,1.304,1918,1.304,1919,1.779,1920,1.896,1921,1.158,1922,1.833,1923,3.206,1924,1.328,1925,1.901,1926,1.177,1927,2.439,1928,1.328,1929,2.04,1930,2.003,1931,2.003,1932,1.328,1933,2.003,1934,2.355,1935,1.901,1936,1.328,1937,1.14,1938,1.328,1939,1.238,1940,1.549,1941,1.197,1942,1.328,1943,1.328,1944,1.008,1945,1.328,1946,1.281,1947,1.934,1948,2.003,1949,1.304,1950,2.003,1951,1.328,1952,1.304,1953,1.328,1954,2.56,1955,1.328,1956,1.328,1957,1.328,1958,2.003,1959,1.281,1960,1.14,1961,1.304,1962,1.304,1963,1.328,1964,1.304,1965,2.04,1966,1.328,1967,1.304,1968,1.259,1969,1.328,1970,1.328,1971,2.003,1972,1.869,1973,1.304,1974,1.972,1975,1.328,1976,1.304,1977,1.304,1978,1.328,1979,1.328,1980,1.328,1981,1.304,1982,1.328,1983,1.122,1984,1.217,1985,1.304,1986,1.328,1987,1.328,1988,1.328,1989,1.328,1990,1.281,1991,1.281,1992,1.281,1993,1.328,1994,2.04,1995,2.737,1996,1.328,1997,1.304,1998,1.328,1999,1.328,2000,1.328,2001,1.328,2002,1.328,2003,1.67,2004,1.087,2005,1.328,2006,1.328,2007,1.901,2008,1.281,2009,1.38,2010,1.281,2011,1.328,2012,1.328,2013,1.901,2014,2.04,2015,1.328,2016,1.328,2017,2.554,2018,1.934,2019,2.554,2020,2.003,2021,1.259,2022,1.087,2023,1.328,2024,1.158]],["title/interfaces/IInteractionDataPointsEvent.html",[40,0.003,1205,1.933]],["body/interfaces/IInteractionDataPointsEvent.html",[3,0.128,4,0.12,5,0.12,10,0.276,11,0.436,12,1.285,13,1.313,20,0.005,21,0.772,24,0.308,28,0.349,33,1.218,34,0.582,35,1.571,36,1.595,37,1.399,39,0.399,40,0.005,41,0.948,42,1.796,47,1.796,57,1.725,75,0.873,78,0.002,79,0.003,80,0.002,83,1.304,85,0.536,89,1.252,90,1.525,97,1.656,102,0.873,104,0.861,108,0.458,114,0.815,117,0.665,129,2.367,134,0.87,140,1.791,149,0.771,158,0.964,159,1.805,164,1.284,179,1.187,183,0.566,194,1.535,209,2.005,218,1.399,225,0.993,234,2.282,240,0.978,241,0.993,247,2.521,250,1.258,253,0.793,280,1.545,281,1.354,283,1.007,285,1.36,290,0.804,299,2.034,309,1.378,310,2.034,328,0.993,333,1.912,334,1.262,368,1.007,384,0.837,399,1.196,411,1.007,417,1.087,439,2.212,443,1.548,444,1.619,446,1.95,447,1.619,453,2.317,455,2.354,459,2.184,464,1.503,465,1.595,476,2.216,524,2.005,525,1.868,530,1.303,531,1.303,532,1.303,533,1.303,539,1.595,541,1.258,545,1.68,547,1.303,548,1.571,553,1.303,557,2.002,561,2.002,571,1.303,572,1.696,575,1.28,576,1.778,589,1.28,591,1.258,595,1.303,596,1.669,599,1.303,633,0.782,635,1.05,664,1.023,702,1.571,703,1.972,704,2.054,719,1.237,733,1.612,735,0.993,737,1.942,740,2.282,749,1.054,750,1.104,765,1.269,771,1.157,778,1.772,786,1.038,791,1.656,793,2.599,802,1.087,816,1.28,821,1.28,827,1.196,828,1.139,881,1.196,923,1.216,937,1.633,994,1.121,1047,1.237,1048,1.303,1049,1.303,1050,1.303,1052,2.317,1054,0.978,1056,1.054,1173,2.212,1188,2.354,1205,1.9,1206,1.237,1223,2.238,1234,1.258,1254,1.104,1256,1.778,1310,2.065,1317,1.595,1419,1.237,1431,2.597,1455,0.964,1592,1.216,1607,1.778,1608,0.95,1616,1.303,1632,1.28,1639,1.807,1649,1.237,1682,1.121,1750,1.303,1763,1.139,1794,1.303,1809,2.166,1899,0.494,1900,1.28,1901,1.327,1902,2.002,1903,1.571,1904,1.303,1905,1.303,1906,1.303,1907,1.07,1908,1.054,1909,2.438,1910,1.28,1911,1.258,1912,2.724,1913,1.28,1914,1.303,1915,1.139,1916,1.303,1917,1.303,1918,1.303,1919,1.778,1920,1.896,1921,1.157,1922,1.833,1923,3.206,1924,1.327,1925,1.9,1926,1.176,1927,2.438,1928,1.327,1929,2.039,1930,2.002,1931,2.002,1932,1.327,1933,2.002,1934,2.354,1935,1.9,1936,1.327,1937,1.139,1938,1.327,1939,1.237,1940,1.548,1941,1.196,1942,1.327,1943,1.327,1944,1.007,1945,1.327,1946,1.28,1947,1.933,1948,2.002,1949,1.303,1950,2.002,1951,1.327,1952,1.303,1953,1.327,1954,2.559,1955,1.327,1956,1.327,1957,1.327,1958,2.002,1959,1.28,1960,1.139,1961,1.303,1962,1.303,1963,1.327,1964,1.303,1965,2.039,1966,1.327,1967,1.303,1968,1.258,1969,1.327,1970,1.327,1971,2.002,1972,1.868,1973,1.303,1974,1.972,1975,1.327,1976,1.303,1977,1.303,1978,1.327,1979,1.327,1980,1.327,1981,1.303,1982,1.327,1983,1.121,1984,1.216,1985,1.303,1986,1.327,1987,1.327,1988,1.327,1989,1.327,1990,1.28,1991,1.28,1992,1.28,1993,1.327,1994,2.039,1995,2.736,1996,1.327,1997,1.303,1998,1.327,1999,1.327,2000,1.327,2001,1.327,2002,1.327,2003,1.669,2004,1.087,2005,1.327,2006,1.327,2007,1.9,2008,1.28,2009,1.379,2010,1.28,2011,1.327,2012,1.327,2013,1.9,2014,2.039,2015,1.327,2016,1.327,2017,2.553,2018,2.354,2019,2.553,2020,1.303,2021,1.258,2022,1.087,2023,1.327,2024,1.157]],["title/interfaces/IInteractionPayload.html",[40,0.003,2019,1.9]],["body/interfaces/IInteractionPayload.html",[3,0.128,4,0.12,5,0.12,10,0.277,11,0.437,12,1.283,13,1.314,20,0.005,21,0.773,24,0.308,28,0.35,33,1.222,34,0.584,35,1.576,36,1.6,37,1.403,39,0.399,40,0.005,41,0.919,42,1.799,47,1.799,57,1.728,75,0.875,78,0.002,79,0.003,80,0.002,83,1.309,85,0.538,89,1.256,90,1.526,97,1.66,102,0.877,104,0.864,108,0.46,114,0.818,117,0.668,129,2.371,134,0.871,140,1.793,149,0.775,158,0.968,159,1.807,164,1.285,179,1.188,183,0.569,194,1.538,209,2.009,218,1.403,225,0.997,234,2.287,240,0.982,241,0.997,247,2.524,250,1.263,253,0.796,280,1.549,281,1.357,283,1.012,285,1.363,290,0.807,299,2.038,309,1.381,310,2.038,328,0.997,333,1.916,334,1.265,368,1.012,384,0.841,399,1.201,411,1.012,417,1.091,439,1.058,443,1.553,444,1.624,446,1.954,447,1.624,453,1.701,455,2.103,459,2.188,464,1.507,465,1.6,476,2.221,524,2.009,525,1.874,530,1.309,531,1.309,532,1.309,533,1.309,539,1.6,541,1.263,545,1.684,547,1.309,548,1.576,553,1.309,557,2.009,561,2.009,571,1.309,572,1.701,575,1.286,576,1.783,589,1.286,591,1.263,595,1.309,596,1.675,599,1.309,633,0.785,635,1.053,664,1.027,702,1.576,703,1.977,704,2.058,719,1.242,733,1.615,735,0.997,737,1.947,740,2.12,749,1.058,750,1.108,765,1.273,771,1.162,778,1.775,786,1.042,791,1.659,793,2.603,802,1.091,816,1.286,821,1.286,827,1.201,828,1.144,881,1.201,923,1.221,937,1.637,994,1.126,1047,1.242,1048,1.309,1049,1.309,1050,1.309,1052,2.322,1054,0.982,1056,1.058,1173,2.782,1188,2.359,1205,1.242,1206,1.242,1223,2.243,1234,1.263,1254,1.108,1256,1.784,1310,2.07,1317,1.6,1419,1.242,1431,2.602,1455,0.968,1592,1.221,1607,1.784,1608,0.954,1616,1.309,1632,1.286,1639,1.813,1649,1.242,1682,1.126,1750,1.309,1763,1.144,1794,1.309,1809,2.171,1899,0.496,1900,1.286,1901,1.332,1902,2.009,1903,1.576,1904,1.309,1905,1.309,1906,1.309,1907,1.074,1908,1.058,1909,2.445,1910,1.286,1911,1.263,1912,2.729,1913,1.286,1914,1.309,1915,1.144,1916,1.309,1917,1.309,1918,1.309,1919,1.784,1920,1.899,1921,1.162,1922,1.837,1923,3.21,1924,1.332,1925,1.906,1926,1.181,1927,2.445,1928,1.332,1929,2.045,1930,2.009,1931,2.009,1932,1.332,1933,2.009,1934,2.36,1935,1.906,1936,1.332,1937,1.144,1938,1.332,1939,1.242,1940,1.553,1941,1.201,1942,1.332,1943,1.332,1944,1.012,1945,1.332,1946,1.286,1947,1.939,1948,2.009,1949,1.309,1950,2.009,1951,1.332,1952,1.309,1953,1.332,1954,2.563,1955,1.332,1956,1.332,1957,1.332,1958,2.009,1959,1.286,1960,1.144,1961,1.309,1962,1.309,1963,1.332,1964,1.309,1965,2.045,1966,1.332,1967,1.309,1968,1.263,1969,1.332,1970,1.332,1971,2.009,1972,1.874,1973,1.309,1974,1.977,1975,1.332,1976,1.309,1977,1.309,1978,1.332,1979,1.332,1980,1.332,1981,1.309,1982,1.332,1983,1.126,1984,1.221,1985,1.309,1986,1.332,1987,1.332,1988,1.332,1989,1.332,1990,1.286,1991,1.286,1992,1.286,1993,1.332,1994,2.045,1995,2.742,1996,1.332,1997,1.309,1998,1.332,1999,1.332,2000,1.332,2001,1.332,2002,1.332,2003,1.675,2004,1.091,2005,1.332,2006,1.332,2007,1.906,2008,1.286,2009,1.384,2010,1.286,2011,1.332,2012,1.332,2013,1.906,2014,2.045,2015,1.332,2016,1.332,2017,2.281,2018,1.939,2019,2.559,2020,1.309,2021,1.263,2022,1.091,2023,1.332,2024,1.162]],["title/interfaces/IInteractionValues.html",[40,0.003,2233,3.57]],["body/interfaces/IInteractionValues.html",[3,0.274,4,0.257,5,0.257,17,0.975,20,0.005,24,0.266,28,0.274,39,0.372,40,0.005,41,0.961,42,2.067,47,2.067,78,0.004,79,0.004,80,0.004,85,1.153,108,0.778,109,2.335,114,1.751,134,0.838,164,1.305,279,4.539,280,2.154,281,1.559,290,2.345,303,3.418,597,2.488,633,1.681,635,1.469,733,2.077,778,2.039,793,2.833,935,4.096,937,1.876,1899,1.061,1903,2.198,1935,3.225,1937,2.97,1974,2.748,2003,2.833,2019,3.414,2022,3.05,2218,3.765,2230,5.435,2231,5.435,2232,6.593,2233,6.413,2234,4.706,2235,4.706,2236,4.706,2237,4.706,2254,7.002]],["title/interfaces/IInteractionValuesPayload.html",[40,0.003,2235,3.422]],["body/interfaces/IInteractionValuesPayload.html",[3,0.276,4,0.259,5,0.259,10,0.285,11,0.543,20,0.005,24,0.267,28,0.276,39,0.373,40,0.005,41,1.038,42,1.715,47,1.715,78,0.004,79,0.004,80,0.004,85,1.16,108,0.645,109,2.35,114,1.762,134,0.781,164,1.308,279,4.071,280,1.787,281,1.293,290,2.475,597,2.504,633,1.692,635,1.478,733,2.081,778,1.692,793,3.059,935,4.122,937,1.888,1899,1.068,1903,2.212,1935,3.238,1937,2.982,1974,2.28,2003,2.35,2019,3.557,2022,2.844,2230,5.47,2231,5.47,2232,5.47,2233,6.682,2234,5.731,2235,5.731,2236,4.736,2237,4.736]],["title/interfaces/ILineAccessors.html",[40,0.003,2098,2.738]],["body/interfaces/ILineAccessors.html",[0,0.149,3,0.24,4,0.225,5,0.225,7,2.364,8,1.319,10,0.247,11,0.577,12,1.258,13,1.386,14,1.489,16,4.314,17,1.088,20,0.005,21,0.64,23,3.813,24,0.296,28,0.337,29,4.095,30,4.437,31,3.208,32,2.859,33,1.901,34,1.537,37,2.534,38,1.617,39,0.355,40,0.005,41,1.026,52,2.267,53,3.107,54,2.21,55,1.617,57,1.355,72,2.8,73,3.208,74,3.208,75,1.233,76,3.58,77,3.58,78,0.003,79,0.004,80,0.003,94,1.395,107,1.337,110,1.355,124,1.64,132,2.247,134,0.561,144,2.859,159,2.018,184,3.995,241,1.865,281,1.123,455,2.106,763,2.405,778,1.469,781,2.637,806,3.056,813,3.818,819,2.987,934,2.637,1056,2.527,1151,3.056,1395,5.25,1608,2.279,1639,2.821,1899,1.184,1907,2.566,1908,2.527,1974,1.98,1983,2.961,2098,4.627,2100,3.291,2154,1.838,2164,3.58,2255,4.75,2256,6.886,2257,6.886,2258,5.25,2259,5.25,2260,4.75,2261,6.034,2262,3.58,2263,3.58,2264,4.75,2265,4.75,2266,4.75,2267,4.291,2268,4.5,2269,4.75,2270,4.75,2271,4.75,2272,4.5,2273,4.5,2274,4.75,2275,4.75,2276,4.5,2277,4.75,2278,4.75,2279,4.75]],["title/interfaces/ILineDataAccessors.html",[40,0.003,2256,3.743]],["body/interfaces/ILineDataAccessors.html",[0,0.15,3,0.243,4,0.228,5,0.228,7,2.396,8,1.337,10,0.251,11,0.58,12,1.2,13,1.34,14,1.509,16,4.352,17,1.309,20,0.005,21,0.649,22,1.177,23,3.846,24,0.235,28,0.339,29,4.13,30,4.475,31,3.251,32,2.898,33,2.217,34,1.407,37,2.546,38,1.639,39,0.357,40,0.005,41,1.031,52,2.278,53,3.127,54,2.24,55,1.639,57,1.373,72,2.838,73,3.251,74,3.251,75,1.24,76,3.629,77,3.629,78,0.003,79,0.004,80,0.003,94,1.407,107,1.355,110,1.373,124,1.662,132,2.277,134,0.568,144,2.898,159,1.963,184,4.029,241,1.89,281,1.138,455,2.135,763,2.438,778,1.489,781,2.673,806,3.098,813,3.87,819,3.028,934,2.673,1056,2.006,1151,3.098,1395,5.295,1608,1.809,1639,2.24,1899,1.194,1907,2.037,1908,2.006,1974,2.006,1983,2.98,2098,4.237,2100,3.336,2154,1.863,2164,3.629,2255,4.814,2256,6.698,2257,6.367,2258,5.82,2259,5.295,2260,4.814,2261,6.072,2262,3.629,2263,3.629,2264,4.814,2265,4.814,2266,4.814,2267,4.35,2268,4.561,2269,4.814,2270,4.814,2271,4.814,2272,4.561,2273,4.561,2274,4.814,2275,4.814,2276,4.561,2277,4.814,2278,4.814,2279,4.814]],["title/interfaces/ILineRendererConfig.html",[40,0.003,2111,3.176]],["body/interfaces/ILineRendererConfig.html",[0,0.108,3,0.172,4,0.162,5,0.162,10,0.178,11,0.398,12,1.068,13,0.604,20,0.005,21,0.654,22,1.479,24,0.347,28,0.364,34,0.786,38,1.163,39,0.364,40,0.005,41,0.896,52,1.564,53,1.59,78,0.002,79,0.003,80,0.002,85,0.725,89,1.819,90,1.197,102,2.122,107,1.589,124,1.676,134,0.882,140,1.775,149,2.3,155,2.803,159,1.348,164,1.294,179,0.81,194,2.284,209,1.977,210,2.198,218,1.23,240,1.322,247,2.092,253,2.115,255,2.748,263,2.746,268,4.894,281,1.335,285,1.664,290,1.086,292,2.657,293,2.657,294,3.363,295,3.473,296,2.986,297,2.033,299,2.518,302,2.657,305,2.657,306,2.307,309,1.596,317,1.303,327,2.149,328,1.341,331,2.251,332,2.198,333,1.23,336,1.322,337,1.897,580,1.671,635,1.662,718,2.595,733,1.898,751,2.307,781,2.695,786,1.993,791,1.403,806,4.178,959,3.774,1153,2.5,1257,2.657,1360,4.538,1526,4.018,1608,2.441,1817,4.132,1818,3.454,1823,3.454,1899,0.667,1907,2.937,1908,2.023,1920,1.77,1922,1.949,1926,2.258,1940,2.587,1960,3.039,2004,2.086,2009,1.723,2027,2.101,2031,3.827,2036,2.057,2037,3.328,2044,4.015,2064,2.986,2081,2.846,2082,2.846,2083,2.958,2084,5.623,2085,5.623,2086,3.552,2087,2.958,2088,5.623,2089,4.889,2090,4.255,2091,2.958,2092,5.22,2093,5.121,2094,2.958,2095,2.746,2096,2.746,2097,2.958,2098,2.367,2099,4.203,2100,2.367,2101,4.044,2102,4.044,2103,4.044,2104,3.902,2105,3.658,2106,2.307,2107,2.846,2108,5.409,2109,5.623,2110,5.121,2111,3.902,2112,4.203,2113,4.203,2114,4.203,2115,4.942,2116,4.203,2117,4.203,2118,5.323,2119,4.044,2120,4.889,2121,4.703,2122,3.902,2123,5.323,2124,5.323,2125,5.62,2126,3.658,2127,4.203,2128,5.323,2129,2.846,2130,2.958,2131,2.846,2132,4.889,2133,2.958,2134,2.958,2135,2.846,2136,2.746,2137,2.958,2138,2.575]],["title/interfaces/ILineSeriesAccessors.html",[40,0.003,2257,3.743]],["body/interfaces/ILineSeriesAccessors.html",[0,0.147,3,0.235,4,0.22,5,0.22,7,2.315,8,1.291,10,0.242,11,0.573,12,1.188,13,1.372,14,1.458,16,4.257,17,1.186,20,0.005,21,0.627,22,1.344,23,3.762,24,0.293,28,0.334,29,4.04,30,4.378,31,3.141,32,2.8,33,1.875,34,1.376,37,2.771,38,1.584,39,0.352,40,0.005,41,0.964,52,2.454,53,3.498,54,2.164,55,1.584,57,1.327,72,2.742,73,3.141,74,3.141,75,1.288,76,3.506,77,3.506,78,0.003,79,0.004,80,0.003,85,0.986,94,1.376,107,1.309,110,1.327,124,1.606,132,2.2,134,0.706,144,2.8,159,2.005,184,3.942,241,1.826,281,1.414,455,2.062,763,2.355,778,1.85,781,3.321,806,2.993,813,3.739,819,2.925,934,2.582,1056,1.939,1151,2.993,1395,5.18,1608,1.748,1639,2.164,1899,1.168,1907,1.968,1908,1.939,1974,2.493,1983,2.932,2098,4.145,2100,3.223,2154,2.315,2164,3.506,2218,3.223,2255,5.982,2256,6.265,2257,6.613,2258,5.18,2259,5.18,2260,4.651,2261,6.307,2262,4.509,2263,4.509,2264,4.651,2265,4.651,2266,4.651,2267,4.202,2268,4.406,2269,4.651,2270,4.651,2271,4.651,2272,4.406,2273,4.406,2274,4.651,2275,4.651,2276,4.406,2277,4.651,2278,4.651,2279,4.651,2280,5.369]],["title/interfaces/ILinearScales.html",[40,0.003,1964,2.037]],["body/interfaces/ILinearScales.html",[3,0.128,4,0.12,5,0.12,10,0.277,11,0.436,12,1.283,13,1.314,20,0.005,21,0.773,24,0.318,28,0.35,33,1.22,34,0.583,35,1.574,36,1.598,37,1.401,39,0.399,40,0.005,41,0.919,42,2.039,47,2.039,57,1.726,75,0.874,78,0.002,79,0.003,80,0.002,83,1.307,89,1.254,90,1.526,97,1.659,102,0.875,104,0.863,108,0.459,114,0.817,117,0.667,129,2.369,134,0.871,140,1.792,149,0.773,158,0.966,159,1.806,164,1.284,179,1.188,183,0.568,194,1.536,209,2.008,218,1.401,225,0.995,234,2.285,240,0.981,241,0.995,247,2.523,250,1.261,253,0.795,280,1.547,281,1.356,283,1.01,285,1.362,290,0.805,299,2.036,309,1.38,310,2.036,328,0.995,333,1.914,334,1.264,368,1.01,384,0.839,399,1.199,411,1.01,417,1.089,439,1.056,443,1.551,444,1.622,446,1.952,447,1.622,453,1.699,455,2.101,459,2.187,464,1.506,465,1.598,476,2.219,524,2.008,525,1.872,530,1.306,531,1.306,532,1.306,533,1.306,539,1.598,541,1.261,545,1.682,547,1.306,548,1.574,553,1.306,557,2.006,561,2.006,571,1.306,572,1.699,575,1.283,576,1.781,589,1.283,591,1.261,595,1.306,596,1.672,599,1.306,633,0.784,635,1.052,664,1.025,702,1.574,703,1.974,704,2.056,719,1.24,733,1.496,735,0.995,737,1.945,740,2.118,749,1.056,750,1.106,765,1.271,771,1.16,778,1.774,786,1.04,791,1.536,793,2.464,802,1.089,816,1.283,821,1.283,827,1.199,828,1.142,881,1.199,923,1.219,937,1.636,994,1.124,1047,1.24,1048,1.306,1049,1.306,1050,1.306,1052,2.32,1054,0.981,1056,1.056,1173,2.215,1188,2.357,1205,1.24,1206,1.24,1223,2.241,1234,1.261,1254,1.106,1256,1.782,1310,2.068,1317,1.598,1419,1.24,1431,2.6,1455,0.966,1592,1.219,1607,1.782,1608,0.953,1616,1.306,1632,1.283,1639,1.811,1649,1.24,1682,1.124,1750,1.306,1763,1.142,1794,1.306,1809,2.169,1899,0.495,1900,1.283,1901,1.33,1902,2.006,1903,1.574,1904,1.306,1905,1.306,1906,1.306,1907,1.073,1908,1.056,1909,3.249,1910,1.283,1911,1.261,1912,2.727,1913,1.283,1914,1.306,1915,1.142,1916,1.306,1917,1.306,1918,1.306,1919,1.782,1920,1.898,1921,1.16,1922,1.835,1923,3.208,1924,1.33,1925,1.904,1926,1.179,1927,2.442,1928,1.33,1929,2.042,1930,2.006,1931,2.006,1932,1.33,1933,2.006,1934,2.358,1935,1.904,1936,1.33,1937,1.142,1938,1.33,1939,1.24,1940,1.551,1941,1.199,1942,1.33,1943,1.33,1944,1.01,1945,1.33,1946,1.283,1947,1.937,1948,2.006,1949,1.306,1950,2.006,1951,1.33,1952,1.306,1953,1.33,1954,2.562,1955,1.33,1956,1.33,1957,1.33,1958,2.006,1959,1.283,1960,1.142,1961,1.306,1962,1.306,1963,1.33,1964,2.006,1965,2.042,1966,1.33,1967,1.306,1968,1.261,1969,1.33,1970,1.33,1971,2.006,1972,1.872,1973,1.306,1974,1.974,1975,1.33,1976,1.306,1977,1.306,1978,1.33,1979,1.33,1980,1.33,1981,1.306,1982,1.33,1983,1.124,1984,1.219,1985,1.306,1986,1.33,1987,1.33,1988,1.33,1989,1.33,1990,1.283,1991,1.283,1992,1.283,1993,1.33,1994,2.042,1995,2.74,1996,1.33,1997,1.306,1998,1.33,1999,1.33,2000,1.33,2001,1.33,2002,1.33,2003,1.672,2004,1.089,2005,1.33,2006,1.33,2007,1.904,2008,1.283,2009,1.382,2010,1.283,2011,1.33,2012,1.33,2013,1.904,2014,2.042,2015,1.33,2016,1.33,2017,2.279,2018,1.937,2019,2.279,2020,1.306,2021,1.261,2022,1.089,2023,1.33,2024,1.16]],["title/interfaces/IMarkerInteractionConfig.html",[40,0.003,2092,3.176]],["body/interfaces/IMarkerInteractionConfig.html",[0,0.114,3,0.187,4,0.175,5,0.175,10,0.193,11,0.422,12,1.168,13,0.655,20,0.005,21,0.692,22,0.989,24,0.251,28,0.371,34,0.852,38,1.261,39,0.371,40,0.005,41,0.86,52,1.655,53,2.391,78,0.002,79,0.003,80,0.002,85,0.786,89,1.9,90,1.09,102,2.31,107,1.66,124,1.279,134,0.854,140,1.905,149,2.166,155,2.967,159,1.427,164,1.28,179,0.858,194,2.255,209,2.065,210,2.384,218,1.334,240,1.433,247,2.479,253,2.171,255,2.909,263,2.978,268,4.446,281,1.215,285,1.714,290,1.177,292,2.881,293,2.881,294,3.56,295,3.628,296,3.16,297,2.124,299,2.521,302,2.881,305,2.881,306,2.502,309,1.532,317,1.413,327,2.33,328,1.455,331,2.441,332,2.384,333,1.334,336,1.433,337,2.057,580,1.812,635,1.594,718,3.153,733,1.883,751,2.502,781,2.852,786,2.109,791,1.705,806,3.796,959,3.995,1153,2.711,1257,2.881,1360,4.13,1526,3.656,1608,2.602,1817,4.662,1818,3.656,1823,3.656,1899,0.723,1907,2.696,1908,1.544,1920,1.849,1922,2.31,1926,2.745,1940,2.538,1960,2.657,2004,2.208,2009,1.315,2027,2.279,2031,3.755,2036,2.23,2037,3.028,2044,3.919,2064,2.279,2081,3.086,2082,3.086,2083,3.208,2084,4.449,2085,4.449,2086,3.76,2087,3.208,2088,5.108,2089,4.449,2090,3.873,2091,3.208,2092,5.121,2093,5.768,2094,3.208,2095,2.978,2096,2.978,2097,3.208,2098,2.567,2099,4.449,2100,2.567,2101,4.28,2102,4.28,2103,4.28,2104,4.13,2105,3.873,2106,4.302,2107,5.307,2108,4.914,2109,5.108,2110,4.28,2111,2.978,2112,3.208,2113,3.208,2114,3.208,2115,2.978,2116,3.208,2117,3.208,2118,3.208,2119,3.086,2120,4.449,2121,4.28,2122,2.978,2123,3.208,2124,4.449,2125,4.28,2126,2.792,2127,3.208,2128,3.208,2129,3.086,2130,3.208,2131,3.086,2132,5.108,2133,3.208,2134,3.208,2135,3.086,2136,2.978,2137,3.208,2138,2.792]],["title/interfaces/INoopAccessors.html",[40,0.003,2281,3.951]],["body/interfaces/INoopAccessors.html",[0,0.129,3,0.292,4,0.274,5,0.274,7,2.877,8,1.605,10,0.301,11,0.562,12,1.265,13,1.393,14,1.812,20,0.005,24,0.335,28,0.292,34,1.677,38,1.968,39,0.345,40,0.004,41,0.998,56,3.48,72,3.408,75,1.263,78,0.004,79,0.004,80,0.004,94,1.574,159,1.9,1056,2.852,1608,2.572,1639,3.183,1899,1.129,1907,2.895,1908,2.852,2281,7.288,2282,6.673,2283,6.163]],["title/interfaces/IPopoverPluginConfig.html",[40,0.003,1161,3.951]],["body/interfaces/IPopoverPluginConfig.html",[0,0.084,3,0.19,4,0.179,5,0.179,10,0.196,11,0.427,12,0.98,17,0.677,20,0.005,22,1.236,24,0.329,28,0.372,39,0.263,40,0.002,41,0.55,55,2.028,57,1.076,78,0.002,79,0.003,80,0.002,85,0.8,89,1.216,90,1.263,92,3.409,94,1.673,107,1.464,109,2.895,110,1.921,113,1.846,114,2.069,117,1.878,124,1.303,143,1.673,144,2.272,161,1.928,179,0.869,183,0.845,192,1.076,225,2.043,227,2.533,253,1.867,290,1.199,297,2.425,317,1.439,320,2.179,384,1.723,436,2.615,439,2.169,443,2.074,444,1.573,453,2.802,456,4.335,459,2.655,465,2.136,476,2.761,507,2.548,583,2.685,584,2.685,587,2.934,596,2.236,597,1.727,607,2.373,626,2.095,633,1.609,635,1.407,663,2.615,672,2.487,733,1.676,740,1.504,765,1.7,794,2.685,819,2.373,904,3.268,935,3.922,937,1.797,947,4.023,1011,4.023,1030,4.93,1103,7.543,1108,3.575,1124,3.034,1125,3.034,1130,4.023,1135,3.774,1146,3.774,1147,5.349,1148,3.774,1149,4.356,1150,2.548,1151,2.428,1152,4.356,1153,2.762,1154,3.774,1155,3.774,1156,4.023,1157,2.685,1158,4.023,1159,4.023,1160,4.023,1161,6.421,1164,5.957,1165,3.067,1166,4.023,1169,3.774,1170,4.023,1171,4.023,1172,7.18,1173,3.075,1174,2.844,1177,5.204,1182,3.034,1183,3.034,1184,3.774,1185,3.774,1186,3.409,1187,5.204,1188,2.307,1189,5.547,1190,3.605,1191,5.547,1192,6.007,1193,6.007,1194,5.643,1195,3.774,1196,2.934,1197,3.034,1198,3.409,1199,4.356,1200,4.356,1201,3.268,1202,3.409,1203,4.356,1204,4.023,1205,1.846,1206,1.846,1207,3.575,1208,4.356,1209,4.356,1210,4.356,1211,4.356,1212,4.356,1213,4.356,1214,4.356,1215,4.356,1216,4.356,1217,4.356,1218,4.356,1219,4.93,1220,3.575,1221,4.506,1222,3.575,1223,1.785,1224,3.268,1225,6.35,1226,4.356,1227,5.547,1228,4.023,1229,3.575,1230,4.023,1231,3.774,1232,4.356,1233,4.356,1234,1.878,1235,3.575,1236,4.023,1237,4.356,1238,4.356,1239,4.356,1240,4.356,1241,4.356,1242,5.204,1243,3.774,1244,3.774,1245,3.774,1246,4.356,1247,4.356,1248,4.356,1249,4.356,1250,4.356,1251,3.774,1252,6.876,1253,4.506,1254,1.647,1255,4.356,1256,1.727,1257,2.934,1258,4.356,1259,5.957,1260,4.356,1261,4.356,1262,4.356,1263,4.356,1264,4.356,1899,0.737]],["title/interfaces/IPosition.html",[40,0.003,1310,1.725]],["body/interfaces/IPosition.html",[3,0.126,4,0.119,5,0.119,10,0.275,11,0.433,12,1.281,13,1.311,20,0.005,21,0.768,22,1.017,24,0.332,28,0.349,33,1.209,34,0.576,35,1.559,36,1.582,37,1.388,39,0.398,40,0.005,41,0.915,42,2.031,47,2.031,57,1.718,75,0.868,78,0.002,79,0.002,80,0.002,83,1.294,85,0.531,89,1.242,90,1.537,97,1.646,102,0.864,104,0.852,108,0.455,114,0.806,117,0.659,129,2.359,134,0.869,140,1.786,149,0.764,158,0.955,159,1.799,164,1.345,179,1.185,183,0.561,194,1.526,209,1.996,218,1.388,225,0.983,234,2.272,240,0.968,241,0.983,247,2.514,250,1.246,253,0.785,280,1.536,281,1.348,283,0.997,285,1.353,290,0.796,299,2.025,309,1.371,310,2.025,328,0.983,333,1.902,334,1.254,368,0.997,384,0.829,399,1.184,411,0.997,417,1.076,439,1.043,443,1.536,444,1.607,446,1.941,447,1.607,453,1.683,455,2.084,459,2.174,464,1.494,465,1.582,476,2.206,524,1.996,525,1.854,530,1.29,531,1.29,532,1.29,533,1.29,539,1.582,541,1.246,545,1.669,547,1.29,548,1.559,553,1.29,557,1.987,561,1.987,571,1.29,572,1.683,575,1.268,576,1.767,589,1.268,591,1.246,595,1.29,596,1.657,599,1.29,633,1.633,635,1.541,664,1.012,702,1.559,703,1.959,704,2.043,719,1.224,733,1.486,735,0.983,737,1.93,740,2.104,749,1.043,750,1.093,765,1.259,771,1.146,778,1.764,786,1.028,791,1.526,793,2.451,802,1.076,816,1.268,821,1.268,827,1.184,828,1.128,881,1.184,923,1.204,937,1.823,994,1.11,1047,1.224,1048,1.29,1049,1.29,1050,1.29,1052,2.305,1054,0.968,1056,1.043,1173,2.201,1188,2.341,1205,1.224,1206,1.224,1223,2.224,1234,1.246,1254,1.093,1256,1.765,1310,2.305,1317,1.582,1419,1.224,1431,2.583,1455,0.955,1592,1.204,1607,1.765,1608,0.941,1616,1.29,1632,1.268,1639,1.794,1649,1.224,1682,1.11,1750,1.29,1763,1.128,1794,1.29,1809,2.152,1899,0.489,1900,1.268,1901,1.314,1902,1.987,1903,1.559,1904,1.29,1905,1.29,1906,1.29,1907,1.059,1908,1.043,1909,2.423,1910,1.268,1911,1.246,1912,2.713,1913,1.268,1914,1.29,1915,1.128,1916,1.29,1917,1.29,1918,1.29,1919,1.765,1920,1.888,1921,1.146,1922,1.823,1923,3.196,1924,1.314,1925,1.886,1926,1.165,1927,2.423,1928,1.314,1929,2.023,1930,1.987,1931,1.987,1932,1.314,1933,1.987,1934,2.339,1935,1.886,1936,1.314,1937,1.128,1938,1.314,1939,1.224,1940,1.536,1941,1.184,1942,1.314,1943,1.314,1944,0.997,1945,1.314,1946,1.268,1947,1.918,1948,1.987,1949,1.29,1950,1.987,1951,1.314,1952,1.29,1953,1.314,1954,2.549,1955,1.314,1956,1.314,1957,1.314,1958,1.987,1959,1.268,1960,1.128,1961,1.29,1962,1.29,1963,1.314,1964,1.29,1965,2.023,1966,1.314,1967,1.29,1968,1.246,1969,1.314,1970,1.314,1971,1.987,1972,1.854,1973,1.29,1974,1.959,1975,1.314,1976,1.29,1977,1.29,1978,1.314,1979,1.314,1980,1.314,1981,1.29,1982,1.314,1983,1.11,1984,1.204,1985,1.29,1986,1.314,1987,1.314,1988,1.314,1989,1.314,1990,1.268,1991,1.268,1992,1.268,1993,1.314,1994,2.023,1995,2.722,1996,1.314,1997,1.29,1998,1.314,1999,1.314,2000,1.314,2001,1.314,2002,1.314,2003,1.657,2004,1.076,2005,1.314,2006,1.314,2007,1.886,2008,1.268,2009,1.369,2010,1.268,2011,1.314,2012,1.314,2013,1.886,2014,2.023,2015,1.314,2016,1.314,2017,2.261,2018,1.918,2019,2.261,2020,1.29,2021,1.246,2022,1.076,2023,1.314,2024,1.146]],["title/interfaces/IRadialAccessors.html",[40,0.003,2284,3.743]],["body/interfaces/IRadialAccessors.html",[0,0.119,3,0.269,4,0.253,5,0.253,7,2.657,8,1.482,10,0.278,11,0.535,12,1.237,13,1.33,20,0.005,23,3.358,24,0.319,28,0.329,29,4.405,31,3.606,32,3.214,33,2.3,34,1.621,37,2.536,38,1.818,39,0.37,40,0.005,41,0.951,52,2.269,54,2.484,56,3.214,57,1.86,72,3.147,73,3.606,74,3.606,75,1.3,78,0.003,79,0.004,80,0.003,108,0.77,134,0.77,778,2.017,781,3.621,1530,5.058,1598,4.824,1899,1.042,1974,2.718,2154,2.524,2262,4.916,2263,4.916,2284,6.672,2285,5.339,2286,7.127,2287,7.127,2288,5.339]],["title/interfaces/IRadialDataAccessors.html",[40,0.003,2286,3.743]],["body/interfaces/IRadialDataAccessors.html",[0,0.117,3,0.264,4,0.248,5,0.248,7,2.608,8,1.455,10,0.273,11,0.529,12,1.061,13,1.14,17,0.94,20,0.005,22,1.242,23,3.296,24,0.315,28,0.325,29,4.355,31,3.539,32,3.155,33,2.463,34,1.484,37,2.515,38,1.784,39,0.368,40,0.005,41,0.764,52,2.455,54,2.438,56,3.155,57,1.839,72,3.089,73,3.539,74,3.539,75,1.345,78,0.003,79,0.004,80,0.003,108,0.883,134,0.824,778,2.16,781,3.878,1530,4.965,1598,4.735,1899,1.023,1974,2.911,2154,2.703,2218,3.631,2262,5.265,2263,5.265,2284,6.109,2285,6.449,2286,6.905,2287,6.617,2288,5.241,2289,6.752]],["title/interfaces/IRadialRendererConfig.html",[40,0.003,1947,1.966]],["body/interfaces/IRadialRendererConfig.html",[3,0.122,4,0.115,5,0.115,10,0.27,11,0.426,12,1.277,13,1.304,20,0.005,21,0.757,22,1.398,24,0.349,28,0.346,33,1.178,34,0.557,35,1.519,36,1.542,37,1.353,39,0.397,40,0.005,41,0.934,42,1.76,47,1.76,57,1.695,75,0.85,78,0.002,79,0.002,80,0.002,83,1.261,89,1.21,90,1.511,97,1.611,102,1.791,104,0.824,108,0.612,114,0.78,117,0.989,129,2.33,134,0.876,140,1.875,149,0.739,158,0.923,159,1.779,164,1.349,179,1.176,183,0.542,194,1.623,209,1.966,218,1.353,225,0.95,234,2.237,240,1.453,241,0.95,247,2.491,250,1.205,253,0.759,280,1.503,281,1.327,283,0.965,285,1.329,290,0.769,299,1.994,309,1.347,310,1.994,328,0.95,333,1.868,334,1.228,368,0.965,384,0.802,399,1.145,411,0.965,417,1.04,439,1.009,443,1.497,444,1.566,446,1.912,447,1.566,453,1.64,455,2.041,459,2.141,464,1.463,465,1.542,476,2.173,524,1.966,525,1.807,530,1.248,531,1.248,532,1.248,533,1.248,539,1.542,541,1.205,545,1.634,547,1.248,548,1.519,553,1.248,557,1.936,561,1.936,571,1.248,572,1.64,575,1.226,576,1.73,589,1.226,591,1.205,595,1.248,596,1.614,599,1.248,633,0.749,635,1.244,664,0.979,702,1.519,703,1.918,704,2.007,719,1.837,733,1.46,735,0.95,737,1.89,740,2.237,749,1.009,750,1.057,765,1.227,771,1.108,778,1.737,786,0.994,791,1.499,793,2.413,802,1.04,816,1.226,821,1.226,827,1.145,828,1.09,881,1.145,923,1.164,937,1.589,994,1.073,1047,1.184,1048,1.248,1049,1.248,1050,1.248,1052,2.264,1054,0.937,1056,1.009,1173,2.162,1188,2.3,1205,1.184,1206,1.184,1223,2.177,1234,1.205,1254,1.057,1256,1.72,1310,2.009,1317,1.542,1419,1.184,1431,2.537,1455,0.923,1592,1.164,1607,1.72,1608,0.91,1616,1.248,1632,1.226,1639,1.748,1649,1.184,1682,1.073,1750,1.248,1763,1.09,1794,1.248,1809,2.107,1899,0.473,1900,1.226,1901,1.27,1902,1.936,1903,1.519,1904,1.248,1905,1.248,1906,1.248,1907,1.024,1908,1.009,1909,2.372,1910,1.226,1911,1.205,1912,2.677,1913,1.226,1914,1.248,1915,1.09,1916,1.248,1917,1.248,1918,1.248,1919,1.72,1920,1.863,1921,1.108,1922,1.791,1923,3.165,1924,1.27,1925,1.837,1926,1.126,1927,2.372,1928,1.27,1929,1.971,1930,1.936,1931,1.936,1932,1.27,1933,1.936,1934,2.29,1935,1.837,1936,1.27,1937,1.09,1938,1.27,1939,1.184,1940,1.834,1941,1.145,1942,1.27,1943,1.27,1944,0.965,1945,1.27,1946,1.226,1947,2.29,1948,3.063,1949,2.674,1950,3.063,1951,1.971,1952,1.936,1953,1.971,1954,2.624,1955,1.971,1956,1.971,1957,1.971,1958,3.063,1959,1.902,1960,2.337,1961,2.674,1962,2.674,1963,1.27,1964,1.248,1965,1.971,1966,1.27,1967,1.248,1968,1.205,1969,1.27,1970,1.27,1971,1.936,1972,1.807,1973,1.248,1974,1.918,1975,1.27,1976,1.248,1977,1.248,1978,1.27,1979,1.27,1980,1.27,1981,1.248,1982,1.27,1983,1.073,1984,1.164,1985,1.248,1986,1.27,1987,1.27,1988,1.27,1989,1.27,1990,1.226,1991,1.226,1992,1.226,1993,1.27,1994,1.971,1995,2.674,1996,1.27,1997,1.248,1998,1.27,1999,1.27,2000,1.27,2001,1.27,2002,1.27,2003,1.614,2004,1.04,2005,1.27,2006,1.27,2007,1.837,2008,1.226,2009,1.334,2010,1.226,2011,1.27,2012,1.27,2013,1.837,2014,1.971,2015,1.27,2016,1.27,2017,2.214,2018,1.869,2019,2.214,2020,1.248,2021,1.205,2022,1.04,2023,1.27,2024,1.108]],["title/interfaces/IRadialScales.html",[40,0.003,1599,3.176]],["body/interfaces/IRadialScales.html",[3,0.187,4,0.175,5,0.175,10,0.331,11,0.422,12,0.845,13,0.655,20,0.005,24,0.312,28,0.259,34,0.852,39,0.388,40,0.005,41,0.975,42,1.161,47,1.161,75,1.089,78,0.002,79,0.003,80,0.002,95,1.812,97,1.799,108,0.838,110,1.465,117,1.552,124,1.774,126,2.097,132,2.43,134,0.817,140,1.905,161,1.904,164,1.351,175,1.798,178,2.139,179,0.618,183,0.83,192,1.465,222,1.98,225,2.017,227,1.824,245,3.76,280,2.456,281,0.876,285,1.774,309,0.962,326,2.792,334,1.847,336,1.433,337,2.057,368,2.047,379,3.873,441,2.711,576,1.931,763,1.876,764,2.502,765,1.21,775,2.696,777,2.43,778,1.146,780,4.006,802,2.208,841,3.086,884,3.887,1455,1.413,1490,2.33,1500,4.13,1599,4.13,1680,3.656,1682,1.643,1699,2.184,1718,2.967,1809,1.696,1899,0.723,1915,1.669,1919,2.352,1920,2.357,1944,3.131,2003,2.208,2022,2.208,2032,3.093,2035,2.057,2052,2.279,2053,2.018,2074,2.279,2075,2.279,2106,3.47,2139,4.28,2140,2.978,2141,4.379,2142,3.208,2144,4.587,2145,2.978,2146,2.978,2147,2.881,2148,3.086,2149,3.086,2150,3.086,2151,4.317,2152,4.519,2153,3.76,2154,1.433,2155,3.208,2156,4.953,2157,2.978,2158,3.208,2159,3.208,2160,5.794,2161,4.449,2162,3.873,2163,6.404,2164,2.792,2165,3.208,2166,4.449,2167,4.13,2168,2.636,2169,2.792,2170,2.792,2171,4.801,2172,4.797,2173,4.449,2174,2.881,2175,2.881,2176,4.797,2177,2.792,2178,2.792,2179,3.208,2180,3.208,2181,3.086,2182,2.792,2183,4.801,2184,3.208,2185,5.043,2186,2.792,2187,3.208,2188,3.208,2189,4.28,2190,3.208,2191,3.208,2192,3.208]],["title/interfaces/IRadialSeriesAccessors.html",[40,0.003,2287,3.743]],["body/interfaces/IRadialSeriesAccessors.html",[0,0.118,3,0.267,4,0.25,5,0.25,7,2.631,8,1.468,10,0.275,11,0.532,12,1.066,13,1.147,17,0.948,20,0.005,22,1.248,23,3.324,24,0.259,28,0.327,29,4.378,31,3.57,32,3.182,33,2.292,34,1.492,37,2.749,38,1.8,39,0.369,40,0.005,41,0.771,52,2.46,54,2.46,56,3.182,57,1.849,72,3.116,73,3.57,74,3.57,75,1.349,78,0.003,79,0.004,80,0.003,108,0.765,134,0.828,778,2.169,781,3.893,1530,5.008,1598,4.776,1899,1.032,1974,2.922,2154,2.713,2218,3.663,2262,5.285,2263,5.285,2284,6.142,2285,6.483,2286,6.643,2287,6.925,2288,5.286,2290,6.102]],["title/interfaces/IRectangleAccessors.html",[40,0.003,331,2.604]],["body/interfaces/IRectangleAccessors.html",[0,0.122,3,0.276,4,0.259,5,0.259,7,2.722,8,1.519,10,0.285,11,0.543,12,1.246,13,1.339,14,1.715,20,0.005,24,0.324,28,0.276,33,2.506,34,1.638,35,2.991,36,2.717,37,2.563,38,1.862,39,0.388,40,0.005,41,1.122,52,1.762,53,2.545,78,0.004,79,0.004,80,0.004,108,0.645,200,4.003,205,5.115,206,5.543,212,2.979,213,2.979,214,3.159,331,4.69,1889,4.556,1891,4.556,1893,4.556,1895,4.556,1896,4.736,1899,1.068,2291,4.942,2292,4.736,2293,4.736,2294,4.736]],["title/interfaces/IRectangleDataAccessors.html",[40,0.003,206,2.892]],["body/interfaces/IRectangleDataAccessors.html",[0,0.116,3,0.263,4,0.246,5,0.246,7,2.589,8,1.444,10,0.271,11,0.527,12,1.056,13,1.135,14,1.631,20,0.005,22,1.535,24,0.372,28,0.263,33,2.559,34,1.477,35,3.02,36,2.635,37,2.507,38,1.771,39,0.384,40,0.005,41,1.109,52,1.676,53,2.42,78,0.003,79,0.004,80,0.003,108,0.614,200,3.807,205,4.702,206,5.32,212,2.833,213,2.833,214,3.004,331,4.23,1889,6.056,1891,6.056,1893,6.056,1895,6.056,1896,6.295,1899,1.016,2291,4.7,2292,4.505,2293,4.505,2294,6.295]],["title/interfaces/IRectangleSeriesAccessors.html",[40,0.003,205,2.668]],["body/interfaces/IRectangleSeriesAccessors.html",[0,0.121,3,0.275,4,0.258,5,0.258,7,2.708,8,1.511,10,0.283,11,0.542,12,1.085,13,1.167,14,1.706,20,0.005,22,1.421,24,0.323,28,0.275,33,2.504,34,1.518,35,2.986,36,2.915,37,2.801,38,1.853,39,0.388,40,0.005,41,1.121,52,2.379,53,3.435,78,0.004,79,0.004,80,0.004,108,0.642,200,3.982,205,4.986,206,5.197,212,2.964,213,2.964,214,3.142,331,4.348,1889,4.533,1891,4.533,1893,4.533,1895,4.533,1896,4.712,1899,1.062,2291,4.916,2292,4.712,2293,4.712,2294,4.712]],["title/interfaces/IRenderContainers.html",[40,0.003,2004,1.698]],["body/interfaces/IRenderContainers.html",[3,0.128,4,0.12,5,0.12,10,0.246,11,0.319,12,1.283,13,1.314,17,0.454,20,0.005,21,0.876,24,0.296,28,0.35,33,1.22,34,0.583,35,1.573,36,1.597,37,1.401,39,0.399,40,0.005,41,0.919,42,1.797,47,1.797,57,1.726,75,0.874,78,0.002,79,0.003,80,0.002,83,1.306,85,0.537,89,1.253,90,1.526,97,1.658,102,0.874,104,0.862,108,0.459,114,0.816,117,0.667,129,2.369,134,0.877,140,1.792,149,0.773,158,0.966,159,1.806,164,1.284,179,1.188,183,0.567,194,1.536,209,2.007,218,1.401,225,0.994,234,2.284,240,0.98,241,0.994,247,2.522,250,1.26,253,0.794,280,1.547,281,1.355,283,1.009,285,1.361,290,0.805,299,2.036,309,1.38,310,2.036,328,0.994,333,1.913,334,1.263,368,1.009,384,0.839,399,1.198,411,1.009,417,1.088,439,1.056,443,1.55,444,1.621,446,1.952,447,1.621,453,1.698,455,2.1,459,2.186,464,1.505,465,1.597,476,2.218,524,2.007,525,1.871,530,1.306,531,1.306,532,1.306,533,1.306,539,1.597,541,1.26,545,1.887,547,1.306,548,1.573,553,1.306,557,2.005,561,2.005,571,1.306,572,1.698,575,1.283,576,1.78,589,1.283,591,1.26,595,1.306,596,1.672,599,1.306,633,0.783,635,1.052,664,1.024,702,1.573,703,1.974,704,2.516,719,1.239,733,1.495,735,0.994,737,1.944,740,2.117,749,1.056,750,1.106,765,1.271,771,1.159,778,1.872,786,1.04,791,1.536,793,2.464,802,1.088,816,1.283,821,1.283,827,1.198,828,1.141,881,1.198,923,1.218,937,1.635,994,1.123,1047,1.239,1048,1.306,1049,1.306,1050,1.306,1052,2.319,1054,0.98,1056,1.056,1173,2.215,1188,2.356,1205,1.239,1206,1.239,1223,2.24,1234,1.26,1254,1.106,1256,1.781,1310,2.067,1317,1.597,1419,1.239,1431,2.599,1455,0.966,1592,1.218,1607,1.781,1608,0.952,1616,1.306,1632,1.283,1639,1.81,1649,1.239,1682,1.123,1750,1.306,1763,1.141,1794,1.306,1809,2.168,1899,0.495,1900,1.283,1901,1.329,1902,2.005,1903,1.573,1904,1.306,1905,1.306,1906,1.306,1907,1.072,1908,1.056,1909,2.441,1910,1.283,1911,1.26,1912,3.004,1913,1.283,1914,1.306,1915,1.141,1916,1.306,1917,1.306,1918,1.306,1919,1.781,1920,1.897,1921,1.159,1922,1.834,1923,3.208,1924,1.329,1925,1.903,1926,1.178,1927,2.441,1928,1.329,1929,2.042,1930,2.005,1931,2.005,1932,1.329,1933,2.005,1934,2.357,1935,1.903,1936,1.329,1937,1.141,1938,1.329,1939,1.239,1940,1.55,1941,1.198,1942,1.329,1943,1.329,1944,1.009,1945,1.329,1946,1.283,1947,1.936,1948,2.005,1949,1.306,1950,2.005,1951,1.329,1952,1.306,1953,1.329,1954,2.561,1955,1.329,1956,1.329,1957,1.329,1958,2.005,1959,1.283,1960,1.141,1961,1.306,1962,1.306,1963,1.329,1964,1.306,1965,2.042,1966,1.329,1967,1.306,1968,1.26,1969,1.329,1970,1.329,1971,2.005,1972,1.871,1973,1.306,1974,1.974,1975,1.329,1976,1.306,1977,1.306,1978,1.329,1979,1.329,1980,1.329,1981,1.306,1982,1.329,1983,1.123,1984,1.218,1985,1.306,1986,1.329,1987,1.329,1988,1.329,1989,1.329,1990,1.283,1991,1.283,1992,1.283,1993,1.329,1994,2.042,1995,2.739,1996,1.329,1997,1.306,1998,1.329,1999,1.329,2000,1.329,2001,1.329,2002,1.329,2003,2.035,2004,1.672,2005,1.329,2006,1.329,2007,1.903,2008,1.283,2009,1.381,2010,1.283,2011,1.329,2012,1.329,2013,1.903,2014,2.042,2015,1.329,2016,1.329,2017,2.278,2018,1.936,2019,2.278,2020,1.306,2021,1.26,2022,1.088,2023,1.329,2024,1.159,2218,1.755,2295,3.264]],["title/interfaces/IRenderSeries.html",[40,0.003,295,2.43]],["body/interfaces/IRenderSeries.html",[0,0.115,3,0.189,4,0.178,5,0.178,10,0.195,11,0.426,12,1.106,13,0.664,20,0.005,21,0.699,24,0.29,28,0.372,34,0.864,38,1.278,39,0.372,40,0.005,41,0.866,52,1.671,53,1.747,78,0.002,79,0.003,80,0.002,89,1.914,90,1.1,102,2.212,107,1.671,124,1.296,134,0.857,140,1.686,149,2.174,155,2.994,159,1.44,164,1.284,179,0.865,194,2.259,209,2.354,210,2.415,218,2.307,240,1.452,247,2.201,253,2.108,255,2.935,263,3.017,268,4.477,281,1.226,285,1.911,290,1.193,292,2.919,293,2.919,294,3.592,295,3.94,296,3.189,297,2.139,299,2.53,302,2.919,305,2.919,306,2.535,309,1.542,317,1.431,327,2.361,328,1.474,331,2.473,332,2.415,333,1.352,336,1.452,337,2.084,580,1.836,635,1.606,718,2.772,733,1.803,751,2.535,781,2.878,786,2.129,791,1.499,806,3.822,959,4.032,1153,2.747,1257,2.919,1360,4.168,1526,3.69,1608,2.408,1817,4.347,1818,3.69,1823,3.69,1899,0.733,1907,2.711,1908,1.564,1920,1.862,1922,2.051,1926,2.412,1940,2.553,1960,2.676,2004,2.753,2009,1.333,2027,2.309,2031,3.776,2036,2.259,2037,3.056,2044,3.935,2064,2.309,2081,3.127,2082,3.127,2083,3.25,2084,4.49,2085,4.49,2086,3.794,2087,3.25,2088,5.143,2089,4.49,2090,3.908,2091,3.25,2092,4.775,2093,5.337,2094,3.25,2095,3.017,2096,3.017,2097,3.25,2098,2.601,2099,4.49,2100,2.601,2101,4.319,2102,4.319,2103,4.319,2104,4.168,2105,3.908,2106,2.535,2107,3.127,2108,4.948,2109,5.143,2110,4.319,2111,3.017,2112,3.25,2113,3.25,2114,3.25,2115,3.017,2116,3.25,2117,3.25,2118,3.25,2119,3.127,2120,4.49,2121,4.319,2122,3.017,2123,3.25,2124,4.49,2125,4.319,2126,2.829,2127,3.25,2128,3.25,2129,3.127,2130,3.25,2131,3.127,2132,5.143,2133,3.25,2134,3.25,2135,3.127,2136,3.017,2137,3.25,2138,4.828]],["title/interfaces/IRenderStateData.html",[40,0.003,572,1.725]],["body/interfaces/IRenderStateData.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.435,12,1.282,13,1.334,20,0.005,21,0.771,24,0.317,28,0.349,33,1.215,34,0.58,35,1.567,36,1.59,37,1.395,39,0.398,40,0.005,41,0.917,42,1.793,47,1.793,57,1.722,75,0.871,78,0.002,79,0.003,80,0.002,83,1.301,85,0.534,89,1.248,90,1.524,97,1.652,102,0.87,104,0.858,108,0.457,114,0.812,117,0.663,129,2.364,134,0.881,140,1.789,149,0.769,158,0.961,159,1.803,164,1.283,179,1.186,183,0.564,194,1.532,209,2.002,218,1.395,225,0.989,234,2.587,240,0.975,241,0.989,247,2.519,250,1.254,253,0.79,280,1.542,281,1.352,283,1.004,285,1.358,290,0.801,299,2.031,309,1.376,310,2.031,328,0.989,333,2.175,334,1.259,368,1.004,384,0.834,399,1.192,411,1.004,417,1.083,439,1.05,443,1.544,444,1.615,446,1.947,447,1.615,453,1.691,455,2.093,459,2.181,464,1.5,465,1.59,476,2.213,524,2.002,525,1.863,530,1.299,531,1.299,532,1.299,533,1.299,539,1.59,541,1.254,545,1.676,547,1.299,548,1.567,553,1.299,557,1.997,561,1.997,571,1.299,572,2.06,575,1.276,576,1.774,589,1.276,591,1.254,595,1.299,596,1.665,599,1.299,633,0.779,635,1.047,664,1.019,702,1.567,703,1.967,704,2.05,719,1.232,733,1.491,735,0.989,737,2.665,740,2.111,749,1.05,750,1.1,765,1.265,771,1.153,778,1.769,786,1.034,791,1.532,793,2.458,802,1.083,816,1.276,821,1.276,827,1.192,828,1.135,881,1.192,923,1.212,937,1.63,994,1.117,1047,1.232,1048,1.299,1049,1.299,1050,1.299,1052,2.313,1054,0.975,1056,1.05,1173,2.208,1188,2.349,1205,1.232,1206,1.232,1223,2.233,1234,1.254,1254,1.1,1256,1.773,1310,2.06,1317,1.59,1419,1.232,1431,2.798,1455,0.961,1592,1.212,1607,1.773,1608,0.947,1616,1.299,1632,1.276,1639,1.803,1649,1.232,1682,1.117,1750,1.299,1763,1.135,1794,1.299,1809,2.426,1899,0.492,1900,1.276,1901,1.322,1902,1.997,1903,1.567,1904,1.299,1905,1.299,1906,1.299,1907,1.066,1908,1.05,1909,2.433,1910,1.276,1911,1.254,1912,2.925,1913,1.276,1914,1.299,1915,1.135,1916,1.299,1917,1.299,1918,1.299,1919,1.773,1920,1.893,1921,1.153,1922,1.829,1923,3.203,1924,1.322,1925,1.895,1926,1.172,1927,2.433,1928,1.322,1929,2.033,1930,1.997,1931,1.997,1932,1.322,1933,1.997,1934,2.349,1935,1.895,1936,1.322,1937,1.135,1938,1.322,1939,1.232,1940,1.544,1941,1.192,1942,1.322,1943,1.322,1944,1.004,1945,1.322,1946,1.276,1947,1.928,1948,1.997,1949,1.299,1950,1.997,1951,1.322,1952,1.299,1953,1.322,1954,2.555,1955,1.322,1956,1.322,1957,1.322,1958,1.997,1959,1.276,1960,1.135,1961,1.299,1962,1.299,1963,1.322,1964,1.299,1965,2.033,1966,1.322,1967,1.299,1968,1.254,1969,1.322,1970,1.322,1971,1.997,1972,1.863,1973,1.299,1974,1.967,1975,1.322,1976,1.299,1977,1.299,1978,1.322,1979,1.322,1980,1.322,1981,1.299,1982,1.322,1983,1.117,1984,1.212,1985,1.299,1986,1.322,1987,1.322,1988,1.322,1989,1.322,1990,1.276,1991,1.276,1992,1.276,1993,1.322,1994,2.033,1995,2.731,1996,1.322,1997,1.299,1998,1.322,1999,1.322,2000,1.322,2001,1.322,2002,1.322,2003,1.665,2004,1.083,2005,1.322,2006,1.322,2007,1.895,2008,1.276,2009,1.375,2010,1.276,2011,1.322,2012,1.322,2013,1.895,2014,2.033,2015,1.322,2016,1.322,2017,2.27,2018,1.928,2019,2.27,2020,1.299,2021,1.254,2022,1.083,2023,1.322,2024,1.153]],["title/interfaces/IRenderStatesIndex.html",[40,0.003,798,3.292]],["body/interfaces/IRenderStatesIndex.html",[0,0.132,3,0.232,4,0.218,5,0.218,8,1.276,13,1.303,17,0.825,20,0.005,21,0.8,24,0.225,28,0.3,34,1.058,39,0.378,40,0.005,75,0.848,78,0.003,79,0.004,80,0.003,90,1.628,94,1.366,108,0.82,124,1.587,134,0.914,158,2.264,164,0.813,175,1.541,179,0.767,183,1.029,192,1.311,194,2.009,234,2.62,279,3.651,280,1.939,283,2.62,333,2.138,334,1.854,394,3.184,411,1.831,432,3.464,459,1.753,464,2.09,482,3.36,488,2.038,572,2.591,576,2.471,597,2.104,730,5.478,731,4.772,732,3.98,733,1.293,734,5.286,735,1.805,736,4.153,737,2.699,738,4.153,739,4.153,740,2.365,741,4.153,749,1.916,750,3.141,751,3.104,752,3.98,753,3.98,754,3.98,755,3.829,756,4.945,757,3.829,758,4.474,759,3.651,760,5.14,761,4.153,762,3.829,763,2.327,764,3.104,765,1.501,766,4.153,767,4.153,768,3.574,769,3.695,770,2.767,771,2.104,772,3.829,773,2.827,774,3.829,775,2.412,776,2.654,777,2.174,778,1.421,779,4.772,780,3.733,781,2.551,782,3.829,783,3.98,784,3.829,785,3.829,786,1.887,787,4.945,788,4.945,789,4.945,790,4.945,791,1.329,792,3.829,793,1.975,794,3.271,795,4.153,796,4.153,797,3.104,798,4.945,1899,0.897,2218,3.184,2296,5.922]],["title/interfaces/IRendererConfig.html",[40,0.003,1940,1.574]],["body/interfaces/IRendererConfig.html",[3,0.126,4,0.118,5,0.118,10,0.274,11,0.433,12,1.281,13,1.318,20,0.005,21,0.767,22,1.246,24,0.332,28,0.348,33,1.205,34,0.574,35,1.555,36,1.578,37,1.384,39,0.398,40,0.005,41,0.914,42,1.785,47,1.785,57,1.715,75,0.866,78,0.002,79,0.002,80,0.002,83,1.291,89,1.239,90,1.521,97,1.642,102,0.861,104,1.794,108,0.454,114,0.804,117,0.656,129,2.356,134,0.868,140,1.887,149,0.761,158,0.951,159,1.797,164,1.301,179,1.184,183,0.559,194,1.524,209,1.993,218,1.384,225,0.979,234,2.268,240,0.965,241,0.979,247,2.512,250,1.241,253,0.782,280,1.722,281,1.346,283,0.994,285,1.35,290,0.793,299,2.021,309,1.369,310,2.021,328,0.979,333,1.898,334,1.251,368,0.994,384,0.826,399,1.18,411,0.994,417,1.072,439,1.04,443,1.532,444,1.602,446,1.938,447,1.602,453,1.678,455,2.08,459,2.171,464,1.491,465,1.578,476,2.203,524,1.993,525,1.849,530,1.286,531,1.286,532,1.286,533,1.286,539,1.578,541,1.241,545,1.665,547,1.286,548,1.555,553,1.286,557,1.982,561,1.982,571,1.286,572,1.678,575,1.263,576,1.763,589,1.263,591,1.241,595,1.286,596,1.652,599,1.286,633,0.771,635,1.039,664,1.009,702,1.555,703,1.955,704,2.039,719,1.22,733,1.483,735,0.979,737,1.926,740,2.1,749,1.04,750,1.089,765,1.256,771,1.142,778,1.761,786,1.024,791,1.524,793,2.447,802,1.072,816,1.263,821,1.263,827,1.18,828,1.124,881,1.18,923,1.2,937,1.619,994,1.106,1047,1.22,1048,1.286,1049,1.286,1050,1.286,1052,2.301,1054,0.965,1056,1.04,1173,2.197,1188,2.337,1205,1.22,1206,1.22,1223,2.219,1234,1.241,1254,1.089,1256,1.76,1310,2.047,1317,1.578,1419,1.22,1431,2.578,1455,1.789,1592,1.2,1607,1.76,1608,0.938,1616,1.286,1632,1.263,1639,1.789,1649,1.22,1682,1.106,1750,1.286,1763,1.124,1794,1.286,1809,2.147,1899,0.487,1900,1.263,1901,1.309,1902,1.982,1903,1.555,1904,1.286,1905,1.286,1906,1.286,1907,1.056,1908,1.04,1909,2.418,1910,1.263,1911,1.241,1912,2.709,1913,1.263,1914,1.286,1915,1.124,1916,1.286,1917,1.286,1918,1.286,1919,1.76,1920,1.886,1921,1.142,1922,1.82,1923,3.193,1924,1.309,1925,1.881,1926,1.161,1927,2.418,1928,1.309,1929,2.018,1930,1.982,1931,1.982,1932,1.309,1933,1.982,1934,2.334,1935,1.881,1936,1.309,1937,1.124,1938,1.309,1939,1.22,1940,1.869,1941,2.493,1942,2.766,1943,2.018,1944,1.532,1945,2.018,1946,2.669,1947,1.913,1948,1.982,1949,1.286,1950,1.982,1951,1.309,1952,1.286,1953,1.309,1954,2.545,1955,1.309,1956,1.309,1957,1.309,1958,1.982,1959,1.263,1960,1.124,1961,1.286,1962,1.286,1963,1.309,1964,1.286,1965,2.018,1966,1.309,1967,1.286,1968,1.241,1969,1.309,1970,1.309,1971,1.982,1972,1.849,1973,1.286,1974,1.955,1975,1.309,1976,1.286,1977,1.286,1978,1.309,1979,1.309,1980,1.309,1981,1.286,1982,1.309,1983,1.106,1984,1.2,1985,1.286,1986,1.309,1987,1.309,1988,1.309,1989,1.309,1990,1.263,1991,1.263,1992,1.263,1993,1.309,1994,2.018,1995,2.717,1996,1.309,1997,1.286,1998,1.309,1999,1.309,2000,1.309,2001,1.309,2002,1.309,2003,1.652,2004,1.072,2005,1.309,2006,1.309,2007,1.881,2008,1.263,2009,1.365,2010,1.263,2011,1.309,2012,1.309,2013,1.881,2014,2.018,2015,1.309,2016,1.309,2017,2.256,2018,1.913,2019,2.256,2020,1.286,2021,1.241,2022,1.072,2023,1.309,2024,1.142]],["title/interfaces/IRendererEventPayload.html",[40,0.003,328,1.551]],["body/interfaces/IRendererEventPayload.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.435,12,1.294,13,1.312,20,0.005,21,0.814,24,0.317,28,0.349,33,1.214,34,0.579,35,1.566,36,1.59,37,1.394,39,0.398,40,0.005,41,0.917,42,1.793,47,1.793,57,1.722,75,0.871,78,0.002,79,0.003,80,0.002,83,1.3,85,0.534,89,1.248,90,1.524,97,1.652,102,0.869,104,0.857,108,0.457,114,0.811,117,0.663,129,2.364,134,0.881,140,1.789,149,0.768,158,0.96,159,1.802,164,1.283,179,1.186,183,0.564,194,1.531,209,2.002,218,1.394,225,0.989,234,2.278,240,0.974,241,0.989,247,2.6,250,1.253,253,0.789,280,1.541,281,1.352,283,1.003,285,1.357,290,0.8,299,2.03,309,1.375,310,2.03,328,1.52,333,1.907,334,1.258,368,1.003,384,0.834,399,2.505,411,1.003,417,1.082,439,1.049,443,1.543,444,1.614,446,1.947,447,1.614,453,1.69,455,2.092,459,2.302,464,1.5,465,1.59,476,2.212,524,2.002,525,1.862,530,1.298,531,1.298,532,1.298,533,1.298,539,1.59,541,1.253,545,1.675,547,1.298,548,1.566,553,1.298,557,1.996,561,1.996,571,1.298,572,1.69,575,1.275,576,1.773,589,1.275,591,1.253,595,1.298,596,1.664,599,1.298,633,0.779,635,1.047,664,1.018,702,1.566,703,1.966,704,2.049,719,1.232,733,1.491,735,0.989,737,1.937,740,2.111,749,1.049,750,1.099,765,1.265,771,1.153,778,1.768,786,1.034,791,1.653,793,2.594,802,1.082,816,1.275,821,1.275,827,1.191,828,1.134,881,1.191,923,1.211,937,1.629,994,1.116,1047,1.232,1048,1.298,1049,1.298,1050,1.298,1052,2.312,1054,0.974,1056,1.049,1173,2.208,1188,2.349,1205,1.232,1206,1.232,1223,2.232,1234,1.253,1254,1.099,1256,1.773,1310,2.059,1317,1.59,1419,1.232,1431,2.797,1455,0.96,1592,1.211,1607,1.773,1608,0.946,1616,1.298,1632,1.275,1639,1.802,1649,1.232,1682,1.116,1750,1.298,1763,1.134,1794,1.298,1809,2.16,1899,0.492,1900,1.275,1901,1.321,1902,1.996,1903,1.566,1904,1.298,1905,1.298,1906,1.298,1907,1.066,1908,1.049,1909,2.432,1910,1.275,1911,1.253,1912,2.72,1913,1.275,1914,1.298,1915,1.134,1916,1.298,1917,1.298,1918,1.298,1919,1.773,1920,2.035,1921,1.153,1922,1.829,1923,3.202,1924,1.321,1925,1.894,1926,1.172,1927,2.432,1928,1.321,1929,2.032,1930,1.996,1931,1.996,1932,1.321,1933,1.996,1934,2.348,1935,1.894,1936,1.321,1937,1.134,1938,1.321,1939,1.232,1940,1.543,1941,1.191,1942,1.321,1943,1.321,1944,1.003,1945,1.321,1946,1.275,1947,1.927,1948,1.996,1949,1.298,1950,1.996,1951,1.321,1952,1.298,1953,1.321,1954,2.555,1955,1.321,1956,1.321,1957,1.321,1958,1.996,1959,1.275,1960,1.134,1961,1.298,1962,1.298,1963,1.321,1964,1.298,1965,2.032,1966,1.321,1967,1.298,1968,1.253,1969,1.321,1970,1.321,1971,1.996,1972,1.862,1973,1.298,1974,1.966,1975,1.321,1976,1.298,1977,1.298,1978,1.321,1979,1.321,1980,1.321,1981,1.298,1982,1.321,1983,1.116,1984,1.211,1985,1.298,1986,1.321,1987,1.321,1988,1.321,1989,1.321,1990,1.275,1991,1.275,1992,1.275,1993,1.321,1994,2.032,1995,2.73,1996,1.321,1997,1.298,1998,1.321,1999,1.321,2000,1.321,2001,1.321,2002,1.321,2003,1.664,2004,1.082,2005,1.321,2006,1.321,2007,1.894,2008,1.275,2009,1.375,2010,1.275,2011,1.321,2012,1.321,2013,1.894,2014,2.032,2015,1.321,2016,1.321,2017,2.548,2018,1.927,2019,2.269,2020,1.298,2021,1.253,2022,1.082,2023,1.321,2024,1.153]],["title/interfaces/IScale.html",[40,0.003,2141,2.282]],["body/interfaces/IScale.html",[3,0.15,4,0.14,5,0.14,10,0.299,11,0.359,12,0.72,13,0.524,17,1.305,19,1.96,20,0.005,21,0.865,22,1.4,24,0.365,28,0.221,34,0.682,39,0.374,40,0.005,41,0.838,42,0.929,47,0.929,75,1.061,78,0.002,79,0.003,80,0.002,85,1.362,95,1.449,97,1.533,108,0.867,110,1.64,117,1.37,124,1.985,126,1.677,132,2.72,134,0.805,140,1.991,161,2.131,164,1.358,175,1.908,178,2.528,179,0.731,183,0.664,192,1.249,222,1.584,225,1.719,227,1.554,245,4.209,269,1.533,280,2.44,281,1.035,285,1.646,309,0.769,326,2.233,334,1.713,336,1.146,337,1.645,368,1.744,379,4.335,441,3.204,576,1.645,763,1.5,764,2.001,765,1.879,775,3.018,777,2.72,778,0.916,780,3.617,802,1.881,841,2.468,884,3.431,1455,1.13,1490,2.753,1500,4.623,1599,2.382,1680,4.092,1682,1.314,1699,1.746,1718,2.528,1809,2.004,1899,0.578,1915,1.335,1919,2.004,1920,2.397,1944,3.189,2003,1.881,2022,1.881,2032,3.462,2035,2.43,2052,1.822,2053,1.614,2074,2.693,2075,2.693,2106,3.884,2139,3.647,2140,2.382,2141,4.15,2142,2.565,2144,4.771,2145,2.382,2146,2.382,2147,2.304,2148,2.468,2149,2.468,2150,2.468,2151,4.992,2152,4.704,2153,4.209,2154,1.146,2155,2.565,2156,2.304,2157,4.623,2158,2.565,2159,2.565,2160,6.135,2161,4.98,2162,4.841,2163,6.538,2164,3.299,2165,4.98,2166,4.98,2167,4.623,2168,3.115,2169,4.335,2170,4.335,2171,5.141,2172,5.038,2173,4.98,2174,3.404,2175,3.404,2176,5.175,2177,3.299,2178,3.299,2179,3.791,2180,3.791,2181,3.647,2182,3.299,2183,5.34,2184,3.791,2185,5.586,2186,3.299,2187,2.565,2188,2.565,2189,3.647,2190,2.565,2191,2.565,2192,2.565,2297,3.955,2298,4.147,2299,3.955,2300,3.817,2301,3.817,2302,3.817,2303,3.817,2304,3.817,2305,3.817,2306,3.817,2307,3.817,2308,3.817,2309,3.817,2310,3.817,2311,3.817]],["title/interfaces/ISeriesAccessors.html",[36,1.622,40,0.003]],["body/interfaces/ISeriesAccessors.html",[3,0.129,4,0.121,5,0.121,10,0.247,11,0.321,12,1.283,13,1.315,17,0.457,20,0.005,21,0.775,24,0.297,28,0.35,33,1.225,34,0.586,35,1.58,36,1.951,37,1.712,39,0.399,40,0.005,41,0.921,42,1.802,47,1.802,57,1.73,75,0.984,78,0.002,79,0.003,80,0.002,83,1.312,89,1.259,90,1.528,97,1.664,102,0.88,104,0.868,108,0.461,114,0.821,117,0.671,129,2.374,134,0.877,140,1.795,149,0.777,158,0.972,159,1.809,164,1.286,179,1.189,183,0.571,194,1.541,209,2.013,218,1.407,225,1,234,2.291,240,0.986,241,1,247,2.526,250,1.268,253,0.799,280,1.553,281,1.359,283,1.015,285,1.366,290,0.81,299,2.041,309,1.384,310,2.041,328,1,333,1.919,334,1.268,368,1.015,384,0.844,399,1.205,411,1.015,417,1.095,439,1.062,443,1.557,444,1.629,446,1.957,447,1.629,453,1.706,455,2.108,459,2.192,464,1.511,465,1.604,476,2.224,524,2.013,525,1.879,530,1.313,531,1.313,532,1.313,533,1.313,539,1.604,541,1.268,545,1.688,547,1.313,548,1.58,553,1.313,557,2.014,561,2.014,571,1.313,572,1.706,575,1.29,576,1.787,589,1.29,591,1.268,595,1.313,596,1.679,599,1.313,633,0.788,635,1.056,664,1.03,702,1.58,703,1.981,704,2.062,719,1.246,733,1.5,735,1,737,1.951,740,2.124,749,1.062,750,1.112,765,1.276,771,1.166,778,1.876,786,1.046,791,1.541,793,2.47,802,1.095,816,1.29,821,1.29,827,1.205,828,1.148,881,1.205,923,1.225,937,1.641,994,1.13,1047,1.246,1048,1.313,1049,1.313,1050,1.313,1052,2.326,1054,0.986,1056,1.062,1173,2.221,1188,2.363,1205,1.246,1206,1.246,1223,2.248,1234,1.268,1254,1.112,1256,1.789,1310,2.075,1317,1.604,1419,1.246,1431,2.607,1455,0.972,1592,1.225,1607,1.789,1608,0.958,1616,1.313,1632,1.29,1639,1.818,1649,1.246,1682,1.13,1750,1.313,1763,1.148,1794,1.313,1809,2.176,1899,0.497,1900,1.29,1901,1.337,1902,2.014,1903,1.58,1904,1.313,1905,1.313,1906,1.313,1907,1.078,1908,1.062,1909,2.45,1910,1.29,1911,1.268,1912,2.733,1913,1.29,1914,1.313,1915,1.148,1916,1.313,1917,1.313,1918,1.313,1919,1.789,1920,1.902,1921,1.166,1922,1.84,1923,3.213,1924,1.337,1925,1.912,1926,1.186,1927,2.45,1928,1.337,1929,2.051,1930,2.014,1931,2.014,1932,1.337,1933,2.014,1934,2.365,1935,1.912,1936,1.337,1937,1.148,1938,1.337,1939,1.246,1940,1.557,1941,1.205,1942,1.337,1943,1.337,1944,1.015,1945,1.337,1946,1.29,1947,1.945,1948,2.014,1949,1.313,1950,2.014,1951,1.337,1952,1.313,1953,1.337,1954,2.567,1955,1.337,1956,1.337,1957,1.337,1958,2.014,1959,1.29,1960,1.148,1961,1.313,1962,1.313,1963,1.337,1964,1.313,1965,2.051,1966,1.337,1967,1.313,1968,1.268,1969,1.337,1970,1.337,1971,2.014,1972,1.879,1973,1.313,1974,1.981,1975,1.337,1976,1.313,1977,1.313,1978,1.337,1979,1.337,1980,1.337,1981,1.313,1982,1.337,1983,1.13,1984,1.225,1985,1.313,1986,1.337,1987,1.337,1988,1.337,1989,1.337,1990,1.29,1991,1.29,1992,1.29,1993,1.337,1994,2.051,1995,2.747,1996,1.337,1997,1.313,1998,1.337,1999,1.337,2000,1.337,2001,1.337,2002,1.337,2003,1.679,2004,1.095,2005,1.337,2006,1.337,2007,1.912,2008,1.29,2009,1.387,2010,1.29,2011,1.337,2012,1.337,2013,1.912,2014,2.051,2015,1.337,2016,1.337,2017,2.286,2018,1.945,2019,2.286,2020,1.313,2021,1.268,2022,1.095,2023,1.337,2024,1.166,2218,1.765,2312,3.283]],["title/interfaces/ISetDomainEventPayload.html",[40,0.003,2021,1.966]],["body/interfaces/ISetDomainEventPayload.html",[3,0.129,4,0.121,5,0.121,10,0.248,11,0.321,12,1.284,13,1.315,17,0.458,20,0.005,21,0.775,24,0.297,28,0.35,33,1.227,34,0.587,35,1.583,36,1.606,37,1.409,39,0.399,40,0.005,41,0.921,42,1.804,47,1.804,57,1.731,75,0.878,78,0.002,79,0.003,80,0.002,83,1.314,89,1.261,90,1.528,97,1.666,102,0.881,104,0.869,108,0.462,114,0.822,117,0.672,129,2.375,134,0.878,140,1.795,149,0.779,158,0.973,159,1.81,164,1.286,179,1.19,183,0.572,194,1.542,209,2.014,218,1.409,225,1.002,234,2.292,240,0.988,241,1.002,247,2.528,250,1.27,253,0.8,280,1.554,281,1.36,283,1.017,285,1.367,290,0.811,299,2.043,309,1.385,310,2.043,328,1.002,333,1.921,334,1.269,368,1.017,384,0.845,399,1.207,411,1.017,417,1.097,439,1.064,443,1.559,444,1.631,446,1.959,447,1.631,453,1.708,455,2.11,459,2.194,464,1.512,465,1.606,476,2.226,524,2.014,525,1.882,530,1.316,531,1.316,532,1.316,533,1.316,539,1.606,541,1.27,545,1.69,547,1.316,548,1.583,553,1.316,557,2.017,561,2.017,571,1.316,572,1.708,575,1.293,576,1.789,589,1.293,591,1.27,595,1.316,596,1.682,599,1.316,633,0.789,635,1.058,664,1.032,702,1.583,703,1.983,704,2.064,719,1.249,733,1.501,735,1.002,737,1.954,740,2.126,749,1.064,750,1.114,765,1.278,771,1.169,778,1.779,786,1.048,791,1.542,793,2.472,802,1.097,816,1.293,821,1.293,827,1.207,828,1.15,881,1.207,923,1.228,937,1.643,994,1.132,1047,1.249,1048,1.316,1049,1.316,1050,1.316,1052,2.329,1054,0.988,1056,1.064,1173,2.224,1188,2.365,1205,1.249,1206,1.249,1223,2.251,1234,1.27,1254,1.114,1256,1.791,1310,2.077,1317,1.606,1419,1.249,1431,2.61,1455,0.973,1592,1.228,1607,1.791,1608,0.959,1616,1.316,1632,1.293,1639,1.821,1649,1.249,1682,1.132,1750,1.316,1763,1.15,1794,1.316,1809,2.178,1899,0.498,1900,1.293,1901,1.34,1902,2.017,1903,1.583,1904,1.316,1905,1.316,1906,1.316,1907,1.08,1908,1.064,1909,2.453,1910,1.293,1911,1.27,1912,2.735,1913,1.293,1914,1.316,1915,1.15,1916,1.316,1917,1.316,1918,1.316,1919,1.791,1920,1.903,1921,1.169,1922,1.842,1923,3.215,1924,1.34,1925,1.914,1926,1.188,1927,2.453,1928,1.34,1929,2.054,1930,2.017,1931,2.017,1932,1.34,1933,2.017,1934,2.368,1935,1.914,1936,1.34,1937,1.15,1938,1.34,1939,1.249,1940,1.559,1941,1.207,1942,1.34,1943,1.34,1944,1.017,1945,1.34,1946,1.293,1947,1.947,1948,2.017,1949,1.316,1950,2.017,1951,1.34,1952,1.316,1953,1.34,1954,2.569,1955,1.34,1956,1.34,1957,1.34,1958,2.017,1959,1.293,1960,1.15,1961,1.316,1962,1.316,1963,1.34,1964,1.316,1965,2.054,1966,1.34,1967,1.316,1968,1.27,1969,1.34,1970,1.34,1971,2.017,1972,1.882,1973,1.316,1974,1.983,1975,1.34,1976,1.316,1977,1.316,1978,1.34,1979,1.34,1980,1.34,1981,1.316,1982,1.34,1983,1.132,1984,1.228,1985,1.316,1986,1.34,1987,1.34,1988,1.34,1989,1.34,1990,1.293,1991,1.293,1992,1.293,1993,1.34,1994,2.054,1995,2.75,1996,1.34,1997,1.316,1998,1.34,1999,1.34,2000,1.34,2001,1.34,2002,1.34,2003,1.682,2004,1.097,2005,1.34,2006,1.34,2007,1.914,2008,1.293,2009,1.389,2010,1.293,2011,1.34,2012,1.34,2013,1.914,2014,2.054,2015,1.34,2016,1.34,2017,2.289,2018,1.947,2019,2.289,2020,1.316,2021,1.947,2022,1.682,2023,1.34,2024,1.169,2218,1.769,2313,3.289]],["title/interfaces/ISideIndicatorAccessors.html",[40,0.003,2314,3.57]],["body/interfaces/ISideIndicatorAccessors.html",[0,0.115,3,0.19,4,0.178,5,0.178,8,1.043,10,0.196,11,0.488,12,1.25,13,1.304,14,1.178,20,0.005,21,0.506,22,0.723,24,0.254,28,0.367,33,1.627,35,2.098,36,2.13,37,2.422,38,1.279,39,0.339,40,0.005,41,0.866,42,1.178,47,1.178,52,1.915,55,1.279,56,2.261,57,1.072,72,2.215,78,0.002,79,0.003,80,0.002,85,0.797,94,1.547,96,2.008,107,1.46,108,0.612,109,2.554,113,2.538,117,1.564,132,2.454,134,0.443,142,3.13,143,1.666,146,2.261,159,2.072,161,1.922,179,0.627,183,0.841,184,3.419,192,1.48,194,1.086,209,1.315,212,3.663,213,3.663,218,2.308,222,3.426,227,2.699,241,2.037,253,1.178,285,1.642,290,1.649,295,3.191,296,2.311,297,1.868,299,2.11,317,1.433,320,2.17,327,2.363,328,1.475,332,2.418,334,1.002,336,2.299,337,2.086,384,1.244,418,3.02,451,3.02,633,1.838,635,1.402,659,3.13,661,3.253,934,2.086,1054,1.454,1157,2.674,1165,3.058,1182,3.02,1183,3.02,1196,2.921,1197,3.02,1198,3.394,1254,2.594,1526,2.674,1607,1.72,1661,3.559,1665,4.777,1714,4.786,1725,3.02,1763,1.692,1818,2.674,1820,3.02,1899,0.734,1921,2.375,1923,2.858,1940,2.553,2009,1.334,2035,2.086,2090,2.832,2314,5.369,2315,3.757,2316,7.337,2317,3.13,2318,6.371,2319,6.371,2320,3.253,2321,4.915,2322,3.757,2323,4.17,2324,5.602,2325,4.915,2326,3.757,2327,3.757,2328,3.394,2329,3.394,2330,3.757,2331,3.757,2332,4.915,2333,4.915,2334,3.757,2335,3.757,2336,3.559,2337,3.13,2338,3.757,2339,4.915,2340,3.559,2341,3.757,2342,5.188,2343,3.757,2344,5.943,2345,3.394,2346,3.757,2347,3.757,2348,3.757,2349,5.943,2350,3.757,2351,3.757,2352,3.757,2353,3.757,2354,3.757,2355,3.757,2356,3.757,2357,3.757,2358,3.757,2359,3.757,2360,3.757,2361,3.757,2362,3.559,2363,3.13,2364,3.757,2365,3.757,2366,3.253,2367,3.757,2368,3.757,2369,3.559,2370,3.757]],["title/interfaces/ISideIndicatorDataAccessors.html",[40,0.003,2318,3.743]],["body/interfaces/ISideIndicatorDataAccessors.html",[0,0.116,3,0.191,4,0.179,5,0.179,8,1.049,10,0.197,11,0.489,12,1.214,13,1.192,14,1.184,20,0.005,21,0.509,22,0.727,24,0.185,28,0.367,33,2.014,35,2.41,36,2.138,37,2.426,38,1.286,39,0.34,40,0.005,41,0.936,42,1.184,47,1.184,52,1.92,55,1.286,56,2.274,57,1.077,72,2.226,78,0.002,79,0.003,80,0.002,85,0.801,94,1.55,96,2.019,107,1.465,108,0.615,109,2.561,113,2.547,117,1.568,132,2.463,134,0.446,142,3.146,143,1.675,146,2.274,159,2.019,161,1.929,179,0.63,183,0.846,184,3.431,192,1.485,194,1.092,209,1.322,212,3.67,213,3.67,218,2.313,222,3.433,227,2.701,241,2.34,253,1.184,285,1.646,290,1.655,295,3.203,296,2.323,297,1.875,299,2.116,317,1.44,320,2.181,327,2.375,328,1.483,332,2.43,334,1.007,336,2.306,337,2.097,384,1.251,418,3.036,451,3.036,633,1.843,635,1.408,659,3.146,661,3.271,934,2.097,1054,1.461,1157,2.688,1165,3.513,1182,3.036,1183,3.036,1196,2.937,1197,3.036,1198,3.412,1254,2.601,1526,2.688,1607,1.729,1661,3.578,1665,4.79,1714,4.767,1725,3.036,1763,1.701,1818,2.688,1820,3.036,1899,0.737,1921,2.384,1923,2.866,1940,2.559,2009,1.849,2035,2.097,2090,2.847,2314,4.705,2315,3.777,2316,7.303,2317,3.146,2318,6.085,2319,5.645,2320,3.271,2321,4.933,2322,3.777,2323,4.186,2324,6.148,2325,4.933,2326,3.777,2327,3.777,2328,3.412,2329,3.412,2330,3.777,2331,3.777,2332,4.933,2333,4.933,2334,3.777,2335,3.777,2336,3.578,2337,3.146,2338,3.777,2339,4.933,2340,3.578,2341,3.777,2342,5.207,2343,3.777,2344,5.959,2345,3.412,2346,3.777,2347,3.777,2348,3.777,2349,5.959,2350,3.777,2351,3.777,2352,3.777,2353,3.777,2354,3.777,2355,3.777,2356,3.777,2357,3.777,2358,3.777,2359,3.777,2360,3.777,2361,3.777,2362,3.578,2363,3.146,2364,3.777,2365,3.777,2366,3.271,2367,3.777,2368,3.777,2369,3.578,2370,3.777]],["title/interfaces/ISideIndicatorSeriesAccessors.html",[40,0.003,2319,3.743]],["body/interfaces/ISideIndicatorSeriesAccessors.html",[0,0.113,3,0.183,4,0.172,5,0.172,8,1.008,10,0.189,11,0.479,12,1.185,13,1.217,14,1.139,20,0.005,21,0.489,22,1.216,24,0.309,28,0.363,33,1.589,35,2.049,36,2.396,37,2.742,38,1.237,39,0.335,40,0.005,41,0.921,42,1.139,47,1.139,52,2.217,55,1.237,56,2.186,57,1.036,72,2.141,78,0.002,79,0.003,80,0.002,85,0.77,94,1.529,96,1.941,107,1.642,108,0.745,109,2.508,113,2.479,117,1.536,132,2.397,134,0.429,142,3.026,143,1.61,146,2.186,159,2,161,1.878,179,0.606,183,0.813,184,3.339,192,1.445,194,1.05,209,1.272,212,3.985,213,3.985,218,2.274,222,3.376,227,2.683,241,2.292,253,1.139,285,1.618,290,1.611,295,3.117,296,2.234,297,1.825,299,2.072,317,1.385,320,2.098,327,2.284,328,1.426,332,2.337,334,0.969,336,2.258,337,2.016,384,1.203,418,2.92,451,2.92,633,1.805,635,1.37,659,4.222,661,4.388,934,2.016,1054,1.405,1157,2.585,1165,3.44,1182,2.92,1183,2.92,1196,2.824,1197,2.92,1198,3.282,1254,2.548,1526,2.585,1607,1.663,1661,4.801,1665,4.692,1714,4.805,1725,2.92,1763,1.636,1818,2.585,1820,2.92,1899,0.709,1921,2.32,1923,3.309,1940,2.517,2009,1.29,2035,2.016,2090,2.738,2314,4.579,2315,3.632,2316,7.372,2317,3.026,2318,5.529,2319,5.983,2320,3.145,2321,4.801,2322,3.632,2323,4.074,2324,5.882,2325,6.293,2326,5.068,2327,6.316,2328,3.282,2329,3.282,2330,3.632,2331,3.632,2332,4.801,2333,4.801,2334,3.632,2335,3.632,2336,3.441,2337,3.026,2338,3.632,2339,4.801,2340,3.441,2341,3.632,2342,5.068,2343,3.632,2344,5.837,2345,3.282,2346,3.632,2347,3.632,2348,3.632,2349,5.837,2350,3.632,2351,3.632,2352,3.632,2353,3.632,2354,3.632,2355,3.632,2356,3.632,2357,3.632,2358,3.632,2359,3.632,2360,3.632,2361,3.632,2362,3.441,2363,3.026,2364,3.632,2365,3.632,2366,3.145,2367,3.632,2368,3.632,2369,3.441,2370,3.632]],["title/interfaces/ISimpleThresholdZone.html",[40,0.003,2371,3.951]],["body/interfaces/ISimpleThresholdZone.html",[3,0.279,4,0.262,5,0.262,10,0.288,11,0.547,20,0.005,22,1.43,24,0.35,28,0.279,39,0.361,40,0.004,78,0.004,79,0.004,80,0.004,85,1.174,134,0.876,164,1.365,212,4.341,213,4.317,281,1.691,309,1.437,368,2.205,417,3.265,786,2.272,1607,3.051,1725,5.358,1899,1.08,2007,3.499,2168,5.09,2371,6.666,2372,5.899,2373,7.105,2374,7.694,2375,6.387,2376,5.534,2377,5.534,2378,5.534,2379,5.534]],["title/interfaces/ISpark.html",[40,0.003,756,3.292]],["body/interfaces/ISpark.html",[0,0.129,3,0.224,4,0.21,5,0.21,8,1.232,10,0.231,11,0.476,13,1.315,20,0.005,21,0.782,22,1.32,24,0.335,28,0.293,34,1.021,39,0.375,40,0.005,75,0.819,78,0.003,79,0.004,80,0.003,85,0.941,90,1.664,94,1.335,108,0.809,124,1.532,134,0.915,158,2.213,164,0.785,175,1.507,179,0.741,183,0.994,192,1.266,194,2.057,234,2.312,279,3.569,280,1.895,283,2.576,333,2.09,334,1.829,394,3.075,411,1.768,432,4.374,459,1.692,464,2.262,482,3.285,488,1.968,572,2.533,576,2.43,597,2.032,730,4.834,731,3.568,732,3.843,733,1.249,734,5.197,735,1.742,736,4.01,737,2.654,738,4.01,739,4.01,740,2.576,741,4.01,749,1.85,750,3.246,751,2.997,752,3.843,753,3.843,754,3.843,755,3.697,756,5.386,757,3.697,758,4.374,759,3.977,760,5.599,761,5.243,762,4.834,763,2.938,764,4.631,765,2.24,766,4.01,767,4.01,768,3.451,769,3.568,770,2.671,771,2.032,772,3.697,773,2.73,774,3.697,775,2.329,776,2.563,777,2.099,778,1.373,779,4.665,780,3.649,781,2.464,782,3.697,783,3.843,784,3.697,785,3.697,786,1.822,787,4.834,788,4.834,789,4.834,790,4.834,791,1.283,792,3.697,793,1.907,794,3.158,795,4.01,796,4.01,797,2.997,798,3.697,1899,0.866]],["title/interfaces/ISparkChartAssistChart.html",[40,0.003,757,3.292]],["body/interfaces/ISparkChartAssistChart.html",[0,0.131,3,0.229,4,0.215,5,0.215,8,1.263,10,0.237,11,0.484,13,1.299,20,0.005,21,0.794,24,0.32,28,0.298,34,1.046,39,0.377,40,0.005,75,0.839,78,0.003,79,0.004,80,0.003,90,1.661,94,1.356,108,0.817,124,1.57,134,0.904,158,2.248,164,0.804,175,1.531,179,0.759,183,1.018,192,1.297,194,2.001,234,2.349,279,3.626,280,1.926,283,2.607,333,2.123,334,1.846,394,3.15,411,1.812,432,3.427,459,1.734,464,2.279,482,3.337,488,2.016,572,2.573,576,2.459,597,2.082,730,4.911,731,3.655,732,3.937,733,1.28,734,5.259,735,1.785,736,4.108,737,2.686,738,4.108,739,4.108,740,2.349,741,4.108,749,1.895,750,3.265,751,3.071,752,3.937,753,3.937,754,3.937,755,3.788,756,4.911,757,4.911,758,5.405,759,3.626,760,5.105,761,4.108,762,3.788,763,2.303,764,3.071,765,1.485,766,4.108,767,4.108,768,3.536,769,3.655,770,2.737,771,2.082,772,3.788,773,2.797,774,3.788,775,2.386,776,2.626,777,2.151,778,1.406,779,4.739,780,3.707,781,2.524,782,3.788,783,3.937,784,3.788,785,3.788,786,1.867,787,4.911,788,4.911,789,4.911,790,4.911,791,1.314,792,3.788,793,1.954,794,3.236,795,4.108,796,4.108,797,3.071,798,3.788,1899,0.888]],["title/interfaces/IStackMetadata.html",[40,0.003,2195,4.212]],["body/interfaces/IStackMetadata.html",[3,0.304,4,0.285,5,0.285,10,0.313,11,0.575,20,0.005,24,0.343,39,0.354,40,0.005,78,0.004,79,0.005,80,0.004,140,1.844,164,1.391,212,4.156,213,4.156,404,3.622,448,6.018,1899,1.175,2193,6.947,2194,6.947,2195,7.468]],["title/interfaces/IStartEndRangeAccessors.html",[40,0.003,2292,3.422]],["body/interfaces/IStartEndRangeAccessors.html",[0,0.122,3,0.276,4,0.259,5,0.259,7,2.722,8,1.519,10,0.285,11,0.543,12,1.089,13,1.171,14,1.715,20,0.005,24,0.324,28,0.276,33,2.537,34,1.523,35,3.063,36,2.717,37,2.563,38,1.862,39,0.388,40,0.005,41,1.122,52,1.762,53,2.545,78,0.004,79,0.004,80,0.004,108,0.645,200,4.003,205,4.807,206,5.209,212,4.028,213,4.028,214,3.159,331,4.361,1889,4.556,1891,4.556,1893,4.556,1895,4.556,1896,4.736,1899,1.068,2291,4.942,2292,5.731,2293,4.736,2294,4.736]],["title/interfaces/IStatusAccessors.html",[40,0.003,2380,3.743]],["body/interfaces/IStatusAccessors.html",[0,0.124,3,0.281,4,0.264,5,0.264,7,2.775,8,1.548,10,0.29,11,0.55,12,1.252,13,0.986,20,0.005,24,0.273,28,0.362,33,2.1,38,1.899,39,0.362,40,0.004,41,1.046,54,2.595,57,1.591,78,0.004,79,0.004,80,0.004,94,1.713,96,3.58,159,1.859,192,1.91,198,4.483,201,6.446,203,5.383,205,4.523,210,3.589,255,3.157,417,2.878,1899,1.089,2380,6.799,2381,5.945,2382,7.732,2383,5.283,2384,5.945,2385,5.945,2386,5.945,2387,5.945,2388,5.945,2389,5.945,2390,5.945]],["title/interfaces/IStatusDataAccessors.html",[40,0.003,2382,3.951]],["body/interfaces/IStatusDataAccessors.html",[0,0.124,3,0.281,4,0.264,5,0.264,7,2.775,8,1.548,10,0.29,11,0.55,12,1.101,13,0.986,20,0.005,24,0.273,28,0.362,33,2.334,38,1.899,39,0.362,40,0.004,41,1.046,54,2.595,57,1.591,78,0.004,79,0.004,80,0.004,94,1.713,96,3.58,159,1.859,192,1.91,198,4.483,201,6.215,203,5.77,205,4.523,210,3.589,255,3.157,417,3.272,1899,1.089,2380,6.344,2381,5.945,2382,7.615,2383,5.283,2384,5.945,2385,5.945,2386,5.945,2387,5.945,2388,5.945,2389,5.945,2390,5.945]],["title/interfaces/ITextOverflowArgs.html",[40,0.003,2046,2.812]],["body/interfaces/ITextOverflowArgs.html",[0,0.057,3,0.129,4,0.121,5,0.121,10,0.133,11,0.321,20,0.005,21,0.344,24,0.297,28,0.319,39,0.36,40,0.005,41,0.57,52,1.26,75,0.471,78,0.002,79,0.003,80,0.002,83,2.578,89,1.26,95,3.557,100,1.641,101,3.537,102,1.35,103,3.461,104,1.619,106,3.723,108,0.745,109,2.607,110,1.802,112,3.199,113,2.968,114,2.035,122,2.459,133,3.652,134,0.629,137,4.02,140,1.852,143,2.69,149,0.778,150,2.516,152,1.68,153,2.782,154,1.814,155,3.504,156,1.814,157,1.814,158,2.033,160,1.814,161,1.975,164,1.393,166,2.709,167,3.984,168,1.814,175,1.942,178,3.079,179,0.426,180,2.516,181,3.694,182,2.709,194,1.754,214,1.472,253,2.258,254,1.535,281,0.603,285,1.366,297,1.712,309,1.828,310,2.243,317,0.972,334,1.685,384,2.009,404,3.209,446,0.868,464,1.243,488,1.13,489,2.213,524,1.665,529,1.722,539,2.89,545,2.499,548,1.923,552,3.279,580,1.247,592,2.99,593,1.766,597,1.167,598,1.722,626,1.415,633,2.177,635,1.947,664,1.581,702,2.636,703,1.982,704,1.513,708,2.576,718,1.363,733,1.1,735,1.535,759,1.568,770,2.862,773,1.568,775,2.798,776,1.472,777,2.249,791,0.737,804,1.722,812,3.694,934,3.368,1010,1.641,1054,2.063,1133,1.814,1150,1.722,1165,3.576,1190,1.766,1317,1.605,1358,1.946,1441,3.431,1532,2.782,1533,3.794,1534,1.814,1535,1.814,1539,1.814,1543,1.814,1547,1.814,1550,1.814,1655,1.814,1657,1.814,1658,1.814,1659,1.814,1662,5.587,1667,2.64,1677,1.814,1684,1.814,1690,2.782,1694,1.814,1699,2.803,1700,1.641,1703,1.722,1704,1.766,1708,1.766,1714,2.925,1717,1.766,1718,2.746,1782,2.782,1783,1.814,1821,1.314,1868,1.722,1869,1.766,1870,1.766,1871,1.766,1872,1.766,1873,2.709,1874,1.641,1875,1.766,1899,0.498,1903,2.454,1920,1.672,1922,0.88,1954,1.079,2009,2.243,2025,1.814,2026,4.208,2027,2.405,2028,4.318,2029,1.866,2030,2.861,2031,2.803,2032,3.923,2033,2.516,2034,3.883,2035,3.192,2036,3.209,2037,3.143,2038,2.782,2039,5.077,2040,2.861,2041,3.902,2042,2.782,2043,1.866,2044,1.443,2045,1.814,2046,3.384,2047,3.902,2048,3.902,2049,2.782,2050,1.814,2051,1.814,2052,2.925,2053,2.59,2054,1.814,2055,1.866,2056,1.766,2057,1.866,2058,1.814,2059,1.814,2060,1.866,2061,1.866,2062,1.866,2063,1.766,2064,1.568,2065,1.866,2066,2.709,2067,1.866,2068,1.603,2069,1.866,2070,1.814,2071,2.709,2072,2.861,2073,2.861,2074,2.405,2075,2.405,2076,1.866,2077,1.814,2078,1.814,2079,1.866,2080,1.866]],["title/interfaces/ITickLabelConfig.html",[40,0.003,166,2.738]],["body/interfaces/ITickLabelConfig.html",[0,0.055,3,0.126,4,0.118,5,0.118,10,0.129,11,0.315,20,0.005,21,0.335,22,1.014,24,0.294,28,0.316,39,0.358,40,0.005,41,0.559,52,1.236,75,0.708,78,0.002,79,0.002,80,0.002,83,2.57,85,0.528,89,1.236,95,3.54,100,1.601,101,3.498,102,1.325,103,3.423,104,1.595,106,3.691,108,0.739,109,2.582,110,1.786,112,3.274,113,2.939,114,2.083,122,2.413,133,3.617,134,0.621,137,3.994,140,1.842,143,2.664,149,0.759,150,2.469,152,1.64,153,2.731,154,1.771,155,3.734,156,1.771,157,1.771,158,2.007,160,1.771,161,1.95,164,1.391,166,3.245,167,3.94,168,3.746,175,1.935,178,3.04,179,0.415,180,3.387,181,4.339,182,3.245,194,1.81,214,1.437,253,2.269,254,1.498,281,0.907,285,1.349,297,1.687,309,1.817,310,2.223,317,0.949,334,1.67,384,1.99,404,3.169,446,0.847,464,1.22,488,1.103,489,2.172,524,1.64,529,1.681,539,2.873,545,2.485,548,1.894,552,3.238,580,1.877,592,2.946,593,1.724,597,1.139,598,1.681,626,1.381,633,2.165,635,1.956,664,1.552,702,2.615,703,1.952,704,1.485,708,2.529,718,1.33,733,1.08,735,1.507,759,2.36,770,2.819,773,1.531,775,2.763,776,1.437,777,2.215,791,0.719,804,2.592,812,3.647,934,3.336,1010,1.601,1054,2.037,1133,2.731,1150,1.681,1165,3.542,1190,1.724,1317,1.575,1358,1.91,1441,3.387,1532,2.731,1533,3.746,1534,1.771,1535,1.771,1539,1.771,1543,1.771,1547,1.771,1550,1.771,1655,1.771,1657,1.771,1658,1.771,1659,1.771,1662,5.575,1667,2.592,1677,1.771,1684,1.771,1690,2.731,1694,1.771,1699,2.761,1700,1.601,1703,1.681,1704,1.724,1708,1.724,1714,3.238,1717,1.724,1718,3.04,1782,2.731,1783,1.771,1821,1.978,1868,1.681,1869,1.724,1870,1.724,1871,1.724,1872,1.724,1873,2.659,1874,1.601,1875,1.724,1899,0.486,1903,2.43,1920,1.65,1922,0.859,1954,1.053,2009,2.223,2025,1.771,2026,4.162,2027,2.881,2028,4.276,2029,1.821,2030,2.808,2031,2.761,2032,3.892,2033,2.469,2034,3.841,2035,3.336,2036,3.169,2037,3.103,2038,2.731,2039,5.046,2040,2.808,2041,3.852,2042,2.731,2043,1.821,2044,1.409,2045,1.771,2046,2.731,2047,1.821,2048,1.821,2049,3.746,2050,1.771,2051,1.771,2052,3.238,2053,2.867,2054,2.731,2055,2.808,2056,2.659,2057,2.808,2058,2.731,2059,2.731,2060,2.808,2061,3.852,2062,1.821,2063,1.724,2064,1.531,2065,1.821,2066,2.659,2067,1.821,2068,1.565,2069,1.821,2070,1.771,2071,2.659,2072,2.808,2073,2.808,2074,2.36,2075,2.36,2076,1.821,2077,1.771,2078,1.771,2079,1.821,2080,1.821]],["title/interfaces/ITooltipNode.html",[40,0.003,1314,4.212]],["body/interfaces/ITooltipNode.html",[0,0.077,3,0.174,4,0.163,5,0.163,8,0.959,10,0.254,11,0.401,13,0.865,17,1.019,20,0.005,24,0.239,28,0.374,38,1.175,39,0.174,40,0.002,41,0.713,42,1.533,47,1.533,54,1.606,55,2.571,75,1.14,78,0.002,79,0.003,80,0.002,90,1.31,94,1.5,109,1.484,110,1.985,112,1.748,114,1.112,124,1.96,126,1.954,134,0.865,146,2.944,161,2.288,164,1.231,179,0.576,192,1.859,227,2.659,234,3.049,240,1.336,297,2.224,308,3.119,309,1.475,310,1.226,317,1.317,334,1.304,337,1.917,435,4.28,437,4.235,452,3.119,476,1.892,477,2.768,487,2.457,488,1.531,491,2.775,493,2.685,496,2.275,511,2.275,519,3.579,524,1.209,580,1.689,581,2.775,583,2.457,584,2.457,607,3.571,626,1.917,633,1.512,635,1.322,725,3.271,740,1.376,765,1.597,800,2.876,825,3.742,856,4.235,857,4.418,864,4.418,867,4.418,873,4.418,882,3.271,890,3.119,909,2.99,937,1.192,959,5.069,991,3.271,1030,5.379,1139,3.68,1195,3.453,1224,2.99,1235,3.271,1259,6.176,1265,3.453,1269,6.35,1283,3.985,1284,3.985,1285,3.985,1286,3.985,1287,3.985,1292,3.985,1293,3.68,1297,5.645,1298,3.985,1300,3.985,1301,5.645,1302,3.985,1303,8.035,1304,6.555,1305,5.645,1306,3.985,1307,3.985,1308,3.453,1309,3.271,1310,2.479,1311,3.985,1312,6.584,1313,3.68,1314,6.053,1315,3.985,1316,3.985,1317,1.417,1318,3.985,1319,3.985,1320,3.985,1321,3.985,1322,3.985,1323,3.985,1324,3.985,1325,5.645,1326,3.985,1327,3.985,1328,3.985,1329,3.985,1330,3.985,1331,3.985,1332,3.985,1333,3.68,1334,3.985,1335,5.645,1336,5.645,1337,5.213,1338,5.645,1339,5.645,1340,3.985,1341,5.645,1342,3.985,1343,3.985,1344,6.555,1345,3.985,1346,3.985,1347,5.645,1348,3.985,1349,3.985,1350,5.645,1351,3.985,1352,6.555,1353,5.645,1354,3.985,1355,3.985,1356,3.985,1357,3.985,1358,2.434,1359,3.985,1360,2.775,1361,3.985,1362,3.985,1363,7.129,1364,3.985,1365,3.985,1366,5.645,1367,3.985,1368,3.985,1369,3.985,1370,3.985,1371,3.68,1372,3.985,1373,3.453,1374,3.985,1375,3.985,1376,3.985,1377,3.985,1378,3.985,1379,3.985,1380,3.985,1381,3.985,1382,3.985,1383,3.985,1384,3.985,1385,5.645,1386,5.645,1387,5.645,1388,6.555,1389,3.985,1390,3.985,1391,3.985,1392,3.68,1393,3.985,1394,3.68,1395,2.99,1396,3.985,1397,3.985,1398,5.645,1399,3.985,1400,3.985,1401,3.985,1402,3.985,1403,3.985,1404,3.985,1405,3.985,1406,3.985,1407,3.985,1408,3.985,1409,3.985,1410,3.985,1411,3.985,1412,3.985,1413,3.985,1414,3.985,1899,0.674]],["title/interfaces/ITooltipPosition.html",[40,0.003,1433,3.951]],["body/interfaces/ITooltipPosition.html",[0,0.076,3,0.172,4,0.162,5,0.162,10,0.178,11,0.398,12,1.01,17,0.612,20,0.005,24,0.167,28,0.369,34,0.785,39,0.327,40,0.002,41,0.822,42,1.768,47,1.768,55,1.921,57,0.973,78,0.002,79,0.003,80,0.002,85,0.723,90,1.028,94,1.631,107,0.96,109,2.789,110,1.851,112,3.111,113,2.372,114,1.099,117,1.276,129,1.822,134,0.403,144,2.053,149,1.479,161,1.796,164,0.998,179,0.809,192,1.609,197,2.954,212,2.641,213,3.346,227,2.653,234,1.359,247,1.796,255,1.931,281,1.146,283,1.932,290,1.084,297,2.212,317,1.301,320,1.97,333,1.228,334,1.798,336,1.876,404,2.918,411,1.932,435,5.343,436,2.363,437,2.954,438,3.411,439,2.021,440,3.411,441,4.495,442,3.411,443,1.932,444,1.422,451,2.742,452,3.082,453,2.681,455,1.512,456,4.039,458,4.849,459,1.849,460,3.411,463,3.231,465,1.99,469,3.411,476,1.876,511,2.248,524,1.194,572,1.489,576,1.822,580,1.669,581,2.742,583,2.427,584,2.427,586,3.411,587,2.652,596,2.64,597,1.562,607,3.049,633,1.055,635,0.922,663,2.363,672,3.717,740,1.359,749,1.422,758,4.63,763,2.856,797,2.304,819,2.145,879,3.082,881,1.613,923,1.641,937,2.395,1124,2.742,1125,2.742,1134,6.937,1146,3.411,1147,4.039,1148,3.411,1154,3.411,1155,3.411,1173,1.422,1174,2.571,1184,3.411,1185,3.411,1186,3.082,1188,2.501,1201,4.885,1202,3.082,1207,3.231,1219,4.593,1220,3.231,1221,2.954,1222,3.231,1223,1.613,1224,2.954,1229,3.231,1231,3.411,1242,4.849,1243,3.411,1244,3.411,1245,3.411,1251,3.411,1269,6.006,1310,2.832,1415,3.636,1418,5.597,1419,1.669,1428,7.394,1429,3.411,1430,5.169,1431,2.372,1432,4.593,1433,6.743,1434,6.918,1435,3.636,1436,3.636,1437,3.411,1438,5.169,1439,5.597,1440,3.938,1441,2.195,1442,3.938,1443,6.548,1444,6.548,1445,6.548,1446,6.548,1447,6.489,1448,5.597,1449,3.938,1450,3.938,1451,5.597,1452,3.938,1453,3.938,1454,3.938,1455,1.301,1456,3.938,1457,6.512,1458,3.938,1459,3.938,1460,3.938,1461,5.096,1462,5.641,1463,3.938,1464,3.938,1465,3.938,1466,3.938,1467,3.938,1468,3.411,1469,3.411,1470,5.597,1471,3.938,1472,3.938,1473,3.411,1474,3.938,1475,3.938,1476,3.938,1477,6.548,1478,3.938,1479,3.938,1480,3.938,1481,3.938,1482,3.938,1483,3.938,1484,3.938,1485,3.938,1486,3.938,1487,3.938,1488,3.938,1489,3.938,1490,2.145,1491,3.231,1492,3.938,1493,3.636,1494,3.938,1495,3.938,1496,3.938,1497,3.938,1498,3.938,1499,3.938,1500,2.742,1501,3.411,1502,2.842,1503,3.411,1504,3.411,1505,5.597,1506,3.636,1507,3.231,1508,3.938,1509,3.938,1510,3.938,1511,3.938,1899,0.666]],["title/interfaces/IValueProvider.html",[40,0.003,1052,1.725]],["body/interfaces/IValueProvider.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.318,12,1.282,13,1.312,17,0.695,19,0.769,20,0.005,21,0.814,22,0.485,24,0.308,28,0.349,33,1.215,34,0.58,35,1.567,36,1.59,37,1.395,39,0.398,40,0.005,41,0.917,42,1.793,47,1.793,57,1.722,75,0.978,78,0.002,79,0.003,80,0.002,83,1.301,89,1.248,90,1.524,97,1.652,102,0.87,104,0.858,108,0.457,114,0.812,117,0.663,129,2.364,134,0.881,140,1.789,149,0.769,158,0.961,159,1.803,164,1.283,175,1.006,179,1.199,183,0.564,194,1.532,209,2.002,218,1.395,225,0.989,234,2.279,240,0.975,241,0.989,247,2.519,250,1.254,253,0.79,269,1.356,280,1.542,281,1.352,283,1.004,285,1.358,290,0.801,299,2.031,309,1.376,310,2.031,328,0.989,333,1.908,334,1.259,368,1.004,384,0.834,399,1.192,411,1.004,417,1.083,439,1.05,443,1.544,444,1.615,446,1.947,447,1.615,453,1.691,455,2.093,459,2.181,464,1.5,465,1.59,476,2.213,524,2.002,525,1.863,530,1.299,531,1.299,532,1.299,533,1.299,539,1.59,541,1.254,545,1.676,547,1.299,548,1.567,553,1.299,557,1.997,561,1.997,571,1.299,572,1.691,575,1.276,576,1.774,589,1.276,591,1.254,595,1.299,596,1.665,599,1.299,633,0.779,635,1.047,664,1.019,702,1.567,703,1.967,704,2.05,719,1.232,733,1.491,735,0.989,737,1.938,740,2.111,749,1.05,750,1.1,765,1.265,771,1.153,778,1.769,786,1.034,791,1.532,793,2.458,802,1.083,816,1.276,821,1.276,827,1.192,828,1.135,881,1.192,923,1.212,937,1.63,994,1.117,1047,1.232,1048,1.299,1049,1.299,1050,1.299,1052,2.496,1054,0.975,1056,1.05,1173,2.208,1188,2.349,1205,1.232,1206,1.232,1223,2.233,1234,1.254,1254,1.1,1256,1.773,1310,2.06,1317,1.59,1419,1.232,1431,2.592,1455,0.961,1592,1.212,1607,1.773,1608,0.947,1616,1.299,1632,1.276,1639,1.803,1649,1.232,1682,1.117,1750,1.299,1763,1.135,1794,1.299,1809,2.161,1899,0.492,1900,1.276,1901,1.322,1902,1.997,1903,1.567,1904,1.299,1905,1.299,1906,1.299,1907,1.066,1908,1.05,1909,2.433,1910,1.276,1911,1.254,1912,2.72,1913,1.276,1914,1.299,1915,1.135,1916,1.299,1917,1.299,1918,1.299,1919,1.773,1920,1.972,1921,1.153,1922,1.829,1923,3.203,1924,1.322,1925,1.895,1926,1.172,1927,2.433,1928,1.322,1929,2.033,1930,1.997,1931,1.997,1932,1.322,1933,1.997,1934,2.349,1935,1.895,1936,1.322,1937,1.135,1938,1.322,1939,1.232,1940,1.544,1941,1.192,1942,1.322,1943,1.322,1944,1.004,1945,1.322,1946,1.276,1947,1.928,1948,1.997,1949,1.299,1950,1.997,1951,1.322,1952,1.299,1953,1.322,1954,2.555,1955,1.322,1956,1.322,1957,1.322,1958,1.997,1959,1.276,1960,1.135,1961,1.299,1962,1.299,1963,1.322,1964,1.299,1965,2.033,1966,1.322,1967,1.299,1968,1.254,1969,1.322,1970,1.322,1971,1.997,1972,1.863,1973,1.299,1974,1.967,1975,1.322,1976,1.299,1977,1.299,1978,1.322,1979,1.322,1980,1.322,1981,1.299,1982,1.322,1983,1.117,1984,1.212,1985,1.299,1986,1.322,1987,1.322,1988,1.322,1989,1.322,1990,1.276,1991,1.276,1992,1.276,1993,1.322,1994,2.033,1995,2.731,1996,1.322,1997,1.299,1998,1.322,1999,1.322,2000,1.322,2001,1.322,2002,1.322,2003,1.665,2004,1.083,2005,1.322,2006,1.322,2007,1.895,2008,1.276,2009,1.375,2010,1.276,2011,1.322,2012,1.322,2013,1.895,2014,2.033,2015,1.322,2016,1.322,2017,2.27,2018,1.928,2019,2.27,2020,1.299,2021,1.254,2022,1.083,2023,2.033,2024,2.426,2391,3.246,2392,2.519,2393,3.246]],["title/interfaces/IValueThicknessAccessors.html",[40,0.003,2293,3.422]],["body/interfaces/IValueThicknessAccessors.html",[0,0.122,3,0.276,4,0.259,5,0.259,7,2.722,8,1.519,10,0.285,11,0.543,12,1.089,13,1.171,14,1.715,20,0.005,24,0.324,28,0.276,33,2.537,34,1.523,35,3.063,36,2.717,37,2.563,38,1.862,39,0.388,40,0.005,41,1.122,52,1.762,53,2.545,78,0.004,79,0.004,80,0.004,108,0.873,200,4.003,205,4.807,206,5.209,212,2.979,213,2.979,214,4.271,331,4.361,1889,4.556,1891,4.556,1893,4.556,1895,4.556,1896,4.736,1899,1.068,2291,4.942,2292,4.736,2293,5.731,2294,4.736]],["title/interfaces/IXYDataAccessors.html",[40,0.003,2258,3.422]],["body/interfaces/IXYDataAccessors.html",[0,0.12,3,0.273,4,0.256,5,0.256,7,2.687,8,1.499,10,0.281,11,0.539,12,1.08,17,0.969,20,0.005,24,0.321,28,0.273,33,2.475,34,1.511,38,1.839,39,0.331,40,0.005,42,2.435,47,2.435,57,1.873,60,4.676,62,4.676,75,1.212,78,0.003,79,0.004,80,0.003,94,1.243,107,1.52,108,0.869,134,0.775,159,1.499,216,3.741,241,2.891,778,2.031,781,3.646,1151,3.475,1883,5.757,1899,1.054,1972,2.597,1974,2.737,2154,2.541,2172,5.102,2218,3.741,2258,6.129,2259,4.676,2262,4.95,2263,4.95,2323,4.341,2394,7.582,2395,8.501,2396,5.757]],["title/interfaces/IXYGridConfig.html",[40,0.003,2066,2.738]],["body/interfaces/IXYGridConfig.html",[0,0.056,3,0.127,4,0.119,5,0.119,10,0.131,11,0.317,20,0.005,21,0.338,24,0.279,28,0.317,39,0.358,40,0.005,41,0.687,52,1.245,75,0.463,78,0.002,79,0.003,80,0.002,83,2.573,85,0.532,89,1.245,95,3.65,100,3.403,101,3.512,102,1.334,103,3.437,104,1.603,106,4.003,108,0.765,109,2.591,110,1.792,112,3.181,113,2.95,114,2.024,122,2.43,133,3.781,134,0.624,137,4.003,140,1.89,143,2.674,149,1.179,150,2.486,152,1.654,153,2.749,154,1.786,155,3.482,156,1.786,157,1.786,158,2.017,160,1.786,161,1.959,164,1.375,166,2.677,167,2.677,168,1.786,175,1.938,178,3.054,179,0.419,180,2.486,181,3.664,182,2.677,194,1.743,214,1.45,253,2.273,254,2.326,281,0.593,285,1.355,297,1.696,309,1.821,310,2.23,317,0.957,334,1.675,384,1.997,404,3.183,446,0.855,464,1.228,488,1.713,489,2.187,524,1.649,529,1.695,539,2.879,545,2.49,548,1.905,552,3.709,580,1.228,592,2.962,593,1.739,597,1.149,598,1.695,626,2.145,633,2.169,635,1.941,664,1.562,702,2.623,703,1.963,704,1.495,708,2.546,718,1.342,733,1.325,735,1.517,759,1.544,770,2.835,773,1.544,775,2.776,776,1.45,777,2.228,791,0.726,804,1.695,812,3.664,934,3.348,1010,2.486,1054,2.046,1133,1.786,1150,1.695,1165,3.554,1190,1.739,1317,1.586,1358,1.923,1441,3.403,1532,2.749,1533,3.763,1534,1.786,1535,1.786,1539,1.786,1543,1.786,1547,1.786,1550,1.786,1655,1.786,1657,1.786,1658,1.786,1659,1.786,1662,5.59,1667,2.609,1677,1.786,1684,1.786,1690,2.749,1694,1.786,1699,2.776,1700,1.615,1703,1.695,1704,1.739,1708,1.739,1714,2.897,1717,1.739,1718,2.72,1782,2.749,1783,1.786,1821,1.294,1868,2.609,1869,2.677,1870,2.677,1871,2.677,1872,2.677,1873,3.664,1874,2.486,1875,2.677,1899,0.49,1903,2.439,1920,1.658,1922,0.867,1954,1.635,2009,2.23,2025,1.786,2026,4.179,2027,2.376,2028,4.291,2029,1.837,2030,2.827,2031,2.776,2032,3.903,2033,2.486,2034,4.072,2035,3.17,2036,3.183,2037,3.117,2038,2.749,2039,5.058,2040,2.827,2041,3.87,2042,2.749,2043,1.837,2044,1.421,2045,1.786,2046,2.749,2047,1.837,2048,1.837,2049,2.749,2050,1.786,2051,1.786,2052,2.897,2053,2.88,2054,1.786,2055,1.837,2056,1.739,2057,1.837,2058,1.786,2059,1.786,2060,1.837,2061,1.837,2062,1.837,2063,1.739,2064,1.544,2065,1.837,2066,3.664,2067,2.827,2068,2.43,2069,2.827,2070,2.749,2071,2.677,2072,2.827,2073,2.827,2074,2.376,2075,2.376,2076,1.837,2077,1.786,2078,1.786,2079,1.837,2080,1.837]],["title/interfaces/IXYScales.html",[40,0.003,326,2.978]],["body/interfaces/IXYScales.html",[3,0.186,4,0.174,5,0.174,10,0.331,11,0.42,12,0.841,13,0.651,20,0.005,24,0.326,28,0.258,34,0.847,39,0.388,40,0.005,41,0.973,42,1.992,47,1.992,75,1.085,78,0.002,79,0.003,80,0.002,95,1.801,97,1.791,108,0.837,110,1.459,117,1.547,124,1.766,126,2.084,132,2.42,134,0.816,140,1.902,161,1.896,164,1.35,175,1.794,178,2.127,179,0.615,183,0.825,192,1.459,222,1.968,225,2.009,227,1.817,245,3.744,280,2.453,281,0.87,285,1.771,309,0.956,326,3.856,334,1.843,336,1.425,337,2.044,368,2.039,379,3.856,441,2.695,576,1.923,763,1.865,764,2.487,765,1.203,775,2.685,777,2.42,778,1.139,780,3.996,802,2.199,841,3.068,884,3.874,1455,1.404,1490,2.316,1500,4.113,1599,2.96,1680,3.641,1682,1.633,1699,2.17,1718,2.955,1809,1.686,1899,0.719,1915,1.659,1919,2.342,1920,2.354,1944,3.129,2003,2.199,2022,2.199,2032,3.08,2035,2.044,2052,2.265,2053,2.006,2074,2.265,2075,2.265,2106,3.455,2139,4.262,2140,2.96,2141,4.435,2142,3.189,2144,4.572,2145,2.96,2146,2.96,2147,2.863,2148,3.068,2149,3.068,2150,3.068,2151,4.303,2152,4.509,2153,3.744,2154,1.425,2155,3.189,2156,2.863,2157,2.96,2158,3.189,2159,3.189,2160,5.781,2161,4.43,2162,3.856,2163,6.398,2164,2.775,2165,3.189,2166,4.43,2167,4.113,2168,2.62,2169,2.775,2170,2.775,2171,4.789,2172,4.788,2173,4.43,2174,2.863,2175,2.863,2176,4.788,2177,2.775,2178,2.775,2179,3.189,2180,3.189,2181,3.068,2182,2.775,2183,4.789,2184,3.189,2185,5.032,2186,2.775,2187,3.189,2188,3.189,2189,4.262,2190,3.189,2191,3.189,2192,3.189]],["title/interfaces/IZoneCrossPoint.html",[40,0.003,2008,2.001]],["body/interfaces/IZoneCrossPoint.html",[3,0.127,4,0.119,5,0.119,10,0.276,11,0.435,12,1.285,13,1.32,20,0.005,21,0.77,22,0.745,24,0.307,28,0.349,33,1.213,34,0.579,35,1.565,36,1.589,37,1.394,39,0.398,40,0.005,41,0.946,42,1.792,47,1.792,57,1.721,75,0.871,78,0.002,79,0.003,80,0.002,83,1.3,85,0.534,89,1.247,90,1.524,97,1.651,102,0.869,104,0.857,108,0.457,114,0.811,117,0.662,129,2.363,134,0.87,140,1.847,149,0.768,158,0.96,159,1.802,164,1.283,179,1.186,183,0.564,194,1.531,209,2.001,218,1.394,225,0.988,234,2.278,240,0.974,241,0.988,247,2.6,250,1.252,253,0.789,280,1.541,281,1.351,283,1.003,285,1.357,290,0.8,299,2.029,309,1.375,310,2.029,328,0.988,333,1.907,334,1.258,368,1.003,384,0.833,399,1.19,411,1.003,417,1.081,439,1.049,443,1.542,444,1.613,446,1.946,447,1.613,453,1.689,455,2.091,459,2.18,464,1.499,465,1.589,476,2.212,524,2.001,525,1.862,530,1.297,531,1.297,532,1.297,533,1.297,539,1.589,541,1.252,545,1.675,547,1.297,548,1.565,553,1.297,557,1.995,561,1.995,571,1.297,572,1.689,575,1.274,576,1.773,589,1.274,591,1.252,595,1.297,596,1.663,599,1.297,633,0.778,635,1.046,664,1.018,702,1.565,703,1.966,704,2.049,719,1.231,733,1.49,735,0.988,737,1.936,740,2.11,749,1.049,750,1.098,765,1.264,771,1.152,778,1.768,786,1.033,791,1.531,793,2.456,802,1.081,816,1.274,821,1.274,827,1.19,828,1.134,881,1.19,923,1.21,937,1.628,994,1.116,1047,1.231,1048,1.297,1049,1.297,1050,1.297,1052,2.311,1054,0.974,1056,1.049,1173,2.207,1188,2.348,1205,1.231,1206,1.231,1223,2.231,1234,1.252,1254,1.098,1256,1.772,1310,2.311,1317,1.589,1419,1.893,1431,2.59,1455,0.96,1592,1.21,1607,2.424,1608,0.946,1616,1.297,1632,1.274,1639,1.801,1649,1.231,1682,1.116,1750,1.297,1763,1.134,1794,1.297,1809,2.159,1899,0.491,1900,1.274,1901,1.321,1902,1.995,1903,1.565,1904,1.297,1905,1.297,1906,1.297,1907,1.065,1908,1.049,1909,2.431,1910,1.274,1911,1.252,1912,2.719,1913,1.274,1914,1.297,1915,1.134,1916,1.297,1917,1.297,1918,1.297,1919,1.772,1920,1.892,1921,1.152,1922,1.828,1923,3.269,1924,1.321,1925,1.893,1926,1.171,1927,2.431,1928,1.321,1929,2.031,1930,1.995,1931,1.995,1932,1.321,1933,1.995,1934,2.347,1935,1.893,1936,1.321,1937,1.134,1938,1.321,1939,1.231,1940,1.542,1941,1.19,1942,1.321,1943,1.321,1944,1.003,1945,1.321,1946,1.274,1947,1.926,1948,1.995,1949,1.297,1950,1.995,1951,1.321,1952,1.297,1953,1.321,1954,2.554,1955,1.321,1956,1.321,1957,1.321,1958,1.995,1959,1.274,1960,1.134,1961,1.297,1962,1.297,1963,1.321,1964,1.297,1965,2.031,1966,1.321,1967,1.297,1968,1.252,1969,1.321,1970,1.321,1971,1.995,1972,1.862,1973,1.297,1974,1.966,1975,1.321,1976,1.297,1977,1.297,1978,1.321,1979,1.321,1980,1.321,1981,1.297,1982,1.321,1983,1.116,1984,1.21,1985,1.297,1986,1.321,1987,1.321,1988,1.321,1989,1.321,1990,1.274,1991,1.274,1992,1.274,1993,1.321,1994,2.031,1995,2.729,1996,1.321,1997,1.297,1998,1.321,1999,1.321,2000,1.321,2001,1.321,2002,1.321,2003,1.663,2004,1.081,2005,2.031,2006,2.031,2007,2.59,2008,1.96,2009,1.675,2010,1.96,2011,2.779,2012,1.321,2013,1.893,2014,2.031,2015,1.321,2016,1.321,2017,2.268,2018,1.926,2019,2.268,2020,1.297,2021,1.252,2022,1.081,2023,1.321,2024,1.152]],["title/interfaces/IZoomPluginConfiguration.html",[40,0.003,2397,4.212]],["body/interfaces/IZoomPluginConfiguration.html",[0,0.081,3,0.184,4,0.173,5,0.173,10,0.19,11,0.417,12,1.094,20,0.005,21,0.491,22,0.978,24,0.178,28,0.389,39,0.256,40,0.002,41,0.531,55,2.525,75,0.938,78,0.003,79,0.003,80,0.002,83,2.124,89,1.884,90,1.077,94,1.53,96,2.715,97,1.276,103,2.194,104,1.729,110,1.039,112,1.846,117,1.337,124,1.754,140,1.539,143,1.616,144,2.194,161,1.882,164,1.218,179,0.976,183,0.816,192,2.016,194,1.054,222,2.715,227,2.56,254,3.52,297,1.829,309,1.518,310,2.246,315,3.036,316,3.036,317,1.39,320,2.105,332,2.345,336,1.965,347,3.453,436,2.525,443,2.024,444,1.519,447,1.519,459,1.937,465,2.085,476,1.965,524,1.276,545,2.076,583,2.593,584,2.593,587,2.834,596,2.183,597,1.668,614,3.885,635,0.985,663,2.525,699,3.885,702,2.054,749,1.519,791,1.828,794,2.593,828,1.642,884,2.401,937,1.258,1010,2.345,1124,2.93,1125,2.93,1157,2.593,1173,1.519,1174,2.747,1182,2.93,1183,2.93,1196,2.834,1197,2.93,1254,2.217,1358,1.814,1455,1.39,1461,3.293,1504,3.645,1667,2.461,1697,3.293,1698,3.156,1700,2.345,1709,3.885,1748,3.885,1763,1.642,1806,5.415,1817,4.629,1828,3.645,1874,2.345,1899,0.712,1912,1.642,1922,1.754,1934,1.814,2021,2.528,2031,2.148,2034,2.461,2044,2.063,2056,2.525,2068,2.292,2105,2.747,2141,2.934,2236,3.156,2237,4.399,2320,3.156,2366,3.156,2397,6.743,2398,4.207,2399,7.678,2400,5.864,2401,5.864,2402,5.864,2403,8.561,2404,3.885,2405,3.885,2406,4.207,2407,3.453,2408,3.885,2409,4.207,2410,5.415,2411,4.207,2412,3.885,2413,4.207,2414,4.207,2415,4.207,2416,4.207,2417,4.207,2418,4.207,2419,4.207,2420,4.207,2421,3.645,2422,5.848,2423,4.207,2424,4.207,2425,4.207,2426,4.207,2427,4.207,2428,4.207,2429,4.207,2430,4.207,2431,4.207,2432,4.207,2433,4.207,2434,3.645,2435,4.207,2436,4.207,2437,4.207,2438,4.207,2439,4.207,2440,4.207,2441,4.207,2442,4.207,2443,4.207,2444,4.207,2445,4.207,2446,4.207,2447,4.207,2448,4.207,2449,7.09,2450,4.207,2451,4.207,2452,4.207,2453,4.207,2454,4.207,2455,4.207,2456,4.207,2457,5.864,2458,4.207,2459,4.207,2460,4.207,2461,4.207,2462,4.207,2463,3.885,2464,4.207,2465,4.207,2466,4.207,2467,4.207,2468,4.207,2469,4.207,2470,4.207,2471,4.207,2472,4.207,2473,4.207,2474,4.207,2475,4.207,2476,3.885,2477,4.232,2478,3.885,2479,4.207,2480,4.207,2481,4.207,2482,4.207,2483,4.207,2484,6.75,2485,5.864,2486,7.302,2487,4.207,2488,5.864,2489,6.325,2490,5.864,2491,4.207,2492,5.415,2493,4.207,2494,5.864,2495,6.75,2496,4.207,2497,4.207,2498,4.207,2499,4.207,2500,4.207,2501,4.207,2502,4.207,2503,3.885,2504,4.207,2505,4.207,2506,4.207]],["title/classes/InteractionLabelPlugin.html",[0,0.088,2507,4.212]],["body/classes/InteractionLabelPlugin.html",[0,0.11,2,1.114,3,0.177,4,0.166,5,0.166,10,0.182,11,0.406,14,1.098,17,1.347,19,1.069,20,0.005,21,0.666,22,0.675,24,0.28,28,0.382,39,0.177,41,0.835,42,1.949,47,1.098,54,1.63,55,2.232,78,0.002,79,0.003,80,0.002,83,1.922,85,0.743,90,1.048,94,1.803,95,2.417,96,3.06,107,1.391,108,0.803,110,1.633,115,3.504,124,1.706,129,1.317,134,0.676,144,2.109,146,3.742,155,2.854,161,1.831,164,0.874,167,3.424,175,1.766,179,1.191,180,2.255,183,0.785,192,1.633,222,1.873,227,2.75,254,2.974,269,1.73,285,0.898,297,1.779,313,3.504,314,3.504,317,1.336,320,2.023,329,3.034,336,1.356,404,2.109,436,2.427,443,2.844,444,2.913,446,1.949,447,2.386,464,1.114,465,2.979,466,2.816,471,2.816,472,2.816,473,2.816,474,2.816,476,1.356,545,2.327,583,2.493,584,2.493,587,2.724,596,2.46,597,1.604,607,3.108,632,3.166,633,1.528,635,0.947,672,3.256,733,1.749,765,1.144,779,3.972,780,2.203,879,3.166,881,1.657,923,1.685,937,1.706,938,3.504,950,4.044,1124,2.816,1125,2.816,1134,3.504,1168,3.735,1173,1.46,1174,2.641,1201,4.279,1254,1.529,1427,4.044,1441,3.683,1461,4.464,1462,5.724,1468,3.504,1469,3.504,1473,5.724,1501,3.504,1649,1.714,1697,3.166,1698,3.034,1700,2.255,1701,3.735,1706,3.735,1718,2.023,1719,4.044,1763,1.578,1828,5.724,2033,2.255,2050,3.516,2053,4.09,2058,2.493,2141,2.854,2234,3.034,2235,4.279,2262,2.641,2297,3.166,2407,3.319,2421,5.724,2434,3.504,2507,6.102,2508,7.852,2509,6.367,2510,5.704,2511,7.375,2512,4.514,2513,4.514,2514,4.514,2515,4.044,2516,3.504,2517,4.044,2518,4.514,2519,4.514,2520,4.044,2521,4.514,2522,4.044,2523,4.514,2524,4.044,2525,6.367,2526,4.514,2527,4.044,2528,5.704,2529,3.735,2530,6.367,2531,4.514,2532,4.044,2533,4.514,2534,4.044,2535,4.044,2536,5.704,2537,4.044,2538,4.044,2539,4.044,2540,5.267,2541,4.044,2542,4.044,2543,4.514,2544,4.514,2545,4.514,2546,4.514,2547,4.514,2548,7.375,2549,4.514,2550,4.514,2551,4.514,2552,4.514,2553,4.514,2554,4.514,2555,6.367,2556,4.514,2557,4.514,2558,4.514,2559,4.514,2560,4.514,2561,4.514,2562,4.514,2563,4.514,2564,4.044,2565,6.367,2566,4.514,2567,7.375,2568,6.367,2569,4.514,2570,4.514,2571,4.514,2572,4.044,2573,4.514,2574,6.367,2575,8.446,2576,4.514,2577,6.367,2578,4.514,2579,4.514,2580,4.514,2581,4.514,2582,4.514,2583,4.514,2584,4.044,2585,4.514,2586,4.514,2587,4.514,2588,4.044,2589,4.514,2590,4.514,2591,4.514,2592,4.514]],["title/classes/InteractionLinePlugin.html",[0,0.088,2593,4.212]],["body/classes/InteractionLinePlugin.html",[0,0.139,2,1.306,3,0.207,4,0.195,5,0.195,10,0.214,11,0.453,12,0.676,17,1.348,20,0.005,21,0.554,24,0.27,28,0.383,39,0.207,41,0.907,42,1.729,44,3.712,49,3.712,55,2.432,57,1.172,78,0.003,79,0.004,80,0.003,83,1.851,85,0.871,90,1.169,94,1.817,95,2.697,96,3.327,107,1.156,108,0.734,110,1.573,115,3.708,117,1.081,124,1.418,134,0.485,149,2.316,161,1.522,175,1.855,179,1.238,183,0.92,192,1.172,222,2.196,227,2.633,254,3.319,269,1.93,285,1.053,297,1.985,317,1.567,320,2.373,436,2.847,443,2.955,444,3.041,446,2.119,447,2.594,464,1.306,465,3.084,466,3.303,471,3.303,472,3.303,473,3.303,474,3.303,476,1.59,545,2.21,583,2.924,584,2.924,587,3.195,596,2.674,597,1.881,607,2.584,632,3.712,733,1.952,765,1.342,879,3.712,881,1.943,923,1.976,937,1.904,938,4.109,976,4.109,1124,3.303,1125,3.303,1173,1.712,1174,3.097,1201,4.774,1254,1.793,1441,3.548,1461,4.982,1462,6.223,1468,4.109,1469,4.109,1649,2.01,1697,3.712,1698,3.558,1700,2.644,1763,1.851,1844,4.743,1848,4.743,2141,3.184,2234,3.558,2235,4.774,2407,3.892,2421,6.223,2434,4.109,2508,7.678,2510,6.365,2516,4.109,2517,4.743,2520,4.743,2524,4.743,2527,4.743,2528,6.365,2529,4.38,2532,4.743,2534,4.743,2535,4.743,2536,7.678,2537,4.743,2538,4.743,2539,4.743,2540,5.878,2541,4.743,2542,4.743,2593,6.634,2594,7.104,2595,5.294,2596,5.294,2597,5.294,2598,5.294,2599,5.294,2600,5.294,2601,7.104,2602,5.294,2603,5.294,2604,5.294,2605,5.294,2606,5.294,2607,8.018,2608,5.294,2609,5.294,2610,5.294,2611,5.294,2612,5.294,2613,5.294,2614,5.294,2615,5.294]],["title/components/LegendComponent.html",[477,2.237,513,2.812]],["body/components/LegendComponent.html",[0,0.125,3,0.212,4,0.199,5,0.199,8,1.555,10,0.219,11,0.46,13,1.369,17,1.317,20,0.005,21,0.849,24,0.328,28,0.283,39,0.212,52,1.804,57,1.2,78,0.003,79,0.004,80,0.003,90,1.483,94,1.769,104,2.381,107,1.889,108,0.792,110,1.597,134,0.849,149,1.283,161,2.488,179,0.702,183,0.942,441,5.117,477,3.17,478,2.993,479,4.099,482,4.351,484,3.078,485,5.601,486,5.601,487,5.54,488,3.432,489,2.381,490,3.27,493,4.355,495,4.206,496,2.771,497,4.913,498,3.27,499,3.27,500,2.914,501,3.27,502,2.993,503,2.771,504,3.27,505,2.993,506,3.27,507,2.84,508,3.27,509,2.993,510,3.27,511,2.771,512,3.27,513,4.778,514,3.27,515,2.993,516,3.27,517,2.993,518,3.27,519,3.078,520,2.914,521,3.17,522,3.27,721,7.191,737,2.756,819,3.522,825,4.836,827,1.989,828,1.895,856,5.453,857,5.689,873,5.06,890,3.8,909,3.642,1112,7.454,1136,5.601,2053,3.05,2070,3.985,2136,5.78,2324,6.114,2616,5.419,2617,7.216,2618,8.113,2619,8.113,2620,8.113,2621,8.113,2622,5.419,2623,5.419,2624,8.8,2625,6.465,2626,6.465,2627,6.712,2628,7.216,2629,5.419,2630,5.419,2631,9.265,2632,5.419,2633,6.465,2634,5.419,2635,6.465,2636,5.419,2637,7.216,2638,7.216,2639,5.419,2640,5.419,2641,5.419,2642,5.419,2643,5.419]],["title/classes/LegendInteractionAssist.html",[0,0.088,2644,4.561]],["body/classes/LegendInteractionAssist.html",[0,0.094,2,0.679,3,0.108,4,0.101,5,0.101,8,0.593,10,0.177,11,0.279,12,1.165,13,1.275,14,0.669,17,1.135,19,1.719,20,0.005,21,0.827,22,1.085,24,0.317,28,0.327,30,2.491,32,1.285,34,0.491,39,0.172,54,0.994,55,2.254,59,3.198,75,0.628,78,0.001,79,0.002,80,0.001,85,0.722,86,2.136,90,1.451,94,1.808,96,1.141,107,0.958,108,0.765,110,1.607,117,1.274,124,1.465,126,1.209,129,0.803,134,0.889,140,1.664,158,2.569,161,0.791,164,0.602,175,1.642,179,1.228,183,0.478,192,2.039,222,2.588,227,2.626,234,2.445,240,2.287,241,1.901,247,2.19,266,1.779,269,1.192,279,3.465,280,1.581,281,1.144,283,1.929,290,0.679,297,1.528,317,0.814,320,1.233,333,2.633,334,1.89,336,1.642,341,2.276,360,2.276,379,1.61,394,2.358,395,1.849,396,1.849,399,1.01,400,3.224,411,2.107,439,0.89,446,1.159,453,0.932,459,0.814,463,2.023,464,1.082,482,1.927,525,1.637,572,1.852,575,1.724,576,1.987,578,4.244,580,1.045,581,1.717,583,1.52,584,1.52,585,2.276,590,2.276,591,1.063,596,1.463,597,0.978,659,1.779,708,1.407,719,1.045,721,3.404,730,1.779,731,5.212,734,3.891,737,1.987,749,0.89,750,3.061,751,1.442,755,1.779,758,3.649,760,4.579,765,1.581,769,2.736,772,1.779,774,1.779,777,2.665,778,1.956,779,4.25,780,3.044,782,1.779,784,4.033,785,1.779,787,1.779,788,2.835,789,3.535,790,4.033,791,0.617,792,2.835,793,1.824,794,1.52,797,2.299,798,4.033,806,1.374,812,2.94,827,1.01,828,0.962,829,2.465,843,1.407,934,1.889,938,3.404,994,0.947,1047,1.665,1052,1.486,1147,2.835,1151,1.374,1173,0.89,1174,2.565,1186,1.929,1188,1.509,1189,2.276,1201,1.849,1202,1.929,1205,1.665,1223,2.29,1257,2.647,1293,2.276,1371,2.276,1373,3.404,1455,1.618,1507,3.224,1608,0.803,1632,1.081,1666,5.588,1680,3.02,1912,0.962,1990,1.081,1995,1.101,2034,1.442,2051,1.52,2053,3.219,2063,3.354,2135,2.835,2477,1.779,2644,5.588,2645,8.354,2646,2.465,2647,6.237,2648,6.237,2649,4.385,2650,6.237,2651,4.385,2652,4.385,2653,2.751,2654,7.301,2655,4.385,2656,4.385,2657,2.751,2658,2.751,2659,5.468,2660,2.751,2661,2.751,2662,4.385,2663,2.751,2664,6.237,2665,4.385,2666,2.751,2667,2.751,2668,4.385,2669,2.136,2670,2.751,2671,3.628,2672,4.385,2673,2.751,2674,4.385,2675,2.751,2676,2.276,2677,2.751,2678,2.136,2679,2.751,2680,4.385,2681,4.385,2682,3.628,2683,4.385,2684,6.813,2685,4.385,2686,4.385,2687,2.751,2688,4.385,2689,3.628,2690,2.751,2691,2.751,2692,2.465,2693,2.751,2694,2.751,2695,4.385,2696,2.465,2697,2.751,2698,2.751,2699,2.751,2700,2.751,2701,2.751,2702,5.468,2703,2.465,2704,2.751,2705,2.751,2706,2.751,2707,2.751,2708,2.751,2709,2.751,2710,4.385,2711,2.751,2712,4.385,2713,5.468,2714,4.385,2715,2.751,2716,2.751,2717,2.751,2718,2.751,2719,3.628,2720,3.929,2721,2.751,2722,2.751,2723,4.385,2724,2.751,2725,4.385,2726,2.751,2727,2.751,2728,2.751,2729,5.468,2730,2.751,2731,2.751,2732,2.751,2733,2.751,2734,2.751,2735,2.751,2736,2.751,2737,2.751,2738,2.751,2739,4.385,2740,2.751,2741,2.751,2742,2.751,2743,2.751,2744,2.751,2745,2.751,2746,4.385,2747,2.751,2748,2.751,2749,2.751,2750,5.468,2751,2.751,2752,2.751,2753,5.468,2754,2.751,2755,2.751,2756,2.465,2757,2.751,2758,2.751,2759,2.751,2760,2.751,2761,2.751,2762,2.751,2763,2.751,2764,2.751,2765,2.751,2766,4.385,2767,2.465,2768,2.465,2769,2.751,2770,2.751,2771,4.385,2772,4.385,2773,2.751,2774,2.751,2775,2.751,2776,2.751,2777,4.385,2778,5.468,2779,2.751,2780,4.385,2781,2.751,2782,2.751,2783,2.751,2784,2.751,2785,2.751,2786,2.751,2787,2.276,2788,4.385,2789,2.751,2790,2.751,2791,2.751,2792,2.751,2793,2.751,2794,2.751,2795,2.751,2796,2.751,2797,2.751,2798,2.751,2799,2.751,2800,2.465,2801,2.751,2802,2.751,2803,2.751,2804,2.751,2805,2.751,2806,2.751,2807,2.751,2808,2.751,2809,5.468,2810,2.751,2811,2.751,2812,2.751,2813,2.751,2814,2.751,2815,2.751,2816,2.751,2817,5.468,2818,2.751,2819,6.813,2820,4.385,2821,2.751,2822,5.468,2823,2.751,2824,2.751,2825,2.751,2826,2.751,2827,4.385,2828,2.751,2829,6.237,2830,2.751,2831,2.751,2832,4.385,2833,4.385,2834,2.465,2835,2.751,2836,4.385,2837,2.751,2838,2.751,2839,2.751,2840,2.751,2841,4.385,2842,2.751]],["title/components/LegendSeriesComponent.html",[477,2.237,515,2.812]],["body/components/LegendSeriesComponent.html",[0,0.097,3,0.148,4,0.139,5,0.139,8,1.205,10,0.152,13,1.401,14,0.918,17,1.381,19,1.745,20,0.005,21,0.892,22,1.176,24,0.345,28,0.308,39,0.219,52,1.967,55,2.079,78,0.002,79,0.003,80,0.002,85,1.498,90,1.295,94,1.778,104,2.598,107,1.221,108,0.755,110,1.888,117,0.771,124,1.498,129,1.101,134,0.802,140,2.047,149,0.893,159,1.205,161,2.119,175,1.803,179,1.019,183,0.656,192,1.824,194,1.765,227,1.04,269,1.519,333,2.303,334,1.157,394,2.029,404,1.763,417,2.845,421,5.01,459,2.18,477,2.457,478,2.084,479,3.176,480,8.236,482,4.22,484,2.143,485,4.34,486,4.34,487,5.216,488,3.25,489,1.658,490,2.277,491,3.489,493,3.375,495,2.928,496,1.929,497,4.185,498,2.277,499,2.277,500,2.029,501,2.277,502,2.084,503,1.929,504,2.277,505,2.084,506,2.277,507,1.977,508,2.277,509,2.084,510,2.277,511,1.929,512,2.277,513,4.345,514,2.277,515,4.069,516,2.277,517,2.084,518,2.277,519,2.143,520,2.029,521,2.207,522,2.277,737,2.123,749,1.22,775,2.278,776,1.691,797,1.977,819,2.729,825,4.575,827,1.385,828,1.319,855,5.512,864,3.921,898,3.121,1004,3.121,1106,5.01,1112,5.512,1118,5.01,1136,5.718,1164,5.718,1165,3.77,1267,5.01,1268,5.01,1276,3.121,1698,2.535,1912,2.329,1925,2.987,2009,2.271,2032,3.85,2324,6.106,2625,8.155,2626,5.969,2627,3.121,2633,7.049,2843,8.236,2844,3.773,2845,5.592,2846,5.592,2847,7.368,2848,7.368,2849,7.368,2850,7.368,2851,6.662,2852,7.867,2853,7.867,2854,5.592,2855,5.592,2856,5.592,2857,3.773,2858,3.773,2859,5.592,2860,3.773,2861,3.773,2862,7.368,2863,3.773,2864,7.368,2865,3.773,2866,5.592,2867,3.773,2868,7.368,2869,5.592,2870,3.773,2871,3.773,2872,3.773,2873,3.773,2874,3.773,2875,3.773,2876,3.773,2877,5.592,2878,3.773,2879,3.773,2880,3.773,2881,3.773,2882,3.773,2883,3.773,2884,3.773,2885,3.773,2886,3.773,2887,3.773,2888,3.38,2889,5.592,2890,3.773,2891,7.368,2892,3.773,2893,6.662,2894,3.773,2895,5.592,2896,3.773,2897,3.773,2898,5.592,2899,3.773,2900,3.773,2901,3.773,2902,3.773,2903,3.773,2904,3.773,2905,3.773,2906,3.773,2907,3.773,2908,3.38,2909,3.773,2910,5.592,2911,3.773,2912,3.773,2913,3.773,2914,3.773,2915,3.773,2916,3.773,2917,3.773,2918,3.773,2919,3.773,2920,3.773,2921,3.773,2922,3.773,2923,3.773]],["title/classes/LineAccessors.html",[0,0.088,2261,3.57]],["body/classes/LineAccessors.html",[0,0.157,2,1.368,3,0.217,4,0.204,5,0.204,7,2.142,8,1.579,10,0.224,11,0.594,12,1.285,13,1.354,14,1.997,15,3.888,16,5.013,17,1.324,19,1.313,20,0.005,21,0.858,22,0.829,23,4.261,24,0.311,28,0.321,29,3.84,30,4.162,31,2.906,32,2.59,33,1.783,34,1.309,37,2.44,38,1.465,39,0.342,40,0.004,41,0.988,42,1.349,47,1.349,52,2.27,53,2.963,54,2.002,55,1.465,57,1.817,60,3.727,62,3.727,72,2.537,73,2.906,74,2.906,75,1.176,76,3.244,77,3.244,78,0.003,79,0.004,80,0.003,85,0.913,94,1.724,107,1.907,108,0.508,110,1.622,115,2.3,124,1.486,132,2.69,134,0.508,144,2.59,159,2.009,184,3.747,241,2.233,281,1.017,455,2.521,763,2.88,778,1.331,781,2.389,806,3.659,813,4.571,819,3.576,934,3.157,1056,1.794,1151,4.098,1395,5.867,1608,1.618,1639,2.002,1899,1.11,1907,1.821,1908,1.794,1972,2.07,1974,1.794,1983,3.209,2098,4.413,2100,3.94,2154,1.665,2164,4.286,2255,6.776,2256,6.419,2257,6.419,2258,5.515,2259,5.867,2260,4.304,2261,6.365,2262,3.244,2263,3.244,2264,5.687,2265,5.687,2266,5.687,2267,5.138,2268,5.387,2269,5.687,2270,5.687,2271,5.687,2272,5.387,2273,5.387,2274,5.687,2275,5.687,2276,5.387,2277,4.304,2278,4.304,2279,4.304,2323,3.459,2396,4.588,2924,7.327,2925,5.545,2926,5.545]],["title/classes/LineSelectSeriesInteractionStrategy.html",[0,0.088,2122,3.176]],["body/classes/LineSelectSeriesInteractionStrategy.html",[0,0.089,2,1.268,3,0.201,4,0.189,5,0.189,8,1.501,10,0.342,11,0.444,12,1.212,13,1.303,17,1.232,19,1.871,20,0.005,21,0.826,22,1.265,24,0.346,28,0.372,38,1.358,39,0.201,40,0.003,55,1.358,57,1.542,78,0.003,79,0.003,80,0.003,94,1.766,97,2.146,107,1.123,108,0.471,110,1.138,117,1.05,124,1.866,126,3.06,128,2.919,129,1.499,134,0.638,146,2.401,149,1.649,159,1.108,164,1.303,175,1.592,179,1.097,183,0.893,192,1.138,209,2.301,218,2.208,227,2.333,234,2.443,267,3.989,268,4.621,269,1.892,270,4.503,272,4.503,273,4.503,285,1.855,290,1.948,292,4.203,294,5.104,295,4.531,296,4.531,297,2.653,299,2.333,302,4.203,303,3.399,305,4.203,306,4.14,308,6.205,317,1.521,319,5.762,320,2.304,327,2.509,328,1.566,332,2.567,337,2.215,384,1.321,385,4.605,398,6.535,399,3.249,400,5.808,410,4.605,411,2.821,545,1.919,607,2.509,632,3.604,635,1.078,733,1.933,791,1.563,793,1.714,884,2.629,937,1.377,1173,2.862,1188,2.397,1308,3.989,1309,3.779,1682,1.769,1817,2.919,1818,2.839,1819,4.253,1925,1.951,2044,3.06,2098,2.764,2100,5.278,2122,4.345,2339,5.808,2340,3.779,2476,4.253,2927,8.849,2928,8.849,2929,7.899,2930,5.762,2931,5.14,2932,5.14,2933,5.14,2934,6.24,2935,7.899,2936,5.14,2937,5.14,2938,5.14,2939,5.14,2940,5.14,2941,5.14,2942,5.14,2943,5.14,2944,5.14,2945,5.14,2946,6.964,2947,7.899,2948,4.605,2949,3.989,2950,5.14,2951,5.14,2952,5.14,2953,5.14,2954,4.605,2955,5.14,2956,5.14,2957,4.605,2958,5.14,2959,5.14]],["title/classes/LinearScale.html",[0,0.088,2960,4.561]],["body/classes/LinearScale.html",[0,0.082,2,1.176,3,0.187,4,0.175,5,0.175,10,0.193,11,0.421,14,1.16,17,1.428,19,2.313,20,0.005,21,1.022,22,1.46,24,0.38,28,0.259,39,0.187,41,0.749,75,0.683,78,0.002,79,0.003,80,0.002,85,0.785,91,3.87,94,1.881,97,1.798,107,1.445,108,0.817,115,4.2,124,1.278,132,3.164,134,0.752,140,2.01,164,1.398,175,1.983,192,1.908,216,4.796,269,1.798,280,2.6,291,4.3,309,0.961,336,1.432,672,2.439,765,1.926,1909,3.039,1920,2.332,1944,2.964,2141,3.863,2151,4.315,2152,3.468,2153,2.709,2162,3.87,2169,5.35,2170,5.35,2172,3.558,2174,4.585,2175,4.585,2176,5.091,2177,3.87,2178,3.87,2182,2.79,2183,4.444,2185,5.538,2186,3.87,2297,5.753,2298,4.865,2299,5.753,2960,5.927,2961,8.918,2962,3.946,2963,5.927,2964,5.474,2965,5.927,2966,5.135,2967,4.273,2968,3.702,2969,4.273,2970,4.273,2971,4.273,2972,4.273,2973,4.769,2974,4.769,2975,4.273,2976,4.769,2977,4.273,2978,4.273,2979,4.273,2980,4.273,2981,4.273,2982,4.273,2983,4.273,2984,4.273,2985,4.273,2986,4.273,2987,4.273,2988,4.273,2989,4.273,2990,4.273,2991,4.273,2992,4.769,2993,4.273,2994,4.273,2995,3.946,2996,4.273,2997,4.273,2998,3.946,2999,4.769]],["title/classes/MappedValueProvider.html",[0,0.088,3000,4.561]],["body/classes/MappedValueProvider.html",[0,0.156,2,1.686,3,0.268,4,0.251,5,0.251,8,1.804,10,0.276,11,0.533,13,1.149,14,1.663,17,1.26,19,1.619,20,0.005,21,0.715,22,1.022,24,0.343,28,0.268,39,0.268,54,2.469,55,1.806,75,0.979,78,0.003,79,0.004,80,0.003,85,1.125,94,1.758,107,1.493,108,0.886,134,0.767,175,1.378,179,1.084,183,1.188,269,2.275,291,3.583,303,4.086,626,3.607,778,1.641,843,5.035,1052,3.066,1056,3.051,1821,3.349,1910,3.29,1920,2.354,2024,3.351,2392,5.306,3000,7.501,3001,9.431,3002,4.794,3003,6.498,3004,6.498,3005,6.498,3006,6.498,3007,6.156,3008,6.498,3009,6.836,3010,9.049,3011,6.125,3012,6.836,3013,6.125,3014,5.656,3015,6.836,3016,6.836]],["title/classes/MarkerUtils.html",[0,0.088,3017,4.561]],["body/classes/MarkerUtils.html",[0,0.148,2,1.152,3,0.183,4,0.172,5,0.172,10,0.263,11,0.415,12,0.959,17,1.191,19,1.779,20,0.005,21,0.786,22,1.123,24,0.325,28,0.356,34,0.834,38,1.234,39,0.183,42,1.137,47,1.137,52,1.631,53,3.447,78,0.002,79,0.003,80,0.002,91,2.733,94,1.452,96,4.096,97,2.408,102,1.252,107,1.986,108,0.784,109,1.558,110,1.034,114,1.168,117,0.954,124,1.747,134,0.874,135,3.14,159,1.007,164,1.174,175,1.514,179,1.053,192,1.034,209,2.21,218,1.823,227,2.556,269,1.772,281,1.492,285,1.617,296,3.882,297,2.542,306,4.484,317,1.383,318,5.396,320,2.923,326,4.757,327,2.28,328,1.424,334,1.771,384,1.931,399,2.758,411,2.645,541,1.804,545,2.658,607,2.28,632,3.276,663,3.507,704,2.731,791,1.463,804,3.418,937,1.747,949,3.626,994,2.586,1119,3.435,1173,2.63,1187,6.311,1188,2.586,1206,1.774,1503,5.062,1528,4.186,1673,6.877,1680,3.602,1714,3.113,1817,3.704,1925,1.774,1972,2.434,2045,4.894,2176,2.512,2345,3.276,2410,3.865,2412,3.865,2449,3.865,2584,4.186,2588,4.186,2948,4.186,2954,4.186,3017,5.843,3018,8.861,3019,4.672,3020,7.513,3021,7.513,3022,6.522,3023,6.522,3024,6.522,3025,4.672,3026,8.132,3027,4.672,3028,4.672,3029,6.731,3030,8.861,3031,4.672,3032,8.132,3033,7.664,3034,6.522,3035,4.672,3036,6.522,3037,4.573,3038,6.522,3039,5.843,3040,6.522,3041,4.672,3042,4.672,3043,4.672,3044,4.672,3045,4.672,3046,4.672,3047,4.672,3048,6.522,3049,4.672,3050,4.672,3051,6.522,3052,4.672,3053,4.672,3054,4.672,3055,7.513,3056,4.672,3057,4.672,3058,4.672,3059,4.672,3060,4.672,3061,4.672,3062,4.672,3063,6.731,3064,6.522,3065,4.672,3066,4.672,3067,4.672,3068,4.672,3069,4.672,3070,4.672,3071,4.672,3072,6.522,3073,4.672,3074,4.672,3075,4.672,3076,4.672,3077,6.522,3078,4.672,3079,4.672,3080,4.672,3081,6.522,3082,4.672,3083,4.672,3084,4.672,3085,4.672]],["title/classes/MissingDataLineRendererConfig.html",[0,0.088,3086,4.561]],["body/classes/MissingDataLineRendererConfig.html",[0,0.12,2,1.71,3,0.271,4,0.255,5,0.255,8,1.819,10,0.28,11,0.538,12,1.277,17,1.319,20,0.005,24,0.263,28,0.331,39,0.271,78,0.003,79,0.004,80,0.003,84,4.324,85,1.141,94,1.843,104,2.406,107,2.07,108,0.868,124,2.262,143,2.905,149,2.39,161,2.428,163,6.21,164,0.951,172,5.735,183,1.205,299,2.781,336,2.535,1960,3.183,1984,3.152,2100,3.727,2111,5.68,2115,5.68,2125,5.887,2328,5.92,3086,7.564,3087,9.714,3088,7.564,3089,6.931,3090,7.564,3091,6.21]],["title/classes/NoopAccessors.html",[0,0.088,2283,4.212]],["body/classes/NoopAccessors.html",[0,0.128,2,1.823,3,0.289,4,0.272,5,0.272,7,2.854,8,1.891,10,0.298,11,0.559,12,1.236,13,1.357,14,2.277,17,1.303,20,0.005,24,0.333,28,0.289,34,1.567,38,1.952,39,0.344,40,0.004,41,0.836,56,3.452,72,3.38,75,1.257,78,0.004,79,0.004,80,0.004,94,1.791,159,1.592,1056,2.39,1608,2.155,1639,2.668,1907,2.427,1908,2.39,2281,7.263,2282,8.673,2283,7.259,2290,7.86,3092,7.389]],["title/classes/NoopRenderer.html",[0,0.088,3093,4.561]],["body/classes/NoopRenderer.html",[0,0.067,2,0.962,3,0.153,4,0.211,5,0.143,10,0.38,11,0.365,12,1.266,13,1.292,17,1.369,19,2.251,20,0.005,21,1.003,22,1.406,24,0.371,28,0.327,38,1.031,39,0.153,41,0.649,53,1.409,75,0.559,78,0.002,79,0.003,80,0.002,85,1.456,90,0.943,94,1.843,96,2.378,97,1.557,107,1.635,108,0.731,110,1.269,115,3.977,117,0.797,128,2.216,129,1.138,132,3.246,134,0.764,143,1.972,149,1.357,159,0.841,164,1.277,175,1.932,179,1.145,183,0.678,184,3.83,192,1.658,194,1.286,209,2.605,216,4.027,218,2.472,242,2.622,247,2.675,266,4.393,269,1.557,270,5.574,272,3.706,273,4.842,279,2.736,280,2.114,281,1.052,283,1.207,285,1.933,290,2.057,294,4.027,295,4.441,296,4.38,297,2.656,299,2.763,303,2.798,306,4.181,317,1.155,327,1.904,328,1.189,333,2.331,336,2.04,343,2.434,368,1.773,384,2.144,394,2.098,395,2.622,396,2.622,411,1.207,439,1.262,545,1.579,592,2.798,704,1.721,718,1.619,733,1.252,737,2.875,777,2.749,791,1.286,797,2.045,806,1.948,843,3.83,937,1.045,1151,1.948,1157,3.166,1253,2.622,1256,1.386,1280,5.033,1310,2.537,1358,1.507,1455,2.011,1490,2.798,1502,2.522,1592,1.456,1665,2.434,1681,2.869,1821,2.718,1823,2.155,1851,2.869,1912,2.375,1921,2.66,1922,1.045,1937,1.364,1939,1.481,1940,1.773,1941,1.432,1944,2.579,1983,1.343,1984,1.456,2004,1.912,2013,1.481,2017,2.14,2033,1.948,2086,2.216,2096,2.434,2126,3.353,2138,2.282,2141,3.356,2171,3.353,2281,3.028,2317,2.522,2336,2.869,2337,4.393,2362,2.869,2363,5.574,2477,2.522,3037,2.736,3093,5.135,3094,7.977,3095,4.449,3096,5.812,3097,4.449,3098,4.449,3099,4.449,3100,4.449,3101,4.449,3102,3.228,3103,3.028,3104,3.228,3105,3.228,3106,3.228,3107,3.901,3108,5.273,3109,3.901,3110,3.901,3111,5.273,3112,3.901,3113,3.228,3114,2.869,3115,2.869,3116,4.449,3117,4.214,3118,3.028,3119,5.812,3120,3.228,3121,3.028,3122,3.028,3123,3.028,3124,3.228,3125,2.622,3126,3.028,3127,4.019,3128,3.028,3129,2.869,3130,3.028,3131,3.228,3132,3.028,3133,3.228,3134,5.273,3135,3.028,3136,5.506,3137,3.228,3138,2.522,3139,3.228,3140,4.019,3141,3.028,3142,3.228,3143,3.028,3144,3.228,3145,3.028,3146,3.228,3147,3.028,3148,3.901,3149,3.901,3150,3.901]],["title/classes/NoopScale.html",[0,0.088,3151,4.561]],["body/classes/NoopScale.html",[0,0.089,2,1.267,3,0.201,4,0.189,5,0.189,8,1.5,10,0.207,11,0.443,14,1.249,17,1.425,19,2.247,20,0.005,21,0.992,22,1.418,24,0.372,28,0.273,39,0.201,78,0.003,79,0.003,80,0.003,94,1.872,95,1.95,97,2.145,124,1.376,128,5.298,129,2.721,134,0.81,140,2.063,159,1.5,161,1.477,164,1.396,175,1.96,183,0.893,192,2.153,222,3.276,269,1.891,291,4.436,309,1.035,765,2.146,1920,2.366,1944,3.035,2141,3.539,2144,4.2,2152,4.138,2153,4.484,2157,4.926,2162,4.618,2169,4.951,2170,4.951,2176,5.229,2177,4.951,2178,4.951,2182,4.071,2183,4.951,2185,5.689,2186,4.951,2297,5.935,2298,5.117,2299,5.935,2962,4.249,2966,5.402,2967,6.236,2975,4.601,3151,6.236,3152,10.258,3153,5.135,3154,5.135,3155,5.135,3156,5.135,3157,5.135,3158,4.601,3159,5.135,3160,5.135,3161,5.135,3162,5.135,3163,5.135,3164,5.135,3165,5.135,3166,5.135,3167,5.135,3168,5.135,3169,4.601,3170,4.601]],["title/modules/NuiChartsModule.html",[3171,4.212,3172,3.743]],["body/modules/NuiChartsModule.html",[0,0.09,3,0.203,4,0.19,5,0.19,20,0.005,24,0.197,28,0.401,32,3.706,39,0.203,78,0.003,79,0.004,80,0.003,90,1.565,91,3.032,281,0.951,309,1.045,310,1.428,478,5.47,481,6.275,482,3.899,496,2.651,500,5.325,502,5.47,503,3.582,505,5.47,507,5.191,509,5.535,511,5.065,513,5.47,515,5.47,517,5.47,520,5.325,801,5.795,802,1.729,822,6.725,826,4.644,839,3.811,904,3.484,926,4.644,981,4.644,1101,4.644,1119,3.811,1265,6.157,1312,6.564,1313,4.289,1429,4.023,1911,2.002,2024,1.842,2422,5.436,2676,4.289,2843,4.289,3171,4.289,3172,7.734,3173,4.289,3174,4.023,3175,6.564,3176,6.564,3177,4.644,3178,4.644,3179,4.644,3180,4.644,3181,7.099,3182,4.023,3183,5.184,3184,7.004,3185,7.004,3186,6.275,3187,5.184,3188,5.184,3189,5.184,3190,5.184,3191,5.184,3192,7.004,3193,7.004,3194,7.004,3195,5.184,3196,5.184,3197,5.184,3198,5.184,3199,5.184,3200,5.184,3201,5.184,3202,7.933,3203,5.184,3204,7.933,3205,4.644,3206,7.004,3207,6.275,3208,5.184,3209,5.184,3210,4.644]],["title/classes/PathMarker.html",[0,0.088,3211,4.561]],["body/classes/PathMarker.html",[0,0.158,2,1.553,3,0.247,4,0.231,5,0.231,8,1.714,10,0.254,11,0.507,12,1.015,14,1.532,17,1.275,19,1.883,20,0.005,21,0.832,22,1.188,24,0.331,28,0.247,39,0.247,52,1.989,53,2.273,55,1.664,57,2.136,78,0.003,79,0.004,80,0.003,85,1.309,90,1.309,94,1.786,108,0.728,134,0.933,175,1.603,179,1.03,183,1.094,192,1.394,227,1.735,269,2.161,334,1.303,488,2.737,524,2.621,541,3.538,624,5.64,663,5.079,672,4.067,720,5.209,778,1.511,934,3.427,994,3,1358,3.072,1673,7.109,1708,3.385,1820,5.715,1821,3.182,1991,3.6,1992,3.126,2036,2.941,2037,3.638,2044,2.766,2147,3.799,2211,6.58,3211,8.463,3212,9.446,3213,5.64,3214,7.126,3215,7.953,3216,5.64,3217,7.126,3218,7.953,3219,6.295,3220,6.295,3221,6.295,3222,6.295,3223,6.295,3224,6.295,3225,6.295,3226,6.295,3227,6.295,3228,6.295,3229,6.295,3230,6.295,3231,6.295,3232,6.295,3233,7.126,3234,6.295,3235,6.295]],["title/classes/PieRenderer.html",[0,0.088,3236,4.561]],["body/classes/PieRenderer.html",[0,0.068,2,0.976,3,0.155,4,0.213,5,0.145,10,0.394,11,0.369,12,1.269,13,1.295,17,1.378,19,2.276,20,0.005,21,1.013,22,1.424,24,0.376,28,0.227,39,0.155,41,0.655,53,1.429,75,0.83,78,0.002,79,0.003,80,0.002,85,1.462,90,0.953,94,1.84,96,2.403,97,1.574,107,1.752,108,0.793,110,1.282,115,4.106,117,0.808,132,2.126,134,0.768,143,2.595,164,1.374,175,1.937,179,1.039,192,1.516,194,1.3,209,2.564,216,4.054,218,2.482,242,2.66,247,2.683,253,0.963,266,4.429,269,1.574,270,5.599,272,3.745,273,3.745,279,2.765,280,2.125,281,1.063,283,1.224,285,1.895,290,2.068,294,3.684,295,4.002,296,4.002,297,2.482,299,2.739,303,2.827,306,3.036,309,0.798,333,2.343,336,2.057,343,2.469,368,1.791,384,2.155,394,2.128,395,2.66,396,2.66,411,1.224,439,1.28,545,1.596,592,2.827,672,2.024,704,1.739,718,1.642,733,1.265,737,2.886,777,2.768,791,1.3,797,2.074,806,1.977,843,3.856,937,1.06,957,6.891,1054,1.188,1151,1.977,1157,3.199,1253,2.66,1256,1.406,1280,5.067,1310,1.962,1358,1.529,1455,2.028,1490,2.827,1502,2.559,1592,1.477,1665,2.469,1681,2.91,1821,2.741,1823,2.186,1851,2.91,1912,2.395,1921,1.406,1922,1.06,1937,1.384,1939,1.503,1940,1.791,1941,1.453,1944,2.592,1947,1.529,1959,1.555,1983,1.362,1984,1.477,2004,1.932,2013,1.503,2017,2.162,2033,1.977,2086,2.248,2095,2.469,2126,3.388,2138,2.315,2141,3.379,2171,3.388,2176,3.115,2317,2.559,2337,3.745,2363,4.429,2477,2.559,3037,2.775,3095,4.496,3096,5.852,3097,4.496,3098,4.496,3099,4.496,3100,4.496,3101,4.496,3102,3.274,3103,3.072,3104,3.274,3105,3.274,3106,3.274,3108,4.496,3111,3.072,3113,3.274,3114,2.91,3115,2.91,3116,4.496,3117,4.259,3118,3.072,3119,5.852,3120,3.274,3121,3.072,3122,3.072,3123,3.072,3124,3.274,3125,2.66,3126,3.072,3127,4.062,3128,3.072,3129,2.91,3130,3.072,3131,3.274,3132,3.072,3133,3.274,3134,5.317,3135,3.072,3136,5.544,3137,3.274,3138,2.559,3139,3.274,3140,4.062,3141,3.072,3142,3.274,3143,3.072,3144,3.274,3145,3.072,3146,3.274,3147,3.072,3236,5.189,3237,3.958,3238,4.259,3239,5.792,3240,5.792,3241,3.958,3242,3.958,3243,3.546,3244,3.958,3245,3.958,3246,3.958,3247,3.958,3248,3.958,3249,3.958,3250,6.851,3251,3.546,3252,3.072,3253,3.958,3254,3.958,3255,3.958,3256,3.958]],["title/classes/ProcessedColorProvider.html",[0,0.088,1066,3.951]],["body/classes/ProcessedColorProvider.html",[0,0.113,2,1.62,3,0.257,4,0.327,5,0.241,8,1.76,10,0.265,11,0.52,14,1.598,17,1.295,19,1.555,20,0.005,21,0.687,22,0.981,24,0.249,28,0.257,39,0.257,52,2.438,54,2.371,55,2.158,78,0.003,79,0.004,80,0.003,85,1.081,94,1.741,107,1.434,108,0.601,110,1.454,134,0.906,175,1.323,179,1.151,183,1.141,192,1.454,227,1.81,269,2.219,290,2.014,607,3.205,778,1.576,810,6.013,825,4.176,843,4.176,884,4.546,1052,3.303,1066,6.338,1151,4.078,1280,5.488,1821,3.267,1908,2.642,2024,3.304,2392,5.097,3002,4.605,3014,5.433,3257,9.299,3258,8.166,3259,7.316,3260,8.166,3261,8.166,3262,8.166,3263,5.883,3264,7.963,3265,5.883,3266,7.316,3267,6.567,3268,6.567,3269,6.567,3270,8.166,3271,6.567,3272,6.567,3273,9.565,3274,8.166,3275,6.567,3276,6.567]],["title/classes/RadialAccessors.html",[0,0.088,1598,3.57]],["body/classes/RadialAccessors.html",[0,0.117,2,1.672,3,0.265,4,0.249,5,0.249,7,2.618,8,1.795,10,0.274,11,0.53,12,1.2,13,1.291,14,1.649,15,4.752,17,1.255,19,1.605,20,0.005,21,0.709,22,1.013,23,4.065,24,0.316,28,0.326,29,4.365,31,3.552,32,3.166,33,2.288,34,1.487,37,2.519,38,1.791,39,0.368,40,0.005,41,0.767,52,2.254,54,2.447,56,3.166,57,1.843,72,3.1,73,3.552,74,3.552,75,1.291,78,0.003,79,0.004,80,0.003,108,0.763,134,0.763,202,6.072,778,1.999,781,3.588,1530,4.983,1598,5.839,1974,2.694,2154,2.501,2262,4.871,2263,4.871,2284,6.628,2285,7.298,2286,6.914,2287,6.914,2288,5.26,3277,7.461]],["title/classes/RadialPopoverPlugin.html",[0,0.088,3278,4.561]],["body/classes/RadialPopoverPlugin.html",[0,0.09,2,1.282,3,0.204,4,0.191,5,0.191,10,0.21,11,0.447,12,0.664,17,1.427,20,0.005,24,0.347,28,0.204,39,0.204,41,0.963,78,0.003,79,0.004,80,0.003,85,0.856,90,1.462,94,1.875,107,2.044,108,0.838,109,2.837,110,1.883,114,2.127,115,4.239,117,1.87,143,2.415,146,3.279,175,1.964,179,1.263,192,1.151,227,2.448,253,1.265,269,1.907,297,2.22,384,1.804,436,2.795,439,2.27,443,2.982,444,3.119,446,2.419,447,2.961,453,1.761,456,3.361,459,2.351,464,1.731,465,2.83,466,3.243,471,3.243,472,3.243,473,3.243,474,3.243,476,2.107,607,2.537,633,1.685,635,1.472,663,2.795,672,2.658,733,1.135,740,1.608,763,2.758,935,3.041,937,1.88,975,4.301,976,4.035,1103,7.263,1108,7.513,1135,4.035,1147,3.361,1156,5.806,1157,3.876,1158,5.806,1159,5.806,1160,5.806,1161,5.447,1164,6.166,1165,3.21,1166,4.301,1169,4.035,1170,4.301,1171,4.301,1172,4.301,1173,1.682,1174,3.041,1177,4.035,1204,5.806,1219,5.16,1220,3.822,1221,3.494,1222,3.822,1223,1.908,1224,3.494,1225,5.806,1227,4.301,1228,4.301,1229,3.822,1230,4.301,1432,5.16,3252,5.447,3278,6.287,3279,5.198,3280,5.198,3281,5.198,3282,5.198,3283,5.198,3284,5.198,3285,5.198,3286,5.198,3287,5.198,3288,5.198,3289,5.198,3290,5.198,3291,5.198,3292,5.198,3293,5.198,3294,5.198,3295,7.018,3296,7.018,3297,5.198]],["title/classes/RadialTooltipsPlugin.html",[0,0.088,3298,4.561]],["body/classes/RadialTooltipsPlugin.html",[0,0.073,2,1.04,3,0.165,4,0.223,5,0.155,10,0.17,11,0.386,12,0.774,17,1.383,19,0.998,20,0.005,21,0.441,22,0.63,24,0.335,28,0.322,34,0.753,39,0.165,41,0.686,42,2.272,47,2.272,55,1.602,59,2.466,78,0.002,79,0.003,80,0.002,83,1.099,85,0.694,89,1.054,90,1.41,94,1.848,107,1.696,108,0.711,109,3.013,110,1.342,112,2.383,113,3.253,115,4.122,117,1.239,134,0.555,146,4.003,164,1.212,175,1.906,179,1.225,192,1.572,212,3.732,213,3.622,227,2.574,247,1.212,269,1.648,281,0.774,283,1.304,290,1.04,297,1.695,299,1.957,303,2.058,309,0.85,334,1.47,339,2.956,343,3.783,435,5.285,436,2.267,437,6.611,438,4.707,439,2.297,440,4.707,441,3.444,442,4.707,443,2.845,444,2.976,445,5.017,446,2.264,447,2.772,450,3.777,451,2.63,452,4.252,453,2.406,454,3.777,455,2.444,456,2.726,457,3.777,458,4.707,459,1.795,460,3.272,461,3.777,462,3.777,463,3.1,464,1.496,465,2.622,466,2.63,467,3.777,468,3.777,469,3.272,470,3.777,471,2.63,472,2.63,473,2.63,474,2.63,476,2.133,503,3.101,524,1.648,576,1.769,597,1.498,633,1.012,635,0.885,672,3.101,758,2.466,763,2.791,778,1.012,843,2.156,937,1.625,948,3.272,957,3.272,958,3.488,975,3.488,976,3.272,1188,2.087,1269,5.53,1310,2.054,1337,3.488,1358,1.628,1428,5.017,1429,3.272,1432,4.459,1433,6.028,1434,3.488,1443,3.488,1444,3.488,1445,3.488,1446,3.488,1447,6.65,1477,5.017,1490,2.96,1491,3.1,1493,3.488,1503,3.272,1506,3.488,1672,3.488,2068,2.058,2095,2.63,2156,4.286,2564,3.777,2572,3.777,2669,3.272,2692,3.777,2930,5.017,3117,3.1,3125,2.833,3127,2.956,3238,5.71,3251,5.433,3252,6.028,3298,5.433,3299,3.777,3300,6.064,3301,5.433,3302,6.064,3303,4.216,3304,4.216,3305,4.216,3306,4.216,3307,4.216,3308,6.363,3309,5.433,3310,3.777,3311,3.777,3312,3.777,3313,3.777,3314,5.433,3315,3.488,3316,3.777,3317,3.488,3318,3.777,3319,3.777,3320,3.777,3321,5.433,3322,4.216,3323,4.216,3324,4.216,3325,4.216,3326,4.216,3327,4.216,3328,6.064,3329,4.216,3330,4.216,3331,7.102,3332,4.216,3333,4.216,3334,4.216,3335,4.216,3336,4.216,3337,6.064,3338,4.216,3339,4.216,3340,3.777,3341,4.216,3342,4.216,3343,4.216,3344,4.216,3345,4.216,3346,7.766,3347,4.216,3348,6.064,3349,4.216,3350,7.102,3351,4.216,3352,4.216,3353,4.216,3354,4.216,3355,4.216,3356,3.777,3357,7.372,3358,4.216,3359,4.216]],["title/classes/RectangleAccessors.html",[0,0.088,200,2.892]],["body/classes/RectangleAccessors.html",[0,0.121,2,1.723,3,0.274,4,0.257,5,0.257,7,2.698,8,1.828,10,0.282,11,0.54,12,1.213,13,1.304,14,2.223,17,1.272,20,0.005,24,0.322,28,0.274,33,2.503,34,1.515,35,2.982,36,2.703,37,2.553,38,1.846,39,0.388,40,0.005,41,1.101,52,1.747,53,2.522,78,0.004,79,0.004,80,0.004,108,0.64,200,4.818,205,4.98,206,5.396,212,2.952,213,2.952,214,3.13,331,4.672,1889,4.516,1891,4.516,1893,4.516,1895,4.516,1896,4.694,2291,6.662,2292,4.694,2293,4.694,2294,4.694,3360,8.482,3361,6.984]],["title/classes/Renderer.html",[0,0.088,299,1.403]],["body/classes/Renderer.html",[0,0.097,2,0.709,3,0.113,4,0.207,5,0.106,10,0.381,11,0.358,12,1.293,13,1.329,14,0.699,17,1.294,19,2.044,20,0.005,21,0.932,22,1.265,24,0.346,28,0.344,34,0.513,39,0.113,53,1.639,75,0.65,78,0.001,79,0.002,80,0.001,85,1.322,90,0.747,94,1.798,95,1.723,96,2.334,97,1.529,107,1.692,108,0.757,110,1.638,117,1.149,128,1.632,129,0.838,132,1.055,134,0.826,143,2.2,164,1.185,175,1.838,179,1.04,183,0.5,192,1.944,194,1.561,209,2.544,216,4.444,218,2.617,227,2.039,241,0.876,242,3.051,247,2.759,266,4.783,269,1.233,270,4.133,272,2.935,273,2.935,279,3.322,280,2.258,281,1.277,283,1.404,285,1.875,290,2.197,294,3.437,295,3.946,296,3.833,297,2.521,299,1.251,303,2.216,306,3.35,309,1.134,310,1.55,317,0.851,319,3.756,320,1.288,328,0.876,332,1.435,333,2.549,334,2.035,336,2.222,343,2.832,368,2.152,384,2.257,394,3.026,395,3.051,396,3.051,399,1.055,411,1.977,418,1.793,439,1.468,545,1.918,580,1.091,581,1.793,592,2.216,607,2.216,704,2.09,708,1.47,718,1.883,733,1.229,737,3.023,749,0.93,777,3.034,791,1.434,794,1.587,797,2.379,806,2.267,843,4.107,937,1.508,1151,2.267,1153,1.632,1157,3.107,1182,1.793,1183,1.793,1188,0.989,1196,1.734,1197,1.793,1253,3.051,1256,1.613,1280,5.397,1308,2.231,1309,2.113,1310,2.165,1358,1.753,1455,2.06,1473,3.523,1490,3.12,1502,2.935,1521,2.378,1526,1.587,1592,1.695,1665,1.793,1673,2.231,1681,3.338,1821,2.959,1823,2.507,1851,3.338,1905,1.15,1910,2.211,1911,1.11,1912,2.587,1913,1.129,1921,1.613,1922,1.216,1937,1.587,1939,1.723,1940,2.396,1941,1.666,1944,2.715,1972,1.695,1983,0.989,1984,1.073,2004,2.321,2013,1.723,2017,2.386,2033,2.267,2035,1.238,2086,3.196,2126,3.739,2138,2.655,2141,3.472,2145,2.832,2168,1.587,2171,3.739,2263,2.655,2320,1.931,2337,2.935,2363,3.638,2477,2.935,3029,2.575,3037,3.183,3063,2.575,3095,4.367,3096,3.523,3097,3.523,3098,3.523,3099,3.523,3100,3.523,3101,3.523,3103,3.523,3108,3.523,3111,3.523,3114,3.338,3115,3.338,3116,4.961,3117,4.7,3118,3.523,3119,6.232,3121,3.523,3122,3.523,3123,3.523,3125,3.051,3126,3.523,3127,4.482,3128,3.523,3129,3.338,3130,3.523,3132,3.523,3134,5.742,3135,3.523,3136,5.904,3138,2.935,3140,3.183,3141,2.231,3143,3.523,3145,3.523,3147,3.523,3362,2.874,3363,4.067,3364,4.067,3365,2.874,3366,2.874,3367,2.874,3368,2.874,3369,2.874,3370,2.874,3371,2.874,3372,2.874,3373,2.874,3374,2.874,3375,2.874,3376,2.874,3377,2.874,3378,2.874,3379,2.874,3380,2.874,3381,2.874,3382,4.067,3383,2.874,3384,2.874,3385,2.874,3386,2.874,3387,2.874,3388,2.874,3389,2.874,3390,2.874,3391,4.54,3392,4.54,3393,2.874,3394,2.874,3395,2.874,3396,2.874,3397,2.874,3398,2.874,3399,2.874,3400,2.874,3401,2.874,3402,2.874,3403,2.874,3404,2.874,3405,2.874,3406,2.874,3407,2.874,3408,2.874,3409,2.874,3410,2.874,3411,2.575,3412,2.874,3413,4.54,3414,2.874,3415,2.874,3416,2.874,3417,4.54,3418,2.874,3419,2.874]],["title/components/RichLegendTileComponent.html",[477,2.237,517,2.812]],["body/components/RichLegendTileComponent.html",[0,0.089,3,0.201,4,0.189,5,0.189,8,1.5,10,0.207,11,0.443,13,1.28,14,1.249,17,1.321,19,1.216,20,0.005,21,0.885,22,1.18,24,0.346,28,0.332,39,0.201,52,2.333,55,2.086,78,0.003,79,0.003,80,0.003,90,1.456,94,1.796,108,0.835,117,1.049,134,0.869,140,1.729,175,1.403,180,3.476,192,1.541,269,1.891,477,3.058,478,2.836,479,3.953,480,7.958,482,4.586,483,4.601,484,2.917,485,5.402,486,5.402,487,5.497,488,3.403,489,2.256,490,5.108,491,4.342,492,6.236,493,4.2,494,6.236,495,3.986,496,2.626,497,4.807,498,3.099,499,3.099,500,2.761,501,3.099,502,2.836,503,2.626,504,3.099,505,2.836,506,3.099,507,2.692,508,3.099,509,2.836,510,3.099,511,2.626,512,3.099,513,4.886,514,3.099,515,4.886,516,3.099,517,4.675,518,5.727,519,2.917,520,2.761,521,3.004,522,3.099,776,3.12,818,6.128,819,3.397,825,4.524,834,3.986,855,6.532,867,5.935,898,4.249,991,5.805,1081,4.601,1136,5.402,1276,4.249,1309,3.776,1333,4.249,2053,2.942,2154,1.542,2635,6.236,2834,6.236,2843,4.249,2888,4.601,2908,4.601,3205,4.601,3207,9.115,3420,7.895,3421,8.464,3422,8.464,3423,7.895,3424,8.464,3425,5.135,3426,6.96,3427,5.135,3428,5.135,3429,5.135,3430,5.135,3431,5.135,3432,5.135,3433,5.135,3434,5.135,3435,6.96,3436,5.135,3437,6.96,3438,5.135,3439,5.135,3440,5.135,3441,5.135,3442,5.135,3443,5.135,3444,5.135,3445,5.135,3446,5.135]],["title/classes/Scale.html",[0,0.088,280,1.291]],["body/classes/Scale.html",[0,0.078,2,1.116,3,0.177,4,0.166,5,0.166,8,1.374,10,0.183,11,0.406,17,1.406,19,2.216,20,0.005,21,0.979,22,1.398,24,0.375,28,0.314,39,0.177,55,1.196,75,1.149,78,0.002,79,0.003,80,0.002,94,1.883,95,1.718,97,2.179,107,1.393,108,0.734,110,1.002,124,1.213,132,3.553,134,0.676,140,2.03,159,1.374,161,1.301,164,1.381,175,1.932,183,0.787,184,4.486,192,2.099,216,5.156,225,1.379,269,1.733,280,2.143,291,3.871,309,1.488,329,3.041,336,1.359,672,3.777,765,2.033,1358,1.748,1519,4.054,1746,3.744,1820,2.823,1920,2.418,1944,3.038,2141,4.194,2144,4.457,2151,4.982,2152,3.871,2153,4.195,2157,4.608,2162,4.32,2163,2.926,2169,4.691,2170,4.691,2172,2.433,2174,3.849,2175,3.849,2176,5.205,2177,4.691,2178,4.691,2182,3.731,2183,4.691,2185,5.662,2186,4.691,2297,4.472,2298,4.689,2299,4.472,2966,3.512,2968,5.732,2995,3.744,2998,3.744,3169,4.054,3447,4.525,3448,4.525,3449,4.525,3450,4.525,3451,4.525,3452,4.525,3453,4.525,3454,4.525,3455,4.525,3456,4.525,3457,4.525,3458,4.525,3459,4.525,3460,4.525,3461,4.525,3462,4.525,3463,4.525,3464,4.525,3465,4.525,3466,4.525,3467,4.525,3468,4.525,3469,4.054,3470,4.525,3471,4.525,3472,6.378,3473,4.525,3474,4.054,3475,4.525,3476,4.525,3477,4.525,3478,4.525,3479,4.525,3480,4.525,3481,4.525,3482,4.525,3483,4.525,3484,4.525,3485,4.525,3486,4.525,3487,4.525,3488,4.525,3489,6.378]],["title/interfaces/ScalesIndex.html",[40,0.003,1699,2.329]],["body/interfaces/ScalesIndex.html",[3,0.187,4,0.175,5,0.175,10,0.331,12,0.844,13,0.654,17,0.663,20,0.005,24,0.311,28,0.259,34,0.851,39,0.388,40,0.005,41,0.928,42,1.159,47,1.159,75,1.088,78,0.002,79,0.003,80,0.002,85,0.784,95,1.809,97,1.797,108,0.838,110,1.464,117,1.551,124,1.772,126,2.094,132,2.427,134,0.838,140,1.904,161,1.901,164,1.35,175,1.797,178,2.136,179,0.617,183,0.828,192,1.464,222,1.977,225,2.015,227,1.822,245,3.756,280,2.476,281,0.874,285,1.713,303,2.326,309,0.96,326,2.787,334,1.846,336,1.431,337,2.053,368,2.348,379,3.868,441,2.706,576,1.929,763,1.873,764,2.498,765,1.208,775,2.693,777,2.427,778,1.587,780,4.003,802,2.205,841,4.275,884,3.883,1455,1.41,1490,2.326,1500,4.125,1599,2.973,1680,3.652,1682,1.64,1699,3.025,1718,2.964,1809,1.693,1899,0.722,1915,2.312,1919,2.349,1920,2.356,1944,3.13,2003,2.533,2022,2.205,2032,3.089,2035,2.053,2052,2.275,2053,2.014,2074,2.275,2075,2.275,2106,3.466,2139,4.275,2140,2.973,2141,4.296,2142,3.202,2144,4.582,2145,2.973,2146,2.973,2147,2.876,2148,3.081,2149,3.081,2150,3.081,2151,4.313,2152,4.516,2153,3.756,2154,1.431,2155,3.202,2156,2.876,2157,2.973,2158,3.202,2159,3.202,2160,5.79,2161,4.444,2162,3.868,2163,6.402,2164,2.787,2165,3.202,2166,4.444,2167,4.125,2168,2.632,2169,2.787,2170,2.787,2171,4.798,2172,4.794,2173,4.444,2174,2.876,2175,2.876,2176,4.794,2177,2.787,2178,2.787,2179,3.202,2180,3.202,2181,3.081,2182,2.787,2183,4.798,2184,3.202,2185,5.04,2186,2.787,2187,3.202,2188,3.202,2189,4.275,2190,3.202,2191,3.202,2192,3.202,2218,2.562,3490,4.765]],["title/classes/SequentialChartMarkerProvider.html",[0,0.088,3491,4.212]],["body/classes/SequentialChartMarkerProvider.html",[0,0.158,2,1.732,3,0.275,4,0.258,5,0.258,10,0.284,11,0.542,13,1.168,14,1.708,17,1.275,19,1.662,20,0.005,21,0.734,22,1.049,24,0.266,28,0.333,39,0.275,41,0.963,53,3.072,54,2.535,78,0.004,79,0.004,80,0.004,85,1.156,90,1.401,94,1.7,107,1.533,108,0.779,115,3.53,175,1.415,179,0.909,183,1.22,269,2.312,626,3.666,810,4.539,843,5.067,994,3.275,1069,5.808,1608,2.89,1821,3.404,2024,3.253,3002,4.923,3003,6.604,3004,6.604,3005,6.604,3006,6.604,3007,6.256,3008,6.604,3265,6.289,3491,7.039,3492,7.039,3493,7.566,3494,7.02,3495,6.289,3496,6.289,3497,7.02]],["title/classes/SequentialColorProvider.html",[0,0.088,1068,4.212]],["body/classes/SequentialColorProvider.html",[0,0.159,2,1.747,3,0.277,4,0.26,5,0.26,10,0.286,11,0.545,13,1.174,14,1.724,17,1.28,19,1.677,20,0.005,21,0.741,22,1.058,24,0.269,28,0.277,39,0.277,41,0.968,52,2.139,54,2.558,78,0.004,79,0.004,80,0.004,85,1.166,94,1.705,107,1.547,108,0.784,115,3.549,134,0.842,175,1.428,179,0.918,269,2.324,626,3.686,810,4.58,843,5.078,1051,6.346,1056,3.212,1068,7.078,1069,5.861,1821,3.422,2024,3.265,3002,4.967,3003,6.64,3004,6.64,3005,6.64,3006,6.64,3007,6.29,3008,6.64,3011,6.346,3492,7.078,3493,7.585,3495,6.346,3496,6.346,3498,7.084]],["title/classes/SequentialValueProvider.html",[0,0.088,3493,3.951]],["body/classes/SequentialValueProvider.html",[0,0.155,2,1.643,3,0.261,4,0.245,5,0.245,8,1.776,10,0.333,11,0.525,13,1.131,14,1.621,17,1.246,19,1.578,20,0.005,21,0.697,22,0.996,24,0.34,28,0.261,39,0.261,54,2.406,55,2.177,78,0.003,79,0.004,80,0.003,85,1.097,94,1.747,107,1.455,108,0.931,134,0.755,164,0.914,175,1.343,179,1.067,183,1.158,192,1.475,227,1.836,269,2.239,290,2.033,336,2.001,626,3.55,778,1.599,843,5.004,1052,3.031,1821,3.296,1920,2.337,2024,3.321,2392,5.171,3002,4.672,3003,6.395,3004,6.395,3005,6.395,3006,6.395,3007,6.059,3008,6.395,3013,5.969,3014,5.512,3492,7.733,3493,6.395,3499,9.347,3500,6.662,3501,6.662,3502,6.662,3503,6.662,3504,6.662,3505,8.24,3506,8.24,3507,6.662,3508,6.662,3509,6.662]],["title/classes/SideIndicatorAccessors.html",[0,0.088,2329,3.57]],["body/classes/SideIndicatorAccessors.html",[0,0.115,2,1.183,3,0.188,4,0.176,5,0.176,8,1.431,10,0.194,11,0.485,12,1.237,13,1.281,14,1.854,17,1.061,20,0.005,21,0.501,22,0.716,24,0.252,28,0.366,33,1.616,35,2.084,36,2.116,37,2.413,38,1.267,39,0.338,40,0.004,41,0.862,42,1.167,47,1.167,52,1.905,55,1.267,56,2.24,57,1.061,72,2.193,78,0.002,79,0.003,80,0.002,85,0.789,94,1.693,96,1.989,107,1.45,108,0.608,109,2.541,113,2.521,117,1.556,132,2.438,134,0.439,142,3.1,143,1.65,146,2.24,159,2.012,161,1.909,179,0.621,183,0.833,184,3.396,192,1.47,194,1.076,209,1.303,212,3.65,213,3.65,218,2.298,222,3.411,227,2.694,241,2.023,253,1.167,285,1.635,290,1.638,295,3.17,296,2.289,297,1.856,299,2.099,317,1.419,320,2.149,327,2.34,328,1.461,332,2.394,334,0.992,336,2.288,337,2.066,384,1.232,418,2.991,451,2.991,633,1.829,635,1.393,659,3.1,661,3.222,934,2.066,1054,1.44,1157,2.648,1165,3.038,1182,2.991,1183,2.991,1196,2.893,1197,2.991,1198,3.362,1254,2.581,1526,2.648,1607,1.703,1661,3.525,1665,4.753,1714,4.731,1725,4.143,1763,1.676,1818,2.648,1820,2.991,1921,2.359,1923,2.844,1940,2.543,2009,1.321,2035,2.066,2090,2.804,2314,5.342,2315,6.382,2316,7.362,2317,3.1,2318,6.046,2319,6.046,2320,3.222,2321,4.882,2322,3.721,2323,4.143,2324,5.583,2325,4.882,2326,3.721,2327,3.721,2328,4.656,2329,4.656,2330,3.721,2331,3.721,2332,4.882,2333,4.882,2334,3.721,2335,3.721,2336,3.525,2337,3.1,2338,3.721,2339,4.882,2340,3.525,2341,3.721,2342,5.154,2343,3.721,2344,5.912,2345,3.362,2346,3.721,2347,3.721,2348,3.721,2349,5.912,2350,3.721,2351,3.721,2352,3.721,2353,3.721,2354,3.721,2355,3.721,2356,3.721,2357,3.721,2358,3.721,2359,3.721,2360,3.721,2361,3.721,2362,3.525,2363,3.1,2364,3.721,2365,3.721,2366,3.222,2367,3.721,2368,3.721,2369,3.525,2370,3.721,3510,6.64,3511,4.794]],["title/classes/SparkChartAssist.html",[0,0.088,3512,4.561]],["body/classes/SparkChartAssist.html",[0,0.057,2,0.807,3,0.128,4,0.12,5,0.12,8,1.083,10,0.247,11,0.32,13,1.072,14,0.796,17,1.333,19,1.849,20,0.005,21,0.816,22,1.166,24,0.348,28,0.373,34,0.585,39,0.128,53,1.182,55,1.327,78,0.002,79,0.003,80,0.002,83,2.186,85,0.827,87,5.463,90,1.662,94,1.84,97,2.462,107,1.832,108,0.804,110,1.799,113,2.603,117,0.669,124,1.837,130,3.814,132,2.517,134,0.818,140,1.026,143,2.686,149,0.775,159,1.083,161,2.127,164,1.015,175,1.638,179,1.053,183,0.569,184,2.569,192,1.799,194,1.751,222,2.536,227,2.37,240,2.636,254,1.529,269,1.365,279,3.273,281,1.357,291,1.716,320,1.467,329,2.2,333,1.916,334,0.678,336,1.836,420,6.627,432,5.135,439,1.059,446,2.216,453,2.071,476,1.509,488,1.729,525,1.875,576,2,580,1.907,590,2.708,591,1.264,596,1.092,597,1.163,672,1.674,719,2.603,731,6.009,734,3.814,737,1.601,740,2.594,749,1.059,750,2.645,751,2.633,752,3.376,753,3.376,754,3.376,756,5.932,757,4.782,758,3.576,763,2.907,764,1.716,765,1.55,769,4.615,772,2.116,774,3.248,779,4.278,782,3.248,784,4.433,794,1.808,802,2.287,810,2.116,827,2.715,828,1.144,884,2.569,994,1.126,1044,2.708,1047,2.808,1052,2.506,1147,2.116,1153,2.853,1173,1.059,1174,1.915,1202,2.295,1207,2.407,1288,4.501,1491,3.694,1507,2.407,1608,2.158,1610,2.708,1680,4.311,1701,2.708,1746,2.708,1753,4.156,1967,2.01,2018,2.648,2053,1.384,2207,4.501,2324,3.248,2407,2.407,2507,5.058,2529,2.708,2593,4.156,2624,4.501,2646,2.933,2654,2.933,2671,2.708,2703,6.994,2719,5.673,2767,2.933,2768,2.933,2800,2.933,3491,2.708,3512,4.501,3513,9.632,3514,6.113,3515,6.113,3516,6.113,3517,8.128,3518,9.441,3519,5.024,3520,6.857,3521,6.113,3522,3.273,3523,5.024,3524,3.273,3525,3.273,3526,4.501,3527,3.273,3528,5.024,3529,5.024,3530,3.273,3531,5.024,3532,3.273,3533,5.024,3534,3.273,3535,3.273,3536,3.273,3537,3.273,3538,3.273,3539,3.273,3540,5.024,3541,6.113,3542,3.273,3543,3.273,3544,5.024,3545,3.273,3546,5.024,3547,6.857,3548,5.024,3549,5.024,3550,3.273,3551,3.273,3552,6.857,3553,5.024,3554,3.273,3555,3.273,3556,3.273,3557,2.933,3558,2.933,3559,3.273,3560,3.273,3561,2.933,3562,3.273,3563,3.273,3564,3.273,3565,3.273,3566,5.024,3567,5.024,3568,3.273,3569,7.397,3570,6.113,3571,5.024,3572,3.273,3573,6.113,3574,3.273,3575,3.273,3576,3.273,3577,3.273,3578,3.273,3579,3.273,3580,3.273,3581,3.273,3582,3.273,3583,3.273,3584,3.273,3585,3.273,3586,3.273,3587,7.806,3588,3.273,3589,5.024,3590,7.397,3591,3.273,3592,3.273,3593,6.857,3594,3.273,3595,3.273,3596,3.273,3597,3.273,3598,3.273,3599,3.273,3600,3.273,3601,3.273,3602,3.273,3603,3.273,3604,6.113,3605,5.024,3606,3.273,3607,3.273,3608,3.273,3609,3.273,3610,3.273,3611,3.273,3612,3.273,3613,3.273,3614,3.273,3615,3.273,3616,6.113,3617,3.273,3618,3.273,3619,3.273,3620,3.273,3621,3.273]],["title/classes/StatusAccessors.html",[0,0.088,2383,3.743]],["body/classes/StatusAccessors.html",[0,0.117,2,1.668,3,0.265,4,0.248,5,0.248,7,2.611,8,1.792,10,0.273,11,0.53,12,1.199,13,1.236,14,1.645,17,1.343,19,1.601,20,0.005,21,0.707,22,1.01,24,0.342,28,0.353,33,2.023,38,1.786,39,0.353,40,0.004,41,0.941,54,2.441,57,1.497,78,0.003,79,0.004,80,0.003,94,1.678,96,4.074,107,1.816,108,0.762,134,0.619,159,2.025,192,1.841,198,5.188,201,6.482,203,5.188,204,6.057,205,4.358,210,3.376,255,2.97,417,3.003,2280,6.057,2380,6.621,2381,8.125,2382,7.292,2383,6.114,2384,7.45,2385,7.45,2386,6.879,2387,5.593,2388,5.593,2389,5.593,2390,5.593,3277,6.057,3622,6.761,3623,6.761,3624,6.761,3625,6.761,3626,6.761]],["title/classes/SvgMarker.html",[0,0.088,3627,4.212]],["body/classes/SvgMarker.html",[0,0.158,2,1.721,3,0.273,4,0.256,5,0.256,8,1.826,10,0.282,14,1.697,17,1.271,19,2.007,20,0.005,21,0.886,22,1.266,24,0.322,28,0.332,39,0.273,52,2.119,78,0.004,79,0.004,80,0.004,85,1.148,94,1.767,134,0.932,175,1.708,179,1.098,183,1.212,192,1.544,269,2.303,315,4.51,316,4.51,663,5.107,672,3.567,994,3.142,1358,3.273,1820,5.288,1821,3.391,1991,3.732,1992,3.331,2211,7.012,3213,6.249,3214,7.593,3216,6.249,3233,7.593,3627,7.012,3628,9.496,3629,8.475,3630,8.475,3631,6.975,3632,6.975,3633,6.975,3634,6.975,3635,6.975,3636,8.475,3637,6.975]],["title/classes/TextColorProvider.html",[0,0.088,1070,4.212]],["body/classes/TextColorProvider.html",[0,0.098,2,1.399,3,0.222,4,0.208,5,0.208,10,0.229,11,0.474,14,1.38,17,1.155,19,1.343,20,0.005,21,0.593,22,0.847,24,0.315,28,0.345,39,0.222,41,0.841,52,2.476,55,1.965,78,0.003,79,0.004,80,0.003,85,0.933,94,1.573,107,1.239,108,0.519,115,3.085,129,2.569,134,0.76,164,1.209,175,1.672,179,0.735,183,0.986,192,1.646,227,2.795,269,2.021,303,3.63,309,1.143,334,1.718,336,1.703,810,5.365,825,2.9,843,3.803,948,6.44,1052,2.983,1056,2.684,1063,5.081,1064,5.081,1065,5.081,1066,7.097,1067,5.081,1070,6.152,1080,4.692,1082,4.692,1089,8.691,1090,5.081,1358,2.872,1490,2.768,1501,4.402,1821,2.975,2024,2.948,2105,4.35,2156,3.422,3002,3.977,3263,6.662,3266,5.081,3638,7.436,3639,8.297,3640,8.807,3641,8.297,3642,5.671,3643,5.671,3644,5.671,3645,5.671,3646,5.081,3647,5.671,3648,5.081,3649,5.671,3650,5.081,3651,5.671,3652,5.671,3653,5.671,3654,5.671,3655,5.671,3656,7.436,3657,7.436,3658,5.671,3659,7.436,3660,5.671,3661,5.671,3662,5.671,3663,4.692,3664,5.671,3665,5.671,3666,5.671,3667,7.436,3668,7.436,3669,5.671,3670,8.807,3671,5.671,3672,8.807,3673,5.671,3674,8.807,3675,8.807,3676,7.436,3677,5.671,3678,5.671,3679,5.671,3680,7.436,3681,5.671,3682,8.297,3683,5.671,3684,5.671,3685,5.671,3686,5.671]],["title/injectables/ThresholdsService.html",[836,3.57,3181,3.951]],["body/injectables/ThresholdsService.html",[0,0.041,1,4.014,3,0.093,4,0.275,5,0.087,9,5.59,10,0.096,11,0.248,12,1.261,13,1.321,14,0.578,17,1.31,19,1.834,20,0.005,21,0.81,22,1.158,23,3.499,24,0.303,28,0.353,33,1.652,38,0.628,39,0.093,42,1.744,47,1.821,54,0.858,55,0.628,57,1.399,59,2.896,75,1.11,78,0.001,79,0.002,80,0.001,85,1.232,89,0.594,90,1.04,91,1.39,94,1.661,96,2.375,104,0.628,107,1.634,108,0.833,110,1.503,117,1.628,124,1.044,126,1.711,134,0.218,149,1.772,159,1.718,161,1.817,164,0.679,175,1.561,179,0.308,183,0.413,192,1.587,209,2.614,212,3.452,213,3.37,214,1.065,218,1.089,222,1.616,225,1.925,227,2.641,234,0.735,240,1.17,241,1.745,247,2.478,253,0.948,269,1.844,280,0.987,281,1.159,284,1.966,285,1.81,290,0.586,291,1.245,293,1.434,299,2.135,309,0.479,323,3.223,325,2.129,327,1.16,334,1.808,336,1.486,339,2.731,368,0.735,379,1.39,417,2.496,435,2.279,439,0.769,455,1.703,482,1.711,484,2.811,496,1.215,524,1.058,580,2.941,633,0.935,750,2.874,759,1.859,762,3.2,763,1.531,765,1.451,768,2.351,777,0.872,781,1.024,783,2.618,802,1.299,804,2.042,810,3.2,813,2.43,836,2.731,837,1.844,839,2.864,843,2.928,884,1.215,904,1.597,918,2.129,937,1.044,948,4.904,1052,2.428,1056,1.601,1087,1.966,1119,1.747,1151,2.859,1186,1.666,1235,2.864,1236,4.095,1310,3.219,1317,1.241,1358,0.918,1373,3.023,1392,3.223,1431,1.479,1437,1.844,1455,2.121,1490,1.16,1593,4.209,1607,3.405,1623,2.129,1672,1.966,1680,1.312,1714,1.859,1725,3.572,1753,3.223,1790,3.49,1819,1.966,1820,4.235,1821,0.951,1874,1.945,1920,0.948,1923,1.454,1940,2.217,1941,0.872,1946,0.934,1952,1.558,1959,0.934,1960,0.831,1976,0.951,1983,1.34,1990,1.945,2007,3.607,2008,1.945,2010,2.817,2054,3.162,2059,1.312,2068,1.16,2071,3.079,2093,2.518,2098,1.278,2100,2.095,2104,4.668,2108,2.518,2115,1.483,2119,3.702,2131,1.536,2167,3.088,2168,3.162,2172,1.278,2261,2.731,2314,1.666,2316,3.639,2324,1.536,2325,1.747,2329,4.014,2332,1.747,2333,1.747,2371,4.443,2373,4.737,2376,3.023,2377,1.844,2378,3.023,2379,6.187,2380,1.747,2383,1.747,2463,1.966,2478,1.966,2489,1.844,2669,3.023,2689,5.931,2720,3.49,2756,2.129,2787,3.223,2949,3.023,3037,2.731,3088,3.49,3090,2.129,3114,2.864,3127,2.731,3140,1.666,3181,3.023,3217,3.49,3264,2.129,3315,4.737,3317,1.966,3364,3.49,3382,4.435,3557,2.129,3558,2.129,3663,4.737,3687,8.166,3688,2.376,3689,3.895,3690,3.895,3691,4.95,3692,3.895,3693,3.895,3694,3.895,3695,3.895,3696,3.895,3697,3.895,3698,3.895,3699,3.895,3700,2.376,3701,6.788,3702,3.895,3703,2.376,3704,9.804,3705,4.95,3706,7.168,3707,2.376,3708,2.376,3709,3.223,3710,2.129,3711,2.376,3712,4.95,3713,2.376,3714,2.376,3715,4.435,3716,2.129,3717,1.966,3718,2.376,3719,2.129,3720,6.319,3721,5.725,3722,2.376,3723,4.95,3724,2.376,3725,3.895,3726,6.788,3727,5.725,3728,5.725,3729,2.376,3730,3.49,3731,4.95,3732,5.725,3733,3.49,3734,2.376,3735,2.376,3736,2.376,3737,2.376,3738,2.376,3739,3.895,3740,2.376,3741,6.788,3742,6.319,3743,3.895,3744,2.376,3745,3.895,3746,3.895,3747,5.725,3748,2.376,3749,3.49,3750,3.895,3751,3.895,3752,2.376,3753,5.725,3754,3.895,3755,3.895,3756,3.49,3757,3.895,3758,3.49,3759,3.895,3760,2.376,3761,2.376,3762,2.376,3763,2.376,3764,2.376,3765,3.895,3766,2.376,3767,2.376,3768,3.895,3769,2.376,3770,4.95,3771,2.376,3772,4.95,3773,2.376,3774,2.376,3775,2.376,3776,2.376,3777,3.895,3778,2.376,3779,2.376,3780,2.376,3781,2.376,3782,3.895,3783,2.376,3784,2.376,3785,2.376,3786,2.376,3787,2.376,3788,2.376,3789,3.895,3790,2.376,3791,2.376,3792,2.376,3793,2.376,3794,2.376,3795,4.95,3796,2.376,3797,2.376,3798,2.376,3799,2.376,3800,3.895,3801,2.376,3802,2.376,3803,2.376,3804,2.376,3805,3.895,3806,2.376,3807,3.895,3808,2.376,3809,2.376,3810,2.376,3811,2.376,3812,2.376,3813,2.376,3814,2.376,3815,2.376,3816,2.376,3817,2.376,3818,2.376,3819,2.376,3820,2.376,3821,2.376,3822,2.376,3823,2.376,3824,2.376,3825,2.376,3826,2.376,3827,2.376,3828,3.895,3829,2.376,3830,2.376,3831,2.376,3832,3.895,3833,2.376,3834,2.376,3835,5.725,3836,3.895,3837,7.168,3838,2.376,3839,2.376,3840,2.376,3841,2.376,3842,2.376,3843,2.376,3844,2.376,3845,2.376,3846,2.376,3847,2.376,3848,2.376,3849,2.376,3850,2.376,3851,2.376,3852,2.376,3853,2.376,3854,2.376,3855,2.376,3856,2.376,3857,2.376,3858,4.95,3859,2.376,3860,4.95,3861,2.376,3862,2.376,3863,4.95,3864,2.376,3865,4.95,3866,4.95,3867,4.95,3868,4.95,3869,4.95,3870,4.95,3871,6.319,3872,2.376,3873,2.376,3874,2.376,3875,2.376,3876,2.376,3877,2.376,3878,2.376,3879,3.895,3880,2.376,3881,3.895,3882,2.376,3883,2.376,3884,3.895,3885,2.376,3886,2.376,3887,2.376,3888,2.376,3889,2.376,3890,2.376]],["title/classes/TimeScale.html",[0,0.088,324,4.212]],["body/classes/TimeScale.html",[0,0.08,2,1.148,3,0.182,4,0.171,5,0.171,10,0.188,11,0.414,14,1.133,17,1.425,19,2.304,20,0.005,21,1.017,22,1.454,24,0.379,28,0.318,39,0.182,41,0.736,75,1.224,78,0.004,79,0.003,80,0.002,85,0.766,91,3.806,94,1.879,95,1.768,97,1.768,107,1.421,108,0.744,115,4.189,124,1.248,132,3.136,134,0.744,140,2.002,164,1.369,175,1.976,192,1.891,216,4.76,227,1.793,269,1.768,280,2.595,291,4.256,309,1.311,324,5.383,336,1.398,672,2.381,765,1.901,780,2.273,1920,2.321,1944,2.95,2141,3.829,2144,3.927,2151,4.26,2152,3.41,2153,2.644,2162,3.806,2169,5.315,2170,5.315,2172,3.499,2174,4.526,2175,4.526,2176,5.064,2177,3.806,2178,3.806,2182,2.724,2183,4.387,2185,5.509,2186,3.806,2297,5.694,2298,4.784,2299,5.694,2962,3.852,2963,5.829,2964,5.383,2965,5.829,2966,5.05,2968,3.614,2969,4.171,2970,4.171,2971,4.171,2972,4.171,2977,4.171,2978,4.171,2979,4.171,2980,4.171,2981,4.171,2982,4.171,2983,4.171,2984,4.171,2985,4.171,2986,4.171,2987,4.171,2988,4.171,2989,4.171,2990,4.171,2991,4.171,2993,4.171,2994,4.171,2995,3.852,2996,4.171,2997,4.171,2998,3.852,3158,4.171,3170,4.171,3891,8.851,3892,7.5,3893,4.656,3894,7.669,3895,4.656,3896,4.656,3897,5.829,3898,4.656,3899,4.656,3900,4.656,3901,4.656]],["title/classes/UtilityService.html",[0,0.088,329,3.422]],["body/classes/UtilityService.html",[0,0.069,2,0.991,3,0.157,4,0.148,5,0.148,10,0.326,12,0.747,13,0.551,17,1.211,19,2.111,20,0.005,21,0.881,22,1.259,24,0.338,28,0.33,39,0.157,42,1.681,47,1.424,55,1.547,57,1.865,75,0.839,78,0.004,79,0.003,80,0.002,85,0.661,94,1.356,96,4.131,107,0.877,108,0.857,110,1.529,112,1.578,117,1.821,126,1.764,134,0.739,146,1.876,149,1.386,164,1.403,175,1.797,179,0.758,192,2.162,213,1.697,222,2.429,225,2.313,227,2.608,241,2.459,269,1.591,280,1.751,281,0.737,285,1.605,290,1.704,315,2.596,316,2.596,329,3.934,334,1.43,336,2.677,371,3.322,411,1.242,487,3.815,607,2.857,664,1.26,775,2.814,777,2.536,827,2.149,828,2.415,843,2.994,884,3.882,921,3.598,1087,4.843,1358,2.668,1419,1.525,1455,2.045,1680,2.218,1697,2.816,1698,2.699,1717,2.159,1913,1.578,1920,2.248,1937,1.404,2141,4.14,2156,4.169,2168,2.218,2172,4.677,2176,3.715,2233,4.105,2299,2.816,2366,2.699,2477,2.596,2489,3.117,2492,3.322,2503,3.322,2516,3.117,2540,4.843,2689,3.322,3115,2.952,3411,3.598,3730,3.598,3902,4.016,3903,5.854,3904,5.854,3905,5.854,3906,5.854,3907,5.854,3908,5.854,3909,8.426,3910,4.016,3911,4.016,3912,4.016,3913,5.854,3914,4.016,3915,6.908,3916,5.854,3917,4.016,3918,9.36,3919,4.016,3920,4.016,3921,4.016,3922,4.016,3923,4.016,3924,8.426,3925,6.908,3926,4.016,3927,5.854,3928,4.016,3929,4.016,3930,5.854,3931,4.016,3932,6.908,3933,4.016,3934,6.908,3935,7.592,3936,7.592,3937,4.016,3938,4.016,3939,4.016,3940,4.016,3941,4.016,3942,4.016,3943,4.016,3944,5.854,3945,4.016,3946,4.016,3947,8.426,3948,4.016,3949,4.016,3950,4.016,3951,4.016,3952,9.36,3953,4.016,3954,4.016,3955,4.016,3956,4.016,3957,3.598,3958,5.854,3959,4.016,3960,5.854,3961,4.016,3962,4.016,3963,4.016,3964,5.854,3965,6.908,3966,4.016,3967,4.016,3968,4.016,3969,4.016,3970,4.016,3971,4.016,3972,4.016,3973,6.908,3974,4.016,3975,4.016,3976,4.016,3977,4.016,3978,4.016,3979,4.016,3980,4.016,3981,4.016,3982,4.016,3983,4.016,3984,4.016,3985,4.016,3986,4.016,3987,4.016,3988,9.237,3989,4.016,3990,4.016,3991,4.016,3992,6.908,3993,4.016,3994,4.016,3995,4.016,3996,4.016,3997,4.016,3998,6.908,3999,4.016,4000,6.908,4001,4.016,4002,4.016,4003,4.016,4004,5.854,4005,4.016,4006,4.016,4007,4.016,4008,4.016,4009,4.016,4010,4.016,4011,5.854,4012,4.016,4013,4.016,4014,4.016]],["title/classes/VerticalBarAccessors.html",[0,0.088,4015,4.561]],["body/classes/VerticalBarAccessors.html",[0,0.11,2,1.576,3,0.25,4,0.235,5,0.235,7,2.468,10,0.258,11,0.511,12,1.28,13,1.377,14,1.555,15,5.63,16,5.086,17,1.396,19,1.513,20,0.005,21,0.668,22,0.955,23,3.119,24,0.381,28,0.344,38,1.689,39,0.25,41,0.908,56,3.751,57,2.1,58,7.083,59,5.909,75,0.915,78,0.003,79,0.004,80,0.003,115,4.018,159,1.73,198,6.132,200,4.56,203,5.746,205,5.076,206,4.56,207,5.287,208,5.287,210,3.192,255,4.169,291,4.208,994,2.199,1052,3.33,1882,7.193,1883,5.287,1884,5.726,1885,5.726,1886,5.726,1887,5.726,1888,5.726,1889,4.132,1890,5.726,1891,4.132,1892,5.726,1893,4.132,1894,7.193,1895,4.132,1897,5.726,1898,5.726,2294,4.295,4015,7.193,4016,9.21]],["title/classes/XYAccessors.html",[0,0.088,2259,3.422]],["body/classes/XYAccessors.html",[0,0.121,2,1.732,3,0.275,4,0.258,5,0.258,7,2.711,8,1.833,10,0.284,11,0.542,12,1.244,17,0.977,20,0.005,24,0.266,28,0.275,33,2.316,34,1.635,38,1.855,39,0.333,40,0.004,42,2.316,47,2.316,57,2.107,60,5.718,62,5.718,75,1.006,78,0.004,79,0.004,80,0.004,94,1.635,107,2,108,0.839,134,0.643,159,1.833,216,3.775,241,2.593,778,1.685,781,3.025,1151,4.249,1972,3.176,1974,2.271,2154,2.108,2172,4.575,2258,6.153,2259,5.718,2262,4.107,2263,4.107,2323,5.308,2394,7.623,2395,7.623,2396,7.039,4017,7.02]],["title/classes/XYGridConfig.html",[0,0.088,87,3.422]],["body/classes/XYGridConfig.html",[0,0.091,2,1.299,3,0.206,4,0.194,5,0.194,8,1.526,10,0.213,11,0.451,14,1.946,17,1.346,20,0.005,24,0.356,28,0.335,39,0.206,41,0.801,75,1.225,78,0.003,79,0.004,80,0.003,83,2.447,84,3.287,87,5.376,90,1.408,94,1.81,95,3.247,96,3.812,97,2.497,98,5.881,99,5.881,100,3.995,101,3.38,102,1.897,103,3.308,104,1.871,106,4.367,107,2.153,108,0.874,109,3.132,110,2.182,111,6.498,112,3.69,113,3.565,114,2.348,115,3.548,117,1.95,118,6.31,119,4.759,120,4.966,122,3.456,124,2.391,126,3.111,127,3.694,128,4.858,129,2.495,130,5.858,131,3.873,132,3.14,133,3.996,134,0.483,135,3.541,136,3.873,137,2.41,138,3.179,139,3.873,140,1.076,141,3.873,143,2.753,144,2.461,150,4.457,152,2.694,161,1.515,170,4.359,177,6.344,183,0.916,197,4.759,245,2.992,254,2.461,257,4.089,258,4.359,407,4.359,488,2.753,552,2.515,626,2.27,1507,5.207,1840,4.72,1862,4.72,1868,2.761,1869,2.833,1870,2.833,1871,2.833,1872,2.833,1873,2.833,1874,2.631,1875,2.833,2066,4.301,3091,4.72,3182,4.089,4018,9.19,4019,5.268,4020,5.268,4021,5.268,4022,5.268,4023,5.268,4024,5.268,4025,7.081,4026,7.081,4027,5.268,4028,5.268,4029,5.268,4030,5.268,4031,5.268,4032,5.268]],["title/classes/XYRenderer.html",[0,0.088,2323,3.176]],["body/classes/XYRenderer.html",[0,0.072,2,1.034,3,0.164,4,0.222,5,0.154,10,0.395,11,0.385,12,1.277,13,1.31,17,1.36,19,2.236,20,0.005,21,0.998,22,1.394,24,0.371,28,0.277,34,0.748,38,1.107,39,0.164,41,0.683,42,1.02,47,1.02,53,1.513,75,1.109,78,0.002,79,0.003,80,0.002,85,1.451,94,1.829,96,2.505,97,1.641,107,1.691,108,0.752,110,1.567,115,4.026,117,0.856,134,0.783,143,2.078,164,1.238,175,1.903,179,1.003,192,1.714,194,1.355,209,2.637,216,4.414,218,2.607,227,1.155,242,2.816,247,2.744,266,4.576,269,1.641,270,4.576,272,3.904,273,3.904,279,2.882,280,2.168,281,1.108,283,1.296,285,1.954,290,2.109,294,3.247,295,3.697,296,3.697,297,2.39,299,2.723,303,2.947,306,3.165,327,2.045,333,2.39,336,2.125,343,2.614,368,1.867,384,2.198,394,2.253,395,2.816,396,2.816,411,1.296,439,1.355,545,1.664,592,2.947,607,2.045,704,1.813,718,1.738,733,1.319,737,2.927,777,2.843,791,1.355,797,2.196,806,2.093,843,3.961,937,1.123,1151,2.093,1157,3.334,1253,2.816,1256,1.489,1280,5.205,1310,2.624,1358,1.618,1455,2.095,1490,2.947,1502,2.709,1521,4.995,1592,1.564,1665,2.614,1681,3.081,1821,2.831,1823,2.314,1851,3.081,1912,2.474,1921,1.489,1922,1.123,1937,1.465,1939,1.591,1940,1.867,1941,1.538,1944,2.644,1983,1.442,1984,1.564,2004,2.014,2013,1.591,2017,2.254,2033,2.093,2086,2.38,2096,2.614,2126,3.532,2138,2.451,2141,3.471,2171,3.532,2317,2.709,2323,3.767,2337,2.709,2345,2.938,2363,4.576,2477,2.709,3037,2.938,3095,4.686,3096,6.011,3097,4.686,3098,4.686,3099,4.686,3100,4.686,3101,4.686,3102,3.467,3103,3.252,3104,3.467,3105,3.467,3106,3.467,3108,5.493,3111,3.252,3113,3.467,3114,3.081,3115,3.081,3116,4.686,3117,4.439,3118,3.252,3119,6.011,3120,3.467,3121,3.252,3122,3.252,3123,3.252,3124,3.467,3125,2.816,3126,3.252,3127,4.234,3128,3.252,3129,3.081,3130,3.252,3131,3.467,3132,3.252,3133,3.467,3134,5.493,3135,3.252,3136,5.694,3137,3.467,3138,2.709,3139,3.467,3140,4.234,3141,3.252,3142,3.467,3143,3.252,3144,3.467,3145,3.252,3146,3.467,3147,3.252,4033,6.038,4034,4.19,4035,4.19,4036,4.19,4037,4.19,4038,4.19,4039,4.19,4040,4.19,4041,4.19]],["title/interfaces/ZoneCross.html",[40,0.003,2376,3.951]],["body/interfaces/ZoneCross.html",[3,0.283,4,0.265,5,0.265,10,0.291,11,0.551,20,0.005,22,1.435,24,0.352,28,0.283,39,0.363,40,0.004,78,0.004,79,0.004,80,0.004,134,0.88,164,1.187,212,4.325,213,4.325,281,1.587,309,1.454,368,2.231,417,3.276,786,2.298,1607,2.563,1725,4.501,1899,1.093,2007,3.284,2168,5.568,2371,5.599,2372,5.968,2373,5.968,2374,6.463,2375,6.463,2376,6.713,2377,5.599,2378,5.599,2379,5.599]],["title/classes/ZoomPlugin.html",[0,0.088,2408,4.212]],["body/classes/ZoomPlugin.html",[0,0.072,2,1.028,3,0.163,4,0.153,5,0.153,10,0.168,11,0.383,12,1.046,14,1.014,17,1.327,19,0.987,20,0.005,21,0.629,22,0.623,24,0.311,28,0.382,39,0.236,40,0.002,41,0.681,55,2.462,75,0.862,78,0.003,79,0.003,80,0.002,83,2.013,89,1.764,90,1.272,94,1.803,96,3.541,97,1.917,103,1.947,104,1.589,107,1.541,108,0.646,110,0.923,112,1.638,115,3.398,117,1.228,124,1.612,134,0.382,140,0.851,143,2.658,144,1.947,161,2.029,164,1.171,175,1.773,179,1.207,183,0.724,192,1.948,194,0.935,222,2.495,227,2.482,254,3.297,269,1.634,297,1.681,309,1.422,310,2.129,315,2.695,316,2.695,317,1.234,320,1.868,332,2.082,336,1.806,347,3.065,418,2.6,436,2.241,443,2.785,444,2.846,446,1.865,447,2.846,459,1.78,464,1.028,465,2.87,466,2.6,471,2.6,472,2.6,473,2.6,474,2.6,476,1.806,524,1.133,545,1.944,583,2.302,584,2.302,587,2.515,596,2.006,597,1.481,614,3.448,635,0.874,663,2.241,699,3.448,702,1.888,749,1.348,791,1.733,794,2.302,828,1.457,884,2.132,937,1.117,1010,2.082,1124,2.6,1125,2.6,1157,3.897,1167,3.734,1168,3.448,1173,1.348,1174,2.438,1182,2.6,1183,2.6,1196,2.515,1197,2.6,1254,2.037,1358,1.61,1455,1.234,1461,2.923,1504,3.235,1667,2.185,1697,2.923,1698,2.801,1700,2.082,1709,3.448,1748,3.448,1763,1.457,1806,4.976,1817,4.388,1828,3.235,1874,2.082,1912,1.457,1922,1.612,1934,1.61,2021,2.323,2031,1.907,2034,2.185,2044,1.831,2056,2.241,2068,2.034,2105,2.438,2141,2.696,2236,2.801,2237,4.042,2320,2.801,2366,2.801,2397,7.279,2398,8.069,2399,6.322,2400,5.388,2401,5.388,2402,5.388,2403,8.451,2404,3.448,2405,3.448,2406,3.734,2407,3.065,2408,4.976,2409,3.734,2410,4.976,2411,3.734,2412,3.448,2413,3.734,2414,3.734,2415,3.734,2416,3.734,2417,3.734,2418,3.734,2419,3.734,2420,3.734,2421,5.477,2422,5.996,2423,3.734,2424,3.734,2425,3.734,2426,3.734,2427,3.734,2428,3.734,2429,3.734,2430,3.734,2431,3.734,2432,3.734,2433,3.734,2434,3.235,2435,3.734,2436,3.734,2437,3.734,2438,3.734,2439,3.734,2440,3.734,2441,3.734,2442,3.734,2443,3.734,2444,3.734,2445,3.734,2446,3.734,2447,3.734,2448,3.734,2449,6.777,2450,3.734,2451,3.734,2452,3.734,2453,3.734,2454,3.734,2455,3.734,2456,3.734,2457,5.388,2458,3.734,2459,3.734,2460,3.734,2461,3.734,2462,3.734,2463,3.448,2464,3.734,2465,3.734,2466,3.734,2467,3.734,2468,3.734,2469,3.734,2470,3.734,2471,3.734,2472,3.734,2473,3.734,2474,3.734,2475,3.734,2476,3.448,2477,3.889,2478,3.448,2479,3.734,2480,3.734,2481,3.734,2482,3.734,2483,3.734,2484,6.322,2485,5.388,2486,6.921,2487,3.734,2488,5.388,2489,5.996,2490,5.388,2491,3.734,2492,4.976,2493,3.734,2494,5.388,2495,6.322,2496,3.734,2497,3.734,2498,3.734,2499,3.734,2500,3.734,2501,3.734,2502,3.734,2503,3.448,2504,3.734,2505,3.734,2506,3.734,2515,3.734,4042,4.168,4043,4.168,4044,4.168,4045,4.168]],["title/dependencies.html",[3174,4.746,4046,4.266]],["body/dependencies.html",[20,0.005,52,1.939,78,0.004,79,0.005,80,0.004,91,4.536,117,1.584,309,1.982,310,2.487,876,6.947,877,6.947,878,6.947,1119,5.701,1911,3.486,2682,6.415,3174,7.005,3710,6.947,4047,7.754,4048,7.754,4049,7.754,4050,7.754,4051,7.754,4052,9.026,4053,9.026,4054,9.026,4055,7.754,4056,7.754]],["title/miscellaneous/enumerations.html",[4057,2.991,4058,5.479]],["body/miscellaneous/enumerations.html",[10,0.276,12,1.068,20,0.005,78,0.003,79,0.004,80,0.003,90,1.124,107,1.827,108,0.963,183,1.454,212,3.823,213,3.823,281,1.253,332,4.178,333,2.338,404,3.908,459,2.021,602,7.495,659,4.415,661,5.622,722,5.3,731,4.26,732,4.589,733,1.491,734,4.26,785,4.415,787,5.409,788,5.409,789,5.409,790,5.409,1173,2.706,1256,2.972,1441,4.178,1900,2.683,1922,1.83,1925,3.176,1927,3.347,1930,3.347,1931,3.347,1933,3.347,1934,3.231,2007,2.592,2082,4.415,2101,5.409,2102,5.409,2103,5.409,2104,5.219,2105,4.894,2372,5.649,2377,5.3,2378,5.3,2379,6.493,2627,6.921,2678,5.3,4057,4.788,4058,6.117,4059,8.248,4060,6.117,4061,6.828,4062,6.828]],["title/index.html",[10,0.172,954,3.311,4063,3.529]],["body/index.html",[5,0.301,12,1.045,20,0.005,28,0.321,32,3.079,78,0.003,79,0.004,80,0.003,83,1.717,90,1.347,91,5.447,92,4.621,110,1.459,132,2.419,149,1.561,183,1.146,255,3.596,285,1.31,310,1.816,417,2.198,429,5.904,432,3.855,435,3.855,477,2.895,482,2.895,503,3.37,552,3.146,763,3.835,768,3.977,791,1.479,825,3.37,842,5.904,858,5.452,954,6.353,1053,5.452,1056,2.132,1194,4.846,1394,5.452,1395,4.429,1502,4.261,1593,4.846,1608,1.922,1825,5.904,1902,2.636,1906,3.561,1912,2.304,1968,2.545,1985,2.636,2018,3.161,2068,3.995,2086,4.649,2152,3.454,2273,4.846,2678,5.115,2719,5.452,2949,5.115,2964,5.452,3039,5.904,3138,4.261,3172,6.546,3175,5.452,3176,5.452,3186,5.904,3210,5.904,3238,4.846,3259,5.904,3717,5.452,3756,5.904,3957,5.904,4063,6.772,4064,5.452,4065,6.59,4066,6.59,4067,5.904,4068,6.59,4069,6.59,4070,6.59,4071,6.59,4072,6.59,4073,6.59,4074,6.59,4075,6.59,4076,6.59,4077,6.59,4078,6.59,4079,6.59,4080,6.59,4081,6.59,4082,6.59,4083,6.59,4084,5.904,4085,6.59,4086,6.59,4087,5.904,4088,6.59,4089,6.59,4090,8.185,4091,6.59,4092,5.904,4093,6.59,4094,5.904,4095,6.59,4096,5.904,4097,6.59,4098,6.59,4099,6.59,4100,6.59,4101,6.59,4102,6.59,4103,8.185,4104,6.59,4105,6.59,4106,6.59,4107,8.185,4108,6.59,4109,6.59,4110,6.59,4111,5.904,4112,5.452,4113,5.452,4114,5.904,4115,5.452]],["title/license.html",[954,3.311,4063,3.529,4116,3.822]],["body/license.html",[0,0.061,4,0.338,5,0.315,17,0.489,20,0.003,21,0.554,28,0.137,78,0.003,79,0.003,80,0.002,85,0.578,132,1.288,180,3.55,183,0.61,184,1.795,213,1.484,240,2.685,253,0.854,297,1.481,336,1.054,379,4.692,456,2.269,459,1.039,580,2.698,701,3.144,737,1.118,740,1.085,755,2.269,771,1.247,813,2.19,816,1.379,839,2.581,858,2.904,928,2.904,1054,2.409,1151,1.753,1221,2.359,1234,2.046,1358,1.356,1431,1.332,1502,5.542,1649,1.332,1679,3.144,1725,3.305,1791,3.144,1821,3.052,1823,2.926,1868,2.777,1899,0.532,1904,2.843,1915,3.255,1971,1.404,1977,1.404,1981,1.404,1983,2.446,1997,1.404,2009,1.959,2010,1.379,2017,1.31,2018,1.356,2028,4.938,2037,1.606,2038,3.524,2042,4.845,2063,2.849,2068,2.586,2071,2.849,2077,2.926,2121,2.269,2136,3.981,2146,2.19,2147,3.851,2154,2.291,2267,2.461,2268,2.581,2272,3.895,2522,3.144,2678,2.724,2682,2.904,2696,8.673,2787,5.279,2949,7.898,2957,3.144,3007,2.581,3125,2.359,3129,3.895,3140,2.461,3182,2.724,3301,3.144,3340,3.144,3356,3.144,3357,3.144,3363,6.368,3474,3.144,3526,5.717,3709,8.053,3717,2.904,3733,3.144,3749,3.144,3758,3.144,3894,2.904,4067,3.144,4084,5.717,4087,5.717,4092,5.717,4094,6.835,4096,3.144,4116,9.101,4117,7.108,4118,6.381,4119,3.51,4120,3.51,4121,3.51,4122,8.773,4123,9.31,4124,7.108,4125,7.629,4126,9.484,4127,8.941,4128,3.51,4129,3.51,4130,8.941,4131,9.204,4132,7.629,4133,5.297,4134,3.51,4135,7.629,4136,3.51,4137,3.51,4138,7.108,4139,3.51,4140,8.773,4141,7.108,4142,3.51,4143,6.381,4144,5.297,4145,3.51,4146,3.51,4147,5.297,4148,3.51,4149,5.297,4150,3.51,4151,3.51,4152,3.51,4153,3.51,4154,3.51,4155,3.51,4156,3.51,4157,3.51,4158,6.381,4159,5.297,4160,3.51,4161,3.51,4162,8.021,4163,5.297,4164,6.381,4165,6.381,4166,3.51,4167,3.144,4168,3.51,4169,3.51,4170,3.51,4171,3.51,4172,6.381,4173,5.297,4174,3.51,4175,3.51,4176,8.773,4177,5.297,4178,3.51,4179,5.297,4180,9.68,4181,3.51,4182,3.51,4183,3.51,4184,3.51,4185,5.297,4186,3.51,4187,3.51,4188,3.51,4189,3.51,4190,7.108,4191,7.629,4192,3.51,4193,5.297,4194,7.108,4195,5.297,4196,3.51,4197,7.629,4198,5.297,4199,3.51,4200,3.51,4201,6.381,4202,3.51,4203,3.51,4204,3.51,4205,3.51,4206,5.297,4207,3.51,4208,3.51,4209,3.51,4210,6.381,4211,3.51,4212,3.51,4213,3.51,4214,3.51,4215,3.51,4216,7.108,4217,8.941,4218,3.51,4219,5.297,4220,6.381,4221,5.297,4222,5.297,4223,5.297,4224,6.381,4225,5.297,4226,6.381,4227,5.297,4228,5.297,4229,5.297,4230,5.297,4231,3.51,4232,5.297,4233,3.51,4234,7.629,4235,8.327,4236,5.297,4237,5.297,4238,5.297,4239,3.51,4240,5.297,4241,3.51,4242,3.51,4243,3.51,4244,6.381,4245,3.51,4246,3.51,4247,3.51,4248,5.297,4249,5.297,4250,3.51,4251,3.51,4252,3.51,4253,3.51,4254,3.51,4255,3.51,4256,5.297,4257,3.51,4258,3.51,4259,3.51,4260,3.51,4261,3.51,4262,3.51,4263,3.51,4264,6.381,4265,3.51,4266,3.51,4267,6.381,4268,3.51,4269,3.51,4270,3.51,4271,3.51,4272,8.572,4273,3.51,4274,3.51,4275,3.51,4276,3.51,4277,3.51,4278,7.108,4279,5.297,4280,3.51,4281,3.51,4282,3.51,4283,6.381,4284,3.51,4285,3.51,4286,5.297,4287,5.297,4288,3.51,4289,3.51,4290,3.51,4291,3.51,4292,5.297,4293,3.51,4294,3.51,4295,3.51,4296,3.51,4297,3.51,4298,3.51,4299,3.51,4300,3.51,4301,6.381,4302,7.108,4303,3.51,4304,3.51,4305,3.51,4306,3.51,4307,3.51,4308,3.51,4309,3.51,4310,3.51,4311,5.297,4312,3.51,4313,3.51,4314,5.297,4315,3.51,4316,3.51,4317,3.51,4318,3.51,4319,3.51,4320,7.108,4321,6.381,4322,6.381,4323,6.381,4324,5.297,4325,6.381,4326,5.297,4327,5.297,4328,5.297,4329,3.51,4330,3.51,4331,3.51,4332,3.51,4333,3.51,4334,3.51,4335,5.297,4336,3.51,4337,3.51,4338,3.51,4339,7.629,4340,3.51,4341,3.51,4342,3.51,4343,3.51,4344,3.51,4345,3.51,4346,3.51,4347,3.51,4348,7.629,4349,3.51,4350,3.51,4351,3.51,4352,3.51,4353,3.51,4354,3.51,4355,3.51,4356,3.51,4357,3.51,4358,3.51,4359,3.51,4360,3.51,4361,3.51,4362,3.51,4363,3.51,4364,6.381,4365,3.51,4366,3.51,4367,3.51,4368,3.144,4369,3.51,4370,5.297,4371,3.51,4372,3.51,4373,3.51,4374,3.51,4375,3.51,4376,3.51,4377,3.51,4378,3.51,4379,3.51,4380,3.51,4381,3.51,4382,3.51,4383,3.51,4384,3.51,4385,5.297,4386,5.297,4387,3.51,4388,3.51,4389,3.51,4390,3.51,4391,3.51,4392,1.404,4393,3.51,4394,3.51,4395,3.51,4396,3.51,4397,3.51,4398,3.51,4399,3.51,4400,3.51,4401,3.51,4402,3.51,4403,3.51,4404,3.51]],["title/modules.html",[3173,5.725]],["body/modules.html",[20,0.005,78,0.004,79,0.005,80,0.004,663,4.386,1857,7.308,3172,5.998,3173,6.749,4368,7.308,4405,8.157]],["title/overview.html",[4064,5.725]],["body/overview.html",[2,1.61,20,0.005,32,3.05,78,0.003,79,0.004,80,0.003,197,4.387,336,2.443,478,5.454,479,3.707,482,2.868,500,5.31,502,5.454,505,5.454,507,5.176,509,5.454,511,5.05,513,5.454,515,5.454,517,5.454,520,5.31,799,5.066,822,6.518,837,5.066,1008,5.848,1899,0.989,2024,2.319,2422,6.315,2676,5.401,3171,6.732,3172,7.808,3174,5.066,3175,5.401,3176,5.401,3177,5.848,3178,5.848,3179,5.848,3180,5.848,3181,6.88,3182,5.066,4064,5.401,4406,6.528,4407,6.528]],["title/miscellaneous/typealiases.html",[4057,2.991,4408,6.115]],["body/miscellaneous/typealiases.html",[10,0.298,12,0.943,13,1.014,20,0.004,24,0.355,33,2.135,37,2.452,78,0.004,79,0.004,80,0.004,159,1.891,181,3.973,182,3.973,264,6.113,265,6.113,266,5.673,267,6.809,277,7.86,281,1.356,285,1.861,309,1.489,310,2.418,545,2.418,780,4.282,884,5.127,1455,2.187,1648,6.113,1707,7.86,1718,3.312,1900,2.904,1914,2.956,1915,2.583,1916,2.956,1917,2.956,1918,2.956,1919,3.439,1944,2.285,2003,2.464,2025,4.081,2049,4.846,2053,3.123,2140,4.61,2150,4.777,2151,4.983,2152,3.873,4057,5.181,4059,8.381,4409,7.389,4410,6.62,4411,7.389]],["title/miscellaneous/variables.html",[4057,2.991,4412,5.479]],["body/miscellaneous/variables.html",[0,0.042,4,0.09,10,0.099,12,0.743,13,0.693,20,0.005,24,0.377,42,1.84,47,1.84,52,2.592,53,1.439,57,0.541,59,1.429,78,0.003,79,0.002,80,0.001,89,0.611,90,1.69,102,0.655,104,0.646,107,2.21,108,0.919,109,2.139,110,0.882,113,2.434,117,2.05,118,1.642,119,1.642,120,1.713,124,1.718,129,0.713,134,0.881,143,0.841,146,4.199,152,1.249,161,1.146,164,0.799,175,0.492,178,1.095,192,1.288,194,1.132,197,1.642,212,2.71,213,2.71,222,1.013,227,2.156,240,0.734,247,0.702,253,1.416,279,3.283,280,1.743,281,0.448,285,0.792,290,0.603,299,1.39,303,1.945,323,3.296,336,2.271,394,2.142,395,2.678,396,2.678,400,2.929,417,0.815,435,3.751,436,3.448,443,0.755,451,2.486,455,1.371,488,3.559,497,5.875,524,1.371,576,1.472,585,3.296,586,3.092,603,3.57,634,2.021,659,1.579,660,2.189,661,2.678,662,2.189,663,1.314,664,0.767,670,2.189,722,1.896,733,0.87,740,2.243,763,2.52,764,2.645,780,1.945,791,0.548,797,2.088,828,0.854,843,2.038,879,2.794,880,3.57,937,1.068,1010,1.22,1053,2.021,1075,2.189,1080,7.629,1082,6.657,1147,2.576,1169,3.916,1177,1.896,1187,3.092,1221,1.642,1269,3.391,1280,5.083,1358,0.943,1415,2.021,1430,2.021,1435,2.021,1436,2.021,1437,1.896,1438,3.296,1447,4.518,1490,1.192,1593,2.929,1608,1.162,1610,3.296,1641,8.129,1642,4.52,1643,6.161,1648,2.021,1682,2.496,1705,3.57,1706,2.021,1821,0.977,1922,0.655,1941,1.463,1944,1.56,1946,1.566,1947,0.943,1948,0.977,1949,0.977,1950,0.977,1954,0.802,1958,0.977,1961,0.977,1962,0.977,1973,1.594,2020,0.977,2022,1.329,2092,1.524,2106,1.28,2107,1.579,2140,1.524,2141,2.261,2145,2.486,2146,1.524,2147,1.474,2148,1.579,2149,2.576,2151,2.866,2167,1.524,2168,1.349,2181,2.576,2234,2.678,2236,2.678,2267,1.713,2276,1.796,2317,2.576,2321,2.929,2328,2.794,2369,1.796,2404,3.296,2405,3.296,2516,1.896,2669,1.896,2671,3.296,2930,6.952,2934,3.57,2968,3.916,3033,3.57,3125,1.642,3136,2.929,3138,2.576,3243,3.57,3252,1.896,3299,2.189,3308,4.52,3309,2.189,3310,2.189,3311,2.189,3312,2.189,3313,2.189,3314,3.57,3315,2.021,3316,2.189,3317,2.021,3318,2.189,3319,3.57,3320,2.189,3321,4.52,3469,2.189,3561,3.57,3627,2.021,3646,4.52,3648,4.52,3650,4.52,3663,6.001,3709,2.021,3715,3.57,3716,2.189,3719,3.57,3894,5.305,3897,3.57,4057,1.713,4059,4.816,4060,2.189,4167,2.189,4410,2.189,4412,2.189,4413,7.564,4414,3.984,4415,3.984,4416,3.984,4417,3.984,4418,9.15,4419,5.045,4420,3.984,4421,3.984,4422,5.045,4423,5.821,4424,5.045,4425,3.984,4426,5.045,4427,5.821,4428,3.984,4429,3.984,4430,3.984,4431,3.984,4432,3.984,4433,5.045,4434,3.984,4435,2.443,4436,2.443,4437,3.984,4438,2.443,4439,2.443,4440,6.412,4441,5.045,4442,5.045,4443,5.045,4444,5.821,4445,2.443,4446,2.443,4447,2.443,4448,2.443,4449,7.253,4450,6.877,4451,6.877,4452,6.877,4453,6.877,4454,6.877,4455,6.877,4456,6.877,4457,5.045,4458,8.046,4459,2.443,4460,5.045,4461,3.984,4462,2.443,4463,2.443,4464,2.443,4465,5.821,4466,9.622,4467,5.821,4468,2.443,4469,3.984,4470,2.443,4471,3.984,4472,3.984,4473,3.984,4474,6.412,4475,3.984,4476,3.984,4477,3.984,4478,3.984,4479,3.984,4480,3.984,4481,3.984,4482,5.821,4483,3.984,4484,7.564,4485,2.443,4486,2.443,4487,8.792,4488,3.984,4489,3.984,4490,2.443,4491,3.984,4492,2.443,4493,3.984,4494,2.443,4495,2.443,4496,2.443,4497,2.443,4498,3.984,4499,5.821,4500,5.045,4501,3.984,4502,2.443,4503,3.984,4504,3.984,4505,2.443,4506,2.443,4507,5.045,4508,2.443,4509,2.443,4510,2.443,4511,2.443,4512,2.443,4513,2.443,4514,2.443,4515,2.443,4516,2.443,4517,2.443,4518,2.443,4519,2.443,4520,2.443,4521,2.443,4522,2.443,4523,2.443,4524,2.443,4525,2.443,4526,2.443,4527,2.443,4528,2.443,4529,2.443,4530,2.443,4531,2.443,4532,2.443,4533,2.443,4534,2.443,4535,2.443,4536,2.443,4537,3.984,4538,2.443,4539,2.443,4540,2.443,4541,2.443,4542,2.443,4543,3.984,4544,2.443,4545,2.443,4546,2.443,4547,2.443,4548,2.443,4549,2.443,4550,2.443,4551,5.821,4552,2.443,4553,2.443,4554,2.443,4555,2.443,4556,2.443,4557,2.443,4558,2.443,4559,2.443,4560,2.443,4561,2.443,4562,2.443,4563,3.984,4564,2.443,4565,2.443,4566,2.443,4567,2.443,4568,2.443,4569,3.984,4570,2.443,4571,2.443,4572,2.443,4573,2.443,4574,2.443,4575,2.443,4576,2.443,4577,3.984,4578,2.443,4579,2.443,4580,2.443,4581,2.443,4582,2.443]],["title/additional-documentation/layout.html",[2154,1.281,4111,3.822,4392,1.706]],["body/additional-documentation/layout.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types.html",[90,0.604,183,0.638,2154,1.102,4392,1.468]],["body/additional-documentation/chart-types.html",[20,0.005,78,0.004,79,0.005,80,0.004,89,2.022,90,1.331,149,1.915,183,1.405,255,4.062,417,2.697,432,4.73,503,4.135,3238,5.945,4112,6.689,4113,6.689]],["title/additional-documentation/chart-types/line.html",[149,1.01,2154,1.281,4392,1.706]],["body/additional-documentation/chart-types/line.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar.html",[255,1.874,2154,1.281,4392,1.706]],["body/additional-documentation/chart-types/bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/bucketed-bar.html",[255,1.613,2154,1.102,4112,3.037,4392,1.468]],["body/additional-documentation/chart-types/bar/bucketed-bar.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/status.html",[417,1.423,2154,1.281,4392,1.706]],["body/additional-documentation/chart-types/bar/status.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/bar/waterfall.html",[2154,1.281,4113,3.529,4392,1.706]],["body/additional-documentation/chart-types/bar/waterfall.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/area.html",[89,1.067,2154,1.281,4392,1.706]],["body/additional-documentation/chart-types/area.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/pie-and-donut.html",[503,1.877,2154,1.102,3238,2.699,4392,1.468]],["body/additional-documentation/chart-types/pie-and-donut.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/chart-types/spark.html",[432,2.495,2154,1.281,4392,1.706]],["body/additional-documentation/chart-types/spark.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins.html",[552,2.036,2154,1.281,4392,1.706]],["body/additional-documentation/plugins.html",[20,0.005,78,0.004,79,0.005,80,0.004,435,4.793,552,3.911,1194,6.025]],["title/additional-documentation/plugins/tooltips.html",[435,2.495,2154,1.281,4392,1.706]],["body/additional-documentation/plugins/tooltips.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/plugins/popovers.html",[1194,3.136,2154,1.281,4392,1.706]],["body/additional-documentation/plugins/popovers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/thresholds.html",[1593,3.136,2154,1.281,4392,1.706]],["body/additional-documentation/thresholds.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/timeframe-selection.html",[310,1.011,2154,1.102,4114,3.288,4392,1.468]],["body/additional-documentation/timeframe-selection.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage.html",[768,2.215,2154,1.102,4115,3.037,4392,1.468]],["body/additional-documentation/advanced-usage.html",[12,1.029,20,0.005,78,0.004,79,0.005,80,0.004,83,2.101,90,1.327,285,1.603,482,3.542,768,4.865,791,1.809,825,4.123,1056,2.608,1608,2.352,1968,3.114,2152,4.225,3138,5.212,4115,6.67]],["title/additional-documentation/advanced-usage/chart.html",[90,0.702,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/chart.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/legend.html",[482,1.874,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/legend.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure.html",[825,1.877,1968,1.418,2154,1.102,4392,1.468]],["body/additional-documentation/advanced-usage/input-structure.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/data.html",[12,0.544,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/input-structure/data.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/colors.html",[1056,1.38,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/input-structure/colors.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/input-structure/markers.html",[1608,1.244,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/input-structure/markers.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/events.html",[791,0.957,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/events.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/grid.html",[83,1.112,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/grid.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales.html",[285,0.848,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/scales.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/domains.html",[2154,1.281,3138,2.758,4392,1.706]],["body/additional-documentation/advanced-usage/scales/domains.html",[20,0.005,78,0.004,79,0.005,80,0.004]],["title/additional-documentation/advanced-usage/scales/formatters.html",[2152,2.236,2154,1.281,4392,1.706]],["body/additional-documentation/advanced-usage/scales/formatters.html",[20,0.005,78,0.004,79,0.005,80,0.004]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["0",{"_index":117,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["0.05",{"_index":3676,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["0.0722",{"_index":3650,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":3103,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["0.15",{"_index":1075,"title":{},"body":{"classes/ChartPalette.html":{},"miscellaneous/variables.html":{}}}],["0.2126",{"_index":3646,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0.3",{"_index":4544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.5",{"_index":1706,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"miscellaneous/variables.html":{}}}],["0.7152",{"_index":3648,"title":{},"body":{"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["0a4",{"_index":4506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0m",{"_index":4505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0x0001",{"_index":3991,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x002d",{"_index":3994,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0030",{"_index":3992,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0041",{"_index":3996,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x005f",{"_index":3995,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0061",{"_index":3997,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x0080",{"_index":3993,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x3",{"_index":3975,"title":{},"body":{"classes/UtilityService.html":{}}}],["0x8)).tostring(16",{"_index":3976,"title":{},"body":{"classes/UtilityService.html":{}}}],["0z",{"_index":4507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0zm",{"_index":4470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":336,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1,1",{"_index":2113,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["1.0.0",{"_index":4054,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":4049,"title":{},"body":{"dependencies.html":{}}}],["1.105",{"_index":4461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.105.895",{"_index":4462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.3.0",{"_index":4055,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":4047,"title":{},"body":{"dependencies.html":{}}}],["1.528",{"_index":4499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.572",{"_index":4480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.573",{"_index":4477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626.855",{"_index":4492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.626zm0",{"_index":4496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.791",{"_index":4467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.854",{"_index":4497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.951",{"_index":4490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":197,"title":{},"body":{"classes/AxisConfig.html":{},"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/XYGridConfig.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":634,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"miscellaneous/variables.html":{}}}],["10px",{"_index":997,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["12.92",{"_index":3652,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["16",{"_index":3973,"title":{},"body":{"classes/UtilityService.html":{}}}],["2",{"_index":146,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["2)).tostring",{"_index":3081,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["2,2",{"_index":2114,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["2.0",{"_index":4118,"title":{},"body":{"license.html":{}}}],["2.1.3",{"_index":4056,"title":{},"body":{"dependencies.html":{}}}],["2.121",{"_index":4484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.121zm0",{"_index":4485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.209",{"_index":4465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.237",{"_index":4491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.63",{"_index":4493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.766",{"_index":4494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.828",{"_index":4486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907",{"_index":4498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.907z",{"_index":4502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":119,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"components/ChartMarkerComponent.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["2004",{"_index":4120,"title":{},"body":{"license.html":{}}}],["2020",{"_index":4396,"title":{},"body":{"license.html":{}}}],["255",{"_index":3682,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["2c",{"_index":4464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c1.105",{"_index":4459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2zm0",{"_index":4463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1008,"title":{},"body":{"components/ChartMarkerComponent.html":{},"overview.html":{}}}],["3.145",{"_index":4479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146",{"_index":4478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.146z",{"_index":4481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.354",{"_index":4476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.805",{"_index":4510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["30",{"_index":120,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["3304",{"_index":1875,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["3327",{"_index":754,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{}}}],["4",{"_index":4466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.001",{"_index":4474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703",{"_index":4500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.703z",{"_index":4511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.945",{"_index":4501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95",{"_index":4487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.95z",{"_index":4488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4l8,0l0,8l",{"_index":4508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4xxx",{"_index":3969,"title":{},"body":{"classes/UtilityService.html":{}}}],["4z",{"_index":4468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":118,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["5.0.0",{"_index":4053,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":4152,"title":{},"body":{"license.html":{}}}],["5367",{"_index":4448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["68",{"_index":4406,"title":{},"body":{"overview.html":{}}}],["8",{"_index":2930,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["8,0l0",{"_index":4509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.001",{"_index":4473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["855",{"_index":4495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["895",{"_index":4460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8z",{"_index":4471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8zm0",{"_index":4475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":4128,"title":{},"body":{"license.html":{}}}],["9.34.0",{"_index":4051,"title":{},"body":{"dependencies.html":{}}}],["900",{"_index":2600,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["901",{"_index":2526,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["93",{"_index":4407,"title":{},"body":{"overview.html":{}}}],["__",{"_index":3827,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__domaincalculatedwithticks",{"_index":2165,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["__side",{"_index":3889,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["__thresholds",{"_index":3759,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["_active",{"_index":2905,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_approximateticks",{"_index":190,"title":{},"body":{"classes/AxisConfig.html":{}}}],["_backgroundcolors",{"_index":1073,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_config",{"_index":1727,"title":{},"body":{"classes/Grid.html":{}}}],["_d3scale",{"_index":3471,"title":{},"body":{"classes/Scale.html":{}}}],["_height",{"_index":1554,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["_index",{"_index":3550,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_interactive",{"_index":2906,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty",{"_index":2887,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionprimary",{"_index":2920,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isempty(this.descriptionsecondary",{"_index":2921,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_isnil",{"_index":3433,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.unitlabel",{"_index":3444,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_isnil(this.value",{"_index":3443,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["_scales",{"_index":1726,"title":{},"body":{"classes/Grid.html":{}}}],["_seriesid",{"_index":3543,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_seriesrenderstate",{"_index":2904,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["_standardcolors",{"_index":1071,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_state",{"_index":3541,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["_target",{"_index":1728,"title":{},"body":{"classes/Grid.html":{}}}],["_textcolors",{"_index":1072,"title":{},"body":{"classes/ChartPalette.html":{}}}],["_width",{"_index":1553,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["a?.iszoneedge",{"_index":3817,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["a?.x",{"_index":3815,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["above",{"_index":1221,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["absolute",{"_index":1503,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition",{"_index":3337,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.x",{"_index":3343,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absoluteposition.y",{"_index":3344,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["absolutex0",{"_index":45,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutex1",{"_index":46,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey0",{"_index":50,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absolutey1",{"_index":51,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["absorb",{"_index":4082,"title":{},"body":{"index.html":{}}}],["abstract",{"_index":216,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["accept",{"_index":1752,"title":{},"body":{"classes/Grid.html":{}}}],["acceptance",{"_index":4367,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":4364,"title":{},"body":{"license.html":{}}}],["access",{"_index":1317,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["accessing",{"_index":2685,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["accessor",{"_index":241,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["accessor(d",{"_index":3411,"title":{},"body":{"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["accessor(datapoint",{"_index":3943,"title":{},"body":{"classes/UtilityService.html":{}}}],["accessor(series.data[nearestindex",{"_index":376,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["accessor(zone.data[0",{"_index":3834,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors",{"_index":159,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPalette.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["accessors.data.active(dataseries.data[0",{"_index":2346,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.data.color",{"_index":1623,"title":{},"body":{"injectables/GaugeService.html":{},"injectables/ThresholdsService.html":{}}}],["accessors.data.end",{"_index":3783,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.start",{"_index":3781,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.thickness",{"_index":3777,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.data.y",{"_index":3847,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.activecolor",{"_index":2350,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.color",{"_index":3848,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["accessors.series.end(dataseries.id",{"_index":2356,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.inactivecolor",{"_index":2349,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.series.start(dataseries.id",{"_index":2355,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["accessors.ts",{"_index":7,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{}}}],["accessors.ts:11",{"_index":3092,"title":{},"body":{"classes/NoopAccessors.html":{}}}],["accessors.ts:12",{"_index":2290,"title":{},"body":{"interfaces/IRadialSeriesAccessors.html":{},"classes/NoopAccessors.html":{}}}],["accessors.ts:14",{"_index":4017,"title":{},"body":{"classes/XYAccessors.html":{}}}],["accessors.ts:15",{"_index":3623,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:16",{"_index":2280,"title":{},"body":{"interfaces/ILineSeriesAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:18",{"_index":3625,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["accessors.ts:22",{"_index":204,"title":{},"body":{"classes/BarAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:23",{"_index":202,"title":{},"body":{"classes/BarAccessors.html":{},"classes/RadialAccessors.html":{}}}],["accessors.ts:24",{"_index":3277,"title":{},"body":{"classes/RadialAccessors.html":{},"classes/StatusAccessors.html":{}}}],["accessors.ts:28",{"_index":26,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:29",{"_index":18,"title":{},"body":{"classes/AreaAccessors.html":{}}}],["accessors.ts:34",{"_index":3361,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:35",{"_index":3360,"title":{},"body":{"classes/RectangleAccessors.html":{}}}],["accessors.ts:37",{"_index":2925,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:38",{"_index":2924,"title":{},"body":{"classes/LineAccessors.html":{}}}],["accessors.ts:6",{"_index":2289,"title":{},"body":{"interfaces/IRadialDataAccessors.html":{}}}],["accessors.ts:7",{"_index":1883,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors.ts:8",{"_index":1882,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/noop",{"_index":3148,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["accessors/rectangle",{"_index":210,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["accessors/xy",{"_index":2260,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["accessorsuffix",{"_index":350,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["accommodate",{"_index":2410,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["accommodating",{"_index":1777,"title":{},"body":{"classes/Grid.html":{}}}],["acquired",{"_index":2266,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["act",{"_index":4096,"title":{},"body":{"index.html":{},"license.html":{}}}],["acting",{"_index":4137,"title":{},"body":{"license.html":{}}}],["actions",{"_index":2772,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["active",{"_index":2324,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["active(active",{"_index":2890,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["activechanged",{"_index":2618,"title":{},"body":{"components/LegendComponent.html":{}}}],["activecolor",{"_index":2325,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["acts",{"_index":4346,"title":{},"body":{"license.html":{}}}],["actual",{"_index":1154,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["actual_component",{"_index":522,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["actually",{"_index":3803,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["add",{"_index":2068,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":1873,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["addendum",{"_index":4294,"title":{},"body":{"license.html":{}}}],["adding",{"_index":2365,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["additional",{"_index":2154,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IScale.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/XYAccessors.html":{},"license.html":{}}}],["additions",{"_index":4192,"title":{},"body":{"license.html":{}}}],["addlimitentry(accessor",{"_index":3833,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.end",{"_index":3841,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addlimitentry(z.accessors.data.start",{"_index":3840,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["addplugin",{"_index":527,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["addplugin(plugin",{"_index":547,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["addplugins",{"_index":528,"title":{},"body":{"classes/Chart.html":{}}}],["addplugins(...plugins",{"_index":550,"title":{},"body":{"classes/Chart.html":{}}}],["adjusted",{"_index":705,"title":{},"body":{"classes/Chart.html":{}}}],["adjustedindex",{"_index":2691,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["adjustment",{"_index":2496,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["adjustments",{"_index":1838,"title":{},"body":{"classes/Grid.html":{}}}],["adjustrenderingarea",{"_index":1800,"title":{},"body":{"classes/Grid.html":{}}}],["adjusts",{"_index":1799,"title":{},"body":{"classes/Grid.html":{}}}],["advanced",{"_index":4115,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["advised",{"_index":4362,"title":{},"body":{"license.html":{}}}],["aftercontentinit",{"_index":855,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterviewinit",{"_index":818,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["afterwards",{"_index":1795,"title":{},"body":{"classes/Grid.html":{}}}],["again",{"_index":2773,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["against",{"_index":4249,"title":{},"body":{"license.html":{}}}],["agree",{"_index":4375,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":4323,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":4309,"title":{},"body":{"license.html":{}}}],["aids",{"_index":767,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["algorithm",{"_index":1360,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["alias",{"_index":1916,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":4409,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":1449,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["alignment",{"_index":1847,"title":{},"body":{"classes/Grid.html":{}}}],["alleging",{"_index":4253,"title":{},"body":{"license.html":{}}}],["allow",{"_index":1978,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["allowedrange",{"_index":2577,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["allows",{"_index":2462,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["alone",{"_index":4245,"title":{},"body":{"license.html":{}}}],["along",{"_index":4284,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":4293,"title":{},"body":{"license.html":{}}}],["alphadecay(0.3",{"_index":1404,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["already",{"_index":3006,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["always",{"_index":922,"title":{},"body":{"components/ChartComponent.html":{}}}],["anchor",{"_index":2571,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["and(b",{"_index":4268,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":4275,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":4280,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":3749,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["angle",{"_index":3346,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["angular.json",{"_index":4093,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1275,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["angular/cdk/overlay",{"_index":1429,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["angular/core",{"_index":496,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"injectables/GaugeService.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["angular/localize/init",{"_index":3191,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["animate",{"_index":1273,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animate(300",{"_index":1281,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["animations",{"_index":1277,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["annotations",{"_index":4183,"title":{},"body":{"license.html":{}}}],["annular",{"_index":1953,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["annulargrowth",{"_index":1950,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularpadding",{"_index":1949,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["annularwidth",{"_index":1948,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["any).getbbox",{"_index":2561,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["anything",{"_index":4078,"title":{},"body":{"index.html":{}}}],["apache",{"_index":4117,"title":{},"body":{"license.html":{}}}],["api",{"_index":3,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["apis",{"_index":1982,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["app's",{"_index":4083,"title":{},"body":{"index.html":{}}}],["appear",{"_index":4289,"title":{},"body":{"license.html":{}}}],["appearance",{"_index":662,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["appears",{"_index":2368,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["append",{"_index":1822,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"fecolormatrix",{"_index":668,"title":{},"body":{"classes/Chart.html":{}}}],["append(\"line",{"_index":2611,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["append(\"rect",{"_index":1813,"title":{},"body":{"classes/Grid.html":{}}}],["append(\"svg",{"_index":631,"title":{},"body":{"classes/Chart.html":{}}}],["appendix",{"_index":4179,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":4321,"title":{},"body":{"license.html":{}}}],["applied",{"_index":1661,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["applies",{"_index":4239,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1823,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["applydefaults(chartseries",{"_index":2808,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["applying",{"_index":660,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["appropriate",{"_index":3474,"title":{},"body":{"classes/Scale.html":{},"license.html":{}}}],["appropriateness",{"_index":4334,"title":{},"body":{"license.html":{}}}],["approximate",{"_index":2062,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks",{"_index":160,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["approximateticks(ticks",{"_index":195,"title":{},"body":{"classes/AxisConfig.html":{}}}],["arbitrary",{"_index":1966,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["arc",{"_index":3250,"title":{},"body":{"classes/PieRenderer.html":{}}}],["arc.outerradius(range[1",{"_index":3254,"title":{},"body":{"classes/PieRenderer.html":{}}}],["architect",{"_index":4101,"title":{},"body":{"index.html":{}}}],["archives",{"_index":4395,"title":{},"body":{"license.html":{}}}],["area",{"_index":89,"title":{"additional-documentation/chart-types/area.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["area's",{"_index":2469,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["areaaccessors",{"_index":1,"title":{"classes/AreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.end",{"_index":3822,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.data.start",{"_index":3820,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaaccessors.series.color",{"_index":3824,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["areaclass",{"_index":2083,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areagridconfig",{"_index":81,"title":{"classes/AreaGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{}}}],["areas",{"_index":2087,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["areasize",{"_index":978,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["arelabelupdatesenabled",{"_index":2511,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["args",{"_index":2051,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["argument",{"_index":921,"title":{},"body":{"components/ChartComponent.html":{},"classes/UtilityService.html":{}}}],["arguments.length",{"_index":3982,"title":{},"body":{"classes/UtilityService.html":{}}}],["arising",{"_index":4352,"title":{},"body":{"license.html":{}}}],["around",{"_index":2964,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{},"index.html":{}}}],["arr",{"_index":3404,"title":{},"body":{"classes/Renderer.html":{}}}],["array",{"_index":368,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{}}}],["array.from(arr",{"_index":3406,"title":{},"body":{"classes/Renderer.html":{}}}],["aside",{"_index":1440,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["aspects",{"_index":2026,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["assembleradialseriesset",{"_index":1588,"title":{},"body":{"injectables/GaugeService.html":{}}}],["assembleradialseriesset(value",{"_index":1591,"title":{},"body":{"injectables/GaugeService.html":{}}}],["asserted",{"_index":4381,"title":{},"body":{"license.html":{}}}],["asserting",{"_index":1747,"title":{},"body":{"classes/Grid.html":{}}}],["assign",{"_index":3548,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assigned",{"_index":3217,"title":{},"body":{"classes/PathMarker.html":{},"injectables/ThresholdsService.html":{}}}],["assist",{"_index":734,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["assist's",{"_index":760,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["assist.ts",{"_index":2646,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["assist.ts:102",{"_index":3538,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:110",{"_index":3545,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:114",{"_index":3542,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:118",{"_index":3539,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:28",{"_index":3537,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:30",{"_index":3527,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:305",{"_index":2655,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:310",{"_index":2667,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:32",{"_index":3525,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:324",{"_index":2658,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:328",{"_index":2660,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:34",{"_index":3530,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:353",{"_index":2663,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:367",{"_index":2666,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:377",{"_index":2657,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:383",{"_index":2661,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assist.ts:40",{"_index":3524,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:42",{"_index":3523,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:44",{"_index":3535,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:45",{"_index":3536,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:46",{"_index":3534,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:47",{"_index":3532,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:59",{"_index":3556,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:69",{"_index":3551,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assist.ts:79",{"_index":3554,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assistant",{"_index":766,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["assists/chart",{"_index":2645,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["assists/spark",{"_index":3513,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["assists/types.ts",{"_index":732,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"miscellaneous/enumerations.html":{}}}],["assists/types.ts:33",{"_index":2210,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:44",{"_index":2208,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:49",{"_index":2209,"title":{},"body":{"interfaces/IChartAssist.html":{}}}],["assists/types.ts:68",{"_index":743,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:69",{"_index":745,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:70",{"_index":744,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:71",{"_index":746,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:74",{"_index":748,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["assists/types.ts:79",{"_index":2296,"title":{},"body":{"interfaces/IRenderStatesIndex.html":{}}}],["associated",{"_index":771,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["association",{"_index":761,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["assume",{"_index":4336,"title":{},"body":{"license.html":{}}}],["attach",{"_index":4383,"title":{},"body":{"license.html":{}}}],["attached",{"_index":4178,"title":{},"body":{"license.html":{}}}],["attr",{"_index":720,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/PathMarker.html":{}}}],["attr(\"class",{"_index":1828,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"id",{"_index":666,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["attr(\"stroke",{"_index":2481,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["attr(\"transform",{"_index":2568,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["attr(\"type",{"_index":669,"title":{},"body":{"classes/Chart.html":{}}}],["attr(\"values",{"_index":671,"title":{},"body":{"classes/Chart.html":{}}}],["attribute",{"_index":3218,"title":{},"body":{"classes/PathMarker.html":{}}}],["attributes",{"_index":1851,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["attribution",{"_index":4278,"title":{},"body":{"license.html":{}}}],["attrs",{"_index":632,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["attrs(attrs",{"_index":2613,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["attrs[attr",{"_index":3231,"title":{},"body":{"classes/PathMarker.html":{}}}],["authorized",{"_index":4133,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":4172,"title":{},"body":{"license.html":{}}}],["autoheight",{"_index":1532,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["automatically",{"_index":1954,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["automaticdomain",{"_index":4562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autowidth",{"_index":1533,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["available",{"_index":4174,"title":{},"body":{"license.html":{}}}],["avoid",{"_index":626,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/XYGridConfig.html":{}}}],["avoidance",{"_index":1359,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["avoidtooltipcollisions",{"_index":1361,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["away",{"_index":1436,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["axis",{"_index":95,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{}}}],["axisconfig",{"_index":111,"title":{"classes/AxisConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["axisgenerator",{"_index":4568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axisgenerator(clonedscale.d3scale",{"_index":4574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["axisscale",{"_index":2144,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["b",{"_index":2489,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["b?.iszoneedge",{"_index":3818,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["b?.x",{"_index":3816,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["back",{"_index":3342,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["background",{"_index":2104,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/enumerations.html":{}}}],["backgroundcolor",{"_index":3423,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["backgroundcolors",{"_index":1049,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["backgrounddata",{"_index":3794,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["backgroundopacity",{"_index":1074,"title":{},"body":{"classes/ChartPalette.html":{}}}],["band",{"_index":284,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["bandwidth",{"_index":2142,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["bar",{"_index":255,"title":{"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["bar/bar",{"_index":2097,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["baraccessors",{"_index":198,"title":{"classes/BarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors.data.status",{"_index":2389,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["baraccessors:22",{"_index":1884,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:23",{"_index":1885,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:34",{"_index":1886,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["baraccessors:35",{"_index":1887,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["barclass",{"_index":2133,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["bargridconfig",{"_index":251,"title":{"classes/BarGridConfig.html":{}},"body":{"classes/BarGridConfig.html":{}}}],["barhighlightstrategy",{"_index":263,"title":{"classes/BarHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barhorizontalgridconfig",{"_index":403,"title":{"classes/BarHorizontalGridConfig.html":{}},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["barrenderer",{"_index":293,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["barrenderer(rendererconfig",{"_index":3791,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["bars",{"_index":2132,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["barserieshighlightstrategy",{"_index":409,"title":{"classes/BarSeriesHighlightStrategy.html":{}},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["barstatusgridconfig",{"_index":416,"title":{"classes/BarStatusGridConfig.html":{}},"body":{"classes/BarStatusGridConfig.html":{}}}],["barstylesfn",{"_index":386,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["bartooltipsplugin",{"_index":433,"title":{"classes/BarTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{}}}],["base",{"_index":2263,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["based",{"_index":1358,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["basetype",{"_index":2029,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["basic",{"_index":489,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["basiclegendtilecomponent",{"_index":478,"title":{"components/BasicLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["basics",{"_index":974,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[0",{"_index":980,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basics[1",{"_index":977,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["basis",{"_index":4324,"title":{},"body":{"license.html":{}}}],["bbox",{"_index":1473,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Renderer.html":{}}}],["bbox.height",{"_index":2574,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.left",{"_index":1478,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.top",{"_index":1480,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["bbox.width",{"_index":2576,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bbox.y",{"_index":2567,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bc",{"_index":3649,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["before",{"_index":1373,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["behalf",{"_index":4197,"title":{},"body":{"license.html":{}}}],["behavior",{"_index":806,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["behaviorsubject",{"_index":582,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{}}}],["being",{"_index":1012,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["belong",{"_index":1337,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["below",{"_index":3717,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["beneficial",{"_index":4156,"title":{},"body":{"license.html":{}}}],["between",{"_index":762,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"injectables/ThresholdsService.html":{}}}],["beyond",{"_index":1779,"title":{},"body":{"classes/Grid.html":{}}}],["bg",{"_index":1643,"title":{},"body":{"injectables/GaugeService.html":{},"miscellaneous/variables.html":{}}}],["binary",{"_index":3922,"title":{},"body":{"classes/UtilityService.html":{}}}],["bind",{"_index":4189,"title":{},"body":{"license.html":{}}}],["bisect",{"_index":3955,"title":{},"body":{"classes/UtilityService.html":{}}}],["black",{"_index":1083,"title":{},"body":{"classes/ChartPalette.html":{}}}],["block",{"_index":2640,"title":{},"body":{"components/LegendComponent.html":{}}}],["boilerplate",{"_index":4384,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":140,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["bootstrap",{"_index":2676,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["border",{"_index":150,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["border.node",{"_index":1834,"title":{},"body":{"classes/Grid.html":{}}}],["border.style(\"stroke",{"_index":1832,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfig",{"_index":4020,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfig(\"nui",{"_index":4025,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["borderconfigs",{"_index":1786,"title":{},"body":{"classes/Grid.html":{}}}],["borderconfigs[side",{"_index":1796,"title":{},"body":{"classes/Grid.html":{}}}],["borderkey",{"_index":1707,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{}}}],["borderkeys",{"_index":1787,"title":{},"body":{"classes/Grid.html":{}}}],["bordermidpoint",{"_index":1705,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/variables.html":{}}}],["borders",{"_index":101,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["borders[side",{"_index":1797,"title":{},"body":{"classes/Grid.html":{}}}],["both",{"_index":2131,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["bottom",{"_index":113,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["boundaries",{"_index":2091,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["boundary",{"_index":2378,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["bounds",{"_index":1929,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["brackets",{"_index":4386,"title":{},"body":{"license.html":{}}}],["breaking",{"_index":2069,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["breakpoints",{"_index":3795,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["broadcast",{"_index":2000,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["broadcasted",{"_index":815,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["browse",{"_index":4405,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1857,"title":{},"body":{"classes/Grid.html":{},"modules.html":{}}}],["brush",{"_index":2403,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushbehavior",{"_index":2400,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushelement",{"_index":2424,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushend",{"_index":2491,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushmove",{"_index":2487,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushselection",{"_index":2401,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstart",{"_index":2483,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushstartx",{"_index":2425,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["brushx",{"_index":2402,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["bsrgb",{"_index":3685,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["bucketed",{"_index":4112,"title":{"additional-documentation/chart-types/bar/bucketed-bar.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["bug",{"_index":2413,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["build",{"_index":529,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["build(element",{"_index":553,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["buildborders(container",{"_index":1784,"title":{},"body":{"classes/Grid.html":{}}}],["builddatamanager",{"_index":673,"title":{},"body":{"classes/Chart.html":{}}}],["buildgrid",{"_index":674,"title":{},"body":{"classes/Chart.html":{}}}],["buildinteractionlabel(target",{"_index":2587,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["buildplugins",{"_index":1656,"title":{},"body":{"classes/Grid.html":{},"interfaces/IGrid.html":{}}}],["buildplugins(chart",{"_index":1677,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["buildrenderengine(lasagna",{"_index":678,"title":{},"body":{"classes/Chart.html":{}}}],["buildrenderingarea(clippathid",{"_index":1810,"title":{},"body":{"classes/Grid.html":{}}}],["builds",{"_index":1782,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["built",{"_index":2573,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["bus",{"_index":591,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["bus.ts",{"_index":1573,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:15",{"_index":1575,"title":{},"body":{"classes/EventBus.html":{}}}],["bus.ts:8",{"_index":1577,"title":{},"body":{"classes/EventBus.html":{}}}],["buses",{"_index":817,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["bynens",{"_index":3980,"title":{},"body":{"classes/UtilityService.html":{}}}],["c",{"_index":1087,"title":{},"body":{"classes/ChartPalette.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["calculate",{"_index":1490,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["calculated",{"_index":451,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["calculates",{"_index":948,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["calculating",{"_index":1133,"title":{},"body":{"components/ChartPopoverComponent.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["calculation",{"_index":3127,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["calculation/automatic",{"_index":3469,"title":{},"body":{"classes/Scale.html":{},"miscellaneous/variables.html":{}}}],["calculations",{"_index":1945,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["calculator",{"_index":2150,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["call",{"_index":2789,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["callbackfn(result",{"_index":4010,"title":{},"body":{"classes/UtilityService.html":{}}}],["called",{"_index":2791,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["caps",{"_index":2109,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["capture",{"_index":2457,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["carry",{"_index":4270,"title":{},"body":{"license.html":{}}}],["case",{"_index":3077,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["catch",{"_index":378,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["category",{"_index":211,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cause",{"_index":2272,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["cd",{"_index":866,"title":{},"body":{"components/ChartComponent.html":{}}}],["center",{"_index":1447,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["certain",{"_index":1988,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["change",{"_index":2070,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{}}}],["changed",{"_index":4274,"title":{},"body":{"license.html":{}}}],["changedetection",{"_index":1267,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetectionstrategy",{"_index":1276,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":1268,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["changedetector",{"_index":991,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changedetectorref",{"_index":867,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["changes",{"_index":919,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes.plugin",{"_index":1121,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["changes.plugin.isfirstchange",{"_index":1122,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["changes[\"active",{"_index":2641,"title":{},"body":{"components/LegendComponent.html":{}}}],["changes[\"chart",{"_index":891,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"chart\"].previousvalue",{"_index":893,"title":{},"body":{"components/ChartComponent.html":{}}}],["changes[\"color",{"_index":1017,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"marker",{"_index":1016,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["changes[\"plugin",{"_index":1323,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["changes[\"plugin\"].currentvalue",{"_index":1324,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["character",{"_index":4351,"title":{},"body":{"license.html":{}}}],["charge",{"_index":4226,"title":{},"body":{"license.html":{}}}],["chart",{"_index":90,"title":{"classes/Chart.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage/chart.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/advanced-usage.html":{}}}],["chart's",{"_index":703,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chart'},{'name",{"_index":501,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["chart(grid",{"_index":3602,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(labelplugin",{"_index":3619,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.addplugin(new",{"_index":3605,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.getgrid().config(lastspark",{"_index":3614,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.hasplugin(interactionlabelplugin",{"_index":3617,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.removeplugin(interactionlabelplugin",{"_index":3621,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart.updatedimensions",{"_index":3615,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chart/chart.component",{"_index":3201,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["chart_component",{"_index":809,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{}}}],["chart_markers",{"_index":3561,"title":{},"body":{"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs1",{"_index":1610,"title":{},"body":{"injectables/GaugeService.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chart_palette_cs2",{"_index":4416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs3",{"_index":4417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s",{"_index":4414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_palette_cs_s_extended",{"_index":4415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status",{"_index":4513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chart_view_status_event",{"_index":879,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["chartassist",{"_index":2654,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.chartassistsubject.pipe",{"_index":2781,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassist.getlabel(chartseries",{"_index":2768,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["chartassist.getvisibleserieswithlegend",{"_index":2779,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype",{"_index":787,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["chartassisteventtype.emphasizeseries",{"_index":2710,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.resetvisibleseries",{"_index":2712,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassisteventtype.toggleseries",{"_index":2714,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata",{"_index":730,"title":{"classes/ChartAssistRenderStateData.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(series.id",{"_index":2816,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistrenderstatedata(seriesid",{"_index":2841,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistseriesdefaults",{"_index":2674,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartassistsubject",{"_index":2697,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartcollection",{"_index":849,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectionid",{"_index":845,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["chartcollectioniddirective",{"_index":520,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartcollectionservice",{"_index":822,"title":{"injectables/ChartCollectionService.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{},"overview.html":{}}}],["chartcomponent",{"_index":500,"title":{"components/ChartComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentcomponent",{"_index":502,"title":{"components/ChartDonutContentComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartdonutcontentplugin",{"_index":932,"title":{"classes/ChartDonutContentPlugin.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["chartelement",{"_index":1219,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.getboundingclientrect",{"_index":1474,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsetheight",{"_index":1238,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["chartelement.offsetleft",{"_index":1228,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartelement.offsetparent.getboundingclientrect",{"_index":1476,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartelement.offsettop",{"_index":1230,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartevent.broadcast",{"_index":2443,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartevent.data",{"_index":2445,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["chartindex",{"_index":2002,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["chartmarker",{"_index":3214,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["chartmarkercomponent",{"_index":505,"title":{"components/ChartMarkerComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpalette",{"_index":1044,"title":{"classes/ChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SparkChartAssist.html":{}}}],["chartpalette(chart_palette_cs1",{"_index":3533,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartplugin",{"_index":465,"title":{"classes/ChartPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:11",{"_index":473,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:13",{"_index":474,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:15",{"_index":471,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:7",{"_index":466,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartplugin:9",{"_index":472,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["chartpopovercomponent",{"_index":507,"title":{"components/ChartPopoverComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["chartpopoverplugin",{"_index":1108,"title":{"classes/ChartPopoverPlugin.html":{}},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:11",{"_index":3292,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:13",{"_index":3293,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:15",{"_index":3290,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:28",{"_index":3282,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:30",{"_index":3286,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:32",{"_index":3284,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:34",{"_index":3280,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:36",{"_index":3285,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:43",{"_index":3283,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:51",{"_index":3281,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:56",{"_index":3289,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:68",{"_index":3288,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:7",{"_index":3287,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartpopoverplugin:9",{"_index":3291,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["chartposition",{"_index":1477,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["chartposition.x",{"_index":1508,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["chartposition.y",{"_index":1510,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["charts",{"_index":763,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chartseries",{"_index":758,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["chartseries.accessors.data?.[dataaccessorkey",{"_index":2690,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data.length",{"_index":2688,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.data[chartseries.data.length",{"_index":2737,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["chartseries.id",{"_index":3580,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["chartseries.renderer",{"_index":3324,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseries.scales.r",{"_index":3326,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["chartseriesset",{"_index":764,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["chartseriesset.map(cs",{"_index":4549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charttooltipcomponent",{"_index":509,"title":{"components/ChartTooltipComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipdirective",{"_index":1312,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["charttooltipscomponent",{"_index":511,"title":{"components/ChartTooltipsComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["charttooltipsplugin",{"_index":437,"title":{"classes/ChartTooltipsPlugin.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:11",{"_index":3306,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:126",{"_index":467,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:13",{"_index":3307,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:131",{"_index":470,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:15",{"_index":3304,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:63",{"_index":454,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:65",{"_index":450,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:7",{"_index":3303,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:70",{"_index":462,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:75",{"_index":457,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:88",{"_index":461,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:9",{"_index":3305,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["charttooltipsplugin:98",{"_index":468,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["check",{"_index":1524,"title":{},"body":{"classes/DataSeries.html":{}}}],["children",{"_index":2416,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["choose",{"_index":4365,"title":{},"body":{"license.html":{}}}],["circle",{"_index":3308,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["claim",{"_index":4250,"title":{},"body":{"license.html":{}}}],["claims",{"_index":4240,"title":{},"body":{"license.html":{}}}],["clampedx",{"_index":2580,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["clamps",{"_index":3912,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange",{"_index":3903,"title":{},"body":{"classes/UtilityService.html":{}}}],["clamptorange(value",{"_index":3910,"title":{},"body":{"classes/UtilityService.html":{}}}],["class",{"_index":0,"title":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["class.inverse",{"_index":2855,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["class.nui",{"_index":3445,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["classed(\"hidden",{"_index":1849,"title":{},"body":{"classes/Grid.html":{}}}],["classed(\"interaction",{"_index":2941,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classed(`${classname}${getpointereventsclass()}${getpointereventsclickclass",{"_index":3059,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["classed(`pointer",{"_index":2942,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["classname",{"_index":2045,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{}}}],["classref",{"_index":564,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["classrefs",{"_index":570,"title":{},"body":{"classes/Chart.html":{}}}],["cleanup",{"_index":1998,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["cleartimeout(this.closetimeout",{"_index":1354,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.collisiontimeout",{"_index":1348,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cleartimeout(this.opentimeout",{"_index":1345,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["click",{"_index":1925,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"miscellaneous/enumerations.html":{}}}],["clickable",{"_index":2107,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["clicked",{"_index":1924,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["clientrect",{"_index":1031,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.height",{"_index":1037,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.width",{"_index":1036,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.x",{"_index":1034,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clientrect.y",{"_index":1035,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["clip",{"_index":1668,"title":{},"body":{"classes/Grid.html":{}}}],["clippathid",{"_index":1744,"title":{},"body":{"classes/Grid.html":{}}}],["clipped",{"_index":1763,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["clockwise",{"_index":3318,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["clonedeep",{"_index":3557,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["clonedeep(scale",{"_index":4571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clonedeep(sourceseries.data",{"_index":3780,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(sparks",{"_index":3583,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config",{"_index":3723,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedeep(thresholds_main_chart_renderer_config.statestyles",{"_index":3850,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["clonedscale",{"_index":4570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["close",{"_index":1166,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closepending",{"_index":1319,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closepopoversubject",{"_index":1156,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["closest",{"_index":3730,"title":{},"body":{"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["closestdataindex",{"_index":3952,"title":{},"body":{"classes/UtilityService.html":{}}}],["closetimeout",{"_index":1322,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["closetooltips",{"_index":1286,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["clr",{"_index":3270,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["cluster_nuichartsmodule",{"_index":3177,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_declarations",{"_index":3180,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_exports",{"_index":3178,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["cluster_nuichartsmodule_providers",{"_index":3179,"title":{},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["code",{"_index":4084,"title":{},"body":{"index.html":{},"license.html":{}}}],["codeunit",{"_index":3988,"title":{},"body":{"classes/UtilityService.html":{}}}],["collection",{"_index":802,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["collection.service",{"_index":826,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"modules/NuiChartsModule.html":{}}}],["collection.service.ts",{"_index":838,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection.service.ts:14",{"_index":848,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["collection/chart",{"_index":801,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"modules/NuiChartsModule.html":{}}}],["collectionid",{"_index":832,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{}}}],["collections",{"_index":841,"title":{},"body":{"injectables/ChartCollectionService.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["collision",{"_index":1235,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["collisionforce",{"_index":1398,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["collisiontimeout",{"_index":1321,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["color",{"_index":52,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"injectables/GaugeService.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["color.helper",{"_index":1065,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["color1",{"_index":3666,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["color2",{"_index":3667,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["coloraccessor",{"_index":2348,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["coloraccessor(dataseries.id",{"_index":2353,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["colordefinitions",{"_index":3641,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.dark",{"_index":3661,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colordefinitions.light",{"_index":3662,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["colorprovider",{"_index":23,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["colorprovider.get(d.__thresholds.status",{"_index":3786,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colorprovider.get(series.value",{"_index":3825,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["colors",{"_index":1056,"title":{"additional-documentation/advanced-usage/input-structure/colors.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["column",{"_index":2498,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["combination",{"_index":4246,"title":{},"body":{"license.html":{}}}],["comment",{"_index":4388,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":4360,"title":{},"body":{"license.html":{}}}],["common",{"_index":2678,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["common/chart",{"_index":587,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/data",{"_index":588,"title":{},"body":{"classes/Chart.html":{}}}],["common/event",{"_index":590,"title":{},"body":{"classes/Chart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["common/lasagna",{"_index":593,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["common/palette/chart",{"_index":3560,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/default",{"_index":2673,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["common/palette/palettes",{"_index":3562,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/palette/sequential",{"_index":3563,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["common/render",{"_index":594,"title":{},"body":{"classes/Chart.html":{}}}],["common/scales/helpers/convert",{"_index":2518,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["common/scales/types",{"_index":1700,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["common/types",{"_index":597,"title":{},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["common/utility.service",{"_index":1701,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["commonly",{"_index":1917,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["communication",{"_index":4201,"title":{},"body":{"license.html":{}}}],["compare",{"_index":289,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["comparison",{"_index":369,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["compensate",{"_index":3954,"title":{},"body":{"classes/UtilityService.html":{}}}],["compiled",{"_index":4169,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":4400,"title":{},"body":{"license.html":{}}}],["complies",{"_index":4299,"title":{},"body":{"license.html":{}}}],["component",{"_index":477,"title":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"index.html":{}}}],["component_template",{"_index":498,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["computed",{"_index":4000,"title":{},"body":{"classes/UtilityService.html":{}}}],["computer",{"_index":4357,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":4123,"title":{},"body":{"license.html":{}}}],["config",{"_index":143,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["config(config",{"_index":1684,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["config.classname",{"_index":1829,"title":{},"body":{"classes/Grid.html":{}}}],["config.color",{"_index":1833,"title":{},"body":{"classes/Grid.html":{}}}],["config.eventstreamid",{"_index":1152,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["config.showbottomaxis",{"_index":422,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts",{"_index":84,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:10",{"_index":163,"title":{},"body":{"classes/AxisConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:11",{"_index":1867,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:13",{"_index":171,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:14",{"_index":1537,"title":{},"body":{"classes/DimensionConfig.html":{},"classes/GridConfig.html":{}}}],["config.ts:16",{"_index":170,"title":{},"body":{"classes/AxisConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:22",{"_index":162,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{}}}],["config.ts:23",{"_index":4019,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["config.ts:24",{"_index":1536,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:27",{"_index":174,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{}}}],["config.ts:28",{"_index":1866,"title":{},"body":{"classes/GridConfig.html":{}}}],["config.ts:29",{"_index":1551,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:3",{"_index":419,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["config.ts:31",{"_index":1552,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:32",{"_index":177,"title":{},"body":{"classes/AxisConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.ts:36",{"_index":165,"title":{},"body":{"classes/AxisConfig.html":{}}}],["config.ts:40",{"_index":1538,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:42",{"_index":1540,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:44",{"_index":1541,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:53",{"_index":1546,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:55",{"_index":1548,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:57",{"_index":1549,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:6",{"_index":105,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["config.ts:67",{"_index":1542,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:69",{"_index":1544,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:7",{"_index":172,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:71",{"_index":1545,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["config.ts:8",{"_index":3089,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["config.ts:9",{"_index":3091,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"classes/XYGridConfig.html":{}}}],["config.width",{"_index":1831,"title":{},"body":{"classes/Grid.html":{}}}],["config/grid",{"_index":1702,"title":{},"body":{"classes/Grid.html":{}}}],["configuration",{"_index":253,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":2067,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configure",{"_index":2124,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["configurecharteventsubscriptions(eventbus",{"_index":2794,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["configurecssfilters",{"_index":656,"title":{},"body":{"classes/Chart.html":{}}}],["configured",{"_index":1150,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["configureeventsubscriptions(eventbus",{"_index":3607,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["configuring",{"_index":2271,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["confine",{"_index":2458,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["conflicts",{"_index":3008,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["conform",{"_index":1985,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["conforming",{"_index":88,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["connectedposition",{"_index":1428,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["connection",{"_index":3314,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points",{"_index":3319,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["connection_points[sectionindex].x",{"_index":3352,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["connection_points[sectionindex].y",{"_index":3353,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["consequential",{"_index":4350,"title":{},"body":{"license.html":{}}}],["consider",{"_index":246,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["considered",{"_index":4561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considers",{"_index":4559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":3552,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["consistent",{"_index":4372,"title":{},"body":{"license.html":{}}}],["consists",{"_index":738,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["conspicuously",{"_index":4213,"title":{},"body":{"license.html":{}}}],["const",{"_index":227,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1959,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"injectables/ThresholdsService.html":{}}}],["constants",{"_index":320,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constitutes",{"_index":4254,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(@host",{"_index":3434,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(@inject(chart_component",{"_index":833,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(@optional",{"_index":2907,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(baraccessors",{"_index":3622,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["constructor(changedetector",{"_index":989,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["constructor(chartassist",{"_index":2653,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["constructor(chartcomponent",{"_index":820,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["constructor(colorprovider",{"_index":15,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["constructor(colors",{"_index":1051,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["constructor(config",{"_index":418,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(d",{"_index":3215,"title":{},"body":{"classes/PathMarker.html":{}}}],["constructor(dataseries",{"_index":1514,"title":{},"body":{"classes/DataSeries.html":{}}}],["constructor(elref",{"_index":863,"title":{},"body":{"components/ChartComponent.html":{}}}],["constructor(formattername",{"_index":2512,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["constructor(grid",{"_index":538,"title":{},"body":{"classes/Chart.html":{}}}],["constructor(id",{"_index":2966,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["constructor(legend",{"_index":2857,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["constructor(legendseries",{"_index":3425,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["constructor(loggerservice",{"_index":3700,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["constructor(markers",{"_index":3494,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["constructor(protected",{"_index":3635,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(public",{"_index":794,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["constructor(readonly",{"_index":1456,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["constructor(scalekey",{"_index":274,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["constructor(seriesid",{"_index":742,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["constructor(showbottomaxis",{"_index":3522,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["constructor(sourceprovider",{"_index":3263,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["constructor(svg",{"_index":3631,"title":{},"body":{"classes/SvgMarker.html":{}}}],["constructor(tooltippositionoffset",{"_index":1416,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["constructor(valuemap",{"_index":3009,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["constructor(values",{"_index":3500,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["construed",{"_index":4295,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1970,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["consumers",{"_index":1902,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["contained",{"_index":4282,"title":{},"body":{"license.html":{}}}],["container",{"_index":704,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["container.append(\"line",{"_index":1827,"title":{},"body":{"classes/Grid.html":{}}}],["containers",{"_index":2138,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["containing",{"_index":1666,"title":{},"body":{"classes/Grid.html":{},"classes/LegendInteractionAssist.html":{}}}],["content",{"_index":928,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"license.html":{}}}],["content'},{'name",{"_index":504,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["content.component",{"_index":3196,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["content.component.html",{"_index":930,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.less",{"_index":929,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts",{"_index":927,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:15",{"_index":933,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content.component.ts:18",{"_index":936,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["content/chart",{"_index":926,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"modules/NuiChartsModule.html":{}}}],["content]=\"serieshasadditionalcontent",{"_index":3446,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["contentposition",{"_index":931,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubject",{"_index":951,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["contentpositionupdatesubscription",{"_index":941,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["contents",{"_index":4290,"title":{},"body":{"license.html":{}}}],["context",{"_index":4420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":3398,"title":{},"body":{"classes/Renderer.html":{}}}],["continuous",{"_index":2167,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":4147,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":3639,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["contribution",{"_index":4191,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":4244,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":4301,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":4217,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":4255,"title":{},"body":{"license.html":{}}}],["control",{"_index":4138,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":4139,"title":{},"body":{"license.html":{}}}],["convenience",{"_index":2717,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["conversion",{"_index":3320,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["conversions",{"_index":4170,"title":{},"body":{"license.html":{}}}],["convert",{"_index":2297,"title":{},"body":{"interfaces/IScale.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["convert(scale",{"_index":2579,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["convert(value",{"_index":2174,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["converted",{"_index":2173,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["converts",{"_index":1500,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["coordinate",{"_index":2172,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{}}}],["coordinates",{"_index":1937,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["copies",{"_index":4261,"title":{},"body":{"license.html":{}}}],["copy",{"_index":4267,"title":{},"body":{"license.html":{}}}],["copy/paste",{"_index":4106,"title":{},"body":{"index.html":{}}}],["copyright",{"_index":4131,"title":{},"body":{"license.html":{}}}],["core/chart",{"_index":850,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["core/common/palette/default",{"_index":31,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["core/common/palette/palettes",{"_index":1611,"title":{},"body":{"injectables/GaugeService.html":{}}}],["core/common/renderer",{"_index":2096,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/XYRenderer.html":{}}}],["core/common/scales/helpers/is",{"_index":3044,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["core/common/scales/time",{"_index":322,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["core/common/scales/types",{"_index":327,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["core/common/types",{"_index":38,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"injectables/GaugeService.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["core/common/utility.service",{"_index":330,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["core/grid/config/xy",{"_index":3559,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["core/plugins/chart",{"_index":939,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/plugins/tooltips/chart",{"_index":1311,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["core/plugins/types",{"_index":940,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["core/public",{"_index":1612,"title":{},"body":{"injectables/GaugeService.html":{}}}],["core/types",{"_index":2322,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["correction",{"_index":1709,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["corresponding",{"_index":2171,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/XYRenderer.html":{}}}],["corresponds",{"_index":2510,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["counterclaim",{"_index":4251,"title":{},"body":{"license.html":{}}}],["courtesy",{"_index":3978,"title":{},"body":{"classes/UtilityService.html":{}}}],["cover",{"_index":1233,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["crash",{"_index":628,"title":{},"body":{"classes/Chart.html":{}}}],["create",{"_index":4108,"title":{},"body":{"index.html":{}}}],["createborder(container",{"_index":1826,"title":{},"body":{"classes/Grid.html":{}}}],["createchart(lastspark",{"_index":3600,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["created",{"_index":1825,"title":{},"body":{"classes/Grid.html":{},"index.html":{}}}],["created3scale",{"_index":2995,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["createdefaultvaluecoloraccessor(thresholds",{"_index":1640,"title":{},"body":{"injectables/GaugeService.html":{}}}],["creates",{"_index":1820,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/PathMarker.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SvgMarker.html":{},"injectables/ThresholdsService.html":{}}}],["creating",{"_index":1790,"title":{},"body":{"classes/Grid.html":{},"injectables/ThresholdsService.html":{}}}],["creation",{"_index":3690,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["critical",{"_index":4441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cross",{"_index":2010,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["crosshair",{"_index":135,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{}}}],["crosspoints",{"_index":3811,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["cs.renderer.getdomainoffiltereddata(cs",{"_index":4556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[next",{"_index":4552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cs.scales[scalekey",{"_index":4557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":722,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["css.escape",{"_index":3915,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssclass",{"_index":215,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["cssescape",{"_index":3904,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssescape(value",{"_index":3913,"title":{},"body":{"classes/UtilityService.html":{}}}],["cssfilterid",{"_index":602,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/enumerations.html":{}}}],["cssfilterid.grayscale",{"_index":667,"title":{},"body":{"classes/Chart.html":{}}}],["current",{"_index":776,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["current.data.length",{"_index":965,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer",{"_index":961,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["current.renderer.getinnerradius(current.scales.r.range",{"_index":964,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["currently",{"_index":2756,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["currenttooltipdirectivesindex",{"_index":1334,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["currenttooltipdirectivesindex[seriesid",{"_index":1340,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["cursor",{"_index":102,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["curve",{"_index":2089,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvefactory",{"_index":2088,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["curvetype",{"_index":2084,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["custom",{"_index":781,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{}}}],["customary",{"_index":4317,"title":{},"body":{"license.html":{}}}],["customizations",{"_index":4079,"title":{},"body":{"index.html":{}}}],["customized",{"_index":4076,"title":{},"body":{"index.html":{}}}],["cycle",{"_index":3546,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["d",{"_index":57,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"miscellaneous/variables.html":{}}}],["d.__thresholds",{"_index":3784,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.__thresholds.status",{"_index":3785,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.active",{"_index":2330,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["d.category",{"_index":219,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["d.defined",{"_index":2279,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.end",{"_index":3823,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.hasownproperty(\"defined",{"_index":2278,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["d.height",{"_index":1803,"title":{},"body":{"classes/Grid.html":{}}}],["d.index",{"_index":1244,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.name",{"_index":1529,"title":{},"body":{"classes/DataSeries.html":{}}}],["d.position",{"_index":1245,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["d.position.width",{"_index":1240,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["d.position.x",{"_index":1227,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["d.position.y",{"_index":3297,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["d.start",{"_index":3821,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["d.status",{"_index":2390,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["d.value",{"_index":1530,"title":{},"body":{"classes/DataSeries.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["d.width",{"_index":1802,"title":{},"body":{"classes/Grid.html":{}}}],["d.x",{"_index":60,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d.y",{"_index":62,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["d3",{"_index":309,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["d3's",{"_index":2965,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["d3scale",{"_index":2157,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["d3selection",{"_index":545,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["d[\"__stack_x\"]?.end",{"_index":66,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_x\"]?.start",{"_index":64,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.end",{"_index":70,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["d[\"__stack_y\"]?.start",{"_index":68,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["damages",{"_index":4348,"title":{},"body":{"license.html":{}}}],["dark",{"_index":1082,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["darken",{"_index":3260,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["darker",{"_index":3675,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["dasharray",{"_index":2112,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["data",{"_index":12,"title":{"additional-documentation/advanced-usage/input-structure/data.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["data.__bar",{"_index":223,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.end",{"_index":231,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.__bar.start",{"_index":224,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.coordinates",{"_index":2450,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.coordinates.x",{"_index":2451,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["data.datapoints",{"_index":2797,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.end",{"_index":232,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.filter((d",{"_index":3410,"title":{},"body":{"classes/Renderer.html":{}}}],["data.index",{"_index":2798,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.interactiontype",{"_index":2796,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["data.length",{"_index":3402,"title":{},"body":{"classes/Renderer.html":{}}}],["data.push(value",{"_index":2605,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["data.start",{"_index":226,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data.value",{"_index":217,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["data_point_interaction_reset",{"_index":318,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/MarkerUtils.html":{}}}],["data_point_not_found",{"_index":319,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["dataaccessor",{"_index":33,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["dataaccessorkey",{"_index":2684,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["dataaccessors",{"_index":352,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"end",{"_index":357,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["dataaccessors[\"start",{"_index":355,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["datafrom",{"_index":3731,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.x",{"_index":3858,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datafrom.y",{"_index":3860,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datamanager",{"_index":557,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["datapoint",{"_index":411,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["datapoint.data",{"_index":3323,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.index",{"_index":2692,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoint.position",{"_index":1494,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.x",{"_index":1496,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position.y",{"_index":1497,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.height",{"_index":1498,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint.position?.width",{"_index":1499,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["datapoint?.position?.x",{"_index":3050,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapoint?.position?.y",{"_index":3052,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["datapointindex",{"_index":306,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datapointposition",{"_index":4039,"title":{},"body":{"classes/XYRenderer.html":{}}}],["datapointpositions",{"_index":438,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["datapoints",{"_index":439,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["datapoints[seriesid",{"_index":3611,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["datapointsleft",{"_index":1225,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["datapointstop",{"_index":3296,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["datapointsubject",{"_index":3029,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["datapointsubject.next",{"_index":3063,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["dataseries",{"_index":218,"title":{"classes/DataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["dataseries.accessors",{"_index":1528,"title":{},"body":{"classes/DataSeries.html":{},"classes/MarkerUtils.html":{}}}],["dataseries.accessors.data?.[scalename",{"_index":3407,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.[scalename]?.(datum",{"_index":3405,"title":{},"body":{"classes/Renderer.html":{}}}],["dataseries.accessors.data?.x",{"_index":4036,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.accessors.data?.y",{"_index":4037,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.data",{"_index":1521,"title":{},"body":{"classes/DataSeries.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data.length",{"_index":2345,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["dataseries.data[index",{"_index":4035,"title":{},"body":{"classes/XYRenderer.html":{}}}],["dataseries.id",{"_index":1520,"title":{},"body":{"classes/DataSeries.html":{},"injectables/GaugeService.html":{}}}],["dataseries.name",{"_index":1523,"title":{},"body":{"classes/DataSeries.html":{}}}],["dataset",{"_index":3122,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["datashift",{"_index":3856,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.x",{"_index":3867,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datashift.y",{"_index":3866,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato",{"_index":3726,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.x",{"_index":3857,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["datato.y",{"_index":3859,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["date",{"_index":3894,"title":{},"body":{"classes/TimeScale.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":3966,"title":{},"body":{"classes/UtilityService.html":{}}}],["dates",{"_index":4533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datetimeformatter",{"_index":3897,"title":{},"body":{"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["datum",{"_index":1905,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{}}}],["debounce",{"_index":874,"title":{},"body":{"components/ChartComponent.html":{}}}],["declarations",{"_index":3175,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["declare",{"_index":2706,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["decorator",{"_index":3383,"title":{},"body":{"classes/Renderer.html":{}}}],["decorators",{"_index":999,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{}}}],["deemphasized",{"_index":2102,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["deemphasizes",{"_index":2758,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["deemphasizeseries",{"_index":2762,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["deep",{"_index":287,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["default",{"_index":107,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["default_border_class_name",{"_index":1650,"title":{},"body":{"classes/Grid.html":{}}}],["default_config",{"_index":1157,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["default_margin",{"_index":98,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_marker_container_class",{"_index":3020,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["default_marker_interaction_config",{"_index":3033,"title":{},"body":{"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["default_padding",{"_index":99,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["default_radial_renderer_config",{"_index":3243,"title":{},"body":{"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["defaultarcobject",{"_index":3251,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["defaultcolorprovider",{"_index":29,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["defaultmarkerprovider",{"_index":30,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{}}}],["defaultpalette",{"_index":2672,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["defaults",{"_index":3242,"title":{},"body":{"classes/PieRenderer.html":{}}}],["defaultsdeep",{"_index":1182,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaultsdeep(this.config",{"_index":1197,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["defaulttextoverflowhandler",{"_index":169,"title":{},"body":{"classes/AxisConfig.html":{}}}],["defaultvalue",{"_index":3010,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["defend",{"_index":4377,"title":{},"body":{"license.html":{}}}],["define",{"_index":1952,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["defines",{"_index":2265,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["defining",{"_index":1903,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["definition",{"_index":1725,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"license.html":{}}}],["definitions",{"_index":3140,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["deliberate",{"_index":4343,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3174,"title":{"dependencies.html":{}},"body":{"modules/NuiChartsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1989,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["deprecated",{"_index":751,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["derivative",{"_index":4180,"title":{},"body":{"license.html":{}}}],["derive",{"_index":3721,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["derived",{"_index":1679,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["deriving",{"_index":2396,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["describe",{"_index":1901,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["describing",{"_index":1977,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["description",{"_index":85,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["descriptionprimary",{"_index":2849,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["descriptionsecondary",{"_index":2850,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["design",{"_index":4066,"title":{},"body":{"index.html":{}}}],["designated",{"_index":4215,"title":{},"body":{"license.html":{}}}],["designed",{"_index":4068,"title":{},"body":{"index.html":{}}}],["designers",{"_index":4070,"title":{},"body":{"index.html":{}}}],["desired",{"_index":2065,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["destroy",{"_index":443,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["destroy_event",{"_index":585,"title":{},"body":{"classes/Chart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/variables.html":{}}}],["destruction",{"_index":1999,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["detects",{"_index":3711,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["determine",{"_index":2033,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determined",{"_index":3126,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["determines",{"_index":2166,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["determining",{"_index":2121,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"license.html":{}}}],["devdependencies",{"_index":4089,"title":{},"body":{"index.html":{}}}],["diamond",{"_index":4489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dictionary",{"_index":2003,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["different",{"_index":701,"title":{},"body":{"classes/Chart.html":{},"license.html":{}}}],["differs",{"_index":2686,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["digit",{"_index":4537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dimension",{"_index":103,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.height",{"_index":2472,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimension.width",{"_index":2471,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensionconfig",{"_index":138,"title":{"classes/DimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["dimensionconfig.autoheight",{"_index":709,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.autowidth",{"_index":712,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight",{"_index":724,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerheight(dimensions.height",{"_index":1773,"title":{},"body":{"classes/Grid.html":{}}}],["dimensionconfig.outerwidth",{"_index":727,"title":{},"body":{"classes/Chart.html":{}}}],["dimensionconfig.outerwidth(dimensions.width",{"_index":1771,"title":{},"body":{"classes/Grid.html":{}}}],["dimensions",{"_index":702,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["dimensions.height",{"_index":710,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["dimensions.width",{"_index":713,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{}}}],["direct",{"_index":4143,"title":{},"body":{"license.html":{}}}],["direction",{"_index":4145,"title":{},"body":{"license.html":{}}}],["directive",{"_index":799,"title":{"directives/ChartCollectionIdDirective.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"overview.html":{}}}],["directives",{"_index":519,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["directiveschanged",{"_index":1341,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["directly",{"_index":250,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["disable",{"_index":2055,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["disclaimer",{"_index":4319,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":4211,"title":{},"body":{"license.html":{}}}],["display",{"_index":2063,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["displayed",{"_index":2064,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["distribute",{"_index":4234,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":4283,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":4125,"title":{},"body":{"license.html":{}}}],["divided",{"_index":3309,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["diy",{"_index":366,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["document",{"_index":4129,"title":{},"body":{"license.html":{}}}],["document.createelement(\"path",{"_index":3223,"title":{},"body":{"classes/PathMarker.html":{}}}],["documentation",{"_index":4164,"title":{},"body":{"license.html":{}}}],["doesn't",{"_index":2948,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["dom",{"_index":2369,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["domain",{"_index":1944,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domain(clonedscale",{"_index":4572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain(domain",{"_index":2178,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["domain.ts",{"_index":4427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["domain[0",{"_index":3412,"title":{},"body":{"classes/Renderer.html":{}}}],["domaincalculator",{"_index":2151,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["domains",{"_index":3138,"title":{"additional-documentation/advanced-usage/scales/domains.html":{}},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["don't",{"_index":3733,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["donut",{"_index":503,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["down",{"_index":4440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["draw",{"_index":270,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["draw(renderer",{"_index":292,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["draw(renderseries",{"_index":2337,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["drawable",{"_index":1986,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["drawing",{"_index":2090,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["drawline",{"_index":987,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["drawmarker",{"_index":3022,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["drawmarker(datapoint",{"_index":3028,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["draws",{"_index":2594,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["driven",{"_index":2148,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ds",{"_index":58,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["dt",{"_index":3965,"title":{},"body":{"classes/UtilityService.html":{}}}],["dynamic",{"_index":3382,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["e",{"_index":3311,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["e.g",{"_index":1907,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["each",{"_index":580,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["each(borderkeys",{"_index":1789,"title":{},"body":{"classes/Grid.html":{}}}],["each(eventlist",{"_index":3416,"title":{},"body":{"classes/Renderer.html":{}}}],["each(function",{"_index":393,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["each(nodes",{"_index":1407,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["each(object.keys(eventhandlers",{"_index":2801,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["each(object.keys(this.datapoints",{"_index":1482,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["each(object.keys(this.streams",{"_index":1581,"title":{},"body":{"classes/EventBus.html":{}}}],["each(this.plugins",{"_index":682,"title":{},"body":{"classes/Chart.html":{}}}],["easier",{"_index":4393,"title":{},"body":{"license.html":{}}}],["east",{"_index":3316,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["edge",{"_index":1419,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{}}}],["editorial",{"_index":4181,"title":{},"body":{"license.html":{}}}],["effect",{"_index":2036,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["efficient",{"_index":367,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["eight",{"_index":4454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elaborations",{"_index":4184,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":4198,"title":{},"body":{"license.html":{}}}],["element",{"_index":524,"title":{},"body":{"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["element's",{"_index":2231,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["element.clientheight",{"_index":1370,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.clientwidth",{"_index":1369,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsetleft",{"_index":1367,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["element.offsettop",{"_index":1368,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["elementref",{"_index":864,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{}}}],["elements",{"_index":664,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["ellipsiswidth",{"_index":2048,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["elref",{"_index":869,"title":{},"body":{"components/ChartComponent.html":{}}}],["emitevent(renderer",{"_index":2958,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["emits",{"_index":1164,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{}}}],["emitted",{"_index":785,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emitting",{"_index":3117,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["emphasise",{"_index":344,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["emphasisstate",{"_index":741,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["emphasisstate+visible",{"_index":739,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["emphasize",{"_index":2757,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["emphasized",{"_index":2103,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizeseries",{"_index":790,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["emphasizeseries(seriesid",{"_index":2656,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["empty",{"_index":1682,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["empty_continuous_domain",{"_index":2145,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["emptyshapes",{"_index":4424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabled",{"_index":2106,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["enabledatapointhighlighting",{"_index":1962,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["enableexternalevents",{"_index":2399,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["enables",{"_index":2093,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enableserieshighlighting",{"_index":1961,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["encapsulation",{"_index":485,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["enclosed",{"_index":4385,"title":{},"body":{"license.html":{}}}],["end",{"_index":213,"title":{},"body":{"classes/BarAccessors.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["endaccessor",{"_index":356,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["endaccessor(d",{"_index":383,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["ending",{"_index":3732,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["endx",{"_index":1891,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["endy",{"_index":1895,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["engage",{"_index":2456,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["engine",{"_index":595,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enhanced",{"_index":2108,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["enhancedlinecap",{"_index":2128,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["enlarged",{"_index":1232,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["ensure",{"_index":2366,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SideIndicatorAccessors.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["ensures",{"_index":2497,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["entered",{"_index":1928,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["enters",{"_index":2005,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["entirely",{"_index":4075,"title":{},"body":{"index.html":{}}}],["entities",{"_index":3007,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"license.html":{}}}],["entity",{"_index":2028,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["entityid",{"_index":2392,"title":{},"body":{"interfaces/IValueProvider.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["entries",{"_index":915,"title":{},"body":{"components/ChartComponent.html":{}}}],["entries[0].isintersecting",{"_index":924,"title":{},"body":{"components/ChartComponent.html":{}}}],["entrycomponents",{"_index":3184,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["enum",{"_index":786,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ZoneCross.html":{}}}],["enumerations",{"_index":4058,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":2060,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["error(\"accessor",{"_index":3409,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"bottomborder",{"_index":1841,"title":{},"body":{"classes/Grid.html":{}}}],["error(\"can't",{"_index":4038,"title":{},"body":{"classes/XYRenderer.html":{}}}],["error(\"chart",{"_index":1222,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["error(\"clr",{"_index":3272,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["error(\"container",{"_index":3045,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["error(\"grid",{"_index":608,"title":{},"body":{"classes/Chart.html":{}}}],["error(\"labelcontent",{"_index":2557,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["error(\"position",{"_index":1384,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"radius",{"_index":969,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["error(\"renderer.config.strokewidth",{"_index":2938,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["error(\"seriesid",{"_index":1339,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["error(\"statestyles",{"_index":3389,"title":{},"body":{"classes/Renderer.html":{}}}],["error(\"unable",{"_index":1495,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["error(\"value",{"_index":3946,"title":{},"body":{"classes/UtilityService.html":{}}}],["error(\"xscale",{"_index":2539,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["errors",{"_index":381,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["etc",{"_index":1908,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/ProcessedColorProvider.html":{}}}],["even",{"_index":1791,"title":{},"body":{"classes/Grid.html":{},"license.html":{}}}],["event",{"_index":459,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["event.data",{"_index":2529,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoint",{"_index":1209,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoint.seriesid",{"_index":1208,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["event.data.datapoints",{"_index":1207,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.datapoints[chartseries.id",{"_index":2728,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.data.foreach(series",{"_index":1465,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["event.data.interactiontype",{"_index":1202,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["event.data.ischartinview",{"_index":1469,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["event.payload[key",{"_index":2784,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["event.target.releasepointercapture(event.pointerid",{"_index":2468,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["event.target.setpointercapture(event.pointerid",{"_index":2466,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["eventbus",{"_index":525,"title":{"classes/EventBus.html":{}},"body":{"classes/Chart.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(interaction_data_points_event).subscribe((event",{"_index":3608,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventbus.getstream(key).subscribe((event",{"_index":2802,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventbus.getstream(mouse_active_event).subscribe((event",{"_index":3612,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["eventemitter",{"_index":1112,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["eventhandlers",{"_index":2795,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventhandlers[key](event.data",{"_index":2803,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["eventlist",{"_index":3413,"title":{},"body":{"classes/Renderer.html":{}}}],["eventname",{"_index":399,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{}}}],["events",{"_index":791,"title":{"additional-documentation/advanced-usage/events.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["eventstreamid",{"_index":1172,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["evil",{"_index":1835,"title":{},"body":{"classes/Grid.html":{}}}],["example",{"_index":1649,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"license.html":{}}}],["examples",{"_index":3259,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"index.html":{}}}],["except",{"_index":3526,"title":{},"body":{"classes/SparkChartAssist.html":{},"license.html":{}}}],["excludefromarccalculation",{"_index":1631,"title":{},"body":{"injectables/GaugeService.html":{}}}],["excludes",{"_index":1943,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["excluding",{"_index":2038,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["exclusive",{"_index":4225,"title":{},"body":{"license.html":{}}}],["executed",{"_index":4310,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":4338,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":4157,"title":{},"body":{"license.html":{}}}],["exist",{"_index":3046,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existing",{"_index":3073,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["existingspark.id",{"_index":3592,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["existingsparkindex",{"_index":3589,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["exits",{"_index":2006,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expect",{"_index":1987,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["expected",{"_index":2374,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["explicitly",{"_index":4303,"title":{},"body":{"license.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["exported",{"_index":3738,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["exports",{"_index":3176,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":4326,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1778,"title":{},"body":{"classes/Grid.html":{}}}],["extended",{"_index":1430,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":41,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["extent",{"_index":3380,"title":{},"body":{"classes/Renderer.html":{}}}],["extent(data",{"_index":3403,"title":{},"body":{"classes/Renderer.html":{}}}],["extracted",{"_index":1362,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["facilitate",{"_index":1980,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["facilitates",{"_index":3689,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["fails",{"_index":244,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["failure",{"_index":4358,"title":{},"body":{"license.html":{}}}],["fallback_formatter",{"_index":2519,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["false",{"_index":161,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["far",{"_index":1435,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["fast",{"_index":1316,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["fee",{"_index":4366,"title":{},"body":{"license.html":{}}}],["fields",{"_index":2268,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{}}}],["fifty",{"_index":4150,"title":{},"body":{"license.html":{}}}],["figure",{"_index":4027,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["filed",{"_index":4259,"title":{},"body":{"license.html":{}}}],["files",{"_index":4165,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1818,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["filter",{"_index":659,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["filter(c",{"_index":3801,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["filter(event",{"_index":2726,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["filterdatabydomain",{"_index":3097,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdatabydomain(data",{"_index":3118,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterdefs",{"_index":526,"title":{},"body":{"classes/Chart.html":{}}}],["filtered",{"_index":3134,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filtereddata",{"_index":3391,"title":{},"body":{"classes/Renderer.html":{}}}],["filters",{"_index":3121,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["filterscale",{"_index":3394,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.domain",{"_index":3400,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.iscontinuous",{"_index":3397,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscale.isdomainfixed",{"_index":3396,"title":{},"body":{"classes/Renderer.html":{}}}],["filterscales",{"_index":3136,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["filterscales[fixedscalekey",{"_index":3395,"title":{},"body":{"classes/Renderer.html":{}}}],["find",{"_index":2516,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"miscellaneous/variables.html":{}}}],["find(scales[\"x\"].index",{"_index":2537,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["finddatapointbyvalue",{"_index":271,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["finddatapointbyvalue(series",{"_index":300,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex",{"_index":311,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findindex(series.data",{"_index":358,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["findnearestindex",{"_index":3905,"title":{},"body":{"classes/UtilityService.html":{}}}],["findnearestindex(haystack",{"_index":3917,"title":{},"body":{"classes/UtilityService.html":{}}}],["fine",{"_index":1396,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["firefox",{"_index":2412,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["first",{"_index":3755,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["firstcodeunit",{"_index":3989,"title":{},"body":{"classes/UtilityService.html":{}}}],["fit",{"_index":153,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["fitness",{"_index":4330,"title":{},"body":{"license.html":{}}}],["five",{"_index":4451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixdomain",{"_index":2298,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["fixdomain(domain",{"_index":2182,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["fixed",{"_index":2181,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["fixeddomains",{"_index":4547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixedscalekey",{"_index":3392,"title":{},"body":{"classes/Renderer.html":{}}}],["flag",{"_index":2160,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["flexible",{"_index":4072,"title":{},"body":{"index.html":{}}}],["fn",{"_index":3264,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["following",{"_index":4264,"title":{},"body":{"license.html":{}}}],["force",{"_index":1305,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["force(\"collisionforce",{"_index":1405,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide",{"_index":1301,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcecollide((node",{"_index":1399,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation",{"_index":1302,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["forcesimulation(nodes",{"_index":1403,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["foreground",{"_index":2105,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/TextColorProvider.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["form",{"_index":1915,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["format",{"_index":2682,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"dependencies.html":{},"license.html":{}}}],["formatsecond",{"_index":4425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter",{"_index":780,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IBandScale.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["formatter.ts",{"_index":4423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatter?.(value",{"_index":2556,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["formattername",{"_index":779,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["formatters",{"_index":2152,"title":{"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/advanced-usage.html":{}}}],["formatters/datetime",{"_index":3898,"title":{},"body":{"classes/TimeScale.html":{}}}],["formatting",{"_index":2683,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["forming",{"_index":2043,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["forwardref",{"_index":860,"title":{},"body":{"components/ChartComponent.html":{}}}],["found",{"_index":3130,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["four",{"_index":4450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":4228,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":3754,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["front",{"_index":2439,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["full",{"_index":3722,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["function",{"_index":884,"title":{},"body":{"components/ChartComponent.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ProcessedColorProvider.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":3364,"title":{},"body":{"classes/Renderer.html":{},"injectables/ThresholdsService.html":{}}}],["future",{"_index":1870,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gap",{"_index":1710,"title":{},"body":{"classes/Grid.html":{}}}],["gauge/gauge.component",{"_index":3203,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["gaugecomponent",{"_index":3202,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["gaugerendererconfig",{"_index":1614,"title":{},"body":{"injectables/GaugeService.html":{}}}],["gaugeservice",{"_index":1583,"title":{"injectables/GaugeService.html":{}},"body":{"injectables/GaugeService.html":{}}}],["gaugeservice.quantity_series_id",{"_index":1637,"title":{},"body":{"injectables/GaugeService.html":{}}}],["gaugeservice.remainder_series_id",{"_index":1638,"title":{},"body":{"injectables/GaugeService.html":{}}}],["gaugeservice.threshold_markers_series_id",{"_index":1629,"title":{},"body":{"injectables/GaugeService.html":{}}}],["gaugethresholdsrenderer",{"_index":1616,"title":{},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gc",{"_index":3647,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["generated",{"_index":2077,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["generates",{"_index":3712,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["generatethresholdseries",{"_index":1589,"title":{},"body":{"injectables/GaugeService.html":{}}}],["generatethresholdseries(value",{"_index":1597,"title":{},"body":{"injectables/GaugeService.html":{}}}],["generic",{"_index":1918,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["get(entityid",{"_index":2023,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["get(this.interaction",{"_index":3414,"title":{},"body":{"classes/Renderer.html":{}}}],["getabsoluteposition(relativeposition",{"_index":1506,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getabsoluteposition(valarr",{"_index":3294,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["getabsoluteposition(valuesarray",{"_index":1218,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["getapproximateticks",{"_index":173,"title":{},"body":{"classes/AxisConfig.html":{}}}],["getarc(range",{"_index":3253,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getautomaticdomain",{"_index":2968,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"miscellaneous/variables.html":{}}}],["getautomaticdomain(chartseriesset",{"_index":4563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithincludedinterval",{"_index":4428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getautomaticdomainwithticks",{"_index":4429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbackgroundcolors",{"_index":1059,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getbackgrounds",{"_index":3692,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgrounds(sourceseries",{"_index":3703,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getbackgroundsdataforcontinuousscale(sourceseries",{"_index":3793,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getchartcollection",{"_index":846,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getchartcollection(collectionid",{"_index":847,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["getcloser(a",{"_index":3961,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex",{"_index":3906,"title":{},"body":{"classes/UtilityService.html":{}}}],["getclosestindex(haystack",{"_index":3927,"title":{},"body":{"classes/UtilityService.html":{}}}],["getcolorvaluebyname",{"_index":1064,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["getcolorvaluebyname(c",{"_index":1088,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getcolorvaluebyname(input",{"_index":3654,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcontainerstatestyles",{"_index":3095,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getcontentposition(areasize",{"_index":973,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["getcontrastratio(color1",{"_index":3669,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getcrosspoint",{"_index":3693,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspoint(datafrom",{"_index":3725,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy",{"_index":3694,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getcrosspointwithy(datafrom",{"_index":3734,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getd3scale",{"_index":3169,"title":{},"body":{"classes/NoopScale.html":{},"classes/Scale.html":{}}}],["getdata",{"_index":3624,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getdatamanager",{"_index":530,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getdatapointindex",{"_index":272,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointindex(renderer",{"_index":302,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["getdatapointindex(series",{"_index":3123,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition",{"_index":3096,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdatapointposition(dataseries",{"_index":3108,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain",{"_index":3098,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomain(data",{"_index":3132,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata",{"_index":3099,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["getdomainoffiltereddata(dataseries",{"_index":3135,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["geteventbus",{"_index":531,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getfixeddomains(chartseriesset",{"_index":4548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getgrid",{"_index":532,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gethighlightedvalue",{"_index":2207,"title":{},"body":{"interfaces/IChartAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethighlightedvalue(chartseries",{"_index":782,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["gethorizontalsetup",{"_index":1450,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["gethorizontalsetup(tooltippositionoffset",{"_index":1459,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getinnerradius",{"_index":3239,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinnerradius(range",{"_index":3246,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getinteractive",{"_index":2879,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getinteractivearea",{"_index":1657,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getlabel(chartseries",{"_index":2687,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getlasagna",{"_index":1658,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["getouterradius",{"_index":3240,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterradius(range",{"_index":3248,"title":{},"body":{"classes/PieRenderer.html":{}}}],["getouterwidthdimensioncorrection",{"_index":1780,"title":{},"body":{"classes/Grid.html":{}}}],["getoverlayposition(angle",{"_index":3349,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getpointereventsclass",{"_index":3054,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getpointereventsclickclass",{"_index":3056,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["getrelativeluminance(rgbcolor",{"_index":3679,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["getrenderengine",{"_index":533,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["getrequiredlayers",{"_index":2363,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["gets",{"_index":775,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/UtilityService.html":{}}}],["getscalevalues",{"_index":3907,"title":{},"body":{"classes/UtilityService.html":{}}}],["getscalevalues(scales",{"_index":3930,"title":{},"body":{"classes/UtilityService.html":{}}}],["getsectionindex(angle",{"_index":3358,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["getseries",{"_index":3626,"title":{},"body":{"classes/StatusAccessors.html":{}}}],["getseriesgroups(seriesset",{"_index":2821,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getseriesrenderstate",{"_index":2882,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["getseriesstates",{"_index":2648,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getsideindicators",{"_index":3695,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsideindicators(zones",{"_index":3736,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getsinglevalue(data",{"_index":237,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["getsparkchart",{"_index":3555,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["getstandardcolors",{"_index":1057,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getstate",{"_index":747,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{}}}],["getstream",{"_index":1574,"title":{},"body":{"classes/EventBus.html":{}}}],["getstream(streamid",{"_index":1576,"title":{},"body":{"classes/EventBus.html":{}}}],["getsvg",{"_index":1991,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["getter",{"_index":2074,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["gettextcolors",{"_index":1061,"title":{},"body":{"classes/ChartPalette.html":{}}}],["getthresholdline",{"_index":3696,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdline(zone",{"_index":3739,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines",{"_index":3697,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdlines(zones",{"_index":3743,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones",{"_index":3698,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getthresholdzones(sourceseries",{"_index":3746,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["getting",{"_index":954,"title":{"index.html":{},"license.html":{}},"body":{"classes/ChartDonutContentPlugin.html":{},"index.html":{}}}],["gettooltipposition(datapoint",{"_index":1493,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["getvalueaccessor(accessor",{"_index":3942,"title":{},"body":{"classes/UtilityService.html":{}}}],["getverticalsetup",{"_index":1442,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getverticalsetup(tooltippositionoffset",{"_index":1458,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["getvisibleserieswithlegend",{"_index":784,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["getvisibleserieswithlegendbackup",{"_index":2699,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["getxyvalues",{"_index":3908,"title":{},"body":{"classes/UtilityService.html":{}}}],["getxyvalues(xscales",{"_index":3933,"title":{},"body":{"classes/UtilityService.html":{}}}],["give",{"_index":4265,"title":{},"body":{"license.html":{}}}],["given",{"_index":843,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["go",{"_index":288,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["going",{"_index":3317,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["goodwill",{"_index":4355,"title":{},"body":{"license.html":{}}}],["governing",{"_index":4403,"title":{},"body":{"license.html":{}}}],["grant",{"_index":4220,"title":{},"body":{"license.html":{}}}],["granted",{"_index":4159,"title":{},"body":{"license.html":{}}}],["granting",{"_index":4134,"title":{},"body":{"license.html":{}}}],["grants",{"_index":4222,"title":{},"body":{"license.html":{}}}],["grayscale",{"_index":661,"title":{},"body":{"classes/Chart.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["grayscale_color_matrix",{"_index":603,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["grayscale_filter",{"_index":2321,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":83,"title":{"classes/Grid.html":{},"additional-documentation/advanced-usage/grid.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["grid's",{"_index":1662,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["grid.bottomscaleid",{"_index":2538,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["grid.default_border_class_name",{"_index":1830,"title":{},"body":{"classes/Grid.html":{}}}],["grid.grid_class_name",{"_index":1743,"title":{},"body":{"classes/Grid.html":{}}}],["grid.grid_elements_layer_name",{"_index":1762,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_height_correction",{"_index":1804,"title":{},"body":{"classes/Grid.html":{}}}],["grid.render_area_width_correction",{"_index":1806,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid.rendering_area_clip_path_prefix",{"_index":1745,"title":{},"body":{"classes/Grid.html":{}}}],["grid.rendering_area_layer_name",{"_index":1815,"title":{},"body":{"classes/Grid.html":{}}}],["grid.tick_dimension_correction",{"_index":1781,"title":{},"body":{"classes/Grid.html":{}}}],["grid.updatechartdimensionssubject",{"_index":609,"title":{},"body":{"classes/Chart.html":{}}}],["grid/config/spark",{"_index":3565,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["grid/grid",{"_index":2406,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["grid/types",{"_index":599,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["grid/xy",{"_index":2407,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["grid_class_name",{"_index":1651,"title":{},"body":{"classes/Grid.html":{}}}],["grid_elements_layer_name",{"_index":1652,"title":{},"body":{"classes/Grid.html":{}}}],["gridconfig",{"_index":130,"title":{"classes/GridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:11",{"_index":141,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:14",{"_index":139,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:16",{"_index":131,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["gridconfig:28",{"_index":136,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["griddimension",{"_index":2562,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.height",{"_index":2566,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["griddimension.width",{"_index":2578,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["gridelementslayer",{"_index":1724,"title":{},"body":{"classes/Grid.html":{}}}],["gridplugin",{"_index":641,"title":{},"body":{"classes/Chart.html":{}}}],["grids",{"_index":1750,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gridticks",{"_index":154,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["grossly",{"_index":4344,"title":{},"body":{"license.html":{}}}],["group",{"_index":812,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["grouped",{"_index":2194,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["groupid",{"_index":2664,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["grouping",{"_index":805,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["grow",{"_index":1955,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["gsrgb",{"_index":3683,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["hack",{"_index":3072,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["handle",{"_index":1204,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["handleclose",{"_index":1351,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handled",{"_index":1155,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["handlelabelupdate",{"_index":2531,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["handlelineupdate",{"_index":2602,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["handleopen",{"_index":1332,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["handler",{"_index":182,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":3300,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["handling",{"_index":2056,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["harmless",{"_index":4379,"title":{},"body":{"license.html":{}}}],["hasinnerscale(scale",{"_index":2191,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["hasinputdescription",{"_index":2847,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hasinputunitlabel",{"_index":3421,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinputvalue",{"_index":3422,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["hasinteractionlabel",{"_index":3616,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["hasplugin",{"_index":534,"title":{},"body":{"classes/Chart.html":{}}}],["hasplugin(classref",{"_index":562,"title":{},"body":{"classes/Chart.html":{}}}],["hasprojecteddescription",{"_index":2848,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["having",{"_index":3757,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["haystack",{"_index":3924,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.findindex(straw",{"_index":3950,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack.length",{"_index":3947,"title":{},"body":{"classes/UtilityService.html":{}}}],["haystack[0",{"_index":3949,"title":{},"body":{"classes/UtilityService.html":{}}}],["height",{"_index":633,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["height(value",{"_index":1539,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["heightoffset",{"_index":2565,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["helper",{"_index":2675,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["helps",{"_index":341,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["here",{"_index":904,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IPopoverPluginConfig.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{}}}],["hereby",{"_index":4221,"title":{},"body":{"license.html":{}}}],["herein",{"_index":4306,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":2101,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["hide",{"_index":460,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hidesubject",{"_index":440,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["hiding",{"_index":1193,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["high",{"_index":3999,"title":{},"body":{"classes/UtilityService.html":{}}}],["highlight",{"_index":266,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{}}}],["highlight_data_point",{"_index":4514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_data_point_event",{"_index":4430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series",{"_index":4515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlight_series_event",{"_index":400,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["highlightdata",{"_index":2729,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdata.index",{"_index":2732,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapoint",{"_index":273,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapoint(renderer",{"_index":305,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["highlightdatapoint(renderseries",{"_index":3111,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlightdatapresentpredicate",{"_index":2731,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlightdatapresentpredicate(highlightdata",{"_index":2734,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["highlighted",{"_index":283,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["highlighteddatapoints",{"_index":3514,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["highlights",{"_index":2509,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["highlightstrategy",{"_index":2134,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["hit",{"_index":1646,"title":{},"body":{"injectables/GaugeService.html":{}}}],["hold",{"_index":4378,"title":{},"body":{"license.html":{}}}],["horizontal",{"_index":404,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["horizontalbaraccessors",{"_index":1880,"title":{"classes/HorizontalBarAccessors.html":{}},"body":{"classes/HorizontalBarAccessors.html":{}}}],["horizontalpadding",{"_index":167,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["host",{"_index":1136,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["hostbinding",{"_index":2885,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.${legend_series_class_name",{"_index":2898,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbinding(`class.inverse",{"_index":2901,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostbindings",{"_index":2854,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener",{"_index":2886,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlistener(\"click",{"_index":2917,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hostlisteners",{"_index":2856,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["hour",{"_index":4535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover",{"_index":1256,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["hovered",{"_index":1926,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["hovering",{"_index":2135,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["htmlelement",{"_index":541,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{}}}],["http://www.apache.org/licenses",{"_index":4121,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":4402,"title":{},"body":{"license.html":{}}}],["https://github.com/angular/zone.js/issues/1011",{"_index":905,"title":{},"body":{"components/ChartComponent.html":{}}}],["https://github.com/d3/d3",{"_index":2419,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["https://github.com/mathiasbynens/css.escape.git",{"_index":3981,"title":{},"body":{"classes/UtilityService.html":{}}}],["https://github.com/ng",{"_index":3384,"title":{},"body":{"classes/Renderer.html":{}}}],["https://jira.solarwinds.com/browse/nui",{"_index":4447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://stackoverflow.com/a/1968345",{"_index":3855,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["https://www.w3.org/tr/wcag20/#contrast",{"_index":3664,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["https://www.w3.org/tr/wcag20/relative",{"_index":3677,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["huge",{"_index":1013,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["i).valueof",{"_index":3945,"title":{},"body":{"classes/UtilityService.html":{}}}],["iaccessors",{"_index":34,"title":{"interfaces/IAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["iallaround",{"_index":106,"title":{"interfaces/IAllAround.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["iareaaccessors",{"_index":9,"title":{"interfaces/IAreaAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["iareadataaccessors",{"_index":25,"title":{"interfaces/IAreaDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iarearendererconfig",{"_index":2081,"title":{"interfaces/IAreaRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iareaseriesaccessors",{"_index":27,"title":{"interfaces/IAreaSeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["iaxis",{"_index":2078,"title":{"interfaces/IAxis.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iaxisconfig",{"_index":152,"title":{"interfaces/IAxisConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["iaxisconfig#approximateticks",{"_index":191,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#fit",{"_index":189,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#gridticks",{"_index":186,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticklabel",{"_index":188,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#ticksize",{"_index":187,"title":{},"body":{"classes/AxisConfig.html":{}}}],["iaxisconfig#visible",{"_index":185,"title":{},"body":{"classes/AxisConfig.html":{}}}],["ibandscale",{"_index":2139,"title":{"interfaces/IBandScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ibaraccessors",{"_index":201,"title":{"interfaces/IBarAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["ibarchartconfig",{"_index":448,"title":{"interfaces/IBarChartConfig.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["ibardataaccessors",{"_index":203,"title":{"interfaces/IBarDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["ibarrendererconfig",{"_index":2129,"title":{"interfaces/IBarRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iborderconfig",{"_index":1703,"title":{"interfaces/IBorderConfig.html":{}},"body":{"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iborders",{"_index":1704,"title":{"interfaces/IBorders.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ichart",{"_index":464,"title":{"interfaces/IChart.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["ichartassist",{"_index":769,"title":{"interfaces/IChartAssist.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartassist#gethighlightedvalue",{"_index":3599,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassist#update",{"_index":3578,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ichartassistevent",{"_index":792,"title":{"interfaces/IChartAssistEvent.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["ichartassistevents",{"_index":2695,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["ichartassistseries",{"_index":750,"title":{"interfaces/IChartAssistSeries.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["ichartcollectionevent",{"_index":2001,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartcomponent",{"_index":821,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartevent",{"_index":596,"title":{"interfaces/IChartEvent.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["ichartmarker",{"_index":994,"title":{"interfaces/IChartMarker.html":{}},"body":{"components/ChartMarkerComponent.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/VerticalBarAccessors.html":{}}}],["ichartpalette",{"_index":1047,"title":{"interfaces/IChartPalette.html":{}},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["ichartplugin",{"_index":548,"title":{"interfaces/IChartPlugin.html":{}},"body":{"classes/Chart.html":{},"classes/ChartPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ichartseries",{"_index":576,"title":{"interfaces/IChartSeries.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["ichartviewstatuseventpayload",{"_index":881,"title":{"interfaces/IChartViewStatusEventPayload.html":{}},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["icon",{"_index":2633,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["icoordinates",{"_index":1935,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["id",{"_index":765,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{}}}],["id.directive",{"_index":3195,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["id.directive.ts",{"_index":803,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["id.directive.ts:20",{"_index":823,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["idataaccessors",{"_index":35,"title":{"interfaces/IDataAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["idatapoint",{"_index":1188,"title":{"interfaces/IDataPoint.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{}}}],["idatapointspayload",{"_index":453,"title":{"interfaces/IDataPointsPayload.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["idataseries",{"_index":209,"title":{"interfaces/IDataSeries.html":{}},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["ideally",{"_index":1872,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["identification",{"_index":4394,"title":{},"body":{"license.html":{}}}],["identified",{"_index":842,"title":{},"body":{"injectables/ChartCollectionService.html":{},"index.html":{}}}],["identifier",{"_index":1809,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{}}}],["identify",{"_index":1336,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["identifying",{"_index":4387,"title":{},"body":{"license.html":{}}}],["identity",{"_index":3925,"title":{},"body":{"classes/UtilityService.html":{}}}],["idimensionconfig",{"_index":137,"title":{"interfaces/IDimensionConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["idimensionconfig#autoheight",{"_index":1558,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#autowidth",{"_index":1557,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#height",{"_index":1561,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#margin",{"_index":1555,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerheight",{"_index":1568,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#outerwidth",{"_index":1563,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#padding",{"_index":1556,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensionconfig#width",{"_index":1559,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["idimensions",{"_index":598,"title":{"interfaces/IDimensions.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["idomainlimits",{"_index":1938,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ids",{"_index":4061,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ielementposition",{"_index":935,"title":{"interfaces/IElementPosition.html":{}},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["ienhancedlinecapconfig",{"_index":2110,"title":{"interfaces/IEnhancedLineCapConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["iformatters",{"_index":2153,"title":{"interfaces/IFormatters.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["igaugethreshold",{"_index":1594,"title":{},"body":{"injectables/GaugeService.html":{}}}],["igaugethresholdmarker",{"_index":1618,"title":{},"body":{"injectables/GaugeService.html":{}}}],["igaugethresholdsrendererconfig",{"_index":1963,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ignore",{"_index":129,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/TextColorProvider.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["ignore_interaction_class",{"_index":4431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ignorefordomaincalculation",{"_index":1946,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["igrid",{"_index":539,"title":{"interfaces/IGrid.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["igrid#build",{"_index":1739,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#config",{"_index":1735,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#getinteractivearea",{"_index":1729,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#getlasagna",{"_index":1731,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#target",{"_index":1737,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#update",{"_index":1766,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#updatedimensions",{"_index":1769,"title":{},"body":{"classes/Grid.html":{}}}],["igrid#updateranges",{"_index":1775,"title":{},"body":{"classes/Grid.html":{}}}],["igridconfig",{"_index":133,"title":{"interfaces/IGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["igridconfig#borders",{"_index":1878,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#cursor",{"_index":1879,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#dimension",{"_index":1877,"title":{},"body":{"classes/GridConfig.html":{}}}],["igridconfig#interactive",{"_index":1876,"title":{},"body":{"classes/GridConfig.html":{}}}],["ihasinnerscale",{"_index":2189,"title":{"interfaces/IHasInnerScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["ihighlightstrategy",{"_index":268,"title":{"interfaces/IHighlightStrategy.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["ii",{"_index":4148,"title":{},"body":{"license.html":{}}}],["iii",{"_index":4155,"title":{},"body":{"license.html":{}}}],["iinteractioncoordinatespayload",{"_index":2237,"title":{"interfaces/IInteractionCoordinatesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["iinteractiondatapointevent",{"_index":1206,"title":{"interfaces/IInteractionDataPointEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{}}}],["iinteractiondatapointsevent",{"_index":1205,"title":{"interfaces/IInteractionDataPointsEvent.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["iinteractionevent",{"_index":1936,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionpayload",{"_index":2019,"title":{"interfaces/IInteractionPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["iinteractionvalues",{"_index":2233,"title":{"interfaces/IInteractionValues.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/UtilityService.html":{}}}],["iinteractionvaluespayload",{"_index":2235,"title":{"interfaces/IInteractionValuesPayload.html":{}},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["ilasagnalayer",{"_index":1921,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["ilineaccessors",{"_index":2098,"title":{"interfaces/ILineAccessors.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["ilinearscales",{"_index":1964,"title":{"interfaces/ILinearScales.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ilinedataaccessors",{"_index":2256,"title":{"interfaces/ILineDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["ilinerendererconfig",{"_index":2111,"title":{"interfaces/ILineRendererConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["ilineseriesaccessors",{"_index":2257,"title":{"interfaces/ILineSeriesAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["imarkerinteractionconfig",{"_index":2092,"title":{"interfaces/IMarkerInteractionConfig.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/variables.html":{}}}],["impersonates",{"_index":3036,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["implementation",{"_index":1491,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["implementations/interfaces",{"_index":1754,"title":{},"body":{"classes/Grid.html":{}}}],["implements",{"_index":8,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{}}}],["implied",{"_index":4327,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"license.html":{}}}],["imports",{"_index":3210,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["improving",{"_index":4212,"title":{},"body":{"license.html":{}}}],["inability",{"_index":4353,"title":{},"body":{"license.html":{}}}],["inactive",{"_index":2326,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inactivecolor",{"_index":2327,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["inbounds",{"_index":3956,"title":{},"body":{"classes/UtilityService.html":{}}}],["incidental",{"_index":4349,"title":{},"body":{"license.html":{}}}],["include",{"_index":4087,"title":{},"body":{"index.html":{},"license.html":{}}}],["included",{"_index":4177,"title":{},"body":{"license.html":{}}}],["includes",{"_index":2267,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["including",{"_index":2042,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"license.html":{}}}],["inclusion",{"_index":4195,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":4219,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":2415,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["incurred",{"_index":4380,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":4376,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":4369,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":2218,"title":{},"body":{"interfaces/IDataAccessors.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IInteractionValues.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["indexincrement",{"_index":3958,"title":{},"body":{"classes/UtilityService.html":{}}}],["indexof(fixeddomains[next",{"_index":4554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicated",{"_index":4175,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":1923,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicating",{"_index":1165,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendSeriesComponent.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SideIndicatorAccessors.html":{}}}],["indicator",{"_index":2316,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicators",{"_index":2332,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["indicatorsactive",{"_index":3881,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["indirect",{"_index":4144,"title":{},"body":{"license.html":{}}}],["individual",{"_index":2136,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"components/LegendComponent.html":{},"license.html":{}}}],["infinite",{"_index":3750,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["infinity",{"_index":967,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["info",{"_index":1169,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":1431,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["informational",{"_index":4291,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":4243,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":4256,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":115,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/HorizontalBarAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/TextColorProvider.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["initial",{"_index":1011,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["initialization",{"_index":1994,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["initialize",{"_index":444,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["initialmax",{"_index":1622,"title":{},"body":{"injectables/GaugeService.html":{}}}],["initialmax).map(s",{"_index":1627,"title":{},"body":{"injectables/GaugeService.html":{}}}],["initialvalue",{"_index":1621,"title":{},"body":{"injectables/GaugeService.html":{}}}],["initplugin",{"_index":1120,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["inject",{"_index":824,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{}}}],["injectable",{"_index":836,"title":{"injectables/ChartCollectionService.html":{},"injectables/GaugeService.html":{},"injectables/ThresholdsService.html":{}},"body":{"injectables/ChartCollectionService.html":{},"injectables/GaugeService.html":{},"injectables/ThresholdsService.html":{}}}],["injectables",{"_index":837,"title":{},"body":{"injectables/ChartCollectionService.html":{},"injectables/GaugeService.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["injected",{"_index":811,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["injectthresholdsdata",{"_index":3699,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["injectthresholdsdata(dataseries",{"_index":3751,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["inline",{"_index":2639,"title":{},"body":{"components/LegendComponent.html":{}}}],["innerradius(0",{"_index":3256,"title":{},"body":{"classes/PieRenderer.html":{}}}],["innerscale",{"_index":2190,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["inoopaccessors",{"_index":2281,"title":{"interfaces/INoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{}}}],["input",{"_index":825,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/ProcessedColorProvider.html":{},"components/RichLegendTileComponent.html":{},"classes/TextColorProvider.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["input(\"nuichartcollectionid",{"_index":831,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["inputs",{"_index":819,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"components/RichLegendTileComponent.html":{}}}],["inputseriesset",{"_index":772,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["inputseriesset.map(chartseries",{"_index":3579,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks",{"_index":3582,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.length",{"_index":3588,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inputsparks.map((spark",{"_index":3586,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["inside",{"_index":950,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["inspired",{"_index":3854,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["instance",{"_index":934,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/PathMarker.html":{},"classes/SideIndicatorAccessors.html":{}}}],["instanceof",{"_index":619,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["instances",{"_index":3499,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["instantiate",{"_index":2269,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["instead",{"_index":719,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["institute",{"_index":4247,"title":{},"body":{"license.html":{}}}],["insures",{"_index":2057,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["intentionally",{"_index":4193,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":733,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interaction_coordinates",{"_index":4517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_coordinates_event",{"_index":2236,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_point",{"_index":4518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_point_event",{"_index":1187,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/MarkerUtils.html":{},"miscellaneous/variables.html":{}}}],["interaction_data_points",{"_index":4519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_data_points_event",{"_index":1147,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["interaction_margin",{"_index":2929,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interaction_series",{"_index":4520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_series_event",{"_index":2934,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/variables.html":{}}}],["interaction_values",{"_index":4522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active",{"_index":4521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interaction_values_active_event",{"_index":2404,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interaction_values_event",{"_index":2234,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/variables.html":{}}}],["interactionhandlermap",{"_index":2426,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactionlabel",{"_index":2548,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.empty",{"_index":2550,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.remove",{"_index":2552,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabel.select(\"text",{"_index":2558,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabellayer",{"_index":2521,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin",{"_index":2507,"title":{"classes/InteractionLabelPlugin.html":{}},"body":{"classes/InteractionLabelPlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlabelplugin.layer_name",{"_index":2525,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__rect",{"_index":2590,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlabelplugin.layer_name}__text",{"_index":2592,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["interactionlinelayer",{"_index":2598,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionlineplugin",{"_index":2593,"title":{"classes/InteractionLinePlugin.html":{}},"body":{"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{}}}],["interactionlineplugin.layer_name",{"_index":2609,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["interactionpath",{"_index":2935,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionpath.empty",{"_index":2939,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["interactionplugins",{"_index":100,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["interactionstrategy",{"_index":2123,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["interactiontype",{"_index":1173,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["interactiontype.click",{"_index":2954,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{}}}],["interactiontype.hover",{"_index":3064,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["interactiontype.mousedown",{"_index":2429,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mousemove",{"_index":1174,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["interactiontype.mouseup",{"_index":2432,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["interactive",{"_index":104,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["interactive(interactive",{"_index":2892,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["interactivearea",{"_index":1723,"title":{},"body":{"classes/Grid.html":{}}}],["interface",{"_index":40,"title":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{}},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"classes/XYAccessors.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["interfaces",{"_index":1899,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{},"interfaces/ZoneCross.html":{},"license.html":{},"overview.html":{}}}],["intersect",{"_index":3804,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["intersected",{"_index":2016,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["intersection",{"_index":918,"title":{},"body":{"components/ChartComponent.html":{},"injectables/ThresholdsService.html":{}}}],["intersectionobserver",{"_index":885,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserver(this.intersectionobservercallback",{"_index":888,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobservercallback",{"_index":914,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersectionobserverentry",{"_index":916,"title":{},"body":{"components/ChartComponent.html":{}}}],["intersections",{"_index":3792,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["interval",{"_index":323,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["interval[0",{"_index":4565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interval[1",{"_index":4567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformat(moment.locale",{"_index":4540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intl.datetimeformatoptions",{"_index":4539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat",{"_index":4432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intlformat(d",{"_index":4534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invert",{"_index":2299,"title":{},"body":{"interfaces/IScale.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["invert(coordinate",{"_index":2175,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["invert(next",{"_index":4012,"title":{},"body":{"classes/UtilityService.html":{}}}],["inverted",{"_index":4011,"title":{},"body":{"classes/UtilityService.html":{}}}],["invisible",{"_index":1792,"title":{},"body":{"classes/Grid.html":{}}}],["invoke",{"_index":3116,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["invoked",{"_index":1995,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["ipopoverpluginconfig",{"_index":1161,"title":{"interfaces/IPopoverPluginConfig.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["iposition",{"_index":1310,"title":{"interfaces/IPosition.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["iradialaccessors",{"_index":2284,"title":{"interfaces/IRadialAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialdataaccessors",{"_index":2286,"title":{"interfaces/IRadialDataAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["iradialrendererconfig",{"_index":1947,"title":{"interfaces/IRadialRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"miscellaneous/variables.html":{}}}],["iradialscales",{"_index":1599,"title":{"interfaces/IRadialScales.html":{}},"body":{"injectables/GaugeService.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["iradialseriesaccessors",{"_index":2287,"title":{"interfaces/IRadialSeriesAccessors.html":{}},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["irectangleaccessors",{"_index":331,"title":{"interfaces/IRectangleAccessors.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["irectangledataaccessors",{"_index":206,"title":{"interfaces/IRectangleDataAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irectangleseriesaccessors",{"_index":205,"title":{"interfaces/IRectangleSeriesAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/StatusAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["irendercontainers",{"_index":2004,"title":{"interfaces/IRenderContainers.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["irendererconfig",{"_index":1940,"title":{"interfaces/IRendererConfig.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["irenderereventpayload",{"_index":328,"title":{"interfaces/IRendererEventPayload.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["irenderseries",{"_index":295,"title":{"interfaces/IRenderSeries.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["irenderstatedata",{"_index":572,"title":{"interfaces/IRenderStateData.html":{}},"body":{"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["irenderstatesindex",{"_index":798,"title":{"interfaces/IRenderStatesIndex.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["irrevocable",{"_index":4229,"title":{},"body":{"license.html":{}}}],["isactive",{"_index":2344,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isactiveclassapplied",{"_index":2902,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isarray",{"_index":313,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["isarray(colors",{"_index":1076,"title":{},"body":{"classes/ChartPalette.html":{}}}],["isarray(value",{"_index":361,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["isarray(xvalue",{"_index":2544,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["isbandscale",{"_index":325,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["isbandscale(scale",{"_index":2187,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["isbandscale(scales.x",{"_index":3779,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["iscale",{"_index":2141,"title":{"interfaces/IScale.html":{}},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["iscale#d3scale",{"_index":3475,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#domain",{"_index":3480,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#fixdomain",{"_index":3483,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#range",{"_index":3476,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reverse",{"_index":3486,"title":{},"body":{"classes/Scale.html":{}}}],["iscale#reversed",{"_index":3488,"title":{},"body":{"classes/Scale.html":{}}}],["ischartinview",{"_index":923,"title":{},"body":{"components/ChartComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["iscontinuous",{"_index":2169,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainfixed",{"_index":2162,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isdomainvalid",{"_index":2170,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["isempty",{"_index":1697,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(data.coordinates",{"_index":2447,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(scales",{"_index":2535,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["isempty(this.grid.scales",{"_index":2446,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isempty(this.scales",{"_index":1767,"title":{},"body":{"classes/Grid.html":{}}}],["isempty(xvalue",{"_index":4006,"title":{},"body":{"classes/UtilityService.html":{}}}],["isempty(yvalue",{"_index":4008,"title":{},"body":{"classes/UtilityService.html":{}}}],["isequal",{"_index":1306,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isequal(currenttooltipdirectivesindex",{"_index":1342,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iseriesaccessors",{"_index":36,"title":{"interfaces/ISeriesAccessors.html":{}},"body":{"classes/AreaAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isetdomaineventpayload",{"_index":2021,"title":{"interfaces/ISetDomainEventPayload.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isfunction",{"_index":1005,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["isfunction(this.marker.getsvg",{"_index":1021,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["ishorizontalclassapplied",{"_index":2900,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isideindicatoraccessors",{"_index":2314,"title":{"interfaces/ISideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["isideindicatordataaccessors",{"_index":2318,"title":{"interfaces/ISideIndicatorDataAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isideindicatorseriesaccessors",{"_index":2319,"title":{"interfaces/ISideIndicatorSeriesAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["isimplethresholdzone",{"_index":2371,"title":{"interfaces/ISimpleThresholdZone.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["isinrange",{"_index":3043,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["isinteractiveclassapplied",{"_index":2899,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["islegendactive",{"_index":3515,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["isnan(date.gettime",{"_index":3900,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnan(value",{"_index":2999,"title":{},"body":{"classes/LinearScale.html":{}}}],["isnan(value.gettime",{"_index":3901,"title":{},"body":{"classes/TimeScale.html":{}}}],["isnil",{"_index":1308,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{}}}],["isnil(accessor",{"_index":3408,"title":{},"body":{"classes/Renderer.html":{}}}],["isnil(position.height",{"_index":1382,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(position.width",{"_index":1383,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["isnil(renderer.config.strokewidth",{"_index":2937,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["isopen",{"_index":1195,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["ispark",{"_index":756,"title":{"interfaces/ISpark.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{}}}],["isparkchartassistchart",{"_index":757,"title":{"interfaces/ISparkChartAssistChart.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{}}}],["isreversed",{"_index":3470,"title":{},"body":{"classes/Scale.html":{}}}],["isselected",{"_index":2851,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isselectedchange",{"_index":2853,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["isserieshidden",{"_index":2649,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["isserieshidden(seriesid",{"_index":2659,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["issue",{"_index":4207,"title":{},"body":{"license.html":{}}}],["istackmetadata",{"_index":2195,"title":{"interfaces/IStackMetadata.html":{}},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["istartendrangeaccessors",{"_index":2292,"title":{"interfaces/IStartEndRangeAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["istatusaccessors",{"_index":2380,"title":{"interfaces/IStatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["istatusdataaccessors",{"_index":2382,"title":{"interfaces/IStatusDataAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["isundefined",{"_index":315,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"injectables/GaugeService.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(collection",{"_index":852,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["isundefined(color",{"_index":3637,"title":{},"body":{"classes/SvgMarker.html":{}}}],["isundefined(inverted",{"_index":4013,"title":{},"body":{"classes/UtilityService.html":{}}}],["isundefined(prev",{"_index":962,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(radius",{"_index":968,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["isundefined(this.brushstartx",{"_index":2484,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["isundefined(this.selecteddatapointidxfn",{"_index":389,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["isundefined(thresholds[1].value",{"_index":1644,"title":{},"body":{"injectables/GaugeService.html":{}}}],["isvertical",{"_index":1413,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iszoneedge",{"_index":2011,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["it'll",{"_index":2721,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["it's",{"_index":1395,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["item",{"_index":1293,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["item.id",{"_index":2765,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["item.value.seriesid",{"_index":1331,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["iterations(20",{"_index":1402,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itextoverflowargs",{"_index":2046,"title":{"interfaces/ITextOverflowArgs.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["iticklabelconfig",{"_index":166,"title":{"interfaces/ITickLabelConfig.html":{}},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["itooltipnode",{"_index":1314,"title":{"interfaces/ITooltipNode.html":{}},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["itooltipposition",{"_index":1433,"title":{"interfaces/ITooltipPosition.html":{}},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["itself",{"_index":920,"title":{},"body":{"components/ChartComponent.html":{}}}],["ivalueprovider",{"_index":1052,"title":{"interfaces/IValueProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{}}}],["ivaluethicknessaccessors",{"_index":2293,"title":{"interfaces/IValueThicknessAccessors.html":{}},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["ixydataaccessors",{"_index":2258,"title":{"interfaces/IXYDataAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["ixygridconfig",{"_index":2066,"title":{"interfaces/IXYGridConfig.html":{}},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["ixyscales",{"_index":326,"title":{"interfaces/IXYScales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{}}}],["izonecrosspoint",{"_index":2008,"title":{"interfaces/IZoneCrossPoint.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["izoompluginconfiguration",{"_index":2397,"title":{"interfaces/IZoomPluginConfiguration.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["j",{"_index":370,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["january",{"_index":4119,"title":{},"body":{"license.html":{}}}],["keeping",{"_index":3528,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["keeps",{"_index":3004,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["kept",{"_index":2270,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["key",{"_index":778,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/XYAccessors.html":{}}}],["keyof",{"_index":335,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{}}}],["keys",{"_index":1974,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["kind",{"_index":1868,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"license.html":{}}}],["known",{"_index":2411,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["label",{"_index":2053,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/typealiases.html":{}}}],["label's",{"_index":2058,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"rect",{"_index":2589,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["label.append(\"text",{"_index":2591,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelcontent",{"_index":2555,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["labelgroup",{"_index":2079,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["labelplugin",{"_index":3618,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labelplugin.initialize",{"_index":3620,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["labels",{"_index":2052,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["labelwidth",{"_index":2575,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["language",{"_index":4067,"title":{},"body":{"index.html":{},"license.html":{}}}],["lasagna",{"_index":592,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["lasagna(>(this.container",{"_index":1756,"title":{},"body":{"classes/Grid.html":{}}}],["last",{"_index":2719,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"index.html":{}}}],["lastgridconfig",{"_index":3516,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lastinteractionvaluespayload",{"_index":2520,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lastspark",{"_index":3587,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["lastusedindex",{"_index":3504,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["law",{"_index":4322,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":4252,"title":{},"body":{"license.html":{}}}],["layer",{"_index":1665,"title":{},"body":{"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["layer's",{"_index":2438,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["layer.selectall(`.${interactionlineplugin.layer_name}`).data(data",{"_index":2606,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["layer_name",{"_index":2421,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["layering",{"_index":2072,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["layers",{"_index":3141,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["layout",{"_index":4111,"title":{"additional-documentation/layout.html":{}},"body":{"index.html":{}}}],["left",{"_index":114,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/XYGridConfig.html":{}}}],["legal",{"_index":4135,"title":{},"body":{"license.html":{}}}],["legend",{"_index":482,"title":{"additional-documentation/advanced-usage/legend.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"overview.html":{},"additional-documentation/advanced-usage.html":{}}}],["legend's",{"_index":2624,"title":{},"body":{"components/LegendComponent.html":{},"classes/SparkChartAssist.html":{}}}],["legend'},{'name",{"_index":514,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component",{"_index":2888,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["legend.component.html",{"_index":2617,"title":{},"body":{"components/LegendComponent.html":{}}}],["legend/legend",{"_index":3204,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend/legend.component",{"_index":3208,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["legend_series_class_name",{"_index":2889,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendcomponent",{"_index":513,"title":{"components/LegendComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendinteractionassist",{"_index":2644,"title":{"classes/LegendInteractionAssist.html":{}},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendinteractionassist(this",{"_index":2708,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendlabeldata$(chartseries",{"_index":2722,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendorientation",{"_index":2627,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"miscellaneous/enumerations.html":{}}}],["legendorientation.horizontal",{"_index":2916,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["legendorientation.vertical",{"_index":2628,"title":{},"body":{"components/LegendComponent.html":{}}}],["legendseries",{"_index":2834,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"components/RichLegendTileComponent.html":{}}}],["legendseries.length",{"_index":2837,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["legendseriescomponent",{"_index":515,"title":{"components/LegendSeriesComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["legendseriesset",{"_index":2693,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["length",{"_index":1717,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/UtilityService.html":{}}}],["lengthlimit",{"_index":362,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["level",{"_index":1639,"title":{},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{}}}],["levels",{"_index":275,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["liability",{"_index":4339,"title":{},"body":{"license.html":{}}}],["liable",{"_index":4347,"title":{},"body":{"license.html":{}}}],["library",{"_index":1394,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"index.html":{}}}],["licensable",{"_index":4241,"title":{},"body":{"license.html":{}}}],["license",{"_index":4116,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":4297,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":4399,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":4257,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":4130,"title":{},"body":{"license.html":{}}}],["light",{"_index":1080,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{},"miscellaneous/variables.html":{}}}],["lighten",{"_index":3261,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["lighter",{"_index":3674,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["limit",{"_index":3741,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.accessor",{"_index":3845,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limit.zoneboundary",{"_index":3846,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["limitation",{"_index":4328,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":4404,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3363,"title":{},"body":{"classes/Renderer.html":{},"license.html":{}}}],["limiting",{"_index":4560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limits",{"_index":2054,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["limits[value",{"_index":3836,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["line",{"_index":149,"title":{"additional-documentation/chart-types/line.html":{}},"body":{"classes/AreaGridConfig.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["line.enter",{"_index":2610,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line.exit().remove",{"_index":2614,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["line/line",{"_index":2099,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["line:deprecation",{"_index":3569,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["line:no",{"_index":829,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/LegendInteractionAssist.html":{}}}],["lineaccessors",{"_index":2261,"title":{"classes/LineAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["linearscale",{"_index":2960,"title":{"classes/LinearScale.html":{}},"body":{"classes/LinearScale.html":{}}}],["linecap",{"_index":2116,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["linerenderer",{"_index":2100,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["linerenderer.getstrokestyledashed(1",{"_index":3090,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["lines",{"_index":2119,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"injectables/ThresholdsService.html":{}}}],["lineselectseriesinteractionstrategy",{"_index":2122,"title":{"classes/LineSelectSeriesInteractionStrategy.html":{}},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["link",{"_index":184,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/Scale.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"license.html":{}}}],["list",{"_index":2155,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["listened",{"_index":1149,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["listening",{"_index":917,"title":{},"body":{"components/ChartComponent.html":{}}}],["listens",{"_index":1146,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lists",{"_index":4205,"title":{},"body":{"license.html":{}}}],["literal",{"_index":303,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionValues.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["litigation",{"_index":4248,"title":{},"body":{"license.html":{}}}],["llc",{"_index":4398,"title":{},"body":{"license.html":{}}}],["localize",{"_index":3189,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["localizefn",{"_index":3190,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["located",{"_index":3341,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["lodash/clonedeep",{"_index":3558,"title":{},"body":{"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["lodash/debounce",{"_index":875,"title":{},"body":{"components/ChartComponent.html":{}}}],["lodash/defaultsdeep",{"_index":1183,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/each",{"_index":581,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["lodash/find",{"_index":2517,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["lodash/findindex",{"_index":312,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["lodash/get",{"_index":3381,"title":{},"body":{"classes/Renderer.html":{}}}],["lodash/identity",{"_index":3939,"title":{},"body":{"classes/UtilityService.html":{}}}],["lodash/isarray",{"_index":314,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPalette.html":{},"classes/InteractionLabelPlugin.html":{}}}],["lodash/isempty",{"_index":1698,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendSeriesComponent.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/isequal",{"_index":1307,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["lodash/isfunction",{"_index":1006,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["lodash/isnil",{"_index":1309,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{}}}],["lodash/isundefined",{"_index":316,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"injectables/GaugeService.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/SvgMarker.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["lodash/pickby",{"_index":1185,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["lodash/sortby",{"_index":3761,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/unionwith",{"_index":3763,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["lodash/values",{"_index":1186,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["loggerservice",{"_index":3701,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["logic",{"_index":3038,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["look",{"_index":4095,"title":{},"body":{"index.html":{}}}],["loss",{"_index":4354,"title":{},"body":{"license.html":{}}}],["losses",{"_index":4361,"title":{},"body":{"license.html":{}}}],["low",{"_index":3998,"title":{},"body":{"classes/UtilityService.html":{}}}],["lowc",{"_index":3651,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["lt",{"_index":2375,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{}}}],["luminance",{"_index":3668,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance.xml",{"_index":3678,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance1",{"_index":3670,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["luminance2",{"_index":3672,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["m",{"_index":4469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m0",{"_index":4458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":4173,"title":{},"body":{"license.html":{}}}],["magenta",{"_index":2331,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["magic",{"_index":430,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["mailing",{"_index":4204,"title":{},"body":{"license.html":{}}}],["main",{"_index":3718,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["maintain",{"_index":1755,"title":{},"body":{"classes/Grid.html":{}}}],["maintenance",{"_index":4081,"title":{},"body":{"index.html":{}}}],["make",{"_index":2957,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"license.html":{}}}],["making",{"_index":4161,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":4359,"title":{},"body":{"license.html":{}}}],["managed",{"_index":4209,"title":{},"body":{"license.html":{}}}],["managemarker",{"_index":3023,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["managemarker(dataseries",{"_index":3034,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["management",{"_index":4146,"title":{},"body":{"license.html":{}}}],["manager",{"_index":589,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["manually",{"_index":1874,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["many",{"_index":286,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["map",{"_index":2669,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["map((s",{"_index":4438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map(event",{"_index":2727,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["map(s",{"_index":4437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mappedvalueprovider",{"_index":3000,"title":{"classes/MappedValueProvider.html":{}},"body":{"classes/MappedValueProvider.html":{}}}],["margin",{"_index":122,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["margins",{"_index":2039,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["marginsheight",{"_index":1569,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marginswidth",{"_index":1564,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["marked",{"_index":4214,"title":{},"body":{"license.html":{}}}],["marker",{"_index":53,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartMarkerComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["marker's",{"_index":3026,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker'},{'name",{"_index":506,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["marker.component",{"_index":3197,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["marker.component.html",{"_index":984,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.less",{"_index":983,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts",{"_index":982,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:16",{"_index":995,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:17",{"_index":993,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:18",{"_index":992,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:19",{"_index":996,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:21",{"_index":1001,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:23",{"_index":1002,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:24",{"_index":998,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:25",{"_index":1003,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.component.ts:27",{"_index":990,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["marker.setcolor(color",{"_index":3060,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marker.ts",{"_index":3213,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker.ts:14",{"_index":3632,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:18",{"_index":3633,"title":{},"body":{"classes/SvgMarker.html":{}}}],["marker.ts:26",{"_index":3221,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:38",{"_index":3220,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:8",{"_index":3219,"title":{},"body":{"classes/PathMarker.html":{}}}],["marker.ts:9",{"_index":3216,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["marker/chart",{"_index":981,"title":{},"body":{"components/ChartMarkerComponent.html":{},"modules/NuiChartsModule.html":{}}}],["marker_path_class",{"_index":3021,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteraction",{"_index":2085,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["markerinteractionconfig",{"_index":3030,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.clickable",{"_index":3057,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerinteractionconfig.enabled",{"_index":3055,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerprovider",{"_index":16,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["markers",{"_index":1608,"title":{"additional-documentation/advanced-usage/input-structure/markers.html":{}},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["markertarget",{"_index":3048,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").classed(markerutils.marker_path_class",{"_index":3070,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).select(\"path\").node",{"_index":3071,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget).selectall(\"g",{"_index":3067,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.attrs(attrs",{"_index":3061,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.empty",{"_index":3058,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node",{"_index":3068,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.node()?.appendchild(utilservice.getsvgfromstring(marker.getsvg",{"_index":3069,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"click",{"_index":3066,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseenter",{"_index":3062,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markertarget.on(\"mouseleave",{"_index":3065,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils",{"_index":3017,"title":{"classes/MarkerUtils.html":{}},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.default_marker_container_class",{"_index":3032,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["markerutils.removemarker(container",{"_index":3047,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["marks",{"_index":4315,"title":{},"body":{"license.html":{}}}],["markup",{"_index":3630,"title":{},"body":{"classes/SvgMarker.html":{}}}],["match",{"_index":2262,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/XYAccessors.html":{}}}],["matches",{"_index":3003,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["matching",{"_index":79,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["math.abs(test",{"_index":3963,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.ceil(((datapoint?.position?.x",{"_index":3079,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.ceil(((datapoint?.position?.y",{"_index":3083,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["math.cos(a",{"_index":3334,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.floor(dt",{"_index":3974,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.max(...valuesarray.map(d",{"_index":1239,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.max(0",{"_index":233,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.max(automaticdomain[1",{"_index":4566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.max(value",{"_index":1567,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["math.min(...valarr.map(d",{"_index":3295,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["math.min(...valuesarray.map(d",{"_index":1226,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["math.min(0",{"_index":230,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["math.min(automaticdomain[0",{"_index":4564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.min(clientrect.height",{"_index":1042,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(clientrect.width",{"_index":1039,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["math.min(prev",{"_index":963,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["math.min(scales.y.range()[0",{"_index":2359,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["math.min(this.levels",{"_index":363,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["math.pi",{"_index":3331,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.random",{"_index":3972,"title":{},"body":{"classes/UtilityService.html":{}}}],["math.round(angle",{"_index":3359,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sin(a",{"_index":3335,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["math.sqrt(2",{"_index":979,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["mathias",{"_index":3979,"title":{},"body":{"classes/UtilityService.html":{}}}],["matrix",{"_index":670,"title":{},"body":{"classes/Chart.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1592,"title":{},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["maxsize",{"_index":988,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["maxthickness",{"_index":1958,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["maxwidth",{"_index":2061,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["maybe",{"_index":2158,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["mean",{"_index":4127,"title":{},"body":{"license.html":{}}}],["means",{"_index":3129,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["mechanical",{"_index":4166,"title":{},"body":{"license.html":{}}}],["mechanism",{"_index":2073,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["media",{"_index":4171,"title":{},"body":{"license.html":{}}}],["medium",{"_index":4262,"title":{},"body":{"license.html":{}}}],["meet",{"_index":4263,"title":{},"body":{"license.html":{}}}],["memberof",{"_index":3222,"title":{},"body":{"classes/PathMarker.html":{}}}],["merchantability",{"_index":4329,"title":{},"body":{"license.html":{}}}],["merely",{"_index":4188,"title":{},"body":{"license.html":{}}}],["merge(line",{"_index":2612,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["mergeddomains",{"_index":4569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergeddomains[0",{"_index":4577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mergedomains(domains",{"_index":4558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":484,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"injectables/ThresholdsService.html":{}}}],["method",{"_index":1680,"title":{},"body":{"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["methods",{"_index":269,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["mid",{"_index":4002,"title":{},"body":{"classes/UtilityService.html":{}}}],["middle",{"_index":2572,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["midpoint",{"_index":1137,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["min",{"_index":1939,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["mind",{"_index":2164,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"interfaces/ScalesIndex.html":{}}}],["minordinalsize",{"_index":2130,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["minute",{"_index":4536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneou",{"_index":4543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":4057,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":3088,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["missingdatalinerendererconfig",{"_index":3086,"title":{"classes/MissingDataLineRendererConfig.html":{}},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["mockups",{"_index":2479,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["mode",{"_index":2625,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["modifications",{"_index":4162,"title":{},"body":{"license.html":{}}}],["modified",{"_index":4269,"title":{},"body":{"license.html":{}}}],["modify",{"_index":4292,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":4296,"title":{},"body":{"license.html":{}}}],["module",{"_index":3171,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"overview.html":{}}}],["modules",{"_index":3173,"title":{"modules.html":{}},"body":{"modules/NuiChartsModule.html":{},"modules.html":{}}}],["more",{"_index":2018,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"license.html":{}}}],["mouse",{"_index":1922,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mouse_active",{"_index":4523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouse_active_event",{"_index":2671,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":1927,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseenter",{"_index":1930,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseinteractivearea",{"_index":3074,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["mouseleave",{"_index":1931,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mousemove",{"_index":1933,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{}}}],["mouseup",{"_index":1934,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["movement",{"_index":1932,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["moves",{"_index":2409,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["moving",{"_index":346,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["multi",{"_index":1911,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"dependencies.html":{}}}],["multiple",{"_index":1753,"title":{},"body":{"classes/Grid.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{}}}],["name",{"_index":21,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["names",{"_index":4314,"title":{},"body":{"license.html":{}}}],["narrow",{"_index":2159,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["nativeevent",{"_index":3415,"title":{},"body":{"classes/Renderer.html":{}}}],["nearest",{"_index":2013,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["nearestindex",{"_index":373,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["necessarily",{"_index":4242,"title":{},"body":{"license.html":{}}}],["need",{"_index":343,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needed",{"_index":1253,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["needle",{"_index":3918,"title":{},"body":{"classes/UtilityService.html":{}}}],["needs",{"_index":377,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"components/ChartMarkerComponent.html":{}}}],["negative",{"_index":3128,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["negligence",{"_index":4342,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":4345,"title":{},"body":{"license.html":{}}}],["new",{"_index":110,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newmax",{"_index":1634,"title":{},"body":{"injectables/GaugeService.html":{}}}],["newvalue",{"_index":1633,"title":{},"body":{"injectables/GaugeService.html":{}}}],["next",{"_index":828,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["next.invert(x",{"_index":2505,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["ngaftercontentinit",{"_index":898,"title":{},"body":{"components/ChartComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngafterviewinit",{"_index":834,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ngfor",{"_index":3549,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["ngmodule",{"_index":3186,"title":{},"body":{"modules/NuiChartsModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":890,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngondestroy",{"_index":909,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["ngoninit",{"_index":886,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["ngzone",{"_index":865,"title":{},"body":{"components/ChartComponent.html":{}}}],["nice",{"_index":1846,"title":{},"body":{"classes/Grid.html":{}}}],["nine",{"_index":4455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1224,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["node.radius",{"_index":1400,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.x",{"_index":1412,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node.y",{"_index":1411,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["node_modules/@nova",{"_index":4103,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":1380,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["non",{"_index":2147,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/PathMarker.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":2476,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/ZoomPlugin.html":{}}}],["noopaccessors",{"_index":2283,"title":{"classes/NoopAccessors.html":{}},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["nooprenderer",{"_index":3093,"title":{"classes/NoopRenderer.html":{}},"body":{"classes/NoopRenderer.html":{}}}],["noopscale",{"_index":3151,"title":{"classes/NoopScale.html":{}},"body":{"classes/NoopScale.html":{}}}],["normalized_domain",{"_index":2149,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["normally",{"_index":4288,"title":{},"body":{"license.html":{}}}],["note",{"_index":2034,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["nothing",{"_index":4305,"title":{},"body":{"license.html":{}}}],["notice",{"_index":4176,"title":{},"body":{"license.html":{}}}],["notices",{"_index":4272,"title":{},"body":{"license.html":{}}}],["notifying",{"_index":2637,"title":{},"body":{"components/LegendComponent.html":{}}}],["notwithstanding",{"_index":4304,"title":{},"body":{"license.html":{}}}],["nova",{"_index":91,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"components/ChartPopoverComponent.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"dependencies.html":{},"index.html":{}}}],["nui",{"_index":488,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYGridConfig.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"classes/PathMarker.html":{},"components/RichLegendTileComponent.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["nuichartcollectionid",{"_index":521,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["nuichartsmodule",{"_index":3172,"title":{"modules/NuiChartsModule.html":{}},"body":{"modules/NuiChartsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["nuicommonmodule",{"_index":3192,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuiiconmodule",{"_index":3193,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["nuipopovermodule",{"_index":3194,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["null",{"_index":222,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopScale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":164,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["number.isfinite(d",{"_index":2288,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["number.isfinite(value",{"_index":229,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["numbers",{"_index":1392,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"injectables/ThresholdsService.html":{}}}],["numeric",{"_index":2168,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1054,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["object.assign",{"_index":1507,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["object.keys(attrs",{"_index":3229,"title":{},"body":{"classes/PathMarker.html":{}}}],["object.keys(borderconfigs",{"_index":1788,"title":{},"body":{"classes/Grid.html":{}}}],["object.keys(datapoints).foreach(seriesid",{"_index":3609,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["object.keys(event.payload).map(key",{"_index":2783,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(filterscales",{"_index":3393,"title":{},"body":{"classes/Renderer.html":{}}}],["object.keys(fixeddomains).reduce((result",{"_index":4550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(this.seriesgroups",{"_index":2832,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["object.keys(tooltippositions).map(seriesid",{"_index":1381,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["objects",{"_index":1967,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SparkChartAssist.html":{}}}],["obligations",{"_index":4370,"title":{},"body":{"license.html":{}}}],["observable",{"_index":2668,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["observer",{"_index":877,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["obtain",{"_index":4401,"title":{},"body":{"license.html":{}}}],["of((chartseries.data",{"_index":2736,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["of(highlightdata.data",{"_index":2735,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["offer",{"_index":4237,"title":{},"body":{"license.html":{}}}],["offset",{"_index":1134,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{}}}],["offsetparentbbox",{"_index":1475,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.left",{"_index":1479,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetparentbbox.top",{"_index":1481,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsetx",{"_index":1448,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["offsety",{"_index":1451,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["ok",{"_index":4443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["omit",{"_index":2946,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"click",{"_index":2952,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseenter",{"_index":2945,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"mouseleave",{"_index":2951,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["on(\"pointerdown",{"_index":2465,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["on(\"pointerup",{"_index":2467,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["once",{"_index":2180,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["onchanges",{"_index":857,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["onclick",{"_index":2918,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["ondestroy",{"_index":856,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["one",{"_index":740,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SparkChartAssist.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["ones",{"_index":2759,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oneseriesmode",{"_index":2836,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["onevent",{"_index":2701,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["oninit",{"_index":854,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["onsetseriesstates(renderstatedata",{"_index":728,"title":{},"body":{"classes/Chart.html":{}}}],["onupdate(seriesset",{"_index":691,"title":{},"body":{"classes/Chart.html":{}}}],["onupdatedimensions",{"_index":698,"title":{},"body":{"classes/Chart.html":{}}}],["oops",{"_index":1084,"title":{},"body":{"classes/ChartPalette.html":{}}}],["opacity",{"_index":1280,"title":{},"body":{"components/ChartTooltipComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":1177,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{},"miscellaneous/variables.html":{}}}],["opening",{"_index":1263,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["openpopoversubject",{"_index":1158,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["opentimeout",{"_index":1320,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opentooltips",{"_index":1287,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["opposite",{"_index":3321,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1869,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["optional",{"_index":22,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["optionally",{"_index":2126,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["options",{"_index":1053,"title":{},"body":{"classes/ChartPalette.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["options).format(date",{"_index":4541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["options.backgroundopacity",{"_index":1092,"title":{},"body":{"classes/ChartPalette.html":{}}}],["order",{"_index":1254,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["orientation",{"_index":441,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"components/LegendComponent.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{}}}],["origin",{"_index":3340,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["original",{"_index":4185,"title":{},"body":{"license.html":{}}}],["originx",{"_index":1443,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["originy",{"_index":1444,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["otherwise",{"_index":379,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["out",{"_index":3182,"title":{},"body":{"modules/NuiChartsModule.html":{},"classes/XYGridConfig.html":{},"license.html":{},"overview.html":{}}}],["outerheight",{"_index":1534,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerheight(value",{"_index":1543,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerradius",{"_index":3328,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["outerwidth",{"_index":1535,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["outerwidth(value",{"_index":1547,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["output",{"_index":1118,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outputs",{"_index":1106,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["outside",{"_index":347,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["outstanding",{"_index":4153,"title":{},"body":{"license.html":{}}}],["over",{"_index":1257,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LegendInteractionAssist.html":{}}}],["overall",{"_index":2631,"title":{},"body":{"components/LegendComponent.html":{}}}],["overflow",{"_index":181,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["overflowhandler",{"_index":168,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["overlap",{"_index":1377,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["overlay",{"_index":3345,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["overlaymodule",{"_index":3185,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["overlaypositions",{"_index":1434,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlaysetup",{"_index":1453,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["overlayx",{"_index":1445,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overlayy",{"_index":1446,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["overridden",{"_index":4074,"title":{},"body":{"index.html":{}}}],["override",{"_index":721,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{}}}],["overview",{"_index":4064,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":4132,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":4149,"title":{},"body":{"license.html":{}}}],["p",{"_index":337,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["p.destroy",{"_index":687,"title":{},"body":{"classes/Chart.html":{}}}],["p.initialize",{"_index":683,"title":{},"body":{"classes/Chart.html":{}}}],["p.update",{"_index":697,"title":{},"body":{"classes/Chart.html":{}}}],["p.updatedimensions",{"_index":716,"title":{},"body":{"classes/Chart.html":{}}}],["package",{"_index":4046,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":4088,"title":{},"body":{"index.html":{}}}],["packagr/issues/641",{"_index":3386,"title":{},"body":{"classes/Renderer.html":{}}}],["packagr/ng",{"_index":3385,"title":{},"body":{"classes/Renderer.html":{}}}],["padding",{"_index":155,"title":{},"body":{"classes/AxisConfig.html":{},"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["page",{"_index":4392,"title":{"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}},"body":{"license.html":{}}}],["palette",{"_index":2703,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["palette.ts",{"_index":1046,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:14",{"_index":1055,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:31",{"_index":1058,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:35",{"_index":1060,"title":{},"body":{"classes/ChartPalette.html":{}}}],["palette.ts:39",{"_index":1062,"title":{},"body":{"classes/ChartPalette.html":{}}}],["param",{"_index":334,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["parameter",{"_index":3714,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartMarker.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IScale.html":{},"interfaces/IValueProvider.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["parent",{"_index":1223,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{}}}],["parentid",{"_index":2824,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["parseint(ticks",{"_index":196,"title":{},"body":{"classes/AxisConfig.html":{}}}],["part",{"_index":1904,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["partial",{"_index":708,"title":{},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/LegendInteractionAssist.html":{},"classes/Renderer.html":{}}}],["particular",{"_index":4331,"title":{},"body":{"license.html":{}}}],["parts",{"_index":3310,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["party",{"_index":4287,"title":{},"body":{"license.html":{}}}],["pass",{"_index":1681,"title":{},"body":{"classes/Grid.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["patent",{"_index":4235,"title":{},"body":{"license.html":{}}}],["path",{"_index":1673,"title":{},"body":{"classes/Grid.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/Renderer.html":{}}}],["path's",{"_index":2094,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["path.getboundingclientrect",{"_index":3076,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"x",{"_index":3078,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path.setattribute(\"y",{"_index":3082,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["path_",{"_index":1669,"title":{},"body":{"classes/Grid.html":{}}}],["path__outline",{"_index":3225,"title":{},"body":{"classes/PathMarker.html":{}}}],["pathmarker",{"_index":3211,"title":{"classes/PathMarker.html":{}},"body":{"classes/PathMarker.html":{}}}],["pathrect",{"_index":3075,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.height",{"_index":3084,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["pathrect.width",{"_index":3080,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["patterns",{"_index":4069,"title":{},"body":{"index.html":{}}}],["payload",{"_index":793,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["peer",{"_index":4050,"title":{},"body":{"dependencies.html":{}}}],["pentagon",{"_index":4503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":2478,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["percent",{"_index":4151,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":1951,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["perform",{"_index":1997,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["performs",{"_index":3921,"title":{},"body":{"classes/UtilityService.html":{}}}],["periods",{"_index":3713,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["permission",{"_index":4312,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":4158,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":4223,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":4279,"title":{},"body":{"license.html":{}}}],["physically",{"_index":2460,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["pickby",{"_index":1184,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pickby(datapoints",{"_index":1243,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["pie",{"_index":3238,"title":{"additional-documentation/chart-types/pie-and-donut.html":{}},"body":{"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["piearcdata",{"_index":3322,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.endangle",{"_index":3333,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["piearcdata.startangle",{"_index":3332,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["pieces",{"_index":4073,"title":{},"body":{"index.html":{}}}],["pierenderer",{"_index":3236,"title":{"classes/PieRenderer.html":{}},"body":{"classes/PieRenderer.html":{}}}],["pipe",{"_index":2725,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pipe(takeuntil(this.destroy",{"_index":1461,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["pixel",{"_index":2015,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["pixels",{"_index":2031,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["placed",{"_index":1439,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["placement",{"_index":1719,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{}}}],["places",{"_index":3758,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{}}}],["play",{"_index":4110,"title":{},"body":{"index.html":{}}}],["playing",{"_index":1393,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["please",{"_index":3567,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["plotted",{"_index":2395,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["plugin",{"_index":476,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["plugin's",{"_index":1996,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["plugin.chart",{"_index":615,"title":{},"body":{"classes/Chart.html":{}}}],["plugin.ts",{"_index":436,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["plugin.ts:108",{"_index":4044,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:11",{"_index":1099,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:126",{"_index":1425,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:13",{"_index":1100,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:131",{"_index":1427,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:14",{"_index":953,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:15",{"_index":1097,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:17",{"_index":952,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:20",{"_index":2595,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:24",{"_index":956,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:26",{"_index":2514,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:27",{"_index":2597,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:28",{"_index":1168,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:29",{"_index":4043,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:3",{"_index":1095,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:30",{"_index":1179,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:32",{"_index":1176,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:33",{"_index":2513,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["plugin.ts:34",{"_index":1163,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:36",{"_index":1178,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:39",{"_index":2515,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:40",{"_index":955,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["plugin.ts:41",{"_index":4042,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:43",{"_index":1175,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:49",{"_index":1162,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:5",{"_index":449,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["plugin.ts:51",{"_index":1167,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["plugin.ts:56",{"_index":1181,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:63",{"_index":1421,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:65",{"_index":1420,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:68",{"_index":1180,"title":{},"body":{"classes/ChartPopoverPlugin.html":{}}}],["plugin.ts:7",{"_index":1096,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:70",{"_index":1424,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:75",{"_index":1422,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:81",{"_index":1417,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:88",{"_index":1423,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["plugin.ts:9",{"_index":1098,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["plugin.ts:90",{"_index":4045,"title":{},"body":{"classes/ZoomPlugin.html":{}}}],["plugin.ts:94",{"_index":2596,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["plugin.ts:98",{"_index":1426,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{}}}],["pluginindex",{"_index":617,"title":{},"body":{"classes/Chart.html":{}}}],["plugins",{"_index":552,"title":{"additional-documentation/plugins.html":{}},"body":{"classes/Chart.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["plugins/interaction/interaction",{"_index":3566,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["plugins/render",{"_index":601,"title":{},"body":{"classes/Chart.html":{}}}],["plugins/types",{"_index":3940,"title":{},"body":{"classes/UtilityService.html":{}}}],["plus",{"_index":2041,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["point",{"_index":247,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["point(s",{"_index":1170,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["pointer",{"_index":1817,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["pointerevents",{"_index":2137,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["points",{"_index":455,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["polyfill",{"_index":878,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["popover",{"_index":1103,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover's",{"_index":1135,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["popover'},{'name",{"_index":508,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["popover.component",{"_index":3198,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["popover.component.html",{"_index":1105,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.less",{"_index":1104,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts",{"_index":1102,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:30",{"_index":1109,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:32",{"_index":1111,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:34",{"_index":1113,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:36",{"_index":1117,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:39",{"_index":1107,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover.component.ts:41",{"_index":1114,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popover/chart",{"_index":1101,"title":{},"body":{"components/ChartPopoverComponent.html":{},"modules/NuiChartsModule.html":{}}}],["popovercomponent",{"_index":1115,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["popovers",{"_index":1194,"title":{"additional-documentation/plugins/popovers.html":{}},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{},"additional-documentation/plugins.html":{}}}],["popovertargetposition",{"_index":1159,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["populate",{"_index":2718,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["portion",{"_index":3629,"title":{},"body":{"classes/SvgMarker.html":{}}}],["position",{"_index":937,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["position.height",{"_index":1389,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.left",{"_index":1141,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.top",{"_index":1143,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["position.width",{"_index":1139,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.x",{"_index":1386,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["position.y",{"_index":1387,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["positioned",{"_index":1437,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":1432,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["positions",{"_index":452,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["possibility",{"_index":4363,"title":{},"body":{"license.html":{}}}],["possible",{"_index":2720,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["potential",{"_index":2273,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"index.html":{}}}],["potentially",{"_index":2681,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["power",{"_index":4142,"title":{},"body":{"license.html":{}}}],["pre",{"_index":86,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["preferred",{"_index":4160,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":1671,"title":{},"body":{"classes/Grid.html":{}}}],["prepare",{"_index":4231,"title":{},"body":{"license.html":{}}}],["preprocess",{"_index":1632,"title":{},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["prerequisite",{"_index":2127,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["prescribed",{"_index":1969,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["present",{"_index":736,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["prev",{"_index":966,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["prevent",{"_index":1010,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["previous",{"_index":1371,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"classes/LegendInteractionAssist.html":{}}}],["previouschart",{"_index":892,"title":{},"body":{"components/ChartComponent.html":{}}}],["previouschart.destroy",{"_index":894,"title":{},"body":{"components/ChartComponent.html":{}}}],["primarily",{"_index":844,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["primary",{"_index":2862,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["primitive",{"_index":248,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["printed",{"_index":4391,"title":{},"body":{"license.html":{}}}],["private",{"_index":55,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["problems",{"_index":2275,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["process",{"_index":3926,"title":{},"body":{"classes/UtilityService.html":{}}}],["processdatapoints(datapoints",{"_index":1241,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["processed",{"_index":1067,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["processedcolor",{"_index":3273,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedcolorprovider",{"_index":1066,"title":{"classes/ProcessedColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["processedcolorprovider(this.standardcolors",{"_index":1086,"title":{},"body":{"classes/ChartPalette.html":{}}}],["processedcolorprovider:15",{"_index":3643,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolorprovider:30",{"_index":3644,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["processedcolors",{"_index":3269,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processedseriesset",{"_index":2741,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processedseriesset.map(s",{"_index":2743,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["processes",{"_index":3258,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["processhighlighteddatapoints",{"_index":445,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processhighlighteddatapoints(datapoints",{"_index":469,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["processor",{"_index":2677,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["product",{"_index":4316,"title":{},"body":{"license.html":{}}}],["project",{"_index":4100,"title":{},"body":{"index.html":{}}}],["projected",{"_index":2877,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projecteddescription",{"_index":2897,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["projects",{"_index":4099,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":4271,"title":{},"body":{"license.html":{}}}],["properties",{"_index":11,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{}}}],["property",{"_index":1153,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{}}}],["props",{"_index":1385,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fx",{"_index":1390,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["props.fy",{"_index":1391,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["protected",{"_index":672,"title":{},"body":{"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LinearScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TimeScale.html":{}}}],["provide",{"_index":858,"title":{},"body":{"components/ChartComponent.html":{},"index.html":{},"license.html":{}}}],["provided",{"_index":1821,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MappedValueProvider.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":1619,"title":{},"body":{"injectables/GaugeService.html":{}}}],["providedvalues",{"_index":3503,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider",{"_index":810,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"classes/ChartPalette.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SparkChartAssist.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{}}}],["provider.ts",{"_index":3002,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{}}}],["provider.ts:10",{"_index":3501,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:13",{"_index":3012,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["provider.ts:15",{"_index":3267,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:16",{"_index":3013,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["provider.ts:20",{"_index":3642,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["provider.ts:26",{"_index":3502,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["provider.ts:30",{"_index":3268,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["provider.ts:7",{"_index":3011,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["provider.ts:9",{"_index":3265,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{}}}],["providers",{"_index":32,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"components/ChartComponent.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"modules/NuiChartsModule.html":{},"classes/RadialAccessors.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":2071,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["public",{"_index":94,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["publicly",{"_index":4232,"title":{},"body":{"license.html":{}}}],["publishes",{"_index":458,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["publishrenderstates",{"_index":2806,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["pull",{"_index":3188,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["purpose",{"_index":4210,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":4141,"title":{},"body":{"license.html":{}}}],["px",{"_index":725,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quantity",{"_index":1603,"title":{},"body":{"injectables/GaugeService.html":{}}}],["quantity_series_id",{"_index":1585,"title":{},"body":{"injectables/GaugeService.html":{}}}],["querylist",{"_index":1297,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["quickly",{"_index":4077,"title":{},"body":{"index.html":{}}}],["quite",{"_index":4085,"title":{},"body":{"index.html":{}}}],["r",{"_index":2156,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/TextColorProvider.html":{},"classes/UtilityService.html":{}}}],["radial",{"_index":3252,"title":{},"body":{"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["radialaccessors",{"_index":1598,"title":{"classes/RadialAccessors.html":{}},"body":{"injectables/GaugeService.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["radialpopoverplugin",{"_index":3278,"title":{"classes/RadialPopoverPlugin.html":{}},"body":{"classes/RadialPopoverPlugin.html":{}}}],["radialrenderer",{"_index":957,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"injectables/GaugeService.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["radialrenderer(gaugerendererconfig",{"_index":1625,"title":{},"body":{"injectables/GaugeService.html":{}}}],["radialrenderer:133",{"_index":3245,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:149",{"_index":3247,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:156",{"_index":3249,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:41",{"_index":3241,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialrenderer:47",{"_index":3244,"title":{},"body":{"classes/PieRenderer.html":{}}}],["radialscales",{"_index":1617,"title":{},"body":{"injectables/GaugeService.html":{}}}],["radialtooltipsplugin",{"_index":3298,"title":{"classes/RadialTooltipsPlugin.html":{}},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radians",{"_index":3348,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["radius",{"_index":959,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITooltipNode.html":{}}}],["range",{"_index":2176,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["range(range",{"_index":2177,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["range.reverse",{"_index":3478,"title":{},"body":{"classes/Scale.html":{}}}],["range[0",{"_index":3255,"title":{},"body":{"classes/PieRenderer.html":{}}}],["range[1",{"_index":3964,"title":{},"body":{"classes/UtilityService.html":{}}}],["ranges",{"_index":2076,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["rarely",{"_index":1975,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["ratio",{"_index":3640,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiodef",{"_index":3665,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotodark",{"_index":3659,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["ratiotolight",{"_index":3656,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["raw",{"_index":3932,"title":{},"body":{"classes/UtilityService.html":{}}}],["rc",{"_index":3645,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["reaches",{"_index":1957,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["readable",{"_index":4281,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":97,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["reason",{"_index":4382,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":2146,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["recalculated",{"_index":2161,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["received",{"_index":456,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["recent",{"_index":1171,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["recipients",{"_index":4266,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":4390,"title":{},"body":{"license.html":{}}}],["reconfigurechart(chart",{"_index":3613,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["reconsider",{"_index":1836,"title":{},"body":{"classes/Grid.html":{}}}],["record",{"_index":1455,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{}}}],["rect",{"_index":2342,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.attrs",{"_index":2361,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.empty",{"_index":2351,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rect.style(\"filter",{"_index":2354,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["rectangleaccessors",{"_index":200,"title":{"classes/RectangleAccessors.html":{}},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:34",{"_index":207,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["rectangleaccessors:35",{"_index":208,"title":{},"body":{"classes/BarAccessors.html":{},"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["redistributing",{"_index":4335,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":4260,"title":{},"body":{"license.html":{}}}],["redraw",{"_index":861,"title":{},"body":{"components/ChartComponent.html":{}}}],["reduce",{"_index":3262,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["refactor",{"_index":1751,"title":{},"body":{"classes/Grid.html":{}}}],["refactoring",{"_index":1749,"title":{},"body":{"classes/Grid.html":{}}}],["reference",{"_index":3957,"title":{},"body":{"classes/UtilityService.html":{},"index.html":{}}}],["referenced",{"_index":2276,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"miscellaneous/variables.html":{}}}],["refresh",{"_index":4524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refresh_event",{"_index":880,"title":{},"body":{"components/ChartComponent.html":{},"miscellaneous/variables.html":{}}}],["regarding",{"_index":2017,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["registering",{"_index":808,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["registers",{"_index":840,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["regularshapes",{"_index":4433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["related",{"_index":3037,"title":{},"body":{"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["relation",{"_index":2012,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["relative",{"_index":1501,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/TextColorProvider.html":{}}}],["relativeposition",{"_index":1505,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.x",{"_index":1509,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["relativeposition.y",{"_index":1511,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["release",{"_index":4091,"title":{},"body":{"index.html":{}}}],["remain",{"_index":4186,"title":{},"body":{"license.html":{}}}],["remainder",{"_index":1605,"title":{},"body":{"injectables/GaugeService.html":{}}}],["remainder_series_id",{"_index":1586,"title":{},"body":{"injectables/GaugeService.html":{}}}],["removal",{"_index":752,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{}}}],["remove",{"_index":2477,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["removemarker",{"_index":3024,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removemarker(target",{"_index":3040,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["removeplugin",{"_index":535,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin(classref",{"_index":566,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["removeplugin?(classref",{"_index":1993,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["removeplugins",{"_index":536,"title":{},"body":{"classes/Chart.html":{}}}],["removeplugins(...classrefs",{"_index":568,"title":{},"body":{"classes/Chart.html":{}}}],["rename",{"_index":830,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["render",{"_index":1912,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"index.html":{}}}],["render_area_height_correction",{"_index":1713,"title":{},"body":{"classes/Grid.html":{}}}],["render_area_width_correction",{"_index":1715,"title":{},"body":{"classes/Grid.html":{}}}],["rendercontainers",{"_index":3147,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["rendered",{"_index":1667,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["renderengine",{"_index":561,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["renderengine(lasagna",{"_index":679,"title":{},"body":{"classes/Chart.html":{}}}],["renderengineplugin",{"_index":600,"title":{},"body":{"classes/Chart.html":{}}}],["renderer",{"_index":299,"title":{"classes/Renderer.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartDonutContentPlugin.html":{},"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer#draw",{"_index":2336,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#getdatapointposition",{"_index":3150,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer#getrequiredlayers",{"_index":2362,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderer#highlightdatapoint",{"_index":3149,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer's",{"_index":3724,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderer.barcontainerclass",{"_index":392,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.config.strokewidth",{"_index":2943,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.default_config",{"_index":3387,"title":{},"body":{"classes/Renderer.html":{}}}],["renderer.drawline(renderseries",{"_index":2955,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getcontainerstatestyles",{"_index":387,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["renderer.getdatapoint(renderseries",{"_index":401,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderer.getdatapointposition(renderseries.dataseries",{"_index":2959,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderer.getouterradius(rscale.range",{"_index":3329,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["renderer.ts",{"_index":2317,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderer.ts:16",{"_index":3107,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:20",{"_index":3112,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:26",{"_index":3110,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:31",{"_index":3109,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["renderer.ts:49",{"_index":3511,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:50",{"_index":3510,"title":{},"body":{"classes/SideIndicatorAccessors.html":{}}}],["renderer.ts:7",{"_index":4034,"title":{},"body":{"classes/XYRenderer.html":{}}}],["renderer:108",{"_index":3146,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:117",{"_index":3144,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:129",{"_index":3137,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:153",{"_index":3133,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:170",{"_index":3120,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:190",{"_index":3139,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:23",{"_index":3104,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:40",{"_index":3102,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:45",{"_index":3106,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:53",{"_index":3113,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:63",{"_index":3131,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:74",{"_index":3124,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:85",{"_index":3142,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["renderer:95",{"_index":3105,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/XYRenderer.html":{}}}],["rendererconfig",{"_index":3706,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers",{"_index":1972,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/Renderer.html":{},"classes/XYAccessors.html":{}}}],["renderers/area/area",{"_index":3764,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/accessors/status",{"_index":3765,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/bar",{"_index":3766,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/bar/types",{"_index":475,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["renderers/constants",{"_index":3767,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/line/line",{"_index":3768,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/radial/accessors/radial",{"_index":1613,"title":{},"body":{"injectables/GaugeService.html":{}}}],["renderers/radial/gauge",{"_index":1615,"title":{},"body":{"injectables/GaugeService.html":{}}}],["renderers/radial/radial",{"_index":958,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"injectables/GaugeService.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["renderers/side",{"_index":3769,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["renderers/types",{"_index":749,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["renderersubject",{"_index":296,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["renderersubject.next",{"_index":398,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["rendering",{"_index":1672,"title":{},"body":{"classes/Grid.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["rendering_area_clip_path_prefix",{"_index":1653,"title":{},"body":{"classes/Grid.html":{}}}],["rendering_area_layer_name",{"_index":1654,"title":{},"body":{"classes/Grid.html":{}}}],["renderingarea",{"_index":1722,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaattrs",{"_index":1805,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippath",{"_index":1721,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareaclippathattrs",{"_index":1801,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer",{"_index":1814,"title":{},"body":{"classes/Grid.html":{}}}],["renderingareacontainer.append(\"rect",{"_index":1816,"title":{},"body":{"classes/Grid.html":{}}}],["renderlayername",{"_index":332,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{}}}],["rendermarkersvg(svg",{"_index":1024,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["renderseries",{"_index":294,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["renderseries.containers[renderlayername.data",{"_index":385,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.containers[sideindicatorrenderer.side_indicators_layer",{"_index":2338,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries",{"_index":2339,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.accessors",{"_index":2341,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data",{"_index":2347,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderseries.dataseries.data[0",{"_index":2950,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.dataseries.data[datapointindex",{"_index":402,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["renderseries.dataseries.id",{"_index":2947,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["renderseries.scales",{"_index":2340,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/SideIndicatorAccessors.html":{}}}],["renderstate",{"_index":333,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/enumerations.html":{}}}],["renderstate.deemphasized",{"_index":395,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.default",{"_index":394,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.emphasisstate",{"_index":2840,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstate.emphasized",{"_index":396,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.hidden",{"_index":797,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["renderstate.visible",{"_index":2820,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["renderstatedata",{"_index":574,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["renderstatesindex",{"_index":2647,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["replaced",{"_index":755,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["replacement",{"_index":3916,"title":{},"body":{"classes/UtilityService.html":{}}}],["report",{"_index":2414,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["represent",{"_index":3125,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["representation",{"_index":3115,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["representatives",{"_index":4203,"title":{},"body":{"license.html":{}}}],["represented",{"_index":783,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"injectables/ThresholdsService.html":{}}}],["representing",{"_index":759,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["represents",{"_index":804,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"injectables/ThresholdsService.html":{}}}],["reproduce",{"_index":4230,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":4318,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":4124,"title":{},"body":{"license.html":{}}}],["request",{"_index":1237,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["require",{"_index":1973,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["require.context",{"_index":4529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":1983,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["requirements",{"_index":3302,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["requires",{"_index":3984,"title":{},"body":{"classes/UtilityService.html":{}}}],["reset",{"_index":2024,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"modules/NuiChartsModule.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/TextColorProvider.html":{},"overview.html":{}}}],["resets",{"_index":2754,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetseries",{"_index":2650,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["resetvisibleseries",{"_index":789,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["resize",{"_index":876,"title":{},"body":{"components/ChartComponent.html":{},"dependencies.html":{}}}],["resizehandler",{"_index":883,"title":{},"body":{"components/ChartComponent.html":{}}}],["resizeobserver",{"_index":862,"title":{},"body":{"components/ChartComponent.html":{}}}],["respond",{"_index":1190,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["responsibility",{"_index":4374,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":4333,"title":{},"body":{"license.html":{}}}],["restore",{"_index":2790,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["result",{"_index":78,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["result[next",{"_index":4555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result[next.id",{"_index":2503,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["resulting",{"_index":2037,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{},"license.html":{}}}],["results",{"_index":80,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/layout.html":{},"additional-documentation/chart-types.html":{},"additional-documentation/chart-types/line.html":{},"additional-documentation/chart-types/bar.html":{},"additional-documentation/chart-types/bar/bucketed-bar.html":{},"additional-documentation/chart-types/bar/status.html":{},"additional-documentation/chart-types/bar/waterfall.html":{},"additional-documentation/chart-types/area.html":{},"additional-documentation/chart-types/pie-and-donut.html":{},"additional-documentation/chart-types/spark.html":{},"additional-documentation/plugins.html":{},"additional-documentation/plugins/tooltips.html":{},"additional-documentation/plugins/popovers.html":{},"additional-documentation/thresholds.html":{},"additional-documentation/timeframe-selection.html":{},"additional-documentation/advanced-usage.html":{},"additional-documentation/advanced-usage/chart.html":{},"additional-documentation/advanced-usage/legend.html":{},"additional-documentation/advanced-usage/input-structure.html":{},"additional-documentation/advanced-usage/input-structure/data.html":{},"additional-documentation/advanced-usage/input-structure/colors.html":{},"additional-documentation/advanced-usage/input-structure/markers.html":{},"additional-documentation/advanced-usage/events.html":{},"additional-documentation/advanced-usage/grid.html":{},"additional-documentation/advanced-usage/scales.html":{},"additional-documentation/advanced-usage/scales/domains.html":{},"additional-documentation/advanced-usage/scales/formatters.html":{}}}],["resume",{"_index":2774,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["retain",{"_index":4276,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":242,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["retrieves",{"_index":2680,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["return",{"_index":192,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":249,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["returning",{"_index":340,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["returns",{"_index":175,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["reused",{"_index":700,"title":{},"body":{"classes/Chart.html":{}}}],["reverse",{"_index":2183,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed",{"_index":2185,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["reversed(reversed",{"_index":2186,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/TimeScale.html":{}}}],["review",{"_index":127,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/GridConfig.html":{},"classes/XYGridConfig.html":{}}}],["revisions",{"_index":4182,"title":{},"body":{"license.html":{}}}],["rgb",{"_index":1063,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(color",{"_index":1090,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.dark",{"_index":3660,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgb(colordefinitions.light",{"_index":3658,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor",{"_index":1089,"title":{},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["rgbcolor.b",{"_index":3686,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.g",{"_index":3684,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.opacity",{"_index":1091,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbcolor.r",{"_index":3681,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rgbcolor.tostring",{"_index":1093,"title":{},"body":{"classes/ChartPalette.html":{}}}],["rgbinput",{"_index":3655,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rich",{"_index":518,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["richlegendtilecomponent",{"_index":517,"title":{"components/RichLegendTileComponent.html":{}},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{},"overview.html":{}}}],["rid",{"_index":2956,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["right",{"_index":112,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["rights",{"_index":4371,"title":{},"body":{"license.html":{}}}],["risks",{"_index":4337,"title":{},"body":{"license.html":{}}}],["root",{"_index":1620,"title":{},"body":{"injectables/GaugeService.html":{}}}],["round",{"_index":2117,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["royalty",{"_index":4227,"title":{},"body":{"license.html":{}}}],["rscale",{"_index":3325,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["rsrgb",{"_index":3680,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["rule",{"_index":4582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["running",{"_index":1374,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["runs",{"_index":1357,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["rxjs",{"_index":317,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["rxjs/operators",{"_index":584,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["s",{"_index":59,"title":{},"body":{"classes/AreaAccessors.html":{},"injectables/GaugeService.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"classes/VerticalBarAccessors.html":{},"miscellaneous/variables.html":{}}}],["s.id",{"_index":2826,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.indexof(\"__",{"_index":2823,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.id.substring(0",{"_index":2825,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.renderstate",{"_index":2814,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["s.showinlegend",{"_index":2747,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["same",{"_index":813,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["scale",{"_index":280,"title":{"classes/Scale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scale's",{"_index":2163,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.bandwidth",{"_index":2188,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.formatters[fallback_formatter",{"_index":2554,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.formatters[this.formattername",{"_index":2553,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["scale.innerscale",{"_index":2192,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scale.ts",{"_index":2962,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:10",{"_index":3893,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:12",{"_index":3155,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:17",{"_index":3160,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:19",{"_index":2973,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:22",{"_index":3170,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:23",{"_index":2974,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:26",{"_index":3895,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:27",{"_index":2975,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale.ts:28",{"_index":3163,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:29",{"_index":3164,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:31",{"_index":2976,"title":{},"body":{"classes/LinearScale.html":{}}}],["scale.ts:32",{"_index":3896,"title":{},"body":{"classes/TimeScale.html":{}}}],["scale.ts:34",{"_index":3156,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:35",{"_index":3157,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:36",{"_index":3158,"title":{},"body":{"classes/NoopScale.html":{},"classes/TimeScale.html":{}}}],["scale.ts:41",{"_index":3159,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:45",{"_index":3161,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:49",{"_index":3162,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:53",{"_index":3165,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:58",{"_index":3166,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:59",{"_index":3167,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:6",{"_index":3154,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:60",{"_index":3168,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:7",{"_index":3153,"title":{},"body":{"classes/NoopScale.html":{}}}],["scale.ts:8",{"_index":2967,"title":{},"body":{"classes/LinearScale.html":{},"classes/NoopScale.html":{}}}],["scale:10",{"_index":2971,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:11",{"_index":2969,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:12",{"_index":2970,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:13",{"_index":2972,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:31",{"_index":2977,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:33",{"_index":2982,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:35",{"_index":2983,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:43",{"_index":2985,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:44",{"_index":2986,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:45",{"_index":2987,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:55",{"_index":2978,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:56",{"_index":2979,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:57",{"_index":2980,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:67",{"_index":2981,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:74",{"_index":2984,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:78",{"_index":2988,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:83",{"_index":2989,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:84",{"_index":2990,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scale:85",{"_index":2991,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["scaleid",{"_index":2022,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["scalekey",{"_index":279,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["scalelinear",{"_index":1909,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{}}}],["scalelinear](https://d3indepth.com/scales/#scalelinear",{"_index":2992,"title":{},"body":{"classes/LinearScale.html":{}}}],["scalename",{"_index":3119,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["scales",{"_index":285,"title":{"additional-documentation/advanced-usage/scales.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/advanced-usage.html":{}}}],["scales(scales",{"_index":1733,"title":{},"body":{"classes/Grid.html":{}}}],["scales.reduce(callbackfn",{"_index":4014,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales.x.convert(dataseries.accessors.data.x(point",{"_index":4040,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(dataseries.accessors.data.y(point",{"_index":4041,"title":{},"body":{"classes/XYRenderer.html":{}}}],["scales.y.convert(end",{"_index":2357,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.convert(start",{"_index":2360,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales.y.range()[0",{"_index":2358,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["scales/helpers/invert",{"_index":3941,"title":{},"body":{"classes/UtilityService.html":{}}}],["scales/types",{"_index":1913,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{}}}],["scalesindex",{"_index":1699,"title":{"interfaces/ScalesIndex.html":{}},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["scaletime",{"_index":3892,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaletime](https://d3indepth.com/scales/#scaletime",{"_index":3899,"title":{},"body":{"classes/TimeScale.html":{}}}],["scaling",{"_index":1708,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/PathMarker.html":{}}}],["screen",{"_index":1504,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["scrollable",{"_index":2014,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["se",{"_index":3312,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":3923,"title":{},"body":{"classes/UtilityService.html":{}}}],["searching",{"_index":282,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["second",{"_index":4538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secondary",{"_index":2864,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["section",{"_index":3356,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["sectionindex",{"_index":3350,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["sections",{"_index":3357,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["see",{"_index":132,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYScales.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"index.html":{},"license.html":{}}}],["select",{"_index":308,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/ITooltipNode.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["select(\"rect",{"_index":2583,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["select(this).attrs(barstylesfn(renderstate",{"_index":397,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["select(this.borders.bottom",{"_index":1842,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.left",{"_index":1863,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.right",{"_index":1860,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.borders.top",{"_index":1855,"title":{},"body":{"classes/Grid.html":{}}}],["select(this.element",{"_index":630,"title":{},"body":{"classes/Chart.html":{}}}],["select(tooltip.getoverlayelement",{"_index":1409,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["select_data_point",{"_index":4525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select_data_point_event",{"_index":4434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selectable",{"_index":2499,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selected",{"_index":2868,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["selecteddatapointidx",{"_index":388,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatapointidxfn",{"_index":276,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["selecteddatpointidxfn",{"_index":277,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["selection",{"_index":310,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/Renderer.html":{},"classes/ZoomPlugin.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["selection/issues/81",{"_index":2420,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[0",{"_index":2494,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selection[1",{"_index":2495,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["selector",{"_index":487,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"classes/UtilityService.html":{}}}],["selector(haystack[mid",{"_index":4001,"title":{},"body":{"classes/UtilityService.html":{}}}],["sell",{"_index":4238,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":1641,"title":{},"body":{"injectables/GaugeService.html":{},"miscellaneous/variables.html":{}}}],["sent",{"_index":4202,"title":{},"body":{"license.html":{}}}],["separable",{"_index":4187,"title":{},"body":{"license.html":{}}}],["separate",{"_index":4308,"title":{},"body":{"license.html":{}}}],["separated",{"_index":807,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["separatorindex",{"_index":2822,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sequence",{"_index":4444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequential",{"_index":1069,"title":{},"body":{"classes/ChartPalette.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialchartmarkerprovider",{"_index":3491,"title":{"classes/SequentialChartMarkerProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SparkChartAssist.html":{}}}],["sequentialchartmarkerprovider(chart_markers",{"_index":3531,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sequentialcolorprovider",{"_index":1068,"title":{"classes/SequentialColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider",{"_index":3493,"title":{"classes/SequentialValueProvider.html":{}},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["sequentialvalueprovider:16",{"_index":3495,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["sequentialvalueprovider:26",{"_index":3496,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{}}}],["series",{"_index":13,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"injectables/GaugeService.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["series'},{'name",{"_index":516,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["series).valueof",{"_index":372,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.accessors.data",{"_index":353,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["series.component",{"_index":3205,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series.component.html",{"_index":2846,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.less",{"_index":2845,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts",{"_index":2844,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:102",{"_index":2873,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:105",{"_index":2871,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:111",{"_index":2858,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:130",{"_index":2874,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:139",{"_index":2875,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:146",{"_index":2876,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:31",{"_index":2859,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:41",{"_index":2866,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:50",{"_index":2880,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:57",{"_index":2867,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:62",{"_index":2870,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:67",{"_index":2861,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:72",{"_index":2863,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:77",{"_index":2865,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:82",{"_index":2860,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:88",{"_index":2869,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:91",{"_index":2883,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.component.ts:98",{"_index":2872,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["series.data",{"_index":360,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LegendInteractionAssist.html":{}}}],["series.data.length",{"_index":375,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["series.id",{"_index":236,"title":{},"body":{"classes/BarAccessors.html":{},"injectables/GaugeService.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.name",{"_index":235,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["series.renderstate",{"_index":2817,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["series.state",{"_index":1467,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["series.ts",{"_index":1513,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:10",{"_index":1517,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:11",{"_index":1515,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:5",{"_index":1518,"title":{},"body":{"classes/DataSeries.html":{}}}],["series.ts:6",{"_index":1516,"title":{},"body":{"classes/DataSeries.html":{}}}],["series/legend",{"_index":2843,"title":{},"body":{"components/LegendSeriesComponent.html":{},"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["series_id_suffix",{"_index":3691,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["series_state_change",{"_index":4526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["series_state_change_event",{"_index":586,"title":{},"body":{"classes/Chart.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["seriesaccessor",{"_index":37,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/typealiases.html":{}}}],["seriescolor",{"_index":2619,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesgroups",{"_index":2809,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid",{"_index":2827,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesgroups[parentid].push(s.id",{"_index":2828,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["serieshasadditionalcontent",{"_index":3420,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["serieshighlight",{"_index":2723,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesicon",{"_index":2620,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesid",{"_index":234,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["seriesprocessor",{"_index":2702,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesprocessor(series",{"_index":2738,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesrenderstate",{"_index":2852,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesrenderstate(renderstate",{"_index":2894,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["seriesscale",{"_index":4551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesscale.iscontinuous",{"_index":4553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seriesset",{"_index":578,"title":{},"body":{"classes/Chart.html":{},"injectables/GaugeService.html":{},"interfaces/IChart.html":{},"classes/LegendInteractionAssist.html":{}}}],["seriesset.filter(s",{"_index":2746,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesset.map(series",{"_index":1636,"title":{},"body":{"injectables/GaugeService.html":{}}}],["seriesstatessubject",{"_index":606,"title":{},"body":{"classes/Chart.html":{}}}],["seriestrackbyfn(index",{"_index":2764,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seriesunitlabel",{"_index":2621,"title":{},"body":{"components/LegendComponent.html":{}}}],["seriesvisibilitymap",{"_index":1454,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["service",{"_index":839,"title":{},"body":{"injectables/ChartCollectionService.html":{},"classes/Grid.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["service.ts",{"_index":3688,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:205",{"_index":3748,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:229",{"_index":3744,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:261",{"_index":3740,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:27",{"_index":3702,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:295",{"_index":3729,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:363",{"_index":3735,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:374",{"_index":3737,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:40",{"_index":3752,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["service.ts:76",{"_index":3707,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["set",{"_index":194,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["set_domain",{"_index":4527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set_domain_event",{"_index":2405,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["setactive(active",{"_index":2878,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setapproximateticks(ticks",{"_index":176,"title":{},"body":{"classes/AxisConfig.html":{}}}],["setattributes(attrs",{"_index":3228,"title":{},"body":{"classes/PathMarker.html":{}}}],["setcolor",{"_index":2211,"title":{},"body":{"interfaces/IChartMarker.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setcolor(color",{"_index":1992,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["setdatapointstate",{"_index":3100,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setdatapointstate(target",{"_index":3143,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setgroupstate",{"_index":2651,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupstate(groupid",{"_index":2662,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility",{"_index":2652,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setgroupvisibility(groupid",{"_index":2665,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setinteractive(interactive",{"_index":2881,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setrenderstate",{"_index":3519,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(_seriesid",{"_index":3540,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["setrenderstate(seriesid",{"_index":2839,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["sets",{"_index":2032,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"components/LegendSeriesComponent.html":{},"interfaces/ScalesIndex.html":{}}}],["setseriesrenderstate(renderstate",{"_index":2884,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["setseriesstate",{"_index":3101,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstate(rendercontainers",{"_index":3145,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["setseriesstates",{"_index":537,"title":{},"body":{"classes/Chart.html":{},"interfaces/IChart.html":{}}}],["setseriesstates(renderstatedata",{"_index":571,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["setter",{"_index":2075,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["settimeout",{"_index":1030,"title":{},"body":{"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["setting",{"_index":2035,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{}}}],["settings",{"_index":2679,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["setvisibility(seriesid",{"_index":2842,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["seven",{"_index":4453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shade",{"_index":4457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":4126,"title":{},"body":{"license.html":{}}}],["shape",{"_index":2095,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["shapes",{"_index":4504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["share",{"_index":814,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["shares",{"_index":4154,"title":{},"body":{"license.html":{}}}],["shifted",{"_index":3339,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["shifting",{"_index":147,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["short",{"_index":1914,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/typealiases.html":{}}}],["shorthand",{"_index":2179,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["show",{"_index":463,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showbottomaxis",{"_index":420,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"classes/SparkChartAssist.html":{}}}],["showing",{"_index":1192,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["showinlegend",{"_index":1990,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{}}}],["shows",{"_index":1492,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["showsubject",{"_index":442,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["showtopborder",{"_index":3517,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["side",{"_index":1714,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["side_indicators_layer",{"_index":2334,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["sideindicator",{"_index":3887,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors",{"_index":2329,"title":{"classes/SideIndicatorAccessors.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatoraccessors.series",{"_index":3882,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer",{"_index":2333,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer(rendererconfig",{"_index":3880,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicatorrenderer.side_indicators_layer",{"_index":2364,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["sideindicators",{"_index":3879,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sideindicators.push(sideindicator",{"_index":3890,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sides",{"_index":2027,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["signature",{"_index":1919,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["similar",{"_index":1748,"title":{},"body":{"classes/Grid.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["simple",{"_index":4086,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":873,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{}}}],["simplezones",{"_index":3747,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplezones.map((z",{"_index":3826,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["simplified",{"_index":2373,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["simulation",{"_index":1303,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulation.on(\"tick",{"_index":1406,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["simulationnodedatum",{"_index":1304,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["single",{"_index":2020,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/variables.html":{}}}],["six",{"_index":4452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":949,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/Grid.html":{},"classes/MarkerUtils.html":{}}}],["sizes",{"_index":2030,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["slice",{"_index":3347,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["smaller",{"_index":2059,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"injectables/ThresholdsService.html":{}}}],["software",{"_index":4163,"title":{},"body":{"license.html":{}}}],["solarwinds",{"_index":4397,"title":{},"body":{"license.html":{}}}],["sole",{"_index":4373,"title":{},"body":{"license.html":{}}}],["solely",{"_index":4332,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":4065,"title":{},"body":{"index.html":{}}}],["solve",{"_index":429,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"index.html":{}}}],["solves",{"_index":3745,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby",{"_index":3760,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sortby(breakpoints",{"_index":3819,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"components/BasicLegendTileComponent.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sourceaccessors",{"_index":3797,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceprovider",{"_index":3266,"title":{},"body":{"classes/ProcessedColorProvider.html":{},"classes/TextColorProvider.html":{}}}],["sourceseries",{"_index":3720,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data",{"_index":3798,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.accessors.data.x",{"_index":3782,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data.length",{"_index":3773,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.data[0].__thresholds",{"_index":3774,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.id",{"_index":3789,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["sourceseries.scales",{"_index":3831,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["spark",{"_index":432,"title":{"additional-documentation/chart-types/spark.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{},"index.html":{},"additional-documentation/chart-types.html":{}}}],["spark.chart",{"_index":3593,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.chart.update(spark.chartseriesset",{"_index":3596,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.chartseriesset[0",{"_index":3598,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spark.id",{"_index":3590,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchart",{"_index":3521,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist",{"_index":3512,"title":{"classes/SparkChartAssist.html":{}},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist.sparks",{"_index":3568,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartassist.sparks[0",{"_index":3575,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig",{"_index":3564,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparkchartgridconfig(new",{"_index":3571,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["sparks",{"_index":3518,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["spec\\.ts",{"_index":4530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":3301,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"license.html":{}}}],["specific",{"_index":1971,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["specified",{"_index":777,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["specifying",{"_index":2377,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["square",{"_index":4472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../automatic",{"_index":4426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../bar",{"_index":4411,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chart",{"_index":4435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":4418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../datetime",{"_index":4422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grid.ts",{"_index":4410,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../palettes.ts",{"_index":4413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../radial",{"_index":4419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../test.ts",{"_index":4421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":4059,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/chart",{"_index":800,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["src/chart/chart.component.ts",{"_index":853,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:33",{"_index":870,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:35",{"_index":872,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:37",{"_index":868,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/chart/chart.component.ts:82",{"_index":871,"title":{},"body":{"components/ChartComponent.html":{}}}],["src/charts.module.ts",{"_index":3183,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["src/constants.ts",{"_index":4512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/chart",{"_index":731,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"miscellaneous/enumerations.html":{}}}],["src/core/chart.ts",{"_index":523,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:148",{"_index":577,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:152",{"_index":579,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:156",{"_index":565,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:162",{"_index":555,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:172",{"_index":573,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:19",{"_index":543,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:20",{"_index":542,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:21",{"_index":546,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:22",{"_index":544,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:31",{"_index":540,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:40",{"_index":558,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:44",{"_index":556,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:48",{"_index":560,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:52",{"_index":559,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:56",{"_index":549,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:61",{"_index":567,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:69",{"_index":551,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:75",{"_index":569,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:81",{"_index":563,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/chart.ts:85",{"_index":554,"title":{},"body":{"classes/Chart.html":{}}}],["src/core/common/chart",{"_index":1094,"title":{},"body":{"classes/ChartPlugin.html":{}}}],["src/core/common/data",{"_index":1512,"title":{},"body":{"classes/DataSeries.html":{}}}],["src/core/common/event",{"_index":1572,"title":{},"body":{"classes/EventBus.html":{}}}],["src/core/common/palette/chart",{"_index":1045,"title":{},"body":{"classes/ChartPalette.html":{}}}],["src/core/common/palette/mapped",{"_index":3001,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["src/core/common/palette/markers/path",{"_index":3212,"title":{},"body":{"classes/PathMarker.html":{}}}],["src/core/common/palette/markers/svg",{"_index":3628,"title":{},"body":{"classes/SvgMarker.html":{}}}],["src/core/common/palette/palettes.ts",{"_index":4436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/palette/processed",{"_index":3257,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["src/core/common/palette/sequential",{"_index":3492,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["src/core/common/palette/text",{"_index":3638,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["src/core/common/renderer.ts",{"_index":3362,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:108",{"_index":3379,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:117",{"_index":3378,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:129",{"_index":3375,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:153",{"_index":3374,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:170",{"_index":3371,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:190",{"_index":3376,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:23",{"_index":3367,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:38",{"_index":3365,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:40",{"_index":3366,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:45",{"_index":3369,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:53",{"_index":3370,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:63",{"_index":3373,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:74",{"_index":3372,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:85",{"_index":3377,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/renderer.ts:95",{"_index":3368,"title":{},"body":{"classes/Renderer.html":{}}}],["src/core/common/scales/domain",{"_index":4546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/formatters/datetime",{"_index":4531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/core/common/scales/linear",{"_index":2961,"title":{},"body":{"classes/LinearScale.html":{}}}],["src/core/common/scales/noop",{"_index":3152,"title":{},"body":{"classes/NoopScale.html":{}}}],["src/core/common/scales/scale.ts",{"_index":3447,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:10",{"_index":3450,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:11",{"_index":3448,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:12",{"_index":3449,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:13",{"_index":3451,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:31",{"_index":3452,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:33",{"_index":3457,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:35",{"_index":3458,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:38",{"_index":3467,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:43",{"_index":3460,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:44",{"_index":3461,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:45",{"_index":3462,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:55",{"_index":3453,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:56",{"_index":3454,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:57",{"_index":3455,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:67",{"_index":3456,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:74",{"_index":3459,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:78",{"_index":3463,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:83",{"_index":3464,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:84",{"_index":3465,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/scale.ts:85",{"_index":3466,"title":{},"body":{"classes/Scale.html":{}}}],["src/core/common/scales/time",{"_index":3891,"title":{},"body":{"classes/TimeScale.html":{}}}],["src/core/common/scales/types.ts",{"_index":2140,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/scales/types.ts:103",{"_index":2308,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:110",{"_index":2301,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:117",{"_index":2302,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:124",{"_index":2303,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:129",{"_index":2309,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:134",{"_index":2310,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:141",{"_index":2311,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:146",{"_index":2143,"title":{},"body":{"interfaces/IBandScale.html":{}}}],["src/core/common/scales/types.ts:16",{"_index":2238,"title":{},"body":{"interfaces/IFormatters.html":{}}}],["src/core/common/scales/types.ts:25",{"_index":3490,"title":{},"body":{"interfaces/ScalesIndex.html":{}}}],["src/core/common/scales/types.ts:66",{"_index":2305,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:73",{"_index":2306,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:81",{"_index":2300,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:89",{"_index":2304,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/scales/types.ts:96",{"_index":2307,"title":{},"body":{"interfaces/IScale.html":{}}}],["src/core/common/types.ts",{"_index":1900,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/common/types.ts:122",{"_index":2219,"title":{},"body":{"interfaces/IDataAccessors.html":{}}}],["src/core/common/types.ts:126",{"_index":2312,"title":{},"body":{"interfaces/ISeriesAccessors.html":{}}}],["src/core/common/types.ts:153",{"_index":2221,"title":{},"body":{"interfaces/IDataSeries.html":{}}}],["src/core/common/types.ts:180",{"_index":2212,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:181",{"_index":2213,"title":{},"body":{"interfaces/IChartMarker.html":{}}}],["src/core/common/types.ts:186",{"_index":2200,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:187",{"_index":2199,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:188",{"_index":2202,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:189",{"_index":2201,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:190",{"_index":2196,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:191",{"_index":2203,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:192",{"_index":2197,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:193",{"_index":2205,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:194",{"_index":2206,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:195",{"_index":2204,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:196",{"_index":2198,"title":{},"body":{"interfaces/IChart.html":{}}}],["src/core/common/types.ts:212",{"_index":2215,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:215",{"_index":2216,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:218",{"_index":2217,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:221",{"_index":2214,"title":{},"body":{"interfaces/IChartPlugin.html":{}}}],["src/core/common/types.ts:238",{"_index":2295,"title":{},"body":{"interfaces/IRenderContainers.html":{}}}],["src/core/common/types.ts:301",{"_index":2220,"title":{},"body":{"interfaces/IDataPointsPayload.html":{}}}],["src/core/common/types.ts:327",{"_index":2313,"title":{},"body":{"interfaces/ISetDomainEventPayload.html":{}}}],["src/core/common/types.ts:332",{"_index":2391,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/types.ts:333",{"_index":2393,"title":{},"body":{"interfaces/IValueProvider.html":{}}}],["src/core/common/utility.service.ts",{"_index":3902,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:179",{"_index":3920,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:204",{"_index":3937,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:224",{"_index":3931,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:24",{"_index":3929,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:63",{"_index":3911,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:75",{"_index":3938,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/common/utility.service.ts:92",{"_index":3914,"title":{},"body":{"classes/UtilityService.html":{}}}],["src/core/grid/config/area",{"_index":82,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["src/core/grid/config/axis",{"_index":151,"title":{},"body":{"classes/AxisConfig.html":{}}}],["src/core/grid/config/bar",{"_index":252,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["src/core/grid/config/dimension",{"_index":1531,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["src/core/grid/config/grid",{"_index":1865,"title":{},"body":{"classes/GridConfig.html":{}}}],["src/core/grid/config/xy",{"_index":4018,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["src/core/grid/grid.ts",{"_index":1648,"title":{},"body":{"classes/Grid.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/grid/grid.ts:103",{"_index":1683,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:105",{"_index":1685,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:107",{"_index":1686,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:116",{"_index":1689,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:118",{"_index":1691,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:120",{"_index":1692,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:129",{"_index":1676,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:169",{"_index":1678,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:174",{"_index":1693,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:185",{"_index":1695,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:201",{"_index":1696,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:25",{"_index":1663,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:28",{"_index":1660,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:31",{"_index":1670,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:34",{"_index":1664,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:37",{"_index":1674,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:49",{"_index":1675,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:83",{"_index":1687,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/grid.ts:88",{"_index":1688,"title":{},"body":{"classes/Grid.html":{}}}],["src/core/grid/types.ts",{"_index":2025,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/grid/types.ts:213",{"_index":2244,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:220",{"_index":2243,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:227",{"_index":2245,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:235",{"_index":2246,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:236",{"_index":2247,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:243",{"_index":2241,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:251",{"_index":2242,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:258",{"_index":2239,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:265",{"_index":2248,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:273",{"_index":2249,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:280",{"_index":2250,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:287",{"_index":2240,"title":{},"body":{"interfaces/IGrid.html":{}}}],["src/core/grid/types.ts:50",{"_index":2228,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:56",{"_index":2229,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:63",{"_index":2222,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:69",{"_index":2223,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:77",{"_index":2226,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:83",{"_index":2227,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:91",{"_index":2224,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/grid/types.ts:97",{"_index":2225,"title":{},"body":{"interfaces/IDimensionConfig.html":{}}}],["src/core/plugins/chart",{"_index":947,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["src/core/plugins/interaction/interaction",{"_index":2508,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["src/core/plugins/radial",{"_index":3279,"title":{},"body":{"classes/RadialPopoverPlugin.html":{}}}],["src/core/plugins/tooltips/bar",{"_index":434,"title":{},"body":{"classes/BarTooltipsPlugin.html":{}}}],["src/core/plugins/tooltips/chart",{"_index":1415,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/tooltips/radial",{"_index":3299,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["src/core/plugins/types.ts",{"_index":2230,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["src/core/plugins/types.ts:6",{"_index":2254,"title":{},"body":{"interfaces/IInteractionValues.html":{}}}],["src/core/plugins/zoom",{"_index":2398,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["src/core/types.ts",{"_index":4060,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/gauge/gauge.service.ts",{"_index":1584,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:19",{"_index":1604,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:20",{"_index":1606,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:21",{"_index":1609,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:23",{"_index":1596,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:44",{"_index":1600,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/gauge/gauge.service.ts:60",{"_index":1602,"title":{},"body":{"injectables/GaugeService.html":{}}}],["src/legend/legend",{"_index":480,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["src/legend/legend.component.ts",{"_index":2616,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:16",{"_index":2636,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:21",{"_index":2622,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:26",{"_index":2623,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:31",{"_index":2629,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:36",{"_index":2630,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:41",{"_index":2632,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/legend.component.ts:46",{"_index":2634,"title":{},"body":{"components/LegendComponent.html":{}}}],["src/legend/types.ts",{"_index":4062,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/renderers/accessors/noop",{"_index":2282,"title":{},"body":{"interfaces/INoopAccessors.html":{},"classes/NoopAccessors.html":{}}}],["src/renderers/accessors/rectangle",{"_index":2291,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["src/renderers/accessors/xy",{"_index":2394,"title":{},"body":{"interfaces/IXYDataAccessors.html":{},"classes/XYAccessors.html":{}}}],["src/renderers/area/area",{"_index":6,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["src/renderers/bar/accessors/bar",{"_index":199,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["src/renderers/bar/accessors/horizontal",{"_index":1881,"title":{},"body":{"classes/HorizontalBarAccessors.html":{}}}],["src/renderers/bar/accessors/status",{"_index":2381,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["src/renderers/bar/accessors/vertical",{"_index":4016,"title":{},"body":{"classes/VerticalBarAccessors.html":{}}}],["src/renderers/bar/highlight",{"_index":264,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["src/renderers/bar/types.ts",{"_index":2193,"title":{},"body":{"interfaces/IBarChartConfig.html":{},"interfaces/IStackMetadata.html":{}}}],["src/renderers/constants.ts",{"_index":4542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/line/interaction",{"_index":2927,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["src/renderers/line/line",{"_index":2255,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["src/renderers/line/missing",{"_index":3087,"title":{},"body":{"classes/MissingDataLineRendererConfig.html":{}}}],["src/renderers/marker",{"_index":3018,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["src/renderers/noop",{"_index":3094,"title":{},"body":{"classes/NoopRenderer.html":{}}}],["src/renderers/radial/accessors/radial",{"_index":2285,"title":{},"body":{"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/RadialAccessors.html":{}}}],["src/renderers/radial/pie",{"_index":3237,"title":{},"body":{"classes/PieRenderer.html":{}}}],["src/renderers/radial/radial",{"_index":4545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/renderers/side",{"_index":2315,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["src/renderers/types.ts",{"_index":2082,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"miscellaneous/enumerations.html":{}}}],["src/renderers/types.ts:102",{"_index":2252,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:104",{"_index":2253,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/types.ts:107",{"_index":2251,"title":{},"body":{"interfaces/IHighlightStrategy.html":{}}}],["src/renderers/xy",{"_index":4033,"title":{},"body":{"classes/XYRenderer.html":{}}}],["src/styles.less",{"_index":4102,"title":{},"body":{"index.html":{}}}],["src/test.ts",{"_index":4528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/thresholds/thresholds",{"_index":3687,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["src/thresholds/types.ts",{"_index":2372,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["sstring",{"_index":3985,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.charcodeat(0",{"_index":3990,"title":{},"body":{"classes/UtilityService.html":{}}}],["sstring.length",{"_index":3987,"title":{},"body":{"classes/UtilityService.html":{}}}],["stacked",{"_index":1712,"title":{},"body":{"classes/Grid.html":{}}}],["standard",{"_index":2328,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/SideIndicatorAccessors.html":{},"miscellaneous/variables.html":{}}}],["standard_render_layers",{"_index":2320,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["standard_render_layers[renderlayername.data].order",{"_index":2370,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["standard_render_layers[renderlayername.foreground].order",{"_index":2440,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["standardcolors",{"_index":1048,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["standards",{"_index":93,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["start",{"_index":212,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["start.length",{"_index":365,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor",{"_index":354,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["startaccessor?.(d",{"_index":359,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["started",{"_index":4063,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["starting",{"_index":3315,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["starts",{"_index":1376,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startsimulation(tooltipindex",{"_index":1379,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["startx",{"_index":1889,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["starty",{"_index":1893,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["state",{"_index":737,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SparkChartAssist.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["stated",{"_index":4236,"title":{},"body":{"license.html":{}}}],["statement",{"_index":4298,"title":{},"body":{"license.html":{}}}],["states",{"_index":2813,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["statestyles",{"_index":1941,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":96,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["stating",{"_index":4273,"title":{},"body":{"license.html":{}}}],["status",{"_index":417,"title":{"additional-documentation/chart-types/bar/status.html":{}},"body":{"classes/BarStatusGridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/chart-types.html":{}}}],["status_category",{"_index":2384,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["status_domain",{"_index":2385,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statusaccessors",{"_index":2383,"title":{"classes/StatusAccessors.html":{}},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["statusaccessors(colorprovider",{"_index":3776,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["statusaccessors.status_category",{"_index":2386,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["statuses",{"_index":3753,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["step",{"_index":3756,"title":{},"body":{"injectables/ThresholdsService.html":{},"index.html":{}}}],["still",{"_index":2463,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"injectables/ThresholdsService.html":{},"classes/ZoomPlugin.html":{}}}],["stop",{"_index":1372,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["stoppage",{"_index":4356,"title":{},"body":{"license.html":{}}}],["stored",{"_index":1979,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["strategies/bar",{"_index":265,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategies/line",{"_index":2928,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy",{"_index":2120,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strategy.ts",{"_index":267,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["strategy.ts:12",{"_index":410,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:120",{"_index":298,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:14",{"_index":2931,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:19",{"_index":278,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:21",{"_index":414,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:28",{"_index":304,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:32",{"_index":413,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:39",{"_index":301,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["strategy.ts:61",{"_index":2932,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:65",{"_index":415,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:66",{"_index":2933,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["strategy.ts:75",{"_index":412,"title":{},"body":{"classes/BarSeriesHighlightStrategy.html":{}}}],["strategy.ts:92",{"_index":307,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["stream",{"_index":1189,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/LegendInteractionAssist.html":{}}}],["streamid",{"_index":1578,"title":{},"body":{"classes/EventBus.html":{}}}],["streams",{"_index":1579,"title":{},"body":{"classes/EventBus.html":{}}}],["strength(0.5",{"_index":1401,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["strict",{"_index":627,"title":{},"body":{"classes/Chart.html":{}}}],["string",{"_index":134,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["string(value",{"_index":3986,"title":{},"body":{"classes/UtilityService.html":{}}}],["string).pipe",{"_index":1200,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["string).touppercase",{"_index":351,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["stringid",{"_index":1452,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["stroke",{"_index":2044,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/PathMarker.html":{},"classes/ZoomPlugin.html":{}}}],["strokelinecap",{"_index":2118,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{}}}],["strokestyle",{"_index":2115,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["strokewidth",{"_index":1960,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"injectables/ThresholdsService.html":{}}}],["structure",{"_index":1968,"title":{"additional-documentation/advanced-usage/input-structure.html":{}},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["style",{"_index":718,"title":{},"body":{"classes/Chart.html":{},"components/ChartTooltipComponent.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["style(\"pointer",{"_index":2475,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["style(\"text",{"_index":2570,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["style(this.isvertical",{"_index":1410,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["styledsvg",{"_index":3634,"title":{},"body":{"classes/SvgMarker.html":{}}}],["styles",{"_index":2086,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{}}}],["styleurls",{"_index":491,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["subject",{"_index":297,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"license.html":{}}}],["sublicense",{"_index":4233,"title":{},"body":{"license.html":{}}}],["submission",{"_index":4300,"title":{},"body":{"license.html":{}}}],["submit",{"_index":4196,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":4194,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":651,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{}}}],["subscribe((chartevent",{"_index":2442,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["subscribe((d",{"_index":648,"title":{},"body":{"classes/Chart.html":{}}}],["subscribe((event",{"_index":1201,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subscribe((position",{"_index":1132,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["subscribe((rs",{"_index":654,"title":{},"body":{"classes/Chart.html":{}}}],["subscribers",{"_index":2638,"title":{},"body":{"components/LegendComponent.html":{}}}],["subscribing",{"_index":2694,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["subscription",{"_index":938,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{}}}],["subsequently",{"_index":4218,"title":{},"body":{"license.html":{}}}],["substitute",{"_index":4445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtract",{"_index":2564,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["subtracting",{"_index":2040,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["successfully",{"_index":1255,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["such",{"_index":2696,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"license.html":{}}}],["suggested",{"_index":903,"title":{},"body":{"components/ChartComponent.html":{}}}],["summary",{"_index":3716,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":144,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["super(colorprovider",{"_index":1888,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["super(colors",{"_index":3498,"title":{},"body":{"classes/SequentialColorProvider.html":{}}}],["super(config",{"_index":2335,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["super(id",{"_index":2993,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["super(markers",{"_index":3497,"title":{},"body":{"classes/SequentialChartMarkerProvider.html":{}}}],["super(sourceprovider",{"_index":3653,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["super.getabsoluteposition(relativeposition",{"_index":3338,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["supersede",{"_index":4307,"title":{},"body":{"license.html":{}}}],["support",{"_index":4368,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supporting",{"_index":2264,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["supports",{"_index":3977,"title":{},"body":{"classes/UtilityService.html":{}}}],["svg",{"_index":663,"title":{},"body":{"classes/Chart.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/PathMarker.html":{},"classes/RadialPopoverPlugin.html":{},"classes/SvgMarker.html":{},"classes/ZoomPlugin.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["svg_padding",{"_index":1007,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement",{"_index":1025,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.getbbox",{"_index":1032,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.innerhtml",{"_index":1027,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontainerelement.insertadjacenthtml(\"beforeend",{"_index":1029,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgcontent",{"_index":985,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["svgelement",{"_index":1824,"title":{},"body":{"classes/Grid.html":{}}}],["svgelements",{"_index":1783,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["svgmarker",{"_index":3627,"title":{"classes/SvgMarker.html":{}},"body":{"classes/SvgMarker.html":{},"miscellaneous/variables.html":{}}}],["svgmarker(s",{"_index":4439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sw",{"_index":3313,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":2626,"title":{},"body":{"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["switchmap",{"_index":2670,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["switchmap(highlightdata",{"_index":2733,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["symmetry",{"_index":1261,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["sync",{"_index":1716,"title":{},"body":{"classes/Grid.html":{}}}],["synchandlermap",{"_index":2698,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronization",{"_index":2274,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["synchronize",{"_index":2771,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["synchronized",{"_index":2775,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncsubscription",{"_index":2700,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist",{"_index":2788,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syncwithchartassist(chartassist",{"_index":2776,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["syntax",{"_index":4389,"title":{},"body":{"license.html":{}}}],["systems",{"_index":4206,"title":{},"body":{"license.html":{}}}],["t",{"_index":1920,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialValueProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{}}}],["t,i",{"_index":3928,"title":{},"body":{"classes/UtilityService.html":{}}}],["t,index",{"_index":3919,"title":{},"body":{"classes/UtilityService.html":{}}}],["tabs",{"_index":3529,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["take",{"_index":3802,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["taken",{"_index":3327,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["takeuntil",{"_index":583,"title":{},"body":{"classes/Chart.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/ZoomPlugin.html":{}}}],["takeuntil(chartassist.chart.geteventbus().getstream(destroy_event",{"_index":2782,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["takeuntil(this.destroy",{"_index":1130,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["takeuntil(this.geteventbus().getstream(destroy_event",{"_index":646,"title":{},"body":{"classes/Chart.html":{}}}],["takeuntil(this.initplugin",{"_index":1129,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["target",{"_index":384,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/Chart.html":{},"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYRenderer.html":{}}}],["target(target",{"_index":1690,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["target.append(\"g",{"_index":2588,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["target.append(\"path",{"_index":2940,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.append(\"rect\").attrs",{"_index":2352,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.node().getboundingclientrect",{"_index":3419,"title":{},"body":{"classes/Renderer.html":{}}}],["target.on(nativeevent",{"_index":3418,"title":{},"body":{"classes/Renderer.html":{}}}],["target.select(\"path.interaction",{"_index":2936,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["target.select(\"rect",{"_index":2343,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["target.select(`g.${classname",{"_index":3049,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.select(`g.${classname}`).remove",{"_index":3085,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["target.selectall(`g",{"_index":391,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["targetevent",{"_index":3417,"title":{},"body":{"classes/Renderer.html":{}}}],["technically",{"_index":3187,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["template",{"_index":882,"title":{},"body":{"components/ChartComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["templateref",{"_index":1110,"title":{},"body":{"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{}}}],["templateurl",{"_index":493,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["ten",{"_index":4456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminate",{"_index":4258,"title":{},"body":{"license.html":{}}}],["terms",{"_index":4122,"title":{},"body":{"license.html":{}}}],["test",{"_index":3962,"title":{},"body":{"classes/UtilityService.html":{}}}],["text",{"_index":180,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartPalette.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"components/RichLegendTileComponent.html":{},"license.html":{}}}],["text(labelcontent",{"_index":2559,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["textcolorprovider",{"_index":1070,"title":{"classes/TextColorProvider.html":{}},"body":{"classes/ChartPalette.html":{},"classes/TextColorProvider.html":{}}}],["textcolorprovider(this.standardcolors",{"_index":1079,"title":{},"body":{"classes/ChartPalette.html":{}}}],["textcolors",{"_index":1050,"title":{},"body":{"classes/ChartPalette.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["textoverflowhandler",{"_index":2049,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"miscellaneous/typealiases.html":{}}}],["textselection",{"_index":2050,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{}}}],["textselection.node",{"_index":2560,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["theory",{"_index":4340,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":4190,"title":{},"body":{"license.html":{}}}],["thick",{"_index":4026,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["thickness",{"_index":214,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYGridConfig.html":{},"classes/RectangleAccessors.html":{},"injectables/ThresholdsService.html":{}}}],["thicknessmap",{"_index":3705,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.__thresholds.status",{"_index":3787,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessmap[d.status",{"_index":3778,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thicknessx",{"_index":2294,"title":{},"body":{"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["thicknessy",{"_index":1896,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IValueThicknessAccessors.html":{},"classes/RectangleAccessors.html":{}}}],["things",{"_index":345,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["third",{"_index":4286,"title":{},"body":{"license.html":{}}}],["this._active",{"_index":2891,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._approximateticks",{"_index":193,"title":{},"body":{"classes/AxisConfig.html":{}}}],["this._backgroundcolors",{"_index":1085,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._config",{"_index":1736,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.bottom?.visible",{"_index":1850,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.left?.visible",{"_index":1864,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.right?.visible",{"_index":1861,"title":{},"body":{"classes/Grid.html":{}}}],["this._config.borders.top?.visible",{"_index":1858,"title":{},"body":{"classes/Grid.html":{}}}],["this._d3scale",{"_index":3472,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale(value",{"_index":2996,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.domain",{"_index":3482,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.domain(domain",{"_index":3481,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.invert(coordinate",{"_index":2997,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this._d3scale.range",{"_index":3479,"title":{},"body":{"classes/Scale.html":{}}}],["this._d3scale.range(this.isreversed",{"_index":3477,"title":{},"body":{"classes/Scale.html":{}}}],["this._height",{"_index":1562,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this._interactive",{"_index":2893,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._scales",{"_index":1734,"title":{},"body":{"classes/Grid.html":{}}}],["this._seriesrenderstate",{"_index":2895,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this._standardcolors",{"_index":1077,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._target",{"_index":1738,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"clippath",{"_index":1812,"title":{},"body":{"classes/Grid.html":{}}}],["this._target.append(\"g",{"_index":1742,"title":{},"body":{"classes/Grid.html":{}}}],["this._textcolors",{"_index":1078,"title":{},"body":{"classes/ChartPalette.html":{}}}],["this._width",{"_index":1560,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.accessors",{"_index":1527,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.activechanged.complete",{"_index":2643,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.activechanged.emit(this.active",{"_index":2642,"title":{},"body":{"components/LegendComponent.html":{}}}],["this.addplugin(gridplugin",{"_index":643,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(new",{"_index":640,"title":{},"body":{"classes/Chart.html":{}}}],["this.addplugin(plugin",{"_index":622,"title":{},"body":{"classes/Chart.html":{}}}],["this.adjustrenderingarea",{"_index":1759,"title":{},"body":{"classes/Grid.html":{}}}],["this.applydefaults(s",{"_index":2744,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.arelabelupdatesenabled",{"_index":2533,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.avoidtooltipcollisions",{"_index":1350,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.axis.bottom.fit",{"_index":405,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.gridticks",{"_index":259,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.ticklabel.horizontalpadding",{"_index":4032,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.bottom.ticksize",{"_index":261,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.bottom.visible",{"_index":423,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.left.fit",{"_index":260,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{}}}],["this.axis.left.gridticks",{"_index":257,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.padding",{"_index":4028,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.left.ticksize",{"_index":258,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.axis.left.visible",{"_index":424,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.axis.right.fit",{"_index":4029,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.padding",{"_index":4031,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.axis.right.ticksize",{"_index":4030,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.backgroundcolor",{"_index":3437,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.baraccessors.data",{"_index":2387,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.baraccessors.series",{"_index":2388,"title":{},"body":{"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"classes/StatusAccessors.html":{}}}],["this.borders",{"_index":1765,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.bottom",{"_index":1840,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.bottom.visible",{"_index":408,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.borders.left",{"_index":1862,"title":{},"body":{"classes/Grid.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.left.visible",{"_index":407,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["this.borders.right",{"_index":1859,"title":{},"body":{"classes/Grid.html":{}}}],["this.borders.top",{"_index":1854,"title":{},"body":{"classes/Grid.html":{}}}],["this.brush",{"_index":2453,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush(this.zoombrushlayer.select(\".brush",{"_index":2473,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.extent([[0",{"_index":2470,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brush.move(this.brushelement",{"_index":2490,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement",{"_index":2454,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".overlay",{"_index":2474,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushelement.select(\".selection",{"_index":2480,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushend",{"_index":2433,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushmove",{"_index":2431,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstart",{"_index":2430,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.brushstartx",{"_index":2486,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.buildborders(this.gridelementslayer",{"_index":1764,"title":{},"body":{"classes/Grid.html":{}}}],["this.builddatamanager",{"_index":638,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildgrid",{"_index":637,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildinteractionlabel(this.interactionlabellayer",{"_index":2551,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.buildrenderengine(this.grid.getlasagna",{"_index":639,"title":{},"body":{"classes/Chart.html":{}}}],["this.buildrenderingarea(clippathid",{"_index":1758,"title":{},"body":{"classes/Grid.html":{}}}],["this.cd.detectchanges",{"_index":913,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.changedetector.detectchanges",{"_index":1333,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"components/RichLegendTileComponent.html":{}}}],["this.changedetector.markforcheck",{"_index":1043,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{}}}],["this.chart",{"_index":895,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.build(this.elref.nativeelement",{"_index":896,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.getdatamanager().chartseriesset.reduce((prev",{"_index":960,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.chart.getdatamanager().getchartseries(datapoint.seriesid",{"_index":1484,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event",{"_index":1468,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(chart_view_status_event).next",{"_index":925,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(interaction_coordinates_event",{"_index":2441,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event",{"_index":1460,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(interaction_data_points_event).asobservable",{"_index":2724,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_active_event).next",{"_index":2485,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(interaction_values_event",{"_index":2527,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.geteventbus().getstream(refresh_event).subscribe",{"_index":899,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart.geteventbus().getstream(series_state_change_event",{"_index":1464,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.geteventbus().getstream(set_domain_event).next",{"_index":2506,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.geteventbus().getstream(this.config.eventstreamid",{"_index":1199,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.chart.getgrid",{"_index":2434,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().config().dimension",{"_index":2563,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().config().dimension.height",{"_index":976,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.left",{"_index":1229,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.getgrid().config().dimension.margin.top",{"_index":1231,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.chart.getgrid().config().dimension.width",{"_index":975,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{}}}],["this.chart.getgrid().getinteractivearea",{"_index":2464,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.chart.getgrid().getlasagna().addlayer",{"_index":2524,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlabelplugin.layer_name",{"_index":2586,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.chart.getgrid().getlasagna().removelayer(interactionlineplugin.layer_name",{"_index":2615,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.chart.getgrid().scales",{"_index":2532,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.chart.setseriesstates(this.legendinteractionassist.getseriesstates",{"_index":2807,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.target?.node()?.parentnode",{"_index":1220,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialPopoverPlugin.html":{}}}],["this.chart.update(seriesset",{"_index":2749,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chart.updatedimensions",{"_index":900,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chart?.destroy",{"_index":912,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.chartassist.getvisibleserieswithlegend",{"_index":2835,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartassistsubject.next",{"_index":2753,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.chartcollectionservice.getchartcollection(this.collectionid).addchart(this.chartcomponent.chart",{"_index":835,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{}}}],["this.charts",{"_index":3584,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.charts.length",{"_index":3576,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.charts.push",{"_index":3597,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.charts[0",{"_index":3577,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.closepending",{"_index":1344,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closepopoversubject",{"_index":1215,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.complete",{"_index":1216,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closepopoversubject.next",{"_index":1264,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.closetimeout",{"_index":1355,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.closetooltips.next",{"_index":1356,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.collections[collectionid",{"_index":851,"title":{},"body":{"injectables/ChartCollectionService.html":{}}}],["this.collisiontimeout",{"_index":1349,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.colorprovider",{"_index":73,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.colorprovider.get",{"_index":74,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/RadialAccessors.html":{}}}],["this.config",{"_index":1196,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["this.config().borders",{"_index":1785,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().dimension",{"_index":1770,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().dimension.height",{"_index":1843,"title":{},"body":{"classes/Grid.html":{}}}],["this.config().dimension.width",{"_index":1845,"title":{},"body":{"classes/Grid.html":{}}}],["this.config(config",{"_index":1740,"title":{},"body":{"classes/Grid.html":{}}}],["this.config.enableexternalevents",{"_index":2444,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.config.interactiontype",{"_index":1203,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.config.statestyles",{"_index":3388,"title":{},"body":{"classes/Renderer.html":{}}}],["this.config.statestyles[state",{"_index":3390,"title":{},"body":{"classes/Renderer.html":{}}}],["this.configurecharteventsubscriptions(chart.geteventbus",{"_index":2704,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.configurecssfilters",{"_index":636,"title":{},"body":{"classes/Chart.html":{}}}],["this.configureeventsubscriptions(chart.geteventbus",{"_index":3606,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.container",{"_index":1741,"title":{},"body":{"classes/Grid.html":{}}}],["this.contentposition",{"_index":944,"title":{},"body":{"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.complete",{"_index":972,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubject.next(this.contentposition",{"_index":971,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.contentpositionupdatesubscription",{"_index":942,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.contentpositionupdatesubscription.unsubscribe",{"_index":946,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.createborder(container",{"_index":1798,"title":{},"body":{"classes/Grid.html":{}}}],["this.createchart(lastspark",{"_index":3595,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.created3scale",{"_index":3473,"title":{},"body":{"classes/Scale.html":{}}}],["this.createdefaultvaluecoloraccessor(thresholds",{"_index":1624,"title":{},"body":{"injectables/GaugeService.html":{}}}],["this.data",{"_index":56,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.category(d",{"_index":1894,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.defined",{"_index":2277,"title":{},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.data.end(d",{"_index":1892,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.start(d",{"_index":1890,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness",{"_index":1897,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.thickness(d",{"_index":1898,"title":{},"body":{"classes/HorizontalBarAccessors.html":{},"classes/VerticalBarAccessors.html":{}}}],["this.data.value",{"_index":238,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.value(data",{"_index":243,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.data.x(d",{"_index":61,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x0(d",{"_index":65,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.x1(d",{"_index":67,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y(d",{"_index":63,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y0(d",{"_index":69,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.data.y1(d",{"_index":71,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["this.datamanager",{"_index":612,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.scalesindexbykey",{"_index":694,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.update(seriesset",{"_index":692,"title":{},"body":{"classes/Chart.html":{}}}],["this.datamanager.updatescaledomains",{"_index":695,"title":{},"body":{"classes/Chart.html":{}}}],["this.datapointpositions[seriesid",{"_index":1487,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints",{"_index":1251,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.datapoints[seriesid",{"_index":1483,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.default_config",{"_index":1198,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.defaultvalue",{"_index":3016,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.destroy",{"_index":1217,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.destroy$.complete",{"_index":1125,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.destroy$.next",{"_index":1124,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/ZoomPlugin.html":{}}}],["this.dimension.autoheight",{"_index":425,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.height(30",{"_index":428,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin",{"_index":4023,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.margin.bottom",{"_index":427,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.margin.right",{"_index":262,"title":{},"body":{"classes/BarGridConfig.html":{}}}],["this.dimension.margin.top",{"_index":426,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["this.dimension.padding",{"_index":4021,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["this.dimension.padding.bottom",{"_index":145,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{}}}],["this.dimension.padding.left",{"_index":406,"title":{},"body":{"classes/BarHorizontalGridConfig.html":{}}}],["this.domain().findindex((value",{"_index":2998,"title":{},"body":{"classes/LinearScale.html":{},"classes/Scale.html":{},"classes/TimeScale.html":{}}}],["this.domain(domain",{"_index":3484,"title":{},"body":{"classes/Scale.html":{}}}],["this.drawline",{"_index":1028,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.element",{"_index":624,"title":{},"body":{"classes/Chart.html":{},"classes/PathMarker.html":{}}}],["this.element.clientheight",{"_index":711,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.clientwidth",{"_index":714,"title":{},"body":{"classes/Chart.html":{}}}],["this.element.nativeelement.style.left",{"_index":1140,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.nativeelement.style.top",{"_index":1142,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.element.outerhtml",{"_index":3235,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.element.setattribute(attr",{"_index":3230,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.emitevent(renderer",{"_index":2953,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.emphasisstate",{"_index":796,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["this.emphasizeseries",{"_index":2711,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(data.seriesid",{"_index":2799,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.emphasizeseries(legendseries[0].id",{"_index":2838,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.eventbus",{"_index":611,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.destroy",{"_index":685,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(destroy_event).next",{"_index":684,"title":{},"body":{"classes/Chart.html":{}}}],["this.eventbus.getstream(series_state_change_event).next",{"_index":690,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterdatabydomain(filtereddata",{"_index":3399,"title":{},"body":{"classes/Renderer.html":{}}}],["this.filterdefs",{"_index":657,"title":{},"body":{"classes/Chart.html":{}}}],["this.filterdefs?.append(\"filter",{"_index":665,"title":{},"body":{"classes/Chart.html":{}}}],["this.finddatapointbyvalue(series",{"_index":348,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.findnearestindex(haystack",{"_index":3953,"title":{},"body":{"classes/UtilityService.html":{}}}],["this.fn(clr",{"_index":3275,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.formatters.tick",{"_index":2994,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["this.generatethresholdseries(initialvalue",{"_index":1628,"title":{},"body":{"injectables/GaugeService.html":{}}}],["this.getabsoluteposition(tooltiprelativeposition",{"_index":1488,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getabsoluteposition(validdatapointsvalues",{"_index":1250,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.getbackgroundsdataforcontinuousscale(sourceseries",{"_index":3788,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getbreakpoints(sourceseries",{"_index":3796,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getcontentposition(radius",{"_index":970,"title":{},"body":{"classes/ChartDonutContentPlugin.html":{}}}],["this.getcontrastratio(rgbinput",{"_index":3657,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getcrosspointwithy(xy1",{"_index":3799,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getdomain(filtereddata",{"_index":3401,"title":{},"body":{"classes/Renderer.html":{}}}],["this.getgaugedata(initialvalue",{"_index":1626,"title":{},"body":{"injectables/GaugeService.html":{}}}],["this.getgrid().buildplugins(this",{"_index":642,"title":{},"body":{"classes/Chart.html":{}}}],["this.getouterwidthdimensioncorrection",{"_index":1772,"title":{},"body":{"classes/Grid.html":{}}}],["this.getoverlayposition(a",{"_index":3336,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getrelativeluminance(color1",{"_index":3671,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getrelativeluminance(color2",{"_index":3673,"title":{},"body":{"classes/TextColorProvider.html":{}}}],["this.getsectionindex(angle",{"_index":3351,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.getseriesgroups(seriesset",{"_index":2811,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getsinglevalue(data",{"_index":228,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.getthresholdline(limit.series",{"_index":3844,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.getthresholdmarkerpoints(thresholds",{"_index":1630,"title":{},"body":{"injectables/GaugeService.html":{}}}],["this.gettooltipposition(datapoint",{"_index":1486,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.getvisibleserieswithlegend",{"_index":2778,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.getvisibleserieswithlegendbackup",{"_index":2777,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.grid",{"_index":614,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.build",{"_index":676,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.config().dimension",{"_index":699,"title":{},"body":{"classes/Chart.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.config().dimension.width",{"_index":2501,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().addlayer",{"_index":2436,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.getlasagna().removelayer(zoomplugin.layer_name",{"_index":2482,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.scales",{"_index":693,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.scales.x.list",{"_index":2493,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.grid.target(this.target",{"_index":675,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updatedimensions(dimensions",{"_index":715,"title":{},"body":{"classes/Chart.html":{}}}],["this.grid.updateranges",{"_index":696,"title":{},"body":{"classes/Chart.html":{}}}],["this.gridconfig",{"_index":3570,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridconfig.interactionplugins",{"_index":3572,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.gridelementslayer",{"_index":1760,"title":{},"body":{"classes/Grid.html":{}}}],["this.handleclose",{"_index":1329,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.handlelabelupdate",{"_index":2530,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.handlelineupdate",{"_index":2601,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.handleopen",{"_index":1327,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.height",{"_index":1041,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.hidesubject.next",{"_index":1470,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.highlighteddatapoints",{"_index":2766,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.highlighteddatapoints[chartseries.id",{"_index":2767,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.highlighteddatapoints[seriesid",{"_index":3610,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.icon",{"_index":2910,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.id",{"_index":1519,"title":{},"body":{"classes/DataSeries.html":{},"classes/Scale.html":{}}}],["this.initialize",{"_index":644,"title":{},"body":{"classes/Chart.html":{}}}],["this.initplugin",{"_index":1123,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.complete",{"_index":1126,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.initplugin$.next",{"_index":1127,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.inputseriesset",{"_index":2740,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.interaction_margin",{"_index":2944,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{}}}],["this.interactionhandlermap",{"_index":2428,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype",{"_index":2448,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionhandlermap[data.interactiontype](xcoord",{"_index":2452,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.interactionlabellayer",{"_index":2523,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlabellayer.select(`.${interactionlabelplugin.layer_name",{"_index":2549,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.interactionlinelayer",{"_index":2599,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.interactionplugins",{"_index":256,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["this.interactive",{"_index":421,"title":{},"body":{"classes/BarStatusGridConfig.html":{},"components/LegendSeriesComponent.html":{}}}],["this.interactivearea",{"_index":1730,"title":{},"body":{"classes/Grid.html":{}}}],["this.intersectionobserver",{"_index":887,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver.observe(this.elref.nativeelement",{"_index":889,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.intersectionobserver?.unobserve(this.elref.nativeelement",{"_index":910,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.ischartinview",{"_index":1462,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.isdomainfixed",{"_index":3485,"title":{},"body":{"classes/Scale.html":{}}}],["this.ishorizontalclassapplied",{"_index":2914,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.islegendactive",{"_index":2800,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["this.isopen",{"_index":1259,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{}}}],["this.isreversed",{"_index":3489,"title":{},"body":{"classes/Scale.html":{}}}],["this.isselectedchange.next(!this.isselected",{"_index":2919,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.isserieshidden(s.id",{"_index":2770,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.isvertical",{"_index":1388,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.lasagna",{"_index":1732,"title":{},"body":{"classes/Grid.html":{}}}],["this.lasagna.addlayer",{"_index":1761,"title":{},"body":{"classes/Grid.html":{}}}],["this.lastgridconfig",{"_index":3573,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastgridconfig.interactionplugins",{"_index":3574,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.lastinteractionvaluespayload",{"_index":2528,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.interactiontype",{"_index":2534,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x",{"_index":2541,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastinteractionvaluespayload.values.x[xscale.id",{"_index":2542,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["this.lastusedindex",{"_index":3506,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.legend",{"_index":2908,"title":{},"body":{"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["this.legend.active",{"_index":2912,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.activechanged.subscribe((active",{"_index":2909,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.interactive",{"_index":2913,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.orientation",{"_index":2915,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriescolor",{"_index":3438,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legend.seriesicon",{"_index":2911,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.legend.seriesunitlabel",{"_index":3436,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendinteractionassist",{"_index":2707,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.emphasizeseries(seriesid",{"_index":2760,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.isserieshidden(seriesid",{"_index":2763,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.renderstatesindex",{"_index":2716,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.resetseries",{"_index":2755,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.setgroupvisibility(seriesid",{"_index":2751,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendinteractionassist.update(seriesset",{"_index":2748,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseries",{"_index":3439,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasinputdescription",{"_index":3441,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseries.hasprojecteddescription",{"_index":3442,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.legendseriesset",{"_index":2745,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.legendseriesset.filter(s",{"_index":2769,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.loggerservice.warn(\"thresholds",{"_index":3775,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.margin.bottom",{"_index":1571,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.left",{"_index":1566,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.right",{"_index":1565,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.margin.top",{"_index":1570,"title":{},"body":{"classes/DimensionConfig.html":{}}}],["this.marker",{"_index":1019,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.getsvg",{"_index":1020,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.marker.setcolor(this.color",{"_index":1018,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.markerprovider",{"_index":76,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.markerprovider.get",{"_index":77,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"classes/LineAccessors.html":{}}}],["this.maxsize",{"_index":1040,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.movezoneindex(zoneindexes[zone.id",{"_index":3872,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["this.name",{"_index":1522,"title":{},"body":{"classes/DataSeries.html":{}}}],["this.ngzone.run",{"_index":906,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.ngzone.runoutsideangular",{"_index":907,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.onevent",{"_index":2804,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onevent(event",{"_index":2805,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.onsetseriesstates(rs",{"_index":655,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdate(d",{"_index":649,"title":{},"body":{"classes/Chart.html":{}}}],["this.onupdatedimensions",{"_index":652,"title":{},"body":{"classes/Chart.html":{}}}],["this.openpopoversubject",{"_index":1213,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.complete",{"_index":1214,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.openpopoversubject.next",{"_index":1260,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.opentimeout",{"_index":1346,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opentooltips.next",{"_index":1347,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.opposite(connection_points[sectionindex].x",{"_index":3354,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.opposite(connection_points[sectionindex].y",{"_index":3355,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.overlaysetup",{"_index":1457,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.plugin.chart.updatedimensions",{"_index":945,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.contentpositionupdatesubject.subscribe((contentposition",{"_index":943,"title":{},"body":{"components/ChartDonutContentComponent.html":{}}}],["this.plugin.hidesubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1328,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.orientation",{"_index":1414,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin.showsubject.pipe(takeuntil(this.unsubscribe$)).subscribe",{"_index":1326,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.plugin?.openpopoversubject.pipe",{"_index":1128,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugin?.updatepositionsubject.pipe",{"_index":1131,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.plugins.findindex(plugin",{"_index":618,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.foreach(p",{"_index":686,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.push(plugin",{"_index":616,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins.splice(pluginindex",{"_index":621,"title":{},"body":{"classes/Chart.html":{}}}],["this.plugins[pluginindex].destroy",{"_index":620,"title":{},"body":{"classes/Chart.html":{}}}],["this.popover?.updateposition",{"_index":1144,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.popovertargetposition",{"_index":1249,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processdatapoints(datapoints",{"_index":1210,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.processedcolors",{"_index":3276,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processedcolors[clr",{"_index":3274,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.processhighlighteddatapoints(datapoints",{"_index":1463,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.projecteddescription",{"_index":2922,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.projecteddescription.nativeelement.children.length",{"_index":2923,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.providedvalues",{"_index":3509,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.providedvalues[entityid",{"_index":3505,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.publishrenderstates",{"_index":2750,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.reconfigurechart(this.sparks[existingsparkindex].chart",{"_index":3594,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.redraw",{"_index":897,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.removeplugin(classref",{"_index":623,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine",{"_index":613,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderengine.setseriesstates(renderstatedata",{"_index":729,"title":{},"body":{"classes/Chart.html":{}}}],["this.renderingarea",{"_index":1757,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingarea.attrs(renderingareaattrs",{"_index":1808,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath",{"_index":1811,"title":{},"body":{"classes/Grid.html":{}}}],["this.renderingareaclippath.attrs(renderingareaclippathattrs",{"_index":1807,"title":{},"body":{"classes/Grid.html":{}}}],["this.rendermarkersvg(svg",{"_index":1015,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.renderstatesindex[series.id",{"_index":2815,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.renderstatesindex[seriesid",{"_index":2819,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.reset",{"_index":3014,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/ProcessedColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["this.resetseries",{"_index":2812,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resetvisibleseries",{"_index":2713,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.resizehandler",{"_index":901,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver",{"_index":902,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.observe((this.elref.nativeelement",{"_index":908,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.resizeobserver?.unobserve(this.elref.nativeelement",{"_index":911,"title":{},"body":{"components/ChartComponent.html":{}}}],["this.reversed(!this.isreversed",{"_index":3487,"title":{},"body":{"classes/Scale.html":{}}}],["this.scalekey",{"_index":349,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["this.selecteddatapointidxfn(renderseries.dataseries.id",{"_index":390,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["this.series",{"_index":72,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/BarAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/LineAccessors.html":{},"classes/NoopAccessors.html":{},"classes/RadialAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["this.series.category",{"_index":220,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.series.category(dataseries.id",{"_index":221,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["this.seriesgroups",{"_index":2810,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesgroups[groupid",{"_index":2829,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.serieshasadditionalcontent",{"_index":3440,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.seriesprocessor",{"_index":2705,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesprocessor(inputseriesset.map(series",{"_index":2742,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.seriesrenderstate",{"_index":2903,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["this.seriesstatessubject.next(renderstatedata",{"_index":689,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesstatessubject.pipe(untildestroy",{"_index":653,"title":{},"body":{"classes/Chart.html":{}}}],["this.seriesvisibilitymap[d.seriesid",{"_index":1471,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.seriesvisibilitymap[series.seriesid",{"_index":1466,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.setattributes",{"_index":3224,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setattributes({\"fill",{"_index":3227,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.setgroupstate(group",{"_index":2833,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setrenderstate(s",{"_index":2830,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.setvisibility(s",{"_index":2831,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.showbottomaxis",{"_index":3604,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.showsubject.next",{"_index":1489,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["this.showtopborder",{"_index":3603,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.simulation",{"_index":1352,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.simulation.stop",{"_index":1353,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.sourceprovider.get(entityid",{"_index":3271,"title":{},"body":{"classes/ProcessedColorProvider.html":{}}}],["this.sparks",{"_index":3585,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.sparks.findindex(existingspark",{"_index":3591,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.startsimulation(this.tooltipdirectivesindex",{"_index":1375,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.streams[key].complete",{"_index":1582,"title":{},"body":{"classes/EventBus.html":{}}}],["this.streams[streamid",{"_index":1580,"title":{},"body":{"classes/EventBus.html":{}}}],["this.styledsvg",{"_index":3636,"title":{},"body":{"classes/SvgMarker.html":{}}}],["this.svg",{"_index":3233,"title":{},"body":{"classes/PathMarker.html":{},"classes/SvgMarker.html":{}}}],["this.svg.complete",{"_index":1023,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.next(this.marker.getsvg",{"_index":1022,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svg.subscribe((svg",{"_index":1014,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.svgcontent.nativeelement",{"_index":1026,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.synchandlermap",{"_index":2709,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.synchandlermap[event.type](...args",{"_index":2785,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription",{"_index":2780,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.syncsubscription.unsubscribe",{"_index":2793,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.target",{"_index":629,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.append(\"defs",{"_index":658,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.remove",{"_index":688,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"height",{"_index":723,"title":{},"body":{"classes/Chart.html":{}}}],["this.target?.style(\"width",{"_index":726,"title":{},"body":{"classes/Chart.html":{}}}],["this.toggleseries",{"_index":2715,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.tooltipdirectivesindex",{"_index":1343,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltipdirectivesindex[seriesid",{"_index":1365,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.tooltippositionoffset",{"_index":3330,"title":{},"body":{"classes/RadialTooltipsPlugin.html":{}}}],["this.tooltips.foreach(tooltip",{"_index":1335,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unitlabel",{"_index":3435,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["this.unsubscribe$.complete",{"_index":1330,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.unsubscribe$.next",{"_index":1325,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["this.update",{"_index":1776,"title":{},"body":{"classes/Grid.html":{}}}],["this.update(this.inputseriesset",{"_index":2752,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["this.update.next(this.plugin?.datapoints",{"_index":1145,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["this.updateborders",{"_index":1768,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatebottomborder",{"_index":1853,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatedimensionssubject",{"_index":610,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.next",{"_index":681,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatedimensionssubject.pipe(untildestroy",{"_index":650,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatelabel(xscale",{"_index":2543,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["this.updateline(this.interactionlinelayer",{"_index":2603,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["this.updatepositionsubject",{"_index":1211,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.complete",{"_index":1212,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updatepositionsubject.next(this.popovertargetposition",{"_index":1258,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["this.updateranges",{"_index":1774,"title":{},"body":{"classes/Grid.html":{}}}],["this.updatesparks(sparks",{"_index":3581,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["this.updatesubject.next(seriesset",{"_index":680,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesubject.pipe(untildestroy",{"_index":647,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatesvg",{"_index":3232,"title":{},"body":{"classes/PathMarker.html":{}}}],["this.updatetargetdimensions(dimensionconfig",{"_index":707,"title":{},"body":{"classes/Chart.html":{}}}],["this.updatetargetdimensions(this.grid.config().dimension",{"_index":677,"title":{},"body":{"classes/Chart.html":{}}}],["this.valuemap[entityid",{"_index":3015,"title":{},"body":{"classes/MappedValueProvider.html":{}}}],["this.values.length",{"_index":3507,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.values[index",{"_index":3508,"title":{},"body":{"classes/SequentialValueProvider.html":{}}}],["this.viewbox",{"_index":1033,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.visible",{"_index":795,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{}}}],["this.width",{"_index":1038,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["this.zoombrushlayer",{"_index":2435,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["this.zoombrushlayer.append(\"g",{"_index":2455,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["those",{"_index":2787,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{}}}],["three",{"_index":4449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["threshold",{"_index":1607,"title":{},"body":{"injectables/GaugeService.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["threshold.value",{"_index":1647,"title":{},"body":{"injectables/GaugeService.html":{}}}],["threshold_markers_series_id",{"_index":1587,"title":{},"body":{"injectables/GaugeService.html":{}}}],["thresholdfrom",{"_index":3727,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.x",{"_index":3863,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdfrom.y",{"_index":3865,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholds",{"_index":1593,"title":{"additional-documentation/thresholds.html":{}},"body":{"injectables/GaugeService.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["thresholds/thresholds",{"_index":3209,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["thresholds[1].value",{"_index":1645,"title":{},"body":{"injectables/GaugeService.html":{}}}],["thresholds_main_chart_renderer_config",{"_index":3715,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholds_summary_renderer_config",{"_index":3719,"title":{},"body":{"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["thresholdshift",{"_index":3861,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.x",{"_index":3868,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdshift.y",{"_index":3869,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdsservice",{"_index":3181,"title":{"injectables/ThresholdsService.html":{}},"body":{"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"overview.html":{}}}],["thresholdsservice.series_id_suffix",{"_index":3790,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto",{"_index":3728,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.x",{"_index":3862,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["thresholdto.y",{"_index":3864,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["through",{"_index":816,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["throw",{"_index":607,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MarkerUtils.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/Renderer.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{}}}],["tick",{"_index":1718,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"classes/InteractionLabelPlugin.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/typealiases.html":{}}}],["tick_dimension_correction",{"_index":1720,"title":{},"body":{"classes/Grid.html":{}}}],["tickaxis",{"_index":4573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tickaxis.scale().ticks(config.approximateticks",{"_index":4575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticket",{"_index":753,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/SparkChartAssist.html":{}}}],["tickgroup",{"_index":2080,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticklabel",{"_index":156,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["ticks",{"_index":178,"title":{},"body":{"classes/AxisConfig.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"miscellaneous/variables.html":{}}}],["ticks.length",{"_index":4576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[0",{"_index":4578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticks[ticks.length",{"_index":4580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksaverage",{"_index":4579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ticksize",{"_index":157,"title":{},"body":{"classes/AxisConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["tile",{"_index":490,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile'},{'name",{"_index":499,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component",{"_index":3206,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tile.component.html",{"_index":494,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.less",{"_index":492,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts",{"_index":483,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:27",{"_index":3429,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:32",{"_index":3430,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:37",{"_index":3427,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:42",{"_index":3428,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:44",{"_index":3426,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:64",{"_index":3432,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile.component.ts:68",{"_index":3431,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["tile/basic",{"_index":481,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"modules/NuiChartsModule.html":{}}}],["tile/rich",{"_index":3207,"title":{},"body":{"modules/NuiChartsModule.html":{},"components/RichLegendTileComponent.html":{}}}],["time",{"_index":3710,"title":{},"body":{"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["timeframe",{"_index":4114,"title":{"additional-documentation/timeframe-selection.html":{}},"body":{"index.html":{}}}],["timeinterval",{"_index":3708,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["timeintervalscale",{"_index":321,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["timeminute(date",{"_index":4532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeout",{"_index":1252,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["timescale",{"_index":324,"title":{"classes/TimeScale.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/TimeScale.html":{}}}],["timing",{"_index":1262,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["title",{"_index":2522,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"license.html":{}}}],["toc",{"_index":4107,"title":{},"body":{"index.html":{}}}],["todo",{"_index":126,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartPalette.html":{},"components/ChartTooltipsComponent.html":{},"classes/DataSeries.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYGridConfig.html":{}}}],["together",{"_index":431,"title":{},"body":{"classes/BarStatusGridConfig.html":{}}}],["toggleseries",{"_index":788,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"miscellaneous/enumerations.html":{}}}],["toggling",{"_index":2184,"title":{},"body":{"interfaces/IBandScale.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{}}}],["tooltip",{"_index":1269,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"miscellaneous/variables.html":{}}}],["tooltip'},{'name",{"_index":510,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltip.component",{"_index":3199,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltip.component.html",{"_index":1271,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.less",{"_index":1270,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts",{"_index":1266,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.component.ts:22",{"_index":1272,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["tooltip.directive",{"_index":1313,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["tooltip.elementref.nativeelement.getattribute(\"series",{"_index":1338,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip.getoverlayelement",{"_index":1364,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltip_position_offset",{"_index":1438,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"miscellaneous/variables.html":{}}}],["tooltipdirectivesindex",{"_index":1318,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex",{"_index":1378,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltipindex[node.seriesid",{"_index":1408,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositionoffset",{"_index":1418,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltippositions",{"_index":1363,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltippositions[seriesid",{"_index":1366,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltiprelativeposition",{"_index":1485,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["tooltips",{"_index":435,"title":{"additional-documentation/plugins/tooltips.html":{}},"body":{"classes/BarTooltipsPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/plugins.html":{}}}],["tooltips'},{'name",{"_index":512,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["tooltips.component",{"_index":3200,"title":{},"body":{"modules/NuiChartsModule.html":{}}}],["tooltips.component.html",{"_index":1285,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.less",{"_index":1284,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts",{"_index":1283,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tooltips.component.ts:27",{"_index":1290,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:29",{"_index":1291,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:31",{"_index":1299,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:33",{"_index":1296,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:34",{"_index":1295,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:44",{"_index":1289,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips.component.ts:65",{"_index":1294,"title":{},"body":{"components/ChartTooltipsComponent.html":{}}}],["tooltips/chart",{"_index":1265,"title":{},"body":{"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{},"modules/NuiChartsModule.html":{}}}],["top",{"_index":109,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/MarkerUtils.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYGridConfig.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":4341,"title":{},"body":{"license.html":{}}}],["track",{"_index":3005,"title":{},"body":{"classes/MappedValueProvider.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{}}}],["trackby",{"_index":3547,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn",{"_index":1288,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"classes/SparkChartAssist.html":{}}}],["trackbyfn(_index",{"_index":3544,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["trackbyfn(index",{"_index":1292,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["tracking",{"_index":4208,"title":{},"body":{"license.html":{}}}],["trade",{"_index":4313,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":4277,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":4311,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1981,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["transform",{"_index":2584,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/MarkerUtils.html":{}}}],["transformation",{"_index":4167,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["transformed",{"_index":2417,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["transforms",{"_index":1148,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["transition",{"_index":1274,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":enter",{"_index":1279,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transition(\":leave",{"_index":1282,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["transitionduration",{"_index":1942,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["translate",{"_index":2418,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["translate(${clampedx},0",{"_index":2582,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translate(${xcoord",{"_index":3053,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["translate(0",{"_index":2569,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translate(0,${heightoffset",{"_index":2585,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["translation",{"_index":4168,"title":{},"body":{"license.html":{}}}],["transparent",{"_index":1819,"title":{},"body":{"classes/Grid.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{}}}],["triangle",{"_index":4482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1191,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["trigger(\"tooltip",{"_index":1278,"title":{},"body":{"components/ChartTooltipComponent.html":{}}}],["triggered",{"_index":2461,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["triggering",{"_index":4516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":124,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IScale.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":239,"title":{},"body":{"classes/BarAccessors.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{}}}],["ts",{"_index":128,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/GridConfig.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/Renderer.html":{},"classes/XYGridConfig.html":{}}}],["tslib",{"_index":4048,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":827,"title":{},"body":{"directives/ChartCollectionIdDirective.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{}}}],["tuned",{"_index":1397,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["two",{"_index":3663,"title":{},"body":{"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"injectables/ChartCollectionService.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"classes/EventBus.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarChartConfig.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStackMetadata.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/IStatusAccessors.html":{},"interfaces/IStatusDataAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"modules/NuiChartsModule.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":4408,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(\"`cssescape",{"_index":3983,"title":{},"body":{"classes/UtilityService.html":{}}}],["typeof",{"_index":225,"title":{},"body":{"classes/BarAccessors.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["types",{"_index":183,"title":{"additional-documentation/chart-types.html":{}},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPalette.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/NoopScale.html":{},"classes/PathMarker.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"additional-documentation/chart-types.html":{}}}],["types/d3",{"_index":4052,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":380,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["typical",{"_index":2232,"title":{},"body":{"interfaces/IElementPosition.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{}}}],["ui/bits",{"_index":1119,"title":{},"body":{"components/ChartPopoverComponent.html":{},"classes/MarkerUtils.html":{},"modules/NuiChartsModule.html":{},"injectables/ThresholdsService.html":{},"dependencies.html":{}}}],["ui/bits/bundles/css/styles.css",{"_index":4104,"title":{},"body":{"index.html":{}}}],["ui/charts",{"_index":4090,"title":{},"body":{"index.html":{}}}],["ui/charts/bundles/css/styles.css",{"_index":4105,"title":{},"body":{"index.html":{}}}],["unclipped",{"_index":2367,"title":{},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["undefined",{"_index":75,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/AreaGridConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/INoopAccessors.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/RadialAccessors.html":{},"classes/Renderer.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/VerticalBarAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["under",{"_index":4140,"title":{},"body":{"license.html":{}}}],["understand",{"_index":342,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["union",{"_index":4136,"title":{},"body":{"license.html":{}}}],["unionwith",{"_index":3762,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unionwith(breakpoints",{"_index":3813,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unique",{"_index":3812,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["unit",{"_index":2635,"title":{},"body":{"components/LegendComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["unitlabel",{"_index":3424,"title":{},"body":{"components/RichLegendTileComponent.html":{}}}],["unknown",{"_index":1642,"title":{},"body":{"injectables/GaugeService.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":4302,"title":{},"body":{"license.html":{}}}],["unpredictable",{"_index":4097,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":1315,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["unsyncchartassist",{"_index":2792,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["unsynchronize",{"_index":2786,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["until",{"_index":1956,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["untildestroy",{"_index":645,"title":{},"body":{"classes/Chart.html":{}}}],["up",{"_index":4483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":446,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LegendInteractionAssist.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SparkChartAssist.html":{},"classes/ZoomPlugin.html":{}}}],["update(inputseriesset",{"_index":774,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{}}}],["update(seriesset",{"_index":575,"title":{},"body":{"classes/Chart.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["updateborders",{"_index":1852,"title":{},"body":{"classes/Grid.html":{}}}],["updatebottomborder",{"_index":1839,"title":{},"body":{"classes/Grid.html":{}}}],["updatechartdimensionssubject",{"_index":1655,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updated",{"_index":773,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensions",{"_index":447,"title":{},"body":{"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/ChartPlugin.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IGrid.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/ZoomPlugin.html":{}}}],["updatedimensions(dimensions",{"_index":1694,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatedimensionssubject",{"_index":605,"title":{},"body":{"classes/Chart.html":{}}}],["updatedseriesset",{"_index":1635,"title":{},"body":{"injectables/GaugeService.html":{}}}],["updatelabel(scale",{"_index":2547,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["updatelegend",{"_index":2739,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["updateline(layer",{"_index":2604,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["updatepositionsubject",{"_index":1160,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"classes/RadialPopoverPlugin.html":{}}}],["updateradialseriesset",{"_index":1590,"title":{},"body":{"injectables/GaugeService.html":{}}}],["updateradialseriesset(value",{"_index":1601,"title":{},"body":{"injectables/GaugeService.html":{}}}],["updateranges",{"_index":1659,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updates",{"_index":770,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"classes/ChartDonutContentPlugin.html":{},"classes/Grid.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["updatesparks",{"_index":3520,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesparks(sparks",{"_index":3553,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["updatesubject",{"_index":604,"title":{},"body":{"classes/Chart.html":{}}}],["updatesvg",{"_index":3234,"title":{},"body":{"classes/PathMarker.html":{}}}],["updatetargetdimensions(dimensionconfig",{"_index":717,"title":{},"body":{"classes/Chart.html":{}}}],["updating",{"_index":1793,"title":{},"body":{"classes/Grid.html":{}}}],["url(\"#${cssfilterid.grayscale",{"_index":4581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usage",{"_index":768,"title":{"additional-documentation/advanced-usage.html":{}},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"additional-documentation/advanced-usage.html":{}}}],["use",{"_index":240,"title":{},"body":{"classes/BarAccessors.html":{},"classes/Chart.html":{},"components/ChartTooltipsComponent.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ITooltipNode.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":281,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"injectables/ChartCollectionService.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"modules/NuiChartsModule.html":{},"classes/PieRenderer.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useenhancedlinecaps",{"_index":2125,"title":{},"body":{"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"classes/MissingDataLineRendererConfig.html":{}}}],["useexisting",{"_index":859,"title":{},"body":{"components/ChartComponent.html":{}}}],["user",{"_index":1526,"title":{},"body":{"classes/DataSeries.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IRenderSeries.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/Renderer.html":{},"classes/SideIndicatorAccessors.html":{}}}],["uses",{"_index":735,"title":{},"body":{"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["using",{"_index":1151,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/Grid.html":{},"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineAccessors.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"license.html":{}}}],["usually",{"_index":1976,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{}}}],["utility.service",{"_index":3468,"title":{},"body":{"classes/Scale.html":{}}}],["utilityservice",{"_index":329,"title":{"classes/UtilityService.html":{}},"body":{"classes/BarHighlightStrategy.html":{},"classes/Grid.html":{},"classes/InteractionLabelPlugin.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"classes/UtilityService.html":{}}}],["utilityservice.clamptorange(x",{"_index":2581,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["utilityservice.findnearestindex(series.data",{"_index":374,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getcloser",{"_index":3959,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getclosestindex(series.data",{"_index":382,"title":{},"body":{"classes/BarHighlightStrategy.html":{}}}],["utilityservice.getscalevalues(xscales",{"_index":4003,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getscalevalues(yscales",{"_index":4005,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.getvalueaccessor(accessor",{"_index":3948,"title":{},"body":{"classes/UtilityService.html":{}}}],["utilityservice.uuid",{"_index":1746,"title":{},"body":{"classes/Grid.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{}}}],["utils.ts",{"_index":3019,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:14",{"_index":3025,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:148",{"_index":3041,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:17",{"_index":3027,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:28",{"_index":3035,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utils.ts:87",{"_index":3031,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["utilservice",{"_index":3042,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["uuid",{"_index":3909,"title":{},"body":{"classes/UtilityService.html":{}}}],["ux",{"_index":92,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"index.html":{}}}],["v.11",{"_index":4446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v10",{"_index":2761,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["valid",{"_index":245,"title":{},"body":{"classes/BarAccessors.html":{},"classes/DataSeries.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IRadialScales.html":{},"interfaces/IScale.html":{},"interfaces/IXYScales.html":{},"interfaces/ScalesIndex.html":{},"classes/XYGridConfig.html":{}}}],["validdatapoints",{"_index":1242,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/ITooltipPosition.html":{}}}],["validdatapointsvalues",{"_index":1246,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["validdatapointsvalues.length",{"_index":1248,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["value",{"_index":108,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/AxisConfig.html":{},"classes/BarAccessors.html":{},"classes/BarGridConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarStatusGridConfig.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DataSeries.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/GridConfig.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarAccessors.html":{},"interfaces/IBarDataAccessors.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialAccessors.html":{},"interfaces/IRadialDataAccessors.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRadialSeriesAccessors.html":{},"interfaces/IRectangleAccessors.html":{},"interfaces/IRectangleDataAccessors.html":{},"interfaces/IRectangleSeriesAccessors.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/IStartEndRangeAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IValueThicknessAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineAccessors.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialAccessors.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/RectangleAccessors.html":{},"classes/Renderer.html":{},"components/RichLegendTileComponent.html":{},"classes/Scale.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/StatusAccessors.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYGridConfig.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":364,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["value.valueof",{"_index":3944,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor",{"_index":2689,"title":{},"body":{"classes/LegendInteractionAssist.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{}}}],["valueaccessor(haystack[closestdataindex",{"_index":3960,"title":{},"body":{"classes/UtilityService.html":{}}}],["valueaccessor(straw",{"_index":3951,"title":{},"body":{"classes/UtilityService.html":{}}}],["valuecoloraccessor",{"_index":1595,"title":{},"body":{"injectables/GaugeService.html":{}}}],["valuemap",{"_index":1910,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MappedValueProvider.html":{},"classes/Renderer.html":{}}}],["valueof",{"_index":371,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/UtilityService.html":{}}}],["values",{"_index":290,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/ChartPopoverPlugin.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["values(limits).map((limit",{"_index":3843,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["values(this.renderstatesindex",{"_index":2818,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["values(validdatapoints",{"_index":1247,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{}}}],["values(validdatapoints).length",{"_index":1472,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{}}}],["values.x",{"_index":4007,"title":{},"body":{"classes/UtilityService.html":{}}}],["values.y",{"_index":4009,"title":{},"body":{"classes/UtilityService.html":{}}}],["values[this.scalekey",{"_index":338,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{}}}],["var",{"_index":497,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/ChartComponent.html":{},"components/ChartDonutContentComponent.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/ChartTooltipComponent.html":{},"components/ChartTooltipsComponent.html":{},"injectables/GaugeService.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":4412,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":3039,"title":{},"body":{"classes/MarkerUtils.html":{},"index.html":{}}}],["vector",{"_index":3226,"title":{},"body":{"classes/PathMarker.html":{}}}],["verbal",{"_index":4199,"title":{},"body":{"license.html":{}}}],["version",{"_index":4092,"title":{},"body":{"index.html":{},"license.html":{}}}],["versions",{"_index":1871,"title":{},"body":{"classes/GridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"classes/XYGridConfig.html":{}}}],["vertical",{"_index":1441,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IXYGridConfig.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"miscellaneous/enumerations.html":{}}}],["verticalbaraccessors",{"_index":4015,"title":{"classes/VerticalBarAccessors.html":{}},"body":{"classes/VerticalBarAccessors.html":{}}}],["vertically",{"_index":1711,"title":{},"body":{"classes/Grid.html":{}}}],["very",{"_index":4071,"title":{},"body":{"index.html":{}}}],["view",{"_index":4109,"title":{},"body":{"index.html":{}}}],["viewbox",{"_index":986,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild",{"_index":1004,"title":{},"body":{"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"components/LegendSeriesComponent.html":{}}}],["viewchild(\"projecteddescription",{"_index":2896,"title":{},"body":{"components/LegendSeriesComponent.html":{}}}],["viewchild(\"svgcontent",{"_index":1009,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild('svgcontent",{"_index":1000,"title":{},"body":{"components/ChartMarkerComponent.html":{}}}],["viewchild(popovercomponent",{"_index":1116,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["viewchildren",{"_index":1300,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewchildren(charttooltipdirective",{"_index":1298,"title":{},"body":{"components/ChartTooltipsComponent.html":{},"interfaces/ITooltipNode.html":{}}}],["viewencapsulation",{"_index":495,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewencapsulation.emulated",{"_index":486,"title":{},"body":{"components/BasicLegendTileComponent.html":{},"components/LegendComponent.html":{},"components/LegendSeriesComponent.html":{},"components/RichLegendTileComponent.html":{}}}],["viewport",{"_index":1856,"title":{},"body":{"classes/Grid.html":{}}}],["visibility",{"_index":1794,"title":{},"body":{"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visible",{"_index":158,"title":{},"body":{"classes/AxisConfig.html":{},"classes/ChartAssistRenderStateData.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/LegendInteractionAssist.html":{}}}],["visual",{"_index":3114,"title":{},"body":{"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"injectables/ThresholdsService.html":{},"classes/XYRenderer.html":{}}}],["visualization",{"_index":1236,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IPopoverPluginConfig.html":{},"injectables/ThresholdsService.html":{}}}],["visualizations",{"_index":1906,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"index.html":{}}}],["visualize",{"_index":1965,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{}}}],["visualizing",{"_index":1984,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/MissingDataLineRendererConfig.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{}}}],["void",{"_index":179,"title":{},"body":{"classes/AxisConfig.html":{},"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/Chart.html":{},"classes/ChartAssistRenderStateData.html":{},"directives/ChartCollectionIdDirective.html":{},"components/ChartComponent.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"classes/ChartPlugin.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/EventBus.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBandScale.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssist.html":{},"interfaces/IChartAssistEvent.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IFormatters.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRenderStatesIndex.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ISpark.html":{},"interfaces/ISparkChartAssistChart.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"components/LegendComponent.html":{},"classes/LegendInteractionAssist.html":{},"components/LegendSeriesComponent.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/MappedValueProvider.html":{},"classes/MarkerUtils.html":{},"classes/NoopRenderer.html":{},"classes/PathMarker.html":{},"classes/PieRenderer.html":{},"classes/ProcessedColorProvider.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/Renderer.html":{},"interfaces/ScalesIndex.html":{},"classes/SequentialChartMarkerProvider.html":{},"classes/SequentialColorProvider.html":{},"classes/SequentialValueProvider.html":{},"classes/SideIndicatorAccessors.html":{},"classes/SparkChartAssist.html":{},"classes/SvgMarker.html":{},"classes/TextColorProvider.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYRenderer.html":{},"classes/ZoomPlugin.html":{}}}],["warn",{"_index":1525,"title":{},"body":{"classes/DataSeries.html":{}}}],["warning",{"_index":4442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":4325,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":4320,"title":{},"body":{"license.html":{}}}],["waterfall",{"_index":4113,"title":{"additional-documentation/chart-types/bar/waterfall.html":{}},"body":{"index.html":{},"additional-documentation/chart-types.html":{}}}],["ways",{"_index":4098,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":2730,"title":{},"body":{"classes/LegendInteractionAssist.html":{}}}],["we're",{"_index":339,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarSeriesHighlightStrategy.html":{},"components/ChartComponent.html":{},"classes/Grid.html":{},"classes/RadialTooltipsPlugin.html":{},"injectables/ThresholdsService.html":{}}}],["weird",{"_index":1837,"title":{},"body":{"classes/Grid.html":{}}}],["well",{"_index":706,"title":{},"body":{"classes/Chart.html":{}}}],["wherever",{"_index":4285,"title":{},"body":{"license.html":{}}}],["whether",{"_index":2009,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"components/LegendSeriesComponent.html":{},"classes/SideIndicatorAccessors.html":{},"license.html":{}}}],["white",{"_index":1081,"title":{},"body":{"classes/ChartPalette.html":{},"components/RichLegendTileComponent.html":{}}}],["whole",{"_index":1234,"title":{},"body":{"classes/ChartPopoverPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"license.html":{}}}],["width",{"_index":635,"title":{},"body":{"classes/Chart.html":{},"classes/ChartDonutContentPlugin.html":{},"components/ChartMarkerComponent.html":{},"components/ChartPopoverComponent.html":{},"classes/ChartPopoverPlugin.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAllAround.html":{},"interfaces/IAreaRendererConfig.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBarRendererConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IElementPosition.html":{},"interfaces/IEnhancedLineCapConfig.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/IHighlightStrategy.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILineRendererConfig.html":{},"interfaces/ILinearScales.html":{},"interfaces/IMarkerInteractionConfig.html":{},"interfaces/IPopoverPluginConfig.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderSeries.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoneCrossPoint.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineSelectSeriesInteractionStrategy.html":{},"classes/RadialPopoverPlugin.html":{},"classes/RadialTooltipsPlugin.html":{},"classes/SideIndicatorAccessors.html":{},"classes/ZoomPlugin.html":{}}}],["width(value",{"_index":1550,"title":{},"body":{"classes/DimensionConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["widthcorrection",{"_index":2500,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthcorrection].map(x",{"_index":2504,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["widthlimit",{"_index":2047,"title":{},"body":{"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{}}}],["widthoffset",{"_index":1138,"title":{},"body":{"components/ChartPopoverComponent.html":{}}}],["wish",{"_index":4080,"title":{},"body":{"index.html":{}}}],["within",{"_index":1502,"title":{},"body":{"classes/ChartTooltipsPlugin.html":{},"interfaces/ITooltipPosition.html":{},"classes/NoopRenderer.html":{},"classes/PieRenderer.html":{},"classes/Renderer.html":{},"classes/XYRenderer.html":{},"index.html":{},"license.html":{}}}],["without",{"_index":4094,"title":{},"body":{"index.html":{},"license.html":{}}}],["words",{"_index":2459,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["work",{"_index":2949,"title":{},"body":{"classes/LineSelectSeriesInteractionStrategy.html":{},"injectables/ThresholdsService.html":{},"index.html":{},"license.html":{}}}],["workaround",{"_index":625,"title":{},"body":{"classes/Chart.html":{}}}],["works",{"_index":3709,"title":{},"body":{"injectables/ThresholdsService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["worldwide",{"_index":4224,"title":{},"body":{"license.html":{}}}],["wrapper",{"_index":2963,"title":{},"body":{"classes/LinearScale.html":{},"classes/TimeScale.html":{}}}],["writing",{"_index":4216,"title":{},"body":{"license.html":{}}}],["written",{"_index":4200,"title":{},"body":{"license.html":{}}}],["x",{"_index":42,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["x0",{"_index":43,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["x1",{"_index":44,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["x2",{"_index":1844,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["xcoord",{"_index":2449,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/MarkerUtils.html":{},"classes/ZoomPlugin.html":{}}}],["xcoord].sort((a",{"_index":2488,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xcoordinate",{"_index":3935,"title":{},"body":{"classes/UtilityService.html":{}}}],["xfn",{"_index":2607,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscale",{"_index":2536,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{}}}],["xscale.convert(d",{"_index":2608,"title":{},"body":{"classes/InteractionLinePlugin.html":{}}}],["xscales",{"_index":2492,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/UtilityService.html":{},"classes/ZoomPlugin.html":{}}}],["xscales.reduce((result",{"_index":2502,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["xvalue",{"_index":2540,"title":{},"body":{"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/UtilityService.html":{}}}],["xvalue.length",{"_index":2546,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xvalue.slice(0",{"_index":2545,"title":{},"body":{"classes/InteractionLabelPlugin.html":{}}}],["xxxx",{"_index":3968,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxx",{"_index":3967,"title":{},"body":{"classes/UtilityService.html":{}}}],["xxxxxxxxxxxx\".replace(/[xy]/g",{"_index":3971,"title":{},"body":{"classes/UtilityService.html":{}}}],["xy",{"_index":142,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"classes/SideIndicatorAccessors.html":{}}}],["xy.iszoneedge",{"_index":3810,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy.y",{"_index":3807,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy1",{"_index":3805,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2",{"_index":3800,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xy2].foreach((xy",{"_index":3806,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["xyaccessors",{"_index":2259,"title":{"classes/XYAccessors.html":{}},"body":{"interfaces/ILineAccessors.html":{},"interfaces/ILineDataAccessors.html":{},"interfaces/ILineSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/XYAccessors.html":{}}}],["xyaccessors:14",{"_index":2926,"title":{},"body":{"classes/LineAccessors.html":{}}}],["xygrid",{"_index":254,"title":{},"body":{"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"interfaces/IAllAround.html":{},"interfaces/IAxis.html":{},"interfaces/IAxisConfig.html":{},"interfaces/IBorderConfig.html":{},"interfaces/IBorders.html":{},"interfaces/IDimensionConfig.html":{},"interfaces/IDimensions.html":{},"interfaces/IGrid.html":{},"interfaces/IGridConfig.html":{},"interfaces/ITextOverflowArgs.html":{},"interfaces/ITickLabelConfig.html":{},"interfaces/IXYGridConfig.html":{},"interfaces/IZoomPluginConfiguration.html":{},"classes/InteractionLabelPlugin.html":{},"classes/InteractionLinePlugin.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{},"classes/ZoomPlugin.html":{}}}],["xygrid(lastspark",{"_index":3601,"title":{},"body":{"classes/SparkChartAssist.html":{}}}],["xygridconfig",{"_index":87,"title":{"classes/XYGridConfig.html":{}},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{},"classes/SparkChartAssist.html":{},"classes/XYGridConfig.html":{}}}],["xygridconfig.default_margin",{"_index":4024,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig.default_padding",{"_index":4022,"title":{},"body":{"classes/XYGridConfig.html":{}}}],["xygridconfig:16",{"_index":123,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:23",{"_index":116,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:32",{"_index":125,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xygridconfig:9",{"_index":121,"title":{},"body":{"classes/AreaGridConfig.html":{},"classes/BarGridConfig.html":{},"classes/BarHorizontalGridConfig.html":{},"classes/BarStatusGridConfig.html":{}}}],["xyrenderer",{"_index":2323,"title":{"classes/XYRenderer.html":{}},"body":{"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/IXYDataAccessors.html":{},"classes/LineAccessors.html":{},"classes/SideIndicatorAccessors.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{}}}],["y",{"_index":47,"title":{},"body":{"classes/AreaAccessors.html":{},"components/ChartTooltipsComponent.html":{},"classes/ChartTooltipsPlugin.html":{},"classes/Grid.html":{},"interfaces/IAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"interfaces/IBandScale.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IElementPosition.html":{},"interfaces/IFormatters.html":{},"interfaces/IHasInnerScale.html":{},"interfaces/IInteractionCoordinatesPayload.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/IInteractionValues.html":{},"interfaces/IInteractionValuesPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRadialScales.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/IScale.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISideIndicatorAccessors.html":{},"interfaces/ISideIndicatorDataAccessors.html":{},"interfaces/ISideIndicatorSeriesAccessors.html":{},"interfaces/ITooltipNode.html":{},"interfaces/ITooltipPosition.html":{},"interfaces/IValueProvider.html":{},"interfaces/IXYDataAccessors.html":{},"interfaces/IXYScales.html":{},"interfaces/IZoneCrossPoint.html":{},"classes/InteractionLabelPlugin.html":{},"classes/LineAccessors.html":{},"classes/MarkerUtils.html":{},"classes/RadialTooltipsPlugin.html":{},"interfaces/ScalesIndex.html":{},"classes/SideIndicatorAccessors.html":{},"injectables/ThresholdsService.html":{},"classes/UtilityService.html":{},"classes/XYAccessors.html":{},"classes/XYRenderer.html":{},"miscellaneous/variables.html":{}}}],["y0",{"_index":48,"title":{},"body":{"classes/AreaAccessors.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{}}}],["y1",{"_index":49,"title":{},"body":{"classes/AreaAccessors.html":{},"classes/Grid.html":{},"interfaces/IAreaAccessors.html":{},"interfaces/IAreaDataAccessors.html":{},"interfaces/IAreaSeriesAccessors.html":{},"classes/InteractionLinePlugin.html":{}}}],["y2",{"_index":1848,"title":{},"body":{"classes/Grid.html":{},"classes/InteractionLinePlugin.html":{}}}],["ycoord",{"_index":3051,"title":{},"body":{"classes/MarkerUtils.html":{}}}],["ycoordinate",{"_index":3936,"title":{},"body":{"classes/UtilityService.html":{}}}],["yes",{"_index":291,"title":{},"body":{"classes/BarHighlightStrategy.html":{},"classes/BarTooltipsPlugin.html":{},"classes/DimensionConfig.html":{},"injectables/GaugeService.html":{},"classes/Grid.html":{},"classes/HorizontalBarAccessors.html":{},"interfaces/IChartAssist.html":{},"classes/LinearScale.html":{},"classes/MappedValueProvider.html":{},"classes/NoopScale.html":{},"classes/Scale.html":{},"classes/SparkChartAssist.html":{},"injectables/ThresholdsService.html":{},"classes/TimeScale.html":{},"classes/VerticalBarAccessors.html":{}}}],["yscales",{"_index":3934,"title":{},"body":{"classes/UtilityService.html":{}}}],["yvalue",{"_index":4004,"title":{},"body":{"classes/UtilityService.html":{}}}],["yxxx",{"_index":3970,"title":{},"body":{"classes/UtilityService.html":{}}}],["z",{"_index":3837,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end",{"_index":3839,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.end?.(z.data[0",{"_index":3885,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start",{"_index":3838,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.data.start?.(z.data[0",{"_index":3883,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.accessors.series.color?.(z.id",{"_index":3886,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.data",{"_index":3884,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.end",{"_index":3830,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.entered",{"_index":3772,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.id",{"_index":3888,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.start",{"_index":3829,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["z.status",{"_index":3828,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors",{"_index":3875,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.end?.(zonedatapoint",{"_index":3878,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zdataaccessors.start?.(zonedatapoint",{"_index":3877,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zero",{"_index":148,"title":{},"body":{"classes/AreaGridConfig.html":{}}}],["zone",{"_index":2007,"title":{},"body":{"interfaces/IAccessors.html":{},"interfaces/IChart.html":{},"interfaces/IChartAssistSeries.html":{},"interfaces/IChartEvent.html":{},"interfaces/IChartMarker.html":{},"interfaces/IChartPalette.html":{},"interfaces/IChartPlugin.html":{},"interfaces/IChartSeries.html":{},"interfaces/IChartViewStatusEventPayload.html":{},"interfaces/IDataAccessors.html":{},"interfaces/IDataPoint.html":{},"interfaces/IDataPointsPayload.html":{},"interfaces/IDataSeries.html":{},"interfaces/IInteractionDataPointEvent.html":{},"interfaces/IInteractionDataPointsEvent.html":{},"interfaces/IInteractionPayload.html":{},"interfaces/ILinearScales.html":{},"interfaces/IPosition.html":{},"interfaces/IRadialRendererConfig.html":{},"interfaces/IRenderContainers.html":{},"interfaces/IRenderStateData.html":{},"interfaces/IRendererConfig.html":{},"interfaces/IRendererEventPayload.html":{},"interfaces/ISeriesAccessors.html":{},"interfaces/ISetDomainEventPayload.html":{},"interfaces/ISimpleThresholdZone.html":{},"interfaces/IValueProvider.html":{},"interfaces/IZoneCrossPoint.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zone.accessors.data",{"_index":3876,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.accessors.series.color",{"_index":3849,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data",{"_index":3835,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.data[zoneindex",{"_index":3874,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.id}__${zoneboundary}__threshold",{"_index":3851,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.scales",{"_index":3853,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zone.value",{"_index":3852,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary",{"_index":2379,"title":{},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{},"miscellaneous/enumerations.html":{}}}],["zoneboundary.end",{"_index":3842,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneboundary.start",{"_index":3742,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonecross",{"_index":2376,"title":{"interfaces/ZoneCross.html":{}},"body":{"interfaces/ISimpleThresholdZone.html":{},"injectables/ThresholdsService.html":{},"interfaces/ZoneCross.html":{}}}],["zonecrosspoints",{"_index":3814,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonedatapoint",{"_index":3873,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneendy",{"_index":3809,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindex",{"_index":3871,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes",{"_index":3770,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoneindexes[zone.id",{"_index":3870,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones",{"_index":3704,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.findindex(z",{"_index":3832,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zones.foreach(z",{"_index":3771,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zonestarty",{"_index":3808,"title":{},"body":{"injectables/ThresholdsService.html":{}}}],["zoom",{"_index":2422,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"modules/NuiChartsModule.html":{},"classes/ZoomPlugin.html":{},"overview.html":{}}}],["zoombrushlayer",{"_index":2423,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin",{"_index":2408,"title":{"classes/ZoomPlugin.html":{}},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.default_config",{"_index":2427,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}],["zoomplugin.layer_name",{"_index":2437,"title":{},"body":{"interfaces/IZoomPluginConfiguration.html":{},"classes/ZoomPlugin.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AreaAccessors.html":{"url":"classes/AreaAccessors.html","title":"class - AreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAreaAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAreaSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/area/area-accessors.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AreaGridConfig.html":{"url":"classes/AreaGridConfig.html","title":"class - AreaGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AreaGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/area-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/area-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined XYGridConfig for conforming an area chart to Nova UX standards\n */\nexport class AreaGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.dimension.padding.bottom = 2; // for shifting zero-line to bottom border\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AxisConfig.html":{"url":"classes/AxisConfig.html","title":"class - AxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/axis-config.ts\n        \n\n            \n                Description\n            \n            \n                See IAxisConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IAxisConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fit\n                            \n                            \n                                    Public\n                                gridTicks\n                            \n                            \n                                    Public\n                                padding\n                            \n                            \n                                    Public\n                                tickLabel\n                            \n                            \n                                    Public\n                                tickSize\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    approximateTicks\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:22\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            gridTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:10\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickLabel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITickLabelConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tickSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:13\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/axis-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IAxisConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        approximateTicks\n                    \n                \n\n                \n                    \n                        getapproximateTicks()\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:27\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                    Returns :         any\n\n                                \n                        \n                    \n\n                \n                    \n                        setapproximateTicks(ticks: any)\n                    \n                \n                            \n                                \n                                    Defined in src/core/grid/config/axis-config.ts:32\n                                \n                            \n                    \n                        \n                                See IAxisConfig \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            ticks\n                                                    \n                                                            \n                                                                            any\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { defaultTextOverflowHandler } from \"../default-text-overflow-handler\";\nimport { IAxisConfig, ITickLabelConfig } from \"../types\";\n\n/** See {@link IAxisConfig} */\nexport class AxisConfig implements IAxisConfig {\n    /** See {@link IAxisConfig#visible} */\n    public visible: boolean = true;\n\n    /** See {@link IAxisConfig#gridTicks} */\n    public gridTicks: boolean = false;\n\n    /** See {@link IAxisConfig#tickSize} */\n    public tickSize: number = 5;\n\n    /** See {@link IAxisConfig#tickLabel} */\n    public tickLabel: ITickLabelConfig = {\n        horizontalPadding: 0,\n        overflowHandler: defaultTextOverflowHandler,\n    };\n\n    /** See {@link IAxisConfig#fit} */\n    public fit: boolean = false;\n\n    private _approximateTicks: number = 5;\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    get approximateTicks(): any {\n        return this._approximateTicks;\n    }\n\n    /** See {@link IAxisConfig#approximateTicks} */\n    set approximateTicks(ticks: any) {\n        this._approximateTicks = parseInt(ticks, 10);\n    }\n\n    public padding: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarAccessors.html":{"url":"classes/BarAccessors.html","title":"class - BarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        RectangleAccessors\n            \n\n            \n                Implements\n            \n            \n                            IBarAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/bar-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarGridConfig.html":{"url":"classes/BarGridConfig.html","title":"class - BarGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for bar chart\n */\nexport class BarGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 5;\n        this.axis.bottom.gridTicks = false;\n        this.axis.left.fit = true;\n        this.axis.bottom.tickSize = 5;\n        this.axis.left.tickSize = 0;\n        this.dimension.margin.right = 0;\n        this.dimension.padding.bottom =  2; // 2 for border\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHighlightStrategy.html":{"url":"classes/BarHighlightStrategy.html","title":"class - BarHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number, selectedDataPointIdxFn?: SelectedDatPointIdxFn)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the data point that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                                \n                                                        selectedDataPointIdxFn\n                                                  \n                                                        \n                                                                        SelectedDatPointIdxFn\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey, scales?: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select } from \"d3-selection\";\nimport findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, DATA_POINT_NOT_FOUND } from \"../../../constants\";\nimport { TimeIntervalScale } from \"../../../core/common/scales/time-interval-scale\";\nimport { TimeScale } from \"../../../core/common/scales/time-scale\";\nimport { isBandScale, IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { UtilityService } from \"../../../core/common/utility.service\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName, RenderState } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport type SelectedDatPointIdxFn = (seriesId: string) => number;\n\nexport class BarHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the data point that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1, private selectedDataPointIdxFn?: SelectedDatPointIdxFn) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey, scales);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales, scales?: Scales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                (d, i) => {\n                    const start = startAccessor?.(d, i, series.data, series);\n                    const lengthLimit = Math.min(this.levels, value.length, start.length);\n                    // diy efficient array comparison\n                    for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                        valueOf  startAccessor?.(d, i, series.data, series);\n                        const nearestIndex = UtilityService.findNearestIndex(series.data, value, accessor);\n                        \n                        index = (nearestIndex >= series.data.length || accessor(series.data[nearestIndex], nearestIndex) > valueOf) ? -1 : nearestIndex;\n                        \n                    } else {\n                        // @ts-ignore\n                        // Needs to catch -1 otherwise typescript errors\n                        index = UtilityService.getClosestIndex(series.data, (d, i) => endAccessor(d, i, series.data, series), value) ?? -1;\n                    }\n                }\n                return index;\n            }\n            return findIndex(series.data,\n                (d, i) => valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n        const barStylesFn = renderer.getContainerStateStyles;\n        const selectedDataPointIdx = !isUndefined(this.selectedDataPointIdxFn) ? this.selectedDataPointIdxFn(renderSeries.dataSeries.id) : DATA_POINT_NOT_FOUND;\n\n        target.selectAll(`g.${ renderer.barContainerClass }`).each(function (d: any, index: number) {\n            let renderState: RenderState;\n            if (dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n                if (index === selectedDataPointIdx || selectedDataPointIdx === DATA_POINT_NOT_FOUND) {\n                    renderState = RenderState.default;\n                } else {\n                    renderState = RenderState.deemphasized;\n                }\n            } else if (dataPointIndex === index || index === selectedDataPointIdx) {\n                renderState = RenderState.emphasized;\n            } else {\n                renderState = RenderState.deemphasized;\n            }\n            select(this).attrs(barStylesFn(renderState));\n        });\n\n        // rendererSubject.next({\n        //     eventName: HIGHLIGHT_SERIES_EVENT,\n        //     data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n        // });\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarHorizontalGridConfig.html":{"url":"classes/BarHorizontalGridConfig.html","title":"class - BarHorizontalGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarHorizontalGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-horizontal-grid-config.ts\n        \n\n            \n                Description\n            \n            \n                Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n\n            \n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-horizontal-grid-config.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\n/**\n * Pre-defined and conforming Nova UX standards configuration of XYGrid for horizontal bar chart\n */\nexport class BarHorizontalGridConfig extends XYGridConfig {\n    constructor() {\n        super();\n\n        this.interactionPlugins = false;\n\n        this.axis.left.gridTicks = false;\n        this.axis.left.tickSize = 0;\n        this.axis.bottom.gridTicks = true;\n        this.axis.left.fit = true;\n        this.axis.bottom.fit = true;\n        this.axis.bottom.tickSize = 0;\n        this.axis.left.tickSize = 5;\n        this.dimension.padding.left =  2; // 2 for border\n        this.borders.left.visible = true;\n        this.borders.bottom.visible = false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarSeriesHighlightStrategy.html":{"url":"classes/BarSeriesHighlightStrategy.html","title":"class - BarSeriesHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarSeriesHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                draw\n                            \n                            \n                                    Public\n                                findDataPointByValue\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scaleKey, levels: number)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scaleKey\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                scale that will be used for searching for the datapoint that will be highlighted\n\n                                                        \n                                                \n                                                \n                                                        levels\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                for band scales, how many levels deep do we go to compare values\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            findDataPointByValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findDataPointByValue(series: IDataSeries, value: any, scaleKey)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: BarRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/bar/highlight-strategies/bar-series-highlight-strategy.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                BarRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import findIndex from \"lodash/findIndex\";\nimport isArray from \"lodash/isArray\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, HIGHLIGHT_SERIES_EVENT } from \"../../../constants\";\nimport { IXYScales, Scales } from \"../../../core/common/scales/types\";\nimport { IDataSeries, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IRectangleAccessors } from \"../../accessors/rectangle-accessors\";\nimport { IHighlightStrategy, IRenderSeries } from \"../../types\";\nimport { BarRenderer } from \"../bar-renderer\";\n\nexport class BarSeriesHighlightStrategy implements IHighlightStrategy {\n\n    /**\n     * @param scaleKey scale that will be used for searching for the datapoint that will be highlighted\n     * @param levels for band scales, how many levels deep do we go to compare values\n     */\n    constructor(private scaleKey: keyof IXYScales, private levels = 1) {\n    }\n\n    public getDataPointIndex(renderer: BarRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales) {\n        const value = values[this.scaleKey];\n        if (typeof value === \"undefined\") {\n            // if there is no value we're returning -2 (DATA_POINT_INTERACTION_RESET) which helps highlightDataPoint\n            // to understand that we need to emphasise things when we are moving outside of an interactive area\n            return DATA_POINT_INTERACTION_RESET;\n        }\n\n        return this.findDataPointByValue(series, value, this.scaleKey);\n    }\n\n    public findDataPointByValue(series: IDataSeries, value: any, scaleKey: keyof IXYScales) {\n        const accessorSuffix = (scaleKey as string).toUpperCase();\n        const dataAccessors = series.accessors.data;\n\n        const startAccessor = dataAccessors[\"start\" + accessorSuffix];\n        const endAccessor = dataAccessors[\"end\" + accessorSuffix];\n\n        if (typeof value === \"string\") {\n            return findIndex(series.data,\n                (d, i) => value === startAccessor?.(d, i, series.data, series));\n        } else if (isArray(value)) {\n            return findIndex(series.data,\n                (d, i) => {\n                    const start = startAccessor?.(d, i, series.data, series);\n                    const lengthLimit = Math.min(this.levels, value.length, start.length);\n                    // diy efficient array comparison\n                    for (let j = 0; j  valueOf >= startAccessor?.(d, i, series.data, series).valueOf() &&\n                    valueOf ,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n        if (dataPointIndex >= 0 || dataPointIndex === DATA_POINT_INTERACTION_RESET) {\n            rendererSubject.next({\n                eventName: HIGHLIGHT_SERIES_EVENT,\n                data: renderer.getDataPoint(renderSeries, renderSeries.dataSeries.data[dataPointIndex], dataPointIndex),\n            });\n        }\n    }\n\n    draw(renderer: BarRenderer, renderSeries: IRenderSeries, rendererSubject: Subject) {\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarStatusGridConfig.html":{"url":"classes/BarStatusGridConfig.html","title":"class - BarStatusGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarStatusGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/bar-status-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        XYGridConfig\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/bar-status-grid-config.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:9\n\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         XYGridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYGridConfig:32\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { XYGridConfig } from \"./xy-grid-config\";\n\nexport class BarStatusGridConfig extends XYGridConfig {\n    constructor(config: { showBottomAxis: boolean } = {showBottomAxis: true}) {\n        super();\n\n        this.interactive = true;\n        this.interactionPlugins = false;\n        if (!config.showBottomAxis) {\n            this.axis.bottom.visible = false;\n            this.borders.bottom.visible = false;\n        }\n        this.axis.left.visible = false;\n        this.axis.left.gridTicks = false;\n        this.borders.left.visible = false;\n\n        this.dimension.autoHeight = false;\n        this.dimension.margin.top = 0;\n        if (!config.showBottomAxis) {\n            this.dimension.margin.bottom = 0;\n        }\n        this.dimension.height(30); // TODO: solve magic number together with spark chart\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BarTooltipsPlugin.html":{"url":"classes/BarTooltipsPlugin.html","title":"class - BarTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BarTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/bar-tooltips-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: IBarChartConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/bar-tooltips-plugin.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IBarChartConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IBarChartConfig } from \"../../../renderers/bar/types\";\n\nimport { ChartTooltipsPlugin } from \"./chart-tooltips-plugin\";\n\nexport class BarTooltipsPlugin extends ChartTooltipsPlugin {\n\n    constructor(config?: IBarChartConfig) {\n        super();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BasicLegendTileComponent.html":{"url":"components/BasicLegendTileComponent.html","title":"component - BasicLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BasicLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/basic-legend-tile/basic-legend-tile.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-basic-legend-tile\n            \n\n            \n                styleUrls\n                ./basic-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./basic-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import {\n    Component,\n    ViewEncapsulation\n} from \"@angular/core\";\n\n@Component({\n    selector: \"nui-basic-legend-tile\",\n    templateUrl: \"./basic-legend-tile.component.html\",\n    styleUrls: [\"./basic-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class BasicLegendTileComponent { }\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'BasicLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Chart.html":{"url":"classes/Chart.html","title":"class - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Chart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChart\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                    Public\n                                    Readonly\n                                eventBus\n                            \n                            \n                                    Public\n                                    Optional\n                                filterDefs\n                            \n                            \n                                    Public\n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addPlugin\n                            \n                            \n                                    Public\n                                addPlugins\n                            \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getDataManager\n                            \n                            \n                                    Public\n                                getEventBus\n                            \n                            \n                                    Public\n                                getGrid\n                            \n                            \n                                    Public\n                                getRenderEngine\n                            \n                            \n                                    Public\n                                hasPlugin\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                removePlugin\n                            \n                            \n                                    Public\n                                removePlugins\n                            \n                            \n                                    Public\n                                setSeriesStates\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(grid: IGrid)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        grid\n                                                  \n                                                        \n                                                                        IGrid\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            eventBus\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventBus()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            filterDefs\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            target\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         D3Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPlugins(...plugins: IChartPlugin[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugins\n                                    \n                                            IChartPlugin[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasPlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removePlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removePlugins(...classRefs: ()[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRefs\n                                    \n                                            ()[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../constants\";\n\nimport { ChartPlugin } from \"./common/chart-plugin\";\nimport { DataManager } from \"./common/data-manager\";\nimport { EventBus } from \"./common/event-bus\";\nimport { Lasagna } from \"./common/lasagna\";\nimport { RenderEngine } from \"./common/render-engine\";\nimport { D3Selection, IAccessors, IChart, IChartEvent, IChartPlugin, IChartSeries, IRenderStateData } from \"./common/types\";\nimport { IDimensionConfig, IDimensions, IGrid } from \"./grid/types\";\nimport { RenderEnginePlugin } from \"./plugins/render-engine-plugin\";\nimport { CssFilterId, GRAYSCALE_COLOR_MATRIX } from \"./types\";\n\nexport class Chart implements IChart {\n    public readonly eventBus = new EventBus();\n    public element: HTMLElement;\n    public target?: D3Selection;\n    public filterDefs?: Selection;\n\n    private dataManager: DataManager; // TODO: interface\n    private renderEngine: RenderEngine; // TODO: interface\n\n    private updateSubject = new BehaviorSubject[]>([]);\n    private updateDimensionsSubject = new Subject();\n    private seriesStatesSubject = new BehaviorSubject([]);\n\n    private plugins: IChartPlugin[] = [];\n\n    constructor(private grid: IGrid) {\n        if (!grid) {\n            throw new Error(\"Grid has to be defined!\");\n        }\n        grid.updateChartDimensionsSubject = this.updateDimensionsSubject;\n    }\n\n    public getEventBus(): EventBus {\n        return this.eventBus;\n    }\n\n    public getDataManager(): DataManager {\n        return this.dataManager;\n    }\n\n    public getRenderEngine(): RenderEngine {\n        return this.renderEngine;\n    }\n\n    public getGrid(): IGrid {\n        return this.grid;\n    }\n\n    public addPlugin(plugin: IChartPlugin) {\n        plugin.chart = this;\n        this.plugins.push(plugin);\n    }\n\n    public removePlugin(classRef: typeof ChartPlugin) {\n        const pluginIndex = this.plugins.findIndex(plugin => plugin instanceof classRef);\n        if (-1 !== pluginIndex) {\n            this.plugins[pluginIndex].destroy();\n            this.plugins.splice(pluginIndex, 1);\n        }\n    }\n\n    public addPlugins(...plugins: IChartPlugin[]) {\n        for (const plugin of plugins) {\n            this.addPlugin(plugin);\n        }\n    }\n\n    public removePlugins(...classRefs: (typeof ChartPlugin)[]) {\n        for (const classRef of classRefs) {\n            this.removePlugin(classRef);\n        }\n    }\n\n    public hasPlugin(classRef: typeof ChartPlugin) {\n        return -1 !== this.plugins.findIndex(plugin => plugin instanceof classRef);\n    }\n\n    public build(element: HTMLElement) {\n        this.element = element;\n\n        // @ts-ignore: Workaround to avoid strict build crash because of type\n        this.target = select(this.element)\n            .append(\"svg\")\n            .attrs({\n                \"class\": \"nui-chart\",\n                \"height\": \"100%\",\n                \"width\": \"100%\",\n            });\n\n        this.configureCssFilters();\n        this.buildGrid();\n\n        this.dataManager = this.buildDataManager();\n        this.renderEngine = this.buildRenderEngine(this.grid.getLasagna(), this.dataManager);\n\n        this.addPlugin(new RenderEnginePlugin());\n\n        for (const gridPlugin of this.getGrid().buildPlugins(this)) {\n            this.addPlugin(gridPlugin);\n        }\n\n        this.initialize();\n\n        const untilDestroy = () => takeUntil(this.getEventBus().getStream(DESTROY_EVENT));\n        this.updateSubject.pipe(untilDestroy())\n            .subscribe((d: IChartSeries[]) => this.onUpdate(d));\n        this.updateDimensionsSubject.pipe(untilDestroy())\n            .subscribe(() => this.onUpdateDimensions());\n        this.seriesStatesSubject.pipe(untilDestroy())\n            .subscribe((rs: IRenderStateData[]) => this.onSetSeriesStates(rs));\n    }\n\n    private configureCssFilters() {\n        this.filterDefs = this.target?.append(\"defs\");\n\n        // filter for applying a grayscale appearance to svg elements\n        this.filterDefs?.append(\"filter\")\n            .attr(\"id\", CssFilterId.Grayscale)\n            .append(\"feColorMatrix\")\n            .attr(\"type\", \"matrix\")\n            .attr(\"values\", GRAYSCALE_COLOR_MATRIX);\n    }\n\n    protected buildDataManager(): DataManager {\n        return new DataManager();\n    }\n\n    protected buildGrid() {\n        if (this.target) {\n            this.grid.target(this.target);\n            this.grid.build();\n\n            this.updateTargetDimensions(this.grid.config().dimension);\n        }\n    }\n\n    protected buildRenderEngine(lasagna: Lasagna, dataManager: DataManager): RenderEngine {\n        return new RenderEngine(lasagna, dataManager);\n    }\n\n    public update(seriesSet: IChartSeries[]) {\n        this.updateSubject.next(seriesSet);\n    }\n\n    public updateDimensions() {\n        this.updateDimensionsSubject.next();\n    }\n\n    public initialize() {\n        each(this.plugins, p => {\n            p.initialize();\n        });\n    }\n\n    public destroy() {\n        this.eventBus.getStream(DESTROY_EVENT).next({ data: null });\n        this.eventBus.destroy();\n\n        this.plugins.forEach(p => p.destroy());\n\n        this.target?.remove();\n        this.target = undefined;\n    }\n\n    public setSeriesStates(renderStateData: IRenderStateData[]) {\n        this.seriesStatesSubject.next(renderStateData);\n        this.eventBus.getStream(SERIES_STATE_CHANGE_EVENT).next({ data: renderStateData });\n    }\n\n    private onUpdate(seriesSet: IChartSeries[]) {\n        this.dataManager.update(seriesSet);\n\n        this.grid.scales = this.dataManager.scalesIndexByKey;\n        this.dataManager.updateScaleDomains();\n        this.grid.updateRanges();\n\n        this.plugins.forEach(p => p.update());\n    }\n\n    private onUpdateDimensions() {\n        const dimensionConfig = this.grid.config().dimension;\n\n        // if the chart is reused with different grid dimensions, the chart's container dimensions need to be adjusted as well\n        this.updateTargetDimensions(dimensionConfig);\n\n        const dimensions: Partial = {};\n        if (dimensionConfig.autoHeight) {\n            dimensions.height = this.element.clientHeight;\n        }\n        if (dimensionConfig.autoWidth) {\n            dimensions.width = this.element.clientWidth;\n        }\n        this.grid.updateDimensions(dimensions);\n\n        this.plugins.forEach(p => p.updateDimensions());\n    }\n\n    private updateTargetDimensions(dimensionConfig: IDimensionConfig) {\n        if (!dimensionConfig.autoHeight) {\n            // use style instead of attr to override css style\n            this.target?.style(\"height\", dimensionConfig.outerHeight() + \"px\");\n        }\n        if (!dimensionConfig.autoWidth) {\n            // use style instead of attr to override css style\n            this.target?.style(\"width\", dimensionConfig.outerWidth() + \"px\");\n        }\n    }\n\n    private onSetSeriesStates(renderStateData: IRenderStateData[]) {\n        this.renderEngine.setSeriesStates(renderStateData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartAssistRenderStateData.html":{"url":"classes/ChartAssistRenderStateData.html","title":"class - ChartAssistRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartAssistRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n\n            \n\n\n            \n                Implements\n            \n            \n                            IRenderStateData\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasisState\n                            \n                            \n                                    Public\n                                seriesId\n                            \n                            \n                                    Public\n                                visible\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seriesId: string, emphasisState, visible)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:68\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seriesId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emphasisState\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        visible\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            emphasisState\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : RenderState.default\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visible\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/types.ts:71\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in src/core/chart-assists/types.ts:74\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ChartCollectionIdDirective.html":{"url":"directives/ChartCollectionIdDirective.html","title":"directive - ChartCollectionIdDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  ChartCollectionIdDirective\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection-id.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive represents a grouping behavior that is separated from chart components. Any chart component\nregistering the CHART_COMPONENT provider can be injected into this.\nA group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n\n            \n\n            \n                Implements\n            \n            \n                            AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [nuiChartCollectionId]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                nuiChartCollectionId\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartComponent: IChartComponent, chartCollectionService: ChartCollectionService)\n                    \n                \n                        \n                            \n                                Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartComponent\n                                                  \n                                                        \n                                                                        IChartComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chartCollectionService\n                                                  \n                                                        \n                                                                        ChartCollectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        nuiChartCollectionId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-collection/chart-collection-id.directive.ts:20\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, Inject, Input } from \"@angular/core\";\n\nimport { CHART_COMPONENT } from \"../constants\";\nimport { IChartComponent } from \"../core/common/types\";\n\nimport { ChartCollectionService } from \"./chart-collection.service\";\n\n/**\n * This directive represents a grouping behavior that is separated from chart components. Any chart component\n * registering the CHART_COMPONENT provider can be injected into this.\n *\n * A group of charts with the same associated chart collection id will share events broadcasted through their event buses.\n */\n@Directive({\n    selector: \"[nuiChartCollectionId]\",\n})\nexport class ChartCollectionIdDirective implements AfterViewInit {\n    /* tslint:disable-next-line:no-input-rename */\n    @Input(\"nuiChartCollectionId\")\n    public collectionId: string;\n\n    constructor(@Inject(CHART_COMPONENT) private chartComponent: IChartComponent,\n                private chartCollectionService: ChartCollectionService) {\n    }\n\n    public ngAfterViewInit(): void {\n        this.chartCollectionService.getChartCollection(this.collectionId).addChart(this.chartComponent.chart);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChartCollectionService.html":{"url":"injectables/ChartCollectionService.html","title":"injectable - ChartCollectionService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChartCollectionService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-collection/chart-collection.service.ts\n        \n\n            \n                Description\n            \n            \n                This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getChartCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getChartCollection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChartCollection(collectionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-collection/chart-collection.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    collectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { ChartCollection } from \"../core/chart-collection\";\n\n/**\n * This service registers collections of charts identified by given id. It is used primarily by the ChartCollectionId directive.\n */\n@Injectable()\nexport class ChartCollectionService {\n\n    private collections: { [key: string]: ChartCollection } = {};\n\n    public getChartCollection(collectionId: string) {\n        let collection = this.collections[collectionId];\n        if (isUndefined(collection)) {\n            collection = new ChartCollection();\n            this.collections[collectionId] = collection;\n        }\n        return collection;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartComponent.html":{"url":"components/ChartComponent.html","title":"component - ChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart/chart.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterContentInit\n                    AfterViewInit\n                    OnDestroy\n                    IChartComponent\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: CHART_COMPONENT, useExisting: forwardRef(() => ChartComponent),\n}\n                \n            \n\n\n            \n                selector\n                nui-chart\n            \n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                redraw\n                            \n                            \n                                    Public\n                                    Optional\n                                resizeObserver\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                chart\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(elRef: ElementRef, ngZone: NgZone, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart/chart.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elRef\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ngZone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        chart\n                    \n                \n                \n                    \n                        Type :         IChart\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:33\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            redraw\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            resizeObserver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ResizeObserver\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart/chart.component.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    forwardRef,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n} from \"@angular/core\";\nimport debounce from \"lodash/debounce\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nimport { CHART_COMPONENT, CHART_VIEW_STATUS_EVENT, REFRESH_EVENT } from \"../constants\";\nimport { IChart, IChartComponent, IChartViewStatusEventPayload } from \"../core/common/types\";\n\n@Component({\n    selector: \"nui-chart\",\n    template: \"\",\n    providers: [\n        {\n            provide: CHART_COMPONENT,\n            useExisting: forwardRef(() => ChartComponent),\n        },\n    ],\n})\nexport class ChartComponent implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, IChartComponent, OnChanges {\n\n    @Input() public chart: IChart;\n\n    public resizeObserver?: ResizeObserver;\n    private resizeHandler: Function;\n    private intersectionObserver: IntersectionObserver;\n\n    constructor(private elRef: ElementRef, private ngZone: NgZone, private cd: ChangeDetectorRef) {\n    }\n\n    public ngOnInit() {\n        this.intersectionObserver = new IntersectionObserver(this.intersectionObserverCallback);\n        this.intersectionObserver.observe(this.elRef.nativeElement);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"chart\"]) {\n            const previousChart: IChart = changes[\"chart\"].previousValue;\n            if (previousChart) {\n                previousChart.destroy();\n            }\n\n            if (this.chart) {\n                this.chart.build(this.elRef.nativeElement);\n                this.redraw();\n            }\n        }\n    }\n\n    public ngAfterContentInit() {\n        this.chart.getEventBus().getStream(REFRESH_EVENT).subscribe(() => {\n            this.chart.updateDimensions();\n        });\n    }\n\n    public ngAfterViewInit() {\n        this.resizeHandler = debounce(() => this.redraw(), 10);\n        this.resizeObserver = new ResizeObserver(() => {\n            // This was suggested here https://github.com/angular/zone.js/issues/1011\n            this.ngZone.run(() => this.resizeHandler());\n        });\n        this.ngZone.runOutsideAngular(() => this.resizeObserver?.observe((this.elRef.nativeElement)));\n    }\n\n    public ngOnDestroy() {\n        this.intersectionObserver?.unobserve(this.elRef.nativeElement);\n        this.resizeObserver?.unobserve(this.elRef.nativeElement);\n        this.chart?.destroy();\n    }\n\n    public redraw = () => {\n        this.chart.updateDimensions();\n        this.cd.detectChanges();\n    }\n\n    private intersectionObserverCallback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void => {\n        // Since we're only listening for intersection changes for one target (the chart itself), the 'entries' argument always has just one element.\n        const data: IChartViewStatusEventPayload = { isChartInView: entries[0].isIntersecting };\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartDonutContentComponent.html":{"url":"components/ChartDonutContentComponent.html","title":"component - ChartDonutContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartDonutContentComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-donut-content/chart-donut-content.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-donut-content\n            \n\n            \n                styleUrls\n                ./chart-donut-content.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-donut-content.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartDonutContentPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:15\n                            \n                        \n                \n                    \n                        The plugin instance \n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-donut-content/chart-donut-content.component.ts:18\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { ChartDonutContentPlugin } from \"../core/plugins/chart-donut-content-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-donut-content\",\n    templateUrl: \"./chart-donut-content.component.html\",\n    styleUrls: [\"./chart-donut-content.component.less\"],\n})\nexport class ChartDonutContentComponent implements OnDestroy, OnInit {\n\n    /** The plugin instance */\n    @Input() public plugin: ChartDonutContentPlugin;\n\n    /** The current content position */\n    public contentPosition: IElementPosition;\n\n    private contentPositionUpdateSubscription: Subscription;\n\n    public ngOnInit() {\n        this.contentPositionUpdateSubscription = this.plugin.contentPositionUpdateSubject.subscribe((contentPosition: IElementPosition) => {\n            this.contentPosition = contentPosition;\n        });\n        this.plugin.chart.updateDimensions();\n    }\n\n    public ngOnDestroy() {\n        if (this.contentPositionUpdateSubscription) {\n            this.contentPositionUpdateSubscription.unsubscribe();\n        }\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartDonutContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartDonutContentPlugin.html":{"url":"classes/ChartDonutContentPlugin.html","title":"class - ChartDonutContentPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartDonutContentPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-donut-content-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin calculates new size and position for content inside donut chart\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contentPosition\n                            \n                            \n                                    Public\n                                contentPositionUpdateSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:17\n                            \n                        \n\n                \n                    \n                        The current content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            contentPositionUpdateSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-donut-content-plugin.ts:14\n                            \n                        \n\n                \n                    \n                        Subject for getting updates on the content position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-donut-content-plugin.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\n\nimport { RadialRenderer } from \"../../renderers/radial/radial-renderer\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\n\nimport { IElementPosition } from \"./types\";\n\n/**\n* This plugin calculates new size and position for content inside donut chart\n*/\nexport class ChartDonutContentPlugin extends ChartPlugin {\n    /** Subject for getting updates on the content position */\n    public contentPositionUpdateSubject = new Subject();\n\n    /** The current content position */\n    public contentPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n\n    public updateDimensions() {\n        const radius = this.chart.getDataManager().chartSeriesSet.reduce((prev: number | undefined, current) => {\n            if (current.renderer instanceof RadialRenderer && !isUndefined(prev)) {\n                return Math.min(prev, current.renderer.getInnerRadius(current.scales.r.range(), current.data.length - 1));\n            }\n            return prev;\n        }, Infinity);\n\n        if (isUndefined(radius)) {\n            throw new Error(\"Radius is undefined\");\n        }\n\n        this.contentPosition = this.getContentPosition(radius);\n        this.contentPositionUpdateSubject.next(this.contentPosition);\n    }\n\n    public destroy(): void {\n        this.contentPositionUpdateSubject.complete();\n    }\n\n    private getContentPosition(areaSize: number): IElementPosition {\n        const basics = [this.chart.getGrid().config().dimension.width() / 2, this.chart.getGrid().config().dimension.height() / 2];\n        return {\n            top: basics[1] - (areaSize / Math.sqrt(2)),\n            left: basics[0] - (areaSize / Math.sqrt(2)),\n            width: areaSize * Math.sqrt(2),\n            height: areaSize * Math.sqrt(2),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartMarkerComponent.html":{"url":"components/ChartMarkerComponent.html","title":"component - ChartMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartMarkerComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-marker/chart-marker.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnDestroy\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-marker\n            \n\n            \n                styleUrls\n                ./chart-marker.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-marker.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                svgContent\n                            \n                            \n                                    Public\n                                viewBox\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                drawLine\n                            \n                            \n                                marker\n                            \n                            \n                                maxSize\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-marker/chart-marker.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        drawLine\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        marker\n                    \n                \n                \n                    \n                        Type :         IChartMarker\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxSize\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:19\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            svgContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('svgContent')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            viewBox\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"10px\"\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-marker/chart-marker.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Inject, Input, OnChanges, OnDestroy, SimpleChanges, ViewChild } from \"@angular/core\";\nimport isFunction from \"lodash/isFunction\";\nimport { BehaviorSubject } from \"rxjs\";\n\nimport { IChartMarker } from \"../core/common/types\";\n\n/** @ignore */\nconst SVG_PADDING = 3;\n\n@Component({\n    selector: \"nui-chart-marker\",\n    templateUrl: \"./chart-marker.component.html\",\n    styleUrls: [\"./chart-marker.component.less\"],\n})\nexport class ChartMarkerComponent implements OnDestroy, AfterViewInit, OnChanges {\n    @Input() marker: IChartMarker;\n    @Input() drawLine: boolean;\n    @Input() color: string;\n    @Input() maxSize = 20;\n\n    @ViewChild(\"svgContent\") public svgContent: ElementRef;\n\n    public viewBox: string;\n    public height: string = \"10px\"; // size needs to be defined by default to prevent initial svg element from being huge\n    public width: string = \"10px\"; // same here\n\n    private svg = new BehaviorSubject(\"\");\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngAfterViewInit() {\n        this.svg.subscribe((svg: string) => {\n            this.renderMarkerSvg(svg);\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"marker\"] || changes[\"color\"]) {\n            if (changes[\"color\"]) {\n                this.marker.setColor(this.color);\n            }\n            if (this.marker && this.marker.getSvg && isFunction(this.marker.getSvg)) {\n                this.svg.next(this.marker.getSvg());\n            }\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.svg.complete();\n    }\n\n    private renderMarkerSvg(svg: string) {\n        const svgContainerElement: any = this.svgContent.nativeElement;\n        const line = ``;\n        svgContainerElement.innerHTML = \"\";\n\n        if (this.drawLine) {\n            svgContainerElement.insertAdjacentHTML(\"beforeend\", line);\n        }\n        svgContainerElement.insertAdjacentHTML(\"beforeend\", svg);\n\n        setTimeout(() => {\n            const clientRect = svgContainerElement.getBBox();\n            this.viewBox = `${clientRect.x - SVG_PADDING} ${clientRect.y - SVG_PADDING} ` +\n                `${clientRect.width + 2 * SVG_PADDING} ${clientRect.height + 2 * SVG_PADDING}`;\n            this.width = Math.min(clientRect.width + 2 * SVG_PADDING, this.maxSize) + \"px\";\n            this.height = Math.min(clientRect.height + 2 * SVG_PADDING, this.maxSize) + \"px\";\n\n            this.changeDetector.markForCheck();\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPalette.html":{"url":"classes/ChartPalette.html","title":"class - ChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/chart-palette.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPalette\n            \n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    standardColors\n                                \n                                \n                                    backgroundColors\n                                \n                                \n                                    textColors\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[] | IValueProvider, options: object)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/chart-palette.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                        string[] | IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        standardColors\n                    \n                \n\n                \n                    \n                        getstandardColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        backgroundColors\n                    \n                \n\n                \n                    \n                        getbackgroundColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textColors\n                    \n                \n\n                \n                    \n                        gettextColors()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/palette/chart-palette.ts:39\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { rgb } from \"d3-color\";\nimport isArray from \"lodash/isArray\";\n\nimport { IChartPalette, IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\nimport { SequentialColorProvider } from \"./sequential-color-provider\";\nimport { TextColorProvider } from \"./text-color-provider\";\n\nexport class ChartPalette implements IChartPalette {\n    private _standardColors: IValueProvider;\n    private _textColors: TextColorProvider;\n    private _backgroundColors: IValueProvider;\n\n    constructor(colors: string[] | IValueProvider, options = {backgroundOpacity: 0.15}) {\n        if (isArray(colors)) {\n            this._standardColors = new SequentialColorProvider( colors);\n        } else {\n            this._standardColors = > colors;\n        }\n        this._textColors = new TextColorProvider(this.standardColors, {light: \"white\", dark: \"black\"}); // TODO: oops!\n        this._backgroundColors = new ProcessedColorProvider(this.standardColors, (c: string) => {\n            const color = getColorValueByName(c);\n            const rgbColor = rgb(color);\n            rgbColor.opacity = options.backgroundOpacity;\n            return rgbColor.toString();\n        });\n    }\n\n    public get standardColors(): IValueProvider {\n        return this._standardColors;\n    }\n\n    public get backgroundColors(): IValueProvider {\n        return this._backgroundColors;\n    }\n\n    public get textColors(): IValueProvider {\n        return this._textColors;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPlugin.html":{"url":"classes/ChartPlugin.html","title":"class - ChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/chart-plugin.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IChartPlugin\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/common/chart-plugin.ts:3\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/chart-plugin.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/chart-plugin.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChart, IChartPlugin } from \"./types\";\n\nexport abstract class ChartPlugin implements IChartPlugin {\n\n    constructor() { }\n\n    public chart: IChart;\n\n    public initialize(): void { }\n\n    public update(): void { }\n\n    public updateDimensions(): void { }\n\n    public destroy(): void { }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartPopoverComponent.html":{"url":"components/ChartPopoverComponent.html","title":"component - ChartPopoverComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartPopoverComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-popover/chart-popover.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnInit\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-popover\n            \n\n            \n                styleUrls\n                ./chart-popover.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-popover.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                            \n                                popover\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef, element: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-popover/chart-popover.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartPopoverPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:30\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        update\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:34\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            popover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     PopoverComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild(PopoverComponent)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-popover/chart-popover.component.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from \"@angular/core\";\nimport { PopoverComponent } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IDataPointsPayload } from \"../core/common/types\";\nimport { ChartPopoverPlugin } from \"../core/plugins/chart-popover-plugin\";\nimport { IElementPosition } from \"../core/plugins/types\";\n\n@Component({\n    selector: \"nui-chart-popover\",\n    templateUrl: \"./chart-popover.component.html\",\n    styleUrls: [\"./chart-popover.component.less\"],\n})\nexport class ChartPopoverComponent implements OnChanges, OnInit, OnDestroy {\n\n    @Input() plugin: ChartPopoverPlugin;\n\n    @Input() template: TemplateRef;\n\n    @Output() update = new EventEmitter();\n\n    @ViewChild(PopoverComponent) popover: PopoverComponent;\n\n    private destroy$ = new Subject();\n    private initPlugin$ = new Subject();\n\n    constructor(private changeDetector: ChangeDetectorRef, public element: ElementRef) { }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.plugin && !changes.plugin.isFirstChange()) {\n            this.initPlugin();\n        }\n    }\n\n    public ngOnInit() {\n        this.initPlugin();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.initPlugin$.complete();\n    }\n\n    private initPlugin() {\n        this.initPlugin$.next();\n\n        this.plugin?.openPopoverSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe(() => {\n            this.changeDetector.markForCheck();\n        });\n\n        this.plugin?.updatePositionSubject.pipe(\n            takeUntil(this.initPlugin$),\n            takeUntil(this.destroy$)\n        ).subscribe((position: IElementPosition) => {\n            // calculating a width offset to position the popover's host element at the midpoint of the popover target\n            const widthOffset = position.width / 2;\n            this.element.nativeElement.style.left = position.left + widthOffset + \"px\";\n            this.element.nativeElement.style.top = position.top + \"px\";\n            this.popover?.updatePosition();\n            this.update.next(this.plugin?.dataPoints);\n        });\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartPopoverComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartPopoverPlugin.html":{"url":"classes/ChartPopoverPlugin.html","title":"class - ChartPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\npopover inputs. The listened event can be configured using the 'config.eventStreamId' property.\nThe actual popover is handled by the ChartPopoverComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IPopoverPluginConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/chart-popover-plugin.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IPopoverPluginConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:34\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:28\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:43\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:32\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:36\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/chart-popover-plugin.ts:30\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/chart-popover-plugin.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINT_EVENT, INTERACTION_DATA_POINTS_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipComponent.html":{"url":"components/ChartTooltipComponent.html","title":"component - ChartTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltip\n            \n\n            \n                styleUrls\n                ./chart-tooltip.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltip.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltip.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { animate, style, transition, trigger } from \"@angular/animations\";\nimport { ChangeDetectionStrategy, Component, Input, TemplateRef } from \"@angular/core\";\n\n@Component({\n    selector: \"nui-chart-tooltip\",\n    styleUrls: [\"./chart-tooltip.component.less\"],\n    templateUrl: \"./chart-tooltip.component.html\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger(\"tooltip\", [\n            transition(\":enter\", [\n                style({ opacity: 0 }),\n                animate(300, style({ opacity: 1 })),\n            ]),\n            transition(\":leave\", [\n                animate(300, style({ opacity: 0 })),\n            ]),\n        ]),\n    ],\n})\nexport class ChartTooltipComponent {\n    @Input() template: TemplateRef;\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChartTooltipsComponent.html":{"url":"components/ChartTooltipsComponent.html","title":"component - ChartTooltipsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  ChartTooltipsComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/chart-tooltips/chart-tooltips.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-chart-tooltips\n            \n\n            \n                styleUrls\n                ./chart-tooltips.component.less\n            \n\n\n\n            \n                templateUrl\n                ./chart-tooltips.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeTooltips\n                            \n                            \n                                    Public\n                                openTooltips\n                            \n                            \n                                tooltips\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                trackByFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                plugin\n                            \n                            \n                                template\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/chart-tooltips/chart-tooltips.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        plugin\n                    \n                \n                \n                    \n                        Type :         ChartTooltipsPlugin\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        template\n                    \n                \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(index: number, item: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chart-tooltips/chart-tooltips.component.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    item\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closeTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openTooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         QueryList\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChildren(ChartTooltipDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/chart-tooltips/chart-tooltips.component.ts:31\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective; } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n            this.closePending = true;\n            clearTimeout(this.closeTimeout);\n\n            this.closeTimeout = setTimeout(() => {\n                this.closeTooltips.next();\n                this.closePending = false;\n                this.isOpen = false;\n            });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n        tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'ChartTooltipsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChartTooltipsPlugin.html":{"url":"classes/ChartTooltipsPlugin.html","title":"class - ChartTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChartTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\nThe actual tooltips are handled by the ChartTooltipsComponent.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tooltipPositionOffset: number, orientation: \"right\" | \"top\")\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        tooltipPositionOffset\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Offset of a tooltip from edge of a highlighted element\n\n                                                        \n                                                \n                                                \n                                                        orientation\n                                                  \n                                                        \n                                                                    \"right\" | \"top\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:65\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:63\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:75\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:70\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/tooltips/chart-tooltips-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataSeries.html":{"url":"classes/DataSeries.html","title":"class - DataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/data-series.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDataSeries\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                accessors\n                            \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSeries: IDataSeries)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSeries\n                                                  \n                                                        \n                                                                        IDataSeries\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            accessors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/data-series.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, IDataSeries, SeriesAccessor } from \"./types\";\n\nexport class DataSeries implements IDataSeries {\n\n    public id: string;\n    public accessors: {\n        data?: Record,\n        series?: Record,\n    };\n    public data: any[];\n    public name: string;\n\n    constructor(dataSeries: IDataSeries) {\n        this.id = dataSeries.id;\n        this.data = dataSeries.data;\n        this.name = dataSeries.name;\n        // TODO: here we can check if default accessors are valid and warn user\n        this.accessors = dataSeries.accessors || {\n            data: {\n                category: (d: any) => d.name,\n                value: (d: any) => d.value,\n            }, series: {},\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DimensionConfig.html":{"url":"classes/DimensionConfig.html","title":"class - DimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/dimension-config.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IDimensionConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                autoHeight\n                            \n                            \n                                    Public\n                                autoWidth\n                            \n                            \n                                    Public\n                                margin\n                            \n                            \n                                    Public\n                                padding\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                height\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerHeight\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                outerWidth\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                            \n                                    Public\n                                width\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:24\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            autoWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:22\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            margin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:7\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            padding\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/dimension-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IDimensionConfig \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:40\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:42\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            height\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    height(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:44\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:67\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:69\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerHeight(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:71\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:53\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:55\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    outerWidth(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:57\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:27\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:29\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            width\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    width(value?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/config/dimension-config.ts:31\n                \n            \n\n\n            \n                \n                    See IDimensionConfig \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IDimensionConfig } from \"../types\";\n\nexport class DimensionConfig implements IDimensionConfig {\n    private _width: number = 0;\n    private _height: number = 0;\n    /** See {@link IDimensionConfig#margin} */\n    public margin: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n    /** See {@link IDimensionConfig#padding} */\n    public padding: IAllAround = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n    };\n\n    /** See {@link IDimensionConfig#autoWidth} */\n    public autoWidth = true;\n    /** See {@link IDimensionConfig#autoHeight} */\n    public autoHeight = true;\n\n    /** See {@link IDimensionConfig#width} */\n    public width(): number;\n    /** See {@link IDimensionConfig#width} */\n    public width(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#width} */\n    public width(value?: number): any {\n        if (value === undefined) {\n            return this._width;\n        }\n        this._width = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#height} */\n    public height(): number;\n    /** See {@link IDimensionConfig#height} */\n    public height(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#height} */\n    public height(value?: number): any {\n        if (value === undefined) {\n            return this._height;\n        }\n        this._height = value;\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(): number;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerWidth} */\n    public outerWidth(value?: number): any {\n        const marginsWidth = this.margin.right + this.margin.left;\n        if (value === undefined) {\n            return this._width + marginsWidth;\n        }\n        this._width = Math.max(value - marginsWidth, 0);\n        return this;\n    }\n\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(): number;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value: number): IDimensionConfig;\n    /** See {@link IDimensionConfig#outerHeight} */\n    public outerHeight(value?: number): any {\n        const marginsHeight = this.margin.top + this.margin.bottom;\n        if (value === undefined) {\n            return this._height + marginsHeight;\n        }\n        this._height = value - marginsHeight;\n        return this;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventBus.html":{"url":"classes/EventBus.html","title":"class - EventBus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventBus\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/event-bus.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                getStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getStream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStream(streamId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/event-bus.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    streamId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subject\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport { Subject } from \"rxjs\";\n\nexport class EventBus {\n\n    private streams: { [key: string]: Subject } = {};\n\n    public getStream(streamId: string): Subject {\n        if (!this.streams[streamId]) {\n            this.streams[streamId] = new Subject();\n        }\n        return this.streams[streamId];\n    }\n\n    public destroy() {\n        each(Object.keys(this.streams), (key: string) => {\n            this.streams[key].complete();\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GaugeService.html":{"url":"injectables/GaugeService.html","title":"injectable - GaugeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GaugeService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gauge/gauge.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                QUANTITY_SERIES_ID\n                            \n                            \n                                    Static\n                                REMAINDER_SERIES_ID\n                            \n                            \n                                    Static\n                                THRESHOLD_MARKERS_SERIES_ID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                assembleRadialSeriesSet\n                            \n                            \n                                    Public\n                                generateThresholdSeries\n                            \n                            \n                                    Public\n                                updateRadialSeriesSet\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            assembleRadialSeriesSet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    assembleRadialSeriesSet(value: number, max: number, thresholds: IGaugeThreshold[], valueColorAccessor?: DataAccessor)\n                \n            \n\n\n            \n                \n                    Defined in src/gauge/gauge.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    thresholds\n                                    \n                                            IGaugeThreshold[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    valueColorAccessor\n                                    \n                                                DataAccessor\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            generateThresholdSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateThresholdSeries(value: number, max: number, thresholds: IGaugeThreshold[], accessors: RadialAccessors, scales: IRadialScales)\n                \n            \n\n\n            \n                \n                    Defined in src/gauge/gauge.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    thresholds\n                                    \n                                            IGaugeThreshold[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessors\n                                    \n                                                RadialAccessors\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                IRadialScales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateRadialSeriesSet\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRadialSeriesSet(value: number, max: number, thresholds: IGaugeThreshold[], seriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/gauge/gauge.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    thresholds\n                                    \n                                            IGaugeThreshold[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            QUANTITY_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"quantity\"\n                        \n                    \n                        \n                            \n                                    Defined in src/gauge/gauge.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            REMAINDER_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"remainder\"\n                        \n                    \n                        \n                            \n                                    Defined in src/gauge/gauge.service.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            THRESHOLD_MARKERS_SERIES_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"threshold-markers\"\n                        \n                    \n                        \n                            \n                                    Defined in src/gauge/gauge.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { CHART_PALETTE_CS1 } from \"../core/common/palette/palettes\";\nimport { DataAccessor, IAccessors, IChartAssistSeries, IDataSeries } from \"../core/common/types\";\nimport { IRadialScales } from \"../core/public-api\";\nimport { RadialAccessors } from \"../renderers/radial/accessors/radial-accessors\";\nimport { gaugeRendererConfig } from \"../renderers/radial/gauge-renderer-config\";\nimport { GaugeThresholdsRenderer } from \"../renderers/radial/gauge-thresholds-renderer\";\nimport { RadialRenderer } from \"../renderers/radial/radial-renderer\";\nimport { radialScales } from \"../renderers/radial/radial-scales\";\n\nimport { IGaugeThreshold, IGaugeThresholdMarker } from \"./types\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class GaugeService {\n    public static QUANTITY_SERIES_ID = \"quantity\";\n    public static REMAINDER_SERIES_ID = \"remainder\";\n    public static THRESHOLD_MARKERS_SERIES_ID = \"threshold-markers\";\n\n    public assembleRadialSeriesSet(value: number,\n                                   max: number,\n                                   thresholds: IGaugeThreshold[],\n                                   valueColorAccessor?: DataAccessor): IChartAssistSeries[] {\n        const initialValue = value ?? 0;\n        const initialMax = max ?? 0;\n        const accessors = new RadialAccessors();\n        accessors.data.color = valueColorAccessor || this.createDefaultValueColorAccessor(thresholds);\n        const scales = radialScales();\n        const renderer = new RadialRenderer(gaugeRendererConfig());\n        return [\n            ...this.getGaugeData(initialValue, initialMax).map(s => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            })),\n            this.generateThresholdSeries(initialValue, initialMax, thresholds, accessors, scales),\n        ];\n    }\n\n    public generateThresholdSeries(value: number,\n                                   max: number,\n                                   thresholds: IGaugeThreshold[],\n                                   accessors: RadialAccessors,\n                                   scales: IRadialScales): IChartAssistSeries {\n        return {\n            id: GaugeService.THRESHOLD_MARKERS_SERIES_ID,\n            data: this.getThresholdMarkerPoints(thresholds, value, max),\n            accessors,\n            scales,\n            renderer: new GaugeThresholdsRenderer(),\n            excludeFromArcCalculation: true,\n            preprocess: false,\n        };\n    }\n\n    public updateRadialSeriesSet(value: number,\n                                 max: number,\n                                 thresholds: IGaugeThreshold[],\n                                 seriesSet: IChartAssistSeries[]): IChartAssistSeries[] {\n        const newValue = value ?? 0;\n        const newMax = max ?? 0;\n        const updatedSeriesSet = seriesSet.map(series => {\n            if (series.id === GaugeService.QUANTITY_SERIES_ID) {\n                return { ...series, data: [newValue] };\n            }\n\n            if (series.id === GaugeService.REMAINDER_SERIES_ID) {\n                return { ...series, data: [newMax - newValue] };\n            }\n\n            // threshold level markers\n            return { ...series, data: this.getThresholdMarkerPoints(thresholds, newValue, newMax) };\n        });\n\n        return updatedSeriesSet;\n    }\n\n    private createDefaultValueColorAccessor(thresholds: IGaugeThreshold[]) {\n        return (quantity: number, i: number, series: number[], dataSeries: IDataSeries) => {\n            if (dataSeries.id === GaugeService.REMAINDER_SERIES_ID) {\n                return \"var(--nui-color-semantic-unknown-bg-hover)\";\n            } else {\n                if (!isUndefined(thresholds[1].value) && thresholds[1].value  ({\n            hit: threshold.value \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grid.html":{"url":"classes/Grid.html","title":"class - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/grid.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IGrid\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_BORDER_CLASS_NAME\n                            \n                            \n                                    Static\n                                GRID_CLASS_NAME\n                            \n                            \n                                    Static\n                                GRID_ELEMENTS_LAYER_NAME\n                            \n                            \n                                    Static\n                                RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                            \n                                    Static\n                                RENDERING_AREA_LAYER_NAME\n                            \n                            \n                                    Public\n                                updateChartDimensionsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                build\n                            \n                            \n                                    Public\n                                buildPlugins\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                getInteractiveArea\n                            \n                            \n                                    Public\n                                getLasagna\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                updateRanges\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_BORDER_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-border\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:28\n                            \n                        \n\n                \n                    \n                        Class name applied to each of the grid's borders by default \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_CLASS_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"nui-chart-grid\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:25\n                            \n                        \n\n                \n                    \n                        Class name for the grid \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            GRID_ELEMENTS_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"grid-elements\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:34\n                            \n                        \n\n                \n                    \n                        Name for the lasagna layer containing the grid's rendered elements \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_CLIP_PATH_PREFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"clip-path_\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:31\n                            \n                        \n\n                \n                    \n                        Prefix applied to the rendering area clip path id \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            RENDERING_AREA_LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"rendering-area\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:37\n                            \n                        \n\n                \n                    \n                        Name for the rendering area lasagna layer \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updateChartDimensionsSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/grid.ts:49\n                            \n                        \n\n                \n                    \n                        Subject for indicating that the chart's dimensions should be updated \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            build\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    build()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:129\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:169\n                \n            \n\n\n            \n                \n                    Derived classes override this method to build the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart instance to pass to each plugin\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        Default implementation returns an empty array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:103\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGridConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:105\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            config\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    config(config?: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:107\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IGridConfig | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:83\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:88\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :     Lasagna\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:116\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         D3Selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:118\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            target\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    target(target?: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:120\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:174\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:185\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/grid.ts:201\n                \n            \n\n\n            \n                \n                    See IGrid \n\n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { select, Selection } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { IChart, IChartPlugin } from \"../common/types\";\nimport { D3Selection } from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\n\nimport { GridConfig } from \"./config/grid-config\";\nimport { IAllAround, IBorderConfig, IBorders, IDimensions, IGrid, IGridConfig } from \"./types\";\n\nexport const borderMidpoint = 0.5;\n\ntype BorderKey = keyof IAllAround;\n\n/**\n * @implements {IGrid}\n * Implementation for the dimensions, scaling, interactive area, and borders of a basic grid\n */\nexport abstract class Grid implements IGrid {\n    /** Class name for the grid */\n    public static GRID_CLASS_NAME = \"nui-chart-grid\";\n\n    /** Class name applied to each of the grid's borders by default */\n    public static DEFAULT_BORDER_CLASS_NAME = \"nui-chart-border\";\n\n    /** Prefix applied to the rendering area clip path id */\n    public static RENDERING_AREA_CLIP_PATH_PREFIX = \"clip-path_\";\n\n    /** Name for the lasagna layer containing the grid's rendered elements */\n    public static GRID_ELEMENTS_LAYER_NAME = \"grid-elements\";\n\n    /** Name for the rendering area lasagna layer */\n    public static RENDERING_AREA_LAYER_NAME = \"rendering-area\";\n\n    /** @ignore Height correction needed to prevent interaction gap between vertically stacked charts */\n    public static RENDER_AREA_HEIGHT_CORRECTION = 1;\n\n    /** @ignore Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area */\n    public static RENDER_AREA_WIDTH_CORRECTION = 1;\n\n    /** @ignore Width correction needed to sync bottom border length and grid width to tick placement */\n    public static TICK_DIMENSION_CORRECTION = 1;\n\n    /** Subject for indicating that the chart's dimensions should be updated */\n    public updateChartDimensionsSubject: Subject;\n\n    /** d3 container for the grid */\n    protected container: D3Selection;\n\n    /** d3 selection for the grid's rendering area clip path */\n    protected renderingAreaClipPath: D3Selection;\n\n    /** d3 selection for the grid's rendering area */\n    protected renderingArea: D3Selection;\n\n    /** d3 selection for the grid's interactive area */\n    protected interactiveArea: D3Selection;\n\n    /** The grid's layer manager */\n    protected lasagna: Lasagna;\n\n    /** Lasagna layer for the grid's rendered elements */\n    protected gridElementsLayer: Selection;\n\n    /** Definition of the grid's borders as rendered */\n    protected borders: Partial = {};\n\n    /** Property value of the grid's scales */\n    protected _scales: ScalesIndex;\n\n    /** Property value of the grid's configuration */\n    protected _config: IGridConfig;\n\n    /** Property value of the grid's target d3 selection */\n    protected _target: D3Selection;\n\n\n    /** See {@link IGrid#getInteractiveArea} */\n    public getInteractiveArea(): D3Selection {\n        return this.interactiveArea;\n    }\n\n    /** See {@link IGrid#getLasagna} */\n    public getLasagna(): Lasagna {\n        return this.lasagna;\n    }\n\n    /** @ignore */\n    public set scales(scales: ScalesIndex) {\n        this._scales = scales;\n    }\n\n    /** @ignore */\n    public get scales(): ScalesIndex {\n        return this._scales;\n    }\n\n    /** See {@link IGrid#config} */\n    public config(): IGridConfig;\n    /** See {@link IGrid#config} */\n    public config(config: IGridConfig): this;\n    /** See {@link IGrid#config} */\n    public config(config?: IGridConfig): IGridConfig | this {\n        if (config === undefined) {\n            return this._config;\n        }\n        this._config = config;\n        return this;\n    }\n\n    /** See {@link IGrid#target} */\n    public target(): D3Selection;\n    /** See {@link IGrid#target} */\n    public target(target: D3Selection): IGrid;\n    /** See {@link IGrid#target} */\n    public target(target?: D3Selection): D3Selection | IGrid {\n        if (target === undefined) {\n            return this._target;\n        }\n        this._target = target;\n        return this;\n    }\n\n    /** See {@link IGrid#build} */\n    public build(): IGrid {\n        if (!this.config()) {\n            const config = new GridConfig();\n            this.config(config);\n        }\n\n        this.container = this._target.append(\"g\")\n            .attrs({\n                \"class\": Grid.GRID_CLASS_NAME,\n            });\n\n        const clipPathId = Grid.RENDERING_AREA_CLIP_PATH_PREFIX + UtilityService.uuid();\n        // Asserting similar type to avoid refactoring all the grids\n        // TODO: Refactor lasagna service to accept multiple D3Selection types\n        //  or refactor grid implementations/interfaces to maintain the same selection type\n        this.lasagna = new Lasagna(>(this.container), clipPathId);\n        this.renderingArea = this.buildRenderingArea(clipPathId);\n        this.adjustRenderingArea();\n\n        this.gridElementsLayer = this.lasagna.addLayer({\n            name: Grid.GRID_ELEMENTS_LAYER_NAME,\n            order: 100,\n            clipped: false,\n        });\n\n        const borders = this.buildBorders(this.gridElementsLayer);\n        if (borders) {\n            this.borders = borders;\n        }\n\n        return this;\n    }\n\n    /**\n     * Derived classes override this method to build the grid's plugins\n     *\n     * @param {IChart} chart The chart instance to pass to each plugin\n     *\n     * @returns {IChartPlugin[]} Default implementation returns an empty array\n     */\n    public buildPlugins(chart: IChart): IChartPlugin[] {\n        return [];\n    }\n\n    /** See {@link IGrid#update} */\n    public update(): IGrid {\n        if (isEmpty(this.scales)) {\n            return this;\n        }\n\n        this.updateBorders();\n        this.adjustRenderingArea();\n        return this;\n    }\n\n    /** See {@link IGrid#updateDimensions} */\n    public updateDimensions(dimensions: Partial): IGrid {\n        const dimensionConfig = this.config().dimension;\n\n        if (dimensions.width) {\n            dimensionConfig.outerWidth(dimensions.width - this.getOuterWidthDimensionCorrection());\n        }\n        if (dimensions.height) {\n            dimensionConfig.outerHeight(dimensions.height);\n        }\n\n        this.adjustRenderingArea();\n        this.updateRanges();\n\n        return this;\n    }\n    /** See {@link IGrid#updateRanges} */\n    public updateRanges(): IGrid {\n        this.update();\n        return this;\n    }\n\n    /**\n     * Calculate the width correction needed for accommodating grid elements that may extend beyond the chart's configured width\n     */\n    protected getOuterWidthDimensionCorrection() {\n        return Grid.TICK_DIMENSION_CORRECTION;\n    }\n\n    /**\n     * Builds the grid borders as SVGElements based on the specified configuration\n     *\n     * @param {D3Selection} container d3 container for the borders\n     *\n     * @returns {Partial} The grid's borders\n     */\n    protected buildBorders(container: D3Selection): Partial | undefined {\n        if (!this.config() || !this.config().borders) {\n            return;\n        }\n\n        const borderConfigs = this.config().borders;\n        const borders: Partial = {};\n        const borderKeys = Object.keys(borderConfigs);\n        each(borderKeys, (side: BorderKey) => {\n            // We're creating even invisible borders and updating visibility afterwards\n            if (borderConfigs[side]) {\n                borders[side] = this.createBorder(container, borderConfigs[side]) ?? undefined;\n            }\n        });\n\n        return borders;\n    }\n\n    /**\n     * Adjusts the grid's rendering area and clip path based on the grid's configured width and height\n     */\n    protected adjustRenderingArea = () => {\n        const d = this.config().dimension;\n        const renderingAreaClipPathAttrs = {\n            \"width\": d.width(),\n            \"height\": d.height() + Grid.RENDER_AREA_HEIGHT_CORRECTION,\n            \"y\": -Grid.RENDER_AREA_HEIGHT_CORRECTION,\n        };\n\n        const renderingAreaAttrs = {\n            ...renderingAreaClipPathAttrs,\n            // Width correction needed to prevent interaction gap between right side of grid and the edge of the rendering area\n            \"width\": d.width() > 0 ? d.width() - Grid.RENDER_AREA_WIDTH_CORRECTION : d.width(),\n        };\n\n        this.renderingAreaClipPath.attrs(renderingAreaClipPathAttrs);\n        this.renderingArea.attrs(renderingAreaAttrs);\n    }\n\n    /**\n     * Builds the grid's rendering area as a layer on the lasagna\n     *\n     * @param {string} clipPathId The clip path identifier\n     *\n     * @returns {D3Selection} The grid's rendering area\n     */\n    private buildRenderingArea(clipPathId: string): D3Selection {\n        this.renderingAreaClipPath = this._target.append(\"clipPath\")\n            .attr(\"id\", clipPathId)\n            .append(\"rect\");\n\n        const renderingAreaContainer = this.lasagna.addLayer({\n            name: Grid.RENDERING_AREA_LAYER_NAME,\n            order: -1,\n            clipped: true,\n        });\n        return renderingAreaContainer.append(\"rect\")\n            .attrs({\n                \"pointer-events\": \"all\",\n                \"fill\": \"transparent\",\n            });\n    }\n\n    /**\n     * Creates a border with the specified configuration in the provided container\n     *\n     * @param {D3Selection} container The container to append the border to\n     * @param {IBorderConfig} config The configuration to apply to the border\n     *\n     * @returns {SVGElement} The created border\n     */\n    private createBorder(container: D3Selection, config: IBorderConfig): SVGElement | null {\n        const border = container.append(\"line\")\n            .attr(\"class\", config.className || Grid.DEFAULT_BORDER_CLASS_NAME);\n\n        if (config.width) {\n            // use style instead of attr to override css style\n            border.style(\"stroke-width\", config.width);\n        }\n        if (config.color) {\n            // use style instead of attr to override css style\n            border.style(\"stroke\", config.color);\n        }\n\n        return border.node();\n    }\n\n    // TODO: borders are evil. reconsider!\n    // We're using borders instead of axis line and because of that we need to do these weird size adjustments\n    protected updateBottomBorder() {\n        if (!this.borders.bottom) {\n            throw new Error(\"BottomBorder is not defined\");\n        }\n        select(this.borders.bottom)\n            .attrs({\n                \"x1\": 0,\n                \"y1\": this.config().dimension.height() - borderMidpoint,\n                \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                \"y2\": this.config().dimension.height() - borderMidpoint,\n            })\n            .classed(\"hidden\", !this._config.borders.bottom?.visible);\n    }\n\n    /**\n     * Updates the d3 line positioning and visibility attributes of each of the configured borders\n     */\n    protected updateBorders() {\n        if (this.borders.bottom) {\n            this.updateBottomBorder();\n        }\n        if (this.borders.top) {\n            select(this.borders.top)\n                .attrs({\n                    \"x1\": 0,\n                    \"y1\": borderMidpoint, // the line was outside of the viewport in some browser when set to 0\n                    \"x2\": this.config().dimension.width() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                    \"y2\": borderMidpoint,\n                })\n                .classed(\"hidden\", !this._config.borders.top?.visible);\n        }\n        if (this.borders.right) {\n            select(this.borders.right)\n                .attrs({\n                    \"x1\": this.config().dimension.width() - borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": this.config().dimension.width() - borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.right?.visible);\n        }\n        if (this.borders.left) {\n            select(this.borders.left)\n                .attrs({\n                    \"x1\": borderMidpoint,\n                    \"y1\": 0,\n                    \"x2\": borderMidpoint,\n                    \"y2\": this.config().dimension.height() + Grid.TICK_DIMENSION_CORRECTION, // to get nice alignment with ticks\n                })\n                .classed(\"hidden\", !this._config.borders.left?.visible);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GridConfig.html":{"url":"classes/GridConfig.html","title":"class - GridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/grid-config.ts\n        \n\n            \n                Description\n            \n            \n                See IGridConfig \n\n            \n\n\n            \n                Implements\n            \n            \n                            IGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:16\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:28\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:14\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/grid-config.ts:11\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IAllAround, IBorderConfig, IDimensionConfig, IGridConfig } from \"../types\";\n\nimport { DimensionConfig } from \"./dimension-config\";\n\n/** See {@link IGridConfig} */\nexport class GridConfig implements IGridConfig {\n\n    // We should avoid this kind of option in future versions of GridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    /** See {@link IGridConfig#interactive} */\n    public interactive: boolean = true;\n\n    /** See {@link IGridConfig#dimension} */\n    public dimension: IDimensionConfig = new DimensionConfig();\n    /** See {@link IGridConfig#borders} */\n    public borders: IAllAround = {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    };\n    /** See {@link IGridConfig#cursor} */\n    public cursor = \"crosshair\";\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HorizontalBarAccessors.html":{"url":"classes/HorizontalBarAccessors.html","title":"class - HorizontalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HorizontalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/horizontal-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/horizontal-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class HorizontalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.end(d, i, s, ds),\n            startY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessY: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAccessors.html":{"url":"interfaces/IAccessors.html","title":"interface - IAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Accessors describe the data for the consumers.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Data point level accessors for defining what part of a datum is used for visualizations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISeriesAccessors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAllAround.html":{"url":"interfaces/IAllAround.html","title":"interface - IAllAround","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAllAround\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining aspects of the top, right, bottom, and left sides of a grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the bottom of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the left side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the right side of an entity \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Object defining aspects of the top of an entity \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaAccessors.html":{"url":"interfaces/IAreaAccessors.html","title":"interface - IAreaAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IAreaDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IAreaSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAreaSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaDataAccessors.html":{"url":"interfaces/IAreaDataAccessors.html","title":"interface - IAreaDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        absoluteX0\n                                \n                                \n                                        absoluteX1\n                                \n                                \n                                        absoluteY0\n                                \n                                \n                                        absoluteY1\n                                \n                                \n                                        x\n                                \n                                \n                                        x0\n                                \n                                \n                                        x1\n                                \n                                \n                                        y\n                                \n                                \n                                        y0\n                                \n                                \n                                        y1\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX0\n                                    \n                                \n                                \n                                    \n                                        absoluteX0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteX1\n                                    \n                                \n                                \n                                    \n                                        absoluteX1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY0\n                                    \n                                \n                                \n                                    \n                                        absoluteY0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        absoluteY1\n                                    \n                                \n                                \n                                    \n                                        absoluteY1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x0\n                                    \n                                \n                                \n                                    \n                                        x0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x1\n                                    \n                                \n                                \n                                    \n                                        x1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y0\n                                    \n                                \n                                \n                                    \n                                        y0:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y1\n                                    \n                                \n                                \n                                    \n                                        y1:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaRendererConfig.html":{"url":"interfaces/IAreaRendererConfig.html","title":"interface - IAreaRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the area renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaClass\n                                \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaClass\n                                    \n                                \n                                \n                                    \n                                        areaClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the areas \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the area boundaries \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The width of the area path's stroke in pixels. Default is 1. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAreaSeriesAccessors.html":{"url":"interfaces/IAreaSeriesAccessors.html","title":"interface - IAreaSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAreaSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/area/area-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IAreaDataAccessors extends IDataAccessors {\n    x: DataAccessor;\n    x0: DataAccessor;\n    x1: DataAccessor;\n    absoluteX0: DataAccessor;\n    absoluteX1: DataAccessor;\n    y: DataAccessor;\n    y0: DataAccessor;\n    y1: DataAccessor;\n    absoluteY0: DataAccessor;\n    absoluteY1: DataAccessor;\n}\n\nexport interface IAreaSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IAreaAccessors extends IAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n}\n\nexport class AreaAccessors implements IAreaAccessors {\n    data: IAreaDataAccessors;\n    series: IAreaSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        this.data = {\n            x: (d, i, ds, s) => d.x,\n            x0: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            x1: (d, i, ds, s) => this.data.x(d, i, ds, s),\n            y: (d, i, ds, s) => d.y,\n            y0: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            y1: (d, i, ds, s) => this.data.y(d, i, ds, s),\n            absoluteX0: (d, i, ds, s) => d[\"__stack_x\"]?.start ?? this.data.x0(d, i, ds, s),\n            absoluteX1: (d, i, ds, s) => d[\"__stack_x\"]?.end ?? this.data.x1(d, i, ds, s),\n            absoluteY0: (d, i, ds, s) => d[\"__stack_y\"]?.start ?? this.data.y0(d, i, ds, s),\n            absoluteY1: (d, i, ds, s) => d[\"__stack_y\"]?.end ?? this.data.y1(d, i, ds, s),\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxis.html":{"url":"interfaces/IAxis.html","title":"interface - IAxis","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxis\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a d3 axis entity\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        group\n                                \n                                \n                                        labelGroup\n                                \n                                \n                                        tickGroup\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:     Axis\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Axis\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                    \n                                \n                                \n                                    \n                                        group:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelGroup\n                                    \n                                \n                                \n                                    \n                                        labelGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis label \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickGroup\n                                    \n                                \n                                \n                                    \n                                        tickGroup:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The d3 group element for the axis ticks \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAxisConfig.html":{"url":"interfaces/IAxisConfig.html","title":"interface - IAxisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IAxisConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of a grid axis \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        approximateTicks\n                                \n                                \n                                        fit\n                                \n                                \n                                        gridTicks\n                                \n                                \n                                        padding\n                                \n                                \n                                        tickLabel\n                                \n                                \n                                        tickSize\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        approximateTicks\n                                    \n                                \n                                \n                                    \n                                        approximateTicks:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The approximate number of ticks to display \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fit\n                                    \n                                \n                                \n                                    \n                                        fit:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether to fit the grid margins to the axis labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gridTicks\n                                    \n                                \n                                \n                                    \n                                        gridTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether grid ticks should be displayed \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets the axis padding \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickLabel\n                                    \n                                \n                                \n                                    \n                                        tickLabel:         ITickLabelConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ITickLabelConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the tick labels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickSize\n                                    \n                                \n                                \n                                    \n                                        tickSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The length of the ticks in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the axis should be visible \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBandScale.html":{"url":"interfaces/IBandScale.html","title":"interface - IBandScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBandScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    bandwidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            bandwidth\n                        \n                        \n                    \n                \n            \n            \n                \nbandwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarAccessors.html":{"url":"interfaces/IBarAccessors.html","title":"interface - IBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IBarDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IBarDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarChartConfig.html":{"url":"interfaces/IBarChartConfig.html","title":"interface - IBarChartConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarChartConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for bar charts\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        grouped\n                                \n                                \n                                            Optional\n                                        horizontal\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grouped\n                                    \n                                \n                                \n                                    \n                                        grouped:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontal\n                                    \n                                \n                                \n                                    \n                                        horizontal:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarDataAccessors.html":{"url":"interfaces/IBarDataAccessors.html","title":"interface - IBarDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRectangleDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        cssClass\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                                \n                                        start\n                                \n                                \n                                            Optional\n                                        thickness\n                                \n                                \n                                            Optional\n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cssClass\n                                    \n                                \n                                \n                                    \n                                        cssClass:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, IDataSeries } from \"../../../core/common/types\";\nimport { IRectangleDataAccessors, IRectangleSeriesAccessors, RectangleAccessors } from \"../../accessors/rectangle-accessors\";\n\nexport interface IBarDataAccessors extends IRectangleDataAccessors {\n    category: DataAccessor;\n    start: DataAccessor;\n    end: DataAccessor;\n    thickness?: DataAccessor;\n    value?: DataAccessor;\n    color?: DataAccessor;\n    marker?: DataAccessor;\n    cssClass?: DataAccessor;\n}\n\nexport interface IBarAccessors extends IAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport abstract class BarAccessors extends RectangleAccessors implements IBarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data = {\n            value: (data: any) => data.value,\n            category: (d, i, series: any[], dataSeries: IDataSeries) => {\n                if (d.category) {\n                    return d.category;\n                }\n\n                if (this.series.category) {\n                    return this.series.category(dataSeries.id, dataSeries);\n                }\n\n                return null;\n            },\n            start: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.start;\n                }\n                if (typeof data.start !== \"undefined\") {\n                    return data.start;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.min(0, value);\n                }\n\n                return null;\n            },\n            end: (data: any, index: number, series: any[], dataSeries: IDataSeries) => {\n                if (data.__bar) {\n                    return data.__bar.end;\n                }\n                if (typeof data.end !== \"undefined\") {\n                    return data.end;\n                }\n\n                const value = this.getSingleValue(data, index, series, dataSeries);\n                if (Number.isFinite(value)) {\n                    return Math.max(0, value);\n                }\n\n                return null;\n            },\n        };\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n            category: (seriesId, series) => series.name || series.id,\n        };\n\n    }\n\n    private getSingleValue(data: any, index: number, series: any[], dataSeries: IDataSeries) {\n        let value: any;\n        if (this.data.value) {\n            // try to use the value accessor to retrieve value\n            value = this.data.value(data, index, series, dataSeries);\n            // if it fails to retrieve a valid value, then we consider the data point to be a primitive value that is returned directly\n            if (typeof value === \"undefined\") {\n                value = data;\n            }\n        }\n        return value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBarRendererConfig.html":{"url":"interfaces/IBarRendererConfig.html","title":"interface - IBarRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBarRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the bar renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        barClass\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        highlightStrategy\n                                \n                                \n                                            Optional\n                                        minOrdinalSize\n                                \n                                \n                                            Optional\n                                        padding\n                                \n                                \n                                            Optional\n                                        pointerEvents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        barClass\n                                    \n                                \n                                \n                                    \n                                        barClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the class name to apply custom styles to the bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the mouse cursor style to use when hovering over individual bars \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightStrategy\n                                    \n                                \n                                \n                                    \n                                        highlightStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minOrdinalSize\n                                    \n                                \n                                \n                                    \n                                        minOrdinalSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the padding on both sides of each bar \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointerEvents\n                                    \n                                \n                                \n                                    \n                                        pointerEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables pointer events on the bars \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorderConfig.html":{"url":"interfaces/IBorderConfig.html","title":"interface - IBorderConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorderConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        className\n                                \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        visible\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        className\n                                    \n                                \n                                \n                                    \n                                        className:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class name \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the border should be visible \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The thickness of the border \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBorders.html":{"url":"interfaces/IBorders.html","title":"interface - IBorders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IBorders\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n\n            \n\n            \n                Extends\n            \n            \n                        IAllAround\n            \n\n\n\n\n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChart.html":{"url":"interfaces/IChart.html","title":"interface - IChart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        target\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    addPlugin\n                                \n                                \n                                    build\n                                \n                                \n                                    destroy\n                                \n                                \n                                    getDataManager\n                                \n                                \n                                    getEventBus\n                                \n                                \n                                    getGrid\n                                \n                                \n                                    getRenderEngine\n                                \n                                \n                                        Optional\n                                    removePlugin\n                                \n                                \n                                    setSeriesStates\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addPlugin\n                        \n                        \n                    \n                \n            \n            \n                \naddPlugin(plugin: IChartPlugin)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plugin\n                                    \n                                                IChartPlugin\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild(element: HTMLElement)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    element\n                                    \n                                            HTMLElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataManager\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataManager()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DataManager\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEventBus\n                        \n                        \n                    \n                \n            \n            \n                \ngetEventBus()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     EventBus\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getGrid\n                        \n                        \n                    \n                \n            \n            \n                \ngetGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IGrid\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRenderEngine\n                        \n                        \n                    \n                \n            \n            \n                \ngetRenderEngine()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     RenderEngine\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Optional\n                            removePlugin\n                        \n                        \n                    \n                \n            \n            \n                \nremovePlugin(classRef)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \nsetSeriesStates(renderStateData: IRenderStateData[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderStateData\n                                    \n                                                IRenderStateData[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(seriesSet: IChartSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                                IChartSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                    \n                                \n                                \n                                    \n                                        target:         D3Selection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         D3Selection\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssist.html":{"url":"interfaces/IChartAssist.html","title":"interface - IChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing an assistant that aids in chart usage\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getHighlightedValue\n                                \n                                \n                                    getVisibleSeriesWithLegend\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:44\n                \n            \n\n\n            \n                \n                    Gets the current highlighted value for the specified series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The chart series to get the highlighted value for\n\n                                    \n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key for the datapoint value scale\n\n                                    \n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The name of the formatter if a custom formatter name is set on the scale\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | undefined\n\n                    \n                    \n                        The highlighted value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:49\n                \n            \n\n\n            \n                \n                    Returns visible series that are represented by a legend\n\n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/types.ts:33\n                \n            \n\n\n            \n                \n                    Updates the series set for the chart assist's associated chart\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The updated set of series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistEvent.html":{"url":"interfaces/IChartAssistEvent.html","title":"interface - IChartAssistEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for chart assist events \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        payload\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ChartAssistEventType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChartAssistEventType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartAssistSeries.html":{"url":"interfaces/IChartAssistSeries.html","title":"interface - IChartAssistSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartAssistSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IChartSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        preprocess\n                                \n                                \n                                            Optional\n                                        renderState\n                                \n                                \n                                            Optional\n                                        showInLegend\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        preprocess\n                                    \n                                \n                                \n                                    \n                                        preprocess:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        renderState\n                                    \n                                \n                                \n                                    \n                                        renderState:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInLegend\n                                    \n                                \n                                \n                                    \n                                        showInLegend:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartEvent.html":{"url":"interfaces/IChartEvent.html","title":"interface - IChartEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        broadcast\n                                \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        broadcast\n                                    \n                                \n                                \n                                    \n                                        broadcast:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartMarker.html":{"url":"interfaces/IChartMarker.html","title":"interface - IChartMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getSvg\n                                \n                                \n                                    setColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \ngetSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \nsetColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPalette.html":{"url":"interfaces/IChartPalette.html","title":"interface - IChartPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPalette\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        backgroundColors\n                                \n                                \n                                        standardColors\n                                \n                                \n                                        textColors\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColors\n                                    \n                                \n                                \n                                    \n                                        backgroundColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        standardColors\n                                    \n                                \n                                \n                                    \n                                        standardColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textColors\n                                    \n                                \n                                \n                                    \n                                        textColors:         IValueProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IValueProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartPlugin.html":{"url":"interfaces/IChartPlugin.html","title":"interface - IChartPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface defining a chart plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chart\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    destroy\n                                \n                                \n                                    initialize\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \ndestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:221\n                \n            \n\n\n            \n                \n                    Perform plugin cleanup - Invoked automatically on chart destruction \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \ninitialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:212\n                \n            \n\n\n            \n                \n                    Initialize the plugin - Invoked automatically on chart initialization \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:215\n                \n            \n\n\n            \n                \n                    Update the plugin - Invoked automatically on chart update \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:218\n                \n            \n\n\n            \n                \n                    Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated chart - set automatically on chart initialization\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartSeries.html":{"url":"interfaces/IChartSeries.html","title":"interface - IChartSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                The set of elements required for a chart to visualize some data\n\n            \n\n            \n                Extends\n            \n            \n                        IDataSeries\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        renderer\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        renderer\n                                    \n                                \n                                \n                                    \n                                        renderer:         Renderer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Renderer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The renderer to be used for visualizing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about how chart data should conform to the drawable area.\nGrids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\nuses 'x' and 'y' as the keys for its scales.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IChartViewStatusEventPayload.html":{"url":"interfaces/IChartViewStatusEventPayload.html","title":"interface - IChartViewStatusEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IChartViewStatusEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for the chart's visibility status in relation to the nearest scrollable parent\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isChartInView\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isChartInView\n                                    \n                                \n                                \n                                    \n                                        isChartInView:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates whether at least one pixel of the chart's parent element has\nintersected with the visible area of its nearest scrollable parent\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataAccessors.html":{"url":"interfaces/IDataAccessors.html","title":"interface - IDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:122\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPoint.html":{"url":"interfaces/IDataPoint.html","title":"interface - IDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        index\n                                \n                                \n                                            Optional\n                                        position\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data index \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                    \n                                \n                                \n                                    \n                                        position:         IPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Position \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataPointsPayload.html":{"url":"interfaces/IDataPointsPayload.html","title":"interface - IDataPointsPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataPointsPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Collection of one or more data points as a dictionary of seriesId to IDataPoint\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        IDataPoint\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:301\n                            \n                        \n                \n                    \n                        Series id as key to highlighted data point \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDataSeries.html":{"url":"interfaces/IDataSeries.html","title":"interface - IDataSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDataSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A set of data to visualize on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        accessors\n                                \n                                \n                                        data\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:153\n                            \n                        \n                \n                    \n                        Allow any properties to be stored on this object to facilitate the transfer of data from APIs \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessors\n                                    \n                                \n                                \n                                    \n                                        accessors:     A\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     A\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors describing the data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     D[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     D[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\nrenderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\ndata point properties directly, but usually through accessors.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The series identifier \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensionConfig.html":{"url":"interfaces/IDimensionConfig.html","title":"interface - IDimensionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration of grid dimensions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        autoHeight\n                                \n                                \n                                        autoWidth\n                                \n                                \n                                        margin\n                                \n                                \n                                        padding\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    height\n                                \n                                \n                                    height\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerHeight\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    outerWidth\n                                \n                                \n                                    width\n                                \n                                \n                                    width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:63\n                \n            \n\n\n            \n                \n                    Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid height\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            height\n                        \n                        \n                    \n                \n            \n            \n                \nheight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:69\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:91\n                \n            \n\n\n            \n                \n                    Sets the grid's height by subtracting the grid's vertical margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new height plus the grid's vertical margins     *\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerHeight\n                        \n                        \n                    \n                \n            \n            \n                \nouterHeight()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:97\n                \n            \n\n\n            \n                \n                    Gets the grid's height -- including vertical margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's height plus vertical margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:77\n                \n            \n\n\n            \n                \n                    Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\nNote: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new width plus the grid's horizontal margins\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            outerWidth\n                        \n                        \n                    \n                \n            \n            \n                \nouterWidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:83\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- including horizontal margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width plus horizontal margins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:50\n                \n            \n\n\n            \n                \n                    Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid width\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDimensionConfig\n\n                    \n                    \n                        The resulting dimension config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            width\n                        \n                        \n                    \n                \n            \n            \n                \nwidth()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:56\n                \n            \n\n\n            \n                \n                    Gets the grid's width -- excluding margins.\n\n\n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The grid's width\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoHeight\n                                    \n                                \n                                \n                                    \n                                        autoHeight:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its height \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoWidth\n                                    \n                                \n                                \n                                    \n                                        autoWidth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Sets whether the grid uses the chart's container to determine its width \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        margin\n                                    \n                                \n                                \n                                    \n                                        margin:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left margin sizes in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                    \n                                \n                                \n                                    \n                                        padding:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The top, right, bottom, and left padding sizes in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDimensions.html":{"url":"interfaces/IDimensions.html","title":"interface - IDimensions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IDimensions\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The width and height of an grid\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IElementPosition.html":{"url":"interfaces/IElementPosition.html","title":"interface - IElementPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IElementPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for defining an element's position \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        top\n                                \n                                \n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnhancedLineCapConfig.html":{"url":"interfaces/IEnhancedLineCapConfig.html","title":"interface - IEnhancedLineCapConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnhancedLineCapConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the enhanced line caps \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        fill\n                                \n                                \n                                            Optional\n                                        radius\n                                \n                                \n                                            Optional\n                                        stroke\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fill\n                                    \n                                \n                                \n                                    \n                                        fill:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the fill color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the radius in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stroke\n                                    \n                                \n                                \n                                    \n                                        stroke:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke color \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke width in pixels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFormatters.html":{"url":"interfaces/IFormatters.html","title":"interface - IFormatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFormatters\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for scale formatters \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        tick\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [p: string]:        Formatter | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:16\n                            \n                        \n                \n                    \n                        Additional formatters \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        tick\n                                    \n                                \n                                \n                                    \n                                        tick:         Formatter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Formatter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Formatter for tick labels \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGrid.html":{"url":"interfaces/IGrid.html","title":"interface - IGrid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGrid\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                The basic interface for a grid's dimensions, scaling, interaction, and borders\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scales\n                                \n                                \n                                            Optional\n                                        updateChartDimensionsSubject\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    build\n                                \n                                \n                                    buildPlugins\n                                \n                                \n                                    config\n                                \n                                \n                                    config\n                                \n                                \n                                    getInteractiveArea\n                                \n                                \n                                    getLasagna\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    target\n                                \n                                \n                                    update\n                                \n                                \n                                    updateDimensions\n                                \n                                \n                                    updateRanges\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            build\n                        \n                        \n                    \n                \n            \n            \n                \nbuild()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:258\n                \n            \n\n\n            \n                \n                    Builds the grid's rendered elements\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildPlugins\n                        \n                        \n                    \n                \n            \n            \n                \nbuildPlugins(chart: IChart)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:287\n                \n            \n\n\n            \n                \n                    Builds the grid's plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chart\n                                    \n                                                IChart\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartPlugin[]\n\n                    \n                    \n                        The set of generated plugins\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:243\n                \n            \n\n\n            \n                \n                    getter for the grid configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGridConfig\n\n                    \n                    \n                        The grid configuration\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig(config: IGridConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:251\n                \n            \n\n\n            \n                \n                    setter for the grid configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                IGridConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInteractiveArea\n                        \n                        \n                    \n                \n            \n            \n                \ngetInteractiveArea()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:220\n                \n            \n\n\n            \n                \n                    Provides access to the grid's interactive area\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's interactive area\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLasagna\n                        \n                        \n                    \n                \n            \n            \n                \ngetLasagna()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:213\n                \n            \n\n\n            \n                \n                    Provides access to the grid's layering mechanism\n\n\n                    \n                    \n                    \n                        Returns :     Lasagna\n\n                    \n                    \n                        The grid's layering mechanism\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:227\n                \n            \n\n\n            \n                \n                    getter for the grid's target d3 selection\n\n\n                    \n                    \n                    \n                        Returns :         D3Selection\n\n                    \n                    \n                        The grid's target d3 selection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:235\n                \n            \n\n\n            \n                \n                    setter for the grid's target d3 selection\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The grid's new target d3 selection\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            target\n                        \n                        \n                    \n                \n            \n            \n                \ntarget(target: D3Selection)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         D3Selection | IGrid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:265\n                \n            \n\n\n            \n                \n                    Updates the grid's rendered elements based on the current scales and configuration\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDimensions(dimensions: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:273\n                \n            \n\n\n            \n                \n                    Updates the grid's dimensions as specified\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dimensions\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new grid dimensions\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateRanges\n                        \n                        \n                    \n                \n            \n            \n                \nupdateRanges()\n                \n            \n\n\n            \n                \n                    Defined in src/core/grid/types.ts:280\n                \n            \n\n\n            \n                \n                    Updates the ranges on the grid's scales based on the grid's configured dimensions\n\n\n                    \n                    \n                    \n                        Returns :         IGrid\n\n                    \n                    \n                        The grid instance\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         ScalesIndex\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScalesIndex\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The grid scales\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateChartDimensionsSubject\n                                    \n                                \n                                \n                                    \n                                        updateChartDimensionsSubject:     Subject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Subject\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subject for indicating that the chart's dimensions should be updated\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGridConfig.html":{"url":"interfaces/IGridConfig.html","title":"interface - IGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Basic grid configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        borders\n                                \n                                \n                                        cursor\n                                \n                                \n                                        dimension\n                                \n                                \n                                        interactive\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        borders\n                                    \n                                \n                                \n                                    \n                                        borders:     IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's borders \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    String indicating the desired cursor style \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension\n                                    \n                                \n                                \n                                    \n                                        dimension:         IDimensionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDimensionConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration for the grid's dimensions \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Boolean indicating whether the grid will respond to mouse events \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHasInnerScale.html":{"url":"interfaces/IHasInnerScale.html","title":"interface - IHasInnerScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHasInnerScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IScale\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        innerScale\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        innerScale\n                                    \n                                \n                                \n                                    \n                                        innerScale:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IHighlightStrategy.html":{"url":"interfaces/IHighlightStrategy.html","title":"interface - IHighlightStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IHighlightStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    draw\n                                \n                                \n                                    getDataPointIndex\n                                \n                                \n                                    highlightDataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \ndraw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \ngetDataPointIndex(renderer: T, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \nhighlightDataPoint(renderer: T, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/types.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionCoordinatesPayload.html":{"url":"interfaces/IInteractionCoordinatesPayload.html","title":"interface - IInteractionCoordinatesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionCoordinatesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_COORDINATES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coordinates\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinates\n                                    \n                                \n                                \n                                    \n                                        coordinates:     ICoordinates\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICoordinates\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The coordinates of an interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointEvent.html":{"url":"interfaces/IInteractionDataPointEvent.html","title":"interface - IInteractionDataPointEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding a single data point\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoint\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoint\n                                    \n                                \n                                \n                                    \n                                        dataPoint:         IDataPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionDataPointsEvent.html":{"url":"interfaces/IInteractionDataPointsEvent.html","title":"interface - IInteractionDataPointsEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionDataPointsEvent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events regarding one or more data points\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        dataPoints\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataPoints\n                                    \n                                \n                                \n                                    \n                                        dataPoints:         IDataPointsPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataPointsPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionPayload.html":{"url":"interfaces/IInteractionPayload.html","title":"interface - IInteractionPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for interaction events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValues.html":{"url":"interfaces/IInteractionValues.html","title":"interface - IInteractionValues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValues\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleKey: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/types.ts:6\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInteractionValuesPayload.html":{"url":"interfaces/IInteractionValuesPayload.html","title":"interface - IInteractionValuesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInteractionValuesPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for an INTERACTION_VALUES_EVENT\n\n            \n\n            \n                Extends\n            \n            \n                        IInteractionPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:         IInteractionValues\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IInteractionValues\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The values of the interaction \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ICoordinates, IInteractionPayload } from \"../common/types\";\n\n/**\n * Interface used for interaction values with scaleKey as key to a dictionary of scaleId to value. Typical scale keys are \"x\" and \"y\"\n */\nexport interface IInteractionValues {\n    [scaleKey: string]: { [scaleId: string]: any };\n}\n\n/**\n * Payload for an INTERACTION_VALUES_EVENT\n */\nexport interface IInteractionValuesPayload extends IInteractionPayload {\n    /** The values of the interaction */\n    values: IInteractionValues;\n}\n\n/**\n * Payload for an INTERACTION_COORDINATES_EVENT\n */\nexport interface IInteractionCoordinatesPayload extends IInteractionPayload {\n    /** The coordinates of an interaction */\n    coordinates: ICoordinates;\n}\n\n/** Interface for defining an element's position */\nexport interface IElementPosition {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineAccessors.html":{"url":"interfaces/ILineAccessors.html","title":"interface - ILineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ILineDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ILineSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ILineSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineDataAccessors.html":{"url":"interfaces/ILineDataAccessors.html","title":"interface - ILineDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IXYDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        defined\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defined\n                                    \n                                \n                                \n                                    \n                                        defined:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineRendererConfig.html":{"url":"interfaces/ILineRendererConfig.html","title":"interface - ILineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for the line renderer \n\n            \n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        curveType\n                                \n                                \n                                            Optional\n                                        enhancedLineCap\n                                \n                                \n                                            Optional\n                                        interactionStrategy\n                                \n                                \n                                            Optional\n                                        markerInteraction\n                                \n                                \n                                            Optional\n                                        strokeLinecap\n                                \n                                \n                                            Optional\n                                        strokeStyle\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                                \n                                            Optional\n                                        useEnhancedLineCaps\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        curveType\n                                    \n                                \n                                \n                                    \n                                        curveType:     CurveFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CurveFactory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the d3 curve algorithm to be used for drawing the lines \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enhancedLineCap\n                                    \n                                \n                                \n                                    \n                                        enhancedLineCap:         IEnhancedLineCapConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnhancedLineCapConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionStrategy\n                                    \n                                \n                                \n                                    \n                                        interactionStrategy:     IHighlightStrategy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IHighlightStrategy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerInteraction\n                                    \n                                \n                                \n                                    \n                                        markerInteraction:         IMarkerInteractionConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IMarkerInteractionConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configure the interaction behavior for markers \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeLinecap\n                                    \n                                \n                                \n                                    \n                                        strokeLinecap:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-linecap of the line, e.g. \"round\" \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeStyle\n                                    \n                                \n                                \n                                    \n                                        strokeStyle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set the width of the line in pixels \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useEnhancedLineCaps\n                                    \n                                \n                                \n                                    \n                                        useEnhancedLineCaps:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Set whether enhanced line caps should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILineSeriesAccessors.html":{"url":"interfaces/ILineSeriesAccessors.html","title":"interface - ILineSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILineSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Series accessors used in LineAccessors.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:16\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Color of the series \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Marker for the series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILinearScales.html":{"url":"interfaces/ILinearScales.html","title":"interface - ILinearScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ILinearScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         ScaleLinear\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScaleLinear\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMarkerInteractionConfig.html":{"url":"interfaces/IMarkerInteractionConfig.html","title":"interface - IMarkerInteractionConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMarkerInteractionConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n            \n                Description\n            \n            \n                The configuration interface for marker interaction \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        clickable\n                                \n                                \n                                        enabled\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clickable\n                                    \n                                \n                                \n                                    \n                                        clickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enables the pointer style mouse cursor when data point markers are hovered \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Enables mouse events on data point markers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INoopAccessors.html":{"url":"interfaces/INoopAccessors.html","title":"interface - INoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  INoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series level accessors - e.g. for colors, markers, etc. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPopoverPluginConfig.html":{"url":"interfaces/IPopoverPluginConfig.html","title":"interface - IPopoverPluginConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPopoverPluginConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/chart-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for the popover plugin \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        eventStreamId\n                                \n                                \n                                            Optional\n                                        interactionType\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        eventStreamId\n                                    \n                                \n                                \n                                    \n                                        eventStreamId:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the event stream the plugin will respond to \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionType\n                                    \n                                \n                                \n                                    \n                                        interactionType:         InteractionType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InteractionType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The type of interaction that will trigger the showing and hiding of the popovers \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_DATA_POINT_EVENT, INTERACTION_DATA_POINTS_EVENT } from \"../../constants\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IChartEvent, IDataPoint, IDataPointsPayload, InteractionType } from \"../common/types\";\n\nimport { IElementPosition } from \"./types\";\n\n/** Configuration for the popover plugin */\nexport interface IPopoverPluginConfig {\n    /** ID of the event stream the plugin will respond to */\n    eventStreamId?: typeof INTERACTION_DATA_POINTS_EVENT | typeof INTERACTION_DATA_POINT_EVENT;\n    /** The type of interaction that will trigger the showing and hiding of the popovers */\n    interactionType?: InteractionType;\n}\n\n/**\n * This plugin listens for the INTERACTION_DATA_POINTS_EVENT by default and transforms received data into\n * popover inputs. The listened event can be configured using the 'config.eventStreamId' property.\n * The actual popover is handled by the ChartPopoverComponent.\n */\nexport class ChartPopoverPlugin extends ChartPlugin {\n    /** Info about the data point(s) received in the most recent interaction event */\n    public dataPoints: IDataPointsPayload;\n    /** Emits the popover's target position */\n    public updatePositionSubject = new Subject();\n    /** Emits an event indicating the popover should open */\n    public openPopoverSubject = new Subject();\n    /** Emits an event indicating the popover should close */\n    public closePopoverSubject = new Subject();\n    /** The target position of the popover */\n    public popoverTargetPosition: IElementPosition = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    };\n    /** The default plugin configuration */\n    public DEFAULT_CONFIG: IPopoverPluginConfig = {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    };\n\n    private isOpen = false;\n    private destroy$ = new Subject();\n\n    constructor(public config: IPopoverPluginConfig = {}) {\n        super();\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(this.config.eventStreamId as string).pipe(\n            takeUntil(this.destroy$)\n        ).subscribe((event: IChartEvent) => {\n            if (event.data.interactionType === this.config.interactionType) {\n                // here we handle data either of type IInteractionDataPointsEvent or IInteractionDataPointEvent\n                const dataPoints: IDataPointsPayload = event.data.dataPoints ?? { [event.data.dataPoint.seriesId]: event.data.dataPoint };\n                this.processDataPoints(dataPoints);\n            }\n        });\n    }\n\n    public destroy(): void {\n        if (this.updatePositionSubject) {\n            this.updatePositionSubject.complete();\n        }\n        if (this.openPopoverSubject) {\n            this.openPopoverSubject.complete();\n        }\n        if (this.closePopoverSubject) {\n            this.closePopoverSubject.complete();\n        }\n        if (this.destroy$) {\n            this.destroy$.next();\n            this.destroy$.complete();\n        }\n    }\n\n    protected getAbsolutePosition(valuesArray: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valuesArray.map(d => d.position.x));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left + dataPointsLeft;\n        const top = chartElement.offsetTop + this.chart.getGrid().config().dimension.margin.top;\n        // area for popovers is enlarged to cover the whole chart (top to bottom),\n        // so that we avoid collision of chart visualization and popover (by UX request)\n        return {\n            top: top,\n            left: left,\n            height: chartElement.offsetHeight,\n            width: Math.max(...valuesArray.map(d => d.position.x + (d.position.width || 0))) - dataPointsLeft,\n        };\n    }\n\n    private processDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position);\n        const validDataPointsValues = values(validDataPoints);\n        if (validDataPointsValues.length > 0) {\n            this.popoverTargetPosition = this.getAbsolutePosition(validDataPointsValues);\n            this.dataPoints = validDataPoints;\n            // timeout is needed in order to successfully open popover on initial hover over the chart\n            setTimeout(() => {\n                this.updatePositionSubject.next(this.popoverTargetPosition);\n                if (!this.isOpen) {\n                    this.isOpen = true;\n                    this.openPopoverSubject.next();\n                }\n            });\n\n        } else {\n            // timeout is needed for symmetry of timing with above timeout for opening the popover\n            setTimeout(() => {\n                this.closePopoverSubject.next();\n                this.isOpen = false;\n            });\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPosition.html":{"url":"interfaces/IPosition.html","title":"interface - IPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Position on the chart\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                            Optional\n                                        width\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialAccessors.html":{"url":"interfaces/IRadialAccessors.html","title":"interface - IRadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRadialDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRadialSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRadialSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialDataAccessors.html":{"url":"interfaces/IRadialDataAccessors.html","title":"interface - IRadialDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:6\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialRendererConfig.html":{"url":"interfaces/IRadialRendererConfig.html","title":"interface - IRadialRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IRendererConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        annularGrowth\n                                \n                                \n                                            Optional\n                                        annularPadding\n                                \n                                \n                                            Optional\n                                        annularWidth\n                                \n                                \n                                            Optional\n                                        cursor\n                                \n                                \n                                            Optional\n                                        enableDataPointHighlighting\n                                \n                                \n                                            Optional\n                                        enableSeriesHighlighting\n                                \n                                \n                                            Optional\n                                        maxThickness\n                                \n                                \n                                            Optional\n                                        strokeWidth\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        annularGrowth\n                                    \n                                \n                                \n                                    \n                                        annularGrowth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularPadding\n                                    \n                                \n                                \n                                    \n                                        annularPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        annularWidth\n                                    \n                                \n                                \n                                    \n                                        annularWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableDataPointHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableDataPointHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSeriesHighlighting\n                                    \n                                \n                                \n                                    \n                                        enableSeriesHighlighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxThickness\n                                    \n                                \n                                \n                                    \n                                        maxThickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    annularGrowth is a percentage value to define annular width automatically.\nIt will grow until it reaches maxThickness.\nSet one to 0 to use annularWidth constant value instead\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strokeWidth\n                                    \n                                \n                                \n                                    \n                                        strokeWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialScales.html":{"url":"interfaces/IRadialScales.html","title":"interface - IRadialScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        r\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        r\n                                    \n                                \n                                \n                                    \n                                        r:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRadialSeriesAccessors.html":{"url":"interfaces/IRadialSeriesAccessors.html","title":"interface - IRadialSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRadialSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:12\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleAccessors.html":{"url":"interfaces/IRectangleAccessors.html","title":"interface - IRectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IRectangleDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         IRectangleSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRectangleSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleDataAccessors.html":{"url":"interfaces/IRectangleDataAccessors.html","title":"interface - IRectangleDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        endX\n                                \n                                \n                                            Optional\n                                        endY\n                                \n                                \n                                            Optional\n                                        startX\n                                \n                                \n                                            Optional\n                                        startY\n                                \n                                \n                                            Optional\n                                        thicknessX\n                                \n                                \n                                            Optional\n                                        thicknessY\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endX\n                                    \n                                \n                                \n                                    \n                                        endX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endY\n                                    \n                                \n                                \n                                    \n                                        endY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startX\n                                    \n                                \n                                \n                                    \n                                        startX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startY\n                                    \n                                \n                                \n                                    \n                                        startY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessX\n                                    \n                                \n                                \n                                    \n                                        thicknessX:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thicknessY\n                                    \n                                \n                                \n                                    \n                                        thicknessY:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRectangleSeriesAccessors.html":{"url":"interfaces/IRectangleSeriesAccessors.html","title":"interface - IRectangleSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRectangleSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        color\n                                \n                                \n                                            Optional\n                                        marker\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        marker\n                                    \n                                \n                                \n                                    \n                                        marker:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderContainers.html":{"url":"interfaces/IRenderContainers.html","title":"interface - IRenderContainers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderContainers\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of render container name to render container\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [name: string]:        D3Selection\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:238\n                            \n                        \n                \n                    \n                        Container name as key to render container \n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderSeries.html":{"url":"interfaces/IRenderSeries.html","title":"interface - IRenderSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderSeries\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        containers\n                                \n                                \n                                        dataSeries\n                                \n                                \n                                        scales\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        containers\n                                    \n                                \n                                \n                                    \n                                        containers:         IRenderContainers\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IRenderContainers\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataSeries\n                                    \n                                \n                                \n                                    \n                                        dataSeries:         IDataSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDataSeries\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scales\n                                    \n                                \n                                \n                                    \n                                        scales:         Scales\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Scales\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CurveFactory } from \"d3-shape\";\nimport { Subject } from \"rxjs\";\n\nimport { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"../core/common/types\";\n\nimport { IRectangleAccessors } from \"./accessors/rectangle-accessors\";\nimport { BarRenderer } from \"./bar/bar-renderer\";\nimport { ILineAccessors } from \"./line/line-accessors\";\nimport { LineRenderer } from \"./line/line-renderer\";\n\nexport enum RenderState {\n    hidden = \"hidden\",\n    deemphasized = \"deemphasized\",\n    emphasized = \"emphasized\",\n    default = \"default\",\n}\n\nexport enum RenderLayerName {\n    background = \"background\",\n    data = \"data\",\n    foreground = \"foreground\",\n}\n\n/** The configuration interface for marker interaction */\nexport interface IMarkerInteractionConfig {\n    /** Enables mouse events on data point markers */\n    enabled: boolean;\n    /** Enables the pointer style mouse cursor when data point markers are hovered */\n    clickable?: boolean;\n}\n\n/** The configuration interface for the enhanced line caps */\nexport interface IEnhancedLineCapConfig {\n    /** Set the stroke color */\n    stroke?: string;\n    /** Set the stroke width in pixels */\n    strokeWidth?: number;\n    /** Set the fill color */\n    fill?: string;\n    /** Set the radius in pixels */\n    radius?: number;\n}\n\n/** The configuration interface for the line renderer */\nexport interface ILineRendererConfig extends IRendererConfig {\n    /** Set the width of the line in pixels */\n    strokeWidth?: number;\n    /** Set the stroke-dasharray of the line, e.g. \"1,1\", \"2,2\", etc. */\n    strokeStyle?: string;\n    /** Set the stroke-linecap of the line, e.g. \"round\" */\n    strokeLinecap?: string;\n    /** Set the d3 curve algorithm to be used for drawing the lines */\n    curveType?: CurveFactory;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. LineSelectSeriesInteractionStrategy */\n    interactionStrategy?: IHighlightStrategy;\n    /** Configure the interaction behavior for markers */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** Set whether enhanced line caps should be displayed */\n    useEnhancedLineCaps?: boolean;\n    /** Optionally configure enhanced line caps. Prerequisite: 'useEnhancedLineCaps' is set to true */\n    enhancedLineCap?: IEnhancedLineCapConfig;\n}\n\n/** The configuration interface for the bar renderer */\nexport interface IBarRendererConfig extends IRendererConfig {\n    /** @deprecated This property has no effect on the renderer */\n    minOrdinalSize?: number;\n    /** Set the padding on both sides of each bar */\n    padding?: number;\n    /** Set the class name to apply custom styles to the bars */\n    barClass?: string;\n    /** Set the strategy for determining the behavior of the chart resulting from user interaction, e.g. BarHighlightStrategy */\n    highlightStrategy?: IHighlightStrategy;\n    /** Set the mouse cursor style to use when hovering over individual bars */\n    cursor?: string;\n    /** Enables pointer events on the bars */\n    pointerEvents?: boolean;\n}\n\n/** The configuration interface for the area renderer */\nexport interface IAreaRendererConfig extends IRendererConfig {\n    /** Set the d3 curve algorithm to be used for drawing the area boundaries */\n    curveType?: CurveFactory;\n    /** Set the class name to apply custom styles to the areas */\n    areaClass?: string;\n    /** Enables the pointer cursor when data point markers are hovered */\n    markerInteraction?: IMarkerInteractionConfig;\n    /** The width of the area path's stroke in pixels. Default is 1. */\n    strokeWidth?: number;\n}\n\nexport interface IRenderSeries {\n    dataSeries: IDataSeries;\n    containers: IRenderContainers;\n    scales: Scales;\n}\n\nexport interface IHighlightStrategy> {\n\n    getDataPointIndex(renderer: T, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number;\n\n    highlightDataPoint(renderer: T, renderSeries: IRenderSeries,\n                       dataPointIndex: number, rendererSubject: Subject): void;\n\n    draw(renderer: T, renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStateData.html":{"url":"interfaces/IRenderStateData.html","title":"interface - IRenderStateData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStateData\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Information about the render state of a series\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        seriesId\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         RenderState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RenderState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Series render state \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRenderStatesIndex.html":{"url":"interfaces/IRenderStatesIndex.html","title":"interface - IRenderStatesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRenderStatesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [seriesId: string]:        ChartAssistRenderStateData\n\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/types.ts:79\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererConfig.html":{"url":"interfaces/IRendererConfig.html","title":"interface - IRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ignoreForDomainCalculation\n                                \n                                \n                                            Optional\n                                        interactive\n                                \n                                \n                                            Optional\n                                        stateStyles\n                                \n                                \n                                            Optional\n                                        transitionDuration\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreForDomainCalculation\n                                    \n                                \n                                \n                                    \n                                        ignoreForDomainCalculation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Excludes series from scale domain calculations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stateStyles\n                                    \n                                \n                                \n                                    \n                                        stateStyles:         Record>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Record>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transitionDuration\n                                    \n                                \n                                \n                                    \n                                        transitionDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRendererEventPayload.html":{"url":"interfaces/IRendererEventPayload.html","title":"interface - IRendererEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRendererEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                Payload for events regarding a data point\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        eventName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Information about the data point \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventName\n                                    \n                                \n                                \n                                    \n                                        eventName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the event \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScale.html":{"url":"interfaces/IScale.html","title":"interface - IScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a scale \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        __domainCalculatedWithTicks\n                                \n                                \n                                        d3Scale\n                                \n                                \n                                            Optional\n                                        domainCalculator\n                                \n                                \n                                        formatters\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        isDomainFixed\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    convert\n                                \n                                \n                                    domain\n                                \n                                \n                                    domain\n                                \n                                \n                                    fixDomain\n                                \n                                \n                                    invert\n                                \n                                \n                                    isContinuous\n                                \n                                \n                                    isDomainValid\n                                \n                                \n                                    range\n                                \n                                \n                                    range\n                                \n                                \n                                    reverse\n                                \n                                \n                                    reversed\n                                \n                                \n                                    reversed\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \nconvert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:81\n                \n            \n\n\n            \n                \n                    Converts a value to its corresponding coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        The coordinate corresponding to the specified value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:110\n                \n            \n\n\n            \n                \n                    Gets the scale's domain\n\n\n                    \n                    \n                    \n                        Returns :     T[]\n\n                    \n                    \n                        The scale's domain\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:117\n                \n            \n\n\n            \n                \n                    Sets the scale's domain\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \nfixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:124\n                \n            \n\n\n            \n                \n                    Shorthand method for setting the domain and isDomainFixed at once\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's fixed domain\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \ninvert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:89\n                \n            \n\n\n            \n                \n                    Converts a coordinate to its corresponding value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The coordinate to be converted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value corresponding to the specified coordinate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \nisContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:66\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is continuous\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is continuous (numeric), false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \nisDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:73\n                \n            \n\n\n            \n                \n                    Determines if the scale's domain is valid\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if the scale's domain is valid, false otherwise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:96\n                \n            \n\n\n            \n                \n                    Gets the scale's range\n\n\n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:103\n                \n            \n\n\n            \n                \n                    Sets the scale's range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scale's new range\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \nreverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:129\n                \n            \n\n\n            \n                \n                    Reverse the scale orientation by toggling the reversed flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:134\n                \n            \n\n\n            \n                \n                    Getter for the reversed flag (see #reverse)\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \nreversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/types.ts:141\n                \n            \n\n\n            \n                \n                    Setter for the reversed flag (see #reverse)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        __domainCalculatedWithTicks\n                                    \n                                \n                                \n                                    \n                                        __domainCalculatedWithTicks:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain has been recalculated with ticks in mind \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d3Scale\n                                    \n                                \n                                \n                                    \n                                        d3Scale:         AxisScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AxisScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domainCalculator\n                                    \n                                \n                                \n                                    \n                                        domainCalculator:         DomainCalculator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DomainCalculator\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Method used to calculate the scale's domain \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formatters\n                                    \n                                \n                                \n                                    \n                                        formatters:         IFormatters\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IFormatters\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scales formatters \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The scale identifier \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDomainFixed\n                                    \n                                \n                                \n                                    \n                                        isDomainFixed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If this flag is enabled, the domain of this scale is not recalculated \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISeriesAccessors.html":{"url":"interfaces/ISeriesAccessors.html","title":"interface - ISeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        SeriesAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:126\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISetDomainEventPayload.html":{"url":"interfaces/ISetDomainEventPayload.html","title":"interface - ISetDomainEventPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISetDomainEventPayload\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [scaleId: string]:    any[]\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/types.ts:327\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorAccessors.html":{"url":"interfaces/ISideIndicatorAccessors.html","title":"interface - ISideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator accessors \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        series\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         ISideIndicatorDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator data \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        series\n                                    \n                                \n                                \n                                    \n                                        series:         ISideIndicatorSeriesAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ISideIndicatorSeriesAccessors\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessors for the side indicator series \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[SideIndicatorRenderer.SIDE_INDICATORS_LAYER];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [{\n            name: SideIndicatorRenderer.SIDE_INDICATORS_LAYER,\n            // order calculated by adding 1 to the data layer order to ensure the unclipped data layer appears just after the data layer in the DOM\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.data].order + 1,\n            clipped: false,\n        }];\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorDataAccessors.html":{"url":"interfaces/ISideIndicatorDataAccessors.html","title":"interface - ISideIndicatorDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator data accessors \n\n            \n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor indicating whether the side indicator should be active \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[SideIndicatorRenderer.SIDE_INDICATORS_LAYER];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [{\n            name: SideIndicatorRenderer.SIDE_INDICATORS_LAYER,\n            // order calculated by adding 1 to the data layer order to ensure the unclipped data layer appears just after the data layer in the DOM\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.data].order + 1,\n            clipped: false,\n        }];\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISideIndicatorSeriesAccessors.html":{"url":"interfaces/ISideIndicatorSeriesAccessors.html","title":"interface - ISideIndicatorSeriesAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISideIndicatorSeriesAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Interface for side indicator series accessors \n\n            \n\n            \n                Extends\n            \n            \n                        ISeriesAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        activeColor\n                                \n                                \n                                        end\n                                \n                                \n                                            Optional\n                                        inactiveColor\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeColor\n                                    \n                                \n                                \n                                    \n                                        activeColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the active color of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the end value of the side indicator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveColor\n                                    \n                                \n                                \n                                    \n                                        inactiveColor:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         SeriesAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SeriesAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Indicates the start value of the side indicator \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[SideIndicatorRenderer.SIDE_INDICATORS_LAYER];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [{\n            name: SideIndicatorRenderer.SIDE_INDICATORS_LAYER,\n            // order calculated by adding 1 to the data layer order to ensure the unclipped data layer appears just after the data layer in the DOM\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.data].order + 1,\n            clipped: false,\n        }];\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISimpleThresholdZone.html":{"url":"interfaces/ISimpleThresholdZone.html","title":"interface - ISimpleThresholdZone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISimpleThresholdZone\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n            \n                Description\n            \n            \n                Used for simplified threshold zone definition. It is expected the start to be .\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISpark.html":{"url":"interfaces/ISpark.html","title":"interface - ISpark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISpark\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the spark chart assist's\nassociation between one of its charts and a series set\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        chart\n                                \n                                \n                                        chartSeriesSet\n                                \n                                \n                                            Optional\n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chartSeriesSet\n                                    \n                                \n                                \n                                    \n                                        chartSeriesSet:     IChartAssistSeries[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IChartAssistSeries[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISparkChartAssistChart.html":{"url":"interfaces/ISparkChartAssistChart.html","title":"interface - ISparkChartAssistChart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ISparkChartAssistChart\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chart\n                                \n                                \n                                        chartSeries\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chart\n                                    \n                                \n                                \n                                    \n                                        chart:         IChart\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IChart\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chartSeries\n                                    \n                                \n                                \n                                    \n                                        chartSeries:     IChartAssistSeries\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IChartAssistSeries\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RenderState } from \"../../renderers/types\";\nimport { IAccessors, IChart, IChartAssistSeries, IChartSeries, IRenderStateData } from \"../common/types\";\n\n/**\n * @deprecated Removal ticket NUI-3327\n *\n * Replaced by ISpark\n */\nexport interface ISparkChartAssistChart {\n    chart: IChart;\n    chartSeries: IChartAssistSeries;\n}\n\n/**\n * Interface representing the spark chart assist's\n * association between one of its charts and a series set\n */\nexport interface ISpark {\n    chartSeriesSet: IChartAssistSeries[];\n    id?: string;\n    chart?: IChart;\n}\n\n/**\n * Interface representing an assistant that aids in chart usage\n */\nexport interface IChartAssist {\n    /**\n     * Updates the series set for the chart assist's associated chart\n     *\n     * @param inputSeriesSet The updated set of series\n     */\n    update(inputSeriesSet: IChartAssistSeries[]): void;\n\n    /**\n     * Gets the current highlighted value for the specified series\n     *\n     * @param {IChartSeries} chartSeries The chart series to get the highlighted value for\n     * @param {string} scaleKey The key for the datapoint value scale\n     * @param {string} [formatterName] The name of the formatter if a custom formatter name is set on the scale\n     *\n     * @returns {string} The highlighted value\n     */\n    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number | undefined;\n\n    /**\n     * Returns visible series that are represented by a legend\n     */\n    getVisibleSeriesWithLegend(): IChartAssistSeries[];\n}\n\n/** Event types that can be emitted from a chart assist */\nexport enum ChartAssistEventType {\n    ToggleSeries = \"ToggleSeries\",\n    ResetVisibleSeries = \"ResetVisibleSeries\",\n    EmphasizeSeries = \"EmphasizeSeries\",\n}\n\n/** Interface for chart assist events */\nexport interface IChartAssistEvent {\n    type: ChartAssistEventType;\n    payload: any;\n}\n\n/**\n * Legend interaction assist uses this class to present the state that consists of emphasisState+visible as one state\n */\nexport class ChartAssistRenderStateData implements IRenderStateData {\n    constructor(public seriesId: string,\n                public emphasisState = RenderState.default,\n                public visible = true) {\n    }\n\n    get state(): RenderState {\n        return this.visible ? this.emphasisState : RenderState.hidden;\n    }\n}\n\nexport interface IRenderStatesIndex {\n    [seriesId: string]: ChartAssistRenderStateData;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStackMetadata.html":{"url":"interfaces/IStackMetadata.html","title":"interface - IStackMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStackMetadata\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IBarChartConfig {\n    horizontal?: boolean;\n    grouped?: boolean;\n}\n\nexport interface IStackMetadata {\n    start: number;\n    end: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStartEndRangeAccessors.html":{"url":"interfaces/IStartEndRangeAccessors.html","title":"interface - IStartEndRangeAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStartEndRangeAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        end\n                                \n                                \n                                        start\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusAccessors.html":{"url":"interfaces/IStatusAccessors.html","title":"interface - IStatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         IStatusDataAccessors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IStatusDataAccessors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStatusDataAccessors.html":{"url":"interfaces/IStatusDataAccessors.html","title":"interface - IStatusDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IStatusDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IBarDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITextOverflowArgs.html":{"url":"interfaces/ITextOverflowArgs.html","title":"interface - ITextOverflowArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITextOverflowArgs\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ellipsisWidth\n                                \n                                \n                                        horizontalPadding\n                                \n                                \n                                        widthLimit\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ellipsisWidth\n                                    \n                                \n                                \n                                    \n                                        ellipsisWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        widthLimit\n                                    \n                                \n                                \n                                    \n                                        widthLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITickLabelConfig.html":{"url":"interfaces/ITickLabelConfig.html","title":"interface - ITickLabelConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITickLabelConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the configuration for tick labels \n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        horizontalPadding\n                                \n                                \n                                            Optional\n                                        maxWidth\n                                \n                                \n                                            Optional\n                                        overflowHandler\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        horizontalPadding\n                                    \n                                \n                                \n                                    \n                                        horizontalPadding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Padding for left and right sides of label used for calculating text overflow limits\n(number represents the padding on each side)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidth\n                                    \n                                \n                                \n                                    \n                                        maxWidth:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Setting this insures the label's width is smaller or equal to the provided number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overflowHandler\n                                    \n                                \n                                \n                                    \n                                        overflowHandler:         TextOverflowHandler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextOverflowHandler\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Handler for text overflow. Set to 'undefined' to disable overflow handling \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipNode.html":{"url":"interfaces/ITooltipNode.html","title":"interface - ITooltipNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipNode\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chart-tooltips/chart-tooltips.component.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SimulationNodeDatum\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        radius\n                                \n                                \n                                        seriesId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seriesId\n                                    \n                                \n                                \n                                    \n                                        seriesId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, SimpleChanges, ViewChildren } from \"@angular/core\";\nimport { forceCollide, forceSimulation, Simulation, SimulationNodeDatum } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport each from \"lodash/each\";\nimport isEqual from \"lodash/isEqual\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { IPosition } from \"../core/common/types\";\nimport { ChartTooltipsPlugin } from \"../core/plugins/tooltips/chart-tooltips-plugin\";\n\nimport { ChartTooltipDirective } from \"./chart-tooltip.directive\";\n\ninterface ITooltipNode extends SimulationNodeDatum {\n    seriesId: string;\n    radius: number;\n}\n\n@Component({\n    selector: \"nui-chart-tooltips\",\n    templateUrl: \"./chart-tooltips.component.html\",\n    styleUrls: [\"./chart-tooltips.component.less\"],\n})\nexport class ChartTooltipsComponent implements OnChanges, OnDestroy {\n\n    @Input() plugin: ChartTooltipsPlugin;\n\n    @Input() template: ElementRef;\n\n    @ViewChildren(ChartTooltipDirective) tooltips: QueryList;\n\n    public openTooltips = new Subject();\n    public closeTooltips = new Subject();\n\n    private unsubscribe$ = new Subject();\n    private simulation: Simulation;\n    // index we use for fast access of tooltip directives by seriesId\n    private tooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective } = {};\n    private closePending = false;\n    private isOpen = false;\n    private openTimeout: number;\n    private collisionTimeout: number;\n    private closeTimeout: number;\n\n    constructor(private changeDetector: ChangeDetectorRef) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (!(changes[\"plugin\"] && changes[\"plugin\"].currentValue)) {\n            return;\n        }\n\n        this.unsubscribe$.next();\n\n        this.plugin.showSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleOpen());\n        this.plugin.hideSubject.pipe(takeUntil(this.unsubscribe$)).subscribe(() => this.handleClose());\n    }\n\n    public ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item.value.seriesId;\n    }\n\n    private handleOpen() {\n        this.changeDetector.detectChanges();\n\n        const currentTooltipDirectivesIndex: { [seriesId: string]: ChartTooltipDirective; } = {};\n        this.tooltips.forEach(tooltip => {\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            currentTooltipDirectivesIndex[seriesId] = tooltip;\n        });\n\n        const directivesChanged = !isEqual(currentTooltipDirectivesIndex, this.tooltipDirectivesIndex);\n        if (this.closePending || directivesChanged || !this.isOpen) {\n            clearTimeout(this.openTimeout);\n\n            this.openTimeout = setTimeout(() => {\n                this.openTooltips.next();\n                clearTimeout(this.collisionTimeout);\n\n                this.collisionTimeout = setTimeout(() => {\n                    this.avoidTooltipCollisions();\n                    this.isOpen = true;\n                });\n            });\n        } else {\n            this.openTooltips.next();\n            this.avoidTooltipCollisions();\n            this.isOpen = true;\n        }\n    }\n\n    private handleClose() {\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n            this.closePending = true;\n            clearTimeout(this.closeTimeout);\n\n            this.closeTimeout = setTimeout(() => {\n                this.closeTooltips.next();\n                this.closePending = false;\n                this.isOpen = false;\n            });\n    }\n\n    /**\n     * Runs the D3 forceCollide based tooltip collision avoidance algorithm\n     */\n    private avoidTooltipCollisions() {\n        // extracted tooltip positions from tooltip directives\n        const tooltipPositions: { [seriesId: string]: IPosition } = {};\n\n        this.tooltips.forEach(tooltip => {\n            const element = tooltip.getOverlayElement();\n\n            // this is how we identify which series does the tooltip belong to\n            const seriesId: string | undefined = tooltip.elementRef.nativeElement.getAttribute(\"series-id\") ?? undefined;\n\n            if (!seriesId) {\n                throw new Error(\"SeriesId is not defined\");\n            }\n\n            this.tooltipDirectivesIndex[seriesId] = tooltip;\n\n            tooltipPositions[seriesId] = {\n                x: element.offsetLeft,\n                y: element.offsetTop,\n                width: element.clientWidth,\n                height: element.clientHeight,\n            };\n        });\n\n        // if there was a previous simulation, then stop it before running a new one\n        if (this.simulation) {\n            this.simulation.stop();\n        }\n\n        this.simulation = this.startSimulation(this.tooltipDirectivesIndex, tooltipPositions);\n    }\n\n    /**\n     * Starts the force simulation to avoid tooltip overlap\n     *\n     * @param tooltipIndex\n     * @param tooltipPositions\n     */\n    private startSimulation(tooltipIndex: { [p: string]: ChartTooltipDirective },\n        tooltipPositions: { [seriesId: string]: IPosition }) {\n        const nodes = Object.keys(tooltipPositions).map(seriesId => {\n            const position = tooltipPositions[seriesId];\n\n            if (isNil(position.height) || isNil(position.width)) {\n                throw new Error(\"Position height or width are not defined\");\n            }\n\n            const props: any = {\n                seriesId: seriesId,\n                x: position.x,\n                y: position.y,\n                radius: this.isVertical() ? position.height / 2 : position.width / 2,\n            };\n            if (this.isVertical()) {\n                props.fx = position.x;\n            } else {\n                props.fy = position.y;\n            }\n            return props;\n        });\n\n        // TODO: these numbers are only based on playing with the library for the while, it's not fine tuned at all\n        const collisionForce = forceCollide((node: any) => node.radius)\n            .strength(0.5)\n            .iterations(20);\n\n        const simulation = forceSimulation(nodes)\n            .alphaDecay(0.3)\n            .force(\"collisionForce\", collisionForce);\n\n        simulation.on(\"tick\", () => {\n            each(nodes, (node: ITooltipNode) => {\n                const tooltip = tooltipIndex[node.seriesId];\n\n                select(tooltip.getOverlayElement())\n                    .style(this.isVertical() ? \"top\" : \"left\", (this.isVertical() ? node.y : node.x) + \"px\");\n            });\n        });\n\n        return simulation;\n    }\n\n    private isVertical() {\n        return this.plugin.orientation === \"right\";\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITooltipPosition.html":{"url":"interfaces/ITooltipPosition.html","title":"interface - ITooltipPosition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITooltipPosition\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/chart-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Position with extended information for positioning a tooltip \n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        overlayPositions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        overlayPositions\n                                    \n                                \n                                \n                                    \n                                        overlayPositions:     ConnectedPosition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ConnectedPosition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport each from \"lodash/each\";\nimport pickBy from \"lodash/pickBy\";\nimport values from \"lodash/values\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_DATA_POINTS_EVENT, SERIES_STATE_CHANGE_EVENT } from \"../../../constants\";\nimport { RenderState } from \"../../../renderers/types\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport {\n    IAccessors, IChartEvent, IChartSeries, IChartViewStatusEventPayload, IDataPoint, IDataPointsPayload, InteractionType, IPosition,\n    IRenderStateData\n} from \"../../common/types\";\n\n/** Position with extended information for positioning a tooltip */\nexport interface ITooltipPosition extends IPosition {\n    overlayPositions: ConnectedPosition[];\n}\n\n/** How far away from the data point position will the tooltip be positioned */\nexport const TOOLTIP_POSITION_OFFSET = 10;\n\n/** @ignore\n * Used for charts where tooltips should be placed aside of some vertical line */\nexport const getVerticalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"start\",\n    overlayY: \"center\",\n    offsetX: offset,\n}, {\n    originX: \"start\",\n    originY: \"center\",\n    overlayX: \"end\",\n    overlayY: \"center\",\n    offsetX: -offset,\n}];\n\n/** @ignore\n * Used for charts where tooltips should be placed aligned to some horizontal line (as Horizontal Bar Charts) */\nexport const getHorizontalSetup = (offset: number): ConnectedPosition[] => [{\n    originX: \"end\",\n    originY: \"top\",\n    overlayX: \"center\",\n    overlayY: \"bottom\",\n    offsetY: -offset,\n}, {\n    originX: \"end\",\n    originY: \"bottom\",\n    overlayX: \"center\",\n    overlayY: \"top\",\n    offsetY: offset,\n}];\n\n/**\n * This plugin listens to the INTERACTION_DATA_POINTS_EVENT and transforms received data into tooltips inputs.\n * The actual tooltips are handled by the ChartTooltipsComponent.\n */\nexport class ChartTooltipsPlugin extends ChartPlugin {\n\n    /** Highlighted data points received from the chart */\n    public dataPoints: IDataPointsPayload;\n    /** Calculated positions for the data point tooltips */\n    public dataPointPositions: { [stringId: string]: ITooltipPosition } = {};\n\n    /**\n     * This publishes an event to show tooltips\n     */\n    public showSubject = new Subject();\n\n    /**\n     * This publishes an event to hide tooltips\n     */\n    public hideSubject = new Subject();\n\n    protected overlaySetup: ConnectedPosition[];\n\n    private isChartInView = false;\n    private destroy$ = new Subject();\n    private seriesVisibilityMap:  Record = {};\n\n    /**\n     * @param tooltipPositionOffset Offset of a tooltip from edge of a highlighted element\n     * @param orientation\n     */\n    constructor(readonly tooltipPositionOffset: number = TOOLTIP_POSITION_OFFSET,\n        public orientation: \"right\" | \"top\" = \"right\") {\n        super();\n\n        if (orientation === \"right\") {\n            this.overlaySetup = getVerticalSetup(tooltipPositionOffset);\n        } else if (orientation === \"top\") {\n            this.overlaySetup = getHorizontalSetup(tooltipPositionOffset);\n        }\n    }\n\n    public initialize(): void {\n        this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                if (event.data.interactionType === InteractionType.MouseMove && this.isChartInView) {\n                    const dataPoints: IDataPointsPayload = event.data.dataPoints;\n                    this.processHighlightedDataPoints(dataPoints);\n                }\n            });\n        \n        this.chart.getEventBus().getStream(SERIES_STATE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                event.data.forEach(series => {\n                    this.seriesVisibilityMap[series.seriesId] = series.state !== RenderState.hidden;\n                });\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (!this.isChartInView) {\n                    this.hideSubject.next();\n                }\n            });\n    }\n\n    public destroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    public processHighlightedDataPoints(dataPoints: IDataPointsPayload) {\n        const validDataPoints = pickBy(dataPoints, (d: IDataPoint) => d.index >= 0 && d.position && (this.seriesVisibilityMap[d.seriesId] !== false));\n\n        if (values(validDataPoints).length === 0) {\n            this.hideSubject.next();\n            return;\n        }\n\n        this.dataPoints = validDataPoints;\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const bbox = chartElement.getBoundingClientRect();\n        const offsetParentBbox = chartElement.offsetParent.getBoundingClientRect();\n        const chartPosition: IPosition = {\n            x: bbox.left - offsetParentBbox.left,\n            y: bbox.top - offsetParentBbox.top,\n        };\n\n        each(Object.keys(this.dataPoints), seriesId => {\n            const dataPoint = this.dataPoints[seriesId];\n\n            const chartSeries = this.chart.getDataManager().getChartSeries(dataPoint.seriesId);\n            const tooltipRelativePosition = this.getTooltipPosition(dataPoint, chartSeries);\n            this.dataPointPositions[seriesId] = this.getAbsolutePosition(tooltipRelativePosition, chartPosition);\n        });\n\n        this.showSubject.next();\n    }\n\n    /**\n     * Calculate tooltip position. Default implementation shows the tooltip on left / right with\n     * @param dataPoint\n     * @param chartSeries\n     */\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n\n        if (!dataPoint.position) {\n            throw new Error(\"Unable to get tooltip position\");\n        }\n\n        return {\n            x: dataPoint.position.x,\n            y: dataPoint.position.y,\n            height: dataPoint.position?.height || 1,\n            width: dataPoint.position?.width || 1,\n            overlayPositions: this.overlaySetup,\n        };\n    }\n\n    /**\n     * Converts the relative position within a chart into an absolute position on the screen\n     *\n     * @param relativePosition\n     * @param chartPosition\n     */\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        return Object.assign({}, relativePosition, {\n            x: chartPosition.x + this.chart.getGrid().config().dimension.margin.left + relativePosition.x,\n            y: chartPosition.y + this.chart.getGrid().config().dimension.margin.top + relativePosition.y,\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueProvider.html":{"url":"interfaces/IValueProvider.html","title":"interface - IValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    get\n                                \n                                \n                                    reset\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(entityId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:332\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entityId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/types.ts:333\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IValueThicknessAccessors.html":{"url":"interfaces/IValueThicknessAccessors.html","title":"interface - IValueThicknessAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IValueThicknessAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        IDataAccessors\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        thickness\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        thickness\n                                    \n                                \n                                \n                                    \n                                        thickness:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYDataAccessors.html":{"url":"interfaces/IXYDataAccessors.html","title":"interface - IXYDataAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYDataAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        DataAccessor | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/xy-accessors.ts:7\n                            \n                        \n                \n                    \n                        Additional custom keys to match the base interface \n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the x coordinate \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         DataAccessor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataAccessor\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Accessor for value plotted on the y coordinate \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYGridConfig.html":{"url":"interfaces/IXYGridConfig.html","title":"interface - IXYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/types.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for an XYGrid\n\n            \n\n            \n                Extends\n            \n            \n                        IGridConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        axis\n                                \n                                \n                                        interactionPlugins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        axis\n                                    \n                                \n                                \n                                    \n                                        axis:         IAllAround\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAllAround\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The IAllAround value for the grid's axis configurations \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactionPlugins\n                                    \n                                \n                                \n                                    \n                                        interactionPlugins:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Add interaction line and label plugins automatically\nNote: This was added to prevent a breaking change. We should avoid this kind of option in future\nversions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { BaseType } from \"d3\";\nimport { Axis } from \"d3-axis\";\nimport { Selection } from \"d3-selection\";\nimport { Subject } from \"rxjs\";\n\nimport { Lasagna } from \"../common/lasagna\";\nimport { ScalesIndex } from \"../common/scales/types\";\nimport { D3Selection, IChart, IChartPlugin } from \"../common/types\";\n\n/**\n * Interface for defining aspects of the top, right, bottom, and left sides of a grid\n */\nexport interface IAllAround {\n    /** Object defining aspects of the top of an entity */\n    top: T;\n    /** Object defining aspects of the right side of an entity */\n    right: T;\n    /** Object defining aspects of the bottom of an entity */\n    bottom: T;\n    /** Object defining aspects of the left side of an entity */\n    left: T;\n}\n\n/**\n * The width and height of an grid\n */\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\n/**\n * Configuration of grid dimensions\n */\nexport interface IDimensionConfig {\n    /** The top, right, bottom, and left margin sizes in pixels */\n    margin: IAllAround;\n    /** The top, right, bottom, and left padding sizes in pixels */\n    padding: IAllAround;\n    /** Sets whether the grid uses the chart's container to determine its width */\n    autoWidth: boolean;\n    /** Sets whether the grid uses the chart's container to determine its height */\n    autoHeight: boolean;\n    /**\n     * Sets the grid's width. Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid width\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    width(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- excluding margins.\n     *\n     * @returns {number} The grid's width\n     */\n    width(): number;\n    /**\n     * Sets the grid's height. Note: 'autoHeight' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new grid height\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    height(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- excluding margins.\n     *\n     * @returns {number} The grid's height\n     */\n    height(): number;\n    /**\n     * Sets the grid's width by subtracting the grid's horizontal margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new width plus the grid's horizontal margins\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerWidth(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's width -- including horizontal margins.\n     *\n     * @returns {number} The grid's width plus horizontal margins\n     */\n    outerWidth(): number;\n    /**\n     * Sets the grid's height by subtracting the grid's vertical margins from the specified value.\n     * Note: 'autoWidth' must be set to false for this setting to have an effect.\n     *\n     * @param {number} value The new height plus the grid's vertical margins     *\n     * @returns {IDimensionConfig} The resulting dimension config\n     */\n    outerHeight(value: number): IDimensionConfig;\n    /**\n     * Gets the grid's height -- including vertical margins.\n     *\n     * @returns {number} The grid's height plus vertical margins\n     */\n    outerHeight(): number;\n}\n\n/**\n * Interface for defining the SVGElements forming the top, right, bottom, and left borders of an entity\n */\nexport interface IBorders extends IAllAround {\n}\n\n/**\n * Configuration of grid borders\n */\nexport interface IBorderConfig {\n    /** The stroke color */\n    color?: string;\n    /** The thickness of the border */\n    width?: number;\n    /** The class name */\n    className?: string;\n    /** Boolean indicating whether the border should be visible */\n    visible?: boolean;\n}\n\nexport interface ITextOverflowArgs {\n    widthLimit: number;\n    horizontalPadding: number;\n    ellipsisWidth: number;\n}\n\n/** Type for tick overflow handler */\nexport type TextOverflowHandler = (textSelection: Selection, args: ITextOverflowArgs) => void;\n\n/** Interface representing the configuration for tick labels */\nexport interface ITickLabelConfig {\n    /**\n     * Padding for left and right sides of label used for calculating text overflow limits\n     * (number represents the padding on each side)\n     */\n    horizontalPadding: number;\n    /** Handler for text overflow. Set to 'undefined' to disable overflow handling */\n    overflowHandler?: TextOverflowHandler;\n    /**\n     * Setting this insures the label's width is smaller or equal to the provided number\n     */\n    maxWidth?: number;\n}\n\n/** Configuration of a grid axis */\nexport interface IAxisConfig {\n    /** Boolean indicating whether the axis should be visible */\n    visible: boolean;\n    /** The approximate number of ticks to display */\n    approximateTicks: number;\n    /** Boolean indicating whether grid ticks should be displayed */\n    gridTicks: boolean;\n    /** The length of the ticks in pixels */\n    tickSize: number;\n    /** Configuration for the tick labels */\n    tickLabel: ITickLabelConfig;\n    /** Sets whether to fit the grid margins to the axis labels */\n    fit: boolean;\n    /** Sets the axis padding */\n    padding: number;\n}\n\n/**\n * Basic grid configuration\n */\nexport interface IGridConfig {\n    /** Boolean indicating whether the grid will respond to mouse events */\n    interactive: boolean;\n    /** Configuration for the grid's dimensions */\n    dimension: IDimensionConfig;\n    /** Configuration for the grid's borders */\n    borders: IAllAround;\n    /** String indicating the desired cursor style */\n    cursor: string;\n}\n\n/**\n * Configuration for an XYGrid\n */\nexport interface IXYGridConfig extends IGridConfig {\n    /** The IAllAround value for the grid's axis configurations */\n    axis: IAllAround;\n\n    /**\n     * Add interaction line and label plugins automatically\n     * Note: This was added to prevent a breaking change. We should avoid this kind of option in future\n     * versions of IXYGridConfig because ideally all plugins should be added manually (NUI-3304).\n     */\n    interactionPlugins: boolean;\n}\n\n/**\n * The basic interface for a grid's dimensions, scaling, interaction, and borders\n *\n * @interface\n */\nexport interface IGrid {\n    /** The grid scales\n     *\n     * @type {ScalesIndex}\n     */\n    scales: ScalesIndex;\n\n    /**\n     * Subject for indicating that the chart's dimensions should be updated\n     */\n    updateChartDimensionsSubject?: Subject;\n\n    /**\n     * Provides access to the grid's layering mechanism\n     *\n     * @returns {Lasagna} The grid's layering mechanism\n     */\n    getLasagna(): Lasagna;\n\n    /**\n     * Provides access to the grid's interactive area\n     *\n     * @returns {D3Selection} The grid's interactive area\n     */\n    getInteractiveArea(): D3Selection;\n\n    /**\n     * getter for the grid's target d3 selection\n     *\n     * @returns {D3Selection} The grid's target d3 selection\n     */\n    target(): D3Selection;\n\n    /**\n     * setter for the grid's target d3 selection\n     *\n     * @param {D3Selection} [target] The grid's new target d3 selection\n     * @returns {IGrid} The grid instance\n     */\n    target(target: D3Selection): IGrid;\n    target(target: D3Selection): D3Selection | IGrid;\n\n    /**\n     * getter for the grid configuration\n     *\n     * @returns {IGridConfig} The grid configuration\n     */\n    config(): IGridConfig;\n\n    /**\n     * setter for the grid configuration\n     *\n     * @param {IGridConfig} config The new grid configuration\n     * @returns {this} The grid instance\n     */\n    config(config: IGridConfig): this;\n\n    /**\n     * Builds the grid's rendered elements\n     *\n     * @returns {IGrid} The grid instance\n     */\n    build(): IGrid;\n\n    /**\n     * Updates the grid's rendered elements based on the current scales and configuration\n     *\n     * @returns {IGrid} The grid instance\n     */\n    update(): IGrid;\n\n    /**\n     * Updates the grid's dimensions as specified\n     *\n     * @param {Partial} dimensions The new grid dimensions\n     * @returns {IGrid} The grid instance\n     */\n    updateDimensions(dimensions: Partial): IGrid;\n\n    /**\n     * Updates the ranges on the grid's scales based on the grid's configured dimensions\n     *\n     * @returns {IGrid} The grid instance\n     */\n    updateRanges(): IGrid;\n\n    /**\n     * Builds the grid's plugins\n     *\n     * @returns {IChartPlugin[]} The set of generated plugins\n     */\n    buildPlugins(chart: IChart): IChartPlugin[];\n}\n\n/**\n * Interface for a d3 axis entity\n */\nexport interface IAxis {\n    /** The d3 group element for the axis label */\n    labelGroup: D3Selection;\n    /** The d3 group element for the axis ticks */\n    tickGroup: D3Selection;\n    /** The d3 group element for the axis */\n    group: D3Selection;\n    /** The d3 axis */\n    axis: Axis;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IXYScales.html":{"url":"interfaces/IXYScales.html","title":"interface - IXYScales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IXYScales\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Scales\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         IScale\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IScale\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoneCrossPoint.html":{"url":"interfaces/IZoneCrossPoint.html","title":"interface - IZoneCrossPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoneCrossPoint\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/types.ts\n        \n\n            \n                Description\n            \n            \n                A point at which a data series enters or exits a threshold zone\n\n            \n\n            \n                Extends\n            \n            \n                        IPosition\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isZoneEdge\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isZoneEdge\n                                    \n                                \n                                \n                                    \n                                        isZoneEdge:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates whether the cross point is on the edge of a threshold zone \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ScaleLinear } from \"d3-scale\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { IGrid } from \"../grid/types\";\n\nimport { ChartPlugin } from \"./chart-plugin\";\nimport { DataManager } from \"./data-manager\";\nimport { EventBus } from \"./event-bus\";\nimport { RenderEngine } from \"./render-engine\";\nimport { Renderer } from \"./renderer\";\nimport { Scales } from \"./scales/types\";\n\n/**\n * Short-form alias for the most commonly used generic D3 Selection type\n */\nexport type D3Selection = Selection;\n\n/**\n * Signature for data accessors\n *\n * @param d data point\n * @param i index\n * @param series the whole data series\n */\nexport type DataAccessor = (d: D, i: number, series: D[], dataSeries: IDataSeries) => T;\n\n/**\n * Signature for series accessors\n */\nexport type SeriesAccessor = (seriesId: string, series: IDataSeries) => any;\n\n/** @ignore */\nexport interface ILasagnaLayer {\n    name: string;\n    order: number;\n    clipped: boolean;\n}\n\n/** Mouse interaction types */\nexport enum InteractionType {\n    /** Indicates that an element has been clicked */\n    Click = \"click\",\n    /** Indicates that an element is hovered */\n    Hover = \"hover\",\n    /** Indicates a 'mousedown' event */\n    MouseDown = \"mousedown\",\n    /** Indicates that the mouse has entered the bounds of an element */\n    MouseEnter = \"mouseenter\",\n    /** Indicates that the mouse has left the bounds of an element */\n    MouseLeave = \"mouseleave\",\n    /** Indicates a movement of the mouse across the chart */\n    MouseMove = \"mousemove\",\n    /** Indicates a 'mouseup' event */\n    MouseUp = \"mouseup\",\n}\n\n/** @ignore */\nexport interface ICoordinates {\n    x: number;\n    y: number;\n}\n\n/** @ignore */\nexport interface IInteractionEvent {\n    type: InteractionType;\n    coordinates: ICoordinates;\n}\n\n/**\n * Information about the render state of a series\n */\nexport interface IRenderStateData {\n    /** Series identifier */\n    seriesId: string;\n    /** Series render state */\n    state: RenderState;\n}\n\n/** @ignore */\nexport interface IDomainLimits {\n    min: T;\n    max: T;\n}\n\nexport interface IRendererConfig {\n    stateStyles?: Record>;\n    transitionDuration?: number;\n    interactive?: boolean;\n    /** Excludes series from scale domain calculations */\n    ignoreForDomainCalculation?: boolean;\n}\n\nexport interface IRadialRendererConfig extends IRendererConfig {\n    annularWidth?: number;\n    annularPadding?: number;\n    /** annularGrowth is a percentage value to define annular width automatically.\n     *  It will grow until it reaches maxThickness.\n     *  Set one to 0 to use annularWidth constant value instead*/\n    maxThickness?: number;\n    annularGrowth?: number;\n    cursor?: string;\n    strokeWidth?: number;\n    enableSeriesHighlighting?: boolean;\n    enableDataPointHighlighting?: boolean;\n}\n\n/**\n * @ignore\n * Configuration for the GaugeThresholdsRenderer\n */\n// tslint:disable-next-line: no-empty-interface\nexport interface IGaugeThresholdsRendererConfig extends IRadialRendererConfig {\n}\n\nexport interface ILinearScales {\n    x: ScaleLinear;\n    y: ScaleLinear;\n}\n\nexport interface IDataAccessors {\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface ISeriesAccessors {\n    [key: string]: SeriesAccessor | undefined;\n}\n\n/**\n * Accessors describe the data for the consumers.\n */\nexport interface IAccessors {\n    /** Data point level accessors for defining what part of a datum is used for visualizations */\n    data?: IDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series?: ISeriesAccessors;\n}\n\n/**\n * A set of data to visualize on the chart\n */\nexport interface IDataSeries, D = any> {\n    /** The series identifier */\n    id: string;\n    /**\n     * The series data. It is an array of arbitrary objects, the structure of which is prescribed by the consumer of this data series. Specific\n     * renderers require specific accessor keys that are used to access values on data points. The renderers and other consumers rarely access\n     * data point properties directly, but usually through accessors.\n     */\n    data: D[];\n    /** Accessors describing the data */\n    accessors: A;\n\n    /** Allow any properties to be stored on this object to facilitate the transfer of data from APIs */\n    [key: string]: any;\n}\n\n/**\n * The set of elements required for a chart to visualize some data\n */\nexport interface IChartSeries extends IDataSeries {\n    /** The renderer to be used for visualizing the data */\n    renderer: Renderer;\n    /**\n     * Information about how chart data should conform to the drawable area.\n     * Grids expect certain scale keys to be used depending on the type of grid, for example an x-y grid\n     * uses 'x' and 'y' as the keys for its scales.\n     */\n    scales: Scales;\n}\n\nexport interface IChartAssistSeries extends IChartSeries {\n    showInLegend?: boolean;\n    renderState?: RenderState;\n    preprocess?: boolean;\n}\n\nexport interface IChartMarker {\n    getSvg(): string;\n    setColor(color: string): void;\n}\n\nexport interface IChart {\n    target?: D3Selection;\n    getEventBus(): EventBus;\n    getDataManager(): DataManager;\n    getRenderEngine(): RenderEngine;\n    getGrid(): IGrid;\n    addPlugin(plugin: IChartPlugin): void;\n    removePlugin?(classRef: typeof ChartPlugin): void;\n    build(element: HTMLElement): void;\n    update(seriesSet: IChartSeries[]): void;\n    updateDimensions(): void;\n    setSeriesStates(renderStateData: IRenderStateData[]): void;\n    destroy(): void;\n}\n\n/** @ignore */\nexport interface IChartComponent {\n    chart: IChart;\n}\n\n/** Interface defining a chart plugin */\nexport interface IChartPlugin {\n    /**\n     * Associated chart - set automatically on chart initialization\n     */\n    chart: IChart;\n\n    /** Initialize the plugin - Invoked automatically on chart initialization */\n    initialize(): void;\n\n    /** Update the plugin - Invoked automatically on chart update */\n    update(): void;\n\n    /** Update the plugin's dimensions - Invoked automatically on update of the chart's dimensions */\n    updateDimensions(): void;\n\n    /** Perform plugin cleanup - Invoked automatically on chart destruction */\n    destroy(): void;\n}\n\nexport interface IChartEvent {\n    broadcast?: boolean;\n    data: T;\n}\n\n/** @ignore */\nexport interface IChartCollectionEvent {\n    chartIndex: string;\n    event: IChartEvent;\n}\n\n/**\n * Dictionary of render container name to render container\n */\nexport interface IRenderContainers {\n    /** Container name as key to render container */\n    [name: string]: D3Selection;\n}\n\n/**\n * Position on the chart\n */\nexport interface IPosition {\n    x: number;\n    y: number;\n    width?: number;\n    height?: number;\n}\n\n/**\n * A point at which a data series enters or exits a threshold zone\n */\nexport interface IZoneCrossPoint extends IPosition {\n    /** Indicates whether the cross point is on the edge of a threshold zone */\n    isZoneEdge?: boolean;\n}\n\n/**\n * Information about a data point\n */\nexport interface IDataPoint {\n    /** Series identifier */\n    seriesId: string;\n    /** Series */\n    dataSeries: IDataSeries;\n    /** Data index */\n    index: number;\n    /** Data */\n    data: any;\n    /** Position */\n    position?: IPosition;\n}\n\n/**\n * Payload for the chart's visibility status in relation to the nearest scrollable parent\n */\nexport interface IChartViewStatusEventPayload {\n    /**\n     * Indicates whether at least one pixel of the chart's parent element has\n     * intersected with the visible area of its nearest scrollable parent\n     */\n    isChartInView: boolean;\n}\n\n/**\n * Payload for events regarding a data point\n */\nexport interface IRendererEventPayload {\n    /** Name of the event */\n    eventName: string;\n    /** Information about the data point */\n    data: T;\n}\n\n/**\n * Collection of one or more data points as a dictionary of seriesId to IDataPoint\n */\nexport interface IDataPointsPayload {\n    /** Series id as key to highlighted data point */\n    [seriesId: string]: IDataPoint;\n}\n\n/**\n * Payload for interaction events\n */\nexport interface IInteractionPayload {\n    interactionType: InteractionType;\n}\n\n/**\n * Payload for interaction events regarding a single data point\n */\nexport interface IInteractionDataPointEvent extends IInteractionPayload {\n    dataPoint: IDataPoint;\n}\n\n/**\n * Payload for interaction events regarding one or more data points\n */\nexport interface IInteractionDataPointsEvent extends IInteractionPayload {\n    dataPoints: IDataPointsPayload;\n}\n\nexport interface ISetDomainEventPayload {\n    [scaleId: string]: any[];\n}\n\nexport interface IValueProvider {\n    get(entityId: string): T | undefined;\n    reset(): void;\n}\n\nexport interface IChartPalette {\n    readonly standardColors: IValueProvider;\n    readonly backgroundColors: IValueProvider;\n    readonly textColors: IValueProvider;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IZoomPluginConfiguration.html":{"url":"interfaces/IZoomPluginConfiguration.html","title":"interface - IZoomPluginConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IZoomPluginConfiguration\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enableExternalEvents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableExternalEvents\n                                    \n                                \n                                \n                                    \n                                        enableExternalEvents:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        // Width correction to accommodate similar adjustment in grid. This ensures\n        // that the right-most column of pixels on the chart is selectable.\n        const widthCorrection = selection[1] === this.grid.config().dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION ?\n            Grid.RENDER_AREA_WIDTH_CORRECTION : 0;\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLabelPlugin.html":{"url":"classes/InteractionLabelPlugin.html","title":"class - InteractionLabelPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLabelPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-label-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Highlights the label on x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                areLabelUpdatesEnabled\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(formatterName: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/interaction/interaction-label-plugin.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        formatterName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            areLabelUpdatesEnabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-label\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-label-plugin.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isArray from \"lodash/isArray\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { convert } from \"../../common/scales/helpers/convert\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { UtilityService } from \"../../common/utility.service\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/** @ignore */\nconst FALLBACK_FORMATTER = \"tick\";\n\n/**\n * Highlights the label on x-axis that corresponds to interaction position\n *\n * @class InteractionLabelPlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLabelPlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-label\";\n\n    public areLabelUpdatesEnabled = true;\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLabelLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    constructor(private formatterName = \"title\") {\n        super();\n    }\n\n    public initialize(): void {\n        this.interactionLabelLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: InteractionLabelPlugin.LAYER_NAME,\n            order: 901,\n            clipped: false,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLabelUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLabelUpdate();\n                }\n            });\n    }\n\n    protected handleLabelUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (!this.areLabelUpdatesEnabled || this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLabel(xScale, isArray(xValue) ? xValue.slice(0, xValue.length - 1) : xValue);\n    }\n\n    protected updateLabel(scale: IScale, value: any) {\n        let interactionLabel: D3Selection = this.interactionLabelLayer.select(`.${InteractionLabelPlugin.LAYER_NAME}`);\n        if (interactionLabel.empty() && !!value) {\n            interactionLabel = this.buildInteractionLabel(this.interactionLabelLayer);\n        } else if (!value) {\n            interactionLabel.remove();\n            return;\n        }\n\n        const formatter = scale.formatters[this.formatterName] || scale.formatters[FALLBACK_FORMATTER];\n        const labelContent = formatter?.(value);\n\n        if (!labelContent) {\n            throw new Error(\"labelContent is not defined\");\n        }\n\n        const textSelection = interactionLabel.select(\"text\")\n            .text(labelContent);\n        const bbox = (textSelection.node() as any).getBBox();\n        const gridDimension = this.chart.getGrid().config().dimension;\n\n        // subtract the relative vertical text offset inside the bbox from\n        // the grid height to determine the label's vertical placement\n        const heightOffset = (gridDimension.height() - bbox.y);\n\n        textSelection\n            .attr(\"transform\", `translate(0, ${heightOffset})`)\n            .style(\"text-anchor\", \"middle\");\n\n        // match the horizontal padding to the built-in bbox vertical padding\n        const horizontalPadding = (bbox.height + bbox.y) * 2;\n\n        const labelWidth = bbox.width + horizontalPadding;\n        const allowedRange: [number, number] = [(labelWidth / 2), gridDimension.width() - (labelWidth / 2)];\n        const x = convert(scale, value, 0.5);\n        const clampedX = UtilityService.clampToRange(x, allowedRange);\n\n        interactionLabel\n            .attr(\"transform\", `translate(${clampedX},0)`)\n            .select(\"rect\")\n            .attrs({\n                \"transform\": `translate(0,${heightOffset})`,\n                \"x\": -(labelWidth / 2),\n                \"y\": bbox.y,\n                \"width\": labelWidth,\n                \"height\": bbox.height,\n            });\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLabelPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private buildInteractionLabel(target: D3Selection): D3Selection {\n        const label = target.append(\"g\")\n            .attr(\"class\", InteractionLabelPlugin.LAYER_NAME);\n\n        label.append(\"rect\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__rect`);\n\n        label.append(\"text\")\n            .attr(\"class\", `${InteractionLabelPlugin.LAYER_NAME}__text`);\n\n        return label;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InteractionLinePlugin.html":{"url":"classes/InteractionLinePlugin.html","title":"class - InteractionLinePlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InteractionLinePlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/interaction/interaction-line-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Draws a vertical line on the x-axis that corresponds to interaction position\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction-line\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/interaction/interaction-line-plugin.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import find from \"lodash/find\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { CHART_VIEW_STATUS_EVENT, INTERACTION_VALUES_EVENT } from \"../../../constants\";\nimport { ChartPlugin } from \"../../common/chart-plugin\";\nimport { IScale } from \"../../common/scales/types\";\nimport { D3Selection, IChartEvent, IChartViewStatusEventPayload, InteractionType } from \"../../common/types\";\nimport { XYGrid } from \"../../grid/xy-grid\";\nimport { IInteractionValuesPayload } from \"../types\";\n\n/**\n * Draws a vertical line on the x-axis that corresponds to interaction position\n *\n * @class InteractionLinePlugin\n * @extends {ChartPlugin}\n */\nexport class InteractionLinePlugin extends ChartPlugin {\n    public static LAYER_NAME = \"interaction-line\";\n\n    private isChartInView = false;\n    private lastInteractionValuesPayload: IInteractionValuesPayload;\n    private interactionLineLayer: D3Selection;\n    private destroy$ = new Subject();\n\n    public initialize(): void {\n        this.interactionLineLayer = this.chart.getGrid().getLasagna().addLayer({\n            name: \"interaction-line\",\n            order: 900,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.lastInteractionValuesPayload = event.data;\n                if (this.isChartInView) {\n                    this.handleLineUpdate();\n                }\n            });\n\n        this.chart.getEventBus().getStream(CHART_VIEW_STATUS_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent) => {\n                this.isChartInView = event.data.isChartInView;\n                if (this.isChartInView && this.lastInteractionValuesPayload) {\n                    this.handleLineUpdate();\n                }\n            });\n    }\n\n    private handleLineUpdate() {\n        const scales = this.chart.getGrid().scales;\n        if (this.lastInteractionValuesPayload.interactionType !== InteractionType.MouseMove || isEmpty(scales)) {\n            return;\n        }\n\n        const grid: XYGrid = this.chart.getGrid();\n        const xScale = find(scales[\"x\"].index, { id: grid.bottomScaleId });\n\n        if (!xScale) {\n            throw new Error(\"xScale is not defined\");\n        }\n\n        const xValue = this.lastInteractionValuesPayload.values.x ? this.lastInteractionValuesPayload.values.x[xScale.id] : null;\n        this.updateLine(this.interactionLineLayer, xScale, xValue);\n    }\n\n    private updateLine(layer: D3Selection, xScale: IScale, value: any) {\n        const data = [];\n        if (value) {\n            data.push(value);\n        }\n        const line = layer.selectAll(`.${InteractionLinePlugin.LAYER_NAME}`).data(data);\n\n        const xFn = (d: any) => xScale.convert(d);\n        const attrs = {\n            \"class\": InteractionLinePlugin.LAYER_NAME,\n            \"x1\": xFn,\n            \"y1\": 0,\n            \"x2\": xFn,\n            \"y2\": this.chart.getGrid().config().dimension.height(),\n        };\n\n        line.enter()\n            .append(\"line\")\n            .merge(line as any)\n            .attrs(attrs);\n\n        line.exit().remove();\n    }\n\n    public destroy(): void {\n        this.chart.getGrid().getLasagna().removeLayer(InteractionLinePlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendComponent.html":{"url":"components/LegendComponent.html","title":"component - LegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend\n            \n\n\n\n\n            \n                templateUrl\n                ./legend.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activeChanged\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                interactive\n                            \n                            \n                                orientation\n                            \n                            \n                                seriesColor\n                            \n                            \n                                seriesIcon\n                            \n                            \n                                seriesUnitLabel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:21\n                            \n                        \n                \n                    \n                        The active state\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:26\n                            \n                        \n                \n                    \n                        The legend's interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :         LegendOrientation\n\n                    \n                \n                \n                    \n                        Default value : LegendOrientation.vertical\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:31\n                            \n                        \n                \n                    \n                        The legend's orientation\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:36\n                            \n                        \n                \n                    \n                        The legend's overall series color. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesIcon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:41\n                            \n                        \n                \n                    \n                        The legend's overall series icon. Individual legend series may override this.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesUnitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:46\n                            \n                        \n                \n                    \n                        The legend's overall series unit label. Individual legend series may override this.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activeChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend.component.ts:16\n                            \n                        \n\n                \n                    \n                        EventEmitter for notifying subscribers of a change in the active state\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnChanges, OnDestroy, SimpleChanges, ViewEncapsulation } from \"@angular/core\";\n\nimport { LegendOrientation } from \"./types\";\n\n@Component({\n    selector: \"nui-legend\",\n    // tslint:disable-next-line\n    host: { \"class\": \"d-inline-block\" },\n    templateUrl: \"./legend.component.html\",\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class LegendComponent implements OnChanges, OnDestroy {\n    /**\n     * EventEmitter for notifying subscribers of a change in the active state\n     */\n    public activeChanged = new EventEmitter();\n\n    /**\n     * The active state\n     */\n    @Input() public active = false;\n\n    /**\n     * The legend's interactive mode switch\n     */\n    @Input() public interactive = false;\n\n    /**\n     * The legend's orientation\n     */\n    @Input() public orientation: LegendOrientation = LegendOrientation.vertical;\n\n    /**\n     * The legend's overall series color. Individual legend series may override this.\n     */\n    @Input() public seriesColor: string;\n\n    /**\n     * The legend's overall series icon. Individual legend series may override this.\n     */\n    @Input() public seriesIcon: string;\n\n    /**\n     * The legend's overall series unit label. Individual legend series may override this.\n     */\n    @Input() public seriesUnitLabel: string;\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"active\"]) {\n            this.activeChanged.emit(this.active);\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.activeChanged.complete();\n    }\n\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LegendInteractionAssist.html":{"url":"classes/LegendInteractionAssist.html","title":"class - LegendInteractionAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LegendInteractionAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/chart-assist.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                renderStatesIndex\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emphasizeSeries\n                            \n                            \n                                    Public\n                                getSeriesStates\n                            \n                            \n                                    Public\n                                isSeriesHidden\n                            \n                            \n                                    Public\n                                resetSeries\n                            \n                            \n                                    Public\n                                setGroupState\n                            \n                            \n                                    Public\n                                setGroupVisibility\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chartAssist: ChartAssist)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/chart-assist.ts:305\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chartAssist\n                                                  \n                                                        \n                                                                        ChartAssist\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            renderStatesIndex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRenderStatesIndex\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/chart-assist.ts:305\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            emphasizeSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    emphasizeSeries(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:377\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSeriesStates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSeriesStates()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:324\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         IRenderStateData[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isSeriesHidden\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isSeriesHidden(seriesId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:328\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            resetSeries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetSeries()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:383\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupState(groupId: string, renderState: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:353\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    renderState\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setGroupVisibility\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setGroupVisibility(groupId: string, visible: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:367\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the parent series\n\n                                    \n                                \n                                \n                                    visible\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(seriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/chart-assist.ts:310\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import each from \"lodash/each\";\nimport values from \"lodash/values\";\nimport { Observable, of, Subject, Subscription } from \"rxjs\";\nimport { filter, map, switchMap, takeUntil } from \"rxjs/operators\";\n\nimport { DESTROY_EVENT, HIGHLIGHT_SERIES_EVENT, INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { RenderState } from \"../../renderers/types\";\nimport { EventBus } from \"../common/event-bus\";\nimport { defaultMarkerProvider, defaultPalette } from \"../common/palette/default-providers\";\nimport {\n    IAccessors, IChart, IChartAssistSeries, IChartEvent, IChartMarker, IChartPalette, IChartSeries, IDataPoint, IDataPointsPayload, IInteractionDataPointsEvent,\n    InteractionType, IRenderStateData, IValueProvider\n} from \"../common/types\";\n\nimport { ChartAssistEventType, ChartAssistRenderStateData, IChartAssist, IChartAssistEvent, IRenderStatesIndex } from \"./types\";\n\n/** @ignore */\nconst chartAssistSeriesDefaults: Partial> = {\n    showInLegend: true,\n    preprocess: true,\n};\n\n/**\n * Helper class that helps to bootstrap a chart with legend, using data pre-processor.\n * It will use the most common settings.\n */\nexport class ChartAssist implements IChartAssist {\n\n    /**\n     * Retrieves the display value for a data point on the specified series\n     *\n     * @param chartSeries The series containing the data point to get a label for\n     * @param dataPoint The data point to get a label for\n     * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n     * @param formatterName The name of the formatter to use for formatting the label\n     * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n     *\n     * @returns The display value for a data point\n     */\n    public static getLabel(chartSeries: IChartSeries, dataPoint: any, scaleKey: string, formatterName?: string, dataAccessorKey?: string): any {\n        if (!dataPoint || chartSeries.data.length === 0) {\n            return null;\n        }\n\n        const valueAccessor = chartSeries.accessors.data?.[dataAccessorKey || scaleKey];\n        if (!valueAccessor) {\n            return null;\n        }\n\n        const adjustedIndex = dataPoint.index [] = [];\n    public legendSeriesSet: IChartAssistSeries[] = [];\n\n    /**\n     * Subject for subscribing to IChartAssistEvents such as\n     * ToggleSeries, EmphasizeSeries, and ResetVisibleSeries\n     */\n    public chartAssistSubject = new Subject();\n\n    private syncHandlerMap: Record;\n    private getVisibleSeriesWithLegendBackup: () => IChartAssistSeries>[];\n    private syncSubscription: Subscription;\n    private legendInteractionAssist: LegendInteractionAssist;\n\n    public onEvent: (event: IChartEvent) => void;\n\n    constructor(public chart: IChart,\n                seriesProcessor?: (series: IChartAssistSeries[]) => IChartAssistSeries[],\n                public palette: IChartPalette = defaultPalette(),\n                public markers: IValueProvider = defaultMarkerProvider()) {\n        this.configureChartEventSubscriptions(chart.getEventBus());\n        if (seriesProcessor) {\n            this.seriesProcessor = seriesProcessor;\n        }\n\n        /* tslint:disable-next-line:no-use-before-declare */\n        this.legendInteractionAssist = new LegendInteractionAssist(this);\n\n        this.syncHandlerMap = {\n            [ChartAssistEventType.EmphasizeSeries]: this.emphasizeSeries,\n            [ChartAssistEventType.ResetVisibleSeries]: this.resetVisibleSeries,\n            [ChartAssistEventType.ToggleSeries]: this.toggleSeries,\n        };\n    }\n\n    public get renderStatesIndex(): IRenderStatesIndex {\n        return this.legendInteractionAssist.renderStatesIndex;\n    }\n\n    /**\n     * Convenience stream of highlight events that can be used to populate legend.\n     * It will return highlighted value for the series (while hovering over datapoints) or the last value from series (while not hovering over and if possible),\n     * otherwise it'll return null\n     * @param chartSeries\n     */\n    public legendLabelData$(chartSeries: IChartSeries): Observable {\n        const seriesHighlight$ = this.chart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).asObservable()\n            .pipe(\n                filter(event => event.data.interactionType === InteractionType.MouseMove),\n                map(event => event.data.dataPoints[chartSeries.id])\n            );\n\n        // if there is no highlightData, or index is \"-1\", we'll show the last value from series (if possible)\n        const highlightDataPresentPredicate = (highlightData: any) => highlightData && highlightData.index >= 0;\n\n        return seriesHighlight$\n            .pipe(\n                switchMap(highlightData => highlightDataPresentPredicate(highlightData)\n                    ? of(highlightData.data)\n                    : of((chartSeries.data && chartSeries.data.length) ? chartSeries.data[chartSeries.data.length - 1] : null))\n            );\n    }\n\n    public seriesProcessor(series: IChartAssistSeries[]): IChartAssistSeries[] {\n        return series;\n    }\n\n    public update(inputSeriesSet: IChartAssistSeries[], updateLegend = true): void {\n        this.inputSeriesSet = inputSeriesSet;\n\n        const processedSeriesSet = this.seriesProcessor(inputSeriesSet.map(series => ({\n            ...series,\n            data: series.data || [],\n        })));\n\n        const seriesSet = processedSeriesSet.map(s => this.applyDefaults(s));\n\n        this.legendSeriesSet = seriesSet.filter(s => s.showInLegend);\n\n        if (updateLegend) {\n            this.legendInteractionAssist.update(seriesSet);\n        }\n        this.chart.update(seriesSet);\n\n        this.publishRenderStates();\n    }\n\n    public toggleSeries = (seriesId: string, visible: boolean): void => {\n        this.legendInteractionAssist.setGroupVisibility(seriesId, visible);\n\n        this.update(this.inputSeriesSet, false);\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ToggleSeries, payload: { seriesId, visible } });\n    }\n\n    /**\n     * Resets all visible series to default state\n     */\n    public resetVisibleSeries = (): void => {\n        this.legendInteractionAssist.resetSeries();\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.ResetVisibleSeries, payload: {} });\n    }\n\n    /**\n     * For series that are currently visible, emphasize the given series and deemphasizes all the other ones\n     *\n     * @param seriesId\n     */\n    public emphasizeSeries = (seriesId: string): void => {\n        this.legendInteractionAssist.emphasizeSeries(seriesId);\n\n        this.publishRenderStates();\n        this.chartAssistSubject.next({ type: ChartAssistEventType.EmphasizeSeries, payload: { seriesId } });\n    }\n\n    /**\n     * @deprecated use resetVisibleSeries instead\n     * TODO: Remove in V10\n     */\n    public deemphasizeSeries(): void {\n        this.resetVisibleSeries();\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        return this.legendInteractionAssist.isSeriesHidden(seriesId);\n    }\n\n    public seriesTrackByFn(index: number, item: IChartAssistSeries): string {\n        return item.id;\n    }\n\n    /**\n    * Retrieves the display value for the highlighted data point on the specified series\n    *\n    * @param chartSeries The series containing the highlighted data point to get a label for\n    * @param scaleKey The key for the scale potentially containing a formatter that can be used to format the label\n    * @param formatterName The name of the formatter to use for formatting the label\n    * @param dataAccessorKey The accessor key to use for accessing the data value if the accessor key differs from the scale key\n    *\n    * @returns The display value for the highlighted data point\n    */\n    public getHighlightedValue(chartSeries: IChartSeries,\n                               scaleKey: string,\n                               formatterName?: string,\n                               dataAccessorKey?: string): string | number | undefined {\n\n        if (!this.highlightedDataPoints) {\n            return undefined;\n        }\n\n        const dataPoint = this.highlightedDataPoints[chartSeries.id];\n        return ChartAssist.getLabel(chartSeries, dataPoint, scaleKey, formatterName, dataAccessorKey);\n    }\n\n    public getVisibleSeriesWithLegend = (): IChartAssistSeries>[] =>\n        this.legendSeriesSet.filter(s => !this.isSeriesHidden(s.id))\n\n    /**\n     * Synchronize this chart assist's actions with IChartAssistEvents emitted by the specified\n     * chart assist, and override this chart assist's getVisibleSeriesWithLegend method with the\n     * specified chart assist's getVisibleSeriesWithLegend.\n     *\n     * Note: If the chart instance of the specified chart assist is replaced by a new chart,\n     * this method must be invoked again to resume synchronized behavior.\n     *\n     * @param {ChartAssist} chartAssist The chart assist to synchronize with\n     */\n    public syncWithChartAssist(chartAssist: ChartAssist): void {\n        this.getVisibleSeriesWithLegendBackup = this.getVisibleSeriesWithLegend;\n        this.getVisibleSeriesWithLegend = chartAssist.getVisibleSeriesWithLegend;\n\n        this.syncSubscription = chartAssist.chartAssistSubject.pipe(\n            takeUntil(chartAssist.chart.getEventBus().getStream(DESTROY_EVENT))\n        ).subscribe((event: IChartAssistEvent) => {\n            const args = Object.keys(event.payload).map(key => event.payload[key]);\n            this.syncHandlerMap[event.type](...args);\n        });\n    }\n\n    /**\n     * Unsynchronize this chart assist's actions from those of the chart assist\n     * specified in a previous syncWithChartAssist call, and restore this chart\n     * assist's getVisibleSeriesWithLegend method with the instance used before\n     * syncWithChartAssist was called.\n     */\n    public unsyncChartAssist(): void {\n        this.getVisibleSeriesWithLegend = this.getVisibleSeriesWithLegendBackup;\n\n        if (this.syncSubscription) {\n            this.syncSubscription.unsubscribe();\n        }\n    }\n\n    private configureChartEventSubscriptions(eventBus: EventBus): void {\n        const eventHandlers: { [eventName: string]: (data?: any) => void } = {\n            [INTERACTION_DATA_POINTS_EVENT]: (data: IInteractionDataPointsEvent) => {\n                if (data.interactionType === InteractionType.MouseMove) {\n                    this.highlightedDataPoints = Object.assign({}, data.dataPoints);\n                }\n            },\n            [HIGHLIGHT_SERIES_EVENT]: (data: IDataPoint) => {\n                if (data.index >= 0) {\n                    this.emphasizeSeries(data.seriesId);\n                } else {\n                    this.resetVisibleSeries();\n                }\n            },\n            [MOUSE_ACTIVE_EVENT]: (data: boolean) => {\n                this.isLegendActive = data;\n            },\n        };\n\n        each(Object.keys(eventHandlers), key => {\n            eventBus.getStream(key).subscribe((event) => {\n                eventHandlers[key](event.data);\n                if (this.onEvent) {\n                    this.onEvent(event);\n                }\n            });\n        });\n    }\n\n    private publishRenderStates(): void {\n        this.chart.setSeriesStates(this.legendInteractionAssist.getSeriesStates());\n    }\n\n    private applyDefaults(chartSeries: IChartSeries): IChartAssistSeries {\n        return Object.assign({}, chartAssistSeriesDefaults, chartSeries);\n    }\n}\n\nexport class LegendInteractionAssist {\n\n    private seriesGroups: Record = {};\n\n    public renderStatesIndex: IRenderStatesIndex = {};\n\n    constructor(private chartAssist: ChartAssist) {\n    }\n\n    public update(seriesSet: IChartAssistSeries[]): void {\n        this.seriesGroups = this.getSeriesGroups(seriesSet);\n\n        this.resetSeries();\n\n        // override render states\n        for (const series of seriesSet.filter(s => s.renderState)) {\n            this.renderStatesIndex[series.id] =\n                new ChartAssistRenderStateData(series.id,\n                    series.renderState === RenderState.hidden ? RenderState.default : series.renderState,\n                    series.renderState !== RenderState.hidden);\n        }\n    }\n\n    public getSeriesStates(): IRenderStateData[] {\n        return values(this.renderStatesIndex);\n    }\n\n    public isSeriesHidden(seriesId: string): boolean {\n        const renderState = this.renderStatesIndex[seriesId];\n        return renderState && !renderState.visible;\n    }\n\n    private getSeriesGroups(seriesSet: IChartAssistSeries[]) {\n        const seriesGroups: Record = {};\n\n        for (const s of seriesSet) {\n            const separatorIndex = s.id.indexOf(\"__\");\n            const parentId = (separatorIndex >= 0) ? s.id.substring(0, separatorIndex) : s.id;\n\n            if (!seriesGroups[parentId]) {\n                seriesGroups[parentId] = [];\n            }\n            seriesGroups[parentId].push(s.id);\n        }\n\n        return seriesGroups;\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param renderState\n     */\n    public setGroupState(groupId: string, renderState: RenderState): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setRenderState(s, renderState);\n        }\n    }\n\n    /**\n     * @param groupId id of the parent series\n     * @param visible\n     */\n    public setGroupVisibility(groupId: string, visible: boolean): void {\n        if (!this.seriesGroups[groupId]) {\n            return;\n        }\n\n        for (const s of this.seriesGroups[groupId]) {\n            this.setVisibility(s, visible);\n        }\n    }\n\n    public emphasizeSeries(seriesId: string): void {\n        for (const group of Object.keys(this.seriesGroups)) {\n            this.setGroupState(group, group === seriesId ? RenderState.emphasized : RenderState.deemphasized);\n        }\n    }\n\n    public resetSeries(): void {\n        const legendSeries = this.chartAssist.getVisibleSeriesWithLegend();\n        const oneSeriesMode = legendSeries.length === 1;\n\n        if (oneSeriesMode) {\n            this.emphasizeSeries(legendSeries[0].id);\n        } else {\n            for (const group of Object.keys(this.seriesGroups)) {\n                this.setGroupState(group, RenderState.default);\n            }\n        }\n    }\n\n    private setRenderState(seriesId: string, state: RenderState) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.emphasisState = state;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId, state);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n    private setVisibility(seriesId: string, visible: boolean) {\n        let renderState = this.renderStatesIndex[seriesId];\n        if (renderState) {\n            renderState.visible = visible;\n        } else {\n            renderState = new ChartAssistRenderStateData(seriesId);\n            this.renderStatesIndex[seriesId] = renderState;\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegendSeriesComponent.html":{"url":"components/LegendSeriesComponent.html","title":"component - LegendSeriesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  LegendSeriesComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-series/legend-series.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                nui-legend-series\n            \n\n            \n                styleUrls\n                ./legend-series.component.less\n            \n\n\n\n            \n                templateUrl\n                ./legend-series.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputDescription\n                            \n                            \n                                    Public\n                                hasProjectedDescription\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                color\n                            \n                            \n                                descriptionPrimary\n                            \n                            \n                                descriptionSecondary\n                            \n                            \n                                icon\n                            \n                            \n                                interactive\n                            \n                            \n                                isSelected\n                            \n                            \n                                seriesRenderState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                isSelectedChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.inverse\n                            \n                            \n                                \n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    active\n                                \n                                \n                                    interactive\n                                \n                                \n                                    seriesRenderState\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legend: LegendComponent)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-series/legend-series.component.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:31\n                            \n                        \n                \n                    \n                        Sets the series active status\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:82\n                            \n                        \n                \n                    \n                        Color of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionPrimary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:67\n                            \n                        \n                \n                    \n                        The primary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        descriptionSecondary\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:72\n                            \n                        \n                \n                    \n                        The secondary description of the series\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:77\n                            \n                        \n                \n                    \n                        The series icon\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:41\n                            \n                        \n                \n                    \n                        Sets the series interactive mode switch\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isSelected\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:57\n                            \n                        \n                \n                    \n                        Set whether the series is selected\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:88\n                            \n                        \n                \n                    \n                        The render state of the legend series\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        isSelectedChange\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:62\n                            \n                        \n                \n                    \n                        Emits an event with a boolean value indicating a new selected status\n\n                    \n                \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            class.inverse\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-series/legend-series.component.ts:102\n                            \n                        \n\n\n            \n        \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:130\n                \n            \n\n\n            \n                \n                    Emits an isSelectedChange event on series click if the series is in interactive mode\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a primary or secondary description\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasProjectedDescription\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasProjectedDescription()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-series/legend-series.component.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean indicating whether the series has a projected description\n\n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n\n                \n                    \n                        setactive(active: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:31\n                                \n                            \n                    \n                        \n                                Sets the series active status\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            active\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new active status\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        interactive\n                    \n                \n\n                \n                    \n                        getinteractive()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:50\n                                \n                            \n                    \n                        \n                                Gets the series interactive mode value\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n                \n                    \n                        setinteractive(interactive: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:41\n                                \n                            \n                    \n                        \n                                Sets the series interactive mode switch\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            interactive\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The new interactive mode\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        seriesRenderState\n                    \n                \n\n                \n                    \n                        getseriesRenderState()\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:91\n                                \n                            \n\n                \n                    \n                        setseriesRenderState(renderState)\n                    \n                \n                            \n                                \n                                    Defined in src/legend/legend-series/legend-series.component.ts:88\n                                \n                            \n                    \n                        \n                                The render state of the legend series\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            renderState\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import {\n    AfterContentInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Host, HostBinding, HostListener, Input, Optional, Output, ViewChild,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport _isEmpty from \"lodash/isEmpty\";\n\nimport { RenderState } from \"../../renderers/types\";\nimport { LegendComponent } from \"../legend.component\";\nimport { LegendOrientation } from \"../types\";\n\n/** @ignore */\nexport const LEGEND_SERIES_CLASS_NAME = \"nui-legend-series\";\n\n@Component({\n    // tslint:disable-next-line\n    host: { \"class\": LEGEND_SERIES_CLASS_NAME },\n    selector: \"nui-legend-series\",\n    templateUrl: \"./legend-series.component.html\",\n    styleUrls: [\"./legend-series.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LegendSeriesComponent implements AfterContentInit {\n\n    /**\n     * Sets the series active status\n     *\n     * @param {boolean} active The new active status\n     */\n    @Input()\n    public set active(active: boolean) {\n        this._active = active;\n    }\n\n    /**\n     * Sets the series interactive mode switch\n     *\n     * @param {boolean} interactive The new interactive mode\n     */\n    @Input()\n    public set interactive(interactive: boolean) {\n        this._interactive = interactive;\n    }\n\n    /**\n     * Gets the series interactive mode value\n     *\n     * @returns {boolean} The current interactive mode\n     */\n    public get interactive(): boolean {\n        return this._interactive;\n    }\n\n    /**\n     * Set whether the series is selected\n     */\n    @Input() public isSelected = true;\n\n    /**\n     * Emits an event with a boolean value indicating a new selected status\n     */\n    @Output() public isSelectedChange = new EventEmitter();\n\n    /**\n     * The primary description of the series\n     */\n    @Input() public descriptionPrimary: string;\n\n    /**\n     * The secondary description of the series\n     */\n    @Input() public descriptionSecondary: string;\n\n    /**\n     * The series icon\n     */\n    @Input() public icon: string;\n\n    /**\n     * Color of the series\n     */\n    @Input() public color: string;\n\n    /**\n     * The render state of the legend series\n     */\n    @Input()\n    public set seriesRenderState(renderState: RenderState) {\n        this._seriesRenderState = renderState;\n    }\n    public get seriesRenderState(): RenderState {\n        return this._seriesRenderState || RenderState.default;\n    }\n\n    @ViewChild(\"projectedDescription\") private projectedDescription: ElementRef;\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--interactive`)\n    public get isInteractiveClassApplied() {\n        return this._interactive;\n    }\n\n    @HostBinding(`class.${LEGEND_SERIES_CLASS_NAME}--horizontal`) public isHorizontalClassApplied = false;\n\n    @HostBinding(`class.inverse`)\n    public get isActiveClassApplied() {\n        return this._active && this.seriesRenderState !== RenderState.hidden;\n    }\n\n    private _seriesRenderState: RenderState;\n    private _active = false;\n    private _interactive = false;\n\n    constructor(@Optional() @Host() private legend: LegendComponent) { }\n\n    public ngAfterContentInit(): void {\n        if (this.legend) {\n            this.legend.activeChanged.subscribe((active: boolean) => this._active = active);\n\n            this.icon = this.icon || this.legend.seriesIcon;\n            this._active = this.legend.active;\n            this.interactive = this.legend.interactive;\n            this.isHorizontalClassApplied = this.legend.orientation === LegendOrientation.horizontal;\n        }\n    }\n\n    /**\n     * Emits an isSelectedChange event on series click if the series is in interactive mode\n     */\n    @HostListener(\"click\")\n    public onClick(): void {\n        if (this.interactive) {\n            this.isSelectedChange.next(!this.isSelected);\n        }\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a primary or secondary description\n     */\n    public hasInputDescription(): boolean {\n        return !_isEmpty(this.descriptionPrimary) || !_isEmpty(this.descriptionSecondary);\n    }\n\n    /**\n     * @returns boolean indicating whether the series has a projected description\n     */\n    public hasProjectedDescription(): boolean {\n        return !!this.projectedDescription && this.projectedDescription.nativeElement.children.length !== 0;\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                        {{ descriptionPrimary }}        {{ descriptionSecondary }}                    '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'LegendSeriesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineAccessors.html":{"url":"classes/LineAccessors.html","title":"class - LineAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/line-accessors.ts\n        \n\n            \n                Description\n            \n            \n                Accessor class supporting the LineRenderer, that defines required inputs acquired from data points.\nThis class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n\nIf colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\nkept in mind when configuring charts as it could cause potential color synchronization problems.\n\nSee referenced data and series interfaces for required properties.\n            \n\n            \n                Extends\n            \n            \n                        XYAccessors\n            \n\n            \n                Implements\n            \n            \n                            ILineAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider, markerProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ILineSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/line-accessors.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         XYAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         XYAccessors:14\n\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider, defaultMarkerProvider } from \"../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../core/common/types\";\nimport { IXYDataAccessors, XYAccessors } from \"../accessors/xy-accessors\";\n\nexport interface ILineDataAccessors extends IXYDataAccessors {\n    defined?: DataAccessor;\n}\n\n/**\n * Series accessors used in {@link LineAccessors}.\n */\nexport interface ILineSeriesAccessors {\n    /** Color of the series */\n    color?: SeriesAccessor;\n    /** Marker for the series */\n    marker?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface ILineAccessors extends IAccessors {\n    data: ILineDataAccessors;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: ILineSeriesAccessors;\n}\n\n/**\n * Accessor class supporting the {@link LineRenderer}, that defines required inputs acquired from data points.\n * This class includes default behavior for all required fields. It's using properties of the same name for data accessors.\n * \n * If colorProvider or markerProvider is not defined in the constructor, every new instance of LineAccessors will instantiate it's own, so that has to be\n * kept in mind when configuring charts as it could cause potential color synchronization problems.\n *\n * See referenced data and series interfaces for required properties.\n */\nexport class LineAccessors extends XYAccessors implements ILineAccessors {\n    public data: ILineDataAccessors;\n    public series: ILineSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider(), private markerProvider = defaultMarkerProvider()) {\n        super();\n\n        this.data.defined = (d: any, i) => d.hasOwnProperty(\"defined\") ? d.defined : true;\n\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n            marker: this.markerProvider ? this.markerProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LineSelectSeriesInteractionStrategy.html":{"url":"classes/LineSelectSeriesInteractionStrategy.html","title":"class - LineSelectSeriesInteractionStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LineSelectSeriesInteractionStrategy\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IHighlightStrategy\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                INTERACTION_MARGIN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            INTERACTION_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 8\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    series\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/line/interaction-strategies/line-select-series-interaction-strategy.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderer\n                                    \n                                                LineRenderer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, HIGHLIGHT_SERIES_EVENT, INTERACTION_SERIES_EVENT } from \"../../../constants\";\nimport { Scales } from \"../../../core/common/scales/types\";\nimport { D3Selection, IDataPoint, IDataSeries, InteractionType, IRendererEventPayload } from \"../../../core/common/types\";\nimport { IHighlightStrategy, IRenderSeries, RenderLayerName } from \"../../types\";\nimport { ILineAccessors } from \"../line-accessors\";\nimport { LineRenderer } from \"../line-renderer\";\n\nexport class LineSelectSeriesInteractionStrategy implements IHighlightStrategy {\n    public readonly INTERACTION_MARGIN = 8;\n\n    public draw(renderer: LineRenderer, renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[RenderLayerName.data];\n\n        let interactionPath: D3Selection = target.select(\"path.interaction\");\n\n        if (isNil(renderer.config.strokeWidth)) {\n            throw new Error(\"renderer.config.strokeWidth is not defined\");\n        }\n\n        if (interactionPath.empty()) {\n            interactionPath = target.append(\"path\")\n                .classed(\"interaction\", true)\n                .classed(`pointer-events pointer-events-click`, true)\n                .attrs({\n                    \"stroke-width\": renderer.config.strokeWidth + (2 * this.INTERACTION_MARGIN),\n                    \"stroke\": \"transparent\",\n                    \"fill\": \"none\",\n                })\n                .on(\"mouseenter\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        // TODO: doesn't work with empty data\n                        index: 0,\n                        data: renderSeries.dataSeries.data[0],\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"mouseleave\", () => {\n                    const dataPoint: Omit = {\n                        seriesId: renderSeries.dataSeries.id,\n                        dataSeries: renderSeries.dataSeries,\n                        index: DATA_POINT_NOT_FOUND,\n                    };\n\n                    rendererSubject.next({ eventName: HIGHLIGHT_SERIES_EVENT, data: dataPoint });\n                })\n                .on(\"click\", (d: any, i: number) => {\n                    this.emitEvent(renderer, INTERACTION_SERIES_EVENT, InteractionType.Click, renderSeries, d, i, rendererSubject);\n                });\n        }\n\n        renderer.drawLine(renderSeries, interactionPath);\n    }\n\n    // TODO: Get rid of this function or make it optional in interface\n    public getDataPointIndex(renderer: LineRenderer, series: IDataSeries, values: { [p: string]: any }, scales: Scales): number {\n        // @ts-ignore\n        return;\n    }\n\n    public highlightDataPoint(renderer: LineRenderer, renderSeries: IRenderSeries,\n                              dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    private emitEvent(renderer: LineRenderer, eventName: string, interactionType: InteractionType, renderSeries: IRenderSeries,\n                      data: any, i: number, rendererSubject: Subject) {\n        const dataPoint: IDataPoint = {\n            seriesId: renderSeries.dataSeries.id,\n            dataSeries: renderSeries.dataSeries,\n            index: i,\n            data: data,\n            position: renderer.getDataPointPosition(renderSeries.dataSeries, i, renderSeries.scales),\n        };\n        rendererSubject.next({\n            eventName: eventName,\n            data: {\n                interactionType: interactionType,\n                payload: dataPoint,\n            },\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinearScale.html":{"url":"classes/LinearScale.html","title":"class - LinearScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinearScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/linear-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleLinear\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/linear-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/linear-scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { scaleLinear } from \"d3-scale\";\n\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleLinear](https://d3indepth.com/scales/#scalelinear)\n */\nexport class LinearScale extends Scale {\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = value => value + \"\";\n    }\n\n    protected createD3Scale(): any {\n        return scaleLinear();\n    }\n\n    public convert(value: number): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): number {\n        return this._d3Scale.invert(coordinate);\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MappedValueProvider.html":{"url":"classes/MappedValueProvider.html","title":"class - MappedValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MappedValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/mapped-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(valueMap: literal type, defaultValue?: T)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/mapped-value-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        valueMap\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/mapped-value-provider.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/mapped-value-provider.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class MappedValueProvider implements IValueProvider {\n\n    constructor(private valueMap: { [key: string]: T }, private defaultValue?: T) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T | undefined =>\n        this.valueMap[entityId] || this.defaultValue\n\n    public reset(): void {\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MarkerUtils.html":{"url":"classes/MarkerUtils.html","title":"class - MarkerUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MarkerUtils\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/marker-utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                            \n                                    Static\n                                    Readonly\n                                MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                drawMarker\n                            \n                            \n                                    Static\n                                manageMarker\n                            \n                            \n                                    Static\n                                removeMarker\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARKER_CONTAINER_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:14\n                            \n                        \n\n                \n                    \n                        The default class for the marker's container \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            MARKER_PATH_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"marker-path\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/marker-utils.ts:17\n                            \n                        \n\n                \n                    \n                        The class used for the marker's svg path \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            drawMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    drawMarker(dataPoint: IDataPoint, marker: IChartMarker, color: string, target: D3Selection, dataPointSubject: Subject>, className: string, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                IDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    marker\n                                    \n                                                IChartMarker\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointSubject\n                                    \n                                                Subject>\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            manageMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    manageMarker(dataSeries: IDataSeries, scales: IXYScales, dataPointIndex: number, container: D3Selection, rendererSubject: Subject, markerInteractionConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:28\n                \n            \n\n\n            \n                \n                    This method impersonates marker related logic used in various renderers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    scales\n                                    \n                                                IXYScales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    container\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    markerInteractionConfig\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        DEFAULT_MARKER_INTERACTION_CONFIG\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeMarker\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMarker(target: D3Selection, className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/marker-utils.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UtilService } from \"@nova-ui/bits\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_INTERACTION_RESET, INTERACTION_DATA_POINT_EVENT } from \"../constants\";\nimport { isInRange } from \"../core/common/scales/helpers/is-in-range\";\nimport { IXYScales } from \"../core/common/scales/types\";\nimport { D3Selection, IAccessors, IChartMarker, IDataPoint, IDataSeries, IInteractionDataPointEvent, InteractionType, IRendererEventPayload } from \"../core/common/types\";\n\nimport { DEFAULT_MARKER_INTERACTION_CONFIG } from \"./constants\";\n\nexport class MarkerUtils {\n\n    /** The default class for the marker's container */\n    public static readonly DEFAULT_MARKER_CONTAINER_CLASS = \"marker\";\n\n    /** The class used for the marker's svg path */\n    public static readonly MARKER_PATH_CLASS = \"marker-path\";\n\n    /**\n     * This method impersonates marker related logic used in various renderers\n     *\n     * @param dataSeries\n     * @param scales\n     * @param dataPointIndex\n     * @param container\n     * @param rendererSubject\n     */\n    public static manageMarker(dataSeries: IDataSeries,\n                               scales: IXYScales,\n                               dataPointIndex: number,\n                               container: D3Selection,\n                               rendererSubject: Subject,\n                               markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG): void {\n        if (!container) {\n            throw new Error(\"Container doesn't exist!\");\n        }\n\n        if (dataSeries.data.length === 0) {\n            MarkerUtils.removeMarker(container);\n            return;\n        }\n\n        const accessors = dataSeries.accessors;\n\n        if (dataPointIndex ,\n                             dataPointSubject: Subject>,\n                             className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS,\n                             markerInteractionConfig = DEFAULT_MARKER_INTERACTION_CONFIG) {\n        let markerTarget: D3Selection | D3Selection = target.select(`g.${className}`);\n        const xCoord = dataPoint?.position?.x;\n        const yCoord = dataPoint?.position?.y;\n        const attrs = {\n            \"transform\": `translate(${xCoord}, ${yCoord})`,\n            \"cursor\": \"crosshair\",\n        };\n\n        const getPointerEventsClass = () => `${markerInteractionConfig.enabled ? \" pointer-events\" : \"\"}`;\n        const getPointerEventsClickClass = () => `${markerInteractionConfig.enabled && markerInteractionConfig.clickable ? \" pointer-events-click\" : \"\"}`;\n\n        if (markerTarget.empty()) {\n            markerTarget = target.append(\"g\")\n                .classed(`${className}${getPointerEventsClass()}${getPointerEventsClickClass()}`, true);\n        }\n\n        marker.setColor(color);\n        markerTarget.attrs(attrs);\n\n        markerTarget.on(\"mouseenter\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Hover, dataPoint } });\n        });\n        markerTarget.on(\"mouseleave\", () => {\n            dataPointSubject.next({\n                eventName: INTERACTION_DATA_POINT_EVENT,\n                data: {\n                    interactionType: InteractionType.Hover,\n                    dataPoint: {\n                        ...dataPoint,\n                        index: DATA_POINT_INTERACTION_RESET,\n                    },\n                },\n            });\n        });\n        markerTarget.on(\"click\", () => {\n            dataPointSubject.next({ eventName: INTERACTION_DATA_POINT_EVENT, data: { interactionType: InteractionType.Click, dataPoint } });\n        });\n\n        if (!(>markerTarget).selectAll(\"g > *\").size() && markerTarget.node()) {\n            markerTarget.node()?.appendChild(UtilService.getSvgFromString(marker.getSvg()));\n            (>markerTarget).select(\"path\").classed(MarkerUtils.MARKER_PATH_CLASS, true);\n        }\n\n        const path = (>markerTarget).select(\"path\").node() as HTMLElement;\n        if (path && markerInteractionConfig.enabled) {\n            // Hack to accommodate existing Firefox hack in MouseInteractiveArea\n            const pathRect = path.getBoundingClientRect();\n            // 'x' in this case represents the absolute position of the left side of the marker\n            path.setAttribute(\"x\", Math.ceil(((dataPoint?.position?.x as number) - pathRect.width / 2)).toString());\n            // 'y' in this case represents the absolute position of the top side of the marker\n            path.setAttribute(\"y\", Math.ceil(((dataPoint?.position?.y as number) - pathRect.height / 2)).toString());\n        }\n    }\n\n    public static removeMarker(target: D3Selection, className: string = MarkerUtils.DEFAULT_MARKER_CONTAINER_CLASS) {\n        target.select(`g.${className}`).remove();\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MissingDataLineRendererConfig.html":{"url":"classes/MissingDataLineRendererConfig.html","title":"class - MissingDataLineRendererConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MissingDataLineRendererConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/line/missing-data-line-renderer-config.ts\n        \n\n            \n                Description\n            \n            \n                Standard line renderer config for visualizing missing data \n\n            \n\n\n            \n                Implements\n            \n            \n                            ILineRendererConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                interactive\n                            \n                            \n                                    Public\n                                strokeStyle\n                            \n                            \n                                    Public\n                                strokeWidth\n                            \n                            \n                                    Public\n                                useEnhancedLineCaps\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : LineRenderer.getStrokeStyleDashed(1)\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            strokeWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            useEnhancedLineCaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/line/missing-data-line-renderer-config.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ILineRendererConfig } from \"../types\";\n\nimport { LineRenderer } from \"./line-renderer\";\n\n/** Standard line renderer config for visualizing missing data */\nexport class MissingDataLineRendererConfig implements ILineRendererConfig {\n    public strokeWidth = 1;\n    public interactive = false;\n    public strokeStyle = LineRenderer.getStrokeStyleDashed(1);\n    public useEnhancedLineCaps = true;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopAccessors.html":{"url":"classes/NoopAccessors.html","title":"class - NoopAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/noop-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            INoopAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/noop-accessors.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAccessors} from \"../../core/common/types\";\n\n\nexport interface INoopAccessors extends IAccessors {\n    data: any;\n    /** Series level accessors - e.g. for colors, markers, etc. */\n    series: any;\n}\n\nexport class NoopAccessors implements INoopAccessors {\n    public series: any;\n    public data: any;\n\n    constructor() {\n        this.series = undefined;\n        this.data = undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopRenderer.html":{"url":"classes/NoopRenderer.html","title":"class - NoopRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/noop-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw line chart\n\n            \n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:16\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:31\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:26\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/noop-renderer.ts:20\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Subject} from \"rxjs\";\n\nimport {Renderer} from \"../core/common/renderer\";\nimport {Scales} from \"../core/common/scales/types\";\nimport {IDataSeries, ILasagnaLayer, IPosition, IRendererEventPayload} from \"../core/common/types\";\n\nimport {INoopAccessors} from \"./accessors/noop-accessors\";\nimport {IRenderSeries} from \"./types\";\n\n/**\n * Renderer that is able to draw line chart\n */\nexport class NoopRenderer extends Renderer {\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#highlightDataPoint} */\n    public highlightDataPoint(renderSeries: IRenderSeries,\n                              dataPointIndex: number,\n                              rendererSubject: Subject): void {\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [];\n    }\n\n    /** See {@link Renderer#getDataPointPosition} */\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition {\n        // @ts-ignore\n        return;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoopScale.html":{"url":"classes/NoopScale.html","title":"class - NoopScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoopScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/noop-scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/noop-scale.ts:8\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \ndomain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:27\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            range\n                        \n                        \n                    \n                \n            \n            \n                \nrange(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:53\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/noop-scale.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/noop-scale.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IFormatters, IScale } from \"./types\";\n\nexport class NoopScale implements IScale {\n    public readonly id: string;\n    public formatters: IFormatters;\n    public isDomainFixed: boolean;\n\n    constructor(id?: string) {}\n\n    public convert(): number {\n        // @ts-ignore\n        return;\n    }\n\n    public invert(): T {\n        // @ts-ignore\n        return;\n    }\n\n    public get d3Scale(): AxisScale {\n        // @ts-ignore\n        return;\n    }\n\n    range(): [number, number];\n    range(range: [number, number]): this;\n    range(range?: [number, number]): [number, number] | this {\n        // @ts-ignore\n        return;\n    }\n\n    domain(): T[];\n    domain(domain: T[]): this;\n    domain(domain?: T[]): any {\n        // @ts-ignore\n        return;\n    }\n\n    public fixDomain(domain: any[]): null {\n        return null;\n    }\n\n    public isContinuous(): boolean {\n        return false;\n    }\n\n    public isDomainValid(): boolean {\n        return true;\n    }\n\n    public reverse(): this {\n        // @ts-ignore\n        return;\n    }\n\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        // @ts-ignore\n        return;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NuiChartsModule.html":{"url":"modules/NuiChartsModule.html","title":"module - NuiChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NuiChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        API\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n                \n                    EntryComponents\n                    \n                        \n                            ChartTooltipComponent\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ChartCollectionService\n                        \n                        \n                            ThresholdsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BasicLegendTileComponent\n                        \n                        \n                            ChartCollectionIdDirective\n                        \n                        \n                            ChartComponent\n                        \n                        \n                            ChartDonutContentComponent\n                        \n                        \n                            ChartMarkerComponent\n                        \n                        \n                            ChartPopoverComponent\n                        \n                        \n                            ChartTooltipComponent\n                        \n                        \n                            ChartTooltipsComponent\n                        \n                        \n                            LegendComponent\n                        \n                        \n                            LegendSeriesComponent\n                        \n                        \n                            RichLegendTileComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { NgModule } from \"@angular/core\";\n// This is not technically used here, but it does pull in the type for $localize\nimport { LocalizeFn } from \"@angular/localize/init\";\nimport { NuiCommonModule, NuiIconModule, NuiPopoverModule } from \"@nova-ui/bits\";\nimport \"d3-selection-multi\";\n\nimport { ChartCollectionIdDirective } from \"./chart-collection/chart-collection-id.directive\";\nimport { ChartCollectionService } from \"./chart-collection/chart-collection.service\";\nimport { ChartDonutContentComponent } from \"./chart-donut-content/chart-donut-content.component\";\nimport { ChartMarkerComponent } from \"./chart-marker/chart-marker.component\";\nimport { ChartPopoverComponent } from \"./chart-popover/chart-popover.component\";\nimport { ChartTooltipComponent } from \"./chart-tooltips/chart-tooltip.component\";\nimport { ChartTooltipDirective } from \"./chart-tooltips/chart-tooltip.directive\";\nimport { ChartTooltipsComponent } from \"./chart-tooltips/chart-tooltips.component\";\nimport { ChartComponent } from \"./chart/chart.component\";\nimport { GaugeComponent } from \"./gauge/gauge.component\";\nimport { LegendSeriesComponent } from \"./legend/legend-series/legend-series.component\";\nimport { BasicLegendTileComponent } from \"./legend/legend-tile/basic-legend-tile/basic-legend-tile.component\";\nimport { RichLegendTileComponent } from \"./legend/legend-tile/rich-legend-tile/rich-legend-tile.component\";\nimport { LegendComponent } from \"./legend/legend.component\";\nimport { ThresholdsService } from \"./thresholds/thresholds-service\";\n\n@NgModule({\n    imports: [\n        NuiCommonModule,\n        NuiIconModule,\n        NuiPopoverModule,\n        OverlayModule,\n    ],\n    declarations: [\n        LegendComponent,\n        LegendSeriesComponent,\n        BasicLegendTileComponent,\n        RichLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n        GaugeComponent,\n    ],\n    exports: [\n        LegendComponent,\n        LegendSeriesComponent,\n        RichLegendTileComponent,\n        BasicLegendTileComponent,\n        ChartComponent,\n        ChartCollectionIdDirective,\n        ChartMarkerComponent,\n        ChartPopoverComponent,\n        ChartDonutContentComponent,\n        ChartTooltipsComponent,\n        ChartTooltipComponent,\n        ChartTooltipDirective,\n        GaugeComponent,\n    ],\n    providers: [\n        ChartCollectionService,\n        ThresholdsService,\n    ],\n    entryComponents: [\n        ChartTooltipComponent,\n    ],\n})\nexport class NuiChartsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PathMarker.html":{"url":"classes/PathMarker.html","title":"class - PathMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PathMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/path-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided data for svg path\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                element\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(d: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/path-marker.ts:9\n                            \n                        \n\n                \n                    \n                            Creates an instance of PathMarker.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        d\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                value that has to be assigned to 'd' attribute of 'path' element in svg\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            element\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HTMLElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/markers/path-marker.ts:8\n                            \n                        \n\n                \n                    \n                        Resulting  HTMLElement \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/path-marker.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided data for svg path\n */\nexport class PathMarker implements IChartMarker {\n    /** Resulting  HTMLElement */\n    public element: HTMLElement;\n    protected svg: string;\n\n    /**\n     * Creates an instance of PathMarker.\n     * @param {string} d value that has to be assigned to 'd' attribute of 'path' element in svg\n     * @memberof PathMarker\n     */\n    constructor(d: string) {\n        this.element = document.createElement(\"path\");\n\n        this.setAttributes({\n            \"class\": \"nui-chart-element-marker nui-chart--path__outline\",\n            \"vector-effect\": \"non-scaling-stroke\",\n            \"d\": d,\n        });\n    }\n\n    public setColor(color: string): void {\n        this.setAttributes({\"fill\": color});\n    }\n\n    private setAttributes(attrs: { [key: string]: string }) {\n        for (const attr of Object.keys(attrs)) {\n            this.element.setAttribute(attr, attrs[attr]);\n        }\n\n        this.updateSvg();\n    }\n\n    public getSvg(): string {\n        return this.svg;\n    }\n\n    protected updateSvg() {\n        this.svg = this.element.outerHTML;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PieRenderer.html":{"url":"classes/PieRenderer.html","title":"class - PieRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PieRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/pie-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Renderer that is able to draw pie chart\n\n            \n\n            \n                Extends\n            \n            \n                        RadialRenderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                draw\n                            \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getInnerRadius\n                            \n                            \n                                    Public\n                                getOuterRadius\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         RadialRenderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         RadialRenderer:41\n\n                            \n                        \n\n                \n                    \n                        Renderer configuration object. Defaults to `DEFAULT_RADIAL_RENDERER_CONFIG` constant value.\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:47\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:133\n\n                \n            \n\n\n            \n                \n                    See Renderer \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInnerRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInnerRadius(range: number[], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:149\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOuterRadius\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOuterRadius(range: [number, number], index: number)\n                \n            \n\n\n            \n                \n                    Inherited from         RadialRenderer\n\n                \n            \n            \n                \n                        Defined in         RadialRenderer:156\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Arc, DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"./radial-renderer\";\n\n/**\n * Renderer that is able to draw pie chart\n */\nexport class PieRenderer extends RadialRenderer {\n    protected getArc(range: [number, number], arc: Arc, index: number) {\n        return arc.outerRadius(range[1] - range[0])\n            .innerRadius(0);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProcessedColorProvider.html":{"url":"classes/ProcessedColorProvider.html","title":"class - ProcessedColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProcessedColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/processed-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider processes values provided by the source provider using the given function.\nExamples would be darken, lighten, reduce opacity, etc.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, fn: (input: string) => void)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/processed-color-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fn\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/processed-color-provider.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/processed-color-provider.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This color provider processes values provided by the source provider using the given function.\n * Examples would be darken, lighten, reduce opacity, etc.\n */\nexport class ProcessedColorProvider implements IValueProvider {\n\n    private processedColors: { [key: string]: string };\n\n    constructor(private sourceProvider: IValueProvider, private fn: (input: string) => string) {\n        this.reset();\n    }\n\n    public get = (entityId: string): string => {\n        const clr = this.sourceProvider.get(entityId);\n\n        if (!clr) {\n            throw new Error(\"clr is not defined\");\n        }\n\n        let processedColor = this.processedColors[clr];\n        if (!processedColor) {\n            processedColor = this.fn(clr);\n            this.processedColors[clr] = processedColor;\n        }\n        return processedColor;\n    }\n\n    public reset(): void {\n        this.processedColors = {};\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialAccessors.html":{"url":"classes/RadialAccessors.html","title":"class - RadialAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/radial/accessors/radial-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRadialAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/radial/accessors/radial-accessors.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { defaultColorProvider } from \"../../../core/common/palette/default-providers\";\nimport { DataAccessor, IAccessors, SeriesAccessor } from \"../../../core/common/types\";\n\nexport interface IRadialDataAccessors {\n    value: DataAccessor;\n    color?: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport interface IRadialSeriesAccessors {\n    color?: SeriesAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: SeriesAccessor | undefined;\n}\n\nexport interface IRadialAccessors extends IAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n}\n\nexport class RadialAccessors implements IRadialAccessors {\n    data: IRadialDataAccessors;\n    series: IRadialSeriesAccessors;\n\n    constructor(private colorProvider = defaultColorProvider()) {\n        this.data = {\n            value: (d: any) => Number.isFinite(d) ? d : d.value,\n        };\n        this.series = {\n            color: this.colorProvider ? this.colorProvider.get : undefined,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialPopoverPlugin.html":{"url":"classes/RadialPopoverPlugin.html","title":"class - RadialPopoverPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialPopoverPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/radial-popover-plugin.ts\n        \n\n            \n                Description\n            \n            \n                Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartPopoverPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closePopoverSubject\n                            \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                openPopoverSubject\n                            \n                            \n                                    Public\n                                popoverTargetPosition\n                            \n                            \n                                    Public\n                                updatePositionSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            closePopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:34\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should close \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:51\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:28\n\n                            \n                        \n\n                \n                    \n                        Info about the data point(s) received in the most recent interaction event \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IPopoverPluginConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        eventStreamId: INTERACTION_DATA_POINTS_EVENT,\n        interactionType: InteractionType.MouseMove,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:43\n\n                            \n                        \n\n                \n                    \n                        The default plugin configuration \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            openPopoverSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:32\n\n                            \n                        \n\n                \n                    \n                        Emits an event indicating the popover should open \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            popoverTargetPosition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IElementPosition\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:36\n\n                            \n                        \n\n                \n                    \n                        The target position of the popover \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            updatePositionSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:30\n\n                            \n                        \n\n                \n                    \n                        Emits the popover's target position \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPopoverPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPopoverPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:68\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPopoverPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPopoverPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ChartPopoverPlugin} from \"./chart-popover-plugin\";\n\n/**\n * Extends ChartPopoverPlugin to handle popover positioning for radial charts.\n */\nexport class RadialPopoverPlugin extends ChartPopoverPlugin {\n    protected getAbsolutePosition(valArr: any[]) {\n        const chartElement: any = this.chart.target?.node()?.parentNode; // the one above svg\n\n        if (!chartElement) {\n            throw new Error(\"Chart parent node is not defined\");\n        }\n\n        const dataPointsLeft = Math.min(...valArr.map(d => d.position.x));\n        const dataPointsTop = Math.min(...valArr.map(d => d.position.y));\n        const left = chartElement.offsetLeft + this.chart.getGrid().config().dimension.margin.left\n            + dataPointsLeft + this.chart.getGrid().config().dimension.width() / 2;\n        const top = chartElement.offsetTop + dataPointsTop + this.chart.getGrid().config().dimension.height() / 2;\n        return {\n            top: top,\n            left: left,\n            height: 0,\n            width: 0,\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RadialTooltipsPlugin.html":{"url":"classes/RadialTooltipsPlugin.html","title":"class - RadialTooltipsPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RadialTooltipsPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/tooltips/radial-tooltips-plugin.ts\n        \n\n            \n                Description\n            \n            \n                This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n\n            \n\n            \n                Extends\n            \n            \n                        ChartTooltipsPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dataPointPositions\n                            \n                            \n                                    Public\n                                dataPoints\n                            \n                            \n                                    Public\n                                hideSubject\n                            \n                            \n                                    Public\n                                orientation\n                            \n                            \n                                    Public\n                                showSubject\n                            \n                            \n                                    Public\n                                chart\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                processHighlightedDataPoints\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPointPositions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:65\n\n                            \n                        \n\n                \n                    \n                        Calculated positions for the data point tooltips \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:63\n\n                            \n                        \n\n                \n                    \n                        Highlighted data points received from the chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hideSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:75\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to hide tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            orientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"right\" | \"top\"\n\n                        \n                    \n                    \n                        \n                            Default value : \"right\"\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:88\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            showSubject\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Subject()\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:70\n\n                            \n                        \n\n                \n                    \n                        This publishes an event to show tooltips\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartTooltipsPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartTooltipsPlugin:7\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:98\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            processHighlightedDataPoints\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    processHighlightedDataPoints(dataPoints: IDataPointsPayload)\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:131\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoints\n                                    \n                                                IDataPointsPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartTooltipsPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartTooltipsPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConnectedPosition } from \"@angular/cdk/overlay\";\nimport { DefaultArcObject } from \"d3-shape\";\n\nimport { RadialRenderer } from \"../../../renderers/radial/radial-renderer\";\nimport { IAccessors, IChartSeries, IDataPoint, IPosition } from \"../../common/types\";\n\nimport { ChartTooltipsPlugin, ITooltipPosition } from \"./chart-tooltips-plugin\";\n\n/**\n * The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\n * on the source element for the tooltip position starting with EAST and going clockwise)\n */\nconst CONNECTION_POINTS: { x: \"start\" | \"center\" | \"end\", y: \"top\" | \"center\" | \"bottom\" }[] =\n    [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ];\n\n/** This conversion map is used to calculate the opposite connection points for the tooltip element */\nconst OPPOSITE: { [key: string]: string } = {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n};\n\n/**\n * This radial tooltips plugin handles special tooltip positioning requirements for donut / pie charts.\n */\nexport class RadialTooltipsPlugin extends ChartTooltipsPlugin {\n\n    protected getTooltipPosition(dataPoint: IDataPoint, chartSeries: IChartSeries): ITooltipPosition {\n        const pieArcData: DefaultArcObject = dataPoint.data;\n        const renderer = chartSeries.renderer;\n        const rScale = chartSeries.scales.r;\n        // this calculation was taken from the radial renderer implementation\n        const outerRadius = renderer.getOuterRadius(rScale.range(), dataPoint.index);\n\n        const r = outerRadius + this.tooltipPositionOffset;\n        // pie charts start on the top, so we need to subtract Math.PI / 2\n        const a = (pieArcData.startAngle + pieArcData.endAngle) / 2 - Math.PI / 2;\n\n        return {\n            x: Math.cos(a) * r,\n            y: Math.sin(a) * r,\n            width: 0,\n            height: 0,\n            overlayPositions: [this.getOverlayPosition(a)],\n        };\n    }\n\n    protected getAbsolutePosition(relativePosition: ITooltipPosition, chartPosition: IPosition): ITooltipPosition {\n        const absolutePosition = super.getAbsolutePosition(relativePosition, chartPosition);\n\n        // radial grid is shifted so that the origin is located in the middle of the rendering area,\n        // so we need to add it back when we're emitting absolute positions for the tooltips\n        absolutePosition.x += this.chart.getGrid().config().dimension.width() / 2;\n        absolutePosition.y += this.chart.getGrid().config().dimension.height() / 2;\n\n        return absolutePosition;\n    }\n\n    /**\n     * Calculate the position for the tooltip overlay based on the angle of the pie slice\n     *\n     * @param {number} angle in radians\n     */\n    private getOverlayPosition(angle: number): ConnectedPosition {\n        const sectionIndex = this.getSectionIndex(angle, 8);\n\n        return {\n            originX: CONNECTION_POINTS[sectionIndex].x,\n            originY: CONNECTION_POINTS[sectionIndex].y,\n            overlayX: this.opposite(CONNECTION_POINTS[sectionIndex].x),\n            overlayY: this.opposite(CONNECTION_POINTS[sectionIndex].y),\n        };\n    }\n\n    /**\n     * Calculates what section of the circle does the given angle belong to\n     *\n     * @param {number} angle in radians\n     * @param {number} sections The number of sections the circle is divided into\n     */\n    private getSectionIndex(angle: number, sections: number) {\n        let sectionIndex = Math.round(angle / (Math.PI * 2 / sections)) % sections;\n        while (sectionIndex \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RectangleAccessors.html":{"url":"classes/RectangleAccessors.html","title":"class - RectangleAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RectangleAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/rectangle-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IRectangleAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/rectangle-accessors.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors, IDataAccessors, ISeriesAccessors, SeriesAccessor } from \"../../core/common/types\";\n\nexport interface IStartEndRangeAccessors extends IDataAccessors {\n    start: DataAccessor;\n    end: DataAccessor;\n}\n\nexport interface IValueThicknessAccessors extends IDataAccessors {\n    value: DataAccessor;\n    thickness: DataAccessor;\n}\n\nexport interface IRectangleDataAccessors extends IDataAccessors {\n    startX?: DataAccessor;\n    endX?: DataAccessor;\n    thicknessX?: DataAccessor;\n\n    startY?: DataAccessor;\n    endY?: DataAccessor;\n    thicknessY?: DataAccessor;\n}\n\nexport interface IRectangleSeriesAccessors extends ISeriesAccessors {\n    color?: SeriesAccessor;\n    marker?: SeriesAccessor;\n}\n\nexport interface IRectangleAccessors extends IAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n}\n\nexport class RectangleAccessors implements IRectangleAccessors {\n    data: IRectangleDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor() {\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Renderer.html":{"url":"classes/Renderer.html","title":"class - Renderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Renderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/renderer.ts\n        \n\n            \n                Description\n            \n            \n                The abstract base class for chart renderers with some limited default functionality\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IRendererConfig)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/renderer.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IRendererConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:95\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/renderer.ts:45\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:53\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:170\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:74\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:63\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:153\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:129\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:190\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:85\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:117\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/renderer.ts:108\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { extent, Numeric } from \"d3-array\";\nimport { Selection } from \"d3-selection\";\nimport { ValueMap } from \"d3-selection-multi\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport each from \"lodash/each\";\nimport get from \"lodash/get\";\nimport isNil from \"lodash/isNil\";\nimport { Subject } from \"rxjs\";\n\nimport { DATA_POINT_NOT_FOUND, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { IRenderSeries, RenderLayerName, RenderState } from \"../../renderers/types\";\n\nimport { EMPTY_CONTINUOUS_DOMAIN, IScale, Scales } from \"./scales/types\";\nimport { D3Selection, IAccessors, IDataPoint, IDataSeries, ILasagnaLayer, IPosition, IRenderContainers, IRendererConfig, IRendererEventPayload } from \"./types\";\n\n/**\n * The abstract base class for chart renderers with some limited default functionality\n */\n// For why the \"dynamic\" decorator is used see https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\nexport abstract class Renderer {\n\n    public static readonly DEFAULT_CONFIG: IRendererConfig = {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    };\n\n    constructor(public config: IRendererConfig = {}) {\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, Renderer.DEFAULT_CONFIG);\n    }\n\n    public interaction: Record = {};\n\n    /**\n     * Draw the visual representation of the provided data series\n     *\n     * @param {IRenderSeries} renderSeries The series to render\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public abstract draw(renderSeries: IRenderSeries, rendererSubject: Subject): void;\n\n    /**\n     * Return position of a specified datapoint\n     *\n     * @param {IDataSeries} dataSeries\n     * @param {number} index\n     * @param {Scales} scales\n     * @returns {IPosition}\n     */\n    public abstract getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined;\n\n    /**\n     * Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n     *\n     * @param {IDataSeries} series series from which to determine the index corresponding to the specified values\n     * @param {{ [axis: string]: any }} values the values from which a data point index can be determined\n     * @param {Scales} scales the scales to be used in the index calculation\n     *\n     * @returns {number} negative value means that index is not found\n     */\n    public getDataPointIndex(series: IDataSeries, values: { [axis: string]: any }, scales: Scales): number {\n        return DATA_POINT_NOT_FOUND;\n    }\n\n    /**\n     * Highlight the data point corresponding to the specified data point index\n     *\n     * @param {IRenderSeries} renderSeries The series on which to render the data point highlight\n     * @param {number} dataPointIndex index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n     * @param {Subject} rendererSubject A subject to optionally invoke for emitting events regarding a data point\n     */\n    public highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject): void {\n    }\n\n    /**\n     * Get the style attributes for the specified state that we need to apply to a series container\n     *\n     * @param {RenderState} state the state for which to retrieve container styles\n     *\n     * @returns {ValueMap} the container styles for the specified state\n     */\n    public getContainerStateStyles = (state: RenderState): ValueMap => {\n        if (!this.config.stateStyles) {\n            throw new Error(\"stateStyles property is not defined\");\n        }\n        return this.config.stateStyles[state || RenderState.default];\n    }\n\n    /**\n     * Set the RenderState of the target data series\n     *\n     * @param {IRenderContainers} renderContainers the render containers of the series\n     * @param {RenderState} state The new state for the target series\n     */\n    public setSeriesState(renderContainers: IRenderContainers, state: RenderState): void {\n    }\n\n    /**\n     * Set the RenderState of the target data point\n     *\n     * @param {D3Selection} target the target data point\n     * @param {RenderState} state The new state for the target data point\n     */\n    public setDataPointState(target: D3Selection, state: RenderState): void {\n    }\n\n    /**\n     * Calculate domain for data filtered by given filterScales\n     *\n     * @param dataSeries\n     * @param filterScales\n     * @param scaleKey\n     * @param scale\n     * @returns array of datapoints from dataSeries filtered by domains of given filterScales\n     */\n    public getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale): any[] {\n        let filteredData = dataSeries.data;\n        for (const fixedScaleKey of Object.keys(filterScales)) {\n            const filterScale = filterScales[fixedScaleKey];\n            if (!filterScale.isDomainFixed || !filterScale.isContinuous()) {\n                continue;\n            }\n\n            filteredData = this.filterDataByDomain(filteredData, dataSeries, fixedScaleKey, filterScale.domain());\n        }\n\n        return this.getDomain(filteredData, dataSeries, scaleKey, scale);\n    }\n\n    /**\n     * Calculate the domain using the data of a series\n     *\n     * @param {any[]} data source data, can be filtered\n     * @param dataSeries related data series\n     * @param {string} scaleName name of the scale for which domain calculation is needed\n     * @param scale\n     *\n     * @returns {[any, any]} min and max values as an array\n     */\n    public getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale): any[] {\n        if (!data || data.length === 0) {\n            return EMPTY_CONTINUOUS_DOMAIN;\n        }\n\n        return extent(data,\n            (datum, index, arr) => dataSeries.accessors.data?.[scaleName]?.(datum, index, Array.from(arr), dataSeries));\n    }\n\n    /**\n     * Filters given dataset by domain of provided scale\n     *\n     * @param data\n     * @param dataSeries\n     * @param scaleName\n     * @param domain\n     */\n    public filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[]): any[] {\n        const accessor = dataSeries.accessors.data?.[scaleName];\n\n        // if (isNil(accessor)) {\n        //     throw new Error(\"accessor is not defined\");\n        // }\n\n\n        return data.filter((d, i) => {\n            // @ts-ignore\n            const value = accessor(d, i, data, dataSeries);\n            return value >= domain[0] && value ,\n                               dataPointSubject: Subject, dataPoint: Partial) {\n        const eventList: string[] = get(this.interaction, path, {})[nativeEvent];\n        if (!eventList) {\n            return;\n        }\n\n        each(eventList, (targetEvent: string) => {\n            target.on(nativeEvent, () => {\n                const bbox = target.node().getBoundingClientRect();\n                dataPointSubject.next({\n                    eventName: targetEvent,\n                    data: {\n                        ...dataPoint,\n                        position: bbox,\n                    },\n                });\n            });\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RichLegendTileComponent.html":{"url":"components/RichLegendTileComponent.html","title":"component - RichLegendTileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  RichLegendTileComponent\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    AfterContentInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n            \n                encapsulation\n                ViewEncapsulation.Emulated\n            \n\n\n\n\n\n\n\n\n\n            \n                selector\n                nui-rich-legend-tile\n            \n\n            \n                styleUrls\n                ./rich-legend-tile.component.less\n            \n\n\n\n            \n                templateUrl\n                ./rich-legend-tile.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                seriesHasAdditionalContent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasInputUnitLabel\n                            \n                            \n                                    Public\n                                hasInputValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                backgroundColor\n                            \n                            \n                                color\n                            \n                            \n                                unitLabel\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(legendSeries: LegendSeriesComponent, legend: LegendComponent, changeDetector: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        legendSeries\n                                                  \n                                                        \n                                                                        LegendSeriesComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legend\n                                                  \n                                                        \n                                                                        LegendComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changeDetector\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        backgroundColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:37\n                            \n                        \n                \n                    \n                        The series color\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        color\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:42\n                            \n                        \n                \n                    \n                        Color for the text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unitLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:27\n                            \n                        \n                \n                    \n                        The series unit label\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:32\n                            \n                        \n                \n                    \n                        The current value of the series\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputUnitLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputUnitLabel()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasInputValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasInputValue()\n                \n            \n\n\n            \n                \n                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seriesHasAdditionalContent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/legend/legend-tile/rich-legend-tile/rich-legend-tile.component.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Host,\n    Input,\n    Optional,\n    ViewEncapsulation\n} from \"@angular/core\";\nimport _isNil from \"lodash/isNil\";\n\nimport { LegendSeriesComponent } from \"../../legend-series/legend-series.component\";\nimport { LegendComponent } from \"../../legend.component\";\n\n@Component({\n    selector: \"nui-rich-legend-tile\",\n    templateUrl: \"./rich-legend-tile.component.html\",\n    styleUrls: [\"./rich-legend-tile.component.less\"],\n    encapsulation: ViewEncapsulation.Emulated,\n})\nexport class RichLegendTileComponent implements AfterContentInit, AfterViewInit {\n    /**\n     * The series unit label\n     */\n    @Input() public unitLabel: string;\n\n    /**\n     * The current value of the series\n     */\n    @Input() public value: string;\n\n    /**\n     * The series color\n     */\n    @Input() public backgroundColor: string;\n\n    /**\n     * Color for the text\n     */\n    @Input() public color: string;\n\n    public seriesHasAdditionalContent: boolean;\n\n    constructor(@Host() private legendSeries: LegendSeriesComponent,\n                @Optional() @Host() private legend: LegendComponent,\n                private changeDetector: ChangeDetectorRef) { }\n\n    public ngAfterContentInit() {\n        if (this.legend) {\n            this.unitLabel = this.unitLabel || this.legend.seriesUnitLabel;\n            this.backgroundColor = this.backgroundColor || this.legend.seriesColor || \"white\";\n        }\n    }\n\n    public ngAfterViewInit() {\n        if (this.legendSeries) {\n            this.seriesHasAdditionalContent = this.legendSeries.hasInputDescription() || this.legendSeries.hasProjectedDescription();\n            this.changeDetector.detectChanges();\n        }\n    }\n\n    public hasInputValue() {\n        return !_isNil(this.value);\n    }\n\n    public hasInputUnitLabel() {\n        return !_isNil(this.unitLabel);\n    }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' 0\"     [class.nui-rich-legend-tile--series-has-additional-content]=\"seriesHasAdditionalContent\">                        {{ value }}                            {{ unitLabel }}                                                            '\n    var COMPONENTS = [{'name': 'BasicLegendTileComponent', 'selector': 'nui-basic-legend-tile'},{'name': 'ChartComponent', 'selector': 'nui-chart'},{'name': 'ChartDonutContentComponent', 'selector': 'nui-chart-donut-content'},{'name': 'ChartMarkerComponent', 'selector': 'nui-chart-marker'},{'name': 'ChartPopoverComponent', 'selector': 'nui-chart-popover'},{'name': 'ChartTooltipComponent', 'selector': 'nui-chart-tooltip'},{'name': 'ChartTooltipsComponent', 'selector': 'nui-chart-tooltips'},{'name': 'LegendComponent', 'selector': 'nui-legend'},{'name': 'LegendSeriesComponent', 'selector': 'nui-legend-series'},{'name': 'RichLegendTileComponent', 'selector': 'nui-rich-legend-tile'}];\n    var DIRECTIVES = [{'name': 'ChartCollectionIdDirective', 'selector': '[nuiChartCollectionId]'}];\n    var ACTUAL_COMPONENT = {'name': 'RichLegendTileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Scale.html":{"url":"classes/Scale.html","title":"class - Scale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Scale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/scale.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IScale\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    d3Scale\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/scales/scale.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:55\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:67\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:74\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:43\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:78\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:83\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/scale.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        d3Scale\n                    \n                \n\n                \n                    \n                        getd3Scale()\n                    \n                \n                            \n                                \n                                    Defined in src/core/common/scales/scale.ts:38\n                                \n                            \n                    \n                        \n                                See IScale \n\n\n                                \n                                    Returns :         AxisScale\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { UtilityService } from \"../utility.service\";\n\nimport { getAutomaticDomain } from \"./domain-calculation/automatic-domain\";\nimport { DomainCalculator, IFormatters, IScale } from \"./types\";\n\nexport abstract class Scale implements IScale {\n\n    public readonly id: string;\n    public domainCalculator: DomainCalculator = getAutomaticDomain;\n    public formatters: IFormatters = {};\n    public isDomainFixed: boolean;\n    private isReversed = false;\n\n    protected readonly _d3Scale: any;\n\n    protected constructor(id?: string) {\n        this.id = id || UtilityService.uuid();\n\n        this._d3Scale = this.createD3Scale();\n    }\n\n    /**\n     * Creates a d3 scale based on the scale's type\n     *\n     * @returns {any} A new d3 scale appropriate to the scale type\n     */\n    protected abstract createD3Scale(): any;\n\n    public abstract convert(value: T): number;\n\n    public abstract invert(coordinate: number): T | undefined;\n\n    public abstract isContinuous(): boolean;\n\n    /** See {@link IScale#d3Scale} */\n    public get d3Scale(): AxisScale {\n        return this._d3Scale;\n    }\n\n    /** See {@link IScale#range} */\n    public range(): [number, number];\n    public range(range: [number, number]): this;\n    public range(range?: [number, number]): any {\n        if (range) {\n            this._d3Scale.range(this.isReversed ? range.reverse() : range);\n            return this;\n        } else {\n            return this._d3Scale.range();\n        }\n    }\n\n    /** See {@link IScale#domain} */\n    public domain(): T[];\n    public domain(domain: T[]): this;\n    public domain(domain?: T[]): any {\n        if (domain) {\n            this._d3Scale.domain(domain);\n            return this;\n        } else {\n            return this._d3Scale.domain();\n        }\n    }\n\n    /** See {@link IScale#fixDomain} */\n    public fixDomain(domain: T[]): this {\n        this.domain(domain);\n        this.isDomainFixed = true;\n        return this;\n    }\n\n    /** See {@link IScale#reverse} */\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => value === undefined);\n    }\n\n    public reverse(): this {\n        return this.reversed(!this.isReversed);\n    }\n\n    /** See {@link IScale#reversed} */\n    public reversed(): boolean;\n    public reversed(reversed: boolean): this;\n    public reversed(reversed?: boolean): boolean | this {\n        if (typeof reversed === \"undefined\") {\n            return this.isReversed;\n        } else {\n            this.isReversed = reversed;\n            return this;\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScalesIndex.html":{"url":"interfaces/ScalesIndex.html","title":"interface - ScalesIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScalesIndex\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/types.ts\n        \n\n            \n                Description\n            \n            \n                Dictionary of scale collections in index and array form \n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    literal type\n\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/types.ts:25\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\n\nimport { IAccessors, IChartSeries } from \"../types\";\n\n/** Domain for series with empty or null data */\nexport const EMPTY_CONTINUOUS_DOMAIN = [0, 0];\n/** A reasonable non-data-driven domain for charts  */\nexport const NORMALIZED_DOMAIN = [0, 1];\n\n/** Signature for domain calculator */\nexport type DomainCalculator = (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => any[];\n\n/** Interface for scale formatters */\nexport interface IFormatters {\n    /** Formatter for tick labels */\n    tick?: Formatter;\n    /** Additional formatters */\n    [p: string]: Formatter | undefined;\n}\n\n/** Signature for label formatters */\nexport type Formatter = (value: T) => string;\n\n/** Dictionary of scale collections in index and array form */\nexport interface ScalesIndex {\n    [key: string]: {\n        /** Scale collection as an index */\n        index: { [scaleId: string]: IScale };\n        /** Scale collection as an array */\n        list: IScale[];\n    };\n}\n\n/** Dictionary of scales */\nexport type Scales = Record>;\n\nexport interface IXYScales extends Scales {\n    x: IScale;\n    y: IScale;\n}\n\nexport interface IRadialScales extends Scales {\n    r: IScale;\n}\n\n/** Interface for a scale */\nexport interface IScale {\n    /** The scale identifier */\n    readonly id: string;\n    readonly d3Scale: AxisScale; // TODO: maybe AxisScale is to narrow?\n\n    /** If this flag is enabled, the domain of this scale is not recalculated */\n    isDomainFixed?: boolean;\n    /** Method used to calculate the scale's domain */\n    domainCalculator?: DomainCalculator;\n    /** The scales formatters */\n    formatters: IFormatters;\n    /** If this flag is enabled, the domain has been recalculated with ticks in mind */\n    __domainCalculatedWithTicks?: boolean;\n\n    /**\n     * Determines if the scale's domain is continuous\n     *\n     * @returns {boolean} true if the scale's domain is continuous (numeric), false otherwise\n     */\n    isContinuous(): boolean;\n\n    /**\n     * Determines if the scale's domain is valid\n     *\n     * @returns {boolean} true if the scale's domain is valid, false otherwise\n     */\n    isDomainValid(): boolean;\n\n    /**\n     * Converts a value to its corresponding coordinate\n     *\n     * @param {T} value The value to be converted\n     * @returns {number} The coordinate corresponding to the specified value\n     */\n    convert(value: T): number;\n\n    /**\n     * Converts a coordinate to its corresponding value\n     *\n     * @param {number} coordinate The coordinate to be converted\n     * @returns {T} The value corresponding to the specified coordinate\n     */\n    invert(coordinate: number): T | undefined;\n\n    /**\n     * Gets the scale's range\n     *\n     * @returns {[number, number]} The scale's range\n     */\n    range(): [number, number];\n\n    /**\n     * Sets the scale's range\n     *\n     * @param {[number, number]} range The scale's new range\n     */\n    range(range: [number, number]): this;\n\n    /**\n     * Gets the scale's domain\n     *\n     * @returns {T[]} The scale's domain\n     */\n    domain(): T[];\n\n    /**\n     * Sets the scale's domain\n     *\n     * @param {T[]} domain The scale's new domain\n     */\n    domain(domain: T[]): this;\n\n    /**\n     * Shorthand method for setting the domain and isDomainFixed at once\n     *\n     * @param {T[]} domain The scale's fixed domain\n     */\n    fixDomain(domain: T[]): void;\n\n    /**\n     * Reverse the scale orientation by toggling the reversed flag\n     */\n    reverse(): this;\n\n    /**\n     * Getter for the reversed flag (see #reverse)\n     */\n    reversed(): boolean;\n\n    /**\n     * Setter for the reversed flag (see #reverse)\n     *\n     * @param reversed\n     */\n    reversed(reversed: boolean): this;\n}\n\n\nexport interface IBandScale extends IScale {\n    bandwidth(): number;\n}\n\nexport function isBandScale(scale: any): scale is IBandScale {\n    return typeof scale.bandwidth === \"function\";\n}\n\nexport interface IHasInnerScale extends IScale {\n    innerScale: IScale;\n}\n\nexport function hasInnerScale(scale: any): scale is IHasInnerScale {\n    return typeof scale.innerScale !== \"undefined\";\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialChartMarkerProvider.html":{"url":"classes/SequentialChartMarkerProvider.html","title":"class - SequentialChartMarkerProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialChartMarkerProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-chart-marker-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided markers to given series.\nIt keeps track of already given markers to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(markers: IChartMarker[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-chart-marker-provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IChartMarker[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker } from \"../types\";\n\nimport { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided markers to given series.\n * It keeps track of already given markers to given entities to avoid conflicts.\n */\nexport class SequentialChartMarkerProvider extends SequentialValueProvider {\n\n    constructor(private markers: IChartMarker[]) {\n        super(markers);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialColorProvider.html":{"url":"classes/SequentialColorProvider.html","title":"class - SequentialColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided colors to given series.\nIt keeps track of already given colors to given entities to avoid conflicts.\n\n            \n\n            \n                Extends\n            \n            \n                        SequentialValueProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-color-provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         SequentialValueProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         SequentialValueProvider:16\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         SequentialValueProvider\n\n                \n            \n            \n                \n                        Defined in         SequentialValueProvider:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SequentialValueProvider } from \"./sequential-value-provider\";\n\n/**\n * This class matches the provided colors to given series.\n * It keeps track of already given colors to given entities to avoid conflicts.\n */\nexport class SequentialColorProvider extends SequentialValueProvider {\n\n    constructor(private colors: string[]) {\n        super(colors);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequentialValueProvider.html":{"url":"classes/SequentialValueProvider.html","title":"class - SequentialValueProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequentialValueProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/sequential-value-provider.ts\n        \n\n            \n                Description\n            \n            \n                This class matches the provided instances of type  to given series.\nIt keeps track of already given instances to given entities to avoid conflicts.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IValueProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: T[])\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/sequential-value-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/common/palette/sequential-value-provider.ts:16\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/sequential-value-provider.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IValueProvider } from \"../types\";\n\n/**\n * This class matches the provided instances of type  to given series.\n * It keeps track of already given instances to given entities to avoid conflicts.\n */\nexport class SequentialValueProvider implements IValueProvider {\n\n    private providedValues: { [key: string]: T };\n    private lastUsedIndex: number;\n\n    constructor(private values: T[]) {\n        this.reset();\n    }\n\n    public get = (entityId: string): T => {\n        let value = this.providedValues[entityId];\n        if (!value) {\n            const index = ++this.lastUsedIndex % this.values.length;\n            value = this.values[index];\n            this.providedValues[entityId] = value;\n        }\n        return value;\n    }\n\n    public reset(): void {\n        this.providedValues = {};\n        this.lastUsedIndex = -1;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SideIndicatorAccessors.html":{"url":"classes/SideIndicatorAccessors.html","title":"class - SideIndicatorAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SideIndicatorAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/side-indicator-renderer.ts\n        \n\n            \n                Description\n            \n            \n                Standard definition for side indicator series and data accessors \n\n            \n\n\n            \n                Implements\n            \n            \n                            ISideIndicatorAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ISideIndicatorSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/side-indicator-renderer.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import defaultsDeep from \"lodash/defaultsDeep\";\nimport { Subject } from \"rxjs\";\n\nimport { STANDARD_RENDER_LAYERS } from \"../constants\";\nimport { Scales } from \"../core/common/scales/types\";\nimport {\n    DataAccessor,\n    IDataAccessors,\n    IDataSeries,\n    ILasagnaLayer,\n    IRendererConfig,\n    IRendererEventPayload,\n    ISeriesAccessors,\n    SeriesAccessor\n} from \"../core/common/types\";\nimport { GRAYSCALE_FILTER } from \"../core/types\";\n\nimport { IRenderSeries, RenderLayerName } from \"./types\";\nimport { XYRenderer } from \"./xy-renderer\";\n\n/** Interface for side indicator data accessors */\nexport interface ISideIndicatorDataAccessors extends IDataAccessors {\n    /** Accessor indicating whether the side indicator should be active */\n    active: DataAccessor;\n}\n\n/** Interface for side indicator series accessors */\nexport interface ISideIndicatorSeriesAccessors extends ISeriesAccessors {\n    /** Indicates the start value of the side indicator */\n    start: SeriesAccessor;\n    /** Indicates the end value of the side indicator */\n    end: SeriesAccessor;\n    /** Indicates the active color of the side indicator */\n    activeColor: SeriesAccessor;\n    /** Optional accessor indicating the inactive color of the side indicator. A grayscale filter is applied to the active color by default */\n    inactiveColor?: SeriesAccessor;\n}\n\n/** Interface for side indicator accessors */\nexport interface ISideIndicatorAccessors {\n    /** Accessors for the side indicator data */\n    data: ISideIndicatorDataAccessors;\n    /** Accessors for the side indicator series */\n    series: ISideIndicatorSeriesAccessors;\n}\n\n/** Standard definition for side indicator series and data accessors */\nexport class SideIndicatorAccessors implements ISideIndicatorAccessors {\n    public data: ISideIndicatorDataAccessors;\n    public series: ISideIndicatorSeriesAccessors;\n\n    constructor() {\n        this.data = {\n            active: (d: any) => d.active,\n        };\n        this.series = {\n            start: () => null,\n            end: () => null,\n            activeColor: () => \"magenta\",\n        };\n    }\n}\n\n/**\n * Renderer for drawing threshold side indicators\n */\nexport class SideIndicatorRenderer extends XYRenderer {\n\n    public static SIDE_INDICATORS_LAYER = \"side-indicators\";\n\n    private DEFAULT_CONFIG: IRendererConfig = {};\n\n    /**\n     * Creates an instance of SideIndicatorRenderer.\n     * @param {IRendererConfig} [config={}] Renderer configuration object\n     */\n    constructor(config: IRendererConfig = {}) {\n        super(config);\n        // setting default values to the properties that were not set by user\n        this.config = defaultsDeep(this.config, this.DEFAULT_CONFIG);\n    }\n\n    /** See {@link Renderer#draw} */\n    public draw(renderSeries: IRenderSeries, rendererSubject: Subject): void {\n        const target = renderSeries.containers[SideIndicatorRenderer.SIDE_INDICATORS_LAYER];\n        const dataSeries = renderSeries.dataSeries;\n        const scales = renderSeries.scales;\n        const accessors = renderSeries.dataSeries.accessors;\n\n        let rect = target.select(\"rect\");\n        const isActive = dataSeries.data.length > 0 ?\n            accessors.data.active(dataSeries.data[0], 0, renderSeries.dataSeries.data, renderSeries.dataSeries) : false;\n        const colorAccessor = !isActive && accessors.series.inactiveColor ? accessors.series.inactiveColor : accessors.series.activeColor;\n        if (rect.empty()) {\n            rect = target.append(\"rect\").attrs({\n                \"fill\": colorAccessor(dataSeries.id, dataSeries),\n            });\n\n            if (!isActive && !accessors.series.inactiveColor) {\n                rect.style(\"filter\", GRAYSCALE_FILTER);\n            }\n        }\n\n        const start = accessors.series.start(dataSeries.id, dataSeries);\n        const end = accessors.series.end(dataSeries.id, dataSeries);\n        const top = end == null ? 0 : scales.y.convert(end);\n        const bottom = start == null ? scales.y.range()[0] : Math.min(scales.y.range()[0], scales.y.convert(start));\n        const height = bottom - top;\n        const width = 2;\n        rect.attrs({\n            \"x\": -width,\n            \"y\": top,\n            \"height\": height , values: { [p: string]: any }, scales: Scales) {\n        return -1;\n    }\n\n    /** See {@link Renderer#getRequiredLayers} */\n    public getRequiredLayers(): ILasagnaLayer[] {\n        return [{\n            name: SideIndicatorRenderer.SIDE_INDICATORS_LAYER,\n            // order calculated by adding 1 to the data layer order to ensure the unclipped data layer appears just after the data layer in the DOM\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.data].order + 1,\n            clipped: false,\n        }];\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SparkChartAssist.html":{"url":"classes/SparkChartAssist.html","title":"class - SparkChartAssist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SparkChartAssist\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/chart-assists/spark-chart-assist.ts\n        \n\n            \n                Description\n            \n            \n                Chart assist implementation to be used with spark charts\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartAssist\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                charts\n                            \n                            \n                                    Public\n                                    Readonly\n                                gridConfig\n                            \n                            \n                                    Public\n                                highlightedDataPoints\n                            \n                            \n                                    Public\n                                isLegendActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                lastGridConfig\n                            \n                            \n                                    Public\n                                markers\n                            \n                            \n                                    Public\n                                palette\n                            \n                            \n                                    Public\n                                    Readonly\n                                showBottomAxis\n                            \n                            \n                                    Public\n                                    Readonly\n                                showTopBorder\n                            \n                            \n                                    Public\n                                sparks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getHighlightedValue\n                            \n                            \n                                    Public\n                                getVisibleSeriesWithLegend\n                            \n                            \n                                    Public\n                                setRenderState\n                            \n                            \n                                    Public\n                                trackByFn\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateSparks\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    sparkChart\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(showBottomAxis, showTopBorder, palette: IChartPalette, markers: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/core/chart-assists/spark-chart-assist.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        showBottomAxis\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        showTopBorder\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        palette\n                                                  \n                                                        \n                                                                        IChartPalette\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        markers\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            charts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ISparkChartAssistChart[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            gridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:32\n                            \n                        \n\n                \n                    \n                        Grid config for all sparks except the last (bottom) one \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            highlightedDataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDataPointsPayload\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isLegendActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:30\n                            \n                        \n\n                \n                    \n                        Used for keeping tabs on the legend's active state \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            lastGridConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         XYGridConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:34\n                            \n                        \n\n                \n                    \n                        Grid config for the last (bottom) spark \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            markers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IValueProvider\n\n                        \n                    \n                    \n                        \n                            Default value : new SequentialChartMarkerProvider(CHART_MARKERS)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            palette\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChartPalette\n\n                        \n                    \n                    \n                        \n                            Default value : new ChartPalette(CHART_PALETTE_CS1)\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showBottomAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            showTopBorder\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sparks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ISpark[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:28\n                            \n                        \n\n                \n                    \n                        Collection of ISpark objects \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getHighlightedValue\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:102\n                \n            \n\n\n            \n                \n                    See IChartAssist \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    chartSeries\n                                    \n                                                IChartSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    formatterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleSeriesWithLegend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleSeriesWithLegend()\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setRenderState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setRenderState(_seriesId: string, _state: RenderState)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _seriesId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trackByFn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trackByFn(_index: number, spark: ISpark)\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:110\n                \n            \n\n\n            \n                \n                    To use the for-cycle trackBy, set the id value on each spark\nand assign this function to the ngFor trackBy property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    spark\n                                    \n                                            ISpark\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(inputSeriesSet: IChartAssistSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:69\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if they all consist of only one series.\nIf one or more sparks has multiple series use the updateSparks method instead.\nSee IChartAssist\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputSeriesSet\n                                    \n                                            IChartAssistSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateSparks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSparks(sparks: ISpark[])\n                \n            \n\n\n            \n                \n                    Defined in src/core/chart-assists/spark-chart-assist.ts:79\n                \n            \n\n\n            \n                \n                    Use this method to update the set of sparks if any of them consist of more than one series.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sparks\n                                    \n                                            ISpark[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The collection of sparks to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        sparkChart\n                    \n                \n\n                \n                    \n                        getsparkChart()\n                    \n                \n                            \n                                \n                                    Defined in src/core/chart-assists/spark-chart-assist.ts:59\n                                \n                            \n                    \n                        \n\n                                \n                                \n                                \n                                    Returns :     ISparkChartAssistChart | null\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import cloneDeep from \"lodash/cloneDeep\";\n\nimport { INTERACTION_DATA_POINTS_EVENT, MOUSE_ACTIVE_EVENT } from \"../../constants\";\nimport { XYGridConfig } from \"../../core/grid/config/xy-grid-config\";\nimport { RenderState } from \"../../renderers/types\";\nimport { Chart } from \"../chart\";\nimport { EventBus } from \"../common/event-bus\";\nimport { ChartPalette } from \"../common/palette/chart-palette\";\nimport { CHART_MARKERS, CHART_PALETTE_CS1 } from \"../common/palette/palettes\";\nimport { SequentialChartMarkerProvider } from \"../common/palette/sequential-chart-marker-provider\";\nimport {\n    IAccessors, IChartAssistSeries, IChartEvent, IChartMarker, IChartPalette, IChartSeries, IDataPointsPayload, InteractionType, IValueProvider\n} from \"../common/types\";\nimport { UtilityService } from \"../common/utility.service\";\nimport { sparkChartGridConfig } from \"../grid/config/spark-chart-grid-config\";\nimport { XYGrid } from \"../grid/xy-grid\";\nimport { InteractionLabelPlugin } from \"../plugins/interaction/interaction-label-plugin\";\nimport { InteractionLinePlugin } from \"../plugins/interaction/interaction-line-plugin\";\n\nimport { ChartAssist } from \"./chart-assist\";\nimport { IChartAssist, ISpark, ISparkChartAssistChart } from \"./types\";\n\n/**\n * Chart assist implementation to be used with spark charts\n */\nexport class SparkChartAssist implements IChartAssist {\n    /** Collection of ISpark objects */\n    public sparks: ISpark[] = [];\n    /** Used for keeping tabs on the legend's active state */\n    public isLegendActive = false;\n    /** Grid config for all sparks except the last (bottom) one */\n    public readonly gridConfig: XYGridConfig;\n    /** Grid config for the last (bottom) spark */\n    public readonly lastGridConfig: XYGridConfig;\n\n    /**\n     * @deprecated Removal ticket NUI-3327\n     * Please use SparkChartAssist.sparks instead\n     */\n    public charts: ISparkChartAssistChart[] = []; // tslint:disable-line:deprecation\n\n    public highlightedDataPoints: IDataPointsPayload = {};\n\n    constructor(public readonly showBottomAxis = true,\n        public readonly showTopBorder = true,\n        public palette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1),\n        public markers: IValueProvider = new SequentialChartMarkerProvider(CHART_MARKERS)) {\n        this.gridConfig = sparkChartGridConfig(new XYGridConfig(), false, showTopBorder);\n        this.gridConfig.interactionPlugins = false;\n\n        this.lastGridConfig = sparkChartGridConfig(new XYGridConfig(), showBottomAxis, showTopBorder);\n        this.lastGridConfig.interactionPlugins = false;\n    }\n\n    /**\n     * @deprecated Removal ticket NUI-3327\n     * Please use SparkChartAssist.sparks[0] instead\n     */\n    public get sparkChart(): ISparkChartAssistChart | null {          // tslint:disable-line:deprecation\n        return this.charts.length > 0 ? this.charts[0] : null; // tslint:disable-line:deprecation\n    }\n\n    /**\n     * Use this method to update the set of sparks if they all consist of only one series.\n     * If one or more sparks has multiple series use the updateSparks method instead.\n     *\n     * See {@link IChartAssist#update}\n     */\n    public update(inputSeriesSet: IChartAssistSeries[]): void {\n        const sparks = inputSeriesSet.map(chartSeries => ({ id: chartSeries.id, chartSeriesSet: [chartSeries] }));\n        this.updateSparks(sparks);\n    }\n\n    /**\n     * Use this method to update the set of sparks if any of them consist of more than one series.\n     *\n     * @param {ISpark[]} sparks The collection of sparks to update\n     */\n    public updateSparks(sparks: ISpark[]): void {\n        const inputSparks = cloneDeep(sparks);\n        this.charts = []; // tslint:disable-line:deprecation\n        this.sparks = inputSparks.map((spark, index): ISpark => {\n            const lastSpark = index === inputSparks.length - 1;\n            const existingSparkIndex = spark.id ? this.sparks.findIndex(existingSpark => existingSpark.id === spark.id) : -1;\n            if (existingSparkIndex !== -1) {\n                spark.chart = this.reconfigureChart(this.sparks[existingSparkIndex].chart as Chart, lastSpark);\n            } else {\n                spark.chart = spark.chart || this.createChart(lastSpark);\n                spark.id = spark.id || UtilityService.uuid();\n            }\n\n            spark.chart.update(spark.chartSeriesSet);\n\n            // tslint:disable-next-line:deprecation\n            this.charts.push({ chart: spark.chart, chartSeries: spark.chartSeriesSet[0] });\n\n            return spark;\n        });\n    }\n\n    /** See {@link IChartAssist#getHighlightedValue} */\n    public getHighlightedValue(chartSeries: IChartSeries, scaleKey: string, formatterName?: string): string | number {\n        return ChartAssist.getLabel(chartSeries, this.highlightedDataPoints[chartSeries.id], scaleKey, formatterName);\n    }\n\n    /**\n     * To use the for-cycle trackBy, set the id value on each spark\n     * and assign this function to the ngFor trackBy property\n     */\n    public trackByFn(_index: number, spark: ISpark) {\n        return spark.id;\n    }\n\n    public setRenderState(_seriesId: string, _state: RenderState): void {\n        // not used\n    }\n\n    public getVisibleSeriesWithLegend(): IChartAssistSeries[] {\n        return [];\n    }\n\n    protected createChart(lastSpark: boolean) {\n        const grid = new XYGrid(lastSpark ? this.lastGridConfig : this.gridConfig);\n        const chart = new Chart(grid);\n\n        if (this.showTopBorder || this.showBottomAxis) {\n            chart.addPlugin(new InteractionLinePlugin());\n        }\n        if (lastSpark && this.showBottomAxis) {\n            chart.addPlugin(new InteractionLabelPlugin());\n        }\n\n        this.configureEventSubscriptions(chart.getEventBus());\n\n        return chart;\n    }\n\n    private configureEventSubscriptions(eventBus: EventBus): void {\n        eventBus.getStream(INTERACTION_DATA_POINTS_EVENT).subscribe((event) => {\n            if (event.data.interactionType === InteractionType.MouseMove) {\n                const dataPoints = event.data.dataPoints;\n                Object.keys(dataPoints).forEach(seriesId => {\n                    this.highlightedDataPoints[seriesId] = Object.assign({}, dataPoints[seriesId]);\n                });\n            }\n        });\n        eventBus.getStream(MOUSE_ACTIVE_EVENT).subscribe((event) => {\n            this.isLegendActive = event.data;\n        });\n    }\n\n    private reconfigureChart(chart: Chart, lastSpark: boolean): Chart {\n        chart.getGrid().config(lastSpark ? this.lastGridConfig : this.gridConfig);\n        chart.updateDimensions();\n\n        const hasInteractionLabel = chart.hasPlugin(InteractionLabelPlugin);\n        if (lastSpark && !hasInteractionLabel && this.showBottomAxis) {\n            const labelPlugin = new InteractionLabelPlugin();\n            chart.addPlugin(labelPlugin);\n            labelPlugin.initialize();\n        } else if (!lastSpark && hasInteractionLabel) {\n            chart.removePlugin(InteractionLabelPlugin);\n        }\n\n        return chart;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusAccessors.html":{"url":"classes/StatusAccessors.html","title":"class - StatusAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/status-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IStatusAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                STATUS_CATEGORY\n                            \n                            \n                                    Static\n                                STATUS_DOMAIN\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    series\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(barAccessors: IBarAccessors)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/status-accessors.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        barAccessors\n                                                  \n                                                        \n                                                                        IBarAccessors\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_CATEGORY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"status\"\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            STATUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [StatusAccessors.STATUS_CATEGORY]\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        series\n                    \n                \n\n                \n                    \n                        getseries()\n                    \n                \n                            \n                                \n                                    Defined in src/renderers/bar/accessors/status-accessors.ts:22\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DataAccessor } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { IBarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport interface IStatusDataAccessors extends IBarDataAccessors {\n    status: DataAccessor;\n}\n\nexport interface IStatusAccessors extends IBarAccessors {\n    data: IStatusDataAccessors;\n}\n\nexport class StatusAccessors implements IStatusAccessors {\n    public static STATUS_CATEGORY = \"status\";\n    public static STATUS_DOMAIN = [StatusAccessors.STATUS_CATEGORY];\n\n    public get data(): IStatusDataAccessors {\n        return this.barAccessors.data as IStatusDataAccessors;\n    }\n\n    public get series(): IRectangleSeriesAccessors {\n        return this.barAccessors.series;\n    }\n\n    constructor(private barAccessors: IBarAccessors) {\n        barAccessors.data.status = (d: any) => d.status;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SvgMarker.html":{"url":"classes/SvgMarker.html","title":"class - SvgMarker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SvgMarker\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/markers/svg-marker.ts\n        \n\n            \n                Description\n            \n            \n                This class creates a ChartMarker based on provided portion of svg markup\n\n            \n\n\n            \n                Implements\n            \n            \n                            IChartMarker\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getSvg\n                            \n                            \n                                    Public\n                                setColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(svg: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/markers/svg-marker.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        svg\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSvg\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSvg()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setColor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setColor(color: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/palette/markers/svg-marker.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    color\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import isUndefined from \"lodash/isUndefined\";\n\nimport { IChartMarker } from \"../../types\";\n\n/**\n * This class creates a ChartMarker based on provided portion of svg markup\n */\nexport class SvgMarker implements IChartMarker {\n    protected styledSvg: string;\n\n    constructor(protected svg: string) {\n    }\n\n    public getSvg(): string {\n        return this.styledSvg || this.svg;\n    }\n\n    public setColor(color: string): void {\n        this.styledSvg = isUndefined(color) ? color : `${this.svg}`;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TextColorProvider.html":{"url":"classes/TextColorProvider.html","title":"class - TextColorProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TextColorProvider\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/palette/text-color-provider.ts\n        \n\n            \n                Description\n            \n            \n                This color provider calculates foreground color based on contrast ratio of provided colors\n\n            \n\n            \n                Extends\n            \n            \n                        ProcessedColorProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceProvider: IValueProvider, colorDefinitions: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/palette/text-color-provider.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sourceProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        colorDefinitions\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         ProcessedColorProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         ProcessedColorProvider:15\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reset()\n                \n            \n\n\n            \n                \n                    Inherited from         ProcessedColorProvider\n\n                \n            \n            \n                \n                        Defined in         ProcessedColorProvider:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { rgb, RGBColor } from \"d3-color\";\n\nimport { IValueProvider } from \"../types\";\n\nimport { getColorValueByName } from \"./color.helper\";\nimport { ProcessedColorProvider } from \"./processed-color-provider\";\n\n/** @ignore */\nconst rc = 0.2126;\n/** @ignore */\nconst gc = 0.7152;\n/** @ignore */\nconst bc = 0.0722;\n/** @ignore */\nconst lowc = 1 / 12.92;\n\n/**\n * This color provider calculates foreground color based on contrast ratio of provided colors\n */\nexport class TextColorProvider extends ProcessedColorProvider {\n\n    constructor(sourceProvider: IValueProvider, colorDefinitions: { light: string, dark: string }) {\n        super(sourceProvider, (input: string) => {\n            const color = getColorValueByName(input);\n            const rgbInput = rgb(color);\n\n            const ratioToLight = this.getContrastRatio(rgbInput, rgb(colorDefinitions.light));\n            const ratioToDark = this.getContrastRatio(rgbInput, rgb(colorDefinitions.dark));\n\n            return ratioToDark > ratioToLight ? colorDefinitions.dark : colorDefinitions.light;\n        });\n    }\n\n    /**\n     * Calculate contrast ratio of two given colors (https://www.w3.org/TR/WCAG20/#contrast-ratiodef)\n     *\n     * @param {RGBColor} color1\n     * @param {RGBColor} color2\n     * @returns {number} luminance ratio\n     */\n    private getContrastRatio(color1: RGBColor, color2: RGBColor) {\n        const luminance1 = this.getRelativeLuminance(color1);\n        const luminance2 = this.getRelativeLuminance(color2);\n        let lighter: number;\n        let darker: number;\n        if (luminance1 > luminance2) {\n            lighter = luminance1;\n            darker = luminance2;\n        } else {\n            lighter = luminance2;\n            darker = luminance1;\n        }\n        return (lighter + 0.05) / (darker + 0.05);\n    }\n\n    /**\n     * Calculates relative luminance of given color (https://www.w3.org/TR/WCAG20/relative-luminance.xml)\n     *\n     * @param {RGBColor} rgbColor\n     * @returns {number}\n     */\n    private getRelativeLuminance(rgbColor: RGBColor) {\n        const rsrgb = rgbColor.r / 255;\n        const gsrgb = rgbColor.g / 255;\n        const bsrgb = rgbColor.b / 255;\n\n        const r = rsrgb \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ThresholdsService.html":{"url":"injectables/ThresholdsService.html","title":"injectable - ThresholdsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ThresholdsService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/thresholds-service.ts\n        \n\n            \n                Description\n            \n            \n                This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getBackgrounds\n                            \n                            \n                                    Public\n                                getCrossPoint\n                            \n                            \n                                    Public\n                                getCrossPointWithY\n                            \n                            \n                                    Public\n                                getSideIndicators\n                            \n                            \n                                    Public\n                                getThresholdLine\n                            \n                            \n                                    Public\n                                getThresholdLines\n                            \n                            \n                                    Public\n                                getThresholdZones\n                            \n                            \n                                    Public\n                                injectThresholdsData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                    LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBackgrounds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBackgrounds(sourceSeries: IDataSeries, zones: IDataSeries[], scales: Scales, colorProvider: IValueProvider, thicknessMap: Record, rendererConfig: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:76\n                \n            \n\n\n            \n                \n                    This method creates a background series for TimeInterval or continuous (currently only works with time) scale.\nIf the series is continuous it detects intersection of source line data with given threshold zones and generates start / end for status periods.\nOtherwise it will use the start and the end of the band.\nThe default value of the rendererConfig parameter is THRESHOLDS_MAIN_CHART_RENDERER_CONFIG. For a summary chart, usually a smaller status\nchart positioned below a main chart, use THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The data series from which to derive a background visualization\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The scales to be used for the background visualization\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                                \n                                    thicknessMap\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                        Map of status to number specifying a custom height per status for the background visualization.\nIf a status is not specified in the map, the default thickness is the full height of the rendering area.\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)\n                                    \n\n                                    \n                                        The renderer's configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPoint(dataFrom: IPosition, dataTo: IPosition, thresholdFrom: IPosition, thresholdTo: IPosition)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:295\n                \n            \n\n\n            \n                \n                    Calculates the point where the data series line will cross a threshold line using the two closest points for each\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data starting point\n\n                                    \n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data ending point\n\n                                    \n                                \n                                \n                                    thresholdFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold starting point\n\n                                    \n                                \n                                \n                                    thresholdTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Threshold ending point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        the position of the cross point or null if lines don't cross\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCrossPointWithY\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCrossPointWithY(dataFrom: IPosition, dataTo: IPosition, y: number)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataFrom\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataTo\n                                    \n                                                IPosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getSideIndicators\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSideIndicators(zones: IDataSeries[], scales: Scales, rendererConfig?: IRendererConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:374\n                \n            \n\n\n            \n                \n                    Creates side indicator data series for given threshold zones\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The scales to be used for the side indicators\n\n                                    \n                                \n                                \n                                    rendererConfig\n                                    \n                                                IRendererConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Configuration for the renderer. Default is the exported constant 'THRESHOLDS_MAIN_CHART_RENDERER_CONFIG'\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLine(zone: IDataSeries, valueAccessor: DataAccessor, zoneBoundary)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:261\n                \n            \n\n\n            \n                \n                    Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    zone\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        A zone defined as a data series with IAreaAccessors\n\n                                    \n                                \n                                \n                                    valueAccessor\n                                    \n                                                DataAccessor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Accessor for the threshold limit\n\n                                    \n                                \n                                \n                                    zoneBoundary\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ZoneBoundary.Start\n                                    \n\n                                    \n                                        The zone boundary represented by the line. Default is ZoneBoundary.Start.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdLines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdLines(zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:229\n                \n            \n\n\n            \n                \n                    Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IChartAssistSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getThresholdZones\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getThresholdZones(sourceSeries: IDataSeries, simpleZones: ISimpleThresholdZone[], colorProvider: IValueProvider)\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:205\n                \n            \n\n\n            \n                \n                    Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\nCreating these series manually is also possible for dynamic threshold limits.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series from which to derive the zones\n\n                                    \n                                \n                                \n                                    simpleZones\n                                    \n                                                ISimpleThresholdZone[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a collection of zones that are each defined by a start value and/or an end value. (A missing\nstart or end value indicates an infinite zone.)\n\n                                    \n                                \n                                \n                                    colorProvider\n                                    \n                                                IValueProvider\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A value provider for the colors to be used for each status\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IDataSeries[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            injectThresholdsData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectThresholdsData(dataSeries: IDataSeries, zones: IDataSeries[])\n                \n            \n\n\n            \n                \n                    Defined in src/thresholds/thresholds-service.ts:40\n                \n            \n\n\n            \n                \n                    Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\nthe threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\ncalculation, but also in other places, like legend or tooltips.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                            IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data series that will be enhanced with threshold metadata\n\n                                    \n                                \n                                \n                                    zones\n                                    \n                                            IDataSeries[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        zones defined as data series with IAreaAccessors\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            SERIES_ID_SUFFIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"__thresholds-background\"\n                        \n                    \n                        \n                            \n                                    Defined in src/thresholds/thresholds-service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { LoggerService } from \"@nova-ui/bits\";\nimport { Numeric } from \"d3-array\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport sortBy from \"lodash/sortBy\";\nimport unionWith from \"lodash/unionWith\";\nimport values from \"lodash/values\";\n\nimport { isBandScale, Scales } from \"../core/common/scales/types\";\nimport { DataAccessor, IChartAssistSeries, IDataSeries, IPosition, IRendererConfig, IValueProvider, IZoneCrossPoint } from \"../core/common/types\";\nimport { AreaAccessors, IAreaAccessors } from \"../renderers/area/area-accessors\";\nimport { IStatusAccessors } from \"../renderers/bar/accessors/status-accessors\";\nimport { statusAccessors } from \"../renderers/bar/accessors/status-accessors-fn\";\nimport { BarRenderer } from \"../renderers/bar/bar-renderer\";\nimport { THRESHOLDS_MAIN_CHART_RENDERER_CONFIG } from \"../renderers/constants\";\nimport { ILineAccessors, LineAccessors } from \"../renderers/line/line-accessors\";\nimport { LineRenderer } from \"../renderers/line/line-renderer\";\nimport { ISideIndicatorAccessors, SideIndicatorAccessors, SideIndicatorRenderer } from \"../renderers/side-indicator-renderer\";\n\nimport { ISimpleThresholdZone, ZoneBoundary, ZoneCross } from \"./types\";\n\n/**\n * This service provides functionality that facilitates the creation of thresholds related visual element on charts.\n */\n@Injectable()\nexport class ThresholdsService {\n    public static SERIES_ID_SUFFIX = \"__thresholds-background\";\n\n    constructor(private loggerService: LoggerService) {\n    }\n\n    /**\n     * Calculates the threshold \"statuses\" - from/to and what zone we're in. It is the first step that is required before the usage of other methods. Having\n     * the threshold \"statuses\" assigned to each data point enables us to access the threshold information not only in other methods for threshold\n     * calculation, but also in other places, like legend or tooltips.\n     *\n     * @param dataSeries source data series that will be enhanced with threshold metadata\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    public injectThresholdsData(dataSeries: IDataSeries,\n                                zones: IDataSeries[]) {\n        const zoneIndexes: Record = {};\n        zones.forEach(z => z.entered = false);\n\n        for (let i = 0; i ,\n                          zones: IDataSeries[],\n                          scales: Scales,\n                          colorProvider: IValueProvider,\n                          thicknessMap: Record = {},\n                          rendererConfig: IRendererConfig = cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG)): IChartAssistSeries {\n        if (sourceSeries.data.length > 0 && typeof sourceSeries.data[0].__thresholds === \"undefined\") {\n            this.loggerService.warn(\"Thresholds metadata is not defined on provided data series\", sourceSeries);\n        }\n\n        let data: any[];\n        const accessors = statusAccessors(colorProvider);\n        accessors.data.thickness = (d) => thicknessMap[d.status];\n        if (isBandScale(scales.x)) {\n            data = cloneDeep(sourceSeries.data);\n            accessors.data.start = sourceSeries.accessors.data.x;\n            accessors.data.end = sourceSeries.accessors.data.x;\n            accessors.data.color = (d) => (d.__thresholds && d.__thresholds.status) ?\n                colorProvider.get(d.__thresholds.status) : \"transparent\";\n            accessors.data.thickness = (d) => thicknessMap[d.__thresholds.status];\n        } else {\n            data = this.getBackgroundsDataForContinuousScale(sourceSeries, zones);\n        }\n        return {\n            id: sourceSeries.id + ThresholdsService.SERIES_ID_SUFFIX,\n            data,\n            accessors,\n            scales,\n            renderer: new BarRenderer(rendererConfig),\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates background data for continuous scale based on intersections between the source data and zone definitions.\n     *\n     * @param sourceSeries source data series from which to derive background data\n     * @param zones zones defined as data series with IAreaAccessors\n     */\n    private getBackgroundsDataForContinuousScale(sourceSeries: IDataSeries, zones: IDataSeries[]) {\n        const backgroundData: ZoneCross[] = [];\n        const breakPoints = this.getBreakPoints(sourceSeries, zones);\n\n        const zoneIndexes: Record = {};\n        for (let i = 0; i , zones: IDataSeries[]): (IZoneCrossPoint | undefined)[] {\n        const sourceAccessors = sourceSeries.accessors.data;\n\n        let breakPoints: (IZoneCrossPoint | undefined)[] = [];\n\n        for (let i = 0; i  this.getCrossPointWithY(xy1, xy2, y)) // calculate cross points for both limits\n                    .filter(c => c); // take only those that actually intersect\n\n                [xy1, xy2].forEach((xy) => {\n                    if (xy.y === zoneStartY || xy.y === zoneEndY) {\n                        xy.isZoneEdge = true;\n                    }\n                });\n\n                // add all crossPoints, dataPoints, but only those with unique \"x\" coordinate\n                breakPoints = unionWith(breakPoints, zoneCrossPoints, [xy1, xy2], (a, b) => a?.x === b?.x && a?.isZoneEdge === b?.isZoneEdge);\n            }\n        }\n\n        return sortBy(breakPoints, \"x\");\n    }\n\n    /**\n     * Generates threshold zone series from simplified zone definition. Simplified definition provides only two numbers to define the zone interval.\n     * Creating these series manually is also possible for dynamic threshold limits.\n     *\n     * @param sourceSeries source data series from which to derive the zones\n     * @param simpleZones a collection of zones that are each defined by a start value and/or an end value. (A missing\n     start or end value indicates an infinite zone.)\n     * @param colorProvider A value provider for the colors to be used for each status\n     */\n    public getThresholdZones(sourceSeries: IDataSeries,\n                             simpleZones: ISimpleThresholdZone[],\n                             colorProvider: IValueProvider): IDataSeries[] {\n        const areaAccessors = new AreaAccessors();\n        areaAccessors.data.start = (d) => d.start;\n        areaAccessors.data.end = (d) => d.end;\n        areaAccessors.series.color = (seriesId, series) => colorProvider.get(series.value);\n\n        return simpleZones.map((z, i) => ({\n            id: sourceSeries.id + \"__\" + z.status + \"-\" + i,\n            value: z.status,\n            data: [\n                { start: z.start, end: z.end },\n            ],\n            scales: sourceSeries.scales,\n            accessors: areaAccessors,\n        }));\n    }\n\n    /**\n     * Creates data series representing threshold lines on the chart. Solves collision between zones, where multiple zones are using the same limit value.\n     *\n     * @param zones Zones defined as data series with IAreaAccessors\n     */\n    public getThresholdLines(zones: IDataSeries[]): IChartAssistSeries[] {\n        if (-1 === zones.findIndex(z => z.entered)) {\n            return [];\n        }\n\n        // TODO: works only for static thresholds\n        const limits: Record, accessor: DataAccessor, zoneBoundary: ZoneBoundary }> = {};\n\n        function addLimitEntry(accessor: DataAccessor, zone: IDataSeries, zoneBoundary: ZoneBoundary) {\n            const value = accessor(zone.data[0], 0, zone.data, zone);\n            if (typeof value !== \"undefined\" && typeof limits[value] === \"undefined\") {\n                limits[value] = { series: zone, accessor, zoneBoundary };\n            }\n        }\n\n        for (const z of zones) {\n            if (z.accessors.data.start && z.accessors.data.end) {\n                addLimitEntry(z.accessors.data.start, z, ZoneBoundary.Start);\n                addLimitEntry(z.accessors.data.end, z, ZoneBoundary.End);\n            }\n        }\n\n        return values(limits).map((limit) => this.getThresholdLine(limit.series, limit.accessor, limit.zoneBoundary));\n    }\n\n    /**\n     * Creates a IChartAssistSeries that represents a threshold zone limit defined by given valueAccessor\n     *\n     * @param zone A zone defined as a data series with IAreaAccessors\n     * @param valueAccessor Accessor for the threshold limit\n     * @param zoneBoundary The zone boundary represented by the line. Default is ZoneBoundary.Start.\n     */\n    public getThresholdLine(zone: IDataSeries,\n                            valueAccessor: DataAccessor,\n                            zoneBoundary = ZoneBoundary.Start): IChartAssistSeries {\n        const accessors = new LineAccessors();\n        accessors.data.y = valueAccessor;\n        accessors.series.color = zone.accessors.series.color;\n        const renderer = new LineRenderer({\n            interactive: false,\n            strokeWidth: 1,\n            strokeStyle: LineRenderer.getStrokeStyleDashed(1),\n            stateStyles: cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG.stateStyles),\n            ignoreForDomainCalculation: true,\n        });\n\n        return {\n            id: `${zone.id}__${zoneBoundary}__threshold-line`,\n            data: zone.data,\n            value: zone.value,\n            accessors,\n            renderer,\n            scales: zone.scales,\n            showInLegend: false,\n        };\n    }\n\n    /**\n     * Calculates the point where the data series line will cross a threshold line using the two closest points for each\n     *\n     * @param {IPosition} dataFrom Data starting point\n     * @param {IPosition} dataTo Data ending point\n     * @param {IPosition} thresholdFrom Threshold starting point\n     * @param {IPosition} thresholdTo Threshold ending point\n     * @returns {IPosition} the position of the cross point or `null` if lines don't cross\n     */\n    public getCrossPoint(dataFrom: IPosition, dataTo: IPosition,\n                         thresholdFrom: IPosition, thresholdTo: IPosition): IPosition | undefined {\n        /* Inspired by https://stackoverflow.com/a/1968345 */\n        const dataShift: IPosition = {\n            x: dataTo.x - dataFrom.x,\n            y: dataTo.y - dataFrom.y,\n        };\n        const thresholdShift: IPosition = {\n            x: thresholdTo.x - thresholdFrom.x,\n            y: thresholdTo.y - thresholdFrom.y,\n        };\n        const s = (-dataShift.y * (dataFrom.x - thresholdFrom.x) + dataShift.x * (dataFrom.y - thresholdFrom.y))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n        const t = (thresholdShift.x * (dataFrom.y - thresholdFrom.y) - thresholdShift.y * (dataFrom.x - thresholdFrom.x))\n            / (-thresholdShift.x * dataShift.y + dataShift.x * thresholdShift.y);\n\n        if (!(s >= 0 && s = 0 && t [], zoneIndexes: Record, x: Numeric, y: Numeric) {\n        for (const zone of zones) {\n            if (!zoneIndexes[zone.id]) {\n                zoneIndexes[zone.id] = 0;\n            }\n\n            const zoneIndex = this.moveZoneIndex(zoneIndexes[zone.id], zone, x);\n            zoneIndexes[zone.id] = zoneIndex;\n\n            const zoneDataPoint = zone.data[zoneIndex];\n\n            const zDataAccessors = zone.accessors.data;\n            const start = zDataAccessors.start?.(zoneDataPoint, zoneIndex, zone.data, zone);\n            const end = zDataAccessors.end?.(zoneDataPoint, zoneIndex, zone.data, zone);\n\n            // TODO: this is not going to work for dynamic thresholds, so still have some work to do here\n            if ((typeof start === \"undefined\" || y >= start) &&\n                (typeof end === \"undefined\" || y , x: Numeric) {\n        while (zoneIndex [],\n                             scales: Scales,\n                             rendererConfig?: IRendererConfig): IChartAssistSeries[] {\n        const sideIndicators: IChartAssistSeries[] = [];\n        const renderer = new SideIndicatorRenderer(rendererConfig || cloneDeep(THRESHOLDS_MAIN_CHART_RENDERER_CONFIG));\n        const indicatorsActive = -1 !== zones.findIndex(z => z.entered);\n        for (const z of zones) {\n            const sideIndicatorAccessors = new SideIndicatorAccessors();\n            sideIndicatorAccessors.series = {\n                start: () => z.accessors.data.start?.(z.data[0], 0, z.data, z),\n                end: () => z.accessors.data.end?.(z.data[0], 0, z.data, z),\n                activeColor: () => z.accessors.series.color?.(z.id, z),\n            };\n\n            const sideIndicator: IChartAssistSeries = {\n                id: z.id + \"__side-indicator\",\n                data: [{ active: indicatorsActive }],\n                accessors: sideIndicatorAccessors,\n                scales,\n                renderer,\n                showInLegend: false,\n            };\n\n            sideIndicators.push(sideIndicator);\n        }\n\n        return sideIndicators;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeScale.html":{"url":"classes/TimeScale.html","title":"class - TimeScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeScale\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/scales/time-scale.ts\n        \n\n            \n                Description\n            \n            \n                Nova wrapper around D3's scaleTime\n\n            \n\n            \n                Extends\n            \n            \n                        Scale\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                domainCalculator\n                            \n                            \n                                    Public\n                                formatters\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isDomainFixed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                convert\n                            \n                            \n                                    Public\n                                invert\n                            \n                            \n                                    Public\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                    Abstract\n                                convert\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                domain\n                            \n                            \n                                    Public\n                                fixDomain\n                            \n                            \n                                    Public\n                                    Abstract\n                                invert\n                            \n                            \n                                    Public\n                                    Abstract\n                                isContinuous\n                            \n                            \n                                    Public\n                                isDomainValid\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                range\n                            \n                            \n                                    Public\n                                reverse\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                            \n                                    Public\n                                reversed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/scales/time-scale.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            domainCalculator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : getAutomaticDomain\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFormatters\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:12\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:10\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isDomainFixed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         Scale\n\n                                \n                            \n                        \n                            \n                                    Defined in         Scale:13\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Date | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/scales/time-scale.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            convert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convert(value: T)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:31\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:55\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :     T[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:56\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            domain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    domain(domain?: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fixDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fixDomain(domain: T[])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:67\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    domain\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            invert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    invert(coordinate: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:33\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            isContinuous\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isContinuous()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:35\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isDomainValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isDomainValid()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:74\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:43\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            range\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    range(range?: [number, number])\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reverse()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:78\n\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed()\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:83\n\n                \n            \n\n\n            \n                \n                    See IScale \n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:84\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            reversed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reversed(reversed?: boolean)\n                \n            \n\n\n            \n                \n                    Inherited from         Scale\n\n                \n            \n            \n                \n                        Defined in         Scale:85\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reversed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | \n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AxisScale } from \"d3-axis\";\nimport { scaleTime } from \"d3-scale\";\n\nimport { datetimeFormatter } from \"./formatters/datetime-formatter\";\nimport { Scale } from \"./scale\";\n\n/**\n * Nova wrapper around [D3's scaleTime](https://d3indepth.com/scales/#scaletime)\n */\nexport class TimeScale extends Scale {\n\n    constructor(id?: string) {\n        super(id);\n\n        this.formatters.tick = datetimeFormatter;\n    }\n\n    protected createD3Scale(): AxisScale {\n        return scaleTime();\n    }\n\n    public convert(value: Date): number {\n        return this._d3Scale(value);\n    }\n\n    public invert(coordinate: number): Date | undefined {\n        const date = this._d3Scale.invert(coordinate);\n        const result: Date | undefined = isNaN(date.getTime()) ? undefined : date;\n        return result;\n    }\n\n    public isContinuous(): boolean {\n        return true;\n    }\n\n    public isDomainValid(): boolean {\n        return -1 === this.domain().findIndex((value) => isNaN(value.getTime()));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UtilityService.html":{"url":"classes/UtilityService.html","title":"class - UtilityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UtilityService\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/utility.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                clampToRange\n                            \n                            \n                                    Static\n                                cssEscape\n                            \n                            \n                                    Static\n                                findNearestIndex\n                            \n                            \n                                    Static\n                                getClosestIndex\n                            \n                            \n                                    Static\n                                getScaleValues\n                            \n                            \n                                    Static\n                                getXYValues\n                            \n                            \n                                    Static\n                                uuid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            clampToRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clampToRange(value: number, range: [number, number])\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:63\n                \n            \n\n\n            \n                \n                    Clamps given value to range\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            [number, number]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            cssEscape\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cssEscape(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:92\n                \n            \n\n\n            \n                \n                    CSS.escape() replacement\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            findNearestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNearestIndex(haystack: T[], needle: any, selector: (d: T,index: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:179\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    This method performs a binary search to find an index in the haystack that is the closest representation of given needle.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    selector\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        identity\n                                    \n\n                                    \n                                        this function is used to process the haystack elements\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getClosestIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getClosestIndex(haystack: T[], accessor: (d: T,i: number) => void, needle: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    haystack\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessor\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    needle\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getScaleValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getScaleValues(scales: IScale[], coordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:224\n                \n            \n\n\n            \n                \n                    Gets the scale value based on the specified scales and raw coordinate\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    coordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            getXYValues\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getXYValues(xScales: IScale[], yScales: IScale[], xCoordinate: number, yCoordinate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:204\n                \n            \n\n\n            \n                \n                    Gets the 'x' and 'y' scale values based on the specified scales and raw x-y coordinates\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    xScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yScales\n                                    \n                                                IScale[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    xCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    yCoordinate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            uuid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uuid()\n                \n            \n\n\n            \n                \n                    Defined in src/core/common/utility.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import identity from \"lodash/identity\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\n\nimport { IInteractionValues } from \"../plugins/types\";\n\nimport { invert } from \"./scales/helpers/invert\";\nimport { IScale } from \"./scales/types\";\n\nexport class UtilityService {\n\n    private static getValueAccessor(accessor: (d: any, i: number) => any, dataPoint: any) {\n        const value = accessor(dataPoint, 0);\n        if (typeof value === \"number\" || typeof value === \"string\") {\n            return accessor;\n        }\n        if (value.valueOf && typeof value.valueOf() === \"number\") {\n            return (d: any, i: number) => accessor(d, i).valueOf();\n        }\n\n        throw new Error(\"Value in the data series does not return numeric valueOf().\");\n    }\n\n    public static getClosestIndex(haystack: T[], accessor: (d: T, i: number) => any, needle: any): number | undefined {\n        if (haystack.length === 1) {\n            return 0;\n        } else if (haystack.length === 0) {\n            return;\n        }\n\n        const valueAccessor = UtilityService.getValueAccessor(accessor, haystack[0]);\n        if (typeof needle === \"string\") {\n            return haystack.findIndex(straw => valueAccessor(straw, 0) === needle);\n        }\n\n        let closestDataIndex = this.findNearestIndex(haystack, needle, accessor);\n\n        // Compensate for bisect\n        closestDataIndex = (closestDataIndex > 0) ? closestDataIndex - 1 : closestDataIndex;\n        // Ensure inbounds reference if right end of data\n        closestDataIndex = (closestDataIndex >= haystack.length - 1 && haystack.length !== 1)\n            ? haystack.length - 2\n            : closestDataIndex;\n        const indexIncrement = UtilityService.getCloser(\n            valueAccessor(haystack[closestDataIndex], closestDataIndex),\n            valueAccessor(haystack[closestDataIndex + 1], closestDataIndex + 1),\n            needle);\n\n        return closestDataIndex + indexIncrement;\n    }\n\n    private static getCloser(a: number, b: number, test: number): number {\n        return (Math.abs(test - a)  range[1]) {\n            return range[1];\n        }\n\n        return value;\n    }\n\n    public static uuid() {\n        let dt = new Date().getTime();\n        const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n            // tslint:disable-next-line\n            const r = (dt + Math.random() * 16) % 16 | 0;\n            dt = Math.floor(dt / 16);\n            // tslint:disable-next-line\n            return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    }\n\n    /**\n     *  CSS.escape() replacement\n     * @param value\n     * @returns {string}\n     */\n    public static cssEscape(value: any): string {\n        // TODO: remove when Edge supports CSS.escape\n        // Courtesy of Mathias Bynens: https://github.com/mathiasbynens/CSS.escape.git\n        if (arguments.length === 0) {\n            throw new TypeError(\"`cssEscape` requires an argument.\");\n        }\n        const sstring = String(value);\n        const length = sstring.length;\n        let index = -1;\n        let codeUnit;\n        let result = \"\";\n        const firstCodeUnit = sstring.charCodeAt(0);\n        while (++index = 0x0001 && codeUnit = 0x0030 && codeUnit = 0x0030 && codeUnit = 0x0080 ||\n                codeUnit === 0x002D ||\n                codeUnit === 0x005F ||\n                codeUnit >= 0x0030 && codeUnit = 0x0041 && codeUnit = 0x0061 && codeUnit (haystack: T[], needle: any, selector: (d: T, index: number) => any = identity) {\n        let low = 0, high = haystack == null ? low : haystack.length;\n\n        while (low >> 1, computed = selector(haystack[mid], mid);\n\n            if (computed !== null && (computed [], yScales: IScale[], xCoordinate: number, yCoordinate: number) {\n        const xValue = UtilityService.getScaleValues(xScales, xCoordinate);\n        const yValue = UtilityService.getScaleValues(yScales, yCoordinate);\n\n        const values: IInteractionValues = {};\n        if (!isEmpty(xValue)) {\n            values.x = xValue;\n        }\n        if (!isEmpty(yValue)) {\n            values.y = yValue;\n        }\n        return values;\n    }\n\n    /**\n     * Gets the scale value based on the specified scales and raw coordinate\n     *\n     * @param scales\n     * @param coordinate\n     */\n    public static getScaleValues(scales: IScale[], coordinate: number): Record {\n        function callbackFn(result: Record, next: IScale) {\n            const inverted = invert(next, coordinate);\n            if (isUndefined(inverted)) {\n                return result;\n            }\n\n            result[next.id] = inverted;\n            return result;\n        }\n        return scales.reduce(callbackFn, {});\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerticalBarAccessors.html":{"url":"classes/VerticalBarAccessors.html","title":"class - VerticalBarAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerticalBarAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/bar/accessors/vertical-bar-accessors.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BarAccessors\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                            \n                                data\n                            \n                            \n                                series\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider)\n                    \n                \n                        \n                            \n                                Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        colorProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        markerProvider\n                                                  \n                                                        \n                                                                        IValueProvider\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/bar/accessors/vertical-bar-accessors.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IBarDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:22\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BarAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         BarAccessors:35\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleDataAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:34\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            series\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRectangleSeriesAccessors\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RectangleAccessors\n\n                                \n                            \n                        \n                            \n                                    Defined in         RectangleAccessors:35\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IChartMarker, IValueProvider } from \"../../../core/common/types\";\nimport { IRectangleSeriesAccessors } from \"../../accessors/rectangle-accessors\";\n\nimport { BarAccessors, IBarDataAccessors } from \"./bar-accessors\";\n\nexport class VerticalBarAccessors extends BarAccessors {\n    data: IBarDataAccessors;\n    series: IRectangleSeriesAccessors;\n\n    constructor(colorProvider?: IValueProvider, markerProvider?: IValueProvider) {\n        super(colorProvider, markerProvider);\n\n        this.data = {\n            ...this.data,\n            startX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            endX: (d, i, s, ds) => this.data.category(d, i, s, ds),\n            thicknessX: (d, i, s, ds) => this.data.thickness ? this.data.thickness(d, i, s, ds) : undefined,\n            startY: (d, i, s, ds) => this.data.start(d, i, s, ds),\n            endY: (d, i, s, ds) => this.data.end(d, i, s, ds),\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYAccessors.html":{"url":"classes/XYAccessors.html","title":"class - XYAccessors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYAccessors\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/accessors/xy-accessors.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            IAccessors\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IXYDataAccessors\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/renderers/accessors/xy-accessors.ts:14\n                            \n                        \n\n                \n                    \n                        The default data accessors for using with renderers deriving from XYRenderer \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { DataAccessor, IAccessors } from \"../../core/common/types\";\n\nexport interface IXYDataAccessors {\n    /** Accessor for value plotted on the x coordinate */\n    x: DataAccessor;\n    /** Accessor for value plotted on the y coordinate */\n    y: DataAccessor;\n    /** Additional custom keys to match the base interface */\n    [key: string]: DataAccessor | undefined;\n}\n\nexport abstract class XYAccessors implements IAccessors {\n    /** The default data accessors for using with renderers deriving from XYRenderer */\n    public data: IXYDataAccessors = {\n        x: (d: any) => d.x,\n        y: (d: any) => d.y,\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYGridConfig.html":{"url":"classes/XYGridConfig.html","title":"class - XYGridConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYGridConfig\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/grid/config/xy-grid-config.ts\n        \n\n\n            \n                Extends\n            \n            \n                        GridConfig\n            \n\n            \n                Implements\n            \n            \n                            IXYGridConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                axis\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_MARGIN\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_PADDING\n                            \n                            \n                                    Public\n                                interactionPlugins\n                            \n                            \n                                    Public\n                                borders\n                            \n                            \n                                    Public\n                                cursor\n                            \n                            \n                                    Public\n                                dimension\n                            \n                            \n                                    Public\n                                interactive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            axis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_MARGIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:9\n                            \n                        \n\n                \n                    \n                        The default margin \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_PADDING\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactionPlugins\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in src/core/grid/config/xy-grid-config.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            borders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IAllAround\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        // TODO: Review this\n        // @ts-ignore\n        top: undefined,\n        // @ts-ignore\n        bottom: undefined,\n        // @ts-ignore\n        left: undefined,\n        // @ts-ignore\n        right: undefined,\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:16\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"crosshair\"\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:28\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dimension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IDimensionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : new DimensionConfig()\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:14\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interactive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         GridConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         GridConfig:11\n\n                            \n                        \n\n                \n                    \n                        See IGridConfig \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IAllAround, IAxisConfig, IXYGridConfig} from \"../types\";\n\nimport { AxisConfig } from \"./axis-config\";\nimport { BorderConfig } from \"./border-config\";\nimport { GridConfig } from \"./grid-config\";\n\nexport class XYGridConfig extends GridConfig implements IXYGridConfig {\n    /** The default margin */\n    public static readonly DEFAULT_MARGIN: IAllAround = {\n        top: 0,\n        right: 5,\n        bottom: 20,\n        left: 30,\n    };\n\n    public static readonly DEFAULT_PADDING: IAllAround = {\n        left: 0,\n        right: 0,\n        top: 5,\n        bottom: 5,\n    };\n\n    public axis: IAllAround = {\n        top: new AxisConfig(),\n        right: new AxisConfig(),\n        bottom: new AxisConfig(),\n        left: new AxisConfig(),\n    };\n\n    // We should avoid this kind of option in future versions of XYGrid and XYGridConfig\n    // because ideally all plugins should be added manually (NUI-3304).\n    public interactionPlugins = true;\n\n    constructor() {\n        super();\n\n        this.dimension.padding = Object.assign({}, XYGridConfig.DEFAULT_PADDING);\n        this.dimension.margin = Object.assign({}, XYGridConfig.DEFAULT_MARGIN);\n\n        this.borders.bottom = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left = new BorderConfig(\"nui-chart-border nui-chart-border--thick\");\n        this.borders.left.visible = false; // TODO: figure out if this is the valid default\n\n        this.axis.left.gridTicks = true;\n        this.axis.left.tickSize = 0;\n        this.axis.left.padding = 10;\n\n        this.axis.right.fit = true;\n        this.axis.right.tickSize = 0;\n        this.axis.right.padding = 10;\n\n        this.axis.bottom.tickLabel.horizontalPadding = 5;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/XYRenderer.html":{"url":"classes/XYRenderer.html","title":"class - XYRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  XYRenderer\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/renderers/xy-renderer.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Renderer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Public\n                                getContainerStateStyles\n                            \n                            \n                                    Public\n                                interaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                    Abstract\n                                draw\n                            \n                            \n                                    Public\n                                filterDataByDomain\n                            \n                            \n                                    Public\n                                getDataPointIndex\n                            \n                            \n                                    Public\n                                    Abstract\n                                getDataPointPosition\n                            \n                            \n                                    Public\n                                getDomain\n                            \n                            \n                                    Public\n                                getDomainOfFilteredData\n                            \n                            \n                                    Public\n                                getRequiredLayers\n                            \n                            \n                                    Public\n                                highlightDataPoint\n                            \n                            \n                                    Public\n                                setDataPointState\n                            \n                            \n                                    Public\n                                setSeriesState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:40\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        stateStyles: {\n            [RenderState.default]: {\n                opacity: 1,\n            },\n            [RenderState.hidden]: {\n                opacity: 0,\n            },\n            [RenderState.deemphasized]: {\n                opacity: 0.1,\n            },\n            [RenderState.emphasized]: {\n                opacity: 1,\n            },\n        },\n    }\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:23\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getContainerStateStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:95\n\n                            \n                        \n\n                \n                    \n                        Get the style attributes for the specified state that we need to apply to a series container\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        state\n                                                        \n                                                                the state for which to retrieve container styles\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            interaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                            \n                                \n                                    Inherited from         Renderer\n\n                                \n                            \n                        \n                            \n                                    Defined in         Renderer:45\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Defined in src/renderers/xy-renderer.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            draw\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    draw(renderSeries: IRenderSeries, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:53\n\n                \n            \n\n\n            \n                \n                    Draw the visual representation of the provided data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series to render\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            filterDataByDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filterDataByDomain(data: any[], dataSeries: IDataSeries, scaleName: string, domain: any[])\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:170\n\n                \n            \n\n\n            \n                \n                    Filters given dataset by domain of provided scale\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    domain\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDataPointIndex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointIndex(series: IDataSeries, values: literal type, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:74\n\n                \n            \n\n\n            \n                \n                    Based on provided values, return the nearest data point that the given coordinates represent. This is used for mouse hover behavior\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    series\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        series from which to determine the index corresponding to the specified values\n\n                                    \n                                \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the values from which a data point index can be determined\n\n                                    \n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the scales to be used in the index calculation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        negative value means that index is not found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Abstract\n                            getDataPointPosition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:63\n\n                \n            \n\n\n            \n                \n                    Return position of a specified datapoint\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scales\n                                    \n                                                Scales\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPosition | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomain\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomain(data: any[], dataSeries: IDataSeries, scaleName: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:153\n\n                \n            \n\n\n            \n                \n                    Calculate the domain using the data of a series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        source data, can be filtered\n\n                                    \n                                \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        related data series\n\n                                    \n                                \n                                \n                                    scaleName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the scale for which domain calculation is needed\n\n                                    \n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        min and max values as an array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getDomainOfFilteredData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getDomainOfFilteredData(dataSeries: IDataSeries, filterScales: Record>, scaleKey: string, scale: IScale)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:129\n\n                \n            \n\n\n            \n                \n                    Calculate domain for data filtered by given filterScales\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataSeries\n                                    \n                                                IDataSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filterScales\n                                    \n                                                Record>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scaleKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scale\n                                    \n                                                IScale\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        array of datapoints from dataSeries filtered by domains of given filterScales\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRequiredLayers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRequiredLayers()\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:190\n\n                \n            \n\n\n            \n                \n                    Get the definitions of lasagna layers required for visualizing data\n\n\n                    \n                    \n                    \n                        Returns :     ILasagnaLayer[]\n\n                    \n                    \n                        lasagna layer definitions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            highlightDataPoint\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    highlightDataPoint(renderSeries: IRenderSeries, dataPointIndex: number, rendererSubject: Subject)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:85\n\n                \n            \n\n\n            \n                \n                    Highlight the data point corresponding to the specified data point index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderSeries\n                                    \n                                                IRenderSeries\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The series on which to render the data point highlight\n\n                                    \n                                \n                                \n                                    dataPointIndex\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        index of the highlighted point within the data series (pass -1 to remove the highlight marker)\n\n                                    \n                                \n                                \n                                    rendererSubject\n                                    \n                                                Subject\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A subject to optionally invoke for emitting events regarding a data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setDataPointState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setDataPointState(target: D3Selection, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:117\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data point\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                                D3Selection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the target data point\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target data point\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setSeriesState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setSeriesState(renderContainers: IRenderContainers, state: RenderState)\n                \n            \n\n\n            \n                \n                    Inherited from         Renderer\n\n                \n            \n            \n                \n                        Defined in         Renderer:108\n\n                \n            \n\n\n            \n                \n                    Set the RenderState of the target data series\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    renderContainers\n                                    \n                                                IRenderContainers\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the render containers of the series\n\n                                    \n                                \n                                \n                                    state\n                                    \n                                                RenderState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new state for the target series\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Renderer } from \"../core/common/renderer\";\nimport { Scales } from \"../core/common/scales/types\";\nimport { IAccessors, IDataSeries, IPosition } from \"../core/common/types\";\n\nexport abstract class XYRenderer extends Renderer {\n\n    public getDataPointPosition(dataSeries: IDataSeries, index: number, scales: Scales): IPosition | undefined {\n        if (index = dataSeries.data.length) {\n            return undefined;\n        }\n        const point = dataSeries.data[index];\n\n        if (!dataSeries.accessors.data?.x || !dataSeries.accessors.data?.y) {\n            throw new Error(\"Can't get dataPointPosition\");\n        }\n        return {\n            x: scales.x.convert(dataSeries.accessors.data.x(point, index, dataSeries.data, dataSeries)),\n            y: scales.y.convert(dataSeries.accessors.data.y(point, index, dataSeries.data, dataSeries)),\n        };\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZoneCross.html":{"url":"interfaces/ZoneCross.html","title":"interface - ZoneCross","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZoneCross\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/thresholds/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        end\n                                \n                                \n                                            Optional\n                                        start\n                                \n                                \n                                        status\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        end\n                                    \n                                \n                                \n                                    \n                                        end:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        start\n                                    \n                                \n                                \n                                    \n                                        start:     Numeric\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Numeric\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Numeric } from \"d3-array\";\n\n/**\n * Used for simplified threshold zone definition. It is expected the start to be &lt; end.\n */\nexport interface ISimpleThresholdZone {\n    status: string;\n    start?: number;\n    end?: number;\n}\n\nexport interface ZoneCross {\n    status: string;\n    start?: Numeric;\n    end?: Numeric;\n}\n\n/**\n * Used for specifying the start or end boundary of a zone\n */\nexport enum ZoneBoundary {\n    Start = \"start\",\n    End = \"end\",\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ZoomPlugin.html":{"url":"classes/ZoomPlugin.html","title":"class - ZoomPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ZoomPlugin\n\n\n\n        \n            API\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/plugins/zoom-plugin.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartPlugin\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                config\n                            \n                            \n                                    Static\n                                    Readonly\n                                DEFAULT_CONFIG\n                            \n                            \n                                    Static\n                                LAYER_NAME\n                            \n                            \n                                    Public\n                                chart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                initialize\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Public\n                                updateDimensions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: IZoomPluginConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/core/plugins/zoom-plugin.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        IZoomPluginConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            DEFAULT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IZoomPluginConfiguration\n\n                        \n                    \n                    \n                        \n                            Default value : {\n        enableExternalEvents: false,\n    }\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            LAYER_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"zoom-brush\"\n                        \n                    \n                        \n                            \n                                    Defined in src/core/plugins/zoom-plugin.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IChart\n\n                        \n                    \n                            \n                                \n                                    Inherited from         ChartPlugin\n\n                                \n                            \n                        \n                            \n                                    Defined in         ChartPlugin:7\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Defined in src/core/plugins/zoom-plugin.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:15\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            initialize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initialize()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updateDimensions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDimensions()\n                \n            \n\n\n            \n                \n                    Inherited from         ChartPlugin\n\n                \n            \n            \n                \n                        Defined in         ChartPlugin:13\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BrushBehavior, BrushSelection, brushX } from \"d3-brush\";\nimport { event } from \"d3-selection\";\nimport defaultsDeep from \"lodash/defaultsDeep\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\n\nimport { INTERACTION_COORDINATES_EVENT, INTERACTION_VALUES_ACTIVE_EVENT, SET_DOMAIN_EVENT, STANDARD_RENDER_LAYERS } from \"../../constants\";\nimport { RenderLayerName } from \"../../renderers/types\";\nimport { ChartPlugin } from \"../common/chart-plugin\";\nimport { IScale } from \"../common/scales/types\";\nimport { D3Selection, IChartEvent, InteractionType, ISetDomainEventPayload } from \"../common/types\";\nimport { Grid } from \"../grid/grid\";\nimport { XYGrid } from \"../grid/xy-grid\";\n\nimport { IInteractionCoordinatesPayload } from \"./types\";\n\nexport interface IZoomPluginConfiguration {\n    enableExternalEvents?: boolean;\n}\n\nexport class ZoomPlugin extends ChartPlugin {\n    // *Note:* This plugin manually moves the d3 brush across the screen to accommodate a known Firefox\n    // bug in which mouse events report an incorrect pointer position for svg children of an element\n    // transformed by a translate function: https://github.com/d3/d3-selection/issues/81\n\n    public static LAYER_NAME = \"zoom-brush\";\n    public static readonly DEFAULT_CONFIG: IZoomPluginConfiguration = {\n        enableExternalEvents: false,\n    };\n\n    private grid: XYGrid;\n    private brush: BrushBehavior;\n    private zoomBrushLayer: D3Selection;\n    private brushElement: D3Selection;\n    private destroy$ = new Subject();\n    private brushStartX: number | undefined;\n    private interactionHandlerMap: Record;\n\n    constructor(public config: IZoomPluginConfiguration = {}) {\n        super();\n        this.config = defaultsDeep(this.config, ZoomPlugin.DEFAULT_CONFIG);\n        this.interactionHandlerMap = {\n            [InteractionType.MouseDown]: this.brushStart,\n            [InteractionType.MouseMove]: this.brushMove,\n            [InteractionType.MouseUp]: this.brushEnd,\n        };\n    }\n\n    public initialize(): void {\n        this.grid = this.chart.getGrid() as XYGrid;\n        this.zoomBrushLayer = this.grid.getLasagna().addLayer({\n            name: ZoomPlugin.LAYER_NAME,\n            // add 1 to the foreground layer's order to ensure the brush is rendered in front of it\n            order: STANDARD_RENDER_LAYERS[RenderLayerName.foreground].order + 1,\n            clipped: true,\n        });\n\n        this.chart.getEventBus().getStream(INTERACTION_COORDINATES_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((chartEvent: IChartEvent) => {\n                if (chartEvent.broadcast && !this.config.enableExternalEvents) {\n                    return;\n                }\n\n                const data: IInteractionCoordinatesPayload = chartEvent.data;\n                if (isEmpty(this.grid.scales) || isEmpty(data.coordinates)) {\n                    return;\n                }\n\n                if (this.interactionHandlerMap[data.interactionType]) {\n                    const xCoord = data.coordinates && data.coordinates.x;\n                    this.interactionHandlerMap[data.interactionType](xCoord);\n                }\n            });\n\n        this.brush = brushX();\n        this.brushElement = this.zoomBrushLayer.append(\"g\")\n            .attr(\"class\", \"brush\");\n\n        // engage pointer capture to confine mouse events to the interactive area\n        // (in other words, if the 'mouseup' is physically triggered outside the interactive area,\n        // the pointer capture allows us to still zoom based on that event)\n        this.chart.getGrid().getInteractiveArea()\n            .on(\"pointerdown\", () => event.target.setPointerCapture(event.pointerId))\n            .on(\"pointerup\", () => event.target.releasePointerCapture(event.pointerId));\n    }\n\n    public updateDimensions(): void {\n        const dimension = this.grid.config().dimension;\n\n        // set the brush area's dimensions\n        this.brush.extent([[0, 0], [dimension.width(), dimension.height()]]);\n\n        // render the brush area after we have dimensions\n        this.brush(this.zoomBrushLayer.select(\".brush\"));\n\n        // prevent the brush from handling its own pointer events\n        this.brushElement.select(\".overlay\")\n            .style(\"pointer-events\", \"none\");\n\n        // remove stroke per mockups\n        this.brushElement.select(\".selection\")\n            .attr(\"stroke\", null);\n    }\n\n    public destroy(): void {\n        this.grid.getLasagna().removeLayer(ZoomPlugin.LAYER_NAME);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n\n    private brushStart = (xCoord: number) => {\n        if (!isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: false });\n        this.brushStartX = xCoord;\n    }\n\n    private brushMove = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brush.move(this.brushElement, selection as BrushSelection);\n    }\n\n    private brushEnd = (xCoord: number) => {\n        if (isUndefined(this.brushStartX)) {\n            return;\n        }\n\n        const selection = [this.brushStartX, xCoord].sort((a, b) => a - b);\n        this.brushStartX = undefined;\n        this.chart.getEventBus().getStream(INTERACTION_VALUES_ACTIVE_EVENT).next({ data: true });\n\n        // remove the brush\n        this.brush.move(this.brushElement, null);\n\n        const xScales = this.grid.scales.x.list;\n        if (!xScales || selection[0] === selection[1]) {\n            return;\n        }\n\n        // Width correction to accommodate similar adjustment in grid. This ensures\n        // that the right-most column of pixels on the chart is selectable.\n        const widthCorrection = selection[1] === this.grid.config().dimension.width() - Grid.RENDER_AREA_WIDTH_CORRECTION ?\n            Grid.RENDER_AREA_WIDTH_CORRECTION : 0;\n        const data: ISetDomainEventPayload = xScales.reduce((result, next: IScale) => {\n            result[next.id] = [selection[0], selection[1] as number + widthCorrection].map(x => next.invert(x as number));\n            return result;\n        }, {});\n\n        // zoom the chart\n        this.chart.getEventBus().getStream(SET_DOMAIN_EVENT).next({ data });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            resize-observer-polyfill : ^1.5.0\n        \n            tslib : ^1.10.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @nova-ui/bits : ~9.34.0-0\n        \n            @types/d3 : ^5.0.0\n        \n            @types/d3-selection-multi : ^1.0.0\n        \n            d3 : ^5.0.0\n        \n            d3-color : 1.3.0\n        \n            d3-selection-multi : ^1.0.0\n        \n            d3-time-format : 2.1.3\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ChartAssistEventType   (src/.../types.ts)\n                        \n                        \n                            CssFilterId   (src/.../types.ts)\n                        \n                        \n                            InteractionType   (src/.../types.ts)\n                        \n                        \n                            LegendOrientation   (src/.../types.ts)\n                        \n                        \n                            RenderLayerName   (src/.../types.ts)\n                        \n                        \n                            RenderState   (src/.../types.ts)\n                        \n                        \n                            ZoneBoundary   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/chart-assists/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ChartAssistEventType\n                    \n                \n                    \n                        \n                            Event types that can be emitted from a chart assist \n\n                        \n                    \n                        \n                            \n                                 ToggleSeries\n                            \n                        \n                        \n                            \n                                Value : ToggleSeries\n                            \n                        \n                        \n                            \n                                 ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                Value : ResetVisibleSeries\n                            \n                        \n                        \n                            \n                                 EmphasizeSeries\n                            \n                        \n                        \n                            \n                                Value : EmphasizeSeries\n                            \n                        \n            \n        \n\n    src/core/types.ts\n    \n        \n            \n                \n                    \n                        \n                        CssFilterId\n                    \n                \n                    \n                        \n                            Common CSS filter IDs \n\n                        \n                    \n                        \n                            \n                                 Grayscale\n                            \n                        \n                        \n                            \n                                Value : grayscale\n                            \n                        \n            \n        \n\n    src/core/common/types.ts\n    \n        \n            \n                \n                    \n                        \n                        InteractionType\n                    \n                \n                    \n                        \n                            Mouse interaction types \n\n                        \n                    \n                        \n                            \n                                 Click\n                            \n                        \n                        \n                            \n                                Value : click\n                            \n                        \n                        \n                            \n                                 Hover\n                            \n                        \n                        \n                            \n                                Value : hover\n                            \n                        \n                        \n                            \n                                 MouseDown\n                            \n                        \n                        \n                            \n                                Value : mousedown\n                            \n                        \n                        \n                            \n                                 MouseEnter\n                            \n                        \n                        \n                            \n                                Value : mouseenter\n                            \n                        \n                        \n                            \n                                 MouseLeave\n                            \n                        \n                        \n                            \n                                Value : mouseleave\n                            \n                        \n                        \n                            \n                                 MouseMove\n                            \n                        \n                        \n                            \n                                Value : mousemove\n                            \n                        \n                        \n                            \n                                 MouseUp\n                            \n                        \n                        \n                            \n                                Value : mouseup\n                            \n                        \n            \n        \n\n    src/legend/types.ts\n    \n        \n            \n                \n                    \n                        \n                        LegendOrientation\n                    \n                \n                        \n                            \n                                 vertical\n                            \n                        \n                        \n                            \n                                Value : vertical\n                            \n                        \n                        \n                            \n                                 horizontal\n                            \n                        \n                        \n                            \n                                Value : horizontal\n                            \n                        \n            \n        \n\n    src/renderers/types.ts\n    \n        \n            \n                \n                    \n                        \n                        RenderLayerName\n                    \n                \n                        \n                            \n                                 background\n                            \n                        \n                        \n                            \n                                Value : background\n                            \n                        \n                        \n                            \n                                 data\n                            \n                        \n                        \n                            \n                                Value : data\n                            \n                        \n                        \n                            \n                                 foreground\n                            \n                        \n                        \n                            \n                                Value : foreground\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RenderState\n                    \n                \n                        \n                            \n                                 hidden\n                            \n                        \n                        \n                            \n                                Value : hidden\n                            \n                        \n                        \n                            \n                                 deemphasized\n                            \n                        \n                        \n                            \n                                Value : deemphasized\n                            \n                        \n                        \n                            \n                                 emphasized\n                            \n                        \n                        \n                            \n                                Value : emphasized\n                            \n                        \n                        \n                            \n                                 default\n                            \n                        \n                        \n                            \n                                Value : default\n                            \n                        \n            \n        \n\n    src/thresholds/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ZoneBoundary\n                    \n                \n                    \n                        \n                            Used for specifying the start or end boundary of a zone\n\n                        \n                    \n                        \n                            \n                                 Start\n                            \n                        \n                        \n                            \n                                Value : start\n                            \n                        \n                        \n                            \n                                 End\n                            \n                        \n                        \n                            \n                                Value : end\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCharts Overview\nNova Charts is a library created to provide potential consumers with solutions for various data visualizations that conform with the Nova Design Language. It's designed to solve common patterns identified by UX designers, but also be very flexible so that pieces of visualizations can be overridden or entirely new visualizations can be customized quickly. As with anything, the more customizations you wish to have, the more work and maintenance you will absorb within your own app's code.\nGetting Started\nGetting started with charts is quite simple:\n\nInclude charts in your package.json file\n \"devDependencies\": {\n     ...\n     \"@nova-ui/charts\": >>last release version\n\n\nAdd a reference to charts styles in your angular.json file. Without this step, the charts will render, but will look and act in unpredictable ways.\n \"projects\": {\n     \"your-project\": {\n         ...\n         \"architect\": {\n             ...\n             \"styles\": [\n                 \"src/styles.less\",\n                 \"./node_modules/@nova-ui/bits/bundles/css/styles.css\",\n                 \"./node_modules/@nova-ui/charts/bundles/css/styles.css\"\n              ],\n\n\nImport NuiChartsModule\n import { NuiChartsModule } from \"@nova-ui/charts\";\n\n @NgModule({\n     declarations: [ ... ],\n     imports: [ NuiChartsModule ],\n     exports: [ ... ],\n     providers: [ ... ]\n })\nCopy/Paste any of our examples (see TOC below) to create your own component, add it to your view and then play around with the options.\n\n\nTOC\n\nLayout\nChart Types\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nPie and Donut\nSpark\n\n\nPlugins\nTooltips\nPopovers\n\n\nThresholds\nTimeframe Selection\nAdvanced Usage\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright 2020 SolarWinds Worldwide, LLC\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NuiChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NuiChartsModule\n\n\n\ncluster_NuiChartsModule_declarations\n\n\n\ncluster_NuiChartsModule_exports\n\n\n\ncluster_NuiChartsModule_providers\n\n\n\n\nBasicLegendTileComponent\n\nBasicLegendTileComponent\n\n\n\nNuiChartsModule\n\nNuiChartsModule\n\nNuiChartsModule -->\n\nBasicLegendTileComponent->NuiChartsModule\n\n\n\n\n\nChartCollectionIdDirective\n\nChartCollectionIdDirective\n\nNuiChartsModule -->\n\nChartCollectionIdDirective->NuiChartsModule\n\n\n\n\n\nChartComponent\n\nChartComponent\n\nNuiChartsModule -->\n\nChartComponent->NuiChartsModule\n\n\n\n\n\nChartDonutContentComponent\n\nChartDonutContentComponent\n\nNuiChartsModule -->\n\nChartDonutContentComponent->NuiChartsModule\n\n\n\n\n\nChartMarkerComponent\n\nChartMarkerComponent\n\nNuiChartsModule -->\n\nChartMarkerComponent->NuiChartsModule\n\n\n\n\n\nChartPopoverComponent\n\nChartPopoverComponent\n\nNuiChartsModule -->\n\nChartPopoverComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipComponent\n\nChartTooltipComponent\n\nNuiChartsModule -->\n\nChartTooltipComponent->NuiChartsModule\n\n\n\n\n\nChartTooltipsComponent\n\nChartTooltipsComponent\n\nNuiChartsModule -->\n\nChartTooltipsComponent->NuiChartsModule\n\n\n\n\n\nLegendComponent\n\nLegendComponent\n\nNuiChartsModule -->\n\nLegendComponent->NuiChartsModule\n\n\n\n\n\nLegendSeriesComponent\n\nLegendSeriesComponent\n\nNuiChartsModule -->\n\nLegendSeriesComponent->NuiChartsModule\n\n\n\n\n\nRichLegendTileComponent\n\nRichLegendTileComponent\n\nNuiChartsModule -->\n\nRichLegendTileComponent->NuiChartsModule\n\n\n\n\n\nBasicLegendTileComponent \n\nBasicLegendTileComponent \n\nBasicLegendTileComponent  -->\n\nNuiChartsModule->BasicLegendTileComponent \n\n\n\n\n\nChartCollectionIdDirective \n\nChartCollectionIdDirective \n\nChartCollectionIdDirective  -->\n\nNuiChartsModule->ChartCollectionIdDirective \n\n\n\n\n\nChartComponent \n\nChartComponent \n\nChartComponent  -->\n\nNuiChartsModule->ChartComponent \n\n\n\n\n\nChartDonutContentComponent \n\nChartDonutContentComponent \n\nChartDonutContentComponent  -->\n\nNuiChartsModule->ChartDonutContentComponent \n\n\n\n\n\nChartMarkerComponent \n\nChartMarkerComponent \n\nChartMarkerComponent  -->\n\nNuiChartsModule->ChartMarkerComponent \n\n\n\n\n\nChartPopoverComponent \n\nChartPopoverComponent \n\nChartPopoverComponent  -->\n\nNuiChartsModule->ChartPopoverComponent \n\n\n\n\n\nChartTooltipComponent \n\nChartTooltipComponent \n\nChartTooltipComponent  -->\n\nNuiChartsModule->ChartTooltipComponent \n\n\n\n\n\nChartTooltipsComponent \n\nChartTooltipsComponent \n\nChartTooltipsComponent  -->\n\nNuiChartsModule->ChartTooltipsComponent \n\n\n\n\n\nLegendComponent \n\nLegendComponent \n\nLegendComponent  -->\n\nNuiChartsModule->LegendComponent \n\n\n\n\n\nLegendSeriesComponent \n\nLegendSeriesComponent \n\nLegendSeriesComponent  -->\n\nNuiChartsModule->LegendSeriesComponent \n\n\n\n\n\nRichLegendTileComponent \n\nRichLegendTileComponent \n\nRichLegendTileComponent  -->\n\nNuiChartsModule->RichLegendTileComponent \n\n\n\n\n\nChartCollectionService\n\nChartCollectionService\n\nNuiChartsModule -->\n\nChartCollectionService->NuiChartsModule\n\n\n\n\n\nThresholdsService\n\nThresholdsService\n\nNuiChartsModule -->\n\nThresholdsService->NuiChartsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    68 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    93 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BorderKey   (src/.../grid.ts)\n                        \n                        \n                            D3Selection   (src/.../types.ts)\n                        \n                        \n                            DataAccessor   (src/.../types.ts)\n                        \n                        \n                            DomainCalculator   (src/.../types.ts)\n                        \n                        \n                            Formatter   (src/.../types.ts)\n                        \n                        \n                            Scales   (src/.../types.ts)\n                        \n                        \n                            SelectedDatPointIdxFn   (src/.../bar-highlight-strategy.ts)\n                        \n                        \n                            SeriesAccessor   (src/.../types.ts)\n                        \n                        \n                            TextOverflowHandler   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/grid/grid.ts\n    \n    \n        \n            \n                \n                    \n                    BorderKey\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/common/types.ts\n    \n    \n        \n            \n                \n                    \n                    D3Selection\n                \n            \n            \n                \n                    Short-form alias for the most commonly used generic D3 Selection type\n\n                \n            \n            \n                \n                        Selection\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataAccessor\n                \n            \n            \n                \n                    Signature for data accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SeriesAccessor\n                \n            \n            \n                \n                    Signature for series accessors\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/common/scales/types.ts\n    \n    \n        \n            \n                \n                    \n                    DomainCalculator\n                \n            \n            \n                \n                    Signature for domain calculator \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Formatter\n                \n            \n            \n                \n                    Signature for label formatters \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Scales\n                \n            \n            \n                \n                    Dictionary of scales \n\n                \n            \n            \n                \n                            Record>\n\n                \n            \n        \n    \n    src/renderers/bar/highlight-strategies/bar-highlight-strategy.ts\n    \n    \n        \n            \n                \n                    \n                    SelectedDatPointIdxFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/core/grid/types.ts\n    \n    \n        \n            \n                \n                    \n                    TextOverflowHandler\n                \n            \n            \n                \n                    Type for tick overflow handler \n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            borderMidpoint   (src/.../grid.ts)\n                        \n                        \n                            CHART_MARKERS   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS_S_EXTENDED   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS1   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS2   (src/.../palettes.ts)\n                        \n                        \n                            CHART_PALETTE_CS3   (src/.../palettes.ts)\n                        \n                        \n                            CHART_VIEW_STATUS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            CONNECTION_POINTS   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            datetimeFormatter   (src/.../datetime-formatter.ts)\n                        \n                        \n                            DEFAULT_MARKER_INTERACTION_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_RADIAL_RENDERER_CONFIG   (src/.../radial-renderer.ts)\n                        \n                        \n                            DESTROY_EVENT   (src/.../constants.ts)\n                        \n                        \n                            EMPTY_CONTINUOUS_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            emptyShapes   (src/.../palettes.ts)\n                        \n                        \n                            formatSecond   (src/.../datetime-formatter.ts)\n                        \n                        \n                            getAutomaticDomain   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithIncludedInterval   (src/.../automatic-domain.ts)\n                        \n                        \n                            getAutomaticDomainWithTicks   (src/.../automatic-domain.ts)\n                        \n                        \n                            GRAYSCALE_COLOR_MATRIX   (src/.../types.ts)\n                        \n                        \n                            GRAYSCALE_FILTER   (src/.../types.ts)\n                        \n                        \n                            HIGHLIGHT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            HIGHLIGHT_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            IGNORE_INTERACTION_CLASS   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_COORDINATES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_DATA_POINTS_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_SERIES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            INTERACTION_VALUES_EVENT   (src/.../constants.ts)\n                        \n                        \n                            intlFormat   (src/.../datetime-formatter.ts)\n                        \n                        \n                            MOUSE_ACTIVE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            NORMALIZED_DOMAIN   (src/.../types.ts)\n                        \n                        \n                            OPPOSITE   (src/.../radial-tooltips-plugin.ts)\n                        \n                        \n                            REFRESH_EVENT   (src/.../constants.ts)\n                        \n                        \n                            regularShapes   (src/.../palettes.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                        \n                            SELECT_DATA_POINT_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SERIES_STATE_CHANGE_EVENT   (src/.../constants.ts)\n                        \n                        \n                            SET_DOMAIN_EVENT   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG   (src/.../constants.ts)\n                        \n                        \n                            TOOLTIP_POSITION_OFFSET   (src/.../chart-tooltips-plugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/grid/grid.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            borderMidpoint\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0.5\n                        \n                    \n\n\n            \n        \n\n    src/core/common/palette/palettes.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_MARKERS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SvgMarker[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    ...regularShapes\n        .map(s => ``),\n    ...emptyShapes\n        .map((s, i) =>\n            `\n            `\n        ),\n].map(s => new SvgMarker(s))\n                        \n                    \n\n                \n                    \n                        Default chart marker set \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-info)\",\n]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS_S_EXTENDED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-semantic-down)\",\n    \"var(--nui-color-semantic-down-bg)\",\n    \"var(--nui-color-semantic-critical)\",\n    \"var(--nui-color-semantic-critical-bg)\",\n    \"var(--nui-color-semantic-warning)\",\n    \"var(--nui-color-semantic-warning-bg)\",\n    \"var(--nui-color-semantic-unknown)\",\n    \"var(--nui-color-semantic-unknown-bg)\",\n    \"var(--nui-color-semantic-ok)\",\n    \"var(--nui-color-semantic-ok-bg)\",\n    \"var(--nui-color-semantic-info)\",\n    \"var(--nui-color-semantic-info-bg)\",\n]\n                        \n                    \n\n                \n                    \n                        Extended status color sequence for charts\nIt will substitute the default one above in v.11\nhttps://jira.solarwinds.com/browse/NUI-5367\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-ten)\",\n]\n                        \n                    \n\n                \n                    \n                        Default single-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n]\n                        \n                    \n\n                \n                    \n                        Default two-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_PALETTE_CS3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"var(--nui-color-chart-one)\",\n    \"var(--nui-color-chart-one-light)\",\n    \"var(--nui-color-chart-one-dark)\",\n    \"var(--nui-color-chart-two)\",\n    \"var(--nui-color-chart-two-light)\",\n    \"var(--nui-color-chart-two-dark)\",\n    \"var(--nui-color-chart-three)\",\n    \"var(--nui-color-chart-three-light)\",\n    \"var(--nui-color-chart-three-dark)\",\n    \"var(--nui-color-chart-four)\",\n    \"var(--nui-color-chart-four-light)\",\n    \"var(--nui-color-chart-four-dark)\",\n    \"var(--nui-color-chart-five)\",\n    \"var(--nui-color-chart-five-light)\",\n    \"var(--nui-color-chart-five-dark)\",\n    \"var(--nui-color-chart-six)\",\n    \"var(--nui-color-chart-six-light)\",\n    \"var(--nui-color-chart-six-dark)\",\n    \"var(--nui-color-chart-seven)\",\n    \"var(--nui-color-chart-seven-light)\",\n    \"var(--nui-color-chart-seven-dark)\",\n    \"var(--nui-color-chart-eight)\",\n    \"var(--nui-color-chart-eight-light)\",\n    \"var(--nui-color-chart-eight-dark)\",\n    \"var(--nui-color-chart-nine)\",\n    \"var(--nui-color-chart-nine-light)\",\n    \"var(--nui-color-chart-nine-dark)\",\n    \"var(--nui-color-chart-ten)\",\n    \"var(--nui-color-chart-ten-light)\",\n    \"var(--nui-color-chart-ten-dark)\",\n]\n                        \n                    \n\n                \n                    \n                        Default three-shade color sequence for charts \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emptyShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 2c1.105 0 2-.895 2-2 0-1.105-.895-2-2-2-1.105 0-2 .895-2 2 0 1.105.895 2 2 2zm0 2c-2.209 0-4-1.791-4-4 0-2.209 1.791-4 4-4 2.209 0 4 1.791 4 4 0 2.209-1.791 4-4 4z\", // circle empty\n    \"m-2-2 0 4 4 0 0-4-4 0zm-2-2 8 0 0 8-8 0 0-8z\", // square empty\n    \"m0-4-4 8 8.001 0-4.001-8zm0 3.354 1.573 3.146-3.145 0 1.572-3.146z\", // triangle up empty\n    \"m0-2.121-2.121 2.121 2.121 2.121 2.121-2.121-2.121-2.121zm0-2.828 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond empty\n    \"m0 4-4-8 8.001 0-4.001 8zm0-3.354 1.573-3.146-3.145 0 1.572 3.146z\", // triangle down empty\n    \"m0-1.951-2.237 1.626.855 2.63 2.766 0 .855-2.63-2.237-1.626zm0-1.854 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703 4.001-2.907z\", // pentagon empty\n]\n                        \n                    \n\n                \n                    \n                        Standard open shapes for chart markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            regularShapes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    \"m0 0m-4 0a4 4 0 1 0 8 0 4 4 0 1 0-8 0z\", // circle\n    \"m-4,-4l8,0l0,8l-8,0l0,-8z\", // square\n    \"m0-4 4 8-8 0z\", // triangle up\n    \"m0-4.95 4.95 4.95-4.95 4.95-4.95-4.95 4.95-4.95z\", // diamond\n    \"m0 4-4-8 8 0z\", // triangle down\n    \"m0-3.805 4.001 2.907-1.528 4.703-4.945 0-1.528-4.703z\", // pentagon\n]\n                        \n                    \n\n                \n                    \n                        Standard shapes for chart markers \n\n                    \n                \n\n            \n        \n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CHART_VIEW_STATUS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"chart_view_status\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DESTROY_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"destroy\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            HIGHLIGHT_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"highlight_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IGNORE_INTERACTION_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"ignore-interaction\"\n                        \n                    \n\n                \n                    \n                        Use this class to prevent DOM elements from triggering mouse-interactive-area events \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_COORDINATES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_coordinates\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_DATA_POINTS_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_data_points\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_SERIES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_series\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            INTERACTION_VALUES_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"interaction_values\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_ACTIVE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"mouse_active\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            REFRESH_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"refresh\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SELECT_DATA_POINT_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"select_data_point\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERIES_STATE_CHANGE_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"series_state_change\"\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SET_DOMAIN_EVENT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"set_domain\"\n                        \n                    \n\n\n            \n        \n\n    src/core/plugins/tooltips/radial-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONNECTION_POINTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type[]\n\n                        \n                    \n                    \n                        \n                            Default value : [\n        {x: \"end\", y: \"center\"},\n        {x: \"end\", y: \"bottom\"},\n        {x: \"center\", y: \"bottom\"},\n        {x: \"start\", y: \"bottom\"},\n        {x: \"start\", y: \"center\"},\n        {x: \"start\", y: \"top\"},\n        {x: \"center\", y: \"top\"},\n        {x: \"end\", y: \"top\"},\n    ]\n                        \n                    \n\n                \n                    \n                        The circle is divided into 8 parts (E, SE, S, SW, ...), these values represent the connection points\non the source element for the tooltip position starting with EAST and going clockwise)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OPPOSITE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"start\": \"end\",\n    \"end\": \"start\",\n    \"top\": \"bottom\",\n    \"bottom\": \"top\",\n}\n                        \n                    \n\n                \n                    \n                        This conversion map is used to calculate the opposite connection points for the tooltip element \n\n                    \n                \n\n            \n        \n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context(\"./\", true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/core/common/scales/formatters/datetime-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            datetimeFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Formatter\n\n                        \n                    \n                    \n                        \n                            Default value : (date: Date): string =>\n    (timeMinute(date) \n                        \n                    \n\n                \n                    \n                        Formatter for dates\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            formatSecond\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (d: Date) => intlFormat(d, {hour: \"numeric\", minute: \"2-digit\", second: \"2-digit\"})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intlFormat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (date: Date, options: Intl.DateTimeFormatOptions) =>\n    new Intl.DateTimeFormat(moment.locale(), options).format(date)\n                        \n                    \n\n\n            \n        \n\n    src/renderers/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MARKER_INTERACTION_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IMarkerInteractionConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    enabled: false,\n    clickable: false,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for marker interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_MAIN_CHART_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for the thresholds on a chart \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            THRESHOLDS_SUMMARY_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     miscellaneou\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    stateStyles: {\n        [RenderState.default]: {\n            opacity: 0.3,\n        },\n        [RenderState.hidden]: {\n            opacity: 0,\n        },\n        [RenderState.deemphasized]: {\n            opacity: 0,\n        },\n        [RenderState.emphasized]: {\n            opacity: 1,\n        },\n    },\n    ignoreForDomainCalculation: true,\n}\n                        \n                    \n\n                \n                    \n                        Renderer configuration for a thresholds summary chart \n\n                    \n                \n\n            \n        \n\n    src/renderers/radial/radial-renderer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RADIAL_RENDERER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IRadialRendererConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    annularWidth: 20,\n    annularPadding: 5,\n    maxThickness: 30,\n    annularGrowth: 0.15,\n    cursor: \"default\",\n    enableSeriesHighlighting: true,\n    enableDataPointHighlighting: true,\n}\n                        \n                    \n\n                \n                    \n                        Default configuration for Radial Renderer\n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EMPTY_CONTINUOUS_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 0]\n                        \n                    \n\n                \n                    \n                        Domain for series with empty or null data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NORMALIZED_DOMAIN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [0, 1]\n                        \n                    \n\n                \n                    \n                        A reasonable non-data-driven domain for charts  \n\n                    \n                \n\n            \n        \n\n    src/core/common/scales/domain-calculation/automatic-domain.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomain\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DomainCalculator\n\n                        \n                    \n                    \n                        \n                            Default value : (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n    const fixedDomains = getFixedDomains(chartSeriesSet, scaleKey);\n\n    const domains: any[][] = chartSeriesSet.map(cs => {\n        // find fixed, continuous scales that are referenced by this series\n        const filterScales = Object.keys(fixedDomains).reduce((result, next: string) => {\n            const seriesScale = cs.scales[next];\n            if (seriesScale && seriesScale.isContinuous() && indexOf(fixedDomains[next], seriesScale) !== -1) {\n                result[next] = seriesScale;\n            }\n            return result;\n        }, >>{});\n\n        return cs.renderer.getDomainOfFilteredData(cs, filterScales, scaleKey, cs.scales[scaleKey]);\n    });\n\n    return mergeDomains(domains, scale);\n}\n                        \n                    \n\n                \n                    \n                        Returns automatically calculated domain for given scaleKey based on given set of chart series. It considers scales with fixed domains for limiting\nconsidered data set.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithIncludedInterval\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (interval: [number, number]): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleId: string, scale: IScale) => {\n        const automaticDomain = getAutomaticDomain(chartSeriesSet, scaleId, scale);\n\n        return [Math.min(automaticDomain[0], interval[0]), Math.max(automaticDomain[1], interval[1])];\n    }\n                        \n                    \n\n                \n                    \n                        Works like getAutomaticDomain, but also includes provided interval in the calculated result\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAutomaticDomainWithTicks\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (config: IAxisConfig, axisGenerator: any): DomainCalculator =>\n    (chartSeriesSet: IChartSeries[], scaleKey: string, scale: IScale): any[] => {\n        const mergedDomains = getAutomaticDomain(chartSeriesSet, scaleKey, scale);\n        const clonedScale = cloneDeep(scale);\n        domain(clonedScale, mergedDomains);\n        const tickAxis: any = axisGenerator(clonedScale.d3Scale);\n        const ticks = tickAxis.scale().ticks(config.approximateTicks);\n        if (ticks.length  mergedDomains[0]) {\n            mergedDomains[0] = ticks[0] - ticksAverage;\n        }\n        if (ticks[ticks.length - 1] \n                        \n                    \n\n\n            \n        \n\n    src/core/types.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_COLOR_MATRIX\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0.2126 0.7152 0.0722 0 0\n0      0      0      1 0\n`\n                        \n                    \n\n                \n                    \n                        Transformation matrix value for applying a 100% grayscale appearance to an svg element \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GRAYSCALE_FILTER\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : `url(\"#${CssFilterId.Grayscale}\")`\n                        \n                    \n\n                \n                    \n                        CSS grayscale filter rule value \n\n                    \n                \n\n            \n        \n\n    src/core/plugins/tooltips/chart-tooltips-plugin.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TOOLTIP_POSITION_OFFSET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n\n                \n                    \n                        How far away from the data point position will the tooltip be positioned \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/layout.html":{"url":"additional-documentation/layout.html","title":"additional-page - Layout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types.html":{"url":"additional-documentation/chart-types.html","title":"additional-page - Chart Types","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChart Types\n\nLine\nBar\nBucketed Bar\nStatus\nWaterfall\n\n\nArea\nPie and Donut\nSpark\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/line.html":{"url":"additional-documentation/chart-types/line.html","title":"additional-page - Line","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar.html":{"url":"additional-documentation/chart-types/bar.html","title":"additional-page - Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/bucketed-bar.html":{"url":"additional-documentation/chart-types/bar/bucketed-bar.html","title":"additional-page - Bucketed Bar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/status.html":{"url":"additional-documentation/chart-types/bar/status.html","title":"additional-page - Status","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/bar/waterfall.html":{"url":"additional-documentation/chart-types/bar/waterfall.html","title":"additional-page - Waterfall","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/area.html":{"url":"additional-documentation/chart-types/area.html","title":"additional-page - Area","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/pie-and-donut.html":{"url":"additional-documentation/chart-types/pie-and-donut.html","title":"additional-page - Pie and Donut","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chart-types/spark.html":{"url":"additional-documentation/chart-types/spark.html","title":"additional-page - Spark","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins.html":{"url":"additional-documentation/plugins.html","title":"additional-page - Plugins","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlugins\n\nTooltips\nPopovers\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/tooltips.html":{"url":"additional-documentation/plugins/tooltips.html","title":"additional-page - Tooltips","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/plugins/popovers.html":{"url":"additional-documentation/plugins/popovers.html","title":"additional-page - Popovers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/thresholds.html":{"url":"additional-documentation/thresholds.html","title":"additional-page - Thresholds","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/timeframe-selection.html":{"url":"additional-documentation/timeframe-selection.html","title":"additional-page - Timeframe Selection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage.html":{"url":"additional-documentation/advanced-usage.html","title":"additional-page - Advanced Usage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced Usage\n\nChart\nLegend\nInput Structure\nData\nColors\nMarkers\n\n\nEvents\nGrid\nScales\nDomains\nFormatters\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/chart.html":{"url":"additional-documentation/advanced-usage/chart.html","title":"additional-page - Chart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/legend.html":{"url":"additional-documentation/advanced-usage/legend.html","title":"additional-page - Legend","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure.html":{"url":"additional-documentation/advanced-usage/input-structure.html","title":"additional-page - Input Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/data.html":{"url":"additional-documentation/advanced-usage/input-structure/data.html","title":"additional-page - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/colors.html":{"url":"additional-documentation/advanced-usage/input-structure/colors.html","title":"additional-page - Colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/input-structure/markers.html":{"url":"additional-documentation/advanced-usage/input-structure/markers.html","title":"additional-page - Markers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/events.html":{"url":"additional-documentation/advanced-usage/events.html","title":"additional-page - Events","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/grid.html":{"url":"additional-documentation/advanced-usage/grid.html","title":"additional-page - Grid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales.html":{"url":"additional-documentation/advanced-usage/scales.html","title":"additional-page - Scales","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/domains.html":{"url":"additional-documentation/advanced-usage/scales/domains.html","title":"additional-page - Domains","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/advanced-usage/scales/formatters.html":{"url":"additional-documentation/advanced-usage/scales/formatters.html","title":"additional-page - Formatters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
