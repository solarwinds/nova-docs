{"version":3,"sources":["./examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.ts","webpack:///./examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.ts?1362","./examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.html","webpack:///./examples/components/demo/development/data-point-selection/data-point-selection-prototype.module.ts?3a7a","webpack:///./node_modules/raw-loader/dist/cjs.js .*\\.(ts|html|less)$?446e","./examples/components/demo/development/data-point-selection/data-point-selection-prototype.module.ts","./examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.less","webpack:///./examples/components/demo/development/data-point-selection/data-point-selection-prototype.component.less?b58d"],"names":[],"mappings":"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","file":"data-point-selection-data-point-selection-prototype-module-es2015.js","sourcesContent":["import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport {\n    BandScale,\n    barAccessors,\n    BarGridConfig,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarStatusGridConfig,\n    BorderConfig,\n    Chart,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S,\n    convert,\n    DataAccessor,\n    DATA_POINT_NOT_FOUND,\n    IAccessors,\n    IBarRendererConfig,\n    IChartEvent,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointsEvent,\n    IInteractionValues,\n    IInteractionValuesPayload,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_VALUES_EVENT,\n    IXYScales,\n    MappedValueProvider,\n    MOUSE_ACTIVE_EVENT,\n    SelectedDatPointIdxFn,\n    StatusAccessors,\n    statusAccessors,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport moment, { duration } from \"moment/moment\";\n\nconst format = \"YYYY-MM-DDTHH:mm:ssZ\";\nconst baseDate = \"2016-12-25T15:05:00Z\";\n\nenum Status {\n    Up = \"up\",\n    Warning = \"warning\",\n    Critical = \"critical\",\n}\n\n@Component({\n    templateUrl: \"./data-point-selection-prototype.component.html\",\n    styleUrls: [\"./data-point-selection-prototype.component.less\"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DataPointSelectionPrototypeComponent implements OnInit {\n    public barChart: Chart;\n    public statusChart: Chart;\n\n    // Use the same 'x' scale id for both charts to ensure that interaction events such as hover are shared between the charts\n    private xScaleId = \"xScale\";\n\n    private selectedDataPoints: Record<string, IDataPoint> = {};\n    private labelPlugin = new InteractionLabelPlugin();\n    private renderer: BarRenderer;\n    private selectedLabelPosition?: IInteractionValues;\n\n    private colorProvider = {\n        // sets the bars used to visualize the selection box to 'transparent'. All other bars just use the first color in the CS1 palette.\n        get: (seriesId: string) => seriesId === \"selection-box\" ? \"transparent\" : CHART_PALETTE_CS1[0],\n        reset: () => { },\n    };\n\n    public ngOnInit() {\n        this.setUpBarChart();\n        this.setUpStatusChart();\n    }\n\n    public onReset() {\n        // Reset the stored selection\n        this.selectedDataPoints = {};\n        this.selectedLabelPosition = undefined;\n\n        // Redraw the charts\n        this.redrawCharts();\n\n        // Re-enable interaction label updates and hide the label by emitting a mouse move 'INTERACTION_VALUES_EVENT' with empty values.\n        this.labelPlugin.areLabelUpdatesEnabled = true;\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({ data: { interactionType: InteractionType.MouseMove, values: {} } });\n    }\n\n    private setUpBarChart() {\n        this.barChart = new Chart(this.configureBarGrid());\n        this.barChart.addPlugin(new InteractionLinePlugin());\n        this.barChart.addPlugin(this.labelPlugin);\n\n        // Setting up data point click handling\n        this.barChart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).subscribe(this.handleDataPointsInteraction);\n        // Setting up interaction label update handling\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).subscribe(this.handleInteractionLabelUpdates);\n        // Setting up what happens on chart mouseenter and mouseleave\n        this.barChart.getEventBus().getStream(MOUSE_ACTIVE_EVENT).subscribe(this.handleMouseActive);\n\n        // The color provider sets the selection boxes to 'transparent'\n        const accessors = barAccessors({}, this.colorProvider);\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\n        accessors.data.cssClass = this.cssClassAccessor;\n\n        const scales = barScales();\n        // Use the same 'x' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\n        scales.x = new TimeIntervalScale(duration(5, \"minutes\"), this.xScaleId);\n\n        // The 'barThickness' method sets the selection box width to be larger than the standard bars\n        accessors.data.thickness = this.barThickness(scales);\n\n        const rendererConfig: IBarRendererConfig = {\n            // Supply a 'selectedDataPointIdxFn' to the 'BarHighlightStrategy' to prevent the selected bar\n            // from being deemphasized/grayed out as the chart is hovered.\n            highlightStrategy: new BarHighlightStrategy(\"x\", 1, this.selectedDataPointIdxFn),\n            cursor: \"pointer\",\n        };\n        this.renderer = new BarRenderer(rendererConfig);\n\n        // Initialize the bar chart\n        this.barChart.update(getData().map(s => ({\n            ...s,\n            accessors,\n            renderer: this.renderer,\n            scales,\n        })));\n    }\n\n    private setUpStatusChart() {\n        this.statusChart = new Chart(this.configureStatusGrid());\n        this.statusChart.addPlugin(new InteractionLinePlugin());\n\n        // Setting up the status chart scales\n        const statusYScale = new BandScale();\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        // Use the same 'x' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\n        const statusXScale = new TimeIntervalScale(duration(5, \"minutes\"), this.xScaleId);\n        statusXScale.fixDomain([moment(baseDate, format).toDate(), moment(baseDate, format).add(25, \"minutes\").toDate()]);\n        const statusScales = {\n            x: statusXScale,\n            y: statusYScale,\n        };\n\n        // Setting up the status chart accessors\n        const myStatusAccessors = statusAccessors(new MappedValueProvider<string>(getStatusValueMap()));\n        myStatusAccessors.data.thickness = (data: any) => data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\n        // TODO: Implement 'selection-box' series for displaying the selection box on the status chart. For reference,\n        // see 'selection-box' data series on the bar chart.\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\n\n        // Initializing the status chart\n        this.statusChart.update(getStatusData()\n            .map(d => ({\n                ...d,\n                accessors: myStatusAccessors,\n                renderer: this.renderer,\n                scales: statusScales,\n            })));\n    }\n\n    private configureBarGrid() {\n        const gridConfig = new BarGridConfig();\n\n        gridConfig.axis.left.visible = false;\n        gridConfig.axis.left.gridTicks = false;\n        // Disable 'axis.bottom.fit' to set left and right margins manually\n        gridConfig.axis.bottom.fit = false;\n        gridConfig.borders.top = new BorderConfig();\n        gridConfig.cursor = \"pointer\";\n        gridConfig.dimension.padding.top = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n\n        // Use these settings to make the bar chart the same height as the status chart\n        // gridConfig.dimension.autoHeight = false;\n        // gridConfig.dimension.height(30);\n\n        return new XYGrid(gridConfig);\n    }\n\n    private configureStatusGrid() {\n        const gridConfig = new BarStatusGridConfig();\n\n        gridConfig.axis.bottom.visible = false;\n        gridConfig.cursor = \"pointer\";\n        gridConfig.dimension.margin.bottom = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n        gridConfig.borders.bottom.visible = false;\n\n        return new XYGrid(gridConfig);\n    }\n\n    private redrawCharts() {\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\n        this.statusChart.update(this.statusChart.getDataManager().chartSeriesSet);\n    }\n\n    private handleDataPointsInteraction = (event: IChartEvent) => {\n        const data: IInteractionDataPointsEvent = event.data;\n        // we're interested in data point click events here\n        if (data.interactionType === InteractionType.Click) {\n            // set the selected data points\n            this.selectedDataPoints = data.dataPoints;\n\n            if (this.renderer.config.stateStyles) {\n                // change the bar container opacity from 0.1 to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\n            }\n\n            // redraw the charts to apply the selected data point style\n            this.redrawCharts();\n\n            // store the interaction label position for the selected data point\n            this.selectedLabelPosition = this.calculateInteractionLabelPosition(data);\n\n            // apply the label position based on the click\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\n            });\n        }\n    }\n\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\n        const data: IInteractionValuesPayload = event.data;\n\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\n        if (data.interactionType === InteractionType.MouseMove && isEmpty(data.values) && this.selectedLabelPosition) {\n\n            // ensure label updates are enabled\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n\n            // Update the label with the stored label position by manually emitting an 'INTERACTION_VALUES_EVENT'.\n            // Note that 'broadcast' is set to 'true' to let the 'nuiChartCollection' directive know that the event is\n            // coming from outside the chart and should not propagate to other charts in the collection.\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\n                broadcast: true,\n            });\n\n            // disable further label updates\n            this.labelPlugin.areLabelUpdatesEnabled = false;\n\n        } else if (data.interactionType === InteractionType.MouseMove && !isEmpty(data.values)) {\n\n            // allow label updates while the mouse is hovering over the chart\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n        }\n    }\n\n    private handleMouseActive = (event: IChartEvent) => {\n        if (this.renderer.config.stateStyles) {\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\n                // if there's a selected data point and the mouse has moved away\n                // from the chart, set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\n            } else if (event.data) {\n                // if the mouse is over the chart set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.1 };\n            }\n        }\n\n        if (this.barChart.getDataManager().chartSeriesSet.length > 0 && this.statusChart.getDataManager().chartSeriesSet.length > 0) {\n            // redraw the charts if we have data\n            this.redrawCharts();\n        }\n    }\n\n    /**\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\n     * to be wider than the standard bars).\n     */\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\n        return (d: any, i: number, series: any[], dataSeries: IDataSeries<IAccessors>) => {\n            let thickness: number;\n            const x1 = convert(scales.x, dataSeries.accessors.data?.[\"startX\"]?.(d, i, dataSeries.data, dataSeries), 0);\n            const x2 = convert(scales.x, dataSeries.accessors.data?.[\"endX\"]?.(d, i, dataSeries.data, dataSeries), 1);\n            thickness = Math.abs(x1 - x2);\n\n            // Allow the selection boxes to be a little wider than the data bars\n            thickness -= dataSeries.id === \"selection-box\" ? 2 : 6;\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\n            return thickness;\n        };\n    }\n\n    /**\n     * Allows the 'BarHighlightingStrategy' to know which data point (or bar) on a series is selected, if any.\n     * Return 'DATA_POINT_NOT_FOUND' if no data point is selected on the specified series.\n     */\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (seriesId: string): number => this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\n\n    /**\n     * Sets the stroke color of the selection box when a time interval is selected\n     *\n     * @returns The 'selected' class (see less file) if a bar is selected, the series id matches the selection box series, and the\n     * selected data point index matches the current index; otherwise, returns an empty string.\n     */\n    private cssClassAccessor = (d: any, i: number, series: any, dataSeries: any): string =>\n        !isEmpty(this.selectedDataPoints) && dataSeries.id === \"selection-box\" && this.selectedDataPoints[dataSeries.id]?.index === i ? \"selected\" : \"\"\n\n    /**\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\n     */\n    private calculateInteractionLabelPosition(data: IInteractionDataPointsEvent): IInteractionValues {\n        const sampleDataPoint = data.dataPoints[Object.keys(data.dataPoints)[0]];\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\n\n        if (!sampleDataPoint.position || isUndefined(sampleDataPoint.position.width) || isUndefined(sampleDataPoint.position.height)) {\n            throw new Error(\"Can't calculate x and y values\");\n        }\n\n        const xCoordinate = sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\n        const yCoordinate = sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\n\n        return UtilityService.getXYValues(xScales, yScales, xCoordinate, yCoordinate);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: \"series-1\",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 66 },\n                { category: moment(baseDate, format).add(5, \"minutes\").toDate(), value: 14 },\n                { category: moment(baseDate, format).add(10, \"minutes\").toDate(), value: 25 },\n                { category: moment(baseDate, format).add(15, \"minutes\").toDate(), value: 55 },\n                { category: moment(baseDate, format).add(20, \"minutes\").toDate(), value: 33 },\n                { category: moment(baseDate, format).add(25, \"minutes\").toDate(), value: 5 },\n            ],\n        },\n\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\n        // outline. The 'fill' of the boxes is set to transparent by the 'colorProvider' in the component\n        // above. And, the blue outline of the selected time interval is toggled by the 'cssClassAccessor'\n        // method in the above component.\n        {\n            id: \"selection-box\",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 100 },\n                { category: moment(baseDate, format).add(5, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(10, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(15, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(20, \"minutes\").toDate(), value: 100 },\n                { category: moment(baseDate, format).add(25, \"minutes\").toDate(), value: 100 },\n            ],\n        },\n    ];\n}\n\nfunction getStatusValueMap() {\n    return {\n        [Status.Up]: CHART_PALETTE_CS_S[4],\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\n    };\n}\n\nfunction getStatusData() {\n    return [{\n        id: \"series-1\",\n        name: \"Series 1\",\n        data: [\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).toDate(),\n                end: moment(baseDate, format).toDate(),\n            },\n            {\n                status: Status.Warning,\n                start: moment(baseDate, format).add(5, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(5, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Critical,\n                start: moment(baseDate, format).add(10, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(10, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).add(15, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(15, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Critical,\n                start: moment(baseDate, format).add(20, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(20, \"minutes\").toDate(),\n            },\n            {\n                status: Status.Up,\n                start: moment(baseDate, format).add(25, \"minutes\").toDate(),\n                end: moment(baseDate, format).add(25, \"minutes\").toDate(),\n            },\n        ],\n    }];\n\n}\n","export default \"import { Component, OnInit, ViewEncapsulation } from \\\"@angular/core\\\";\\nimport {\\n    BandScale,\\n    barAccessors,\\n    BarGridConfig,\\n    BarHighlightStrategy,\\n    BarRenderer,\\n    barScales,\\n    BarStatusGridConfig,\\n    BorderConfig,\\n    Chart,\\n    CHART_PALETTE_CS1,\\n    CHART_PALETTE_CS_S,\\n    convert,\\n    DataAccessor,\\n    DATA_POINT_NOT_FOUND,\\n    IAccessors,\\n    IBarRendererConfig,\\n    IChartEvent,\\n    IDataPoint,\\n    IDataSeries,\\n    IInteractionDataPointsEvent,\\n    IInteractionValues,\\n    IInteractionValuesPayload,\\n    InteractionLabelPlugin,\\n    InteractionLinePlugin,\\n    InteractionType,\\n    INTERACTION_DATA_POINTS_EVENT,\\n    INTERACTION_VALUES_EVENT,\\n    IXYScales,\\n    MappedValueProvider,\\n    MOUSE_ACTIVE_EVENT,\\n    SelectedDatPointIdxFn,\\n    StatusAccessors,\\n    statusAccessors,\\n    TimeIntervalScale,\\n    UtilityService,\\n    XYGrid,\\n} from \\\"@nova-ui/charts\\\";\\nimport isEmpty from \\\"lodash/isEmpty\\\";\\nimport isUndefined from \\\"lodash/isUndefined\\\";\\nimport moment, { duration } from \\\"moment/moment\\\";\\n\\nconst format = \\\"YYYY-MM-DDTHH:mm:ssZ\\\";\\nconst baseDate = \\\"2016-12-25T15:05:00Z\\\";\\n\\nenum Status {\\n    Up = \\\"up\\\",\\n    Warning = \\\"warning\\\",\\n    Critical = \\\"critical\\\",\\n}\\n\\n@Component({\\n    templateUrl: \\\"./data-point-selection-prototype.component.html\\\",\\n    styleUrls: [\\\"./data-point-selection-prototype.component.less\\\"],\\n    encapsulation: ViewEncapsulation.None,\\n})\\nexport class DataPointSelectionPrototypeComponent implements OnInit {\\n    public barChart: Chart;\\n    public statusChart: Chart;\\n\\n    // Use the same 'x' scale id for both charts to ensure that interaction events such as hover are shared between the charts\\n    private xScaleId = \\\"xScale\\\";\\n\\n    private selectedDataPoints: Record<string, IDataPoint> = {};\\n    private labelPlugin = new InteractionLabelPlugin();\\n    private renderer: BarRenderer;\\n    private selectedLabelPosition?: IInteractionValues;\\n\\n    private colorProvider = {\\n        // sets the bars used to visualize the selection box to 'transparent'. All other bars just use the first color in the CS1 palette.\\n        get: (seriesId: string) => seriesId === \\\"selection-box\\\" ? \\\"transparent\\\" : CHART_PALETTE_CS1[0],\\n        reset: () => { },\\n    };\\n\\n    public ngOnInit() {\\n        this.setUpBarChart();\\n        this.setUpStatusChart();\\n    }\\n\\n    public onReset() {\\n        // Reset the stored selection\\n        this.selectedDataPoints = {};\\n        this.selectedLabelPosition = undefined;\\n\\n        // Redraw the charts\\n        this.redrawCharts();\\n\\n        // Re-enable interaction label updates and hide the label by emitting a mouse move 'INTERACTION_VALUES_EVENT' with empty values.\\n        this.labelPlugin.areLabelUpdatesEnabled = true;\\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({ data: { interactionType: InteractionType.MouseMove, values: {} } });\\n    }\\n\\n    private setUpBarChart() {\\n        this.barChart = new Chart(this.configureBarGrid());\\n        this.barChart.addPlugin(new InteractionLinePlugin());\\n        this.barChart.addPlugin(this.labelPlugin);\\n\\n        // Setting up data point click handling\\n        this.barChart.getEventBus().getStream(INTERACTION_DATA_POINTS_EVENT).subscribe(this.handleDataPointsInteraction);\\n        // Setting up interaction label update handling\\n        this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).subscribe(this.handleInteractionLabelUpdates);\\n        // Setting up what happens on chart mouseenter and mouseleave\\n        this.barChart.getEventBus().getStream(MOUSE_ACTIVE_EVENT).subscribe(this.handleMouseActive);\\n\\n        // The color provider sets the selection boxes to 'transparent'\\n        const accessors = barAccessors({}, this.colorProvider);\\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\\n        accessors.data.cssClass = this.cssClassAccessor;\\n\\n        const scales = barScales();\\n        // Use the same 'x' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\\n        scales.x = new TimeIntervalScale(duration(5, \\\"minutes\\\"), this.xScaleId);\\n\\n        // The 'barThickness' method sets the selection box width to be larger than the standard bars\\n        accessors.data.thickness = this.barThickness(scales);\\n\\n        const rendererConfig: IBarRendererConfig = {\\n            // Supply a 'selectedDataPointIdxFn' to the 'BarHighlightStrategy' to prevent the selected bar\\n            // from being deemphasized/grayed out as the chart is hovered.\\n            highlightStrategy: new BarHighlightStrategy(\\\"x\\\", 1, this.selectedDataPointIdxFn),\\n            cursor: \\\"pointer\\\",\\n        };\\n        this.renderer = new BarRenderer(rendererConfig);\\n\\n        // Initialize the bar chart\\n        this.barChart.update(getData().map(s => ({\\n            ...s,\\n            accessors,\\n            renderer: this.renderer,\\n            scales,\\n        })));\\n    }\\n\\n    private setUpStatusChart() {\\n        this.statusChart = new Chart(this.configureStatusGrid());\\n        this.statusChart.addPlugin(new InteractionLinePlugin());\\n\\n        // Setting up the status chart scales\\n        const statusYScale = new BandScale();\\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\\n        // Use the same 'x' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\\n        const statusXScale = new TimeIntervalScale(duration(5, \\\"minutes\\\"), this.xScaleId);\\n        statusXScale.fixDomain([moment(baseDate, format).toDate(), moment(baseDate, format).add(25, \\\"minutes\\\").toDate()]);\\n        const statusScales = {\\n            x: statusXScale,\\n            y: statusYScale,\\n        };\\n\\n        // Setting up the status chart accessors\\n        const myStatusAccessors = statusAccessors(new MappedValueProvider<string>(getStatusValueMap()));\\n        myStatusAccessors.data.thickness = (data: any) => data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\\n\\n        // The 'cssClassAccessor' updates the stroke color of the selection box when a time interval is selected\\n        // TODO: Implement 'selection-box' series for displaying the selection box on the status chart. For reference,\\n        // see 'selection-box' data series on the bar chart.\\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\\n\\n        // Initializing the status chart\\n        this.statusChart.update(getStatusData()\\n            .map(d => ({\\n                ...d,\\n                accessors: myStatusAccessors,\\n                renderer: this.renderer,\\n                scales: statusScales,\\n            })));\\n    }\\n\\n    private configureBarGrid() {\\n        const gridConfig = new BarGridConfig();\\n\\n        gridConfig.axis.left.visible = false;\\n        gridConfig.axis.left.gridTicks = false;\\n        // Disable 'axis.bottom.fit' to set left and right margins manually\\n        gridConfig.axis.bottom.fit = false;\\n        gridConfig.borders.top = new BorderConfig();\\n        gridConfig.cursor = \\\"pointer\\\";\\n        gridConfig.dimension.padding.top = 0;\\n        // Synchronize the left and right margins (left margin default is 30px)\\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\\n\\n        // Use these settings to make the bar chart the same height as the status chart\\n        // gridConfig.dimension.autoHeight = false;\\n        // gridConfig.dimension.height(30);\\n\\n        return new XYGrid(gridConfig);\\n    }\\n\\n    private configureStatusGrid() {\\n        const gridConfig = new BarStatusGridConfig();\\n\\n        gridConfig.axis.bottom.visible = false;\\n        gridConfig.cursor = \\\"pointer\\\";\\n        gridConfig.dimension.margin.bottom = 0;\\n        // Synchronize the left and right margins (left margin default is 30px)\\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\\n        gridConfig.borders.bottom.visible = false;\\n\\n        return new XYGrid(gridConfig);\\n    }\\n\\n    private redrawCharts() {\\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\\n        this.statusChart.update(this.statusChart.getDataManager().chartSeriesSet);\\n    }\\n\\n    private handleDataPointsInteraction = (event: IChartEvent) => {\\n        const data: IInteractionDataPointsEvent = event.data;\\n        // we're interested in data point click events here\\n        if (data.interactionType === InteractionType.Click) {\\n            // set the selected data points\\n            this.selectedDataPoints = data.dataPoints;\\n\\n            if (this.renderer.config.stateStyles) {\\n                // change the bar container opacity from 0.1 to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\\n            }\\n\\n            // redraw the charts to apply the selected data point style\\n            this.redrawCharts();\\n\\n            // store the interaction label position for the selected data point\\n            this.selectedLabelPosition = this.calculateInteractionLabelPosition(data);\\n\\n            // apply the label position based on the click\\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\\n            });\\n        }\\n    }\\n\\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\\n        const data: IInteractionValuesPayload = event.data;\\n\\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\\n        if (data.interactionType === InteractionType.MouseMove && isEmpty(data.values) && this.selectedLabelPosition) {\\n\\n            // ensure label updates are enabled\\n            this.labelPlugin.areLabelUpdatesEnabled = true;\\n\\n            // Update the label with the stored label position by manually emitting an 'INTERACTION_VALUES_EVENT'.\\n            // Note that 'broadcast' is set to 'true' to let the 'nuiChartCollection' directive know that the event is\\n            // coming from outside the chart and should not propagate to other charts in the collection.\\n            this.barChart.getEventBus().getStream(INTERACTION_VALUES_EVENT).next({\\n                data: { interactionType: InteractionType.MouseMove, values: this.selectedLabelPosition },\\n                broadcast: true,\\n            });\\n\\n            // disable further label updates\\n            this.labelPlugin.areLabelUpdatesEnabled = false;\\n\\n        } else if (data.interactionType === InteractionType.MouseMove && !isEmpty(data.values)) {\\n\\n            // allow label updates while the mouse is hovering over the chart\\n            this.labelPlugin.areLabelUpdatesEnabled = true;\\n        }\\n    }\\n\\n    private handleMouseActive = (event: IChartEvent) => {\\n        if (this.renderer.config.stateStyles) {\\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\\n                // if there's a selected data point and the mouse has moved away\\n                // from the chart, set the bar container opacity to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.3 };\\n            } else if (event.data) {\\n                // if the mouse is over the chart set the bar container opacity to 0.3\\n                this.renderer.config.stateStyles.deemphasized = { opacity: 0.1 };\\n            }\\n        }\\n\\n        if (this.barChart.getDataManager().chartSeriesSet.length > 0 && this.statusChart.getDataManager().chartSeriesSet.length > 0) {\\n            // redraw the charts if we have data\\n            this.redrawCharts();\\n        }\\n    }\\n\\n    /**\\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\\n     * to be wider than the standard bars).\\n     */\\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\\n        return (d: any, i: number, series: any[], dataSeries: IDataSeries<IAccessors>) => {\\n            let thickness: number;\\n            const x1 = convert(scales.x, dataSeries.accessors.data?.[\\\"startX\\\"]?.(d, i, dataSeries.data, dataSeries), 0);\\n            const x2 = convert(scales.x, dataSeries.accessors.data?.[\\\"endX\\\"]?.(d, i, dataSeries.data, dataSeries), 1);\\n            thickness = Math.abs(x1 - x2);\\n\\n            // Allow the selection boxes to be a little wider than the data bars\\n            thickness -= dataSeries.id === \\\"selection-box\\\" ? 2 : 6;\\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\\n            return thickness;\\n        };\\n    }\\n\\n    /**\\n     * Allows the 'BarHighlightingStrategy' to know which data point (or bar) on a series is selected, if any.\\n     * Return 'DATA_POINT_NOT_FOUND' if no data point is selected on the specified series.\\n     */\\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (seriesId: string): number => this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\\n\\n    /**\\n     * Sets the stroke color of the selection box when a time interval is selected\\n     *\\n     * @returns The 'selected' class (see less file) if a bar is selected, the series id matches the selection box series, and the\\n     * selected data point index matches the current index; otherwise, returns an empty string.\\n     */\\n    private cssClassAccessor = (d: any, i: number, series: any, dataSeries: any): string =>\\n        !isEmpty(this.selectedDataPoints) && dataSeries.id === \\\"selection-box\\\" && this.selectedDataPoints[dataSeries.id]?.index === i ? \\\"selected\\\" : \\\"\\\"\\n\\n    /**\\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\\n     */\\n    private calculateInteractionLabelPosition(data: IInteractionDataPointsEvent): IInteractionValues {\\n        const sampleDataPoint = data.dataPoints[Object.keys(data.dataPoints)[0]];\\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\\n\\n        if (!sampleDataPoint.position || isUndefined(sampleDataPoint.position.width) || isUndefined(sampleDataPoint.position.height)) {\\n            throw new Error(\\\"Can't calculate x and y values\\\");\\n        }\\n\\n        const xCoordinate = sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\\n        const yCoordinate = sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\\n\\n        return UtilityService.getXYValues(xScales, yScales, xCoordinate, yCoordinate);\\n    }\\n}\\n\\n/* Chart data */\\nfunction getData() {\\n    return [\\n        {\\n            id: \\\"series-1\\\",\\n            data: [\\n                { category: moment(baseDate, format).toDate(), value: 66 },\\n                { category: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(), value: 14 },\\n                { category: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(), value: 25 },\\n                { category: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(), value: 55 },\\n                { category: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(), value: 33 },\\n                { category: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(), value: 5 },\\n            ],\\n        },\\n\\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\\n        // outline. The 'fill' of the boxes is set to transparent by the 'colorProvider' in the component\\n        // above. And, the blue outline of the selected time interval is toggled by the 'cssClassAccessor'\\n        // method in the above component.\\n        {\\n            id: \\\"selection-box\\\",\\n            data: [\\n                { category: moment(baseDate, format).toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(), value: 100 },\\n                { category: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(), value: 100 },\\n            ],\\n        },\\n    ];\\n}\\n\\nfunction getStatusValueMap() {\\n    return {\\n        [Status.Up]: CHART_PALETTE_CS_S[4],\\n        [Status.Warning]: CHART_PALETTE_CS_S[2],\\n        [Status.Critical]: CHART_PALETTE_CS_S[1],\\n    };\\n}\\n\\nfunction getStatusData() {\\n    return [{\\n        id: \\\"series-1\\\",\\n        name: \\\"Series 1\\\",\\n        data: [\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).toDate(),\\n                end: moment(baseDate, format).toDate(),\\n            },\\n            {\\n                status: Status.Warning,\\n                start: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(5, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Critical,\\n                start: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(10, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(15, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Critical,\\n                start: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(20, \\\"minutes\\\").toDate(),\\n            },\\n            {\\n                status: Status.Up,\\n                start: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(),\\n                end: moment(baseDate, format).add(25, \\\"minutes\\\").toDate(),\\n            },\\n        ],\\n    }];\\n\\n}\\n\";","export default \"<nui-example-wrapper filenamePrefix=\\\"data-point-selection-prototype\\\" exampleTitle=\\\"Data Point Selection Prototype\\\">\\n    <nui-message type=\\\"critical\\\" [allowDismiss]=\\\"false\\\">\\n        <strong>Note:</strong> This is only a prototype, so its implementation is unpolished. Please\\n        use discretion when copying the code as there are likely solutions more concise and/or\\n        elegant than those presented here.\\n        <strong>For assistance, please contact Blake Simmon or Lukas Holcik.</strong>\\n    </nui-message>\\n    <hr>\\n    <nui-chart class=\\\"d-flex chart\\\" [chart]=\\\"statusChart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n    <nui-chart class=\\\"d-flex chart\\\" [chart]=\\\"barChart\\\" nuiChartCollectionId=\\\"collection\\\"></nui-chart>\\n    <hr>\\n    <button type=\\\"button\\\" nui-button (click)=\\\"onReset()\\\">Reset</button>\\n</nui-example-wrapper>\\n\";","export default \"import { NgModule } from \\\"@angular/core\\\";\\nimport { RouterModule, Routes } from \\\"@angular/router\\\";\\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiDocsModule, NuiIconModule, NuiMessageModule } from \\\"@nova-ui/bits\\\";\\nimport { NuiChartsModule } from \\\"@nova-ui/charts\\\";\\n\\nimport { DemoCommonModule } from \\\"../../common/demo-common.module\\\";\\n\\nimport { DataPointSelectionPrototypeComponent } from \\\"./data-point-selection-prototype.component\\\";\\n\\nconst routes: Routes = [\\n    {\\n        path: \\\"\\\",\\n        component: DataPointSelectionPrototypeComponent,\\n        data: {\\n            \\\"srlc\\\": {\\n                \\\"hideIndicator\\\": true,\\n            },\\n        },\\n    },\\n];\\n\\n@NgModule({\\n    declarations: [\\n        DataPointSelectionPrototypeComponent,\\n    ],\\n    imports: [\\n        DemoCommonModule,\\n        NuiButtonModule,\\n        NuiDocsModule,\\n        NuiMessageModule,\\n        NuiChartsModule,\\n        NuiIconModule,\\n        RouterModule.forChild(routes),\\n    ],\\n    providers: [\\n        { provide: DEMO_PATH_TOKEN, useFactory: () =>  (<any> require).context(`!!raw-loader!./`, true, /.*\\\\.(ts|html|less)$/)},\\n    ],\\n})\\nexport class DataPointSelectionPrototypeModule {\\n}\\n\";","var map = {\n\t\"./data-point-selection-prototype.component.html\": \"IPrL\",\n\t\"./data-point-selection-prototype.component.less\": \"emcV\",\n\t\"./data-point-selection-prototype.component.ts\": \"E2It\",\n\t\"./data-point-selection-prototype.module.ts\": \"Onqy\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"YAGT\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { DEMO_PATH_TOKEN, NuiButtonModule, NuiDocsModule, NuiIconModule, NuiMessageModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { DataPointSelectionPrototypeComponent } from \"./data-point-selection-prototype.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: DataPointSelectionPrototypeComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        DataPointSelectionPrototypeComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [\n        { provide: DEMO_PATH_TOKEN, useFactory: () =>  (<any> require).context(`!!raw-loader!./`, true, /.*\\.(ts|html|less)$/)},\n    ],\n})\nexport class DataPointSelectionPrototypeModule {\n}\n","export default \".selected {\\n    stroke: #52d9e3 !important;\\n}\\n\\n.chart {\\n    max-width: 800px;\\n}\\n\";","export default \".selected {\\n  stroke: #52d9e3 !important;\\n}\\n.chart {\\n  max-width: 800px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhdGEtcG9pbnQtc2VsZWN0aW9uLXByb3RvdHlwZS5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLDBCQUFBO0FBQ0o7QUFFQTtFQUNJLGdCQUFBO0FBQUoiLCJmaWxlIjoiZGF0YS1wb2ludC1zZWxlY3Rpb24tcHJvdG90eXBlLmNvbXBvbmVudC5sZXNzIiwic291cmNlc0NvbnRlbnQiOlsiLnNlbGVjdGVkIHtcbiAgICBzdHJva2U6ICM1MmQ5ZTMgIWltcG9ydGFudDtcbn1cblxuLmNoYXJ0IHtcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xufVxuIl19 */\";"],"sourceRoot":"webpack:///"}