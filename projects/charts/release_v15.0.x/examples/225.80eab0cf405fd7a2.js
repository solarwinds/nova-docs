(self.webpackChunkexamples=self.webpackChunkexamples||[]).push([[225],{82111:(a,n,e)=>{var t={"./advanced-usage/accessors/chart-docs-accessors.module":57827,"./advanced-usage/accessors/chart-docs-accessors.module.ts":57827,"./advanced-usage/accessors/colors/chart-docs-accessors-colors.component":49996,"./advanced-usage/accessors/colors/chart-docs-accessors-colors.component.html":63221,"./advanced-usage/accessors/colors/chart-docs-accessors-colors.component.ts":49996,"./advanced-usage/accessors/colors/chart-docs-accessors-colors.module":22904,"./advanced-usage/accessors/colors/chart-docs-accessors-colors.module.ts":22904,"./advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component":94764,"./advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.html":6889,"./advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.ts":94764,"./advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component":74313,"./advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.html":82277,"./advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.ts":74313,"./advanced-usage/accessors/data/accessors/accessors.example.component":60217,"./advanced-usage/accessors/data/accessors/accessors.example.component.html":64898,"./advanced-usage/accessors/data/accessors/accessors.example.component.ts":60217,"./advanced-usage/accessors/data/chart-docs-accessors-data.component":50069,"./advanced-usage/accessors/data/chart-docs-accessors-data.component.html":24131,"./advanced-usage/accessors/data/chart-docs-accessors-data.component.ts":50069,"./advanced-usage/accessors/data/chart-docs-accessors-data.module":37534,"./advanced-usage/accessors/data/chart-docs-accessors-data.module.ts":37534,"./advanced-usage/accessors/markers/chart-docs-accessors-markers.component":1470,"./advanced-usage/accessors/markers/chart-docs-accessors-markers.component.html":28471,"./advanced-usage/accessors/markers/chart-docs-accessors-markers.component.ts":1470,"./advanced-usage/accessors/markers/chart-docs-accessors-markers.module":99525,"./advanced-usage/accessors/markers/chart-docs-accessors-markers.module.ts":99525,"./advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component":39635,"./advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.html":41310,"./advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.ts":39635,"./advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component":65600,"./advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.html":60455,"./advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.ts":65600,"./advanced-usage/accessors/overview/chart-docs-accessors-overview.component":80859,"./advanced-usage/accessors/overview/chart-docs-accessors-overview.component.html":81100,"./advanced-usage/accessors/overview/chart-docs-accessors-overview.component.ts":80859,"./advanced-usage/accessors/overview/chart-docs-accessors-overview.module":51293,"./advanced-usage/accessors/overview/chart-docs-accessors-overview.module.ts":51293,"./advanced-usage/chart-docs-advanced-usage.module":49972,"./advanced-usage/chart-docs-advanced-usage.module.ts":49972,"./advanced-usage/chart-setup/chart-docs-chart-setup.component":38097,"./advanced-usage/chart-setup/chart-docs-chart-setup.component.html":98134,"./advanced-usage/chart-setup/chart-docs-chart-setup.component.ts":38097,"./advanced-usage/chart-setup/chart-docs-chart-setup.module":70517,"./advanced-usage/chart-setup/chart-docs-chart-setup.module.ts":70517,"./advanced-usage/chart-setup/line-chart/line-chart.example.component":13360,"./advanced-usage/chart-setup/line-chart/line-chart.example.component.html":26286,"./advanced-usage/chart-setup/line-chart/line-chart.example.component.ts":13360,"./advanced-usage/events/chart-docs-events.component":38752,"./advanced-usage/events/chart-docs-events.component.html":56799,"./advanced-usage/events/chart-docs-events.component.ts":38752,"./advanced-usage/events/chart-docs-events.module":79973,"./advanced-usage/events/chart-docs-events.module.ts":79973,"./advanced-usage/events/event-sampler/event-sampler.component":62843,"./advanced-usage/events/event-sampler/event-sampler.component.html":92334,"./advanced-usage/events/event-sampler/event-sampler.component.less":70977,"./advanced-usage/events/event-sampler/event-sampler.component.ts":62843,"./advanced-usage/events/events-basic/events-basic-example.component":18071,"./advanced-usage/events/events-basic/events-basic-example.component.html":17169,"./advanced-usage/events/events-basic/events-basic-example.component.ts":18071,"./advanced-usage/grid-config/base-grid/chart-docs-base-grid.component":65378,"./advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.html":73945,"./advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.ts":65378,"./advanced-usage/grid-config/base-grid/chart-docs-base-grid.module":21016,"./advanced-usage/grid-config/base-grid/chart-docs-base-grid.module.ts":21016,"./advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component":54554,"./advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.html":95487,"./advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.ts":54554,"./advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component":99225,"./advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.html":37320,"./advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.ts":99225,"./advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component":72490,"./advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.html":16683,"./advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.ts":72490,"./advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component":95202,"./advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.html":67038,"./advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.ts":95202,"./advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component":85208,"./advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.html":26583,"./advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.ts":85208,"./advanced-usage/grid-config/chart-docs-grid-config.module":86625,"./advanced-usage/grid-config/chart-docs-grid-config.module.ts":86625,"./advanced-usage/legend":25146,"./advanced-usage/legend/":25146,"./advanced-usage/legend/chart-docs-legend-example.module":39173,"./advanced-usage/legend/chart-docs-legend-example.module.ts":39173,"./advanced-usage/legend/index":25146,"./advanced-usage/legend/index.ts":25146,"./advanced-usage/legend/legend-active/legend-active.example.component":27271,"./advanced-usage/legend/legend-active/legend-active.example.component.html":93234,"./advanced-usage/legend/legend-active/legend-active.example.component.ts":27271,"./advanced-usage/legend/legend-basic/legend-basic.example.component":26409,"./advanced-usage/legend/legend-basic/legend-basic.example.component.html":93041,"./advanced-usage/legend/legend-basic/legend-basic.example.component.ts":26409,"./advanced-usage/legend/legend-compact/legend-compact.example.component":25307,"./advanced-usage/legend/legend-compact/legend-compact.example.component.html":81250,"./advanced-usage/legend/legend-compact/legend-compact.example.component.ts":25307,"./advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component":10340,"./advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.html":39486,"./advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.ts":10340,"./advanced-usage/legend/legend-docs/legend-docs.example.component":20080,"./advanced-usage/legend/legend-docs/legend-docs.example.component.html":61818,"./advanced-usage/legend/legend-docs/legend-docs.example.component.ts":20080,"./advanced-usage/legend/legend-horizontal/legend-horizontal.example.component":98199,"./advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.html":18184,"./advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.ts":98199,"./advanced-usage/legend/legend-interactive/legend-interactive.example.component":38951,"./advanced-usage/legend/legend-interactive/legend-interactive.example.component.html":95558,"./advanced-usage/legend/legend-interactive/legend-interactive.example.component.ts":38951,"./advanced-usage/legend/legend-metadata/legend-metadata-example.component":9602,"./advanced-usage/legend/legend-metadata/legend-metadata-example.component.html":98893,"./advanced-usage/legend/legend-metadata/legend-metadata-example.component.ts":9602,"./advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component":79478,"./advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.html":87264,"./advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.less":76553,"./advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.ts":79478,"./advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component":98806,"./advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.html":74282,"./advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.ts":98806,"./advanced-usage/legend/legend-test/legend-test.component":99234,"./advanced-usage/legend/legend-test/legend-test.component.html":46560,"./advanced-usage/legend/legend-test/legend-test.component.ts":99234,"./advanced-usage/legend/legend-text-color/legend-text-color.example.component":53638,"./advanced-usage/legend/legend-text-color/legend-text-color.example.component.html":60903,"./advanced-usage/legend/legend-text-color/legend-text-color.example.component.ts":53638,"./advanced-usage/legend/legend-visual-test/legend-visual-test.component":99664,"./advanced-usage/legend/legend-visual-test/legend-visual-test.component.html":83851,"./advanced-usage/legend/legend-visual-test/legend-visual-test.component.less":37342,"./advanced-usage/legend/legend-visual-test/legend-visual-test.component.ts":99664,"./advanced-usage/scales/chart-docs-scales.component":76738,"./advanced-usage/scales/chart-docs-scales.component.html":12668,"./advanced-usage/scales/chart-docs-scales.component.ts":76738,"./advanced-usage/scales/chart-docs-scales.module":75476,"./advanced-usage/scales/chart-docs-scales.module.ts":75476,"./advanced-usage/scales/domains/chart-docs-domains.component":16378,"./advanced-usage/scales/domains/chart-docs-domains.component.html":28421,"./advanced-usage/scales/domains/chart-docs-domains.component.ts":16378,"./advanced-usage/scales/domains/chart-docs-domains.module":45445,"./advanced-usage/scales/domains/chart-docs-domains.module.ts":45445,"./advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component":6884,"./advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.html":4435,"./advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.ts":6884,"./advanced-usage/scales/formatters/chart-docs-formatters.component":35883,"./advanced-usage/scales/formatters/chart-docs-formatters.component.html":90576,"./advanced-usage/scales/formatters/chart-docs-formatters.component.ts":35883,"./advanced-usage/scales/formatters/chart-docs-formatters.module":80532,"./advanced-usage/scales/formatters/chart-docs-formatters.module.ts":80532,"./advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component":55680,"./advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.html":89887,"./advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.ts":55680,"./chart-types/area/area-chart-basic/area-chart-basic-example.component":7219,"./chart-types/area/area-chart-basic/area-chart-basic-example.component.html":85342,"./chart-types/area/area-chart-basic/area-chart-basic-example.component.ts":7219,"./chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component":94970,"./chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.html":920,"./chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.ts":94970,"./chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component":98157,"./chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.html":31608,"./chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.ts":98157,"./chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component":88210,"./chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component.ts":88210,"./chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component":82525,"./chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.html":33441,"./chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.ts":82525,"./chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component":80071,"./chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.html":50428,"./chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.ts":80071,"./chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component":54031,"./chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.html":84896,"./chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts":54031,"./chart-types/area/area-chart-stack/area-chart-stack-example.component":37824,"./chart-types/area/area-chart-stack/area-chart-stack-example.component.html":38261,"./chart-types/area/area-chart-stack/area-chart-stack-example.component.ts":37824,"./chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component":8288,"./chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.html":43064,"./chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts":8288,"./chart-types/area/area-chart-vertical/area-chart-vertical-example.component":82821,"./chart-types/area/area-chart-vertical/area-chart-vertical-example.component.html":33182,"./chart-types/area/area-chart-vertical/area-chart-vertical-example.component.less":81226,"./chart-types/area/area-chart-vertical/area-chart-vertical-example.component.ts":82821,"./chart-types/area/chart-docs-area.component":36951,"./chart-types/area/chart-docs-area.component.html":24081,"./chart-types/area/chart-docs-area.component.ts":36951,"./chart-types/area/chart-docs-area.module":81611,"./chart-types/area/chart-docs-area.module.ts":81611,"./chart-types/area/test/area-chart-test.component":72189,"./chart-types/area/test/area-chart-test.component.html":393,"./chart-types/area/test/area-chart-test.component.ts":72189,"./chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component":6611,"./chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.html":36500,"./chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.ts":6611,"./chart-types/bar/bar-chart-test/bar-chart-test.component":9050,"./chart-types/bar/bar-chart-test/bar-chart-test.component.html":51904,"./chart-types/bar/bar-chart-test/bar-chart-test.component.ts":9050,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component":5707,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.html":99951,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.ts":5707,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component":48374,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.html":95580,"./chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.ts":48374,"./chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component":23285,"./chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.html":55471,"./chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.ts":23285,"./chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component":4879,"./chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.html":87341,"./chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.ts":4879,"./chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component":62123,"./chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.html":500,"./chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.ts":62123,"./chart-types/bar/bar-chart-test/daylight-saving-time/date-time-util":19614,"./chart-types/bar/bar-chart-test/daylight-saving-time/date-time-util.ts":19614,"./chart-types/bar/bar-chart-test/daylight-saving-time/daylight-saving-time-test.module":27160,"./chart-types/bar/bar-chart-test/daylight-saving-time/daylight-saving-time-test.module.ts":27160,"./chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component":90716,"./chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.html":60998,"./chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.ts":90716,"./chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component":39730,"./chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.html":3374,"./chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.ts":39730,"./chart-types/bar/bar-chart-test/time-interval/time-interval.test.component":61236,"./chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.html":49518,"./chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.ts":61236,"./chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component":54146,"./chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.html":92933,"./chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.ts":54146,"./chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component":28428,"./chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.html":8402,"./chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.ts":28428,"./chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component":49791,"./chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.html":17007,"./chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.ts":49791,"./chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component":81867,"./chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.html":65529,"./chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.ts":81867,"./chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component":8004,"./chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.html":29986,"./chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.ts":8004,"./chart-types/bar/bar-chart/bar-chart.example.component":86286,"./chart-types/bar/bar-chart/bar-chart.example.component.html":15353,"./chart-types/bar/bar-chart/bar-chart.example.component.ts":86286,"./chart-types/bar/chart-docs-bar.component":26076,"./chart-types/bar/chart-docs-bar.component.html":97952,"./chart-types/bar/chart-docs-bar.component.ts":26076,"./chart-types/bar/chart-docs-bar.module":74515,"./chart-types/bar/chart-docs-bar.module.ts":74515,"./chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component":14946,"./chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.html":450,"./chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.ts":14946,"./chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component":70364,"./chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.html":14761,"./chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.ts":70364,"./chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component":51871,"./chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.html":60768,"./chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.ts":51871,"./chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component":87427,"./chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.html":54166,"./chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.ts":87427,"./chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component":34994,"./chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.html":79251,"./chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.ts":34994,"./chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component":90548,"./chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.html":43270,"./chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.ts":90548,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component":27360,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.html":36383,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.ts":27360,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component":6302,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.html":99923,"./chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.ts":6302,"./chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component":93558,"./chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.html":6053,"./chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.ts":93558,"./chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component":61774,"./chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.html":13731,"./chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.ts":61774,"./chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component":23319,"./chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.html":88554,"./chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.ts":23319,"./chart-types/bucketed-bar/chart-docs-bucketed-bar.component":88706,"./chart-types/bucketed-bar/chart-docs-bucketed-bar.component.html":77400,"./chart-types/bucketed-bar/chart-docs-bucketed-bar.component.ts":88706,"./chart-types/bucketed-bar/chart-docs-bucketed-bar.module":6763,"./chart-types/bucketed-bar/chart-docs-bucketed-bar.module.ts":6763,"./chart-types/chart-docs-chart-types.module":35434,"./chart-types/chart-docs-chart-types.module.ts":35434,"./chart-types/gauge/chart-docs-gauge.component":43879,"./chart-types/gauge/chart-docs-gauge.component.html":62377,"./chart-types/gauge/chart-docs-gauge.component.ts":43879,"./chart-types/gauge/chart-docs-gauge.module":12601,"./chart-types/gauge/chart-docs-gauge.module.ts":12601,"./chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component":38383,"./chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.html":4639,"./chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.less":78798,"./chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.ts":38383,"./chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component":18916,"./chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.html":49138,"./chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.less":83624,"./chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.ts":18916,"./chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component":97057,"./chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.html":41622,"./chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.less":43549,"./chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.ts":97057,"./chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component":38524,"./chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.html":31763,"./chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.less":50054,"./chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.ts":38524,"./chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component":52641,"./chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.html":92385,"./chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.less":46286,"./chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.ts":52641,"./chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component":35056,"./chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.html":1239,"./chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.less":99721,"./chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.ts":35056,"./chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component":60783,"./chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.html":89809,"./chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.less":47905,"./chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.ts":60783,"./chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component":97531,"./chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.html":26370,"./chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.less":92900,"./chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.ts":97531,"./chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component":97843,"./chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.html":62228,"./chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.less":19113,"./chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.ts":97843,"./chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component":81416,"./chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.html":87422,"./chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.less":17072,"./chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.ts":81416,"./chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component":61196,"./chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.html":50325,"./chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.less":64121,"./chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.ts":61196,"./chart-types/gauge/visual-test/donut/donut-gauge-tester.component":1508,"./chart-types/gauge/visual-test/donut/donut-gauge-tester.component.html":329,"./chart-types/gauge/visual-test/donut/donut-gauge-tester.component.less":4112,"./chart-types/gauge/visual-test/donut/donut-gauge-tester.component.ts":1508,"./chart-types/gauge/visual-test/gauge-visual-test.component":78880,"./chart-types/gauge/visual-test/gauge-visual-test.component.html":53463,"./chart-types/gauge/visual-test/gauge-visual-test.component.ts":78880,"./chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component":99677,"./chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.html":59283,"./chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.less":91648,"./chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.ts":99677,"./chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component":46539,"./chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.html":65119,"./chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.less":30480,"./chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.ts":46539,"./chart-types/line/chart-docs-line.component":81621,"./chart-types/line/chart-docs-line.component.html":72517,"./chart-types/line/chart-docs-line.component.ts":81621,"./chart-types/line/chart-docs-line.module":46341,"./chart-types/line/chart-docs-line.module.ts":46341,"./chart-types/line/line-chart-basic/line-chart-basic.example.component":2621,"./chart-types/line/line-chart-basic/line-chart-basic.example.component.html":70337,"./chart-types/line/line-chart-basic/line-chart-basic.example.component.ts":2621,"./chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component":32201,"./chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.html":51335,"./chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts":32201,"./chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component":48082,"./chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.html":99603,"./chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts":48082,"./chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component":31826,"./chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.html":25653,"./chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts":31826,"./chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component":69210,"./chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.html":69078,"./chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.ts":69210,"./chart-types/line/line-chart-test/line-chart-test.component":28004,"./chart-types/line/line-chart-test/line-chart-test.component.html":34296,"./chart-types/line/line-chart-test/line-chart-test.component.ts":28004,"./chart-types/line/line-chart-visual-test/line-chart-visual-test.component":33570,"./chart-types/line/line-chart-visual-test/line-chart-visual-test.component.html":52884,"./chart-types/line/line-chart-visual-test/line-chart-visual-test.component.ts":33570,"./chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component":6165,"./chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.html":37174,"./chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts":6165,"./chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component":83498,"./chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.html":94153,"./chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts":83498,"./chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component":61410,"./chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.html":38624,"./chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.ts":61410,"./chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component":77165,"./chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.html":81309,"./chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.ts":77165,"./chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component":59883,"./chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.html":47133,"./chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts":59883,"./chart-types/pie-and-donut/chart-docs-pie-and-donut.component":92440,"./chart-types/pie-and-donut/chart-docs-pie-and-donut.component.html":78405,"./chart-types/pie-and-donut/chart-docs-pie-and-donut.component.ts":92440,"./chart-types/pie-and-donut/chart-docs-pie-and-donut.module":92722,"./chart-types/pie-and-donut/chart-docs-pie-and-donut.module.ts":92722,"./chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component":83004,"./chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.html":96927,"./chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.ts":83004,"./chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component":95084,"./chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.html":73030,"./chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.ts":95084,"./chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component":58252,"./chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.html":36413,"./chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.ts":58252,"./chart-types/pie-and-donut/donut-chart/donut-chart.example.component":34587,"./chart-types/pie-and-donut/donut-chart/donut-chart.example.component.html":53097,"./chart-types/pie-and-donut/donut-chart/donut-chart.example.component.ts":34587,"./chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component":10359,"./chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.html":94809,"./chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.ts":10359,"./chart-types/pie-and-donut/pie-chart/pie-chart.example.component":10136,"./chart-types/pie-and-donut/pie-chart/pie-chart.example.component.html":88164,"./chart-types/pie-and-donut/pie-chart/pie-chart.example.component.ts":10136,"./chart-types/spark/chart-docs-spark.component":65353,"./chart-types/spark/chart-docs-spark.component.html":51318,"./chart-types/spark/chart-docs-spark.component.ts":65353,"./chart-types/spark/chart-docs-spark.module":53393,"./chart-types/spark/chart-docs-spark.module.ts":53393,"./chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component":78174,"./chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.html":69101,"./chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.ts":78174,"./chart-types/spark/spark-chart-basic/spark-chart-basic.example.component":19892,"./chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.html":3546,"./chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.ts":19892,"./chart-types/spark/spark-chart-legend/spark-chart-legend.example.component":4138,"./chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.html":42429,"./chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.ts":4138,"./chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component":25272,"./chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.html":68139,"./chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.ts":25272,"./chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component":82056,"./chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.html":5255,"./chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.less":61586,"./chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.ts":82056,"./chart-types/spark/spark-chart-table/spark-chart-table.example.component":27850,"./chart-types/spark/spark-chart-table/spark-chart-table.example.component.html":44420,"./chart-types/spark/spark-chart-table/spark-chart-table.example.component.ts":27850,"./chart-types/spark/spark-chart-test/spark-chart-test.component":35868,"./chart-types/spark/spark-chart-test/spark-chart-test.component.html":90521,"./chart-types/spark/spark-chart-test/spark-chart-test.component.ts":35868,"./chart-types/status/chart-docs-status.component":76277,"./chart-types/status/chart-docs-status.component.html":20285,"./chart-types/status/chart-docs-status.component.ts":76277,"./chart-types/status/chart-docs-status.module":15425,"./chart-types/status/chart-docs-status.module.ts":15425,"./chart-types/status/status-chart/status-chart.example.component":83175,"./chart-types/status/status-chart/status-chart.example.component.html":81513,"./chart-types/status/status-chart/status-chart.example.component.ts":83175,"./chart-types/status/status-legend-chart/status-legend-chart.example.component":91733,"./chart-types/status/status-legend-chart/status-legend-chart.example.component.html":4365,"./chart-types/status/status-legend-chart/status-legend-chart.example.component.less":94138,"./chart-types/status/status-legend-chart/status-legend-chart.example.component.ts":91733,"./chart-types/status/status-test/status-chart-test.component":18166,"./chart-types/status/status-test/status-chart-test.component.html":23839,"./chart-types/status/status-test/status-chart-test.component.ts":18166,"./chart-types/waterfall/chart-docs-waterfall.component":44712,"./chart-types/waterfall/chart-docs-waterfall.component.html":92817,"./chart-types/waterfall/chart-docs-waterfall.component.ts":44712,"./chart-types/waterfall/chart-docs-waterfall.module":56394,"./chart-types/waterfall/chart-docs-waterfall.module.ts":56394,"./chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component":61669,"./chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.html":166,"./chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.less":32008,"./chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.ts":61669,"./chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component":3608,"./chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.html":54995,"./chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.ts":3608,"./chart-types/waterfall/waterfall-test/waterfall-chart-test.component":54489,"./chart-types/waterfall/waterfall-test/waterfall-chart-test.component.html":44862,"./chart-types/waterfall/waterfall-test/waterfall-chart-test.component.ts":54489,"./common/charts-test-harness.component":5319,"./common/charts-test-harness.component.html":53855,"./common/charts-test-harness.component.ts":5319,"./common/demo-common.module":65662,"./common/demo-common.module.ts":65662,"./demo.files":77804,"./demo.files.ts":77804,"./development/bar/bar-prototype.module":38449,"./development/bar/bar-prototype.module.ts":38449,"./development/bar/stacked-bar/stacked-bar-prototype.component":65751,"./development/bar/stacked-bar/stacked-bar-prototype.component.html":65277,"./development/bar/stacked-bar/stacked-bar-prototype.component.ts":65751,"./development/chart-collection/chart-collection-example.module":1968,"./development/chart-collection/chart-collection-example.module.ts":1968,"./development/chart-collection/chart-collection-test/chart-collection-test.component":39152,"./development/chart-collection/chart-collection-test/chart-collection-test.component.html":4334,"./development/chart-collection/chart-collection-test/chart-collection-test.component.ts":39152,"./development/charts-development.module":50026,"./development/charts-development.module.ts":50026,"./development/core/chart/chart.example.component":60147,"./development/core/chart/chart.example.component.html":31874,"./development/core/chart/chart.example.component.less":31325,"./development/core/chart/chart.example.component.ts":60147,"./development/core/core-example.module":4726,"./development/core/core-example.module.ts":4726,"./development/core/domain/chart-domain.example.component":12154,"./development/core/domain/chart-domain.example.component.html":59451,"./development/core/domain/chart-domain.example.component.ts":12154,"./development/core/event-bus/chart-event-bus-test.component":97761,"./development/core/event-bus/chart-event-bus-test.component.html":808,"./development/core/event-bus/chart-event-bus-test.component.ts":97761,"./development/core/markers/chart-markers.example.component":42851,"./development/core/markers/chart-markers.example.component.html":339,"./development/core/markers/chart-markers.example.component.ts":42851,"./development/data-point-selection/data-point-selection-prototype.component":36155,"./development/data-point-selection/data-point-selection-prototype.component.html":69760,"./development/data-point-selection/data-point-selection-prototype.component.less":45505,"./development/data-point-selection/data-point-selection-prototype.component.ts":36155,"./development/data-point-selection/data-point-selection-prototype.module":86072,"./development/data-point-selection/data-point-selection-prototype.module.ts":86072,"./development/gauge/donut/donut-gauge-prototype.component":82587,"./development/gauge/donut/donut-gauge-prototype.component.html":81473,"./development/gauge/donut/donut-gauge-prototype.component.less":51696,"./development/gauge/donut/donut-gauge-prototype.component.ts":82587,"./development/gauge/gauge-prototypes.module":89372,"./development/gauge/gauge-prototypes.module.ts":89372,"./development/gauge/gauge-test-page.component":12875,"./development/gauge/gauge-test-page.component.html":52905,"./development/gauge/gauge-test-page.component.less":88580,"./development/gauge/gauge-test-page.component.ts":12875,"./development/gauge/horizontal/linear-gauge-horizontal-prototype.component":26804,"./development/gauge/horizontal/linear-gauge-horizontal-prototype.component.html":12882,"./development/gauge/horizontal/linear-gauge-horizontal-prototype.component.less":40034,"./development/gauge/horizontal/linear-gauge-horizontal-prototype.component.ts":26804,"./development/gauge/vertical/linear-gauge-vertical-prototype.component":39404,"./development/gauge/vertical/linear-gauge-vertical-prototype.component.html":76783,"./development/gauge/vertical/linear-gauge-vertical-prototype.component.less":42899,"./development/gauge/vertical/linear-gauge-vertical-prototype.component.ts":39404,"./development/pie-chart/pie-chart-example.module":39836,"./development/pie-chart/pie-chart-example.module.ts":39836,"./development/pie-chart/pie-chart-test/pie-chart.example.component":94313,"./development/pie-chart/pie-chart-test/pie-chart.example.component.html":63584,"./development/pie-chart/pie-chart-test/pie-chart.example.component.ts":94313,"./development/popovers/data-point/data-point-popovers-prototype.component":68181,"./development/popovers/data-point/data-point-popovers-prototype.component.html":97526,"./development/popovers/data-point/data-point-popovers-prototype.component.ts":68181,"./development/popovers/line-chart/line-chart-popover-prototype.component":95549,"./development/popovers/line-chart/line-chart-popover-prototype.component.html":23378,"./development/popovers/line-chart/line-chart-popover-prototype.component.ts":95549,"./development/popovers/line-chart/popover-performance-test.component":27685,"./development/popovers/line-chart/popover-performance-test.component.html":49953,"./development/popovers/line-chart/popover-performance-test.component.less":53858,"./development/popovers/line-chart/popover-performance-test.component.ts":27685,"./development/popovers/popovers-prototype.module":67751,"./development/popovers/popovers-prototype.module.ts":67751,"./development/spark/spark-prototype.module":13438,"./development/spark/spark-prototype.module.ts":13438,"./development/spark/spark-prototype/spark-prototype.component":92096,"./development/spark/spark-prototype/spark-prototype.component.html":6531,"./development/spark/spark-prototype/spark-prototype.component.less":25606,"./development/spark/spark-prototype/spark-prototype.component.ts":92096,"./development/status/chart-status-example.module":23384,"./development/status/chart-status-example.module.ts":23384,"./development/status/status-test/chart-status-test.component":66128,"./development/status/status-test/chart-status-test.component.html":29711,"./development/status/status-test/chart-status-test.component.ts":66128,"./development/status/waterfall-simple/chart-waterfall-simple.component":63746,"./development/status/waterfall-simple/chart-waterfall-simple.component.html":21172,"./development/status/waterfall-simple/chart-waterfall-simple.component.ts":63746,"./development/status/waterfall-test/chart-waterfall-test.component":38783,"./development/status/waterfall-test/chart-waterfall-test.component.html":88366,"./development/status/waterfall-test/chart-waterfall-test.component.less":13553,"./development/status/waterfall-test/chart-waterfall-test.component.ts":38783,"./development/thresholds/thresholds-prototype.component":50908,"./development/thresholds/thresholds-prototype.component.html":92861,"./development/thresholds/thresholds-prototype.component.ts":50908,"./development/thresholds/thresholds-prototype.module":12197,"./development/thresholds/thresholds-prototype.module.ts":12197,"./development/time-bands/line-time-series/line-time-series-test.component":16489,"./development/time-bands/line-time-series/line-time-series-test.component.html":21032,"./development/time-bands/line-time-series/line-time-series-test.component.ts":16489,"./development/time-bands/time-bands-example.module":191,"./development/time-bands/time-bands-example.module.ts":191,"./development/tooltips/line-chart/line-chart-tooltips-prototype.component":28443,"./development/tooltips/line-chart/line-chart-tooltips-prototype.component.html":20502,"./development/tooltips/line-chart/line-chart-tooltips-prototype.component.ts":28443,"./development/tooltips/line-chart/tooltips-performance-test.component":67804,"./development/tooltips/line-chart/tooltips-performance-test.component.html":30061,"./development/tooltips/line-chart/tooltips-performance-test.component.less":62707,"./development/tooltips/line-chart/tooltips-performance-test.component.ts":67804,"./development/tooltips/tooltips-prototype.module":46210,"./development/tooltips/tooltips-prototype.module.ts":46210,"./development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component":9264,"./development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.html":56363,"./development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.ts":9264,"./development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component":19459,"./development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.html":65100,"./development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.ts":19459,"./development/type-switch/type-switch-example.module":90628,"./development/type-switch/type-switch-example.module.ts":90628,"./layout/chart-docs-layout.component":9873,"./layout/chart-docs-layout.component.html":93644,"./layout/chart-docs-layout.component.less":46930,"./layout/chart-docs-layout.component.ts":9873,"./layout/chart-docs-layout.module":59956,"./layout/chart-docs-layout.module.ts":59956,"./plugins/chart-docs-plugins.module":28631,"./plugins/chart-docs-plugins.module.ts":28631,"./plugins/popovers/bar-chart/bar-chart-with-popover.example.component":76566,"./plugins/popovers/bar-chart/bar-chart-with-popover.example.component.html":42693,"./plugins/popovers/bar-chart/bar-chart-with-popover.example.component.ts":76566,"./plugins/popovers/chart-docs-popovers.component":97314,"./plugins/popovers/chart-docs-popovers.component.html":95897,"./plugins/popovers/chart-docs-popovers.component.ts":97314,"./plugins/popovers/chart-docs-popovers.module":93930,"./plugins/popovers/chart-docs-popovers.module.ts":93930,"./plugins/popovers/donut-chart/donut-chart-with-popover.example.component":22531,"./plugins/popovers/donut-chart/donut-chart-with-popover.example.component.html":80259,"./plugins/popovers/donut-chart/donut-chart-with-popover.example.component.ts":22531,"./plugins/popovers/line-chart/line-chart-with-popover.example.component":34763,"./plugins/popovers/line-chart/line-chart-with-popover.example.component.html":3287,"./plugins/popovers/line-chart/line-chart-with-popover.example.component.ts":34763,"./plugins/popovers/popover-visual-test/popover-visual-test.component":6395,"./plugins/popovers/popover-visual-test/popover-visual-test.component.html":48818,"./plugins/popovers/popover-visual-test/popover-visual-test.component.ts":6395,"./plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component":81127,"./plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.html":23848,"./plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.ts":81127,"./plugins/tooltips/chart-docs-tooltips.component":81701,"./plugins/tooltips/chart-docs-tooltips.component.html":41924,"./plugins/tooltips/chart-docs-tooltips.component.ts":81701,"./plugins/tooltips/chart-docs-tooltips.module":97941,"./plugins/tooltips/chart-docs-tooltips.module.ts":97941,"./plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component":63742,"./plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.html":58305,"./plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.ts":63742,"./plugins/tooltips/line-chart/line-chart-with-tooltips.example.component":76229,"./plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.html":96209,"./plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.ts":76229,"./plugins/tooltips/visual-test/tooltips-visual-test.component":52041,"./plugins/tooltips/visual-test/tooltips-visual-test.component.html":86137,"./plugins/tooltips/visual-test/tooltips-visual-test.component.less":21899,"./plugins/tooltips/visual-test/tooltips-visual-test.component.ts":52041,"./thresholds/chart-docs-thresholds.component":6344,"./thresholds/chart-docs-thresholds.component.html":79539,"./thresholds/chart-docs-thresholds.component.ts":6344,"./thresholds/chart-docs-thresholds.module":90368,"./thresholds/chart-docs-thresholds.module.ts":90368,"./thresholds/thresholds-basic/thresholds-basic.example.component":98404,"./thresholds/thresholds-basic/thresholds-basic.example.component.html":98417,"./thresholds/thresholds-basic/thresholds-basic.example.component.ts":98404,"./thresholds/thresholds-spark/thresholds-spark.example.component":99707,"./thresholds/thresholds-spark/thresholds-spark.example.component.html":45450,"./thresholds/thresholds-spark/thresholds-spark.example.component.ts":99707,"./thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component":29686,"./thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.html":25908,"./thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts":29686,"./thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component":76329,"./thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.html":46042,"./thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts":76329,"./thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component":51733,"./thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.html":5845,"./thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts":51733,"./thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component":68259,"./thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.html":97444,"./thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts":68259,"./thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component":92764,"./thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.html":2050,"./thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts":92764,"./time-frame-bar/chart-docs-time-frame-bar.component":36646,"./time-frame-bar/chart-docs-time-frame-bar.component.html":44491,"./time-frame-bar/chart-docs-time-frame-bar.component.ts":36646,"./time-frame-bar/chart-docs-time-frame-bar.module":92410,"./time-frame-bar/chart-docs-time-frame-bar.module.ts":92410,"./time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component":13607,"./time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.html":24675,"./time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.ts":13607,"./time-frame-bar/time-frame-bar-test/time-frame-bar-data.service":5598,"./time-frame-bar/time-frame-bar-test/time-frame-bar-data.service.ts":5598,"./time-frame-bar/time-frame-bar-test/time-frame-bar-test.component":71677,"./time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.html":49611,"./time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.ts":71677};function o(s){var i=r(s);return e(i)}function r(s){if(!e.o(t,s)){var i=new Error("Cannot find module '"+s+"'");throw i.code="MODULE_NOT_FOUND",i}return t[s]}o.keys=function(){return Object.keys(t)},o.resolve=r,a.exports=o,o.id=82111},50225:(a,n,e)=>{"use strict";e.d(n,{S:()=>o});const t=["advanced-usage/accessors/chart-docs-accessors.module.ts","advanced-usage/accessors/colors/chart-docs-accessors-colors.component.html","advanced-usage/accessors/colors/chart-docs-accessors-colors.component.ts","advanced-usage/accessors/colors/chart-docs-accessors-colors.module.ts","advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.html","advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.ts","advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.html","advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.ts","advanced-usage/accessors/data/accessors/accessors.example.component.html","advanced-usage/accessors/data/accessors/accessors.example.component.ts","advanced-usage/accessors/data/chart-docs-accessors-data.component.html","advanced-usage/accessors/data/chart-docs-accessors-data.component.ts","advanced-usage/accessors/data/chart-docs-accessors-data.module.ts","advanced-usage/accessors/markers/chart-docs-accessors-markers.component.html","advanced-usage/accessors/markers/chart-docs-accessors-markers.component.ts","advanced-usage/accessors/markers/chart-docs-accessors-markers.module.ts","advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.html","advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.ts","advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.html","advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.ts","advanced-usage/accessors/overview/chart-docs-accessors-overview.component.html","advanced-usage/accessors/overview/chart-docs-accessors-overview.component.ts","advanced-usage/accessors/overview/chart-docs-accessors-overview.module.ts","advanced-usage/chart-docs-advanced-usage.module.ts","advanced-usage/chart-setup/chart-docs-chart-setup.component.html","advanced-usage/chart-setup/chart-docs-chart-setup.component.ts","advanced-usage/chart-setup/chart-docs-chart-setup.module.ts","advanced-usage/chart-setup/line-chart/line-chart.example.component.html","advanced-usage/chart-setup/line-chart/line-chart.example.component.ts","advanced-usage/events/chart-docs-events.component.html","advanced-usage/events/chart-docs-events.component.ts","advanced-usage/events/chart-docs-events.module.ts","advanced-usage/events/event-sampler/event-sampler.component.html","advanced-usage/events/event-sampler/event-sampler.component.less","advanced-usage/events/event-sampler/event-sampler.component.ts","advanced-usage/events/events-basic/events-basic-example.component.html","advanced-usage/events/events-basic/events-basic-example.component.ts","advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.html","advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.ts","advanced-usage/grid-config/base-grid/chart-docs-base-grid.module.ts","advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.html","advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.ts","advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.html","advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.ts","advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.html","advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.ts","advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.html","advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.ts","advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.html","advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.ts","advanced-usage/grid-config/chart-docs-grid-config.module.ts","advanced-usage/legend/chart-docs-legend-example.module.ts","advanced-usage/legend/index.ts","advanced-usage/legend/legend-active/legend-active.example.component.html","advanced-usage/legend/legend-active/legend-active.example.component.ts","advanced-usage/legend/legend-basic/legend-basic.example.component.html","advanced-usage/legend/legend-basic/legend-basic.example.component.ts","advanced-usage/legend/legend-compact/legend-compact.example.component.html","advanced-usage/legend/legend-compact/legend-compact.example.component.ts","advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.html","advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.ts","advanced-usage/legend/legend-docs/legend-docs.example.component.html","advanced-usage/legend/legend-docs/legend-docs.example.component.ts","advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.html","advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.ts","advanced-usage/legend/legend-interactive/legend-interactive.example.component.html","advanced-usage/legend/legend-interactive/legend-interactive.example.component.ts","advanced-usage/legend/legend-metadata/legend-metadata-example.component.html","advanced-usage/legend/legend-metadata/legend-metadata-example.component.ts","advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.html","advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.ts","advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.html","advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.less","advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.ts","advanced-usage/legend/legend-test/legend-test.component.html","advanced-usage/legend/legend-test/legend-test.component.ts","advanced-usage/legend/legend-text-color/legend-text-color.example.component.html","advanced-usage/legend/legend-text-color/legend-text-color.example.component.ts","advanced-usage/legend/legend-visual-test/legend-visual-test.component.html","advanced-usage/legend/legend-visual-test/legend-visual-test.component.less","advanced-usage/legend/legend-visual-test/legend-visual-test.component.ts","advanced-usage/scales/chart-docs-scales.component.html","advanced-usage/scales/chart-docs-scales.component.ts","advanced-usage/scales/chart-docs-scales.module.ts","advanced-usage/scales/domains/chart-docs-domains.component.html","advanced-usage/scales/domains/chart-docs-domains.component.ts","advanced-usage/scales/domains/chart-docs-domains.module.ts","advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.html","advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.ts","advanced-usage/scales/formatters/chart-docs-formatters.component.html","advanced-usage/scales/formatters/chart-docs-formatters.component.ts","advanced-usage/scales/formatters/chart-docs-formatters.module.ts","advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.html","advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.ts","chart-types/area/area-chart-basic/area-chart-basic-example.component.html","chart-types/area/area-chart-basic/area-chart-basic-example.component.ts","chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.html","chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.ts","chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.html","chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.ts","chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.html","chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.ts","chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.html","chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.ts","chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component.ts","chart-types/area/area-chart-stack/area-chart-stack-example.component.html","chart-types/area/area-chart-stack/area-chart-stack-example.component.ts","chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.html","chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts","chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.html","chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts","chart-types/area/area-chart-vertical/area-chart-vertical-example.component.html","chart-types/area/area-chart-vertical/area-chart-vertical-example.component.less","chart-types/area/area-chart-vertical/area-chart-vertical-example.component.ts","chart-types/area/chart-docs-area.component.html","chart-types/area/chart-docs-area.component.ts","chart-types/area/chart-docs-area.module.ts","chart-types/area/test/area-chart-test.component.html","chart-types/area/test/area-chart-test.component.ts","chart-types/bar/bar-chart/bar-chart.example.component.html","chart-types/bar/bar-chart/bar-chart.example.component.ts","chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.html","chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.ts","chart-types/bar/bar-chart-test/bar-chart-test.component.html","chart-types/bar/bar-chart-test/bar-chart-test.component.ts","chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.html","chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.ts","chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.html","chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.ts","chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.html","chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.ts","chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.html","chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.ts","chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.html","chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.ts","chart-types/bar/bar-chart-test/daylight-saving-time/date-time-util.ts","chart-types/bar/bar-chart-test/daylight-saving-time/daylight-saving-time-test.module.ts","chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.html","chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.ts","chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.html","chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.ts","chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.html","chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.ts","chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.html","chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.ts","chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.html","chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.ts","chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.html","chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.ts","chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.html","chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.ts","chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.html","chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.ts","chart-types/bar/chart-docs-bar.component.html","chart-types/bar/chart-docs-bar.component.ts","chart-types/bar/chart-docs-bar.module.ts","chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.html","chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.ts","chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.html","chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.ts","chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.html","chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.ts","chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.html","chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.ts","chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.html","chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.ts","chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.html","chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.ts","chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.html","chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.ts","chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.html","chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.ts","chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.html","chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.ts","chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.html","chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.ts","chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.html","chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.ts","chart-types/bucketed-bar/chart-docs-bucketed-bar.component.html","chart-types/bucketed-bar/chart-docs-bucketed-bar.component.ts","chart-types/bucketed-bar/chart-docs-bucketed-bar.module.ts","chart-types/chart-docs-chart-types.module.ts","chart-types/gauge/chart-docs-gauge.component.html","chart-types/gauge/chart-docs-gauge.component.ts","chart-types/gauge/chart-docs-gauge.module.ts","chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.html","chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.less","chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.ts","chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.html","chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.less","chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.ts","chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.html","chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.less","chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.ts","chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.html","chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.less","chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.ts","chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.html","chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.less","chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.ts","chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.html","chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.less","chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.ts","chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.html","chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.less","chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.ts","chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.html","chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.less","chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.ts","chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.html","chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.less","chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.ts","chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.html","chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.less","chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.ts","chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.html","chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.less","chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.ts","chart-types/gauge/visual-test/donut/donut-gauge-tester.component.html","chart-types/gauge/visual-test/donut/donut-gauge-tester.component.less","chart-types/gauge/visual-test/donut/donut-gauge-tester.component.ts","chart-types/gauge/visual-test/gauge-visual-test.component.html","chart-types/gauge/visual-test/gauge-visual-test.component.ts","chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.html","chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.less","chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.ts","chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.html","chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.less","chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.ts","chart-types/line/chart-docs-line.component.html","chart-types/line/chart-docs-line.component.ts","chart-types/line/chart-docs-line.module.ts","chart-types/line/line-chart-basic/line-chart-basic.example.component.html","chart-types/line/line-chart-basic/line-chart-basic.example.component.ts","chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.html","chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts","chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.html","chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts","chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.html","chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts","chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.html","chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.ts","chart-types/line/line-chart-test/line-chart-test.component.html","chart-types/line/line-chart-test/line-chart-test.component.ts","chart-types/line/line-chart-visual-test/line-chart-visual-test.component.html","chart-types/line/line-chart-visual-test/line-chart-visual-test.component.ts","chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.html","chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts","chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.html","chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts","chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.html","chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.ts","chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.html","chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.ts","chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.html","chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts","chart-types/pie-and-donut/chart-docs-pie-and-donut.component.html","chart-types/pie-and-donut/chart-docs-pie-and-donut.component.ts","chart-types/pie-and-donut/chart-docs-pie-and-donut.module.ts","chart-types/pie-and-donut/donut-chart/donut-chart.example.component.html","chart-types/pie-and-donut/donut-chart/donut-chart.example.component.ts","chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.html","chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.ts","chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.html","chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.ts","chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.html","chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.ts","chart-types/pie-and-donut/pie-chart/pie-chart.example.component.html","chart-types/pie-and-donut/pie-chart/pie-chart.example.component.ts","chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.html","chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.ts","chart-types/spark/chart-docs-spark.component.html","chart-types/spark/chart-docs-spark.component.ts","chart-types/spark/chart-docs-spark.module.ts","chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.html","chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.ts","chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.html","chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.ts","chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.html","chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.ts","chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.html","chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.ts","chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.html","chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.less","chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.ts","chart-types/spark/spark-chart-table/spark-chart-table.example.component.html","chart-types/spark/spark-chart-table/spark-chart-table.example.component.ts","chart-types/spark/spark-chart-test/spark-chart-test.component.html","chart-types/spark/spark-chart-test/spark-chart-test.component.ts","chart-types/status/chart-docs-status.component.html","chart-types/status/chart-docs-status.component.ts","chart-types/status/chart-docs-status.module.ts","chart-types/status/status-chart/status-chart.example.component.html","chart-types/status/status-chart/status-chart.example.component.ts","chart-types/status/status-legend-chart/status-legend-chart.example.component.html","chart-types/status/status-legend-chart/status-legend-chart.example.component.less","chart-types/status/status-legend-chart/status-legend-chart.example.component.ts","chart-types/status/status-test/status-chart-test.component.html","chart-types/status/status-test/status-chart-test.component.ts","chart-types/waterfall/chart-docs-waterfall.component.html","chart-types/waterfall/chart-docs-waterfall.component.ts","chart-types/waterfall/chart-docs-waterfall.module.ts","chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.html","chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.less","chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.ts","chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.html","chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.ts","chart-types/waterfall/waterfall-test/waterfall-chart-test.component.html","chart-types/waterfall/waterfall-test/waterfall-chart-test.component.ts","common/charts-test-harness.component.html","common/charts-test-harness.component.ts","common/demo-common.module.ts","demo.files.ts","development/bar/bar-prototype.module.ts","development/bar/stacked-bar/stacked-bar-prototype.component.html","development/bar/stacked-bar/stacked-bar-prototype.component.ts","development/chart-collection/chart-collection-example.module.ts","development/chart-collection/chart-collection-test/chart-collection-test.component.html","development/chart-collection/chart-collection-test/chart-collection-test.component.ts","development/charts-development.module.ts","development/core/chart/chart.example.component.html","development/core/chart/chart.example.component.less","development/core/chart/chart.example.component.ts","development/core/core-example.module.ts","development/core/domain/chart-domain.example.component.html","development/core/domain/chart-domain.example.component.ts","development/core/event-bus/chart-event-bus-test.component.html","development/core/event-bus/chart-event-bus-test.component.ts","development/core/markers/chart-markers.example.component.html","development/core/markers/chart-markers.example.component.ts","development/data-point-selection/data-point-selection-prototype.component.html","development/data-point-selection/data-point-selection-prototype.component.less","development/data-point-selection/data-point-selection-prototype.component.ts","development/data-point-selection/data-point-selection-prototype.module.ts","development/gauge/donut/donut-gauge-prototype.component.html","development/gauge/donut/donut-gauge-prototype.component.less","development/gauge/donut/donut-gauge-prototype.component.ts","development/gauge/gauge-prototypes.module.ts","development/gauge/gauge-test-page.component.html","development/gauge/gauge-test-page.component.less","development/gauge/gauge-test-page.component.ts","development/gauge/horizontal/linear-gauge-horizontal-prototype.component.html","development/gauge/horizontal/linear-gauge-horizontal-prototype.component.less","development/gauge/horizontal/linear-gauge-horizontal-prototype.component.ts","development/gauge/vertical/linear-gauge-vertical-prototype.component.html","development/gauge/vertical/linear-gauge-vertical-prototype.component.less","development/gauge/vertical/linear-gauge-vertical-prototype.component.ts","development/pie-chart/pie-chart-example.module.ts","development/pie-chart/pie-chart-test/pie-chart.example.component.html","development/pie-chart/pie-chart-test/pie-chart.example.component.ts","development/popovers/data-point/data-point-popovers-prototype.component.html","development/popovers/data-point/data-point-popovers-prototype.component.ts","development/popovers/line-chart/line-chart-popover-prototype.component.html","development/popovers/line-chart/line-chart-popover-prototype.component.ts","development/popovers/line-chart/popover-performance-test.component.html","development/popovers/line-chart/popover-performance-test.component.less","development/popovers/line-chart/popover-performance-test.component.ts","development/popovers/popovers-prototype.module.ts","development/spark/spark-prototype/spark-prototype.component.html","development/spark/spark-prototype/spark-prototype.component.less","development/spark/spark-prototype/spark-prototype.component.ts","development/spark/spark-prototype.module.ts","development/status/chart-status-example.module.ts","development/status/status-test/chart-status-test.component.html","development/status/status-test/chart-status-test.component.ts","development/status/waterfall-simple/chart-waterfall-simple.component.html","development/status/waterfall-simple/chart-waterfall-simple.component.ts","development/status/waterfall-test/chart-waterfall-test.component.html","development/status/waterfall-test/chart-waterfall-test.component.less","development/status/waterfall-test/chart-waterfall-test.component.ts","development/thresholds/thresholds-prototype.component.html","development/thresholds/thresholds-prototype.component.ts","development/thresholds/thresholds-prototype.module.ts","development/time-bands/line-time-series/line-time-series-test.component.html","development/time-bands/line-time-series/line-time-series-test.component.ts","development/time-bands/time-bands-example.module.ts","development/tooltips/line-chart/line-chart-tooltips-prototype.component.html","development/tooltips/line-chart/line-chart-tooltips-prototype.component.ts","development/tooltips/line-chart/tooltips-performance-test.component.html","development/tooltips/line-chart/tooltips-performance-test.component.less","development/tooltips/line-chart/tooltips-performance-test.component.ts","development/tooltips/tooltips-prototype.module.ts","development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.html","development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.ts","development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.html","development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.ts","development/type-switch/type-switch-example.module.ts","layout/chart-docs-layout.component.html","layout/chart-docs-layout.component.less","layout/chart-docs-layout.component.ts","layout/chart-docs-layout.module.ts","plugins/chart-docs-plugins.module.ts","plugins/popovers/bar-chart/bar-chart-with-popover.example.component.html","plugins/popovers/bar-chart/bar-chart-with-popover.example.component.ts","plugins/popovers/chart-docs-popovers.component.html","plugins/popovers/chart-docs-popovers.component.ts","plugins/popovers/chart-docs-popovers.module.ts","plugins/popovers/donut-chart/donut-chart-with-popover.example.component.html","plugins/popovers/donut-chart/donut-chart-with-popover.example.component.ts","plugins/popovers/line-chart/line-chart-with-popover.example.component.html","plugins/popovers/line-chart/line-chart-with-popover.example.component.ts","plugins/popovers/popover-visual-test/popover-visual-test.component.html","plugins/popovers/popover-visual-test/popover-visual-test.component.ts","plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.html","plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.ts","plugins/tooltips/chart-docs-tooltips.component.html","plugins/tooltips/chart-docs-tooltips.component.ts","plugins/tooltips/chart-docs-tooltips.module.ts","plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.html","plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.ts","plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.html","plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.ts","plugins/tooltips/visual-test/tooltips-visual-test.component.html","plugins/tooltips/visual-test/tooltips-visual-test.component.less","plugins/tooltips/visual-test/tooltips-visual-test.component.ts","thresholds/chart-docs-thresholds.component.html","thresholds/chart-docs-thresholds.component.ts","thresholds/chart-docs-thresholds.module.ts","thresholds/thresholds-basic/thresholds-basic.example.component.html","thresholds/thresholds-basic/thresholds-basic.example.component.ts","thresholds/thresholds-spark/thresholds-spark.example.component.html","thresholds/thresholds-spark/thresholds-spark.example.component.ts","thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.html","thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts","thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.html","thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts","thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.html","thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts","thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.html","thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts","thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.html","thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts","time-frame-bar/chart-docs-time-frame-bar.component.html","time-frame-bar/chart-docs-time-frame-bar.component.ts","time-frame-bar/chart-docs-time-frame-bar.module.ts","time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.html","time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.ts","time-frame-bar/time-frame-bar-test/time-frame-bar-data.service.ts","time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.html","time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.ts"],o=r=>({context:r,files:t.filter(s=>s.includes(r)).map(s=>({content:e(82111)(`./${s}`).default,path:s})).concat({content:e(96301).Z,path:"package.json"})})},57827:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "overview",\n        loadChildren: async () =>\n            import(\n                "./overview/chart-docs-accessors-overview.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "data",\n        loadChildren: async () =>\n            import(\n                "./data/chart-docs-accessors-data.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "colors",\n        loadChildren: async () =>\n            import(\n                "./colors/chart-docs-accessors-colors.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "markers",\n        loadChildren: async () =>\n            import(\n                "./markers/chart-docs-accessors-markers.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    declarations: [],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsAccessorsModule {}\n'},63221:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Colors</h1>\n<p>\n    The use of color is often the primary visual means of differentiating one\n    data series from another, especially in the case of line charts. The colors\n    used for each series are determined by the series color accessor. If a color\n    accessor isn\'t specified, a default\n    <a href="../classes/SequentialColorProvider.html" target="_blank"\n        >SequentialColorProvider</a\n    >\n    instantiated automatically distributes colors sequentially to each series\n    and tracks the color distribution by series ID. The job of the\n    SequentialColorProvider is to ensure colors are used in the order provided\n    and that a color doesn\'t get used more than once unless the number of series\n    exceeds the number of colors in the provided palette.\n</p>\n\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Proceed with caution!</strong>\n    Examples below are provided to describe the possibilities of charting\n    framework and give a better understanding of its principles. This is not a\n    recommendation for regular usage. If you find yourself doing something like\n    this, please consult with UX to double check that your mockups follow the\n    Nova Design Language.\n</nui-message>\n\n<h2>Custom Color Accessor</h2>\n<p>\n    If you want to manually specify how colors are accessed for a chart\'s\n    series, you can optionally provide your own color accessor per renderer\n    instance. In the following snippet, a custom accessor plucks a color from\n    one of the UX-approved chart\n    <a\n        href="https://marvelapp.com/project/3222505/screen/46622038"\n        target="_blank"\n        >color sequences</a\n    >\n    and uses it for every series that the renderer instance gets assigned to.\n    Color sequence constants like the one used in the example can be found\n    <a href="../miscellaneous/variables.html#CHART_PALETTE_CS1" target="_blank"\n        >here</a\n    >.\n</p>\n<pre>{{ customAccessorSnippet }}</pre>\n<p>\n    As you can see in the snippet, the seriesId automatically gets passed as an\n    argument to the color accessor, so you can optionally add logic that uses\n    the seriesId to determine which color gets returned. To see a custom color\n    accessor in action, take a look at the code in the source expander of the\n    following example.\n</p>\n<nui-example-wrapper\n    filenamePrefix="colors-custom-accessor"\n    exampleTitle="Custom Accessor"\n>\n    <nui-colors-custom-accessor-example></nui-colors-custom-accessor-example>\n</nui-example-wrapper>\n\n<h2>Custom Sequential Color Provider</h2>\n<p>\n    If the palette provided by the default SequentialColorProvider doesn\'t meet\n    your specifications, you can instantiate your own color provider with a\n    custom set of colors to be distributed sequentially and tracked by seriesId\n    as in the following snippet:\n</p>\n<pre>{{ customProviderSnippet }}</pre>\n<nui-example-wrapper\n    filenamePrefix="colors-custom-provider"\n    exampleTitle="Custom Sequential Color Provider"\n>\n    <nui-colors-custom-provider-example></nui-colors-custom-provider-example>\n</nui-example-wrapper>\n'},49996:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-accessors-colors",\n    templateUrl: "./chart-docs-accessors-colors.component.html",\n})\nexport class ChartDocsAccessorsColorsComponent {\n    public customAccessorSnippet = `const accessors: ILineAccessors = new LineAccessors();\naccessors.series.color = () => CHART_PALETTE_CS2[6];\n...`;\n    public customProviderSnippet = `const accessors = new LineAccessors();\nconst customPalette = [CHART_PALETTE_CS2[2], CHART_PALETTE_CS2[4], CHART_PALETTE_CS2[0]];\naccessors.series.color = new SequentialColorProvider(customPalette).get;\n...`;\n}\n'},22904:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { ChartDocsAccessorsColorsComponent } from "./chart-docs-accessors-colors.component";\nimport { RendererColorsCustomAccessorExampleComponent } from "./custom-accessor/colors-custom-accessor.example.component";\nimport { RendererColorsCustomProviderExampleComponent } from "./custom-provider/colors-custom-provider.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsAccessorsColorsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "custom-provider",\n        component: RendererColorsCustomProviderExampleComponent,\n    },\n    {\n        path: "custom-accessor",\n        component: RendererColorsCustomAccessorExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        RendererColorsCustomProviderExampleComponent,\n        RendererColorsCustomAccessorExampleComponent,\n        ChartDocsAccessorsColorsComponent,\n    ],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("colors"),\n        },\n    ],\n})\nexport default class ChartDocsAccessorsColorsModule {}\n'},6889:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},94764:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    CHART_PALETTE_CS2,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-colors-custom-accessor-example",\n    templateUrl: "./colors-custom-accessor.example.component.html",\n})\nexport class RendererColorsCustomAccessorExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit(): void {\n        const scales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        const accessors: ILineAccessors = new LineAccessors();\n        // Custom color accessor\n        accessors.series.color = () => CHART_PALETTE_CS2[6];\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 30 },\n                { x: 2, y: 50 },\n                { x: 3, y: 25 },\n                { x: 4, y: 40 },\n                { x: 5, y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: 1, y: 20 },\n                { x: 2, y: 40 },\n                { x: 3, y: 15 },\n                { x: 4, y: 30 },\n                { x: 5, y: 25 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Series 3",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},82277:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},74313:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    CHART_PALETTE_CS2,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SequentialColorProvider,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-colors-custom-provider-example",\n    templateUrl: "./colors-custom-provider.example.component.html",\n})\nexport class RendererColorsCustomProviderExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit(): void {\n        const scales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        // Defining custom color palette\n        const customColors = [\n            CHART_PALETTE_CS2[2],\n            CHART_PALETTE_CS2[4],\n            CHART_PALETTE_CS2[0],\n        ];\n        // Setting color accessor to use new SequentialColorProvider with custom colors\n        const accessors = new LineAccessors(\n            new SequentialColorProvider(customColors)\n        );\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 30 },\n                { x: 2, y: 50 },\n                { x: 3, y: 25 },\n                { x: 4, y: 40 },\n                { x: 5, y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: 1, y: 20 },\n                { x: 2, y: 40 },\n                { x: 3, y: 15 },\n                { x: 4, y: 30 },\n                { x: 5, y: 25 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Series 3",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},64898:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},60217:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n} from "@nova-ui/charts";\n\ninterface IMyDataPoint {\n    x: number;\n    y: number;\n    z: number;\n}\n\n@Component({\n    selector: "nui-accessors-example",\n    templateUrl: "./accessors.example.component.html",\n})\nexport class RendererAccessorsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public seriesSet: IChartSeries<ILineAccessors>[];\n\n    public ngOnInit(): void {\n        const renderer = new LineRenderer();\n        const scales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        const data: IMyDataPoint[] = [\n            { x: 1, y: 10, z: 0 },\n            { x: 2, y: 30, z: 1 },\n            { x: 3, y: 5, z: 2 },\n            { x: 4, y: 20, z: 3 },\n            { x: 5, y: 15, z: 4 },\n        ];\n\n        const customAccessors = new LineAccessors();\n        // Customizing data accessors\n        customAccessors.data = {\n            x: (datum: IMyDataPoint) => datum.z,\n            y: (datum: IMyDataPoint) => datum.y * 2,\n        };\n\n        this.seriesSet = [\n            {\n                id: "series-1",\n                name: "Series 1",\n                data,\n                scales,\n                renderer,\n                accessors: new LineAccessors(), // using default LineAccessors\n            },\n            {\n                id: "series-2",\n                name: "Series 2",\n                data,\n                scales,\n                renderer,\n                accessors: customAccessors, // using customized LineAccessors\n            },\n        ];\n\n        this.chart.update(this.seriesSet);\n    }\n}\n'},24131:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Data Accessors</h1>\n\n<p>\n    Renderers are responsible for rendering your data, so they need to\n    understand how your data is structured. That is the role of accessors. There\n    is no interface that will enforce the structure of your data, but there are\n    defaults you can follow to require as little extra configuration as\n    possible.\n</p>\n<p>\n    A renderer such as the\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >\n    that derives from\n    <code\n        ><a href="../classes/XYRenderer.html" target="_blank"\n            >XYRenderer</a\n        ></code\n    >\n    has an associated\n    <code\n        ><a href="../classes/LineAccessors.html" target="_blank"\n            >LineAccessors</a\n        ></code\n    >\n    implementation with data accessor keys <code>x</code> and\n    <code>y</code> which are used for accessing x and y domain data respectively\n    from a chart\'s input data set(s).\n</p>\n<nui-message type="info" [allowDismiss]="false"\n    >The general convention for data accessors is to use data point properties\n    of the same name. So data accessor <code>x</code> uses a property\n    <code>x</code> on the data point.</nui-message\n>\n<p>\n    The following descriptions use the LineRenderer as an example. And, even\n    though renderers not derived from XYRenderer may have different sets of\n    default accessor keys, the same patterns for customizing data access still\n    apply.\n</p>\n\n<h2>Custom Accessors</h2>\n<p>\n    Accessors define how data is accessed in a domain, and framework allows you\n    to define custom accessors on one or more domains. A renderer will invoke\n    the appropriate accessor on each datum within a domain. By default, a\n    renderer visualizes raw data as is, i.e. without modification, but defining\n    custom accessors makes it possible to add logic for deciding how to mutate\n    the data before it gets visualized on the chart. In the following snippet,\n    each datum in the y-domain gets multiplied by two before being rendered on\n    the chart and for x-domain <code>z</code> property will be used, instead of\n    default <code>x</code> property.\n</p>\n<pre>{{ customAccessorCode }}</pre>\n<p>\n    The following example contains two series each with its own line renderer\n    visualizing the same raw data. One of the accessors has been customized to\n    multiply each <code>y</code> datum by two and return <code>z</code> property\n    value for <code>x</code> datum, as shown in the snippet above.\n</p>\n<nui-example-wrapper filenamePrefix="accessors" exampleTitle="Custom Accessors">\n    <nui-accessors-example></nui-accessors-example>\n</nui-example-wrapper>\n'},50069:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-accessors-data",\n    templateUrl: "./chart-docs-accessors-data.component.html",\n})\nexport class ChartDocsAccessorsDataComponent {\n    public customAccessorCode = `const customAccessors = new LineAccessors();\ncustomAccessors.data = {\n    x: (datum: any) => datum.z,\n    y: (datum: any) => datum.y * 2,\n};\n...`;\n}\n'},37534:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { RendererAccessorsExampleComponent } from "./accessors/accessors.example.component";\nimport { ChartDocsAccessorsDataComponent } from "./chart-docs-accessors-data.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsAccessorsDataComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "accessors",\n        component: RendererAccessorsExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        RendererAccessorsExampleComponent,\n        ChartDocsAccessorsDataComponent,\n    ],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("data"),\n        },\n    ],\n})\nexport default class ChartDocsAccessorsDataModule {}\n'},28471:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Markers</h1>\n<p>\n    The use of data markers is often the primary visual means of indicating\n    which series a data point belongs to, especially in the case of line charts.\n    The marker used for each series is determined by the series marker accessor.\n    For the line accessors, if a marker accessor isn\'t specified, a default\n    <a href="../classes/SequentialChartMarkerProvider.html" target="_blank"\n        >SequentialChartMarkerProvider</a\n    >\n    instantiated automatically distributes markers sequentially to each series\n    and tracks the marker distribution by seriesId. The job of the\n    SequentialChartMarkerProvider is to ensure markers are used in the order\n    provided and that a marker doesn\'t get used more than once unless the number\n    of series exceeds the number of markers in the provided set.\n</p>\n\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Proceed with caution!</strong>\n    Examples below are provided to describe the possibilities of charting\n    framework and give a better understanding of its principles. This is not a\n    recommendation for regular usage. If you find yourself doing something like\n    this, please consult with UX to double check that your mockups follow the\n    Nova Design Language.\n</nui-message>\n\n<h2>Custom Marker Accessor</h2>\n<p>\n    If you want to manually specify which markers are accessed for a chart\'s\n    series, you can optionally provide your own marker accessor. In the\n    following snippet, a custom accessor plucks a marker from the UX-approved\n    chart marker set and uses it for every series that the renderer instance\n    gets assigned to. The nova-provided set of chart markers can be found\n    <a href="../miscellaneous/variables.html#regularShapes" target="_blank"\n        >here</a\n    >.\n</p>\n<pre>{{ customAccessorSnippet }}</pre>\n<p>\n    pre As you can see in the snippet, the seriesId automatically gets passed as\n    an argument to the marker accessor, so you can optionally add logic that\n    uses the seriesId to determine which marker gets returned. To see a custom\n    marker accessor in action, take a look at the code in the source expander of\n    the following example.\n</p>\n<nui-example-wrapper\n    filenamePrefix="markers-custom-accessor"\n    exampleTitle="Custom Accessor"\n>\n    <nui-markers-custom-accessor-example></nui-markers-custom-accessor-example>\n</nui-example-wrapper>\n\n<h2>Custom Sequential Marker Provider</h2>\n<p>\n    If the set of markers provided by the line renderer\'s default\n    SequentialChartMarkerProvider doesn\'t meet your specifications or you are\n    using a renderer that doesn\'t have a default SequentialChartMarkerProvider,\n    you can instantiate your own marker provider with a custom set of markers to\n    be distributed sequentially and tracked by seriesId as in the following\n    snippet:\n</p>\n<pre>{{ customProviderSnippet }}</pre>\n<nui-example-wrapper\n    filenamePrefix="markers-custom-provider"\n    exampleTitle="Custom Sequential Marker Provider"\n>\n    <nui-markers-custom-provider-example></nui-markers-custom-provider-example>\n</nui-example-wrapper>\n'},1470:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-accessors-markers",\n    templateUrl: "./chart-docs-accessors-markers.component.html",\n})\nexport class ChartDocsAccessorsMarkersComponent {\n    public customAccessorSnippet = `const accessors = new LineAccessors();\naccessors.series.marker = () => CHART_MARKERS[2];\n...`;\n    public customProviderSnippet = `const accessors = new LineAccessors();\nconst customMarkerSet = [CHART_MARKERS[6], CHART_MARKERS[8], CHART_MARKERS[9]];\naccessors.series.marker = new SequentialChartMarkerProvider(customMarkerSet).get;\n...`;\n}\n'},99525:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { ChartDocsAccessorsMarkersComponent } from "./chart-docs-accessors-markers.component";\nimport { RendererMarkersCustomAccessorExampleComponent } from "./custom-accessor/markers-custom-accessor.example.component";\nimport { RendererMarkersCustomProviderExampleComponent } from "./custom-provider/markers-custom-provider.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsAccessorsMarkersComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "custom-provider",\n        component: RendererMarkersCustomProviderExampleComponent,\n    },\n    {\n        path: "custom-accessor",\n        component: RendererMarkersCustomAccessorExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        RendererMarkersCustomProviderExampleComponent,\n        RendererMarkersCustomAccessorExampleComponent,\n        ChartDocsAccessorsMarkersComponent,\n    ],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("markers"),\n        },\n    ],\n})\nexport default class ChartDocsAccessorsMarkersModule {}\n'},41310:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},39635:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    CHART_MARKERS,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-markers-custom-accessor-example",\n    templateUrl: "./markers-custom-accessor.example.component.html",\n})\nexport class RendererMarkersCustomAccessorExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit(): void {\n        const scales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors();\n        // Custom marker accessor\n        accessors.series.marker = () => CHART_MARKERS[2];\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 30 },\n                { x: 2, y: 50 },\n                { x: 3, y: 25 },\n                { x: 4, y: 40 },\n                { x: 5, y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: 1, y: 20 },\n                { x: 2, y: 40 },\n                { x: 3, y: 15 },\n                { x: 4, y: 30 },\n                { x: 5, y: 25 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Series 3",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},60455:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},65600:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    CHART_MARKERS,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SequentialChartMarkerProvider,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-markers-custom-provider-example",\n    templateUrl: "./markers-custom-provider.example.component.html",\n})\nexport class RendererMarkersCustomProviderExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit(): void {\n        const scales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        const renderer = new LineRenderer();\n\n        const accessors = new LineAccessors();\n        // Defining custom marker set\n        const customMarkerSet = [\n            CHART_MARKERS[6],\n            CHART_MARKERS[8],\n            CHART_MARKERS[9],\n        ];\n        // Setting marker accessor to use new SequentialChartMarkerProvider with custom markers\n        accessors.series.marker = new SequentialChartMarkerProvider(\n            customMarkerSet\n        ).get;\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 30 },\n                { x: 2, y: 50 },\n                { x: 3, y: 25 },\n                { x: 4, y: 40 },\n                { x: 5, y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: 1, y: 20 },\n                { x: 2, y: 40 },\n                { x: 3, y: 15 },\n                { x: 4, y: 30 },\n                { x: 5, y: 25 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Series 3",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},81100:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Input Structure</h1>\n\n<h2>Data</h2>\n<p>\n    <a\n        href="../additional-documentation/advanced-usage/input-structure/data.html"\n        target="_parent"\n        >Data Accessors</a\n    >\n    and their associated accessor keys are used for accessing domain data from a\n    chart\'s input data set(s).\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    There is no interface that will enforce the structure of your data, but\n    there are defaults you can follow to require as little extra configuration\n    as possible. See\n    <a\n        href="../additional-documentation/advanced-usage/input-structure/data.html"\n        target="_parent"\n        >Data Accessors</a\n    >\n    page for more details.\n</nui-message>\n\n<h2>Colors</h2>\n<p>\n    <a\n        href="../additional-documentation/advanced-usage/input-structure/colors.html"\n        target="_parent"\n        >Colors</a\n    >\n    for data series can be customized beyond the default\n    <a href="../miscellaneous/variables.html#CHART_PALETTE_CS1" target="_blank"\n        >palette</a\n    >.\n</p>\n\n<h2>Markers</h2>\n<p>\n    The\n    <a\n        href="../additional-documentation/advanced-usage/input-structure/markers.html"\n        target="_parent"\n        >Markers</a\n    >\n    used for identifying which data series a data point belongs to can be\n    customized beyond the default\n    <a href="../miscellaneous/variables.html#regularShapes" target="_blank"\n        >marker set</a\n    >.\n</p>\n'},80859:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-accessors-overview",\n    templateUrl: "./chart-docs-accessors-overview.component.html",\n})\nexport class ChartDocsAccessorsOverviewComponent {}\n'},51293:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { ChartDocsAccessorsOverviewComponent } from "./chart-docs-accessors-overview.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsAccessorsOverviewComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [ChartDocsAccessorsOverviewComponent],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsAccessorsOverviewModule {}\n'},49972:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "accessors",\n        loadChildren: async () =>\n            import(\n                "./accessors/chart-docs-accessors.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "chart-setup",\n        loadChildren: async () =>\n            import(\n                "./chart-setup/chart-docs-chart-setup.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "events",\n        loadChildren: async () =>\n            import("./events/chart-docs-events.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "grid-config",\n        loadChildren: async () =>\n            import(\n                "./grid-config/chart-docs-grid-config.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "legend",\n        loadChildren: async () =>\n            import(\n                "./legend/chart-docs-legend-example.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "scales",\n        loadChildren: async () =>\n            import("./scales/chart-docs-scales.module") as object as Promise<\n                Type<any>\n            >,\n    },\n];\n\n@NgModule({\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsAdvancedUsageModule {}\n'},98134:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Chart Setup</h1>\n<p>To create a data visualization, start by doing the following:</p>\n<p>\n    Instantiate a\n    <code><a href="../classes/Chart.html" target="_blank">Chart</a></code> by\n    passing an implementation of the\n    <code><a href="../interfaces/IGrid.html" target="_blank">IGrid</a></code>\n    interface as an argument to the constructor--for example an\n    <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code> for\n    line and bar charts.\n</p>\n<pre>{{ chartSetup }}</pre>\n<p>\n    The purpose of the grid is to give the chart a well-defined place to show\n    its data. In the case of a line or bar chart, this includes grid lines,\n    axes, ticks, tick labels, etc. For information about other types of grids,\n    see the\n    <a\n        href="../additional-documentation/advanced-usage/grid.html"\n        target="_parent"\n        >Grid Configuration</a\n    >\n    page in the documentation.\n</p>\n<p>\n    In your template, pass the chart class instance to the chart input on the\n    chart component.\n</p>\n<pre>{{ basicChartTemplate }}</pre>\n<p>\n    To initialize your chart with data or to update it later, invoke the chart\n    class\'s\n    <code\n        ><a href="../classes/Chart.html#update" target="_blank">update</a></code\n    >\n    method with an array of one or more chart series (<code\n        ><a href="../interfaces/IChartSeries.html" target="_blank"\n            >IChartSeries[]</a\n        ></code\n    >) as an argument.\n</p>\n<pre>{{ chartUpdate }}</pre>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> See the <em>Chart Series Setup</em> section below for\n    how to set up a chart series.\n</nui-message>\n\n<h1>Example</h1>\n<nui-example-wrapper\n    filenamePrefix="line-chart"\n    exampleTitle="Basic Line Chart"\n>\n    <nui-line-chart-example></nui-line-chart-example>\n</nui-example-wrapper>\n\n<h1>Chart Series Setup</h1>\n<p>\n    Each\n    <code\n        ><a href="../interfaces/IChartSeries.html" target="_blank"\n            >IChartSeries</a\n        ></code\n    >\n    is an extension of\n    <code\n        ><a href="../interfaces/IDataSeries.html" target="_blank"\n            >IDataSeries</a\n        ></code\n    >\n    and includes scales (<code\n        ><a href="../miscellaneous/typealiases.html#Scales" target="_blank"\n            >Scales</a\n        ></code\n    >) and a renderer (<code\n        ><a href="../classes/Renderer.html" target="_blank">Renderer</a></code\n    >) in addition to the data to be visualized.\n</p>\n\n<p>\n    To start setting up a chart series, provide an <code>id</code> (string), a\n    display <code>name</code> (string), and an array of\n    <code>data</code> (<code>any[]</code>). The items in the array can be as\n    simple as numbers or can be represented with more complex objects. The\n    objects in the data array can be any shape you want, but the most basic\n    setup for a two dimensional visualization is:\n</p>\n<pre>{{ basicData }}</pre>\n<p>\n    For a basic x-y coordinate system, the x values are used for the chart\'s\n    x-axis and the y values are used for the y-axis.\n</p>\n\n<h2>Scales</h2>\n<p>\n    Next, provide as part of the IChartSeries a set of scales (<code\n        ><a href="../miscellaneous/typealiases.html#Scales" target="_blank"\n            >Scales</a\n        ></code\n    >) which allow the renderer to calculate exactly where to render a data\n    point inside the grid.\n</p>\n<p>\n    For a basic x-y grid, the scales can be set as an object with x and y\n    properties--indicating which axis each scale applies to. Some of the\n    available scale types are\n    <code\n        ><a href="../classes/LinearScale.html" target="_blank"\n            >LinearScale</a\n        ></code\n    >,\n    <code\n        ><a href="../classes/TimeScale.html" target="_blank">TimeScale</a></code\n    >,\n    <code\n        ><a href="../classes/BandScale.html" target="_blank">BandScale</a></code\n    >\n    and\n    <code\n        ><a href="../classes/TimeIntervalScale.html" target="_blank"\n            >TimeIntervalScale</a\n        ></code\n    >.\n</p>\n<pre>{{ basicScales }}</pre>\n\n<h2>Renderer</h2>\n<p>\n    Finally, provide a renderer which determines the type and appearance of a\n    chart\'s visualization. For instance, to render the data as a line,\n    instantiate a\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >\n    and assign it to the <code>renderer</code> property of the corresponding\n    <code\n        ><a href="../interfaces/IChartSeries.html" target="_blank"\n            >IChartSeries</a\n        ></code\n    >.\n</p>\n<pre>{{ renderer }}</pre>\n\n<h2>Complete Chart Series</h2>\n<pre>{{ basicSeries }}</pre>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> To check out the full basic line chart usage, click\n    the "Show Source" button on the live example at the top of the page.\n</nui-message>\n'},38097:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-chart-setup",\n    templateUrl: "./chart-docs-chart-setup.component.html",\n})\nexport class ChartDocsChartSetupComponent {\n    public basicChartTemplate = `<nui-chart [chart]="chart"></nui-chart>`;\n    public basicSeries = `const chartSeries: IChartSeries = {\n    id: "series-1",\n    name: "Series 1",\n    data: [\n        { x: 1, y: 10 },\n        { x: 2, y: 20 },\n    ],\n    scales: {\n        x: new LinearScale(),\n        y: new LinearScale(),\n    },\n    renderer: new LineRenderer(),\n};\n...`;\n    public basicData = `const chartSeries: IChartSeries = {\n    id: "series-1",\n    name: "Series 1",\n    data: [\n        { x: 1, y: 10 },\n        { x: 2, y: 20 },\n    ],\n    ...\n};`;\n    public basicScales = `const chartSeries: IChartSeries = {\n    ...\n    scales: {\n        x: new LinearScale(),\n        y: new LinearScale(),\n    },\n    ...\n};`;\n    public renderer = `const chartSeries: IChartSeries = {\n    ...\n    renderer: new LineRenderer(),\n    ...\n};`;\n    public chartSetup = `const chart = new Chart(new XYGrid());\n...`;\n    public chartUpdate = `const seriesSet: IChartSeries[] = [...];\nchart.update(seriesSet);\n...`;\n}\n'},70517:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { ChartDocsChartSetupComponent } from "./chart-docs-chart-setup.component";\nimport { LineChartExampleComponent } from "./line-chart/line-chart.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsChartSetupComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "line-chart",\n        component: LineChartExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [LineChartExampleComponent, ChartDocsChartSetupComponent],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("chart-setup"),\n        },\n    ],\n})\nexport default class ChartDocsChartSetupModule {}\n'},26286:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},13360:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-example",\n    templateUrl: "./line-chart.example.component.html",\n})\nexport class LineChartExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public seriesSet: IChartSeries<ILineAccessors>[];\n\n    public ngOnInit(): void {\n        this.seriesSet = [\n            {\n                id: "series-1",\n                name: "Series 1",\n                data: [\n                    { x: 1, y: 10 },\n                    { x: 2, y: 30 },\n                    { x: 3, y: 5 },\n                    { x: 4, y: 20 },\n                    { x: 5, y: 15 },\n                ],\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n                renderer: new LineRenderer(),\n                accessors: new LineAccessors(),\n            },\n        ];\n\n        this.chart.update(this.seriesSet);\n    }\n}\n'},56799:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Chart Events</h1>\n<p>\n    A chart\'s\n    <code><a href="../classes/EventBus.html" target="_blank">EventBus</a></code>\n    events allow your code to potentially keep up to date with events happening\n    with your chart. These can include user interactions, such as mouse\n    movements, clicks, mouseenter, mouseleave, etc., or things that are\n    happening internally with your chart such as refresh events, destroy events,\n    setting of domains, etc.\n</p>\n<p>\n    The payload of each event is of type\n    <code\n        ><a href="../interfaces/IChartEvent.html" target="_blank"\n            >IChartEvent</a\n        ></code\n    >\n    and the actual data of the payload is contained in its\n    <code>data</code> property.\n</p>\n<h2>Supported Events</h2>\n<h3>Interaction Events</h3>\n<h4>\n    <a href="../miscellaneous/variables.html#MOUSE_ACTIVE_EVENT" target="_blank"\n        >MOUSE_ACTIVE_EVENT</a\n    >\n</h4>\n<p>\n    This event is triggered each time the mouse enters or leaves the chart. The\n    data is a boolean value: true for mouseenter and false for mouseleave.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#INTERACTION_VALUES_EVENT"\n        target="_blank"\n        >INTERACTION_VALUES_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when the chart is clicked and as the mouse moves across the chart,\n    the data of this event\'s payload is of type\n    <code\n        ><a href="../interfaces/IInteractionValuesPayload.html" target="_blank"\n            >IInteractionValuesPayload</a\n        ></code\n    >\n    which consists of the raw scale values corresponding to the mouse\'s position\n    over the chart.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#HIGHLIGHT_DATA_POINT_EVENT"\n        target="_blank"\n        >HIGHLIGHT_DATA_POINT_EVENT</a\n    >\n</h4>\n<p>\n    This event is triggered as the mouse moves across the chart, and the data of\n    its payload is of type\n    <code\n        ><a href="../interfaces/IDataPoint.html" target="_blank"\n            >IDataPoint</a\n        ></code\n    >\n    which consists of information about the data point closest to the mouse\'s\n    position within a single data series.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#SELECT_DATA_POINT_EVENT"\n        target="_blank"\n        >SELECT_DATA_POINT_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when a specific data point is clicked on the chart, the data of\n    the payload is of type\n    <code\n        ><a href="../interfaces/IDataPoint.html" target="_blank"\n            >IDataPoint</a\n        ></code\n    >\n    and consists of information about the clicked data point. Currently, this\n    event is only supported for bar charts.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#HIGHLIGHT_SERIES_EVENT"\n        target="_blank"\n        >HIGHLIGHT_SERIES_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when a series is hovered, the payload\'s <code>data</code> property\n    is of type\n    <code\n        ><a href="../interfaces/IDataPoint.html" target="_blank"\n            >IDataPoint</a\n        ></code\n    >\n    which contains information specifically about the target series. This event\n    is currently supported for line, bar, pie, and donut charts. For line\n    charts, this event can be enabled by setting the\n    <code\n        ><a href="../interfaces/ILineRendererConfig.html" target="_blank"\n            >ILineRendererConfig</a\n        ></code\n    >\n    &nbsp;<code>interactionStrategy</code> property to an instance of\n    <code\n        ><a\n            href="../classes/LineSelectSeriesInteractionStrategy.html"\n            target="_blank"\n            >LineSelectSeriesInteractionStrategy</a\n        ></code\n    >. For bar charts, this event can be enabled by setting the\n    <code\n        ><a href="../interfaces/IBarRendererConfig.html" target="_blank"\n            >IBarRendererConfig</a\n        ></code\n    >\n    &nbsp;<code>highlightStrategy</code> property to an instance of\n    <code\n        ><a href="../classes/BarSeriesHighlightStrategy.html" target="_blank"\n            >BarSeriesHighlightStrategy</a\n        ></code\n    >. Pass the configuration object to the renderer\'s constructor.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#INTERACTION_SERIES_EVENT"\n        target="_blank"\n        >INTERACTION_SERIES_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when a series is clicked, it contains information specifically\n    about the target series. The\n    <code>data</code> property of its payload consists of two sub-properties:\n    <code>interactionType</code> and <code>payload</code>. The\n    <code>interactionType</code> property is of type\n    <code\n        ><a\n            href="../miscellaneous/enumerations.html#InteractionType"\n            target="_blank"\n            >InteractionType</a\n        ></code\n    >\n    and indicates the type of interaction that occurred, e.g.\n    <code>InteractionType.Click</code>, and the <code>payload</code> property is\n    of type\n    <code\n        ><a href="../interfaces/IDataPoint.html" target="_blank"\n            >IDataPoint</a\n        ></code\n    >.\n</p>\n<p>\n    This event is currently supported only for line charts. Enable this event on\n    the chart by setting the\n    <code\n        ><a href="../interfaces/ILineRendererConfig.html" target="_blank"\n            >ILineRendererConfig</a\n        ></code\n    >\n    &nbsp;<code>interactionStrategy</code> property to an instance of\n    <code\n        ><a\n            href="../classes/LineSelectSeriesInteractionStrategy.html"\n            target="_blank"\n            >LineSelectSeriesInteractionStrategy</a\n        ></code\n    >. Pass the configuration object to the renderer\'s constructor.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#INTERACTION_DATA_POINTS_EVENT"\n        target="_blank"\n        >INTERACTION_DATA_POINTS_EVENT</a\n    >\n</h4>\n<p>\n    Triggered on click or mousemove over the chart, the\n    <code>data</code> property for this event is of type\n    <code\n        ><a\n            href="../interfaces/IInteractionDataPointsEvent.html"\n            target="_blank"\n            >IInteractionDataPointsEvent</a\n        ></code\n    >\n    and consists of information about the data points closest to the mouse\'s\n    position over the chart across all the data series.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#INTERACTION_DATA_POINT_EVENT"\n        target="_blank"\n        >INTERACTION_DATA_POINT_EVENT</a\n    >\n</h4>\n<p>\n    Triggered on click or hover over a line or area chart\'s individual data\n    point markers, the\n    <code>data</code> property of this event is of type\n    <code\n        ><a href="../interfaces/IInteractionDataPointEvent.html" target="_blank"\n            >IInteractionDataPointEvent</a\n        ></code\n    >\n    and consists of information about the data point being hovered or clicked.\n</p>\n<p>\n    This event is currently supported for line and area charts. Enable the event\n    by setting the <code>markerInteraction</code> property on the\n    <code\n        ><a href="../interfaces/ILineRendererConfig.html" target="_blank"\n            >ILineRendererConfig</a\n        ></code\n    >\n    or\n    <code\n        ><a href="../interfaces/IAreaRendererConfig.html" target="_blank"\n            >IAreaRendererConfig</a\n        ></code\n    >\n    to an object of type\n    <code\n        ><a href="../interfaces/IMarkerInteractionConfig.html" target="_blank"\n            >IMarkerInteractionConfig</a\n        ></code\n    >\n    with a value of <code>true</code> for the <code>enabled</code> property.\n    Pass this configuration object to the renderer\'s constructor.\n</p>\n<h4>\n    <a\n        href="../miscellaneous/variables.html#SERIES_STATE_CHANGE_EVENT"\n        target="_blank"\n        >SERIES_STATE_CHANGE_EVENT</a\n    >\n</h4>\n<p>\n    Triggered on series render state changes such as visibility or emphasis, the\n    <code>data</code> property of this event is of type\n    <code\n        ><a href="../interfaces/IRenderStateData.html" target="_blank"\n            >IRenderStateData[]</a\n        ></code\n    >\n    and consists of information about the render state of each series. The event\n    will be emitted if the user hovers over or deselects a series on the legend\n    for example.\n</p>\n<h3>Internal Events</h3>\n<h4>\n    <a href="../miscellaneous/variables.html#DESTROY_EVENT" target="_blank"\n        >DESTROY_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when the chart instance is destroyed. This event\'s payload has a\n    null <code>data</code>\n    property.\n</p>\n<h4>\n    <a href="../miscellaneous/variables.html#SET_DOMAIN_EVENT" target="_blank"\n        >SET_DOMAIN_EVENT</a\n    >\n</h4>\n<p>\n    This event can be triggered by an entity that wants to request a domain\n    change for a set of scales. For example, if a zoom plugin needs to change\n    the domain of the x scale on a line chart, it can emit one of these with a\n    payload whose <code>data</code> property consists of a mapping of scale id\n    to domain (<code\n        ><a href="../interfaces/ISetDomainEventPayload.html" target="_blank"\n            >ISetDomainEventPayload</a\n        ></code\n    >).\n</p>\n<h4>\n    <a href="../miscellaneous/variables.html#REFRESH_EVENT" target="_blank"\n        >REFRESH_EVENT</a\n    >\n</h4>\n<p>\n    Trigger this event to refresh the chart. The payload of this event is null.\n</p>\n\n<h4>\n    <a\n        href="../miscellaneous/variables.html#CHART_VIEW_STATUS_EVENT"\n        target="_blank"\n        >CHART_VIEW_STATUS_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when the chart becomes visible or hidden within its nearest\n    scrollable parent. The <code>data</code> property of this event is of type\n    <code\n        ><a\n            href="../interfaces/IChartViewStatusEventPayload.html"\n            target="_blank"\n            >IChartViewStatusEventPayload</a\n        ></code\n    >.\n</p>\n\n<h4>\n    <a\n        href="../miscellaneous/variables.html#AXES_STYLE_CHANGE_EVENT"\n        target="_blank"\n        >AXES_STYLE_CHANGE_EVENT</a\n    >\n</h4>\n<p>\n    Triggered when the right or left axis of an XY grid with two Y axes changes\n    its opacity due to a change in series emphasis. The\n    <code>data</code> property of this event is of type <code></code>\n    <code\n        ><a\n            href="../interfaces/IAxesStyleChangeEventPayload.html"\n            target="_blank"\n            >IAxesStyleChangeEventPayload</a\n        ></code\n    >.\n</p>\n\n<h2>Basic Event Processing</h2>\n\n<p>\n    This example demonstrates the process of subscribing to an event of your\n    choice from the chart\'s event bus. Keep in mind that when you\'re using an\n    OnPush change detection strategy in your component, you need to manually\n    check for changes whenever you expect your UI to update.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="events-basic-example"\n    exampleTitle="Basic Event Processing"\n>\n    <nui-chart-events-basic></nui-chart-events-basic>\n</nui-example-wrapper>\n\n<h2>Interaction Event Sampler</h2>\n<p>\n    The following event sampler tool allows you to interact with the chart to\n    see the resulting event payload.\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> INTERACTION_SERIES_EVENT is currently only supported\n    for the line chart, and INTERACTION_DATA_POINT_EVENT is currently only\n    supported for line and area charts. To see these events in action in the\n    sampler, select the line chart and either the INTERACTION_SERIES_EVENT or\n    the INTERACTION_DATA_POINT_EVENT.\n</nui-message>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> HIGHLIGHT_SERIES_EVENT is currently supported for\n    pie, donut, line, bar chart types. The following example only enables the\n    event for line and grouped bar charts. To see it in action in the sampler,\n    select the line or grouped bar chart and the HIGHLIGHT_SERIES_EVENT.\n</nui-message>\n<nui-chart-event-sampler></nui-chart-event-sampler>\n'},38752:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-events",\n    templateUrl: "./chart-docs-events.component.html",\n})\nexport class ChartDocsEventsComponent {}\n'},79973:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiSelectModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { ChartDocsEventsComponent } from "./chart-docs-events.component";\nimport { EventSamplerComponent } from "./event-sampler/event-sampler.component";\nimport { EventsBasicExampleComponent } from "./events-basic/events-basic-example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsEventsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: EventsBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "event-sampler",\n        component: EventSamplerComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsEventsComponent,\n        EventsBasicExampleComponent,\n        EventSamplerComponent,\n    ],\n    imports: [\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiSelectModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("events"),\n        },\n    ],\n})\nexport default class ChartDocsEventsModule {}\n'},92334:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\'] | titlecase"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n<hr />\n\n<div class="d-flex">\n    <div class="d-flex align-items-center">\n        <strong>Chart Type:</strong>\n        <nui-select\n            class="ml-2"\n            [itemsSource]="chartTypes"\n            [value]="selectedChartType"\n            (changed)="updateChartType($event.newValue)"\n        ></nui-select>\n    </div>\n\n    <div class="d-flex align-items-center ml-3">\n        <strong>Event:</strong>\n        <nui-select\n            [itemsSource]="eventFilters"\n            class="ml-2"\n            [value]="selectedEvent"\n            displayValue="name"\n            (changed)="onEventFilterChange($event.newValue)"\n        ></nui-select>\n    </div>\n\n    <div\n        *ngIf="!!selectedInteractionType"\n        class="d-flex align-items-center ml-3"\n    >\n        <strong>Interaction Type:</strong>\n        <nui-select\n            class="ml-2"\n            [itemsSource]="selectedEvent.interactionTypes"\n            [value]="selectedInteractionType"\n            (changed)="onInteractionTypeChange($event.newValue)"\n        ></nui-select>\n    </div>\n</div>\n\n<div class="mt-3 sampler-output__container">\n    <pre>{{ parsedEvent | json }}</pre>\n</div>\n'},70977:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t="@sampler-output-container-height: 660px;\n\n.sampler-output__container {\n    height: @sampler-output-container-height;\n    overflow-y: scroll;\n}\n"},62843:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n    ViewEncapsulation,\n} from "@angular/core";\nimport each from "lodash/each";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    CHART_VIEW_STATUS_EVENT,\n    HIGHLIGHT_DATA_POINT_EVENT,\n    HIGHLIGHT_SERIES_EVENT,\n    IAccessors,\n    IBarAccessors,\n    IChartEvent,\n    IChartMarker,\n    IChartSeries,\n    IGrid,\n    InteractionLabelPlugin,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_DATA_POINT_EVENT,\n    INTERACTION_SERIES_EVENT,\n    INTERACTION_VALUES_EVENT,\n    IValueProvider,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    LineSelectSeriesInteractionStrategy,\n    MappedValueProvider,\n    MOUSE_ACTIVE_EVENT,\n    Renderer,\n    Scales,\n    SELECT_DATA_POINT_EVENT,\n    SERIES_STATE_CHANGE_EVENT,\n    stackedPreprocessor,\n    XYGrid,\n} from "@nova-ui/charts";\n\nimport { isEvenIndex } from "../../../../utility/isEvenIndex";\n\ninterface IEventInfo {\n    id: string;\n    name: string;\n    interactionTypes?: string[];\n}\n\nenum ChartType {\n    StackedBar = "Stacked Bar",\n    GroupedBar = "Grouped Bar",\n    Line = "Line",\n}\n\ntype SeriesProcessor<T extends IAccessors = IAccessors> = (\n    series: IChartSeries<T>[],\n    isVisible: (chartSeries: IChartSeries<T>) => boolean\n) => IChartSeries<T>[];\n\ninterface IChartTools<T extends IAccessors = IAccessors> {\n    seriesProcessor?: SeriesProcessor<T>;\n    gridFunction: () => IGrid;\n    rendererFunction: () => Renderer<IAccessors>;\n    accessorFunction: (\n        colors?: IValueProvider<string>,\n        markers?: IValueProvider<IChartMarker>\n    ) => T;\n    scaleFunction: () => Scales;\n}\n\nexport interface IChartAttributes<T extends IAccessors = IAccessors> {\n    seriesProcessor?: SeriesProcessor<T>;\n    grid: IGrid;\n    renderer: Renderer<IAccessors>;\n    accessors: T;\n    scales: Scales;\n}\n\n@Component({\n    selector: "nui-chart-event-sampler",\n    templateUrl: "./event-sampler.component.html",\n    styleUrls: ["./event-sampler.component.less"],\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EventSamplerComponent implements OnInit {\n    public parsedEvent = {};\n    public readonly eventFilters = [\n        {\n            id: MOUSE_ACTIVE_EVENT,\n            name: "MOUSE_ACTIVE_EVENT",\n        },\n        {\n            id: INTERACTION_VALUES_EVENT,\n            name: "INTERACTION_VALUES_EVENT",\n            interactionTypes: [\n                InteractionType.Click,\n                InteractionType.MouseMove,\n            ],\n        },\n        {\n            id: INTERACTION_DATA_POINTS_EVENT,\n            name: "INTERACTION_DATA_POINTS_EVENT",\n            interactionTypes: [\n                InteractionType.Click,\n                InteractionType.MouseMove,\n            ],\n        },\n        {\n            id: INTERACTION_DATA_POINT_EVENT,\n            name: "INTERACTION_DATA_POINT_EVENT",\n            interactionTypes: [InteractionType.Click, InteractionType.Hover],\n        },\n        {\n            id: HIGHLIGHT_DATA_POINT_EVENT,\n            name: "HIGHLIGHT_DATA_POINT_EVENT",\n            interactionTypes: [InteractionType.MouseMove],\n        },\n        {\n            id: HIGHLIGHT_SERIES_EVENT,\n            name: "HIGHLIGHT_SERIES_EVENT",\n            interactionTypes: [InteractionType.MouseMove],\n        },\n        {\n            id: INTERACTION_SERIES_EVENT,\n            name: "INTERACTION_SERIES_EVENT",\n            interactionTypes: [InteractionType.Click],\n        },\n        {\n            id: SELECT_DATA_POINT_EVENT,\n            name: "SELECT_DATA_POINT_EVENT",\n            interactionTypes: [InteractionType.Click],\n        },\n        {\n            id: CHART_VIEW_STATUS_EVENT,\n            name: "CHART_VIEW_STATUS_EVENT",\n        },\n        {\n            id: SERIES_STATE_CHANGE_EVENT,\n            name: "SERIES_STATE_CHANGE_EVENT",\n        },\n    ];\n\n    public selectedEvent: IEventInfo = this.eventFilters[0];\n    public selectedInteractionType = "";\n\n    public chartTypes = [\n        ChartType.GroupedBar,\n        ChartType.StackedBar,\n        ChartType.Line,\n    ];\n    public selectedChartType: ChartType;\n    public categories = ["Q1", "Q2", "Q3", "Q4"];\n    public subCategories = [\n        "down",\n        "critical",\n        "warning",\n        "unknown",\n        "ok",\n        "other",\n    ];\n    public values = [\n        [24, 16, 7, 6, 97, 4],\n        [13, 8, 5, 17, 5, 25],\n        [97, 41, 24, 6, 7, 6],\n        [45, 87, 23, 48, 24, 9],\n    ];\n    public valueAccessor: (i: number, j: number) => number;\n    public chartAssist: ChartAssist;\n    public palette: ChartPalette;\n\n    private accessors: IBarAccessors | IAccessors;\n    private renderer: Renderer<IAccessors>;\n    private scales: Scales;\n    private seriesProcessor?: SeriesProcessor<IBarAccessors> | SeriesProcessor;\n\n    public onEventFilterChange(selectedEvent: IEventInfo): void {\n        this.selectedEvent = selectedEvent;\n        this.selectedInteractionType = this.selectedEvent.interactionTypes\n            ? this.selectedEvent.interactionTypes[0]\n            : "";\n    }\n\n    public onInteractionTypeChange(type: InteractionType): void {\n        this.selectedInteractionType = type;\n    }\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        this.valueAccessor = (i, j) => this.values[j][i];\n        this.palette = new ChartPalette(\n            new MappedValueProvider<string>(\n                zipObject(\n                    this.subCategories,\n                    CHART_PALETTE_CS_S_EXTENDED.filter(isEvenIndex)\n                )\n            )\n        );\n\n        this.updateChartType(this.chartTypes[0]);\n    }\n\n    public updateChartType(chartType: ChartType): void {\n        this.selectedChartType = chartType;\n        this.buildChart();\n        this.subscribeToChart();\n        this.updateChart();\n    }\n\n    private buildChart() {\n        const { grid, accessors, renderer, scales, seriesProcessor } =\n            this.getChartAttributes(this.selectedChartType);\n\n        this.chartAssist = new ChartAssist(new Chart(grid));\n        this.chartAssist.palette = this.palette;\n\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n\n        this.renderer = renderer;\n        this.accessors = accessors;\n        this.scales = scales;\n        this.seriesProcessor = seriesProcessor;\n    }\n\n    private subscribeToChart() {\n        each(this.eventFilters, (filter) => {\n            this.chartAssist.chart\n                .getEventBus()\n                .getStream(filter.id)\n                .subscribe((event: IChartEvent) => {\n                    if (this.selectedEvent.id === filter.id) {\n                        if (\n                            !event.data.interactionType ||\n                            this.selectedInteractionType ===\n                                event.data.interactionType\n                        ) {\n                            recursivelyReplacePropValue(\n                                event,\n                                "dataSeries",\n                                "<< IChartSeries info is available here (replaced in output for brevity) >>"\n                            );\n                            this.parsedEvent = event;\n                            this.changeDetector.markForCheck();\n                        }\n                    }\n                });\n        });\n    }\n\n    private updateChart(): void {\n        let seriesSet:\n            | IChartSeries<IAccessors>[]\n            | IChartSeries<IBarAccessors>[] = this.buildChartSeries(\n            this.categories,\n            this.subCategories,\n            this.valueAccessor\n        );\n        // TODO: Refactor this to be able to pass different types of seriesSet to get rid of the any\n        seriesSet = this.seriesProcessor\n            ? this.seriesProcessor(<any>seriesSet, () => true)\n            : seriesSet;\n        this.chartAssist.update(seriesSet);\n    }\n\n    private buildChartSeries(\n        categories: string[],\n        subCategories: string[],\n        valueAccessor: (i: number, j: number) => number\n    ): IChartSeries<IBarAccessors>[] | IChartSeries<IAccessors>[] {\n        return subCategories.map((subCategory, i) => ({\n            id: subCategory,\n            name: subCategory,\n            data: categories.map((xCategory, j) => ({\n                category: xCategory,\n                value: valueAccessor(i, j) || 0,\n            })),\n            accessors: this.accessors,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n    }\n\n    private getChartAttributes(\n        chartType: ChartType\n    ): IChartAttributes | IChartAttributes<IBarAccessors> {\n        const t: IChartTools | IChartTools<IBarAccessors> =\n            this.getChartTools(chartType);\n        let result: IChartAttributes | IChartAttributes<IBarAccessors> = {\n            grid: t.gridFunction(),\n            accessors: t.accessorFunction(),\n            renderer: t.rendererFunction(),\n            scales: t.scaleFunction(),\n        };\n\n        if (t.seriesProcessor) {\n            result = {\n                ...result,\n                seriesProcessor: t.seriesProcessor,\n            } as IChartAttributes<IBarAccessors>;\n        }\n        return result;\n    }\n\n    private getChartTools(\n        chartType: ChartType\n    ): IChartTools<IBarAccessors> | IChartTools {\n        const chartTools: Record<\n            ChartType,\n            IChartTools<IBarAccessors> | IChartTools\n        > = {\n            [ChartType.StackedBar]: {\n                seriesProcessor: stackedPreprocessor,\n                gridFunction: barGrid,\n                rendererFunction: () =>\n                    new BarRenderer({\n                        highlightStrategy: new BarHighlightStrategy("x"),\n                    }),\n                accessorFunction: () =>\n                    barAccessors(undefined, this.palette.standardColors),\n                scaleFunction: barScales,\n            },\n            [ChartType.GroupedBar]: {\n                gridFunction: () => barGrid({ grouped: true }),\n                rendererFunction: () =>\n                    new BarRenderer({\n                        highlightStrategy: new BarSeriesHighlightStrategy("x"),\n                    }),\n                accessorFunction: () => {\n                    const accessors = barAccessors(\n                        { grouped: true },\n                        this.palette.standardColors\n                    );\n                    accessors.data.category = (data, i, series, dataSeries) => [\n                        data.category,\n                        dataSeries.name,\n                    ];\n                    return accessors;\n                },\n                scaleFunction: () => barScales({ grouped: true }),\n            },\n            [ChartType.Line]: {\n                gridFunction: () => new XYGrid(),\n                rendererFunction: () =>\n                    new LineRenderer({\n                        interactionStrategy:\n                            new LineSelectSeriesInteractionStrategy(),\n                        markerInteraction: { enabled: true, clickable: true },\n                    }),\n                accessorFunction: () => {\n                    const accessors = new LineAccessors(\n                        this.palette.standardColors\n                    );\n                    accessors.data.x = (d) => d.category;\n                    accessors.data.y = (d) => d.value;\n                    accessors.data.value = (d) => d.value;\n                    return accessors;\n                },\n                scaleFunction: () => ({\n                    x: new BandScale().fixDomain(this.categories),\n                    y: new LinearScale(),\n                }),\n            },\n        };\n\n        return chartTools[chartType];\n    }\n}\n\nfunction recursivelyReplacePropValue(\n    obj: Record<string, any>,\n    property: string,\n    replacement: string\n): void {\n    for (const prop in obj) {\n        if (prop === property) {\n            obj[prop] = replacement;\n        } else if (typeof obj[prop] === "object") {\n            recursivelyReplacePropValue(obj[prop], property, replacement);\n        }\n    }\n}\n'},17169:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n\n<pre><code>{{payload}}</code></pre>\n'},18071:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n} from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartEvent,\n    IChartSeries,\n    ILineAccessors,\n    INTERACTION_VALUES_EVENT,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-events-basic",\n    templateUrl: "./events-basic-example.component.html",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EventsBasicExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public payload: string;\n\n    constructor(private changeDetectorRef: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // - subscribe to a chosen chart event\n        // - unsubscribing is not necessary as the chart will be destroyed when the component used to place it on the page will be destroyed;\n        //   the subscription will be unsubscribed automatically\n        this.chart\n            .getEventBus()\n            .getStream(INTERACTION_VALUES_EVENT)\n            .subscribe((event: IChartEvent) => {\n                // process the event\n                this.payload = JSON.stringify(event.data, null, 4);\n                // in case of using a OnPush change detection strategy you need to detectChanges manually as the event is internal to this component and\n                // wouldn\'t cause the UI to update\n                this.changeDetectorRef.detectChanges();\n            });\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},73945:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Grid Configuration</h1>\n\n<p>\n    A chart\'s grid is what defines the area in which the data visualization will\n    be rendered. The grid definition includes its dimensions such as margins,\n    padding, height, and width. The grid also defines whether the rendered\n    content will be interactive. The basic grid is set up with a default\n    configuration that should work for the majority of cases. But, if any of the\n    its configuration items need adjustment for your particular use case, the\n    following examples demonstrate how.\n</p>\n\n<h2>Basic Usage</h2>\n<p>\n    You can preconfigure a grid by by passing an\n    <code\n        ><a href="../interfaces/IGridConfig.html" target="_blank"\n            >IGridConfig</a\n        ></code\n    >\n    to the grid\'s constructor and then pass the grid instance to the\n    <code><a href="../classes/Chart.html" target="_blank">Chart</a></code>\n    class\'s constructor. The code snippets on this page use the\n    <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code> and\n    <code\n        ><a href="../classes/XYGridConfig.html" target="_blank"\n            >XYGridConfig</a\n        ></code\n    >\n    as an example.\n</p>\n<pre>{{ gridInstantiation }}</pre>\n<p>\n    Alternately, you can change an existing grid instance\'s configuration by\n    accessing it via the chart\'s\n    <code\n        ><a href="../classes/Chart.html#getGrid" target="_blank"\n            >getGrid</a\n        ></code\n    >\n    method. The grid\'s configuration can then be set by passing a new\n    <code\n        ><a href="../interfaces/IGridConfig.html" target="_blank"\n            >IGridConfig</a\n        ></code\n    >\n    to its\n    <code\n        ><a href="../interfaces/IGrid.html#config" target="_blank"\n            >config</a\n        ></code\n    >\n    method.\n</p>\n<pre>{{ gridReconfiguration }}</pre>\n\n<h2>Disabling Interaction</h2>\n<p>\n    To disable all user interaction on the chart set the grid configuration\'s\n    <code>interactive</code> property to <code>false</code>. If you hover over\n    the example below, you can tell that interaction is disabled by the fact\n    that no interaction line is shown.\n</p>\n<nui-example-wrapper\n    filenamePrefix="base-grid-disabling-interaction"\n    exampleTitle="Disabling Interaction"\n>\n    <nui-base-grid-disabling-interaction-example></nui-base-grid-disabling-interaction-example>\n</nui-example-wrapper>\n\n<h2>Dimensions</h2>\n<p>\n    To adjust the grid\'s margins, padding, height, and width, modify the\n    <code>dimension</code> property (<code\n        ><a href="../classes/DimensionConfig.html" target="_blank"\n            >DimensionConfig</a\n        ></code\n    >) on the grid configuration as described below.\n</p>\n\n<h3>Margins</h3>\n<p>\n    The grid\'s margins can be adjusted by setting the grid configuration\'s\n    <code>dimension.margin</code> property with an\n    <code\n        ><a href="../interfaces/IAllAround.html" target="_blank"\n            >IAllAround&lt;number&gt;</a\n        ></code\n    >\n    value or by setting one of the margin number values directly, e.g.\n    <code>gridConfig.dimension.margin.top = 15</code>.\n</p>\n\n<p>The default values for the XYGridConfig margin are:</p>\n<pre>{{ defaultMargins | json }}</pre>\n<nui-example-wrapper filenamePrefix="base-grid-margins" exampleTitle="Margins">\n    <nui-base-grid-margins-example></nui-base-grid-margins-example>\n</nui-example-wrapper>\n<p>\n    In addition to being able to specify the grid\'s margins manually, you can\n    set the grid to automatically adjust its margins based on the tick label\n    width. For example, set\n    <code>axis.bottom.fit</code> to true to adjust the grid\'s horizontal margins\n    so that the bottom axis tick labels are not cropped on the left or right.\n    And, set <code>axis.left.fit</code> to true to adjust the grid\'s left margin\n    to prevent the left axis tick labels from getting cropped on their left\n    side.\n</p>\n<nui-example-wrapper\n    filenamePrefix="base-grid-auto-margins"\n    exampleTitle="Auto Margins"\n>\n    <nui-base-grid-auto-margins-example></nui-base-grid-auto-margins-example>\n</nui-example-wrapper>\n\n<h3>Padding</h3>\n<p>\n    The grid\'s padding can be adjusted by setting the grid configuration\'s\n    <code>dimension.padding</code> property with an\n    <code\n        ><a href="../interfaces/IAllAround.html" target="_blank"\n            >IAllAround&lt;number&gt;</a\n        ></code\n    >\n    value or by setting one of the padding number values directly, e.g.\n    <code>gridConfig.dimension.padding.top = 15</code>.\n</p>\n<nui-example-wrapper filenamePrefix="base-grid-padding" exampleTitle="Padding">\n    <nui-base-grid-padding-example></nui-base-grid-padding-example>\n</nui-example-wrapper>\n\n<h3>Height and Width</h3>\n<p>\n    The grid\'s height and/or width can be adjusted by first setting the grid\n    configuration\'s\n    <code>dimension.autoHeight</code> and/or\n    <code>dimension.autoWidth</code> properties to false. With auto-height\n    and/or auto-width disabled, you can then use the\n    <code\n        ><a href="../classes/DimensionConfig.html#height" target="_blank"\n            >height</a\n        ></code\n    >\n    and\n    <code\n        ><a href="../classes/DimensionConfig.html#width" target="_blank"\n            >width</a\n        ></code\n    >\n    methods on the grid configuration\'s <code>dimension</code> property to\n    adjust the height and width.\n</p>\n<nui-example-wrapper\n    filenamePrefix="base-grid-height-and-width"\n    exampleTitle="Height and Width"\n>\n    <nui-base-grid-height-and-width-example></nui-base-grid-height-and-width-example>\n</nui-example-wrapper>\n'},65378:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport { XYGridConfig } from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-docs-base-grid",\n    templateUrl: "./chart-docs-base-grid.component.html",\n})\nexport class ChartDocsBaseGridComponent {\n    public gridInstantiation = `const gridConfig = new XYGridConfig();\ngridConfig.dimension.padding.left = 20;\nthis.chart = new Chart(new XYGrid(gridConfig));\n...`;\n    public gridReconfiguration = `const gridConfig = new XYGridConfig();\ngridConfig.dimension.padding.left = 20;\nthis.chart.getGrid().config(gridConfig);\n...`;\n    public defaultMargins = XYGridConfig.DEFAULT_MARGIN;\n}\n'},21016:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiCheckboxModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { ChartDocsBaseGridComponent } from "./chart-docs-base-grid.component";\nimport { BaseGridDisablingInteractionExampleComponent } from "./disabling-interaction/base-grid-disabling-interaction.example.component";\nimport { BaseGridHeightAndWidthExampleComponent } from "./height-and-width/base-grid-height-and-width.example.component";\nimport { BaseGridAutoMarginsExampleComponent } from "./margins/base-grid-auto-margins.example.component";\nimport { BaseGridMarginsExampleComponent } from "./margins/base-grid-margins.example.component";\nimport { BaseGridPaddingExampleComponent } from "./padding/base-grid-padding.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsBaseGridComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "disabling-interaction",\n        component: BaseGridDisablingInteractionExampleComponent,\n    },\n    {\n        path: "margins",\n        component: BaseGridMarginsExampleComponent,\n    },\n    {\n        path: "padding",\n        component: BaseGridPaddingExampleComponent,\n    },\n    {\n        path: "height-and-width",\n        component: BaseGridHeightAndWidthExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        BaseGridDisablingInteractionExampleComponent,\n        BaseGridAutoMarginsExampleComponent,\n        BaseGridMarginsExampleComponent,\n        BaseGridPaddingExampleComponent,\n        BaseGridHeightAndWidthExampleComponent,\n        ChartDocsBaseGridComponent,\n    ],\n    imports: [\n        NuiCheckboxModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("base-grid"),\n        },\n    ],\n})\nexport class ChartDocsBaseGridModule {}\n'},95487:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},54554:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-base-grid-disabling-interaction-example",\n    templateUrl: "./base-grid-disabling-interaction.example.component.html",\n})\nexport class BaseGridDisablingInteractionExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.interactive = false;\n        this.chart = new Chart(new XYGrid(gridConfig));\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},37320:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},99225:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-base-grid-height-and-width-example",\n    templateUrl: "./base-grid-height-and-width.example.component.html",\n})\nexport class BaseGridHeightAndWidthExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.height(50);\n        gridConfig.dimension.width(100);\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},16683:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n<nui-checkbox (valueChange)="toggleFit()">Toggle Axis Fit</nui-checkbox>\n'},72490:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit, ViewChild } from "@angular/core";\n\nimport {\n    Chart,\n    ChartComponent,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-base-grid-auto-margins-example",\n    templateUrl: "./base-grid-auto-margins.example.component.html",\n})\nexport class BaseGridAutoMarginsExampleComponent implements OnInit {\n    public chart: Chart;\n\n    @ViewChild(ChartComponent) chartComponent: ChartComponent;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.axis.bottom.fit = false;\n        gridConfig.axis.left.fit = false;\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n\n    public toggleFit(): void {\n        const gridConfig = this.chart.getGrid().config() as XYGridConfig;\n        gridConfig.axis.bottom.fit = !gridConfig.axis.bottom.fit;\n        gridConfig.axis.left.fit = !gridConfig.axis.left.fit;\n        if (!gridConfig.axis.bottom.fit) {\n            gridConfig.dimension.margin = Object.assign(\n                {},\n                XYGridConfig.DEFAULT_MARGIN\n            );\n        }\n        this.chart.updateDimensions();\n        this.chartComponent.redraw();\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 100, y: 10000 },\n                { x: 200, y: 30000 },\n                { x: 300, y: 5000 },\n                { x: 400, y: 20000 },\n                { x: 500, y: 15000 },\n            ],\n        },\n    ];\n}\n'},67038:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},95202:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-base-grid-margins-example",\n    templateUrl: "./base-grid-margins.example.component.html",\n})\nexport class BaseGridMarginsExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.margin = {\n            top: 30,\n            bottom: 30,\n            left: 100,\n            right: 100,\n        };\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},26583:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},85208:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-base-grid-padding-example",\n    templateUrl: "./base-grid-padding.example.component.html",\n})\nexport class BaseGridPaddingExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.padding = {\n            top: 25,\n            right: 50,\n            bottom: 25,\n            left: 50,\n        };\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n                scales: {\n                    x: new LinearScale(),\n                    y: new LinearScale(),\n                },\n            })\n        );\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: 1, y: 10 },\n                { x: 2, y: 30 },\n                { x: 3, y: 5 },\n                { x: 4, y: 20 },\n                { x: 5, y: 15 },\n            ],\n        },\n    ];\n}\n'},86625:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "base-grid",\n        loadChildren: async () =>\n            import(\n                "./base-grid/chart-docs-base-grid.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    declarations: [],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsGridConfigModule {}\n'},39173:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { LegendActiveExampleComponent } from "./legend-active/legend-active.example.component";\nimport { LegendBasicExampleComponent } from "./legend-basic/legend-basic.example.component";\nimport { LegendCompactExampleComponent } from "./legend-compact/legend-compact.example.component";\nimport { LegendDescriptionProjectionExampleComponent } from "./legend-description-content-projection/legend-description-projection.example.component";\nimport { LegendDocsExampleComponent } from "./legend-docs/legend-docs.example.component";\nimport { LegendHorizontalExampleComponent } from "./legend-horizontal/legend-horizontal.example.component";\nimport { LegendInteractiveExampleComponent } from "./legend-interactive/legend-interactive.example.component";\nimport { LegendMetadataExampleComponent } from "./legend-metadata/legend-metadata-example.component";\nimport { LegendRichTileContentProjectionExampleComponent } from "./legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component";\nimport { LegendRichTileExampleComponent } from "./legend-rich-tile/legend-rich-tile.example.component";\nimport { LegendTestExampleComponent } from "./legend-test/legend-test.component";\nimport { LegendTextColorExampleComponent } from "./legend-text-color/legend-text-color.example.component";\nimport { LegendVisualTestComponent } from "./legend-visual-test/legend-visual-test.component";\n\nconst legendRoutes: Routes = [\n    {\n        path: "",\n        component: LegendDocsExampleComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: LegendBasicExampleComponent,\n    },\n    {\n        path: "interactive",\n        component: LegendInteractiveExampleComponent,\n    },\n    {\n        path: "test",\n        component: LegendTestExampleComponent,\n    },\n    {\n        path: "rich-tile-content-projection",\n        component: LegendRichTileContentProjectionExampleComponent,\n    },\n    {\n        path: "metadata",\n        component: LegendMetadataExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "visual-test",\n        component: LegendVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        LegendActiveExampleComponent,\n        LegendBasicExampleComponent,\n        LegendCompactExampleComponent,\n        LegendDocsExampleComponent,\n        LegendHorizontalExampleComponent,\n        LegendInteractiveExampleComponent,\n        LegendRichTileExampleComponent,\n        LegendTestExampleComponent,\n        LegendTextColorExampleComponent,\n        LegendVisualTestComponent,\n        LegendDescriptionProjectionExampleComponent,\n        LegendRichTileContentProjectionExampleComponent,\n        LegendMetadataExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(legendRoutes),\n        NuiDocsModule,\n        NuiIconModule,\n        NuiButtonModule,\n        NuiMessageModule,\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("legend"),\n        },\n    ],\n})\nexport default class ChartDocsLegendExampleModule {}\n'},25146:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nexport * from "./legend-basic/legend-basic.example.component";\nexport * from "./legend-test/legend-test.component";\nexport * from "./legend-docs/legend-docs.example.component";\n'},93234:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend [active]="true">\n    <nui-legend-series\n        descriptionPrimary="Basic Tile Primary Description"\n        i18n-descriptionPrimary\n        descriptionSecondary="Basic Tile Secondary Description"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile\n            value="21.9"\n            unitLabel="Mbps"\n            [backgroundColor]="colors.get(firstSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Rich Tile Primary Description"\n        i18n-descriptionPrimary\n        descriptionSecondary="Rich Tile Secondary Description"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile\n            value="11.5"\n            unitLabel="Kbps"\n            i18n-unitLabel\n            [backgroundColor]="colors.get(secondSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},27271:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-active-example",\n    templateUrl: "./legend-active.example.component.html",\n})\nexport class LegendActiveExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},93041:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 1"\n        i18n-descriptionPrimary\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 2"\n        i18n-descriptionPrimary\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},26409:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-basic-example",\n    templateUrl: "./legend-basic.example.component.html",\n})\nexport class LegendBasicExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},81250:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend>\n    <nui-legend-series>\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series>\n        <nui-rich-legend-tile\n            value="31.9"\n            unitLabel="Kbps"\n            i18n-unitLabel\n            [backgroundColor]="colors.get(secondSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},25307:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-compact-example",\n    templateUrl: "./legend-compact.example.component.html",\n})\nexport class LegendCompactExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},39486:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend [active]="active">\n    <nui-legend-series>\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n\n        \x3c!-- custom description content --\x3e\n        <div description class="d-flex align-items-center px-2">\n            <nui-icon icon="printer" status="up"></nui-icon>\n            <span class="nui-text-default" i18n>Custom Description 1</span>\n        </div>\n    </nui-legend-series>\n    <nui-legend-series>\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n\n        \x3c!-- custom description content --\x3e\n        <div description class="d-flex align-items-center px-2">\n            <nui-icon icon="port" status="critical"></nui-icon>\n            <span class="nui-text-default" i18n>Custom Description 2</span>\n        </div>\n    </nui-legend-series>\n</nui-legend>\n<br />\n<button class="mt-2" nui-button type="button" (click)="toggleActive()">\n    Toggle Active State\n</button>\n'},10340:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-description-projection-example",\n    templateUrl: "legend-description-projection.example.component.html",\n})\nexport class LegendDescriptionProjectionExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n\n    public active: boolean = false;\n\n    public toggleActive(): void {\n        this.active = !this.active;\n    }\n}\n'},61818:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Legend Setup</h1>\n\n<h2>Basic Usage</h2>\n<p>\n    To implement\n    <code\n        ><a href="../components/LegendComponent.html" target="_blank"\n            >nui-legend</a\n        ></code\n    >, perform the following steps:\n</p>\n<ol>\n    <li>Place a <code>nui-legend</code> in the template.</li>\n    <li>\n        Put one or more\n        <code\n            ><a href="../components/LegendSeriesComponent.html" target="_blank"\n                >nui-legend-series</a\n            ></code\n        >\n        elements inside the <code>nui-legend</code> element.\n    </li>\n    <li>\n        Use\n        <code\n            ><a\n                href="../components/LegendSeriesComponent.html#descriptionPrimary"\n                target="_blank"\n                >descriptionPrimary</a\n            ></code\n        >\n        input to set the primary description for the series.\n    </li>\n    <li>\n        Place a\n        <code\n            ><a\n                href="../components/BasicLegendTileComponent.html"\n                target="_blank"\n                >nui-basic-legend-tile</a\n            ></code\n        >\n        inside the <code>nui-legend-series</code>.\n    </li>\n</ol>\n<p>\n    To add markers to a <code>nui-basic-legend-tile</code>, place a\n    <code\n        ><a href="../components/ChartMarkerComponent.html" target="_blank"\n            >nui-chart-marker</a\n        ></code\n    >\n    element inside it, and optionally set the\n    <code\n        ><a\n            href="../components/ChartMarkerComponent.html#drawLine"\n            target="_blank"\n            >drawLine</a\n        ></code\n    >\n    input to true to draw a line through the marker that matches the series line\n    on the chart.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    Per UX guidelines, when used with a line chart, basic tiles should have the\n    <code>drawLine</code> input set to true.\n</nui-message>\n<p>\n    To get markers and colors working, generate marker and color providers and\n    bind their respective get methods to the marker and color inputs on the\n    <code>nui-chart-marker</code> component. To see how to do this, take a look\n    at the typescript and html source of the next example. The providers in this\n    example are created using the framework\'s built-in\n    <code\n        ><a\n            href="../miscellaneous/variables.html#CHART_PALETTE_CS1"\n            target="_blank"\n            >CHART_PALETTE_CS1</a\n        ></code\n    >\n    chart colors and\n    <code\n        ><a\n            href="..//miscellaneous/variables.html#CHART_MARKERS"\n            target="_blank"\n            >CHART_MARKERS</a\n        ></code\n    >.\n</p>\n<nui-example-wrapper filenamePrefix="legend-basic" exampleTitle="Basic Usage">\n    <nui-legend-basic-example></nui-legend-basic-example>\n</nui-example-wrapper>\n\n<h2>Rich Tile</h2>\n<p>To create a more information-rich legend, perform the following steps:</p>\n<ol>\n    <li>Place a <code>nui-legend</code> in the template.</li>\n    <li>\n        Put one or more\n        <code\n            ><a href="../components/LegendSeriesComponent.html" target="_blank"\n                >nui-legend-series</a\n            ></code\n        >\n        elements inside the <code>nui-legend</code> element.\n    </li>\n    <li>\n        Use\n        <code\n            ><a\n                href="../components/LegendSeriesComponent.html#descriptionPrimary"\n                target="_blank"\n                >descriptionPrimary</a\n            ></code\n        >\n        input to set the primary description for the series.\n    </li>\n    <li>\n        Use the <code>descriptionSecondary</code> input of\n        <code>nui-legend-series</code> to set a secondary description.\n    </li>\n    <li>\n        Place a\n        <code\n            ><a\n                href="../components/RichLegendTileComponent.html"\n                target="_blank"\n                >nui-rich-legend-tile</a\n            ></code\n        >, instead of a <code>nui-basic-legend-tile</code>, inside the\n        <code>nui-legend-series</code>.\n    </li>\n    <li>\n        Use the <code>value</code> input of <code>nui-rich-legend-tile</code> to\n        set the series value.\n    </li>\n    <li>\n        Use the <code>seriesUnitLabel</code> input of <code>nui-legend</code> to\n        set same labels for all series, or set the <code>unitLabel</code> input\n        on the <code>nui-rich-legend-tile</code> to specify the label on each\n        series separately.\n    </li>\n</ol>\n<p>\n    To add markers to the <code>nui-rich-legend-tile</code>, use the same\n    approach as for <code>nui-basic-legend-tile</code> except you\'ll also need\n    to add the <code>rightEdge</code> attribute to the\n    <code>nui-chart-marker</code> element so that the marker appears on the\n    right edge of the tile. If you want something such as an icon placed on the\n    left edge of the tile, you can use the <code>leftEdge</code> attribute.\n</p>\n<p>\n    To add colors to the <code>nui-rich-legend-tile</code>, pass a color value\n    to the <code>backgroundColor</code> input. Optionally, you can set the\n    <code>seriesColor</code> input on the <code>nui-legend</code> component to\n    specify a default background color for all tiles.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="legend-rich-tile"\n    exampleTitle="Applying Value and Unit Label Via Input"\n>\n    <nui-legend-rich-tile-example></nui-legend-rich-tile-example>\n</nui-example-wrapper>\n<h3>Rich Tile Content Projection</h3>\n<p>\n    Instead of the value and unitLabel inputs, you can optionally use content\n    projection to populate the tile by providing elements inside the\n    <code>nui-rich-legend-tile</code> with <code>top</code> and/or\n    <code>bottom</code> attributes indicating the desired positions of the\n    projected elements. The following example manually styles the value and unit\n    label projections with the same css styling as that provided automatically\n    by the value and unitLabel inputs, but you can also set the styling\n    differently based on your requirements. See the example\'s html and less\n    source files for how this can be done.\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> For <code>text-overflow: ellipsis</code> to work on\n    projected tile content, you need to set the max-width on the content to\n    either a fixed value or 100%.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="legend-rich-tile-content-projection"\n    exampleTitle="Applying Value and Unit Label Via Content Projection"\n>\n    <nui-legend-rich-tile-content-projection-example></nui-legend-rich-tile-content-projection-example>\n</nui-example-wrapper>\n\n<h2>Text Color</h2>\n<p>\n    Set the <code>color</code> input on the\n    <code>nui-rich-legend-tile</code> component to specify tilebox text color.\n</p>\n<nui-example-wrapper\n    filenamePrefix="legend-text-color"\n    exampleTitle="Text Color"\n>\n    <nui-legend-text-color-example></nui-legend-text-color-example>\n</nui-example-wrapper>\n\n<h2>Horizontal</h2>\n<p>\n    Set the <code>orientation</code> input on the\n    <code>nui-legend</code> component to "horizontal" to display legend series\n    horizontally.\n</p>\n<nui-example-wrapper\n    filenamePrefix="legend-horizontal"\n    exampleTitle="Horizontal"\n>\n    <nui-legend-horizontal-example></nui-legend-horizontal-example>\n</nui-example-wrapper>\n\n<h2>Compact Mode</h2>\n<p>\n    To implement a rich tile legend in compact mode simply omit passing\n    <code>descriptionPrimary</code> and <code>descriptionSecondary</code> into\n    the <code>nui-legend-series</code>.\n</p>\n<nui-example-wrapper\n    filenamePrefix="legend-compact"\n    exampleTitle="Compact Mode"\n>\n    <nui-legend-compact-example></nui-legend-compact-example>\n</nui-example-wrapper>\n\n<h2>Active State</h2>\n<p>\n    Set the <code>active</code> input on the <code>nui-legend</code> component\n    to <code>true</code> to set the legend state to active.\n</p>\n<nui-example-wrapper filenamePrefix="legend-active" exampleTitle="Active State">\n    <nui-legend-active-example></nui-legend-active-example>\n</nui-example-wrapper>\n\n<h2>Interactive Mode</h2>\n<p>\n    Set <code>interactive</code> input on the <code>nui-legend</code> component\n    to <code>true</code> to enable legend interactive mode. For interactive mode\n    to work fully, create a chart assist in your component typescript file:\n</p>\n<pre>\npublic chartAssist: ChartAssist = new ChartAssist(new Chart(new XYGrid()));</pre\n>\n<p>Add the following binding to <code>nui-legend</code>:</p>\n<pre>\n&lt;nui-legend (mouseleave)="chartAssist.resetVisibleSeries()"&gt;&lt;/nui-legend&gt;</pre\n>\n<p>Add following bindings to <code>nui-legend-series</code>:</p>\n<pre>{{ legendHtml }}</pre>\n<nui-example-wrapper\n    filenamePrefix="legend-interactive"\n    exampleTitle="Interactive Mode"\n>\n    <nui-legend-interactive-example></nui-legend-interactive-example>\n</nui-example-wrapper>\n<h2>Description Content Projection</h2>\n<p>\n    To provide a custom layout for the series description you can place an\n    element with the <code>description</code> attribute inside the\n    <code>nui-legend-series</code> and provide your custom layout inside that\n    element.\n</p>\n<nui-example-wrapper\n    filenamePrefix="legend-description-projection"\n    exampleTitle="Description Content Projection"\n>\n    <nui-legend-description-projection-example></nui-legend-description-projection-example>\n</nui-example-wrapper>\n\n<h2>Metadata Series</h2>\n<p>\n    To set up a series that\'s only displayed on the legend and not on the chart,\n    take a look at the code in the source expander of the example below.\n</p>\n<nui-example-wrapper\n    filenamePrefix="legend-metadata"\n    exampleTitle="Metadata Series"\n>\n    <nui-legend-metadata-example></nui-legend-metadata-example>\n</nui-example-wrapper>\n'},20080:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-legend-docs-example",\n    templateUrl: "./legend-docs.example.component.html",\n})\nexport class LegendDocsExampleComponent {\n    public legendHtml = `<nui-legend-series (mouseenter)="chartAssist.emphasizeSeries(seriesId)"\n       [seriesRenderState]="chartAssist.renderStatesIndex[seriesId]?.state"\n       [isSelected]="!chartAssist.isSeriesHidden(seriesId)"\n       (isSelectedChange)="chartAssist.toggleSeries(seriesId, $event)">\n</nui-legend-series>`;\n}\n'},18184:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend orientation="horizontal">\n    <nui-legend-series\n        descriptionPrimary="Primary Description 1"\n        i18n-descriptionPrimary\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 2"\n        i18n-descriptionPrimary\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},98199:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-horizontal-example",\n    templateUrl: "./legend-horizontal.example.component.html",\n})\nexport class LegendHorizontalExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},95558:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend\n    [interactive]="true"\n    (mouseleave)="chartAssist.resetVisibleSeries()"\n>\n    <nui-legend-series\n        descriptionPrimary="Basic Tile Primary Description"\n        i18n-descriptionPrimary\n        (mouseenter)="chartAssist.emphasizeSeries(firstSeriesId)"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[firstSeriesId]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(firstSeriesId)"\n        (isSelectedChange)="chartAssist.toggleSeries(firstSeriesId, $event)"\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="chartAssist.markers.get(firstSeriesId)"\n                [color]="chartAssist.palette.standardColors.get(firstSeriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Rich Tile Primary Description"\n        i18n-descriptionPrimary\n        descriptionSecondary="Rich Tile Secondary Description"\n        i18n-descriptionSecondary\n        (mouseenter)="chartAssist.emphasizeSeries(secondSeriesId)"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[secondSeriesId]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(secondSeriesId)"\n        (isSelectedChange)="chartAssist.toggleSeries(secondSeriesId, $event)"\n    >\n        <nui-rich-legend-tile\n            value="23.2"\n            unitLabel="Kbps"\n            i18n-unitLabel\n            [backgroundColor]="\n                chartAssist.palette.standardColors.get(secondSeriesId)\n            "\n        >\n            <nui-chart-marker\n                [marker]="chartAssist.markers.get(secondSeriesId)"\n                [color]="chartAssist.palette.standardColors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},38951:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    LineAccessors,\n    LineRenderer,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-interactive-example",\n    templateUrl: "./legend-interactive.example.component.html",\n})\nexport class LegendInteractiveExampleComponent implements OnInit {\n    // Set up the chart assist to keep track of the series selection and emphasis states\n    public chartAssist: ChartAssist = new ChartAssist(new Chart(new XYGrid()));\n\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        this.chartAssist.update([\n            {\n                id: this.firstSeriesId,\n                data: [],\n                accessors,\n                renderer,\n                scales: {},\n            },\n            {\n                id: this.secondSeriesId,\n                data: [],\n                accessors,\n                renderer,\n                scales: {},\n            },\n        ]);\n    }\n}\n'},98893:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="Mbps"\n            i18n-seriesUnitLabel\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            \x3c!-- This is the metadata series --\x3e\n            <nui-legend-series\n                [interactive]="false"\n                [descriptionPrimary]="avgSeries[\'name\']"\n                (mouseenter)="chartAssist.resetVisibleSeries()"\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(avgSeries, \'y\')"\n                    backgroundColor="var(--nui-color-brand-six)"\n                    color="var(--nui-color-text-light)"\n                >\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n            \x3c!-- These are the series displayed on the chart --\x3e\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                \x3c!-- Specify \'undefined\' for the formatter key since we\'re not applying any special formatting to the data values shown in the legend --\x3e\n                \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n                <nui-rich-legend-tile\n                    [value]="\n                        chartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\',\n                            undefined,\n                            \'y1\'\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},9602:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAccessors,\n    IAreaAccessors,\n    IChartSeries,\n    IDataSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    stackedAreaAccessors,\n    TimeScale,\n    XYAccessors,\n    XYRenderer,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-metadata-example",\n    templateUrl: "./legend-metadata-example.component.html",\n})\nexport class LegendMetadataExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n    public avgSeries: IChartSeries<XYAccessors>;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series\' numeric values on the same progression domain\n        this.chartAssist = new ChartAssist(this.chart, stackedArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = stackedAreaAccessors();\n        // \'y1\' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named \'value\',so we\'ll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        const dataSeries = getData();\n        const averageData = calculateAverageSeries(dataSeries);\n        // We are using the base XYRenderer so the metadata does not get displayed on the chart.\n        // Set `ignoreForDomainCalculation` to true to prevent the metadata from affecting the domain.\n        const metaDataRenderer = new XYRenderer({\n            ignoreForDomainCalculation: true,\n        });\n        // Here we create an accessor for our average metadata\n        const avgAccessors = new XYAccessors();\n        // This is so the legend knows the value for the y\n        avgAccessors.data.y = (d) => d.value;\n\n        this.avgSeries = {\n            ...averageData,\n            accessors: avgAccessors,\n            renderer: metaDataRenderer,\n            scales: scales,\n            // showInLegend is false because we manually add our own series\n            showInLegend: false,\n            // preprocess is false to let the area processor know it is already formatted properly\n            preprocess: false,\n        } as IChartSeries<XYAccessors>;\n\n        // Here we assemble the complete chart series.\n        let seriesSet: Partial<IChartSeries<IAccessors>>[] = dataSeries.map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Combining both sets in an array of series\n        seriesSet = [...seriesSet, this.avgSeries];\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet as IChartSeries<IAreaAccessors>[]);\n    }\n}\n\nfunction calculateAverageSeries(\n    seriesSet: Partial<IDataSeries<XYAccessors>>[]\n): Partial<IDataSeries<XYAccessors>> {\n    const averageSeries: Partial<IDataSeries<XYAccessors>> = {\n        id: "average",\n        name: "Average Speed",\n        data: [],\n    };\n\n    const numSeries = seriesSet.length;\n    if (numSeries === 0) {\n        return averageSeries;\n    }\n\n    const data: any[] = [];\n    const dataLength = seriesSet[0].data?.length ?? 0;\n    for (let n = 0; n < dataLength; n++) {\n        let avg = 0;\n        for (let i = 0; i < numSeries; i++) {\n            const series = seriesSet[i];\n            avg += series?.data?.[n].value ?? 0;\n        }\n        avg = avg / numSeries;\n        data.push({ x: seriesSet[0].data?.[n].x, value: avg });\n    }\n\n    return { ...averageSeries, data };\n}\n\n/* Chart data */\nfunction getData(): Partial<IDataSeries<XYAccessors>>[] {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 6 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 33 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 15 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 20 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 30 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T14:20:29.909Z", format), value: 6 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 35 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 38 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 43 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 28 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 65 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 30 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 40 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 60 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T14:20:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 70 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 45 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 75 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 85 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 55 },\n            ],\n        },\n    ];\n}\n'},87264:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend [seriesColor]="colors.get(firstSeriesId)">\n    <nui-legend-series\n        descriptionPrimary="Primary Description 1"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 1"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile>\n            <div class="projected-value" top>15.5</div>\n            <div class="projected-unit-label" bottom i18n>Kbps</div>\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 2"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 2"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile [backgroundColor]="colors.get(secondSeriesId)">\n            <div class="projected-value" top>20.8</div>\n            <div class="projected-unit-label" bottom i18n>Kbps</div>\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},76553:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import (reference) "../src/nui-charts";\n\n.projected-value,\n.projected-unit-label {\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.projected-value {\n    font-weight: @nui-font-weight-semibold;\n    margin-bottom: -@nui-legend-series-content-margin;\n}\n\n.projected-unit-label {\n    font-size: @nui-font-size-small;\n    margin-top: -@nui-legend-series-content-margin;\n}\n'},79478:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-rich-tile-content-projection-example",\n    templateUrl: "legend-rich-tile-content-projection.example.component.html",\n    styleUrls: ["legend-rich-tile-content-projection.example.component.less"],\n})\nexport class LegendRichTileContentProjectionExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},74282:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend\n    seriesUnitLabel="Mbps"\n    i18n-seriesUnitLabel\n    [seriesColor]="colors.get(firstSeriesId)"\n>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 1"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 1"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile value="15.5">\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 2"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 2"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile\n            value="20.8"\n            [backgroundColor]="colors.get(secondSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},98806:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-rich-tile-example",\n    templateUrl: "./legend-rich-tile.example.component.html",\n})\nexport class LegendRichTileExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},46560:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h3>Basic Legend</h3>\n<nui-legend id="basic-tile-legend-default-state">\n    <nui-legend-series\n        *ngFor="let legendSeries of seriesData"\n        [descriptionPrimary]="legendSeries.descriptionPrimary"\n        [descriptionSecondary]="legendSeries.descriptionSecondary"\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(legendSeries.seriesId)"\n                [color]="palette.standardColors.get(legendSeries.seriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Basic Interactive Legend</h3>\n<nui-legend\n    id="basic-tile-legend-interactive-state"\n    [interactive]="true"\n    (mouseleave)="chartAssist.resetVisibleSeries()"\n>\n    <nui-legend-series\n        *ngFor="let legendSeries of seriesData"\n        [descriptionPrimary]="legendSeries.descriptionPrimary"\n        [descriptionSecondary]="legendSeries.descriptionSecondary"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[legendSeries.seriesId]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(legendSeries.seriesId)"\n        (isSelectedChange)="\n            chartAssist.toggleSeries(legendSeries.seriesId, $event)\n        "\n        (mouseenter)="chartAssist.emphasizeSeries(legendSeries.seriesId)"\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(legendSeries.seriesId)"\n                [color]="palette.standardColors.get(legendSeries.seriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Legend with Horizontal Orientation</h3>\n<nui-legend orientation="horizontal">\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend</h3>\n<nui-legend id="rich-tile-legend-default-state">\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n        [descriptionSecondary]="data.descriptionSecondary"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend with Projected Description, Value, and Unit Label</h3>\n<nui-legend id="rich-tile-legend-with-projected-description-default-state">\n    <nui-legend-series *ngFor="let data of seriesData">\n        <nui-rich-legend-tile\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <div value>{{ data.value }}</div>\n            <div unitLabel>{{ data.unitLabel }}</div>\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n        <div description>\n            <div>{{ data.descriptionPrimary }}</div>\n            <div>{{ data.descriptionSecondary }}</div>\n        </div>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Compact Mode</h3>\n<nui-legend class="rich-tile-legend-compact-mode-test">\n    <nui-legend-series *ngFor="let data of seriesData">\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Active State</h3>\n<nui-legend class="rich-tile-legend-active-state-test" [active]="true">\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n        [descriptionSecondary]="data.descriptionSecondary"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Active State with Horizontal Orientation</h3>\n<nui-legend\n    class="rich-tile-horizontal-legend-active-state-test"\n    [active]="true"\n    orientation="horizontal"\n>\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n        [descriptionSecondary]="data.descriptionSecondary"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Compact Mode Active State</h3>\n<nui-legend\n    class="rich-tile-legend-compact-mode-active-state-test"\n    [active]="true"\n>\n    <nui-legend-series *ngFor="let data of seriesData">\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Compact Mode Active State with Horizontal Orientation</h3>\n<nui-legend\n    class="rich-tile-horizontal-legend-compact-mode-active-state-test"\n    [active]="true"\n    orientation="horizontal"\n>\n    <nui-legend-series *ngFor="let data of seriesData">\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Interactive Mode with Icons</h3>\n<nui-legend\n    id="rich-tile-interactive-legend-test"\n    [interactive]="true"\n    (mouseleave)="chartAssist.resetVisibleSeries()"\n>\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n        [descriptionSecondary]="data.descriptionSecondary"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[data.seriesId]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(data.seriesId)"\n        (isSelectedChange)="chartAssist.toggleSeries(data.seriesId, $event)"\n        (mouseenter)="chartAssist.emphasizeSeries(data.seriesId)"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-icon\n                iconSize="small"\n                [icon]="\'status_\' + data.status"\n                leftEdge\n            ></nui-icon>\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Compact Interactive Mode</h3>\n<nui-legend\n    class="rich-tile-compact-interactive-legend-test"\n    [interactive]="true"\n    (mouseleave)="chartAssist.resetVisibleSeries()"\n>\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[data.seriesId]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(data.seriesId)"\n        (isSelectedChange)="chartAssist.toggleSeries(data.seriesId, $event)"\n        (mouseenter)="chartAssist.emphasizeSeries(data.seriesId)"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n\n<h3>Rich Tile Legend Interactive Mode Active State</h3>\n<nui-legend\n    class="rich-tile-interactive-legend-active-state-test"\n    [active]="true"\n    [interactive]="true"\n>\n    <nui-legend-series\n        *ngFor="let data of seriesData"\n        [descriptionPrimary]="data.descriptionPrimary"\n        [descriptionSecondary]="data.descriptionSecondary"\n    >\n        <nui-rich-legend-tile\n            [value]="data.value"\n            [unitLabel]="data.unitLabel"\n            [backgroundColor]="palette.standardColors.get(data.seriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(data.seriesId)"\n                [color]="palette.standardColors.get(data.seriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},99234:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    IChartMarker,\n    IChartPalette,\n    IValueProvider,\n    LineAccessors,\n    LineRenderer,\n    SequentialChartMarkerProvider,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-test",\n    templateUrl: "./legend-test.component.html",\n})\nexport class LegendTestExampleComponent {\n    public palette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1);\n    public markers: IValueProvider<IChartMarker> =\n        new SequentialChartMarkerProvider(CHART_MARKERS);\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public seriesData = [\n        {\n            seriesId: "1",\n            value: 15.5,\n            unitLabel: "Kbps",\n            descriptionPrimary: "Primary Description 1",\n            descriptionSecondary: "Secondary Description 1",\n            status: "critical",\n        },\n        {\n            seriesId: "2",\n            value: 20.8,\n            unitLabel: "%",\n            descriptionPrimary: "Primary Description 2",\n            descriptionSecondary: "Secondary Description 2",\n            status: "warning",\n        },\n    ];\n\n    constructor() {\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        this.chartAssist.update(\n            this.seriesData.map((series) => ({\n                id: series.seriesId,\n                data: [series.value],\n                accessors,\n                renderer,\n                scales: {},\n            }))\n        );\n    }\n}\n'},60903:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-legend>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 1"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 1"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile\n            value="15.5"\n            unitLabel="Kbps"\n            i18n-unitLabel\n            color="white"\n            [backgroundColor]="colors.get(firstSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(firstSeriesId)"\n                [color]="colors.get(firstSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n    <nui-legend-series\n        descriptionPrimary="Primary Description 2"\n        i18n-descriptionPrimary\n        descriptionSecondary="Secondary Description 2"\n        i18n-descriptionSecondary\n    >\n        <nui-rich-legend-tile\n            value="20.8"\n            unitLabel="%"\n            i18n-unitLabel\n            color="white"\n            [backgroundColor]="colors.get(secondSeriesId)"\n        >\n            <nui-chart-marker\n                [marker]="markers.get(secondSeriesId)"\n                [color]="colors.get(secondSeriesId)"\n                rightEdge\n            ></nui-chart-marker>\n        </nui-rich-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},53638:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-text-color-example",\n    templateUrl: "./legend-text-color.example.component.html",\n})\nexport class LegendTextColorExampleComponent {\n    public firstSeriesId = "1";\n    public secondSeriesId = "2";\n\n    public colors = new SequentialColorProvider(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n}\n'},83851:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<charts-test-harness>\n    <div class="row">\n        <div class="col-md-3">\n            <h4>Legend in Default State with Rich Tile</h4>\n            <nui-legend class="rich-tile-legend-default-state">\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                    [descriptionSecondary]="data.descriptionSecondary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Legend in Active State with Rich Tile</h4>\n            <nui-legend class="rich-tile-legend-active-state" [active]="true">\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                    [descriptionSecondary]="data.descriptionSecondary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Legend in Active State with Rich Tile and Horizontal Orientation\n            </h4>\n            <nui-legend\n                class="rich-tile-horizontal-legend-active-state"\n                [active]="true"\n                orientation="horizontal"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                    [descriptionSecondary]="data.descriptionSecondary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Legend Interactive Mode in Default State with Rich Tile</h4>\n            <nui-legend\n                class="rich-tile-interactive-legend-default-state"\n                [interactive]="true"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                    [descriptionSecondary]="data.descriptionSecondary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Legend Interactive Mode in Active State with Rich Tile</h4>\n            <nui-legend\n                class="rich-tile-interactive-legend-active-state"\n                [active]="true"\n                [interactive]="true"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                    [descriptionSecondary]="data.descriptionSecondary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Legend Series Render States</h4>\n            <nui-legend\n                class="legend-series-render-states"\n                [interactive]="true"\n            >\n                <nui-legend-series\n                    descriptionPrimary="unselected/hidden"\n                    descriptionSecondary="unselected/hidden"\n                    seriesRenderState="hidden"\n                    [isSelected]="false"\n                >\n                    <nui-rich-legend-tile\n                        value="0"\n                        unitLabel="Mbps"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n                <nui-legend-series\n                    *ngFor="let renderState of renderStates"\n                    [descriptionPrimary]="renderState"\n                    [descriptionSecondary]="renderState"\n                    [seriesRenderState]="renderState"\n                >\n                    <nui-rich-legend-tile\n                        value="0"\n                        unitLabel="Mbps"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4 class="text-style-roboto">Testing Roboto Font</h4>\n        </div>\n        <div class="col-md-3">\n            <h4>Rich Tile Legend Compact Mode</h4>\n            <nui-legend class="rich-tile-legend-compact-mode-test">\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Rich Tile Legend Compact Mode Active State</h4>\n            <nui-legend\n                class="rich-tile-legend-compact-mode-active-state-test"\n                [active]="true"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Rich Tile Legend Compact Mode Active State with Horizontal\n                Orientation\n            </h4>\n            <nui-legend\n                class="rich-tile-horizontal-legend-compact-mode-active-state-test"\n                [active]="true"\n                orientation="horizontal"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Rich Tile Legend Compact Interactive Mode</h4>\n            <nui-legend\n                class="rich-tile-compact-interactive-legend-test"\n                [interactive]="true"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Rich Tile Legend Compact Mode with Markers in Active State</h4>\n            <nui-legend\n                class="rich-tile-compact-interactive-legend-active-state"\n                [active]="true"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [unitLabel]="data.unitLabel"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    >\n                        <nui-chart-marker\n                            [marker]="markers.get(data.seriesId)"\n                            [color]="tileBackgroundColor"\n                            rightEdge\n                        ></nui-chart-marker>\n                    </nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Rich Tile Legend with Chart Markers, Icons, and Projected\n                Content\n            </h4>\n            <nui-legend>\n                <nui-legend-series>\n                    <nui-rich-legend-tile\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    >\n                        <div top>15.5</div>\n                        <nui-icon\n                            iconSize="small"\n                            icon="status_up"\n                            leftEdge\n                        ></nui-icon>\n                        <nui-chart-marker\n                            [marker]="markers.get(\'1\')"\n                            [color]="tileBackgroundColor"\n                            rightEdge\n                        ></nui-chart-marker>\n                    </nui-rich-legend-tile>\n                    <div description>\n                        <div>Primary Description 1</div>\n                    </div>\n                </nui-legend-series>\n                <nui-legend-series>\n                    <nui-rich-legend-tile\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    >\n                        <div top>9999k</div>\n                        <div bottom>%</div>\n                        <nui-icon\n                            iconSize="small"\n                            icon="status_warning"\n                            leftEdge\n                        ></nui-icon>\n                        <nui-chart-marker\n                            [marker]="markers.get(\'2\')"\n                            [color]="tileBackgroundColor"\n                            rightEdge\n                        ></nui-chart-marker>\n                    </nui-rich-legend-tile>\n                    <div description>\n                        <div>Primary Description 2</div>\n                        <div>Secondary Description 2</div>\n                    </div>\n                </nui-legend-series>\n                <nui-legend-series>\n                    <nui-rich-legend-tile\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    >\n                        <div top>15.5</div>\n                        <div bottom>Kbps</div>\n                        <nui-icon\n                            iconSize="small"\n                            icon="status_critical"\n                            leftEdge\n                        ></nui-icon>\n                        <nui-chart-marker\n                            [marker]="markers.get(\'3\')"\n                            [color]="tileBackgroundColor"\n                            rightEdge\n                        ></nui-chart-marker>\n                    </nui-rich-legend-tile>\n                    <div description>\n                        <div>Primary Description 3</div>\n                        <div>Secondary Description 3</div>\n                        <div>Tertiary Description 3</div>\n                    </div>\n                </nui-legend-series>\n            </nui-legend>\n        </div>\n        <div class="col-md-3">\n            <h4>Rich Tile Legend Compact Mode No Label</h4>\n            <nui-legend class="rich-tile-legend-compact-mode-test">\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Rich Tile Legend Compact Mode Active State No Label</h4>\n            <nui-legend\n                class="rich-tile-legend-compact-mode-active-state-test"\n                [active]="true"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Rich Tile Legend Compact Mode Active State with Horizontal\n                Orientation No Label\n            </h4>\n            <nui-legend\n                class="rich-tile-horizontal-legend-compact-mode-active-state-test"\n                [active]="true"\n                orientation="horizontal"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Rich Tile Legend Compact Interactive Mode No Label</h4>\n            <nui-legend\n                class="rich-tile-compact-interactive-legend-test"\n                [interactive]="true"\n            >\n                <nui-legend-series *ngFor="let data of seriesData">\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n            <h4>Legend in Default State with Rich Tile No Label</h4>\n            <nui-legend class="rich-tile-legend-default-state">\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>Legend in Active State with Rich Tile No Label</h4>\n            <nui-legend class="rich-tile-legend-active-state" [active]="true">\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Legend in Active State with Rich Tile and Horizontal Orientation\n                No Label\n            </h4>\n            <nui-legend\n                class="rich-tile-horizontal-legend-active-state"\n                [active]="true"\n                orientation="horizontal"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Legend Interactive Mode in Default State with Rich Tile No Label\n            </h4>\n            <nui-legend\n                class="rich-tile-interactive-legend-default-state"\n                [interactive]="true"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n\n            <h4>\n                Legend Interactive Mode in Active State with Rich Tile No Label\n            </h4>\n            <nui-legend\n                class="rich-tile-interactive-legend-active-state"\n                [active]="true"\n                [interactive]="true"\n            >\n                <nui-legend-series\n                    *ngFor="let data of seriesData"\n                    [descriptionPrimary]="data.descriptionPrimary"\n                >\n                    <nui-rich-legend-tile\n                        [value]="data.value"\n                        [backgroundColor]="tileBackgroundColor"\n                        [color]="tileColor"\n                    ></nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n        </div>\n    </div>\n</charts-test-harness>\n'},37342:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/mixins/font-roboto.less";\n\n.font-roboto();\n\n.text-style-roboto {\n    font-family: @font-family-roboto;\n}\n'},99664:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    CHART_MARKERS,\n    IChartMarker,\n    IValueProvider,\n    RenderState,\n    SequentialChartMarkerProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-legend-visual-test",\n    templateUrl: "./legend-visual-test.component.html",\n    styleUrls: ["legend-visual-test.component.less"],\n})\nexport class LegendVisualTestComponent {\n    public markers: IValueProvider<IChartMarker> =\n        new SequentialChartMarkerProvider(CHART_MARKERS);\n\n    public seriesData = [\n        {\n            seriesId: "1",\n            value: 15.5,\n            unitLabel: "Kbps",\n            descriptionPrimary: "Primary Description 1",\n            descriptionSecondary: "Secondary Description 1",\n        },\n        {\n            seriesId: "2",\n            value: "9999k",\n            unitLabel: "%",\n            descriptionPrimary: "Primary Description 2",\n            descriptionSecondary: "Secondary Description 2",\n        },\n    ];\n\n    public tileBackgroundColor = "#1f77b4";\n    public tileColor = "white";\n\n    public renderStates = Object.keys(RenderState);\n}\n'},12668:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Scales</h1>\n\n<h4>Subtopics</h4>\n<ol>\n    <li>\n        <a\n            href="../additional-documentation/advanced-usage/scales/domains.html"\n            target="_parent"\n            >Domains</a\n        >\n    </li>\n    <li>\n        <a\n            href="../additional-documentation/advanced-usage/scales/formatters.html"\n            target="_parent"\n            >Formatters</a\n        >\n    </li>\n</ol>\n\n<h1>Overview</h1>\n<p>\n    <code><a href="../classes/Scale.html" target="_blank">Scale</a></code> is\n    the abstract projection of your domain specific data value boundaries to\n    screen pixel range. Generally speaking, it lets you to convert any data\n    value into pixel based coordinates on the screen and vice versa. Because of\n    that scales are extremely handy when you build your own\n    <a\n        href="../additional-documentation/advanced-usage/renderers.html"\n        target="_parent"\n        >Renderer</a\n    >. Nova scale is an extended version of\n    <a href="https://github.com/d3/d3-scale#d3-scale" target="_blank"\n        >D3 Scale</a\n    >.\n</p>\n<p>\n    And, they are also used for tick generation and tick label formatting. But,\n    in addition to formatting for tick labels, a scale can have the whole set of\n    <a\n        href="../additional-documentation/advanced-usage/scales/formatters.html"\n        target="_parent"\n        >Formatters</a\n    >\n    to be used for various purposes.\n</p>\n\n<h2>Principles</h2>\n<p>\n    Every scale is defined by its <strong>domain</strong> and\n    <strong>range</strong>. The range will be set by the chart itself and will\n    represent the amount of screen space that is available for rendering.\n    Meanwhile, the domain is controlled by a data provider (it\'s you) and allows\n    for plenty of possibilities. Some of those possiblities are described on the\n    dedicated\n    <a\n        href="../additional-documentation/advanced-usage/scales/domains.html"\n        target="_parent"\n        >Domains</a\n    >\n    page.\n</p>\n\n<h2>Usage</h2>\n<p>\n    As a user of the chart framework you will usually need to provide a couple\n    of scales with your\n    <code\n        ><a href="../interfaces/IChartSeries.html" target="_blank"\n            >IChartSeries</a\n        ></code\n    >. Don\'t know how to do it? You may find it helpful to start with the\n    <a\n        href="../additional-documentation/advanced-usage/basics.html"\n        target="_parent"\n        >Chart Basics</a\n    >\n    page first.\n</p>\n<p>\n    But, if you\'re ready to create a scale, just instantiate any class that\n    implements the\n    <code><a href="../interfaces/IScale.html" target="_blank">IScale</a></code>\n    interface. Let\'s use\n    <code\n        ><a href="../classes/LinearScale.html" target="_blank"\n            >LinearScale</a\n        ></code\n    >\n    as an example:\n</p>\n<pre>{{ scaleDefinition }}</pre>\n\n<h2>Scale ID</h2>\n<p>\n    Scales are reusable and can be shared between multiple charts. Scales are\n    identified by the value of their\n    <code>id</code> field. It can be passed as a parameter on scale\n    instantiation, otherwise it will be autogenerated.\n</p>\n<pre>{{ scaleWithId }}</pre>\n'},76738:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-scales",\n    templateUrl: "./chart-docs-scales.component.html",\n})\nexport class ChartDocsScalesComponent {\n    scaleDefinition = `const xScale = new LinearScale();\n...`;\n\n    scaleWithId = `const yScale = new LinearScale("percentile");\n...`;\n}\n'},75476:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, SrlcStage } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { ChartDocsScalesComponent } from "./chart-docs-scales.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsScalesComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n        },\n    },\n    {\n        path: "domains",\n        loadChildren: async () =>\n            import("./domains/chart-docs-domains.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "formatters",\n        loadChildren: async () =>\n            import(\n                "./formatters/chart-docs-formatters.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    declarations: [ChartDocsScalesComponent],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsScalesModule {}\n'},28421:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Domains</h1>\n\n<p>A domain on a scale represents the breadth of visualized data.</p>\n<p>\n    For continuous data, the scale is represented using two values, which define\n    the interval.\n</p>\n<pre>{{ continuousDomain }}</pre>\n<p>\n    An ordinal scale, on the other hand, which is used for data divided into\n    categories represents its domain as a list of discrete values.\n</p>\n<pre>{{ ordinalDomain }}</pre>\n<h2>Domain Calculation</h2>\n<p>\n    By default, scale domain calculation is done automatically based on the\n    accompanying series data. However, domains can also be configured as fixed\n    at two domain endpoints.\n</p>\n\n<h3>Fixed Domain</h3>\n<p>\n    Fixed domains are user-defined domains for scales that are not intended to\n    be updated internally by the chart. Examples of those could be:\n</p>\n<ul>\n    <li>\n        - Time scale on a time series chart where we want to be in control of\n        the displayed time range, which is very often a subset of all data\n        provided\n    </li>\n    <li>\n        - Percentage scale representing a fixed range of\n        <code>&lt;0%, 100%&gt;</code>\n    </li>\n    <li>- Ordinal scales such as those for bar chart categories</li>\n</ul>\n<p>\n    A domain can be set to fixed using the\n    <code\n        ><a href="../classes/Scale.html#fixDomain" target="_blank"\n            >fixDomain</a\n        ></code\n    >\n    method.\n</p>\n<pre>{{ fixedDomainShorthand }}</pre>\n<p>\n    If a domain is fixed, it\'s domain calculation behavior is ignored, but by\n    switching\n    <code>isDomainFixed</code> back and forth, you can switch between automatic\n    and fixed domain.\n</p>\n<pre>{{ disablingFixedDomain }}</pre>\n<nui-example-wrapper\n    filenamePrefix="fixed-domains"\n    exampleTitle="Fixed Domains"\n>\n    <nui-chart-fixed-domains-example></nui-chart-fixed-domains-example>\n</nui-example-wrapper>\n<nui-message type="info" [allowDismiss]="false">\n    <strong>Note:</strong> The example above initially uses an automatic domain\n    to determine the dimensions of the visualized data. When one of the Fix\n    Domain buttons is clicked, the target domain is recalculated using a set of\n    specified domain endpoints.\n</nui-message>\n<p>\n    An alternate way to fix a domain is to set the domain values directly and\n    configure the domain as fixed:\n</p>\n<pre>{{ fixedDomainExplicit }}</pre>\n\n<h3>Automatic Domain</h3>\n<p>\n    Scale domains for a chart series are automatically calculated using the\n    chart series data and are updated on every chart update. The default\n    behavior is to calculate the domain from the range of values that is\n    currently visible on the chart. This is implemented in the\n    <a\n        href="../../../miscellaneous/variables.html#getAutomaticDomain"\n        target="_blank"\n        >getAutomaticDomain</a\n    >\n    function, which is the default value of a scale\'s\n    <a href="../../../interfaces/IScale.html#domainCalculator" target="_blank"\n        >domainCalculator</a\n    >\n    property.\n</p>\n<h4>Setting an Included Interval</h4>\n<p>\n    In addition to the default automatic domain calculation, it\'s possible to\n    set a min/max interval that is guaranteed to be included in the calculated\n    domain. To set a min/max domain interval, assign the\n    <code\n        ><a\n            href="../../../miscellaneous/variables.html#getAutomaticDomainWithIncludedInterval"\n            target="_blank"\n            >getAutomaticDomainWithIncludedInterval</a\n        ></code\n    >\n    function result to the scale\'s\n    <a href="../../../interfaces/IScale.html#domainCalculator" target="_blank"\n        ><code>domainCalculator</code></a\n    >\n    property:\n</p>\n<pre>{{ automaticDomainWithIncludedInterval }}</pre>\n<h4>A Fixed Domain Scale May Affect a Related Scale\'s Automatic Domain</h4>\n<p>\n    A concept worth mentioning is that the automatic domain calculation for a\n    scale may be affected by the fixed domain of another related scale. What may\n    happen is the data set of a y-axis scale with an automatic domain, is\n    truncated by the data on the x-axis scale by virtue of the opposing x\n    scale\'s fixed domain. In this case, only the data within the y scale\'s\n    truncated data set is considered when calculating its domain. In other\n    words, if you have an automatic-domain y scale and a fixed-domain time\n    series x scale, only data on the y scale that is within the fixed time\n    window on the x is considered for y domain calculation.\n</p>\n\n<hr />\n<nui-message type="info" [allowDismiss]="false">\n    For more information on domains, check out the\n    <a href="https://github.com/d3/d3-scale" target="_blank"\n        >D3 scales documentation</a\n    >.\n</nui-message>\n'},16378:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-domains",\n    templateUrl: "./chart-docs-domains.component.html",\n})\nexport class ChartDocsDomainsComponent {\n    public fixedDomainExplicit = `const bandScale = new BandScale();\nbandScale.domain(["John", "Paul", "George", "Ringo"]);\nbandScale.isDomainFixed = true;\n...`;\n\n    public continuousDomain = `[0, 100]`;\n    public ordinalDomain = `["John", "Paul", "George", "Ringo"]`;\n\n    public disablingFixedDomain = `scale.isDomainFixed = false;\n...`;\n\n    public fixedDomainShorthand = `const scale = new LinearScale();\nscale.fixDomain([0, 100]);\n...`;\n\n    public automaticDomainWithIncludedInterval = `this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 100]);\n...`;\n}\n'},45445:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { ChartDocsDomainsComponent } from "./chart-docs-domains.component";\nimport { FixedDomainsExampleComponent } from "./fixed-domains/fixed-domains.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsDomainsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n];\n\n@NgModule({\n    declarations: [ChartDocsDomainsComponent, FixedDomainsExampleComponent],\n    imports: [\n        NuiButtonModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("domains"),\n        },\n    ],\n})\nexport class ChartDocsDomainsModule {}\n'},4435:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n<hr />\n<div class="btn-group">\n    <button nui-button (click)="fixXDomain()" type="button">\n        Fix X Domain to [29-Dec, 4-Jan]\n    </button>\n    <button nui-button (click)="fixYDomain()" type="button">\n        Fix Y Domain to [0, 100]\n    </button>\n    <button nui-button (click)="resetDomains()" type="button">\n        Reset Domains\n    </button>\n</div>\n'},6884:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    IScale,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    Scales,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-fixed-domains-example",\n    templateUrl: "./fixed-domains.example.component.html",\n})\nexport class FixedDomainsExampleComponent implements OnInit {\n    public xScale: IScale<Date> = new TimeScale();\n    public yScale: IScale<number> = new LinearScale();\n\n    public chart: Chart;\n    private seriesSet: IChartSeries<ILineAccessors>[];\n    private format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    public ngOnInit(): void {\n        const scales: Scales = {\n            x: this.xScale,\n            y: this.yScale,\n        };\n\n        // Default domain calculator\n        // scales.y.domainCalculator = getAutomaticDomain;\n\n        const gridConfig = new XYGridConfig();\n        gridConfig.axis.bottom.fit = true;\n        this.chart = new Chart(new XYGrid(gridConfig));\n\n        this.seriesSet = getData(this.format).map((d) => ({\n            ...d,\n            scales,\n            accessors: new LineAccessors(),\n            renderer: new LineRenderer(),\n        }));\n\n        this.chart.update(this.seriesSet);\n        this.chart.updateDimensions();\n    }\n\n    public fixXDomain(): void {\n        const startDatetime = moment(\n            "2016-12-29T06:00:00.000Z",\n            this.format\n        ).toDate();\n        const endDatetime = moment(\n            "2017-01-04T06:00:00.000Z",\n            this.format\n        ).toDate();\n\n        this.xScale.fixDomain([startDatetime, endDatetime]);\n        this.chart.update(this.seriesSet);\n    }\n\n    public fixYDomain(): void {\n        this.yScale.fixDomain([0, 100]);\n        this.chart.update(this.seriesSet);\n    }\n\n    public resetDomains(): void {\n        this.xScale.isDomainFixed = false;\n        this.yScale.isDomainFixed = false;\n        this.chart.update(this.seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData(format: string) {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 45 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n    ];\n}\n'},90576:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Formatters</h1>\n\n<p>\n    Scale\n    <a href="../interfaces/IScale.html#formatters" target="_blank"\n        >formatters</a\n    >\n    allow you to define how a chart\'s scale values should be transformed before\n    they\'re presented to the user.\n</p>\n\n<h2>Ticks</h2>\n<p>\n    If the formats of the ticks on an X-Y scale need to be customized beyond\n    their default behavior, you can provide custom formatters for one or both\n    scales. The following snippet reformats the x and y scales using a Math\n    function and a template literal.\n</p>\n<pre>{{ customTicks }}</pre>\n<p>\n    <strong>Note:</strong> In addition to demonstrating how to set a custom\n    formatter for the y-axis, the following example uses a\n    <code\n        ><a href="../classes/TimeScale.html" target="_blank">TimeScale</a></code\n    >\n    for its x-axis. TimeScale\'s tick formatter is automatically set to Nova\n    Charts\'\n    <code\n        ><a\n            href="../miscellaneous/variables.html#datetimeFormatter"\n            target="_blank"\n            >dateTimeFormatter</a\n        ></code\n    >\n    which determines a reasonable format based on the date for each tick.\n</p>\n<p>\n    If your requirements for formatting tick dates differ from the one\'s\n    provided by TimeScale\'s default tick formatter, you can still set a custom\n    one using the above syntax.\n</p>\n<nui-example-wrapper filenamePrefix="tick-formatter" exampleTitle="Ticks">\n    <nui-chart-tick-formatter-example></nui-chart-tick-formatter-example>\n</nui-example-wrapper>\n'},35883:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-formatters",\n    templateUrl: "./chart-docs-formatters.component.html",\n})\nexport class ChartDocsFormattersComponent {\n    public customTicks = `scales.x.formatters.tick = (value: Number) => (Number(value).toFixed(2));\nscales.y.formatters.tick = (value: Number) => \\`> $\\{value\\} %\\`;\n...`;\n}\n'},80532:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiMessageModule, SrlcStage } from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../../demo-files-factory";\nimport { ChartDocsFormattersComponent } from "./chart-docs-formatters.component";\nimport { TickFormatterExampleComponent } from "./tick-formatter/tick-formatter.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsFormattersComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "tick",\n        component: TickFormatterExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [TickFormatterExampleComponent, ChartDocsFormattersComponent],\n    imports: [\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("formatters"),\n        },\n    ],\n})\nexport class ChartDocsFormattersModule {}\n'},89887:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},55680:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-tick-formatter-example",\n    templateUrl: "./tick-formatter.example.component.html",\n})\nexport class TickFormatterExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const scales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        scales.y.formatters.tick = (value: Number) => `> ${value} %`;\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors: new LineAccessors(),\n                renderer: new LineRenderer(),\n                scales,\n            })\n        );\n\n        const grid = new XYGrid();\n        // Set the grid\'s \'axis.left.fit\' property to \'true\' to accommodate the extra label width required by the y-scale\'s tick formatter output.\n        grid.config().axis.left.fit = true;\n        this.chart = new Chart(grid);\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n    ];\n}\n'},85342:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},7219:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-basic-example",\n    templateUrl: "./area-chart-basic-example.component.html",\n})\nexport class AreaChartBasicExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements\n        this.chart = new Chart(areaGrid());\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // \'y0\' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n        // \'y1\' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n        // \'x\' and \'y\' accessors define the position of the marker. \'x\' was already defined, so now we need to define \'y\' as well.\n        // Notice that the \'y\' is assigned the \'absoluteY1\' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area\'s value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n'},920:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left" i18n>Ingress/Egress</div>\n    <div class="chart">\n        \x3c!-- Set the \'nuiChartCollectionId\' directive to the same value on each chart for mirroring interaction events such as hover. --\x3e\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistTop.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="legend; context: { chartAssist: chartAssistTop }"\n        ></ng-container>\n    </div>\n</div>\n<div class="nui-chart-layout">\n    <div class="chart">\n        \x3c!-- Set the \'nuiChartCollectionId\' directive to the same value on each chart for mirroring interaction events such as hover. --\x3e\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistBottom.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="\n                legend;\n                context: { chartAssist: chartAssistBottom }\n            "\n        ></ng-container>\n    </div>\n</div>\n\n<ng-template #legend let-chartAssist="chartAssist">\n    <nui-legend\n        seriesUnitLabel="GB"\n        i18n-seriesUnitLabel\n        [active]="chartAssist.isLegendActive"\n        [interactive]="true"\n        (mouseleave)="chartAssist.resetVisibleSeries()"\n    >\n        <nui-legend-series\n            *ngFor="\n                let legendSeries of chartAssist.legendSeriesSet;\n                trackBy: chartAssist.seriesTrackByFn\n            "\n            [descriptionPrimary]="legendSeries[\'name\']"\n            (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            [seriesRenderState]="\n                chartAssist.renderStatesIndex[legendSeries.id]?.state\n            "\n            [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n            (isSelectedChange)="\n                onSelectedChange(legendSeries, $event, chartAssist)\n            "\n        >\n            \x3c!-- Specify the \'tick\' formatter to display positive values for both series in the legend. --\x3e\n            \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n            <nui-rich-legend-tile\n                [value]="\n                    chartAssist.getHighlightedValue(\n                        legendSeries,\n                        \'y\',\n                        \'tick\',\n                        \'y1\'\n                    )\n                "\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [color]="chartAssist.palette.textColors.get(legendSeries.id)"\n            >\n                <nui-chart-marker\n                    rightEdge\n                    [marker]="chartAssist.markers.get(legendSeries.id)"\n                    [color]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </nui-legend>\n</ng-template>\n'},94970:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-bi-directional-stacked-inverted-example",\n    templateUrl:\n        "./area-chart-bi-directional-stacked-inverted-example.component.html",\n})\nexport class AreaChartBiDirectionalStackedInvertedExampleComponent\n    implements OnInit\n{\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    public ngOnInit(): void {\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistBottom = new ChartAssist(\n            this.chartBottom,\n            stackedArea,\n            this.chartAssistTop.palette,\n            this.chartAssistTop.markers\n        );\n        const accessors = this.createAccessors();\n        const renderer = new AreaRenderer();\n        const xScale = new TimeScale();\n\n        /**\n         * Scale Reversal for Inverted Stacks\n         */\n        const scalesTop: IXYScales = {\n            x: xScale,\n            // Invoke \'reverse\' on the top chart\'s y-axis scale to stack the chart\'s series in a downward direction starting at the top.\n            y: new LinearScale().reverse(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            // Use the standard y-axis scale orientation on the bottom chart to stack the chart\'s series in an upward direction starting at the bottom.\n            y: new LinearScale(),\n        };\n\n        // Here we assemble a complete chart series set for each chart.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(\n            (d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesTop,\n            })\n        );\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] =\n            getDataBottom().map((d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesBottom,\n            }));\n\n        // We need to replace the default domain calculators to have each chart take the series\n        // on the opposite chart into account when calculating the domains.\n        const topChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetBottom,\n            getAutomaticDomain\n        );\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetTop,\n            getAutomaticDomain\n        );\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. The chart that is directly\n     * associated with the series has to be invoked first.\n     */\n    public onSelectedChange(\n        legendSeries: IChartAssistSeries<any>,\n        value: boolean,\n        currentChartAssist: ChartAssist\n    ): void {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n\n    private createAccessors() {\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n\n        // \'y0\' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n\n        // \'y1\' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n\n        // \'x\' and \'y\' accessors define the position of the marker. \'x\' was already defined, so now we need to define \'y\' as well.\n        // Notice that the \'y\' is assigned the \'absoluteY1\' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area\'s value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        return accessors;\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "www-http-ingress",\n            name: "World Wide Web HTTP",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "mssql-server-ingress",\n            name: "MSSQL-Server",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "www-http-egress",\n            name: "World Wide Web HTTP",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 95,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "mssql-server-egress",\n            name: "MSSQL-Server",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 250,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n'},31608:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistTop.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="legend; context: { chartAssist: chartAssistTop }"\n        ></ng-container>\n    </div>\n</div>\n<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistBottom.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="\n                legend;\n                context: { chartAssist: chartAssistBottom }\n            "\n        ></ng-container>\n    </div>\n</div>\n\n<ng-template #legend let-chartAssist="chartAssist">\n    <nui-legend\n        seriesUnitLabel="Mbps"\n        i18n-seriesUnitLabel\n        [active]="chartAssist.isLegendActive"\n        [interactive]="true"\n        (mouseleave)="chartAssist.resetVisibleSeries()"\n    >\n        <nui-legend-series\n            *ngFor="\n                let legendSeries of chartAssist.legendSeriesSet;\n                trackBy: chartAssist.seriesTrackByFn\n            "\n            [descriptionPrimary]="legendSeries[\'name\']"\n            (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            [seriesRenderState]="\n                chartAssist.renderStatesIndex[legendSeries.id]?.state\n            "\n            [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n            (isSelectedChange)="\n                onSelectedChange(legendSeries, $event, chartAssist)\n            "\n        >\n            \x3c!-- Specify the \'tick\' formatter to display positive values for both series in the legend. --\x3e\n            \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n            <nui-rich-legend-tile\n                [value]="\n                    chartAssist.getHighlightedValue(\n                        legendSeries,\n                        \'y\',\n                        \'tick\',\n                        \'y1\'\n                    )\n                "\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [color]="chartAssist.palette.textColors.get(legendSeries.id)"\n            >\n                <nui-chart-marker\n                    rightEdge\n                    [marker]="chartAssist.markers.get(legendSeries.id)"\n                    [color]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </nui-legend>\n</ng-template>\n'},98157:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ChangeDetectorRef, Component, Input, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-bi-directional-stacked-test",\n    templateUrl: "./area-chart-bi-directional-stacked-test.component.html",\n})\nexport class AreaChartBiDirectionalStackedTestComponent implements OnInit {\n    @Input()\n    public inverted = false; // cave mode!\n\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    constructor(public changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements.\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistBottom = new ChartAssist(\n            this.chartBottom,\n            stackedArea,\n            this.chartAssistTop.palette,\n            this.chartAssistTop.markers\n        );\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // \'y0\' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n        // \'y1\' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n        // \'x\' and \'y\' accessors define the position of the marker. \'x\' was already defined, so now we need to define \'y\' as well.\n        // Notice that the \'y\' is assigned the \'absoluteY1\' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area\'s value line.\n        accessors.data.y = accessors.data.absoluteY1;\n        // Even though we\'re using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        // Take a look also at the marker assignment for the second accessors instance below.\n        accessors.series.marker = this.chartAssistTop.markers.get;\n        accessors.series.color = this.chartAssistTop.palette.standardColors.get;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        const xScale = new TimeScale();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This test demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scalesTop: IXYScales = {\n            x: xScale,\n            y: this.inverted ? new LinearScale().reverse() : new LinearScale(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            y: this.inverted ? new LinearScale() : new LinearScale().reverse(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(\n            (d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesTop,\n            })\n        );\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] =\n            getDataBottom().map((d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesBottom,\n            }));\n\n        // We need to replace domain calculators to reflect series on both charts\n        const topChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetBottom,\n            getAutomaticDomain\n        );\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetTop,\n            getAutomaticDomain\n        );\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. Chart that is directly associated with the series has to be\n     * invoked first.\n     *\n     * @param legendSeries\n     * @param value\n     * @param currentChartAssist\n     */\n    public onSelectedChange(\n        legendSeries: IChartAssistSeries<any>,\n        value: boolean,\n        currentChartAssist: ChartAssist\n    ): void {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "up1",\n            name: "Up Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "down1",\n            name: "Dn Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "up2",\n            name: "Up Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 95,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "down2",\n            name: "Dn Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 250,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n'},88210:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "area-chart-bi-directional-stacked-visual-test",\n    template: `\n        <area-chart-bi-directional-stacked-test\n            [inverted]="false"\n        ></area-chart-bi-directional-stacked-test>\n        <area-chart-bi-directional-stacked-test\n            [inverted]="true"\n        ></area-chart-bi-directional-stacked-test>\n    `,\n})\nexport class AreaChartBiDirectionalStackedVisualTestComponent {}\n'},33441:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left" i18n>Ingress/Egress</div>\n    <div class="chart">\n        \x3c!-- Set the \'nuiChartCollectionId\' directive to the same value on each chart for mirroring interaction events such as hover. --\x3e\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistTop.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="legend; context: { chartAssist: chartAssistTop }"\n        ></ng-container>\n    </div>\n</div>\n<div class="nui-chart-layout">\n    <div class="chart">\n        \x3c!-- Set the \'nuiChartCollectionId\' directive to the same value on each chart for mirroring interaction events such as hover. --\x3e\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssistBottom.chart"\n            nuiChartCollectionId="bi-di-stacked-area"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <ng-container\n            *ngTemplateOutlet="\n                legend;\n                context: { chartAssist: chartAssistBottom }\n            "\n        ></ng-container>\n    </div>\n</div>\n\n<ng-template #legend let-chartAssist="chartAssist">\n    <nui-legend\n        seriesUnitLabel="GB"\n        i18n-seriesUnitLabel\n        [active]="chartAssist.isLegendActive"\n        [interactive]="true"\n        (mouseleave)="chartAssist.resetVisibleSeries()"\n    >\n        <nui-legend-series\n            *ngFor="\n                let legendSeries of chartAssist.legendSeriesSet;\n                trackBy: chartAssist.seriesTrackByFn\n            "\n            [descriptionPrimary]="legendSeries[\'name\']"\n            (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            [seriesRenderState]="\n                chartAssist.renderStatesIndex[legendSeries.id]?.state\n            "\n            [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n            (isSelectedChange)="\n                onSelectedChange(legendSeries, $event, chartAssist)\n            "\n        >\n            \x3c!-- Specify the \'tick\' formatter to display positive values for both series in the legend. --\x3e\n            \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n            <nui-rich-legend-tile\n                [value]="\n                    chartAssist.getHighlightedValue(\n                        legendSeries,\n                        \'y\',\n                        \'tick\',\n                        \'y1\'\n                    )\n                "\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [color]="chartAssist.palette.textColors.get(legendSeries.id)"\n            >\n                <nui-chart-marker\n                    rightEdge\n                    [marker]="chartAssist.markers.get(legendSeries.id)"\n                    [color]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </nui-legend>\n</ng-template>\n'},82525:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    domainWithAuxiliarySeries,\n    getAutomaticDomain,\n    IAreaAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-bi-directional-stacked-example",\n    templateUrl: "./area-chart-bi-directional-stacked-example.component.html",\n})\nexport class AreaChartBiDirectionalStackedExampleComponent implements OnInit {\n    public chartTop: Chart;\n    public chartAssistTop: ChartAssist;\n\n    public chartBottom: Chart;\n    public chartAssistBottom: ChartAssist;\n\n    public ngOnInit(): void {\n        // The \'updateDomainForEmptySeries\' property on each chart\'s configuration allows the domains for the chart\n        // to update even if it\'s empty. This keeps the empty chart\'s domains synchronized with the opposite chart\n        // in case the opposite chart\'s domain changes.\n        this.chartTop = new Chart(new XYGrid(topChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistTop = new ChartAssist(this.chartTop, stackedArea);\n\n        this.chartBottom = new Chart(new XYGrid(bottomChartConfig()), {\n            updateDomainForEmptySeries: true,\n        });\n        this.chartAssistBottom = new ChartAssist(\n            this.chartBottom,\n            stackedArea,\n            this.chartAssistTop.palette,\n            this.chartAssistTop.markers\n        );\n        const accessors = this.createAccessors();\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // We use the same xScale instance on both charts to keep the charts\' X domains in sync with each other\n        const xScale = new TimeScale();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scalesTop: IXYScales = {\n            x: xScale,\n            // Use the standard y-axis scale orientation on the top chart to stack the chart\'s series in an upward direction starting at the bottom.\n            y: new LinearScale(),\n        };\n\n        const scalesBottom: IXYScales = {\n            x: xScale,\n            // Invoke \'reverse\' on the bottom y-axis scale to stack the chart\'s series in a downward direction starting at the top.\n            y: new LinearScale().reverse(),\n        };\n\n        // Here we assemble a complete chart series set for each chart.\n        const seriesSetTop: IChartSeries<IAreaAccessors>[] = getDataTop().map(\n            (d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesTop,\n            })\n        );\n\n        const seriesSetBottom: IChartSeries<IAreaAccessors>[] =\n            getDataBottom().map((d) => ({\n                ...d,\n                renderer,\n                accessors,\n                scales: scalesBottom,\n            }));\n\n        // We need to replace the default domain calculators to have each chart take the series\n        // on the opposite chart into account when calculating the domains.\n        const topChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetBottom,\n            getAutomaticDomain\n        );\n        scalesTop.y.domainCalculator = topChartDomainCalculator;\n        scalesTop.x.domainCalculator = topChartDomainCalculator;\n\n        const bottomChartDomainCalculator = domainWithAuxiliarySeries(\n            () => seriesSetTop,\n            getAutomaticDomain\n        );\n        scalesBottom.y.domainCalculator = bottomChartDomainCalculator;\n        scalesBottom.x.domainCalculator = bottomChartDomainCalculator;\n\n        this.chartAssistTop.update(seriesSetTop);\n        this.chartAssistBottom.update(seriesSetBottom);\n    }\n\n    /**\n     * This function ensures the change in visibility of series is propagated to both charts. The chart that is directly\n     * associated with the series has to be invoked first.\n     */\n    public onSelectedChange(\n        legendSeries: IChartAssistSeries<any>,\n        value: boolean,\n        currentChartAssist: ChartAssist\n    ): void {\n        let chartAssists = [this.chartAssistTop, this.chartAssistBottom];\n        if (currentChartAssist === this.chartAssistBottom) {\n            chartAssists = chartAssists.reverse();\n        }\n        for (const ca of chartAssists) {\n            ca.toggleSeries(legendSeries.id, value);\n        }\n    }\n\n    private createAccessors() {\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n\n        // \'y0\' defines the baseline, in other words, where the area starts\n        accessors.data.y0 = () => 0;\n\n        // \'y1\' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.value;\n\n        // \'x\' and \'y\' accessors define the position of the marker. \'x\' was already defined, so now we need to define \'y\' as well.\n        // Notice that the \'y\' is assigned the \'absoluteY1\' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area\'s value line.\n        accessors.data.y = accessors.data.absoluteY1;\n\n        return accessors;\n    }\n}\n\nfunction topChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.margin.bottom = 0;\n    c.dimension.padding.bottom = 0;\n    c.borders.bottom.visible = false;\n\n    return c;\n}\n\nfunction bottomChartConfig(c: XYGridConfig = new XYGridConfig()): XYGridConfig {\n    c.dimension.padding.top = 0;\n    c.dimension.margin.top = 0;\n\n    return c;\n}\n\n/* Chart data */\nfunction getDataTop() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "www-http-ingress",\n            name: "World Wide Web HTTP",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "mssql-server-ingress",\n            name: "MSSQL-Server",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n\nfunction getDataBottom() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "www-http-egress",\n            name: "World Wide Web HTTP",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 95,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "mssql-server-egress",\n            name: "MSSQL-Server",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 250,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n'},50428:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="Mbps"\n            i18n-seriesUnitLabel\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                \x3c!-- Specify the \'tick\' formatter to display positive values for both series in the legend. --\x3e\n                \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n                <nui-rich-legend-tile\n                    [value]="\n                        chartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\',\n                            \'tick\',\n                            \'y1\'\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},80071:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-bi-directional-example",\n    templateUrl: "./area-chart-bi-directional-example.component.html",\n})\nexport class AreaChartBiDirectionalExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist helps with synchronizing hover events between the chart and the legend\n        this.chartAssist = new ChartAssist(this.chart);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors1 = new AreaAccessors();\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors1.data.x = (d) => d.timeStamp;\n        // \'y0\' defines the baseline, in other words, where the area starts\n        accessors1.data.y0 = () => 0;\n        // \'y1\' defines access to the numeric values we want to visualize, in other words, where the area ends\n        accessors1.data.y1 = (d) => d.value;\n        // \'x\' and \'y\' accessors define the position of the marker. \'x\' was already defined, so now we need to define \'y\' as well.\n        // Notice that the \'y\' is assigned the \'absoluteY1\' accessor which takes into account areas that may be stacked below\n        // the current area and retrieves the absolute distance from the baseline to the area\'s value line.\n        accessors1.data.y = accessors1.data.absoluteY1;\n        // Even though we\'re using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        // Take a look also at the marker assignment for the second accessors instance below.\n        accessors1.series.marker = this.chartAssist.markers.get;\n\n        /**\n         * This second AreaAccessors instance flips the sign of the value so that\n         * the area is displayed below the baseline.\n         */\n        const accessors2 = new AreaAccessors();\n        accessors2.data.x = (d) => d.timeStamp;\n        accessors2.data.y0 = () => 0;\n        // Here\'s where we flip the sign of the value so that the area is displayed below the baseline\n        accessors2.data.y1 = (d) => -d.value;\n        // Both series use the same color accessor so that the second series will use the second color in the sequence\n        accessors2.series.color = accessors1.series.color;\n        // \'y\' defines the position of the marker\n        accessors2.data.y = accessors2.data.absoluteY1;\n        // Even though we\'re using different accessor instances for each series, we want to use the same marker\n        // accessor so that each series is assigned a different marker shape from the same marker sequence.\n        accessors2.series.marker = this.chartAssist.markers.get;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of an area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        /**\n         * This tick formatter will format values on the left axis as positive both above and baseline as\n         * well as in the legend. For legend setup, see \'chartAssist.getHighlightedValue\' usage in the\n         * template file.\n         */\n        scales.y.formatters.tick = (value: number) => `${Math.abs(value)}`;\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: Partial<IChartSeries<IAreaAccessors>>[] =\n            getData().map((d) => ({\n                ...d,\n                renderer,\n                scales,\n            }));\n\n        // In this case, each series has its own accessors instance.\n        seriesSet[0].accessors = accessors1;\n        seriesSet[1].accessors = accessors2;\n\n        // Finally, pass the series set to the chart\'s update method.\n        this.chartAssist.update(seriesSet as IChartSeries<IAreaAccessors>[]);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "up",\n            name: "Up Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 33,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 15,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 20,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 6,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 35,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 38,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 25,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 43,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 28,\n                },\n            ],\n        },\n        {\n            id: "down",\n            name: "Dn Speed",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    value: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    value: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    value: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    value: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    value: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    value: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    value: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    value: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    value: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    value: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    value: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    value: 55,\n                },\n            ],\n        },\n    ];\n}\n'},84896:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="Mbps"\n            i18n-seriesUnitLabel\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                \x3c!-- Specify \'undefined\' for the formatter key since we\'re not applying any special formatting to the data values shown in the legend --\x3e\n                \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n                <nui-rich-legend-tile\n                    [value]="\n                        chartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\',\n                            undefined,\n                            \'y1\'\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},54031:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedAreaAccessors,\n    stackedPercentageArea,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-stack-percentage-example",\n    templateUrl: "./area-chart-stack-percentage-example.component.html",\n})\nexport class AreaChartStackPercentageExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series\' numeric values on the same progression domain.\n        // In this case we use the \'stackedPercentageArea\' preprocessor to scale each series area as a percentage of the sum of all corresponding series values.\n        this.chartAssist = new ChartAssist(this.chart, stackedPercentageArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = stackedAreaAccessors();\n        // \'y1\' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named \'value\',so we\'ll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 6 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 33 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 15 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 38 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 43 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 28 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 65 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 30 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 40 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 60 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 70 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 45 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 75 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 85 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 55 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Series 3",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 17 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 42 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 47 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 90 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 21 },\n                { x: moment("2016-12-25T14:20:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 70 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 454 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 550 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 7 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 5 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 110 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 550 },\n            ],\n        },\n    ];\n}\n'},38261:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="Mbps"\n            i18n-seriesUnitLabel\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                \x3c!-- Specify \'undefined\' for the formatter key since we\'re not applying any special formatting to the data values shown in the legend --\x3e\n                \x3c!-- Specify the \'y1\' data accessor to let the chart assist know how to access the data for the legend. --\x3e\n                <nui-rich-legend-tile\n                    [value]="\n                        chartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\',\n                            undefined,\n                            \'y1\'\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},37824:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    ChartAssist,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    stackedArea,\n    stackedAreaAccessors,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-stack-example",\n    templateUrl: "./area-chart-stack-example.component.html",\n})\nexport class AreaChartStackExampleComponent implements OnInit {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements.\n        this.chart = new Chart(areaGrid());\n        // ChartAssist will use the preprocessor to stack the series\' numeric values on the same progression domain\n        this.chartAssist = new ChartAssist(this.chart, stackedArea);\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = stackedAreaAccessors();\n        // \'y1\' defines access to the numeric values we want to visualize.\n        // The items in the data array of this example have a property named \'value\',so we\'ll use that.\n        accessors.data.y1 = (d) => d.value;\n\n        // The area renderer will make the chart look like a area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 6 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 33 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 15 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 20 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 30 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T14:20:29.909Z", format), value: 6 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 35 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 38 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 25 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 43 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 28 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T11:45:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T12:10:29.909Z", format), value: 65 },\n                { x: moment("2016-12-25T12:50:29.909Z", format), value: 30 },\n                { x: moment("2016-12-25T13:15:29.909Z", format), value: 40 },\n                { x: moment("2016-12-25T13:40:29.909Z", format), value: 60 },\n                { x: moment("2016-12-25T13:55:29.909Z", format), value: 23 },\n                { x: moment("2016-12-25T14:20:29.909Z", format), value: 12 },\n                { x: moment("2016-12-25T14:40:29.909Z", format), value: 70 },\n                { x: moment("2016-12-25T15:00:29.909Z", format), value: 45 },\n                { x: moment("2016-12-25T15:25:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T15:45:29.909Z", format), value: 75 },\n                { x: moment("2016-12-25T16:10:29.909Z", format), value: 50 },\n                { x: moment("2016-12-25T16:30:29.909Z", format), value: 85 },\n                { x: moment("2016-12-25T16:45:29.909Z", format), value: 55 },\n            ],\n        },\n    ];\n}\n'},43064:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},8288:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaAccessors,\n    areaGrid,\n    AreaRenderer,\n    Chart,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-variable-baseline-example",\n    templateUrl: "./area-chart-variable-baseline-example.component.html",\n})\nexport class AreaChartVariableBaselineExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        // areaGrid returns an XYGrid configured for displaying an area chart\'s axes and other grid elements\n        const grid = areaGrid();\n        // set the \'axis.left.fit\' property to \'true\' to accommodate the extra width required by the negative sign on the left axis labels\n        grid.config().axis.left.fit = true;\n        // pass the configured grid to the chart\'s constructor\n        this.chart = new Chart(grid);\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n        // \'x\' defines access for values in the data that correspond to the horizontal axis\n        accessors.data.x = (d) => d.timeStamp;\n        // \'y0\' defines access to the baseline values we want to visualize, in other words, where the area starts\n        accessors.data.y0 = (d) => d.start;\n        // \'y1\' defines access to the top line values we want to visualize, in other words, where the area ends\n        accessors.data.y1 = (d) => d.end;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Fixing the domain is optional.\n        scales.y.fixDomain([-100, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method.\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    timeStamp: moment("2016-12-25T11:45:29.909Z", format),\n                    start: -58,\n                    end: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:10:29.909Z", format),\n                    start: -5,\n                    end: 65,\n                },\n                {\n                    timeStamp: moment("2016-12-25T12:50:29.909Z", format),\n                    start: -40,\n                    end: 30,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:15:29.909Z", format),\n                    start: -30,\n                    end: 40,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:40:29.909Z", format),\n                    start: -10,\n                    end: 60,\n                },\n                {\n                    timeStamp: moment("2016-12-25T13:55:29.909Z", format),\n                    start: -47,\n                    end: 23,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:20:29.909Z", format),\n                    start: -58,\n                    end: 12,\n                },\n                {\n                    timeStamp: moment("2016-12-25T14:40:29.909Z", format),\n                    start: 0,\n                    end: 70,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:00:29.909Z", format),\n                    start: -25,\n                    end: 45,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:25:29.909Z", format),\n                    start: -20,\n                    end: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T15:45:29.909Z", format),\n                    start: 5,\n                    end: 75,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:10:29.909Z", format),\n                    start: -20,\n                    end: 50,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:30:29.909Z", format),\n                    start: 15,\n                    end: 85,\n                },\n                {\n                    timeStamp: moment("2016-12-25T16:45:29.909Z", format),\n                    start: -15,\n                    end: 55,\n                },\n            ],\n        },\n    ];\n}\n'},33182:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex chart" [chart]="chart"></nui-chart>\n'},81226:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".chart {\n    height: 275px;\n    width: 300px;\n}\n"},82821:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    AreaAccessors,\n    AreaRenderer,\n    Chart,\n    IAreaAccessors,\n    IChartSeries,\n    IXYScales,\n    LinearScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "area-chart-vertical-example",\n    templateUrl: "./area-chart-vertical-example.component.html",\n    styleUrls: ["./area-chart-vertical-example.component.less"],\n})\nexport class AreaChartVerticalExampleComponent implements OnInit {\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        // Disable interaction because we don\'t support a horizontal interaction line yet\n        gridConfig.interactionPlugins = false;\n        gridConfig.axis.left.gridTicks = false;\n        gridConfig.axis.left.tickSize = 0;\n        gridConfig.axis.bottom.gridTicks = true;\n        gridConfig.axis.left.fit = true;\n        gridConfig.axis.bottom.fit = true;\n        gridConfig.axis.bottom.tickSize = 0;\n        gridConfig.axis.left.tickSize = 5;\n        gridConfig.dimension.padding.left = 2; // 2 for border\n        gridConfig.borders.left.visible = true;\n        gridConfig.borders.bottom.visible = false;\n\n        this.chart = new Chart(new XYGrid(gridConfig));\n\n        // Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new AreaAccessors();\n        accessors.data.y = (d, i) => i;\n        accessors.data.x0 = () => 0;\n        accessors.data.x1 = (d) => d.value;\n\n        // The area renderer will make the chart look like an area chart.\n        const renderer = new AreaRenderer();\n\n        // In case of a area chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new LinearScale(),\n            y: new LinearScale(),\n        };\n\n        scales.x.fixDomain([0, 100]);\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { value: 12 },\n                { value: 65 },\n                { value: 30 },\n                { value: 40 },\n                { value: 90 },\n                { value: 23 },\n                { value: 12 },\n            ],\n        },\n    ];\n}\n'},24081:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Area Charts</h1>\n\n<p>\n    An area chart visualization can be thought of as a hybrid between a line and\n    a bar chart. Similar to a line chart, an area chart shows how the numeric\n    values of one or more series change over the progression of another\n    variable, usually time. And, similar to a bar chart, an area chart consists\n    of a shaded area between a baseline (typically zero) and the line\n    representing the numeric values.\n</p>\n<p>\n    In real world scenarios, using an area chart visualization may make the most\n    sense if you want to compare quantities between two or more series by\n    stacking them one on top of another. If, on the other hand, you only have a\n    single series to visualize, it may be more practical to use just a simple\n    bar or line chart, depending of course on what you want to communicate about\n    the data. With that in mind, the first example on this page does show, for\n    simplicity\'s sake, a single series visualized as an area.\n</p>\n\n<h2>Basic Usage</h2>\n<p>\n    To create a simple area chart, the basic elements you need are much the same\n    as those of a\n    <a href="../additional-documentation/chart-types/line.html" target="_parent"\n        >line chart</a\n    >. The main differences in usage lie in the use of\n    <code\n        ><a href="../classes/AreaRenderer.html" target="_blank"\n            >AreaRenderer</a\n        ></code\n    >\n    instead of\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >\n    and in the configuration of the data accessors implemented by the\n    <code\n        ><a href="../classes/AreaAccessors.html" target="_blank"\n            >AreaAccessors</a\n        ></code\n    >\n    class. When instantiating the <code>AreaRenderer</code>, you can optionally\n    pass a configuration object of type\n    <code\n        ><a href="../interfaces/IAreaRendererConfig.html" target="_blank"\n            >IAreaRendererConfig</a\n        ></code\n    >\n    to make certain modifications to the behavior of the chart.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    As with other chart types, this first example implements an area chart\n    without the aid of a\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >\n    since it doesn\'t need to either process the stacking of multiple series or\n    handle interaction with an external component such as a legend. Subsequent\n    examples that include series stacking or legend interaction will make use of\n    a <code>ChartAssist</code> instance to handle those tasks.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="area-chart-basic"\n    exampleTitle="Basic Usage"\n>\n    <area-chart-basic-example></area-chart-basic-example>\n</nui-example-wrapper>\n<p>\n    In the example above, we create an instance of\n    <code\n        ><a href="../classes/AreaAccessors.html" target="_blank"\n            >AreaAccessors</a\n        ></code\n    >\n    and configure it to work specifically with the data being fed into the\n    chart. For the standard, horizontally oriented area chart we provide\n    implementation-specific definitions for the following accessors:\n</p>\n<ul>\n    <li>\n        An <code>x</code> accessor for values in the data that correspond to the\n        horizontal axis. Again, this is typically a datetime value. This value\n        is also used as a coordinate for the data point marker.\n    </li>\n    <li>\n        A <code>y</code> accessor for values to be used as the\n        <code>y</code> coordinate for the data point marker. The\n        <code>y</code> accessor is assigned the <code>absoluteY1</code> accessor\n        which takes into account areas that may be stacked below the current\n        area and retrieves the absolute distance from the baseline to the area\'s\n        value line.\n    </li>\n    <li>\n        A <code>y0</code> accessor for the baseline on the vertical axis which,\n        in this particular case, will always return the typical baseline value\n        of zero.\n    </li>\n    <li>\n        A <code>y1</code> accessor for the value line on the vertical axis that\n        provides access to the numeric values we want to visualize in the data.\n    </li>\n</ul>\n<p>\n    <strong>Note:</strong> For a vertically oriented chart in which the\n    progression runs along the y axis, you can configure the opposite accessors\n    from those above, i.e. <code>y</code>, <code>x0</code>, and <code>x1</code>,\n    but with the same corresponding implementations.\n</p>\n<p>\n    In addition to data access, the\n    <code\n        ><a href="../classes/AreaAccessors.html" target="_blank"\n            >AreaAccessors</a\n        ></code\n    >\n    indicate what color and marker symbol the chart should use for each series\n    visualization. For additional information about chart setup, take a look at\n    <a\n        href="../../additional-documentation/advanced-usage/chart.html"\n        target="_parent"\n        >this</a\n    >\n    page.\n</p>\n<p>\n    To instantiate a grid that conforms to UX guidelines for area\n    visualizations, we invoke the\n    <code\n        ><a href="../miscellaneous/functions.html#areaGrid" target="_blank"\n            >areaGrid</a\n        ></code\n    >\n    function and pass the result to the\n    <code\n        ><a href="../classes/Chart.html#constructor" target="_blank"\n            >Chart</a\n        ></code\n    >\n    constructor.\n</p>\n\n<h2>Stacked</h2>\n<p>\n    As mentioned above, an area chart may be an ideal option if you want to\n    compare a progression of quantities between two or more series. In that\n    case, you\'ll likely want to display the series in a stacked formation, and\n    the easiest way to do that is to pass the\n    <code\n        ><a href="../miscellaneous/functions.html#stackedArea" target="_blank"\n            >stackedArea</a\n        ></code\n    >\n    preprocessor to an instance of the previously mentioned\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >\n    which will use the preprocessor to stack the series\' numeric values on the\n    same progression domain.\n</p>\n<p>\n    <strong>Note:</strong> The <code>absoluteY1</code> accessor is assigned to\n    the <code>y</code> accessor to position data point markers in the stacked\n    series correctly.\n</p>\n<nui-example-wrapper filenamePrefix="area-chart-stack" exampleTitle="Stacked">\n    <area-chart-stack-example></area-chart-stack-example>\n</nui-example-wrapper>\n\n<h2>Unstacked or Overlapping Areas</h2>\n<p>\n    The use of an unstacked or overlapping area visualization is generally\n    discouraged for a few key reasons:\n</p>\n<ul>\n    <li>\n        Area charts are typically expected to be stacked, and the main benefit\n        this configuration provides is that it can help the user to visualize a\n        total value\'s progression over time along with a running breakdown of\n        subgroup contributions to that total. If, however, the areas are\n        unstacked, the total value visualization is obviously absent. And, the\n        user may consequently find it more difficult to discern a comparison of\n        each group\'s contribution to their sum.\n    </li>\n    <li>\n        Colors generated by the combination of overlapping areas are inherently\n        not represented in the legend which can create unnecessary mental strain\n        on the user as they try to determine what metrics in the legend\n        correspond to the overlapping values.\n    </li>\n    <li>\n        If subgroup values along the progression never intersect, the\n        visualization can be easily mistaken for a stacked area.\n    </li>\n</ul>\n<p>\n    If you\'re considering implementing an unstacked area chart, it\'s a good idea\n    to consider these and other potential drawbacks. While making your\n    considerations, it\'s possible you\'ll determine that implementing a\n    <a href="../additional-documentation/chart-types/line.html" target="_parent"\n        >line chart</a\n    >\n    instead will result in a better overall experience for your users. If\n    however you find that your use case is extra, super special, and you really,\n    really need an unstacked area chart, please contact the Nova team so that we\n    can show you how to assemble the visualization. Additionally, please consult\n    with Nova Design System leadership before proceeding so that they can work\n    with you to provide the best solution possible.\n</p>\n\n<h2>Stacked Percentage</h2>\n<p>\n    Stacked percentage area charts are similar to standard stacked area charts\n    in that they facilitate the comparison of quantities between two or more\n    series across the progression of another variable. The difference is that a\n    stacked percentage area chart visualizes each quantity in relation to the\n    sum of all quantities along that progression. It can be thought of as a pie\n    chart with an added dimension, usually time, in which you can see what\n    portion of the sum total each data point represents over a given period of\n    time.\n</p>\n<p>\n    Because of the similarities to standard stacked area charts, the usage for a\n    stacked percentage chart is much the same but with a minor difference.\n    Instead of passing the <code>stackedArea</code> preprocessor to the\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >, you pass the\n    <code\n        ><a\n            href="../miscellaneous/functions.html#stackedPercentageArea"\n            target="_blank"\n            >stackedPercentageArea</a\n        ></code\n    >\n    preprocessor which will not only stack the series\' numeric values on the\n    same progression domain but will also vertically scale each series area as a\n    percentage of the sum of all corresponding series values.\n</p>\n<nui-example-wrapper\n    filenamePrefix="area-chart-stack-percentage"\n    exampleTitle="Stacked Percentage"\n>\n    <area-chart-stack-percentage-example></area-chart-stack-percentage-example>\n</nui-example-wrapper>\n\n<h2>Variable Baseline</h2>\n<p>\n    Sometimes the baseline of an area chart isn\'t fixed at zero. If you have a\n    use case in which the baseline varies with each data point, you can set the\n    <code>y0</code> accessor to provide access to the value in the data to be\n    used as the baseline. In the following example, the data contains\n    <code>start</code> and <code>end</code> properties that are used as the\n    <code>y0</code> and <code>y1</code> values respectively.\n</p>\n<nui-example-wrapper\n    filenamePrefix="area-chart-variable-baseline"\n    exampleTitle="Variable Baseline"\n>\n    <area-chart-variable-baseline-example></area-chart-variable-baseline-example>\n</nui-example-wrapper>\n\n<h2>Bi-Directional</h2>\n<h3>Single Metric Per Direction</h3>\n<p>\n    To display a progression of two correlated values on opposite sides of a\n    baseline, you can implement a data accessor that flips the values of one\n    series from positive to negative. In this example, the positive values for\n    download speed are flipped to negative in that series\'s <code>y1</code> data\n    accessor. Additionally, the example implements a y-scale "tick" formatter to\n    display positive values for the axis ticks below the zero baseline and in\n    the legend.\n</p>\n<nui-example-wrapper\n    filenamePrefix="area-chart-bi-directional"\n    exampleTitle="Bi-Directional"\n>\n    <area-chart-bi-directional-example></area-chart-bi-directional-example>\n</nui-example-wrapper>\n\n<h3>Stacked</h3>\n<p>\n    If you need to visualize more than one metric per direction, you can set up\n    a bi-directional stacked chart. The following example demonstrates this by\n    creating two chart instances, each with its own data but acting as a single\n    visualization. The series on the bottom chart are stacked in a downward\n    direction by invoking the\n    <code\n        ><a href="../classes/LinearScale.html#reverse" target="_blank"\n            >reverse</a\n        ></code\n    >\n    method on the chart\'s y-axis\n    <code\n        ><a href="../classes/LinearScale.html" target="_blank"\n            >LinearScale</a\n        ></code\n    >. For additional details, take a look at the code and comments in the\n    example\'s source expander.\n</p>\n<nui-example-wrapper\n    filenamePrefix="area-chart-bi-directional-stacked"\n    exampleTitle="Bi-Directional Stacked"\n>\n    <area-chart-bi-directional-stacked-example></area-chart-bi-directional-stacked-example>\n</nui-example-wrapper>\n\n<h3>Inverted Stacked</h3>\n<p>\n    To invert the direction of each stack, you can invoke the\n    <code\n        ><a href="../classes/LinearScale.html#reverse" target="_blank"\n            >reverse</a\n        ></code\n    >\n    method on the y-axis\n    <code\n        ><a href="../classes/LinearScale.html" target="_blank"\n            >LinearScale</a\n        ></code\n    >\n    of the top chart instead of the one on the bottom chart. The following\n    example demonstrates how to do this. For details, take a look at the code\n    and comments in the example\'s source expander.\n</p>\n<nui-example-wrapper\n    filenamePrefix="area-chart-bi-directional-stacked-inverted"\n    exampleTitle="Inverted Bi-Directional Stacked"\n>\n    <area-chart-bi-directional-stacked-inverted-example></area-chart-bi-directional-stacked-inverted-example>\n</nui-example-wrapper>\n'},36951:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-area",\n    templateUrl: "./chart-docs-area.component.html",\n})\nexport class ChartDocsAreaComponent {}\n'},81611:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\n/* eslint-disable max-len */\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { AreaChartBasicExampleComponent } from "./area-chart-basic/area-chart-basic-example.component";\nimport { AreaChartBiDirectionalStackedInvertedExampleComponent } from "./area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component";\nimport { AreaChartBiDirectionalStackedTestComponent } from "./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component";\nimport { AreaChartBiDirectionalStackedVisualTestComponent } from "./area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component";\nimport { AreaChartBiDirectionalStackedExampleComponent } from "./area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component";\nimport { AreaChartBiDirectionalExampleComponent } from "./area-chart-bi-directional/area-chart-bi-directional-example.component";\nimport { AreaChartStackPercentageExampleComponent } from "./area-chart-stack-percentage/area-chart-stack-percentage-example.component";\nimport { AreaChartStackExampleComponent } from "./area-chart-stack/area-chart-stack-example.component";\nimport { AreaChartVariableBaselineExampleComponent } from "./area-chart-variable-baseline/area-chart-variable-baseline-example.component";\nimport { AreaChartVerticalExampleComponent } from "./area-chart-vertical/area-chart-vertical-example.component";\nimport { ChartDocsAreaComponent } from "./chart-docs-area.component";\nimport { AreaChartTestComponent } from "./test/area-chart-test.component";\n/* eslint-enable max-len */\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsAreaComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: AreaChartBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "variable-baseline",\n        component: AreaChartVariableBaselineExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "vertical",\n        component: AreaChartVerticalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: AreaChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "stacked",\n        component: AreaChartStackExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bi-directional",\n        component: AreaChartBiDirectionalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bi-directional-stacked",\n        component: AreaChartBiDirectionalStackedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bi-directional-stacked-inverted",\n        component: AreaChartBiDirectionalStackedInvertedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bi-directional-stacked-test",\n        component: AreaChartBiDirectionalStackedVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsAreaComponent,\n        AreaChartBasicExampleComponent,\n        AreaChartBiDirectionalExampleComponent,\n        AreaChartBiDirectionalStackedExampleComponent,\n        AreaChartBiDirectionalStackedInvertedExampleComponent,\n        AreaChartVariableBaselineExampleComponent,\n        AreaChartVerticalExampleComponent,\n        AreaChartStackExampleComponent,\n        AreaChartStackPercentageExampleComponent,\n        AreaChartTestComponent,\n        AreaChartBiDirectionalStackedTestComponent,\n        AreaChartBiDirectionalStackedVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("area"),\n        },\n    ],\n})\nexport default class ChartDocsAreaModule {}\n'},393:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <div class="m-5">\n            <h4>Basic Usage</h4>\n            <area-chart-basic-example></area-chart-basic-example>\n        </div>\n        <div class="m-5">\n            <h4>Bi-Directional with Legend</h4>\n            <area-chart-bi-directional-example></area-chart-bi-directional-example>\n        </div>\n        <div class="m-5">\n            <h4>Variable Baseline</h4>\n            <area-chart-variable-baseline-example></area-chart-variable-baseline-example>\n        </div>\n        <div class="m-5">\n            <h4>Vertical</h4>\n            <area-chart-vertical-example></area-chart-vertical-example>\n        </div>\n        <div class="m-5">\n            <h4>Stacked</h4>\n            <area-chart-stack-example></area-chart-stack-example>\n        </div>\n        <div class="m-5">\n            <h4>Stacked Percentage</h4>\n            <area-chart-stack-percentage-example></area-chart-stack-percentage-example>\n        </div>\n    </charts-test-harness>\n</div>\n'},72189:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "area-chart-test",\n    templateUrl: "./area-chart-test.component.html",\n})\nexport class AreaChartTestComponent {}\n'},36500:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},6611:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    Chart,\n    IBarChartConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-horizontal-example",\n    templateUrl: "./bar-chart-horizontal.example.component.html",\n})\nexport class BarChartHorizontalExampleComponent implements OnInit {\n    public barConfig: IBarChartConfig = { horizontal: true };\n    public chart = new Chart(barGrid(this.barConfig));\n\n    public ngOnInit(): void {\n        const accessors = barAccessors(this.barConfig);\n        const renderer = new BarRenderer();\n        const scales = barScales(this.barConfig);\n\n        this.chart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [66] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},51904:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <div class="m-5">\n            <h4>Basic vertical bar chart</h4>\n            <nui-basic-vertical-bar-chart-test></nui-basic-vertical-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Horizontal bar chart with legend</h4>\n            <nui-horizontal-with-legend-bar-chart-test></nui-horizontal-with-legend-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Vertical bar chart with legend</h4>\n            <nui-vertical-with-legend-bar-chart-test></nui-vertical-with-legend-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Vertical bar chart with timescale</h4>\n            <nui-vertical-with-timescale-bar-chart-test></nui-vertical-with-timescale-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Basic horizontal bar chart</h4>\n            <nui-basic-horizontal-bar-chart-test></nui-basic-horizontal-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Time Interval bar</h4>\n            <nui-time-interval-test></nui-time-interval-test>\n        </div>\n        <div class="m-5">\n            <h4>Bar Chart with tick label max width</h4>\n            <nui-bar-chart-tick-label-max-width-test></nui-bar-chart-tick-label-max-width-test>\n        </div>\n        <div class="m-5">\n            <h4>Bar Chart with tick label max width with margin</h4>\n            <nui-bar-chart-tick-label-max-width-with-margin-test></nui-bar-chart-tick-label-max-width-with-margin-test>\n        </div>\n    </charts-test-harness>\n</div>\n'},9050:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-bar-chart-test",\n    templateUrl: "./bar-chart-test.component.html",\n})\nexport class BarChartTestComponent {}\n'},99951:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},5707:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    IBarAccessors,\n    IBarChartConfig,\n    IChart,\n    IChartSeries,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-tick-label-max-width-with-margin-test",\n    templateUrl:\n        "./bar-chart-tick-label-max-width-with-margin-test.component.html",\n})\nexport class BarChartTickLabelMaxWidthWithMarginTestComponent\n    implements OnInit\n{\n    public chart: IChart;\n    public chartAssist: ChartAssist;\n    public ngOnInit(): void {\n        const config: IBarChartConfig = { horizontal: true };\n        const accessors = barAccessors(config);\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n        const scales = barScales(config);\n\n        this.chart = new Chart(barGrid(config));\n        this.chartAssist = new ChartAssist(this.chart);\n\n        const gridConfig = this.chart.getGrid().config() as XYGridConfig;\n        gridConfig.axis.left.fit = false;\n        gridConfig.dimension.margin.left = 100;\n        gridConfig.axis.left.tickLabel.maxWidth = 50;\n\n        const seriesSet: IChartSeries<IBarAccessors>[] = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Long Name Test Long Name Test",\n            data: [20],\n        },\n        {\n            id: "series-2",\n            name: "Results",\n            data: [80],\n        },\n        {\n            id: "series-3",\n            name: "Supercalifragilisticexpialidocious",\n            data: [45],\n        },\n    ];\n}\n'},95580:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},48374:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    IBarAccessors,\n    IBarChartConfig,\n    IChart,\n    IChartSeries,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-tick-label-max-width-test",\n    templateUrl: "./bar-chart-tick-label-max-width-test.component.html",\n})\nexport class BarChartTickLabelMaxWidthTestComponent implements OnInit {\n    public chart: IChart;\n    public chartAssist: ChartAssist;\n    public ngOnInit(): void {\n        const config: IBarChartConfig = { horizontal: true };\n        const accessors = barAccessors(config);\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n        const scales = barScales(config);\n\n        this.chart = new Chart(barGrid(config));\n        this.chartAssist = new ChartAssist(this.chart);\n\n        const gridConfig = this.chart.getGrid().config() as XYGridConfig;\n        gridConfig.axis.left.tickLabel.maxWidth = 100;\n\n        const seriesSet: IChartSeries<IBarAccessors>[] = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Long Name Test Long Name Test",\n            data: [20],\n        },\n        {\n            id: "series-2",\n            name: "Results",\n            data: [80],\n        },\n        {\n            id: "series-3",\n            name: "Supercalifragilisticexpialidocious",\n            data: [45],\n        },\n    ];\n}\n'},55471:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},23285:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { AfterViewInit, Component } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    IBarAccessors,\n    IBarChartConfig,\n    IChartSeries,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-basic-horizontal-bar-chart-test",\n    templateUrl: "./basic-horizontal-bar-chart-test.component.html",\n})\nexport class BasicHorizontalBarChartTestComponent implements AfterViewInit {\n    public config: IBarChartConfig = { horizontal: true };\n    public chart = new Chart(barGrid(this.config));\n\n    constructor() {\n        const gridConfig = this.chart.getGrid().config() as XYGridConfig;\n        gridConfig.axis.left.fit = false;\n        gridConfig.dimension.margin.left = 150;\n    }\n\n    public ngAfterViewInit(): void {\n        const accessors = barAccessors(this.config);\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n\n        const scales = barScales(this.config);\n\n        const seriesSet: IChartSeries<IBarAccessors>[] = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chart.update(seriesSet);\n    }\n}\n\nfunction getData() {\n    return [\n        { id: "series-1", name: "Long Name Test Long Name Test", data: [20] },\n        { id: "series-2", name: "Results", data: [80] },\n    ];\n}\n'},87341:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart\n    id="nui-demo-bar-chart-vertical"\n    class="d-flex"\n    [chart]="chartAssist.chart"\n></nui-chart>\n'},4879:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-basic-vertical-bar-chart-test",\n    templateUrl: "./basic-vertical-bar-chart-test.component.html",\n})\nexport class BasicVerticalBarChartTestComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(barGrid()));\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [66] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},500:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart\n    style="height: 60px; max-width: 400px"\n    class="d-flex"\n    [chart]="chart"\n></nui-chart>\n'},62123:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    IAccessors,\n    IChartSeries,\n    IDataSeries,\n    InteractionLabelPlugin,\n    LinearScale,\n    Scales,\n    TimeIntervalScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "bar-chart-time-interval-dst-test",\n    templateUrl: "./bar-chart-time-interval-dst-test.component.html",\n})\nexport class BarChartTimeIntervalDstTestComponent implements OnInit {\n    @Input() data: Partial<IDataSeries<IAccessors>>[];\n    @Input() interval: moment.Duration;\n\n    public chart = new Chart(barGrid());\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        accessors.data.category = (d) => d.x;\n        accessors.data.value = (d) => d.y;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n            pointerEvents: false,\n        });\n\n        const scales: Scales = {\n            x: new TimeIntervalScale(this.interval),\n            y: new LinearScale(),\n        };\n\n        this.chart.addPlugin(new InteractionLabelPlugin());\n        this.chart.update(\n            this.data.map((s: Partial<IDataSeries<IAccessors>>) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            })) as IChartSeries<IAccessors>[]\n        );\n    }\n}\n'},19614:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport moment from "moment/moment";\n\n/** Class with common time utilities */\nexport class DateTimeUtil {\n    /**\n     * Gets the local midnight date-time of the day containing the start of daylight saving time for the provided year\n     *\n     * @param year The year to get the midnight date-time for the start of daylight saving time\n     *\n     * @returns {Date} The local midnight date-time of the day containing the start of daylight saving time for the provided year\n     */\n    public static getStartDstMidnight(year: number): Date {\n        const datesInYear = [];\n        for (let i = 1; i <= 365; i++) {\n            const d = new Date(year, 0, 1);\n            d.setDate(i);\n            datesInYear.push(d);\n        }\n\n        let foundStart = false;\n        return datesInYear.reduce((prev: Date, curr: Date) => {\n            if (curr.getTimezoneOffset() < prev.getTimezoneOffset()) {\n                foundStart = true;\n                return prev;\n            }\n            return foundStart ? prev : curr;\n        });\n    }\n\n    /**\n     * Gets the exact local date-time of the start of daylight saving time for the provided year\n     *\n     * @param year The year to get the exact date-time for the start of daylight saving time\n     *\n     * @returns {Date} The exact local date-time of the day containing the start of daylight saving time for the provided year\n     */\n    public static getStartDstHour(year: number): Date {\n        const startDstMidnight = DateTimeUtil.getStartDstMidnight(year);\n        const hoursInDstStartDay = [];\n        for (let i = 0; i < 24; i++) {\n            const d = new Date(startDstMidnight);\n            d.setHours(i);\n            hoursInDstStartDay.push(d);\n        }\n\n        let foundStart = false;\n        return hoursInDstStartDay.reduce((prev: Date, curr: Date) => {\n            if (curr.getTimezoneOffset() < prev.getTimezoneOffset()) {\n                foundStart = true;\n                return curr;\n            }\n            return foundStart ? prev : curr;\n        });\n    }\n\n    /**\n     * Gets the local midnight date-time of the day containing the end of daylight saving time for the provided year\n     *\n     * @param year The year to get the midnight date-time for the end of daylight saving time\n     *\n     * @returns {Date} The local midnight date-time of the day containing the end of daylight saving time for the provided year\n     */\n    public static getEndDstMidnight(year: number): Date {\n        const datesInYear = [];\n        for (let i = 1; i <= 365; i++) {\n            const d = new Date(year, 0, 1);\n            d.setDate(i);\n            datesInYear.push(d);\n        }\n\n        return datesInYear.reduce((prev: Date, curr: Date) => {\n            if (curr.getTimezoneOffset() > prev.getTimezoneOffset()) {\n                return prev;\n            }\n            return curr;\n        });\n    }\n\n    /**\n     * Gets the exact local date-time of the end of daylight saving time for the provided year\n     *\n     * @param year The year to get the exact date-time for the end of daylight saving time\n     *\n     * @returns {Date} The exact local date-time of the day containing the end of daylight saving time for the provided year\n     */\n    public static getEndDstHour(year: number): Date {\n        const endDstMidnight = DateTimeUtil.getEndDstMidnight(year);\n        const hoursInDstEndDay = [];\n        for (let i = 0; i < 24; i++) {\n            const d = new Date(endDstMidnight);\n            d.setHours(i);\n            hoursInDstEndDay.push(d);\n        }\n\n        return hoursInDstEndDay.reduce((prev: Date, curr: Date) => {\n            if (curr.getTimezoneOffset() > prev.getTimezoneOffset()) {\n                return moment(curr).subtract(1, "hour").toDate();\n            }\n            return prev;\n        });\n    }\n}\n'},27160:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\n\nimport { NuiDocsModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../../../common/demo-common.module";\nimport ChartDocsBarModule from "../../chart-docs-bar.module";\n\n@NgModule({\n    imports: [\n        DemoCommonModule,\n        NuiDocsModule,\n        NuiChartsModule,\n        ChartDocsBarModule,\n    ],\n    providers: [],\n})\nexport class DaylightSavingTimeTestModule {}\n'},60998:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <div class="mr-5">\n        <h3>Start of Daylight Saving Time</h3>\n        <h4>1-minute Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="startDstOneMinuteData"\n            [interval]="oneMinuteInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>1-hour Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="startDstOneHourData"\n            [interval]="oneHourInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>2-hour Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="startDstTwoHourData"\n            [interval]="twoHourInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>1-Day Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="startDstOneDayData"\n            [interval]="oneDayInterval"\n        ></bar-chart-time-interval-dst-test>\n    </div>\n    <div class="mr-5">\n        <h3>End of Daylight Saving Time</h3>\n        <h4>1-minute Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="endDstOneMinuteData"\n            [interval]="oneMinuteInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>1-hour Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="endDstOneHourData"\n            [interval]="oneHourInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>2-hour Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="endDstTwoHourData"\n            [interval]="twoHourInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h4>1-Day Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="endDstOneDayData"\n            [interval]="oneDayInterval"\n        ></bar-chart-time-interval-dst-test>\n    </div>\n    <div>\n        <h3>Inside Daylight Saving Time</h3>\n        <h4>1-Day Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="insideDstData"\n            [interval]="oneDayInterval"\n        ></bar-chart-time-interval-dst-test>\n        <h3>Outside of Daylight Saving Time</h3>\n        <h4>1-Day Interval</h4>\n        <bar-chart-time-interval-dst-test\n            [data]="outsideDstData"\n            [interval]="oneDayInterval"\n        ></bar-chart-time-interval-dst-test>\n    </div>\n</div>\n'},90716:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport { IAccessors, IDataSeries } from "@nova-ui/charts";\n\nimport { DateTimeUtil } from "./date-time-util";\n\n@Component({\n    templateUrl: "./dst-time-interval-test-page.component.html",\n})\nexport class DstTimeIntervalTestPageComponent {\n    public insideDstData = getInsideDstData();\n    public outsideDstData = getOutsideDstData();\n    public startDstOneMinuteData: Partial<IDataSeries<IAccessors>>[];\n    public startDstOneHourData: Partial<IDataSeries<IAccessors>>[];\n    public startDstTwoHourData: Partial<IDataSeries<IAccessors>>[];\n    public startDstOneDayData: Partial<IDataSeries<IAccessors>>[];\n    public endDstOneMinuteData: Partial<IDataSeries<IAccessors>>[];\n    public endDstOneHourData: Partial<IDataSeries<IAccessors>>[];\n    public endDstTwoHourData: Partial<IDataSeries<IAccessors>>[];\n    public endDstOneDayData: Partial<IDataSeries<IAccessors>>[];\n    public oneMinuteInterval = duration(1, "minute");\n    public oneDayInterval = duration(1, "days");\n    public oneHourInterval = duration(1, "hours");\n    public twoHourInterval = duration(2, "hours");\n\n    private startDstMidnight: Date;\n    private startDstHour: Date;\n    private endDstMidnight: Date;\n    private endDstHour: Date;\n\n    constructor() {\n        this.startDstMidnight = DateTimeUtil.getStartDstMidnight(2021);\n        this.startDstHour = DateTimeUtil.getStartDstHour(2021);\n        this.endDstMidnight = DateTimeUtil.getEndDstMidnight(2021);\n        this.endDstHour = DateTimeUtil.getEndDstHour(2021);\n\n        this.startDstOneMinuteData = getStartDstOneMinuteData(\n            this.startDstHour\n        );\n        this.startDstOneHourData = getStartDstOneHourData(this.startDstHour);\n        this.startDstTwoHourData = getStartDstTwoHourData(this.startDstHour);\n        this.startDstOneDayData = getStartDstOneDayData(this.startDstMidnight);\n        this.endDstOneMinuteData = getEndDstOneMinuteData(this.endDstHour);\n        this.endDstOneHourData = getEndDstOneHourData(this.endDstHour);\n        this.endDstTwoHourData = getEndDstTwoHourData(this.endDstHour);\n        this.endDstOneDayData = getEndDstOneDayData(this.endDstMidnight);\n\n        console.log(\n            "Local Time Zone:",\n            Intl.DateTimeFormat().resolvedOptions().timeZone\n        );\n    }\n}\n\nfunction getStartDstOneMinuteData(\n    startDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment(startDstHour).subtract(1, "minute").toDate(),\n                    y: 30,\n                },\n                { x: startDstHour, y: 95 },\n                { x: moment(startDstHour).add(1, "minute").toDate(), y: 15 },\n                { x: moment(startDstHour).add(2, "minutes").toDate(), y: 60 },\n                { x: moment(startDstHour).add(3, "minutes").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getStartDstOneHourData(\n    startDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(startDstHour).subtract(1, "hour").toDate(), y: 30 },\n                { x: startDstHour, y: 95 },\n                { x: moment(startDstHour).add(1, "hour").toDate(), y: 15 },\n                { x: moment(startDstHour).add(2, "hours").toDate(), y: 60 },\n                { x: moment(startDstHour).add(3, "hours").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getStartDstTwoHourData(\n    startDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment(startDstHour).subtract(2, "hours").toDate(),\n                    y: 30,\n                },\n                { x: startDstHour, y: 95 },\n                { x: moment(startDstHour).add(2, "hours").toDate(), y: 15 },\n                { x: moment(startDstHour).add(4, "hours").toDate(), y: 60 },\n                { x: moment(startDstHour).add(6, "hours").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getStartDstOneDayData(\n    startDstMidnight: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment(startDstMidnight).subtract(1, "day").toDate(),\n                    y: 30,\n                },\n                { x: startDstMidnight, y: 95 },\n                { x: moment(startDstMidnight).add(1, "day").toDate(), y: 15 },\n                { x: moment(startDstMidnight).add(2, "days").toDate(), y: 60 },\n                { x: moment(startDstMidnight).add(3, "days").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getEndDstOneMinuteData(\n    endDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(endDstHour).subtract(1, "minute").toDate(), y: 30 },\n                { x: endDstHour, y: 95 },\n                { x: moment(endDstHour).add(1, "minute").toDate(), y: 15 },\n                { x: moment(endDstHour).add(2, "minutes").toDate(), y: 60 },\n                { x: moment(endDstHour).add(3, "minutes").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getEndDstOneHourData(\n    endDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(endDstHour).subtract(1, "hour").toDate(), y: 30 },\n                { x: endDstHour, y: 95 },\n                { x: moment(endDstHour).add(1, "hour").toDate(), y: 15 },\n                { x: moment(endDstHour).add(2, "hours").toDate(), y: 60 },\n                { x: moment(endDstHour).add(3, "hours").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getEndDstTwoHourData(\n    endDstHour: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(endDstHour).subtract(2, "hours").toDate(), y: 30 },\n                { x: endDstHour, y: 95 },\n                { x: moment(endDstHour).add(2, "hours").toDate(), y: 15 },\n                { x: moment(endDstHour).add(4, "hours").toDate(), y: 60 },\n                { x: moment(endDstHour).add(6, "hours").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getEndDstOneDayData(\n    endDstMidnight: Date\n): Partial<IDataSeries<IAccessors>>[] {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment(endDstMidnight).subtract(1, "day").toDate(),\n                    y: 30,\n                },\n                { x: endDstMidnight, y: 95 },\n                { x: moment(endDstMidnight).add(1, "day").toDate(), y: 15 },\n                { x: moment(endDstMidnight).add(2, "days").toDate(), y: 60 },\n                { x: moment(endDstMidnight).add(3, "days").toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getInsideDstData(): Partial<IDataSeries<IAccessors>>[] {\n    const format = "YYYY-MM-DDTHH";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2021-07-03T0", format).toDate(), y: 30 },\n                { x: moment("2021-07-04T0", format).toDate(), y: 95 },\n                { x: moment("2021-07-05T0", format).toDate(), y: 15 },\n                { x: moment("2021-07-06T0", format).toDate(), y: 60 },\n                { x: moment("2021-07-07T0", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n\nfunction getOutsideDstData(): Partial<IDataSeries<IAccessors>>[] {\n    const format = "YYYY-MM-DDTHH";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2020-12-01T0", format).toDate(), y: 30 },\n                { x: moment("2020-12-02T0", format).toDate(), y: 95 },\n                { x: moment("2020-12-03T0", format).toDate(), y: 15 },\n                { x: moment("2020-12-04T0", format).toDate(), y: 60 },\n                { x: moment("2020-12-05T0", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n'},3374:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div id="nui-demo-bar-chart-horizontal-with-legend" class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [interactive]="false"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="legendSeries.data[0]"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},39730:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-horizontal-with-legend-bar-chart-test",\n    templateUrl: "./horizontal-with-legend-bar-chart-test.component.html",\n})\nexport class HorizontalWithLegendBarChartTestComponent implements OnInit {\n    public barConfig = { horizontal: true };\n    public grid = barGrid(this.barConfig);\n    public chartAssist = new ChartAssist(new Chart(this.grid));\n\n    public ngOnInit(): void {\n        this.grid.config().axis.left.visible = false;\n        this.grid.config().dimension.margin.left = 0;\n\n        const accessors = barAccessors(\n            this.barConfig,\n            this.chartAssist.palette.standardColors\n        );\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("y"),\n        });\n        const scales = barScales(this.barConfig);\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [66] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},49518:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},61236:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    Chart,\n    LinearScale,\n    Scales,\n    TimeIntervalScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-time-interval-test",\n    templateUrl: "./time-interval.test.component.html",\n})\nexport class TimeIntervalTestComponent implements OnInit {\n    public chart = new Chart(barGrid());\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        accessors.data.category = (d) => d.x;\n        accessors.data.value = (d) => d.y;\n\n        const renderer = new BarRenderer();\n\n        const scales: Scales = {\n            x: new TimeIntervalScale(duration(1, "days")),\n            y: new LinearScale(),\n        };\n\n        this.chart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2020-07-01T0", format).toDate(), y: 30 },\n                { x: moment("2020-07-02T0", format).toDate(), y: 95 },\n                { x: moment("2020-07-03T0", format).toDate(), y: 15 },\n                { x: moment("2020-07-04T0", format).toDate(), y: 60 },\n                { x: moment("2020-07-05T0", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n'},92933:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div id="nui-demo-bar-chart-vertical-with-legend" class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [interactive]="false"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\'] | titlecase"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="legendSeries.data"\n                    backgroundColor="transparent"\n                >\n                </nui-rich-legend-tile>\n                <nui-icon\n                    [icon]="\'status_\' + legendSeries[\'name\'] | lowercase"\n                ></nui-icon>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},54146:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n    CHART_PALETTE_CS_S_EXTENDED,\n    MappedValueProvider,\n} from "@nova-ui/charts";\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n@Component({\n    selector: "nui-vertical-with-legend-bar-chart-test",\n    templateUrl: "./vertical-with-legend-bar-chart-test.component.html",\n})\nexport class VerticalWithLegendBarChartTestComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(barGrid()));\n\n    public ngOnInit(): void {\n        const statusColorProvider = createColorProvider();\n\n        const accessors = barAccessors();\n        accessors.series.color = (seriesId: string, dataSeries: any) =>\n            statusColorProvider.get(dataSeries.name);\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n        scales.x.formatters.tick = (value: string) =>\n            value.charAt(0).toUpperCase() + value.slice(1);\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\nfunction createColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Unmanaged]: CHART_PALETTE_CS_S_EXTENDED[10],\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n    });\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: Status.Up, name: Status.Up, data: [42] },\n        { id: Status.Warning, name: Status.Warning, data: [14] },\n        { id: Status.Critical, name: Status.Critical, data: [8] },\n        { id: Status.Down, name: Status.Down, data: [7] },\n        { id: Status.Unmanaged, name: Status.Unmanaged, data: [5] },\n        { id: Status.Unknown, name: Status.Unknown, data: [3] },\n    ];\n}\n'},8402:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},28428:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { Moment } from "moment/moment";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    Chart,\n    IBarAccessors,\n    IChartSeries,\n    NoopAccessors,\n    NoopRenderer,\n    NoopScale,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-vertical-with-timescale-bar-chart-test",\n    templateUrl: "./vertical-with-timescale-bar-chart-test.component.html",\n})\nexport class VerticalWithTimescaleBarChartTestComponent implements OnInit {\n    public chart = new Chart(barGrid());\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        const renderer = new BarRenderer();\n\n        const scales = barScales();\n\n        const start = moment([2018, 7, 4]);\n        const seriesSet = getData(start).map(\n            (d): IChartSeries<IBarAccessors> => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        scales.x.fixDomain(seriesSet.map((s) => s.data[0].category));\n\n        const scaleId = "bottom";\n        const time = new TimeScale(scaleId);\n        const end = start.clone().add(seriesSet.length, "hour");\n        time.fixDomain([start.clone().toDate(), end.toDate()]);\n\n        // This is the most crucial part: users need to add "fake" series, so framework would be able to use provided time scale.\n        // You need to provide scale for x or y and provide the id (for bottom or left scale). Id must be the same as the one used to create scale.\n        // We suggest using Noops (render, accessor, other scale) for this fake series.\n        seriesSet.push({\n            id: "0",\n            name: "hidden",\n            data: [],\n            accessors: new NoopAccessors(),\n            renderer: new NoopRenderer(),\n            scales: {\n                x: time,\n                y: new NoopScale(),\n            },\n        });\n        (this.chart.getGrid() as XYGrid).bottomScaleId = scaleId;\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData(start: Moment) {\n    const values = [66, 14, 5, 40, 3, 23, 15];\n\n    const dataSet = [];\n    for (let i = 0; i < values.length; i++) {\n        const date = start.clone().add(i, "hour");\n        dataSet.push({\n            id: `id-${i}`,\n            name: date.toString(),\n            data: [\n                {\n                    value: values[i],\n                    category: date.toString(),\n                    ["__bar"]: {\n                        start: 0,\n                        end: values[i],\n                    },\n                },\n            ],\n        });\n    }\n\n    return dataSet;\n}\n'},17007:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},49791:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    LinearScale,\n    Scales,\n    TimeIntervalScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-time-interval-example",\n    templateUrl: "./bar-chart-time-interval.example.component.html",\n})\nexport class BarChartTimeIntervalExampleComponent implements OnInit {\n    public chart = new Chart(barGrid());\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        accessors.data.category = (d) => d.x;\n        accessors.data.value = (d) => d.y;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        const scales: Scales = {\n            x: new TimeIntervalScale(duration(1, "days")),\n            y: new LinearScale(),\n        };\n\n        this.chart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2020-07-01T0", format).toDate(), y: 30 },\n                { x: moment("2020-07-02T0", format).toDate(), y: 95 },\n                { x: moment("2020-07-03T0", format).toDate(), y: 15 },\n                { x: moment("2020-07-04T0", format).toDate(), y: 60 },\n                { x: moment("2020-07-05T0", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n'},65529:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},81867:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { Moment } from "moment/moment";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    Chart,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartSeries,\n    LinearScale,\n    NoopAccessors,\n    NoopRenderer,\n    NoopScale,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-time-scale-example",\n    templateUrl: "./bar-chart-time-scale.example.component.html",\n})\nexport class BarChartTimeScaleExampleComponent implements OnInit {\n    public chart = new Chart(barGrid());\n\n    public ngOnInit(): void {\n        const accessors = barAccessors();\n        const renderer = new BarRenderer();\n\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.domainCalculator = getAutomaticDomainWithIncludedInterval([\n            0, 0,\n        ]);\n        const scales: any = {\n            x: bandScale,\n            y: linearScale,\n        };\n\n        const start = moment([2018, 7, 4]);\n        const seriesSet = getData(start).map(\n            (d): IChartSeries<IAccessors> => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        bandScale.fixDomain(seriesSet.map((s) => s.data[0].category));\n\n        const scaleId = "bottom";\n        const time = new TimeScale(scaleId);\n        const end = start.clone().add(seriesSet.length, "hour");\n        time.fixDomain([start.clone().toDate(), end.toDate()]);\n\n        // This is the most crucial part: users need to add "fake" series, so framework would be able to use provided time scale.\n        // You need to provide scale for x or y and provide the id (for bottom or left scale). Id must be the same as the one used to create scale.\n        // We suggest using Noops (render, accessor, other scale) for this fake series.\n        seriesSet.push({\n            id: "0",\n            name: "hidden",\n            data: [],\n            accessors: new NoopAccessors(),\n            renderer: new NoopRenderer(),\n            scales: {\n                x: time,\n                y: new NoopScale(),\n            },\n        });\n        (this.chart.getGrid() as XYGrid).bottomScaleId = scaleId;\n\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData(start: Moment) {\n    const values = [66, 14, 5, 40, 3, 23, 15];\n\n    const dataSet = [];\n    for (let i = 0; i < values.length; i++) {\n        const date = start.clone().add(i, "hour");\n        dataSet.push({\n            id: `id-${i}`,\n            name: date.toString(),\n            data: [\n                {\n                    value: values[i],\n                    category: date.toString(),\n                    ["__bar"]: {\n                        start: 0,\n                        end: values[i],\n                    },\n                },\n            ],\n        });\n    }\n\n    return dataSet;\n}\n'},29986:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="legendSeries.data[0]"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},8004:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-with-legend-example",\n    templateUrl: "./bar-chart-with-legend.example.component.html",\n})\nexport class BarChartWithLegendExampleComponent implements OnInit {\n    public barConfig = { horizontal: false };\n\n    // the usage of ChartAssist helps with connecting the chart with the legend\n    public chartAssist = new ChartAssist(new Chart(barGrid(this.barConfig)));\n\n    public ngOnInit(): void {\n        const accessors = barAccessors(\n            this.barConfig,\n            this.chartAssist.palette.standardColors\n        );\n        const renderer = new BarRenderer({\n            // highlightStrategy determines how the bar chart should manage highlighting.\n            // BarSeriesHighlightStrategy emphasizes the entire series on hovering a single bar,\n            // which also triggers emphasis on the legend tile.\n            highlightStrategy: new BarSeriesHighlightStrategy(\n                "x" /* "x" determines which scale the highlight should be driven by */\n            ),\n        });\n        const scales = barScales(this.barConfig);\n\n        // it is important to update the chart via the chartAssist so that the legend is also updated\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [66] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},15353:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},86286:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    Chart,\n    IBarChartConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-example",\n    templateUrl: "./bar-chart.example.component.html",\n})\nexport class BarChartExampleComponent implements OnInit {\n    // this configuration passed to barGrid, barAccessors, barScales determines the orientation of the bar chart\n    public config = { horizontal: false } as IBarChartConfig;\n\n    public chart = new Chart(barGrid(this.config));\n\n    public ngOnInit(): void {\n        const accessors = barAccessors(this.config);\n        const renderer = new BarRenderer();\n        const scales = barScales(this.config);\n\n        this.chart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [66] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},97952:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Bar Charts</h1>\n\n<p>\n    A bar chart is a graph that presents categorical data with rectangular bars\n    whose heights or lengths, depending on orientation, are proportional to the\n    values that they represent.\n</p>\n<p>\n    A bar graph shows comparisons among <b>discrete categories</b>. One axis of\n    the chart shows the specific categories being compared, and the other axis\n    represents the measured value. Advanced types of bar charts can be clustered\n    in groups of more than one, showing the values of more than one measured\n    variable. Examples of this include Grouped Bar charts and Stacked Bar charts\n    (not covered in the scope of this page).\n</p>\n\n<h2>Prerequisites</h2>\n<p>For any bar chart you will need:</p>\n<ol>\n    <li>\n        <strong>Grid.</strong> Just use good old\n        <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code>\n        with\n        <code\n            ><a href="../classes/BarGridConfig.html" target="_blank"\n                >BarGridConfig</a\n            ></code\n        >\n        or\n        <code\n            ><a href="../classes/BarHorizontalGridConfig.html" target="_blank"\n                >BarHorizontalGridConfig</a\n            ></code\n        >. To make it easier we provide you with a convenience function\n        <code\n            ><a href="../miscellaneous/functions.html#barGrid" target="_blank"\n                >barGrid</a\n            ></code\n        >\n        that will create an instance for you.\n    </li>\n    <li>\n        <strong>Accessors.</strong> There are pre-configured\n        <code\n            ><a href="../classes/HorizontalBarAccessors.html" target="_blank"\n                >HorizontalBarAccessors</a\n            ></code\n        >\n        or\n        <code\n            ><a href="../classes/VerticalBarAccessors.html" target="_blank"\n                >VerticalBarAccessors</a\n            ></code\n        >\n        that you can use. And, the\n        <code\n            ><a\n                href="../miscellaneous/functions.html#barAccessors"\n                target="_blank"\n                >barAccessors</a\n            ></code\n        >\n        function that will create one for you.\n    </li>\n    <li>\n        <strong>Renderer.</strong> Create an instance of the\n        <code\n            ><a href="../classes/BarRenderer.html" target="_blank"\n                >BarRenderer</a\n            ></code\n        >. When instantiating the <code>BarRenderer</code>, you can optionally\n        pass a configuration object of type\n        <code\n            ><a href="../interfaces/IBarRendererConfig.html" target="_blank"\n                >IBarRendererConfig</a\n            ></code\n        >\n        to make certain modifications to the behavior of the chart.\n    </li>\n    <li>\n        <strong>Scales.</strong> For the "category" axis you should use a\n        band-ish scale. For the opposite axis with "values" any supported scale\n        should work. Our\n        <code\n            ><a href="../miscellaneous/functions.html#barScales" target="_blank"\n                >barScales</a\n            ></code\n        >\n        function returns the proper combination of\n        <code\n            ><a href="../classes/BandScale.html" target="_blank"\n                >BandScale</a\n            ></code\n        >\n        vs a value scale (<code\n            ><a href="../classes/LinearScale.html" target="_blank"\n                >LinearScale</a\n            ></code\n        >\n        by default) according to the provided configuration.\n    </li>\n</ol>\n\n<h2>Basic Usage</h2>\n<p>\n    There are many possible scenarios of data visualization using a bar chart,\n    but the simplest one is visualizing values divided among several\n    unstructured categories. In this use case, we configure the chart using our\n    convenience methods that provide defaults for generic use cases. In this\n    case, the chart dimension is defined by a\n    <code\n        ><a href="../classes/LinearScale.html" target="_blank"\n            >LinearScale</a\n        ></code\n    >\n    on the <code>y</code> axis representing the values and\n    <code\n        ><a href="../classes/BandScale.html" target="_blank">BandScale</a></code\n    >\n    on the <code>x</code> axis representing the categories. Grid margins and\n    labels are set up properly and most importantly, a proper data accessors\n    implementation translates the input data into an appropriate coordinate\n    system. All that happens right in front of your eyes in the following\n    example, where all the complexity has been hidden behind the convenience\n    functions.\n</p>\n<nui-example-wrapper filenamePrefix="bar-chart" exampleTitle="Basic Usage">\n    <nui-bar-chart-example></nui-bar-chart-example>\n</nui-example-wrapper>\n\n<h2>Orientation</h2>\n\n<p>\n    For switching the orientation of a bucketed bar chart layout you\'ll need a\n    different grid configuration, set of scales, accessors, and plugin\n    configurations. Or, if you\'re using convenience functions, just pass an\n    <code\n        ><a href="../interfaces/IBarChartConfig.html" target="_blank"\n            >IBarChartConfig</a\n        ></code\n    >\n    object with the <code>horizontal</code> property set to <code>true</code>.\n</p>\n\n<pre>{{ horizontalConfig }}</pre>\n\n<nui-message type="info" [allowDismiss]="false">\n    If no configuration is passed - a vertical layout will be applied by\n    default.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="bar-chart-horizontal"\n    exampleTitle="Horizontal Orientation"\n>\n    <nui-bar-chart-horizontal-example></nui-bar-chart-horizontal-example>\n</nui-example-wrapper>\n\n<h2>Legend</h2>\n<p>\n    Adding a legend to the chart is the same as with other chart types. The\n    usage of\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >\n    is really recommended here.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-with-legend"\n    exampleTitle="Adding a Legend"\n>\n    <nui-bar-chart-with-legend-example></nui-bar-chart-with-legend-example>\n</nui-example-wrapper>\n\n<h2>Time Interval</h2>\n<p>\n    The discrete categories used for value comparison can also take the form of\n    time intervals in which each value of a data set is visualized as a bar\n    within a time interval. To create a bar visualization over a series of time\n    intervals, you can set the scale for the x-axis to an instance of\n    <a href="../classes/TimeIntervalScale.html" target="_blank"\n        ><code>TimeIntervalScale</code></a\n    >\n    and pass the desired interval of type moment\n    <a href="https://momentjs.com/docs/#/durations/" target="_blank"\n        ><code>Duration</code>\n    </a>\n    to the\n    <a href="../classes/TimeIntervalScale.html" target="_blank"\n        ><code>TimeIntervalScale</code></a\n    >\'s constructor.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-time-interval"\n    exampleTitle="Time Interval"\n>\n    <nui-bar-chart-time-interval-example></nui-bar-chart-time-interval-example>\n</nui-example-wrapper>\n\n<h2>Tooltips</h2>\n<p>\n    For information about how to add tooltips to bar charts, take a look at the\n    <a href="../additional-documentation/plugins/tooltips.html" target="_parent"\n        >tooltips</a\n    >\n    page.\n</p>\n\n<h2>Popovers</h2>\n<p>\n    For information about how to add popovers to bar charts, take a look at the\n    <a href="../additional-documentation/plugins/popovers.html" target="_parent"\n        >popovers</a\n    >\n    page.\n</p>\n'},26076:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-bar",\n    templateUrl: "./chart-docs-bar.component.html",\n})\nexport class ChartDocsBarComponent {\n    public horizontalConfig = `public config = { horizontal: true } as IBarChartConfig;\n...\n... barGrid(this.config) ...\n... barScales(this.config) ...\n... barAccessors(this.config) ...`;\n}\n'},74515:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartHorizontalExampleComponent } from "./bar-chart-horizontal/bar-chart-horizontal.example.component";\nimport { BarChartTestComponent } from "./bar-chart-test/bar-chart-test.component";\n// eslint-disable-next-line max-len\nimport { BarChartTickLabelMaxWidthWithMarginTestComponent } from "./bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component";\nimport { BarChartTickLabelMaxWidthTestComponent } from "./bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component";\nimport { BasicHorizontalBarChartTestComponent } from "./bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component";\nimport { BasicVerticalBarChartTestComponent } from "./bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component";\nimport { BarChartTimeIntervalDstTestComponent } from "./bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component";\nimport { DstTimeIntervalTestPageComponent } from "./bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component";\nimport { HorizontalWithLegendBarChartTestComponent } from "./bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component";\nimport { TimeIntervalTestComponent } from "./bar-chart-test/time-interval/time-interval.test.component";\nimport { VerticalWithLegendBarChartTestComponent } from "./bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component";\nimport { VerticalWithTimescaleBarChartTestComponent } from "./bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component";\nimport { BarChartTimeIntervalExampleComponent } from "./bar-chart-time-interval/bar-chart-time-interval.example.component";\nimport { BarChartTimeScaleExampleComponent } from "./bar-chart-time-scale/bar-chart-time-scale.example.component";\nimport { BarChartWithLegendExampleComponent } from "./bar-chart-with-legend/bar-chart-with-legend.example.component";\nimport { BarChartExampleComponent } from "./bar-chart/bar-chart.example.component";\nimport { ChartDocsBarComponent } from "./chart-docs-bar.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsBarComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "bar-chart",\n        component: BarChartExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "horizontal",\n        component: BarChartHorizontalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "with-legend",\n        component: BarChartWithLegendExampleComponent,\n    },\n    {\n        path: "test",\n        component: BarChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "dst-time-interval-test",\n        component: DstTimeIntervalTestPageComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "time-interval",\n        component: BarChartTimeIntervalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "vertical-bar-test",\n        component: BasicVerticalBarChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "horizontal-bar-test",\n        component: BasicHorizontalBarChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bar-chart-max-width-test",\n        component: BarChartTickLabelMaxWidthTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bar-chart-max-width-with-margin-test",\n        component: BarChartTickLabelMaxWidthWithMarginTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsBarComponent,\n        BarChartExampleComponent,\n        BarChartHorizontalExampleComponent,\n        BarChartTimeScaleExampleComponent,\n        BarChartTimeIntervalExampleComponent,\n        BarChartTickLabelMaxWidthTestComponent,\n        BarChartTickLabelMaxWidthWithMarginTestComponent,\n        BarChartWithLegendExampleComponent,\n        BarChartTestComponent,\n        BasicHorizontalBarChartTestComponent,\n        BasicVerticalBarChartTestComponent,\n        DstTimeIntervalTestPageComponent,\n        BarChartTimeIntervalDstTestComponent,\n        VerticalWithTimescaleBarChartTestComponent,\n        VerticalWithLegendBarChartTestComponent,\n        HorizontalWithLegendBarChartTestComponent,\n        TimeIntervalTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("bar"),\n        },\n    ],\n})\nexport default class ChartDocsBarModule {}\n'},450:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    \x3c!-- This is where we set the minimum height of the chart to make more space for the bars --\x3e\n    <div class="chart" style="min-height: 500px">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="true"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.value || "no data" }}</span>\n    </div>\n</ng-template>\n'},14946:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    IBarChartConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-grouped-horizontal-example",\n    templateUrl: "./bar-chart-grouped-horizontal.example.component.html",\n})\nexport class BarChartGroupedHorizontalExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    // The configuration to be used with plugins and convenience functions\n    public barConfig: IBarChartConfig = { horizontal: true, grouped: true };\n    public tooltipsPlugin = new BarTooltipsPlugin(this.barConfig);\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid(this.barConfig));\n        this.chartAssist = new ChartAssist(chart);\n\n        chart.addPlugin(this.tooltipsPlugin);\n\n        const accessors = barAccessors(this.barConfig);\n        // Both category and sub-category need to be defined to properly draw groups.\n        accessors.data.category = (data, i, series, dataSeries) => [\n            data.name,\n            dataSeries.name,\n        ];\n\n        // BarHighlightStrategy should be applied to a different axis in case of horizontal layout\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n\n        // Nested BandScales with a LinearScale for values can be instantiated with the barAccessors function\n        const scales = barScales(this.barConfig);\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                { name: "Q2 2018", value: 122 },\n                { name: "Q3 2018", value: 141 },\n                { name: "Q4 2018", value: 66 },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                { name: "Q2 2018", value: 198 },\n                { name: "Q3 2018", value: 208 },\n                { name: "Q4 2018", value: 233 },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                // sparse data is handled as well\n                // { "name": "Q2 2018", "value": 15 },\n                { name: "Q3 2018", value: 208 },\n                { name: "Q4 2018", value: 123 },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                { name: "Q1 2018", value: 11 },\n                { name: "Q2 2018", value: 99 },\n                { name: "Q3 2018", value: 17 },\n                { name: "Q4 2018", value: 25 },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                { name: "Q1 2018", value: 121 },\n                { name: "Q2 2018", value: 222 },\n                { name: "Q3 2018", value: 319 },\n                { name: "Q4 2018", value: 328 },\n            ],\n        },\n    ];\n}\n'},14761:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="true"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="\n                dataPoint.dataSeries.accessors.series.marker(dataPoint.seriesId)\n            "\n            [color]="\n                dataPoint.dataSeries.accessors.series.color(dataPoint.seriesId)\n            "\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.value || "no data" }}</span>\n    </div>\n</ng-template>\n'},70364:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    IBarChartConfig,\n    InteractionLabelPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-grouped-example",\n    templateUrl: "./bar-chart-grouped.example.component.html",\n})\nexport class BarChartGroupedExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public tooltipsPlugin = new BarTooltipsPlugin();\n    public config = { grouped: true, horizontal: false } as IBarChartConfig;\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid(this.config));\n        this.chartAssist = new ChartAssist(chart);\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        chart.addPlugin(new InteractionLabelPlugin());\n        chart.addPlugin(this.tooltipsPlugin);\n\n        // 1. Call the convenience function to create bar chart scales. Like this:\n        const scales = barScales(this.config);\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        // 2. Make your category accessor to return the value like [ category, subCategory ]\n        const accessors = barAccessors(this.config);\n        accessors.data.category = (data, i, series, dataSeries) => [\n            data.name,\n            dataSeries.name,\n        ];\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                { name: "Q2 2018", value: 122 },\n                { name: "Q3 2018", value: 141 },\n                { name: "Q4 2018", value: 66 },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                { name: "Q2 2018", value: 198 },\n                { name: "Q3 2018", value: 208 },\n                { name: "Q4 2018", value: 233 },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                { name: "Q1 2018", value: 167 },\n                // sparse data is handled as well\n                // { "name": "Q2 2018", "value": 15 },\n                { name: "Q3 2018", value: 208 },\n                { name: "Q4 2018", value: 123 },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                { name: "Q1 2018", value: 11 },\n                { name: "Q2 2018", value: 99 },\n                { name: "Q3 2018", value: 17 },\n                { name: "Q4 2018", value: 25 },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                { name: "Q1 2018", value: 121 },\n                { name: "Q2 2018", value: 222 },\n                { name: "Q3 2018", value: 319 },\n                { name: "Q4 2018", value: 328 },\n            ],\n        },\n    ];\n}\n'},60768:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, %</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="true"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.id"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ getTitleFromDataPoint(dataPoint) }}</span>\n    </div>\n</ng-template>\n'},51871:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    stack,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-percentage-example",\n    templateUrl: "./bar-chart-percentage.example.component.html",\n})\nexport class BarChartPercentageExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public tooltipsPlugin = new BarTooltipsPlugin();\n    private mbpsUnit = $localize`Mbps`;\n\n    constructor() {}\n\n    public ngOnInit(): void {\n        this.chartAssist = new ChartAssist(new Chart(barGrid()), stack);\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist.chart.addPlugin(this.tooltipsPlugin);\n\n        const accessors = barAccessors();\n        // Note changed data accessor matching value.percentageValue instead of just value\n        // accessors.data.value = (data: any) => data.percentageValue;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        const dataSeriesSet = getData();\n\n        // TODO: make the calculation to be a part of data preprocessing\n\n        // Preprocess data to have both percentage and real values\n        // 1. Gather sum of all items per category\n        // const sums = dataSeriesSet.reduce((acc: number[], next: any) => acc.map((v: any, i: number) => v + next.data[i].value), [0, 0, 0, 0]);\n        // 2. Normalize data using the sum\n        // dataSeriesSet.forEach((dataSeries: any) => {\n        //     dataSeries.data.forEach((d: any, i: number) => {\n        //         d.percentageValue = d.value / sums[i] * 100;\n        //     });\n        // });\n\n        const chartSeriesSet = dataSeriesSet.map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(chartSeriesSet);\n    }\n\n    public getTitleFromDataPoint(dataPoint: any): string {\n        // This generates content for a tooltip.\n        // Both seriesId and the data of the corresponding bar are available in the tooltip.\n        return `${dataPoint.seriesId}: ${dataPoint.data.value}${\n            this.mbpsUnit\n        } (${Math.round(dataPoint.data.percentageValue)}%)`;\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                { category: "Q2 2018", value: 122 },\n                { category: "Q3 2018", value: 141 },\n                { category: "Q4 2018", value: 66 },\n            ],\n        },\n        {\n            id: "Austin",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                { category: "Q2 2018", value: 198 },\n                { category: "Q3 2018", value: 208 },\n                { category: "Q4 2018", value: 233 },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                { category: "Q2 2018", value: 15 },\n                { category: "Q3 2018", value: 208 },\n                { category: "Q4 2018", value: 123 },\n            ],\n        },\n        {\n            id: "Newcastle",\n            data: [\n                { category: "Q1 2018", value: 11 },\n                { category: "Q2 2018", value: 99 },\n                { category: "Q3 2018", value: 17 },\n                { category: "Q4 2018", value: 25 },\n            ],\n        },\n        {\n            id: "Kyiv",\n            data: [\n                { category: "Q1 2018", value: 121 },\n                { category: "Q2 2018", value: 222 },\n                { category: "Q3 2018", value: 319 },\n                { category: "Q4 2018", value: 328 },\n            ],\n        },\n    ];\n}\n'},54166:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, Mbps</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.value }}</span>\n    </div>\n</ng-template>\n'},87427:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarHorizontalGridConfig,\n    BarRenderer,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    HorizontalBarAccessors,\n    LinearScale,\n    Scales,\n    stack,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-stacked-horizontal-example",\n    templateUrl: "./bar-chart-stacked-horizontal.example.component.html",\n})\nexport class BarChartStackedHorizontalExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public tooltipsPlugin = new BarTooltipsPlugin();\n\n    public ngOnInit(): void {\n        const gridConfig = new BarHorizontalGridConfig();\n\n        const chart = new Chart(new XYGrid(gridConfig));\n        chart.addPlugin(this.tooltipsPlugin);\n        this.chartAssist = new ChartAssist(chart, stack);\n\n        const accessors = new HorizontalBarAccessors();\n        // This matches field in data by which chart preprocessor will gather categories to build stacks\n        accessors.data.category = (data: any) => data.name;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n\n        const scales: Scales = {\n            y: new BandScale(),\n            x: new LinearScale(),\n        };\n\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                // Please note the fact that not all categories are required to be present in every data point.\n                // Sparse data is ok too.\n                // {\n                //     "name": "Q2 2018",\n                //     "value": 198,\n                // },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 15,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},79251:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, Mbps</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="true"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.id"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.value }}</span>\n    </div>\n</ng-template>\n'},34994:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    stack,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-stacked-example",\n    templateUrl: "./bar-chart-stacked.example.component.html",\n})\nexport class BarChartStackedExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public tooltipsPlugin = new BarTooltipsPlugin();\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid());\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        chart.addPlugin(new InteractionLabelPlugin());\n        chart.addPlugin(this.tooltipsPlugin);\n\n        // "stack" is a function that calls data preprocessor for recalculating stacks\n        this.chartAssist = new ChartAssist(chart, stack);\n\n        const accessors = barAccessors();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                { category: "Q2 2018", value: 122 },\n                { category: "Q3 2018", value: 141 },\n                { category: "Q4 2018", value: 66 },\n            ],\n        },\n        {\n            id: "Austin",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                // Please note the fact that not all categories are required to be present in every data point.\n                // Sparse data is ok too.\n                // { "category": "Q2 2018", "value": 198 },\n                { category: "Q3 2018", value: 208 },\n                { category: "Q4 2018", value: 233 },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            data: [\n                { category: "Q1 2018", value: 167 },\n                { category: "Q2 2018", value: 15 },\n                { category: "Q3 2018", value: 208 },\n                { category: "Q4 2018", value: 123 },\n            ],\n        },\n        {\n            id: "Newcastle",\n            data: [\n                { category: "Q1 2018", value: 11 },\n                { category: "Q2 2018", value: 99 },\n                { category: "Q3 2018", value: 17 },\n                { category: "Q4 2018", value: 25 },\n            ],\n        },\n        {\n            id: "Kyiv",\n            data: [\n                { category: "Q1 2018", value: 121 },\n                { category: "Q2 2018", value: 222 },\n                { category: "Q3 2018", value: 319 },\n                { category: "Q4 2018", value: 328 },\n            ],\n        },\n    ];\n}\n'},43270:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <div class="m-5">\n            <h4>Basic Stacked Horizontal Bar Chart</h4>\n            <nui-basic-stacked-horizontal-bar-chart-test></nui-basic-stacked-horizontal-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Basic Stacked Vertical Bar Chart</h4>\n            <nui-basic-stacked-vertical-bar-chart-test></nui-basic-stacked-vertical-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Grouped Horizontal Bar Chart</h4>\n            <nui-grouped-horizontal-bar-chart-test></nui-grouped-horizontal-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Grouped Vertical Bar Chart</h4>\n            <nui-grouped-vertical-bar-chart-test></nui-grouped-vertical-bar-chart-test>\n        </div>\n        <div class="m-5">\n            <h4>Proportional Vertical Bar Chart</h4>\n            <nui-proportional-vertical-bar-chart-test></nui-proportional-vertical-bar-chart-test>\n        </div>\n    </charts-test-harness>\n</div>\n'},90548:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-bar-bucketed-chart-test",\n    templateUrl: "./bar-chart-bucketed-test.component.html",\n})\nexport class BarChartBucketedTestComponent {}\n'},36383:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div id="nui-demo-horizontal-stacked-bat-chart" class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, Mbps</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},27360:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    IBarChartConfig,\n    stack,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-basic-stacked-horizontal-bar-chart-test",\n    templateUrl: "./basic-stacked-horizontal-bar-chart-test.component.html",\n})\nexport class BasicStackedHorizontalBarChartTestComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        const config = { horizontal: true } as IBarChartConfig;\n\n        const chart = new Chart(barGrid(config));\n        this.chartAssist = new ChartAssist(chart, stack);\n\n        const accessors = barAccessors(config);\n        // This matches field in data by which chart preprocessor will gather categories to build stacks\n        accessors.data.category = (data: any) => data.name;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n\n        const scales = barScales(config);\n\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                // Please note the fact that not all categories are required to be present in every data point.\n                // Sparse data is ok too.\n                // {\n                //     "name": "Q2 2018",\n                //     "value": 198,\n                // },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 15,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},99923:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div id="nui-demo-vertical-stacked-bar-chart" class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, Mbps</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},6302:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    LinearScale,\n    Scales,\n    stack,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-basic-stacked-vertical-bar-chart-test",\n    templateUrl: "./basic-stacked-vertical-bar-chart-test.component.html",\n})\nexport class BasicStackedVerticalBarChartTestComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid());\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist = new ChartAssist(chart, stack);\n\n        const accessors = barAccessors();\n        // This matches field in data by which chart preprocessor will gather categories to build stacks\n        accessors.data.category = (data: any) => data.name;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        const scales: Scales = {\n            x: new BandScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018 LONG NAME TEST LONG NAME TEST LONG NAME TEST",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                // Please note the fact that not all categories are required to be present in every data point.\n                // Sparse data is ok too.\n                // {\n                //     "name": "Q2 2018 LONG NAME TEST LONG NAME TEST LONG NAME TEST",\n                //     "value": 198,\n                // },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018 LONG NAME TEST LONG NAME TEST LONG NAME TEST",\n                    value: 15,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018 LONG NAME TEST LONG NAME TEST LONG NAME TEST",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018 LONG NAME TEST LONG NAME TEST LONG NAME TEST",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},6053:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart" [style.min-height.px]="\'500\'">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},93558:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    IBarChartConfig,\n    INTERACTION_DATA_POINTS_EVENT,\n    LinearScale,\n    Scales,\n    SELECT_DATA_POINT_EVENT,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-grouped-horizontal-bar-chart-test",\n    templateUrl: "./grouped-horizontal-bar-chart-test.component.html",\n})\nexport class GroupedHorizontalBarChartTestComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public barConfig: IBarChartConfig = { horizontal: true };\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid(this.barConfig));\n        this.chartAssist = new ChartAssist(chart);\n\n        const accessors = barAccessors(\n            this.barConfig,\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        // Both category and sub-category need to be defined to properly draw groups.\n        accessors.data.category = (data: any) => [data.name, data.subCategory];\n\n        const bandScale = new BandScale().reverse();\n        bandScale.padding(0.25); // TODO: fix!!!\n        bandScale.innerScale = new BandScale();\n\n        const scales: Scales = {\n            x: new LinearScale(),\n            y: bandScale,\n        };\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("y"),\n        });\n\n        const mappedSeries = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Sample events that can be used in order to handle click or highlighting of certain status\n        chart\n            .getEventBus()\n            .getStream(INTERACTION_DATA_POINTS_EVENT)\n            .subscribe(console.log);\n        chart\n            .getEventBus()\n            .getStream(SELECT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n\n        this.chartAssist.update(mappedSeries);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Brno",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Brno",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Brno",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Brno",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Austin",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Austin",\n                    value: 198,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Austin",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Austin",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Edinburgh",\n                    value: 167,\n                },\n                // sparse data is handled as well\n                // {\n                //     "name": "Q2 2018",\n                //     "subCategory": "Edinburgh",\n                //     "value": 15,\n                // },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Edinburgh",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Edinburgh",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Newcastle",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Newcastle",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Newcastle",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Newcastle",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Kyiv",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Kyiv",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Kyiv",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Kyiv",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},13731:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},61774:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    INTERACTION_DATA_POINTS_EVENT,\n    LinearScale,\n    Scales,\n    SELECT_DATA_POINT_EVENT,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-grouped-vertical-bar-chart-test",\n    templateUrl: "./grouped-vertical-bar-chart-test.component.html",\n})\nexport class GroupedVerticalBarChartTestComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public accessors = barAccessors();\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid());\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        chart.addPlugin(new InteractionLabelPlugin());\n\n        const bandScale = new BandScale();\n        bandScale.padding(0.25);\n        bandScale.innerScale = new BandScale();\n\n        const linearScale = new LinearScale();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        this.accessors.data.category = (data: any) => [\n            data.name,\n            data.subCategory,\n        ];\n\n        this.chartAssist = new ChartAssist(chart);\n\n        const scales: Scales = {\n            x: bandScale,\n            y: linearScale,\n        };\n\n        const mappedSeries = getData().map((d) => ({\n            ...d,\n            accessors: this.accessors,\n            renderer,\n            scales,\n        }));\n\n        // Sample events that can be used in order to handle click or highlighting of certain status\n        chart\n            .getEventBus()\n            .getStream(INTERACTION_DATA_POINTS_EVENT)\n            .subscribe(console.log);\n        chart\n            .getEventBus()\n            .getStream(SELECT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n\n        this.chartAssist.update(mappedSeries);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Brno",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Brno",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Brno",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Brno",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Austin",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Austin",\n                    value: 198,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Austin",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Austin",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Edinburgh",\n                    value: 167,\n                },\n                // sparse data is handled as well\n                // {\n                //     "name": "Q2 2018",\n                //     "subCategory": "Edinburgh",\n                //     "value": 15,\n                // },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Edinburgh",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Edinburgh",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Newcastle",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Newcastle",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Newcastle",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Newcastle",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    subCategory: "Kyiv",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018",\n                    subCategory: "Kyiv",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    subCategory: "Kyiv",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    subCategory: "Kyiv",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},88554:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, %</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="false"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.name"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},23319:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    LinearScale,\n    Scales,\n    stack,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-proportional-vertical-bar-chart-test",\n    templateUrl: "./proportional-vertical-bar-chart-test.component.html",\n})\nexport class ProportionalVerticalBarChartTestComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    private mbpsUnit = "Mbps";\n\n    constructor() {}\n\n    public ngOnInit(): void {\n        this.chartAssist = new ChartAssist(new Chart(barGrid()), stack);\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n\n        const accessors = barAccessors();\n        accessors.data.category = (data: any) => data.name;\n        // Note changed data accessor matching value.percentageValue instead of just value\n        accessors.data.value = (data: any) => data.percentageValue;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        const scales: Scales = {\n            x: bandScale,\n            y: linearScale,\n        };\n\n        const dataSeriesSet = getData();\n        // Preprocess data to have both percentage and real values\n        // 1. Gather sum of all items per category\n        const sums = dataSeriesSet.reduce(\n            (acc: number[], next: any) =>\n                acc.map((v: any, i: number) => v + next.data[i].value),\n            [0, 0, 0, 0]\n        );\n        // 2. Normalize data using the sum\n        dataSeriesSet.forEach((dataSeries: any) => {\n            dataSeries.data.forEach((d: any, i: number) => {\n                d.percentageValue = (d.value / sums[i]) * 100;\n            });\n        });\n\n        const chartSeriesSet = dataSeriesSet.map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.update(chartSeriesSet);\n    }\n\n    public getTitleFromDataPoint(dataPoint: any): string {\n        // This generates content for a tooltip.\n        // Both seriesId and the data of the corresponding bar are available in the tooltip.\n        return `${dataPoint.seriesId}: ${dataPoint.data.value}${\n            this.mbpsUnit\n        } (${Math.round(dataPoint.data.percentageValue)}%)`;\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "Brno",\n            name: "Brno",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 122,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 141,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 66,\n                },\n            ],\n        },\n        {\n            id: "Austin",\n            name: "Austin",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 198,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 233,\n                },\n            ],\n        },\n        {\n            id: "Edinburgh",\n            name: "Edinburgh",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 167,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 15,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 208,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 123,\n                },\n            ],\n        },\n        {\n            id: "Newcastle",\n            name: "Newcastle",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 11,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 99,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 17,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 25,\n                },\n            ],\n        },\n        {\n            id: "Kyiv",\n            name: "Kyiv",\n            data: [\n                {\n                    name: "Q1 2018",\n                    value: 121,\n                },\n                {\n                    name: "Q2 2018",\n                    value: 222,\n                },\n                {\n                    name: "Q3 2018",\n                    value: 319,\n                },\n                {\n                    name: "Q4 2018",\n                    value: 328,\n                },\n            ],\n        },\n    ];\n}\n'},77400:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Bucketed Bar Charts</h1>\n<p>\n    When you need to provide a complex comparison of data with categorical\n    groups that have two or more bars, Stacked Bar Chart or Grouped Bar Chart\n    can be used.\n</p>\n\n<nui-message type="warning" [allowDismiss]="false">\n    For more details, please see the inline comments in the example sources\n    below.\n</nui-message>\n\n<h1>Stacked Bar Charts</h1>\n<p>\n    Stacked bar chart represents categories with values stacked on top of each\n    other.\n</p>\n\n<p>\n    The overall data model is similar to the one described in the\n    <a href="../additional-documentation/chart-types/line.html" target="_parent"\n        >Line Chart</a\n    >\n    documentation. But, to stack your data you will need to use\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >\n    with\n    <code\n        ><a href="../miscellaneous/functions.html#stack" target="_blank"\n            >stack</a\n        ></code\n    >\n    preprocessor.\n</p>\n\n<h2>Basic Stacked Bar Chart</h2>\n<p>\n    The following example of a stacked bar chart uses\n    <code\n        ><a href="../classes/BarTooltipsPlugin.html" target="_blank"\n            >BarTooltipsPlugin</a\n        ></code\n    >, and\n    <code\n        ><a href="../classes/InteractionLabelPlugin.html" target="_blank"\n            >InteractionLabelPlugin</a\n        ></code\n    >. Interaction is possible thanks to\n    <code\n        ><a href="../classes/BarHighlightStrategy.html" target="_blank"\n            >BarHighlightStrategy</a\n        ></code\n    >\n    in renderer configuration.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-stacked"\n    exampleTitle="Stacked Bar Chart"\n>\n    <nui-bar-chart-stacked-example></nui-bar-chart-stacked-example>\n</nui-example-wrapper>\n\x3c!--\n<h2>Horizontal Stacked Bar Chart</h2>\n<p>\n    The following example of a horizontal stacked bar chart uses\n    <code><a href="../classes/BarHorizontalGridConfig.html" target="_blank">BarHorizontalGridConfig</a></code>,\n    which includes a default grid configurations for this type of chart, and\n    <code><a href="../classes/BarTooltipsPlugin.html" target="_blank">BarTooltipsPlugin</a></code>,\n    whose constructor takes an offset pixel value and an orientation value of <code>"top"</code>\n    which configures the chart to show a tooltip above the top right corner of each stacked bar.\n</p>\n<p><strong>Note:</strong> The x and y scales of the horizontal stacked bar chart are inverted as\n    compared to those of the basic stacked bar chart.</p>\n\n<nui-example-wrapper filenamePrefix="bar-chart-stacked-horizontal" exampleTitle="Horizontal Stacked Bar Chart">\n    <nui-bar-chart-stacked-horizontal-example></nui-bar-chart-stacked-horizontal-example>\n</nui-example-wrapper>\n<h2>Percentage Stacked Bar Chart</h2>\n<p>\n    In order to have a normalized (percentage-based) stacked bar chart, some pre-processing of the data\n    is needed. That is, the data must be mutated so that each data point includes not only an\n    absolute value (e.g. Mbps), but also a percentage value. In order to use percentages to build stacks,\n    you can use <code>accessors.data.value = (data: any) => data.percentageValue;</code> as shown in the\n    example source below.\n</p>\n<nui-example-wrapper filenamePrefix="bar-chart-percentage" exampleTitle="Percentage Stacked Bar Chart">\n    <nui-bar-chart-percentage-example></nui-bar-chart-percentage-example>\n</nui-example-wrapper>\n\n<br>\n--\x3e\n\n<h1>Grouped Bar Charts</h1>\n\n<p>\n    Data interpretation using a Stacked chart becomes difficult when you want to\n    compare the constituent parts of each entity across the various entities.\n    Try comparing data for Austin across quarters in the chart above: since bars\n    do not share a common base, it is cumbersome to compare them.\n</p>\n\n<p>To facilitate such analysis, we can use the Grouped Bar chart.</p>\n\n<p>\n    In the Grouped Column chart, all the columns have the same baseline and thus\n    it is much easier to compare the heights of the individual columns.\n</p>\n\n<h2>Basic Grouped Bar Chart</h2>\n\n<p>\n    For this type of the chart no preprocessor is needed. Still you should set\n    your scales and accessors in the way that will make grouping possible.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="bar-chart-grouped"\n    exampleTitle="Grouped Bar Chart"\n>\n    <nui-bar-chart-grouped-example></nui-bar-chart-grouped-example>\n</nui-example-wrapper>\n\n<h2>Horizontal Grouped Bar Chart</h2>\n\n<p>\n    BarTooltipsPlugin can be configured with the same\n    <code\n        ><a href="../interfaces/IBarChartConfig.html" target="_blank"\n            >IBarChartConfig</a\n        ></code\n    >\n    object that we mentioned before.\n</p>\n\n<p>\n    For proper highlight behavior you will need to tell\n    <code\n        ><a href="../classes/BarHighlightStrategy.html" target="_blank"\n            >BarHighlightStrategy</a\n        ></code\n    >\n    to use your <code>"y"</code> axis instead of <code>"x"</code>.\n</p>\n\n<nui-message type="warning" [allowDismiss]="false">\n    Horizontal orientation of grouped bar chart requires much more vertical\n    space in comparison to regular one (in case of many items in one group).\n    Example below has chart height explicitly set to 500px to illustrate this\n    fact.\n</nui-message>\n\n<nui-example-wrapper\n    filenamePrefix="bar-chart-grouped-horizontal"\n    exampleTitle="Horizontal Grouped Bar Chart"\n>\n    <nui-bar-chart-grouped-horizontal-example></nui-bar-chart-grouped-horizontal-example>\n</nui-example-wrapper>\n'},88706:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-bucketed-bar",\n    templateUrl: "./chart-docs-bucketed-bar.component.html",\n})\nexport class ChartDocsBucketedBarComponent {}\n'},6763:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartGroupedHorizontalExampleComponent } from "./bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component";\nimport { BarChartGroupedExampleComponent } from "./bar-chart-grouped/bar-chart-grouped.example.component";\nimport { BarChartPercentageExampleComponent } from "./bar-chart-percentage/bar-chart-percentage.example.component";\nimport { BarChartStackedHorizontalExampleComponent } from "./bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component";\nimport { BarChartStackedExampleComponent } from "./bar-chart-stacked/bar-chart-stacked.example.component";\nimport { BarChartBucketedTestComponent } from "./bar-chart-test/bar-chart-bucketed-test.component";\nimport { BasicStackedHorizontalBarChartTestComponent } from "./bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component";\nimport { BasicStackedVerticalBarChartTestComponent } from "./bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component";\nimport { GroupedHorizontalBarChartTestComponent } from "./bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component";\nimport { GroupedVerticalBarChartTestComponent } from "./bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component";\nimport { ProportionalVerticalBarChartTestComponent } from "./bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component";\nimport { ChartDocsBucketedBarComponent } from "./chart-docs-bucketed-bar.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: ChartDocsBucketedBarComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "stacked",\n        component: BarChartStackedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "stacked-test",\n        component: BasicStackedVerticalBarChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "percentage",\n        component: BarChartPercentageExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "grouped",\n        component: BarChartGroupedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "grouped-horizontal",\n        component: BarChartGroupedHorizontalExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: BarChartBucketedTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsBucketedBarComponent,\n        BarChartGroupedExampleComponent,\n        BarChartGroupedHorizontalExampleComponent,\n        BarChartPercentageExampleComponent,\n        BarChartStackedExampleComponent,\n        BarChartStackedHorizontalExampleComponent,\n        BasicStackedHorizontalBarChartTestComponent,\n        BasicStackedVerticalBarChartTestComponent,\n        GroupedHorizontalBarChartTestComponent,\n        GroupedVerticalBarChartTestComponent,\n        ProportionalVerticalBarChartTestComponent,\n        BarChartBucketedTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiSwitchModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("bucketed-bar"),\n        },\n    ],\n})\nexport default class ChartDocsBucketedBarModule {}\n'},35434:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiIconModule, NuiMessageModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "bar",\n        loadChildren: async () =>\n            import("./bar/chart-docs-bar.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "bucketed-bar",\n        loadChildren: async () =>\n            import(\n                "./bucketed-bar/chart-docs-bucketed-bar.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "line",\n        loadChildren: async () =>\n            import("./line/chart-docs-line.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "pie-and-donut",\n        loadChildren: async () =>\n            import(\n                "./pie-and-donut/chart-docs-pie-and-donut.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "spark",\n        loadChildren: async () =>\n            import("./spark/chart-docs-spark.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "gauge",\n        loadChildren: async () =>\n            import("./gauge/chart-docs-gauge.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "status",\n        loadChildren: async () =>\n            import("./status/chart-docs-status.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "waterfall",\n        loadChildren: async () =>\n            import(\n                "./waterfall/chart-docs-waterfall.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "area",\n        loadChildren: async () =>\n            import("./area/chart-docs-area.module") as object as Promise<\n                Type<any>\n            >,\n    },\n];\n\n@NgModule({\n    declarations: [],\n    imports: [\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsChartTypesModule {}\n'},62377:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Gauges</h1>\n<p>\n    Gauges can be an effective way to display a single metric value in visual\n    form. And, Nova Charts provides the ability to create two types of gauges\n    (donut and linear) with the assistance of a utility class called\n    <a href="../classes/GaugeUtil.html" target="_blank"\n        ><code>GaugeUtil</code></a\n    >. <strong>Three key methods</strong> provided by the\n    <code>GaugeUtil</code> will get you most of the way towards a functioning\n    gauge:\n</p>\n<ul>\n    <li>\n        <code\n            ><a\n                href="../classes/GaugeUtil.html#createChartAssist"\n                target="_blank"\n                >createChartAssist</a\n            ></code\n        >: can be used to generate a\n        <code\n            ><a href="../classes/ChartAssist.html" target="_blank"\n                >ChartAssist</a\n            ></code\n        >\n        that\'s pre-configured based on the specified\n        <code\n            ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n                >IGaugeConfig</a\n            ></code\n        >\n        and\n        <code\n            ><a\n                href="../miscellaneous/enumerations.html#GaugeMode"\n                target="_blank"\n                >GaugeMode</a\n            ></code\n        >\n        arguments. The ChartAssist handles any necessary pre-processing of the\n        data series to a format that can be used for displaying each of the\n        supported gauge modes.\n    </li>\n    <li>\n        <code\n            ><a\n                href="../classes/GaugeUtil.html#assembleSeriesSet"\n                target="_blank"\n                >assembleSeriesSet</a\n            ></code\n        >: assembles a gauge series set with all of the scales, renderers,\n        accessors, etc. needed for creating a gauge visualization based on the\n        specified\n        <code\n            ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n                >IGaugeConfig</a\n            ></code\n        >\n        and\n        <code\n            ><a\n                href="../miscellaneous/enumerations.html#GaugeMode"\n                target="_blank"\n                >GaugeMode</a\n            ></code\n        >\n        arguments.\n    </li>\n    <li>\n        <code\n            ><a href="../classes/GaugeUtil.html#update" target="_blank"\n                >update</a\n            ></code\n        >: updates a gauge series set using the specified\n        <code\n            ><a href="../interfaces/IChartAssistSeries.html" target="_blank"\n                >IChartAssistSeries</a\n            ></code\n        >\n        array and\n        <code\n            ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n                >IGaugeConfig</a\n            ></code\n        >\n        arguments.\n    </li>\n</ul>\n<h2>Basic Steps</h2>\n<ol>\n    <li>\n        Create a\n        <code\n            ><a href="../classes/ChartAssist.html" target="_blank"\n                >ChartAssist</a\n            ></code\n        >\n        using <code>GaugeUtil</code>\'s\n        <code\n            ><a\n                href="../classes/GaugeUtil.html#createChartAssist"\n                target="_blank"\n                >createChartAssist</a\n            ></code\n        >\n        function.\n    </li>\n    <li>\n        Update the <code>ChartAssist</code>\'s associated chart instance with a\n        series set generated by the <code>GaugeUtil</code>\'s\n        <code\n            ><a\n                href="../classes/GaugeUtil.html#assembleSeriesSet"\n                target="_blank"\n                >assembleSeriesSet</a\n            ></code\n        >\n        function.\n    </li>\n    <li>\n        Optionally, at any time after gauge instantiation, update the gauge with\n        a new value, max value, or other configuration changes using the\n        <code>GaugeUtil</code>\'s\n        <code\n            ><a href="../classes/GaugeUtil.html#update" target="_blank"\n                >update</a\n            ></code\n        >\n        function.\n    </li>\n</ol>\n\n<h2>Donut Gauge</h2>\n<p>\n    A <strong>donut gauge</strong> is a specialized\n    <a\n        href="../additional-documentation/chart-types/pie-and-donut.html"\n        target="_parent"\n        >donut chart</a\n    >\n    with data formatted in a way that results in a gauge-like visualization.\n    It\'s well-suited for use cases in which there\'s ample room to display a\n    relatively large visualization. For use cases with a more compact display\n    area, consider the <strong>linear gauge</strong> whose documentation can be\n    found further down on this page.\n</p>\n\n<h3>Basic Usage</h3>\n<p>\n    Take a look at the source expander of the example below for details on how\n    to instantiate a basic donut gauge.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-basic"\n    exampleTitle="Basic Donut"\n>\n    <donut-gauge-basic-example></donut-gauge-basic-example>\n</nui-example-wrapper>\n\n<h3>Thresholds</h3>\n<p>\n    To add thresholds to a gauge, specify a value of type\n    <code\n        ><a href="../interfaces/IGaugeThresholdsConfig.html" target="_blank"\n            >IGaugeThresholdsConfig</a\n        ></code\n    >\n    on the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html#thresholds" target="_blank"\n            >thresholds</a\n        ></code\n    >\n    property of the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n            >IGaugeConfig</a\n        ></code\n    >. For an easy way to assemble an\n    <code>IGaugeThresholdsConfig</code> object, <code>GaugeUtil</code> provides\n    a\n    <code\n        ><a\n            href="../classes/GaugeUtil.html#createStandardThresholdsConfig"\n            target="_blank"\n            >createStandardThresholdsConfig</a\n        ></code\n    >\n    function. The\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#definitions"\n            target="_blank"\n            >definitions</a\n        ></code\n    >\n    property of the function\'s output includes standard threshold definitions\n    for "warning" and "critical" levels. You can either use the\n    <code>createStandardThresholdsConfig</code> convenience function or\n    construct your own threshold configuration with as many or few threshold\n    definitions as you need.\n</p>\n<h4>Definitions</h4>\n<p>\n    The\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#definitions"\n            target="_blank"\n            >definitions</a\n        ></code\n    >\n    property of <code>IGaugeThresholdsConfig</code> is organized with an\n    <em>id-to-threshold</em> mapping for easy access. Each threshold definition\n    is of type\n    <code\n        ><a href="../interfaces/IGaugeThresholdDef.html" target="_blank"\n            >IGaugeThresholdDef</a\n        ></code\n    >\n    and has an <code>id</code> property with the same value used in the mapping.\n    The <code>id</code>\'s for common thresholds are standardized in the\n    <code\n        ><a\n            href="../miscellaneous/enumerations.html#StandardGaugeThresholdId"\n            target="_blank"\n            >StandardGaugeThresholdId</a\n        ></code\n    >\n    enum which has <code>Warning</code> and <code>Critical</code> members.\n    Additional properties of the threshold definition include\n    <code>value</code>, <code>color</code>, and <code>enabled</code>.\n</p>\n<h4>Colors</h4>\n<p>\n    As mentioned above, the <code>IGaugeThresholdsConfig</code> return value of\n    the\n    <code\n        ><a\n            href="../classes/GaugeUtil.html#createStandardThresholdsConfig"\n            target="_blank"\n            >createStandardThresholdsConfig</a\n        ></code\n    >\n    function has a\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#definitions"\n            target="_blank"\n            >definitions</a\n        ></code\n    >\n    property with a standard set of threshold definitions. Each of these\n    definitions has a\n    <code\n        ><a href="../interfaces/IGaugeThresholdDef.html#color" target="_blank"\n            >color</a\n        ></code\n    >\n    property that\'s used as the threshold\'s display color when it\'s triggered.\n    By default, the function sets the warning threshold to yellow and the\n    critical to red. You can modify the display colors for these and any custom\n    thresholds using this property.\n</p>\n<h4>Labels</h4>\n<p>\n    When threshold definitions are provided on the\n    <code>thresholds</code> property of the <code>IGaugeConfig</code>, the\n    GaugeUtil\'s\n    <code\n        ><a href="../classes/GaugeUtil.html#createChartAssist" target="_blank"\n            >createChartAssist</a\n        ></code\n    >\n    function automatically adds a\n    <code\n        ><a href="../classes/DonutGaugeLabelsPlugin.html" target="_blank"\n            >DonutGaugeLabelsPlugin</a\n        ></code\n    >\n    instance to the chart which displays labels for the threshold markers on\n    mouse hover. If you\'d like to provide a custom formatter for the labels,\n    take a look at the <strong>label customization</strong> example on this page\n    for details on how to do that.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    <strong>Note:</strong> If the display strings for your labels are too long\n    to fit within the default grid margins, you can specify a custom clearance\n    value in pixels on the\n    <code\n        ><a\n            href="../interfaces/IGaugeLabelsConfig.html#clearance"\n            target="_blank"\n            >clearance</a\n        ></code\n    >\n    property of the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n            >IGaugeConfig</a\n        ></code\n    >\'s\n    <code\n        ><a href="../interfaces/IGaugeConfig.html#labels" target="_blank"\n            >labels</a\n        ></code\n    >\n    property. This will ensure that the grid margins are at minimum the\n    clearance value specified. For the donut gauge, the clearance is applied to\n    all margins; for the linear gauge, the clearance is applied only to the side\n    on which the labels appear.\n</nui-message>\n<h4>Reversed Thresholds</h4>\n<p>\n    The default behavior of a Nova gauge is to treat quantity values that are\n    greater than or equal to the threshold values as being triggered. If you\n    want to reverse that and have the gauge treat quantity values that are less\n    than or equal to the threshold values as triggered, set the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#reversed"\n            target="_blank"\n            >reversed</a\n        ></code\n    >\n    property on the\n    <code\n        ><a href="../interfaces/IGaugeThresholdsConfig.html" target="_blank"\n            >IGaugeThresholdsConfig</a\n        ></code\n    >\n    object to <code>true</code>.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-with-thresholds"\n    exampleTitle="Donut with Thresholds"\n>\n    <donut-gauge-with-thresholds-example></donut-gauge-with-thresholds-example>\n</nui-example-wrapper>\n\n<h4>Turning Off the Threshold Markers</h4>\n<h5>Omitting the Markers</h5>\n<p>\n    If you want to disable the threshold markers, it\'s likely you\'ll want to\n    omit them entirely rather than instantiating them in a disabled state ready\n    to be toggled on later. The following example achieves this by setting the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#disableMarkers"\n            target="_blank"\n            >disableMarkers</a\n        ></code\n    >\n    property on the <code>IGaugeThresholdsConfig</code> object to\n    <code>true</code> before invoking the GaugeUtil\'s\n    <code\n        ><a href="../classes/GaugeUtil.html#createChartAssist" target="_blank"\n            >createChartAssist</a\n        ></code\n    >\n    function. For toggling the markers on and off dynamically, take a look at\n    the <strong>Dynamic Marker Toggling</strong> example.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-without-threshold-markers"\n    exampleTitle="Statically Omitted Threshold Markers"\n>\n    <donut-gauge-without-threshold-markers-example></donut-gauge-without-threshold-markers-example>\n</nui-example-wrapper>\n\n<h5>Dynamic Marker Toggling</h5>\n<p>\n    If you want to dynamically toggle the threshold marker dots and labels, take\n    a look at the code in the source expander of the following example in which\n    a local instance of the\n    <code\n        ><a href="../classes/DonutGaugeLabelsPlugin.html" target="_blank"\n            >DonutGaugeLabelsPlugin</a\n        ></code\n    >\n    is passed to the optional labelsPlugin parameter of the\n    <code\n        ><a href="../classes/GaugeUtil.html#createChartAssist" target="_blank"\n            >createChartAssist</a\n        ></code\n    >\n    function. This allows for direct configuration and control of the\n    <code>DonutGaugeLabelsPlugin</code> instance.\n</p>\n<p>\n    Similar to the example above, the markers are toggled by updating the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#disableMarkers"\n            target="_blank"\n            >disableMarkers</a\n        ></code\n    >\n    property on the <code>IGaugeThresholdsConfig</code> object. And, dynamic\n    toggling of the threshold labels is achieved by setting the\n    <code\n        ><a\n            href="../interfaces/IGaugeLabelsPluginConfig.html#disableThresholdLabels"\n            target="_blank"\n            >disableThresholdLabels</a\n        ></code\n    >\n    property on the label plugin\'s <code>config</code> object.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-with-threshold-marker-toggling"\n    exampleTitle="Dynamic Threshold Marker Toggling"\n>\n    <donut-gauge-with-threshold-marker-toggling-example></donut-gauge-with-threshold-marker-toggling-example>\n</nui-example-wrapper>\n\n<h4>Enabling/Disabling Thresholds</h4>\n<p>\n    To toggle individual thresholds on or off, use the ID of a threshold to\n    access the corresponding threshold definition on the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#definitions"\n            target="_blank"\n            >definitions</a\n        ></code\n    >\n    property of the\n    <code\n        ><a href="../interfaces/IGaugeThresholdsConfig.html" target="_blank"\n            >IGaugeThresholdsConfig</a\n        ></code\n    >\n    object, and set the\n    <code\n        ><a href="../interfaces/IGaugeThresholdDef.html#enabled" target="_blank"\n            >enabled</a\n        ></code\n    >\n    property on the threshold definition accordingly.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-with-threshold-toggling"\n    exampleTitle="Donut with Threshold Toggling"\n>\n    <donut-gauge-with-threshold-toggling-example></donut-gauge-with-threshold-toggling-example>\n</nui-example-wrapper>\n\n<h4>Customizing the Threshold Label Formatter</h4>\n<p>\n    To customize the format of the labels shown when the mouse is hovered over\n    the gauge, set the\n    <code\n        ><a\n            href="../interfaces/IGaugeLabelsConfig.html#formatter"\n            target="_blank"\n            >formatter</a\n        ></code\n    >\n    property on the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html#labels" target="_blank"\n            >labels</a\n        ></code\n    >\n    property of the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n            >IGaugeConfig</a\n        ></code\n    >\n    with a function of type\n    <code\n        ><a href="../miscellaneous/typealiases.html#Formatter" target="_blank"\n            >Formatter&lt;string&gt;</a\n        ></code\n    >. The function should take a string as the raw data argument and return a\n    string with your customized formatting. The following example transforms the\n    raw threshold values to a percentage format.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-with-custom-threshold-labels"\n    exampleTitle="Donut with Custom Threshold Labels"\n>\n    <donut-gauge-with-custom-threshold-labels-example></donut-gauge-with-custom-threshold-labels-example>\n</nui-example-wrapper>\n\n<h3>Adding Inner Content</h3>\n<p>\n    The steps for adding inner content to the donut gauge are the same as that\n    of the donut chart. More detailed instructions for that can be found\n    <a\n        href="../additional-documentation/chart-types/pie-and-donut.html"\n        target="_parent"\n        >here</a\n    >. But, for a quick look at how to do it, see the example below.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-gauge-with-content"\n    exampleTitle="Donut with Inner Content"\n>\n    <donut-gauge-with-content-example></donut-gauge-with-content-example>\n</nui-example-wrapper>\n\n<h2>Linear Gauges</h2>\n<p>\n    If you need to display a gauge visualization in a more compact display area,\n    Nova supports both horizontal and vertical linear gauges which may be a\n    better fit for narrow spaces than the donut gauge.\n</p>\n<h3>Basic Horizontal</h3>\n<p>\n    Take a look at the source expander of the example below for details on how\n    to instantiate a basic horizontal gauge.\n</p>\n<nui-example-wrapper\n    filenamePrefix="horizontal-gauge-basic"\n    exampleTitle="Basic Horizontal Gauge"\n>\n    <horizontal-gauge-basic-example></horizontal-gauge-basic-example>\n</nui-example-wrapper>\n\n<h3>Basic Vertical</h3>\n<p>\n    Take a look at the source expander of the example below for details on how\n    to instantiate a basic vertical gauge.\n</p>\n<nui-example-wrapper\n    filenamePrefix="vertical-gauge-basic"\n    exampleTitle="Basic Vertical Gauge"\n>\n    <vertical-gauge-basic-example></vertical-gauge-basic-example>\n</nui-example-wrapper>\n\n<h3>Linear with Thresholds</h3>\n<p>\n    The steps for enabling/reversing thresholds and omitting/toggling threshold\n    markers and labels is basically the same for the linear gauge as it is for\n    the donut gauge. The only difference lies in the dynamic toggling of the\n    labels (if needed) in which the linear gauge uses the\n    <code\n        ><a href="../classes/LinearGaugeLabelsPlugin.html" target="_blank"\n            >LinearGaugeLabelsPlugin</a\n        ></code\n    >\n    instead of the <code>DonutGaugeLabelsPlugin</code>. If label toggling isn\'t\n    needed, you can ignore this fact and simply use the GaugeUtil\'s\n    <code\n        ><a href="../classes/GaugeUtil.html#createChartAssist" target="_blank"\n            >createChartAssist</a\n        ></code\n    >\n    function which will add the labels plugin to the gauge automatically unless\n    the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#disableMarkers"\n            target="_blank"\n            >disableMarkers</a\n        ></code\n    >\n    property on the\n    <code\n        ><a href="../interfaces/IGaugeThresholdsConfig.html" target="_blank"\n            >IGaugeThresholdsConfig</a\n        ></code\n    >\n    is set to <code>true</code>. For instructions on how to dynamically toggle\n    the threshold markers and labels, take a look at the\n    <strong>Dynamic Marker Toggling</strong> example in the\n    <strong>Donut Gauge</strong> section above.\n</p>\n<nui-example-wrapper\n    filenamePrefix="linear-gauge-with-thresholds"\n    exampleTitle="Linear Gauge with Thresholds"\n>\n    <linear-gauge-with-thresholds-example></linear-gauge-with-thresholds-example>\n</nui-example-wrapper>\n\n<h3>Configuring Thickness</h3>\n<p>\n    The linear gauge supports any thickness, but Nova provides two standard ones\n    (<code>Small</code> and <code>Large</code>) via the\n    <code\n        ><a\n            href="../miscellaneous/enumerations.html#StandardLinearGaugeThickness"\n            target="_blank"\n            >StandardLinearGaugeThickness</a\n        ></code\n    >\n    enum. The enum members or any number value can be assigned to the\n    <code\n        ><a\n            href="../interfaces/IGaugeConfig.html#linearThickness"\n            target="_blank"\n            >linearThickness</a\n        ></code\n    >\n    property on the\n    <code\n        ><a href="../interfaces/IGaugeConfig.html" target="_blank"\n            >IGaugeConfig</a\n        ></code\n    >\n    in order to set the thickness of the gauge. Additionally, the radius of the\n    threshold markers can be specified on the\n    <code\n        ><a\n            href="../interfaces/IGaugeThresholdsConfig.html#markerRadius"\n            target="_blank"\n            >markerRadius</a\n        ></code\n    >\n    property of the\n    <code\n        ><a href="../interfaces/IGaugeThresholdsConfig.html" target="_blank"\n            >IGaugeThresholdsConfig</a\n        ></code\n    >. Although any number value can be used for the marker radius, Nova\n    provides two standard sizes (<code>Small</code> and <code>Large</code>) for\n    this property via the\n    <code\n        ><a\n            href="../miscellaneous/enumerations.html#StandardGaugeThresholdMarkerRadius"\n            target="_blank"\n            >StandardGaugeThresholdMarkerRadius</a\n        ></code\n    >\n    enum.\n</p>\n<nui-example-wrapper\n    filenamePrefix="linear-gauge-thickness-adjustment"\n    exampleTitle="Configuring Linear Gauge Thickness"\n>\n    <linear-gauge-thickness-adjustment-example></linear-gauge-thickness-adjustment-example>\n</nui-example-wrapper>\n'},43879:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n@Component({\n    selector: "nui-chart-docs-gauge",\n    templateUrl: "./chart-docs-gauge.component.html",\n})\nexport class ChartDocsGaugeComponent {}\n'},12601:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\n/* eslint-disable max-len */\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiCheckboxModule,\n    NuiCommonModule,\n    NuiDocsModule,\n    NuiFormFieldModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiTextboxModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartDocsGaugeComponent } from "./chart-docs-gauge.component";\nimport { DonutGaugeBasicExampleComponent } from "./donut/donut-gauge-basic/donut-gauge-basic.example.component";\nimport { DonutGaugeWithContentExampleComponent } from "./donut/donut-gauge-with-content/donut-gauge-with-content.example.component";\nimport { DonutGaugeWithCustomThresholdLabelsExampleComponent } from "./donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component";\nimport { DonutGaugeWithThresholdMarkerTogglingExampleComponent } from "./donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component";\nimport { DonutGaugeWithThresholdTogglingExampleComponent } from "./donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component";\nimport { DonutGaugeWithThresholdsExampleComponent } from "./donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component";\nimport { DonutGaugeWithoutThresholdMarkersExampleComponent } from "./donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component";\nimport { HorizontalGaugeBasicExampleComponent } from "./linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component";\nimport { LinearGaugeThicknessAdjustmentExampleComponent } from "./linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component";\nimport { LinearGaugeWithThresholdsExampleComponent } from "./linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component";\nimport { VerticalGaugeBasicExampleComponent } from "./linear/vertical-gauge-basic/vertical-gauge-basic.example.component";\nimport { DonutGaugeTesterComponent } from "./visual-test/donut/donut-gauge-tester.component";\nimport { GaugeVisualTestComponent } from "./visual-test/gauge-visual-test.component";\nimport { HorizontalGaugeTesterComponent } from "./visual-test/horizontal/horizontal-gauge-tester.component";\nimport { VerticalGaugeTesterComponent } from "./visual-test/vertical/vertical-gauge-tester.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsGaugeComponent,\n        data: {\n            showThemeSwitcher: true,\n            srlc: {\n                stage: SrlcStage.ga,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: GaugeVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-basic",\n        component: DonutGaugeBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-with-content",\n        component: DonutGaugeWithContentExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-with-custom-labels",\n        component: DonutGaugeWithCustomThresholdLabelsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-without-markers",\n        component: DonutGaugeWithoutThresholdMarkersExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-with-marker-toggling",\n        component: DonutGaugeWithThresholdMarkerTogglingExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-with-thresholds",\n        component: DonutGaugeWithThresholdsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut-with-threshold-toggling",\n        component: DonutGaugeWithThresholdTogglingExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "horizontal-basic",\n        component: HorizontalGaugeBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "vertical-basic",\n        component: VerticalGaugeBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "linear-with-thresholds",\n        component: LinearGaugeWithThresholdsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "linear-thickness",\n        component: LinearGaugeWithThresholdsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsGaugeComponent,\n        GaugeVisualTestComponent,\n        HorizontalGaugeBasicExampleComponent,\n        LinearGaugeWithThresholdsExampleComponent,\n        HorizontalGaugeTesterComponent,\n        DonutGaugeTesterComponent,\n        DonutGaugeBasicExampleComponent,\n        DonutGaugeWithContentExampleComponent,\n        DonutGaugeWithCustomThresholdLabelsExampleComponent,\n        DonutGaugeWithThresholdMarkerTogglingExampleComponent,\n        DonutGaugeWithoutThresholdMarkersExampleComponent,\n        DonutGaugeWithThresholdsExampleComponent,\n        DonutGaugeWithThresholdTogglingExampleComponent,\n        VerticalGaugeBasicExampleComponent,\n        LinearGaugeThicknessAdjustmentExampleComponent,\n        VerticalGaugeTesterComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiCheckboxModule,\n        NuiCommonModule,\n        NuiFormFieldModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiTextboxModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("gauge"),\n        },\n    ],\n})\nexport default class ChartDocsGaugeModule {}\n'},4639:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <nui-form-field\n        class="d-block mb-5 demo__value-input"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="gaugeConfig.value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},78798:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__value-input {\n    margin-right: 40px;\n}\n\n.demo__chart {\n    height: 200px;\n    width: 200px;\n}\n"},38383:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-basic-example",\n    templateUrl: "./donut-gauge-basic.example.component.html",\n    styleUrls: ["./donut-gauge-basic.example.component.less"],\n})\nexport class DonutGaugeBasicExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnInit(): void {\n        // Setting up the gauge config\n        const initialValue = 128;\n        this.gaugeConfig = this.getGaugeConfig(initialValue);\n\n        // Creating the chart assist\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        // Assembling the series\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        // Updating the chart\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        // Updating the gauge config\n        this.gaugeConfig = this.getGaugeConfig(value);\n\n        // Updating the series set with the new config\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n\n        // Updating the chart with the updated series set\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 200,\n\n            /**\n             * Optionally customize the default quantity color (defaults to StandardGaugeColor.Ok)\n             */\n\n            // defaultQuantityColor: "var(--nui-color-semantic-ok)",\n        };\n    }\n}\n'},49138:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <nui-form-field\n        class="d-block mr-5"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="gaugeConfig.value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <div class="d-flex">\n        <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n\n        \x3c!-- Inner content template --\x3e\n        <nui-chart-donut-content\n            style="position: absolute"\n            [plugin]="contentPlugin"\n        >\n            <div\n                class="h-100 w-100 d-flex flex-column justify-content-center align-items-center text-center"\n            >\n                <div class="d-inline-block" nuiZoomContent [zoomRatio]="0.65">\n                    {{ gaugeConfig.value | number : "1.0-0" }}\n                </div>\n                <div class="demo__content-label" i18n>Network Latency</div>\n                <div class="demo__content-label" i18n>(ms)</div>\n            </div>\n        </nui-chart-donut-content>\n    </div>\n</div>\n'},83624:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables.less";\n\n.demo__chart {\n    height: 250px;\n    width: 250px;\n}\n\n.demo__content-label {\n    line-height: @nui-line-height-small;\n    font-size: @nui-font-size-small;\n    font-weight: @nui-font-weight-regular;\n    text-transform: uppercase;\n    color: var(--nui-color-text-secondary);\n}\n'},18916:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    ChartDonutContentPlugin,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-with-content-example",\n    templateUrl: "./donut-gauge-with-content.example.component.html",\n    styleUrls: ["./donut-gauge-with-content.example.component.less"],\n})\nexport class DonutGaugeWithContentExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public contentPlugin: ChartDonutContentPlugin;\n    public gaugeConfig: IGaugeConfig;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n    private thresholds: IGaugeThresholdsConfig =\n        GaugeUtil.createStandardThresholdsConfig(100, 158);\n\n    public ngOnInit(): void {\n        const initialValue = 128;\n        this.gaugeConfig = this.getGaugeConfig(initialValue);\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        // Adding the plugin for the donut inner content\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chartAssist.chart.addPlugin(this.contentPlugin);\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.gaugeConfig = this.getGaugeConfig(value);\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 200,\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},41622:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <div class="d-flex flex-column align-items-left mr-5">\n        <nui-form-field\n            class="d-block mb-5"\n            caption="Value"\n            i18n-caption\n            [showOptionalText]="false"\n        >\n            <nui-textbox-number\n                type="number"\n                [ngModel]="gaugeConfig.value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="gaugeConfig.max"\n                customBoxWidth="75px"\n            ></nui-textbox-number>\n        </nui-form-field>\n    </div>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},43549:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__chart {\n    height: 250px;\n    width: 250px;\n}\n"},97057:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-with-custom-threshold-labels-example",\n    templateUrl:\n        "./donut-gauge-with-custom-threshold-labels.example.component.html",\n    styleUrls: [\n        "./donut-gauge-with-custom-threshold-labels.example.component.less",\n    ],\n})\nexport class DonutGaugeWithCustomThresholdLabelsExampleComponent\n    implements OnInit\n{\n    public chartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n    private thresholds: IGaugeThresholdsConfig =\n        GaugeUtil.createStandardThresholdsConfig(50, 75);\n\n    public ngOnInit(): void {\n        const initialValue = 40;\n        this.gaugeConfig = this.getGaugeConfig(initialValue);\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.gaugeConfig = this.getGaugeConfig(value);\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 100,\n            thresholds: this.thresholds,\n\n            // Setting a custom label formatter\n            labels: {\n                formatter: (d: string) => `${d}%`,\n\n                /**\n                 * Optionally specify a custom clearance in pixels for the labels if the\n                 * display strings are too long to fit within the default grid margins.\n                 */\n\n                // clearance: 35,\n            },\n        };\n    }\n}\n'},31763:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <div class="d-flex flex-column align-items-left mr-5">\n        <nui-form-field\n            class="d-block mb-5"\n            caption="Value"\n            i18n-caption\n            [showOptionalText]="false"\n        >\n            <nui-textbox-number\n                type="number"\n                [ngModel]="value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="gaugeConfig.max"\n                customBoxWidth="75px"\n            ></nui-textbox-number>\n        </nui-form-field>\n        <nui-checkbox\n            [ngModel]="markersEnabled"\n            (ngModelChange)="onMarkersEnabledChange($event)"\n            i18n\n        >\n            Markers Enabled\n        </nui-checkbox>\n    </div>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},50054:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__chart {\n    height: 250px;\n    width: 250px;\n}\n"},38524:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    DonutGaugeLabelsPlugin,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-with-threshold-marker-toggling-example",\n    templateUrl:\n        "./donut-gauge-with-threshold-marker-toggling.example.component.html",\n    styleUrls: [\n        "./donut-gauge-with-threshold-marker-toggling.example.component.less",\n    ],\n})\nexport class DonutGaugeWithThresholdMarkerTogglingExampleComponent\n    implements OnInit\n{\n    public chartAssist: ChartAssist;\n    public value = 128;\n    public gaugeConfig: IGaugeConfig;\n    public markersEnabled = true;\n    public labelsPlugin = new DonutGaugeLabelsPlugin();\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    // Generating a standard set of thresholds with warning and critical levels\n    private thresholds: IGaugeThresholdsConfig =\n        GaugeUtil.createStandardThresholdsConfig(100, 158);\n\n    public ngOnInit(): void {\n        // Setting up the gauge config\n        this.gaugeConfig = this.getGaugeConfig();\n\n        // Setting up the chart assist with a local instance of the labels plugin for direct control of the label display\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut,\n            this.labelsPlugin\n        );\n\n        // Assembling the series\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        // Updating the chart\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauge();\n    }\n\n    public onMarkersEnabledChange(enabled: boolean): void {\n        this.markersEnabled = enabled;\n\n        // Enabling or disabling the threshold markers\n        this.thresholds.disableMarkers = !this.markersEnabled;\n\n        // Enabling or disabling the threshold labels\n        this.labelsPlugin.config.disableThresholdLabels = !this.markersEnabled;\n\n        this.updateGauge();\n    }\n\n    private updateGauge() {\n        this.gaugeConfig = this.getGaugeConfig();\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 200,\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},92385:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <div class="d-flex flex-column align-items-left mr-5">\n        <nui-form-field\n            class="d-block mb-5"\n            caption="Value"\n            i18n-caption\n            [showOptionalText]="false"\n        >\n            <nui-textbox-number\n                type="number"\n                [ngModel]="value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="gaugeConfig.max"\n                customBoxWidth="75px"\n            ></nui-textbox-number>\n        </nui-form-field>\n        <nui-checkbox\n            class="mb-2"\n            [ngModel]="warningEnabled"\n            (ngModelChange)="onWarningEnabledChange($event)"\n            i18n\n        >\n            Warning Enabled\n        </nui-checkbox>\n        <nui-checkbox\n            [ngModel]="criticalEnabled"\n            (ngModelChange)="onCriticalEnabledChange($event)"\n            i18n\n        >\n            Critical Enabled\n        </nui-checkbox>\n    </div>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},46286:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__chart {\n    height: 250px;\n    width: 250px;\n}\n"},52641:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n    StandardGaugeThresholdId,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-with-threshold-toggling-example",\n    templateUrl: "./donut-gauge-with-threshold-toggling.example.component.html",\n    styleUrls: ["./donut-gauge-with-threshold-toggling.example.component.less"],\n})\nexport class DonutGaugeWithThresholdTogglingExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public value = 178;\n    public gaugeConfig: IGaugeConfig;\n    public warningEnabled = true;\n    public criticalEnabled = true;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    // Generating a standard set of thresholds with warning and critical levels\n    private thresholds: IGaugeThresholdsConfig =\n        GaugeUtil.createStandardThresholdsConfig(100, 158);\n\n    public ngOnInit(): void {\n        this.gaugeConfig = this.getGaugeConfig();\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauge();\n    }\n\n    public onWarningEnabledChange(enabled: boolean): void {\n        this.warningEnabled = enabled;\n\n        // Enabling or disabling the warning threshold\n        this.thresholds.definitions[StandardGaugeThresholdId.Warning].enabled =\n            this.warningEnabled;\n\n        this.updateGauge();\n    }\n\n    public onCriticalEnabledChange(enabled: boolean): void {\n        this.criticalEnabled = enabled;\n\n        // Enabling or disabling the critical threshold\n        this.thresholds.definitions[StandardGaugeThresholdId.Critical].enabled =\n            this.criticalEnabled;\n\n        this.updateGauge();\n    }\n\n    private updateGauge() {\n        this.gaugeConfig = this.getGaugeConfig();\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 200,\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},1239:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <div class="d-flex flex-column align-items-left mr-5">\n        <nui-form-field\n            class="d-block mb-5"\n            caption="Value"\n            i18n-caption\n            [showOptionalText]="false"\n        >\n            <nui-textbox-number\n                type="number"\n                [ngModel]="value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="gaugeConfig.max"\n                customBoxWidth="75px"\n            ></nui-textbox-number>\n        </nui-form-field>\n        <nui-checkbox\n            [ngModel]="reversed"\n            (ngModelChange)="onReversedChange($event)"\n            i18n\n        >\n            Reversed Thresholds\n        </nui-checkbox>\n    </div>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},99721:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__chart {\n    height: 250px;\n    width: 250px;\n}\n"},35056:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n    StandardGaugeThresholdId,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-with-thresholds-example",\n    templateUrl: "./donut-gauge-with-thresholds.example.component.html",\n    styleUrls: ["./donut-gauge-with-thresholds.example.component.less"],\n})\nexport class DonutGaugeWithThresholdsExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n    public value = 178;\n    public reversed = false;\n\n    private thresholds: IGaugeThresholdsConfig;\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    private lowThreshold = 100;\n    private highThreshold = 158;\n\n    public ngOnInit(): void {\n        // Generating a standard set of thresholds with warning and critical levels\n        this.thresholds = GaugeUtil.createStandardThresholdsConfig(\n            this.lowThreshold,\n            this.highThreshold\n        );\n\n        /**\n         * Optionally, instead of using the \'createStandardThresholdsConfig\' function as above, you can manually create a thresholds\n         * config object like the following with as many or as few threshold definitions as you need.\n         */\n        // this.thresholds = {\n        //     definitions: {\n        //         [StandardGaugeThresholdId.Warning]: {\n        //             id: StandardGaugeThresholdId.Warning,\n        //             value: this.lowThreshold,\n        //             enabled: true,\n        //             color: StandardGaugeColor.Warning,\n        //         },\n        //         [StandardGaugeThresholdId.Critical]: {\n        //             id: StandardGaugeThresholdId.Critical,\n        //             value: this.highThreshold,\n        //             enabled: true,\n        //             color: StandardGaugeColor.Critical,\n        //         },\n        //     },\n        //     reversed: false,\n        //     disableMarkers: false,\n        //     markerRadius: StandardGaugeThresholdMarkerRadius.Large,\n        // };\n\n        this.gaugeConfig = this.getGaugeConfig();\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauge();\n    }\n\n    public onReversedChange(reversed: boolean): void {\n        this.reversed = reversed;\n        this.thresholds.reversed = reversed;\n\n        // swap the values of the warning and critical thresholds\n        this.thresholds.definitions[StandardGaugeThresholdId.Warning].value =\n            this.reversed ? this.highThreshold : this.lowThreshold;\n        this.thresholds.definitions[StandardGaugeThresholdId.Critical].value =\n            this.reversed ? this.lowThreshold : this.highThreshold;\n\n        this.updateGauge();\n    }\n\n    private updateGauge() {\n        this.gaugeConfig = this.getGaugeConfig();\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 200,\n\n            // Enabling the thresholds\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},89809:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <nui-form-field\n        class="d-block mb-5 demo__value-input"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},47905:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__value-input {\n    margin-right: 40px;\n}\n\n.demo__chart {\n    height: 190px;\n    width: 190px;\n}\n"},60783:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-without-threshold-markers-example",\n    templateUrl:\n        "./donut-gauge-without-threshold-markers.example.component.html",\n    styleUrls: [\n        "./donut-gauge-without-threshold-markers.example.component.less",\n    ],\n})\nexport class DonutGaugeWithoutThresholdMarkersExampleComponent\n    implements OnInit\n{\n    public chartAssist: ChartAssist;\n    public value = 128;\n    public gaugeConfig: IGaugeConfig;\n\n    private thresholds: IGaugeThresholdsConfig;\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnInit(): void {\n        // Generating a standard set of thresholds with warning and critical levels\n        this.thresholds = GaugeUtil.createStandardThresholdsConfig(100, 158);\n\n        // Turning off the markers\n        this.thresholds.disableMarkers = true;\n\n        this.gaugeConfig = this.getGaugeConfig();\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauge();\n    }\n\n    private updateGauge() {\n        this.gaugeConfig = this.getGaugeConfig();\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 200,\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},26370:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex justify-content-center align-items-center flex-wrap">\n    <nui-form-field\n        class="mb-5 demo__value-input"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="gaugeConfig.value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},92900:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__value-input {\n    margin-right: 40px;\n}\n\n// Setting the width on the chart element determines the horizontal length of the gauge\n.demo__chart {\n    width: 200px;\n}\n"},97531:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "horizontal-gauge-basic-example",\n    templateUrl: "./horizontal-gauge-basic.example.component.html",\n    styleUrls: ["./horizontal-gauge-basic.example.component.less"],\n})\nexport class HorizontalGaugeBasicExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnInit(): void {\n        // Setting up the gauge config\n        const initialValue = 64;\n        this.gaugeConfig = this.getGaugeConfig(initialValue);\n\n        // Creating the chart assist\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n\n        // Assembling the series\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n\n        // Updating the chart\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        // Updating the gauge config\n        this.gaugeConfig = this.getGaugeConfig(value);\n\n        // Updating the series set with the new config\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n\n        // Updating the chart with the updated series set\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 100,\n\n            /**\n             * Optionally customize the default quantity color (defaults to StandardGaugeColor.Ok)\n             */\n\n            // defaultQuantityColor: "var(--nui-color-semantic-ok)",\n        };\n    }\n}\n'},62228:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex justify-content-center align-items-center flex-wrap">\n    <div class="demo__inputs">\n        <nui-form-field\n            class="d-block mb-5"\n            caption="Value"\n            i18n-caption\n            [showOptionalText]="false"\n        >\n            <nui-textbox-number\n                type="number"\n                [ngModel]="value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="gaugeConfig.max"\n                customBoxWidth="75px"\n            ></nui-textbox-number>\n        </nui-form-field>\n        <nui-checkbox\n            class="d-block mb-5"\n            [ngModel]="compact"\n            (ngModelChange)="onCompactChange($event)"\n            i18n\n        >\n            Compact Thickness\n        </nui-checkbox>\n    </div>\n    <div class="demo__charts d-flex justify-content-between align-items-center">\n        <nui-chart\n            class="demo__vertical-chart"\n            [chart]="verticalChartAssist.chart"\n        ></nui-chart>\n        <nui-chart\n            class="ml-5 demo__horizontal-chart"\n            [chart]="horizontalChartAssist.chart"\n        ></nui-chart>\n    </div>\n</div>\n'},19113:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__inputs {\n    margin-right: 50px;\n}\n\n.demo__charts {\n    width: 255px;\n}\n\n// Setting the height on the chart element determines the vertical length of the gauge\n.demo__vertical-chart {\n    height: 200px;\n}\n\n// Setting the width on the chart element determines the horizontal length of the gauge\n.demo__horizontal-chart {\n    width: 200px;\n}\n"},97843:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n    StandardGaugeThresholdMarkerRadius,\n    StandardLinearGaugeThickness,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "linear-gauge-thickness-adjustment-example",\n    templateUrl: "./linear-gauge-thickness-adjustment.example.component.html",\n    styleUrls: ["./linear-gauge-thickness-adjustment.example.component.less"],\n})\nexport class LinearGaugeThicknessAdjustmentExampleComponent implements OnInit {\n    public gaugeConfig: IGaugeConfig;\n    public horizontalChartAssist: ChartAssist;\n    public verticalChartAssist: ChartAssist;\n\n    public value = 64;\n    public compact = true;\n\n    private horizontalSeriesSet: IChartAssistSeries<IAccessors>[];\n    private verticalSeriesSet: IChartAssistSeries<IAccessors>[];\n\n    private thresholds: IGaugeThresholdsConfig =\n        GaugeUtil.createStandardThresholdsConfig(50, 79);\n\n    public ngOnInit(): void {\n        // Setting the initial threshold marker radius\n        this.thresholds.markerRadius = this.compact\n            ? StandardGaugeThresholdMarkerRadius.Small\n            : StandardGaugeThresholdMarkerRadius.Large;\n\n        this.gaugeConfig = this.getGaugeConfig();\n\n        // Creating the horizontal gauge\n        this.horizontalChartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.horizontalSeriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.horizontalChartAssist.update(this.horizontalSeriesSet);\n\n        // Creating the vertical gauge\n        this.verticalChartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.verticalSeriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.verticalChartAssist.update(this.verticalSeriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauges();\n    }\n\n    public onCompactChange(compact: boolean): void {\n        this.compact = compact;\n\n        // Adjusting the threshold marker radius\n        this.thresholds.markerRadius = this.compact\n            ? StandardGaugeThresholdMarkerRadius.Small\n            : StandardGaugeThresholdMarkerRadius.Large;\n        this.updateGauges();\n\n        // Updating the thickness\n        this.updateThickness();\n    }\n\n    private updateThickness() {\n        // Using standard thicknesses based on whether the gauge is in compact mode\n        const thickness = this.compact\n            ? StandardLinearGaugeThickness.Small\n            : StandardLinearGaugeThickness.Large;\n\n        // Updating the horizontal gauge height with the desired gauge thickness in pixels\n        const horizontalGridConfig = this.horizontalChartAssist.chart\n            .getGrid()\n            .config();\n        horizontalGridConfig.dimension.height(thickness);\n        this.horizontalChartAssist.chart.updateDimensions();\n\n        // Updating the vertical gauge width with the desired gauge thickness in pixels\n        const verticalGridConfig = this.verticalChartAssist.chart\n            .getGrid()\n            .config();\n        verticalGridConfig.dimension.width(thickness);\n        this.verticalChartAssist.chart.updateDimensions();\n    }\n\n    private updateGauges() {\n        this.gaugeConfig = this.getGaugeConfig();\n\n        // Updating the horizontal gauge\n        this.horizontalSeriesSet = GaugeUtil.update(\n            this.horizontalSeriesSet,\n            this.gaugeConfig\n        );\n        this.horizontalChartAssist.update(this.horizontalSeriesSet);\n\n        // Updating the vertical gauge\n        this.verticalSeriesSet = GaugeUtil.update(\n            this.verticalSeriesSet,\n            this.gaugeConfig\n        );\n        this.verticalChartAssist.update(this.verticalSeriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 100,\n            thresholds: this.thresholds,\n\n            // Setting the initial thickness based on whether the gauge is in compact mode\n            // The \'createChartAssist\' function uses this to configure the grid\'s dimensions\n            linearThickness: this.compact\n                ? StandardLinearGaugeThickness.Small\n                : StandardLinearGaugeThickness.Large,\n        };\n    }\n}\n'},87422:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex justify-content-center align-items-center flex-wrap">\n    <nui-form-field\n        class="d-block mb-5 demo__value-input"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <div class="d-flex justify-content-between align-items-center">\n        <nui-chart\n            class="demo__vertical-chart"\n            [chart]="verticalChartAssist.chart"\n        ></nui-chart>\n        <nui-chart\n            class="ml-5 demo__horizontal-chart"\n            [chart]="horizontalChartAssist.chart"\n        ></nui-chart>\n    </div>\n</div>\n'},17072:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__value-input {\n    margin-right: 50px;\n}\n\n// Setting the height on the chart element determines the vertical length of the gauge\n.demo__vertical-chart {\n    height: 200px;\n}\n\n// Setting the width on the chart element determines the horizontal length of the gauge\n.demo__horizontal-chart {\n    width: 200px;\n}\n"},81416:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IGaugeThresholdsConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "linear-gauge-with-thresholds-example",\n    templateUrl: "./linear-gauge-with-thresholds.example.component.html",\n    styleUrls: ["./linear-gauge-with-thresholds.example.component.less"],\n})\nexport class LinearGaugeWithThresholdsExampleComponent implements OnInit {\n    public horizontalChartAssist: ChartAssist;\n    public verticalChartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n    public value = 64;\n\n    private thresholds: IGaugeThresholdsConfig;\n    private horizontalSeriesSet: IChartAssistSeries<IAccessors>[];\n    private verticalSeriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnInit(): void {\n        // Generating a standard set of thresholds with warning and critical levels\n        this.thresholds = GaugeUtil.createStandardThresholdsConfig(50, 79);\n\n        /**\n         * Optionally, instead of using the \'createStandardThresholdsConfig\' function as above, you can manually create a thresholds\n         * config object like the following with as many or as few threshold definitions as you need.\n         */\n        // this.thresholds = {\n        //     definitions: {\n        //         [StandardGaugeThresholdId.Warning]: {\n        //             id: StandardGaugeThresholdId.Warning,\n        //             value: 50,\n        //             enabled: true,\n        //             color: StandardGaugeColor.Warning,\n        //         },\n        //         [StandardGaugeThresholdId.Critical]: {\n        //             id: StandardGaugeThresholdId.Critical,\n        //             value: 79,\n        //             enabled: true,\n        //             color: StandardGaugeColor.Critical,\n        //         },\n        //     },\n        //     reversed: false,\n        //     disableMarkers: false,\n        //     markerRadius: StandardGaugeThresholdMarkerRadius.Large,\n        // };\n\n        this.gaugeConfig = this.getGaugeConfig();\n\n        // Creating the horizontal gauge\n        this.horizontalChartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.horizontalSeriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.horizontalChartAssist.update(this.horizontalSeriesSet);\n\n        // Creating the vertical gauge\n        this.verticalChartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.verticalSeriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.verticalChartAssist.update(this.verticalSeriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.updateGauges();\n    }\n\n    private updateGauges() {\n        this.gaugeConfig = this.getGaugeConfig();\n\n        // Updating the horizontal gauge\n        this.horizontalSeriesSet = GaugeUtil.update(\n            this.horizontalSeriesSet,\n            this.gaugeConfig\n        );\n        this.horizontalChartAssist.update(this.horizontalSeriesSet);\n\n        // Updating the vertical gauge\n        this.verticalSeriesSet = GaugeUtil.update(\n            this.verticalSeriesSet,\n            this.gaugeConfig\n        );\n        this.verticalChartAssist.update(this.verticalSeriesSet);\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        return {\n            value: this.value,\n            max: 100,\n\n            // Enabling the thresholds\n            thresholds: this.thresholds,\n        };\n    }\n}\n'},50325:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-center justify-content-center flex-wrap">\n    <nui-form-field\n        class="d-block mb-5 demo__value-input"\n        caption="Value"\n        i18n-caption\n        [showOptionalText]="false"\n    >\n        <nui-textbox-number\n            type="number"\n            [ngModel]="gaugeConfig.value"\n            (ngModelChange)="onValueChange($event)"\n            [minValue]="0"\n            [maxValue]="gaugeConfig.max"\n            customBoxWidth="75px"\n        ></nui-textbox-number>\n    </nui-form-field>\n    <nui-chart class="demo__chart" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},64121:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".demo__value-input {\n    margin-right: 40px;\n}\n\n// Setting the height on the chart element determines the vertical length of the gauge\n.demo__chart {\n    height: 200px;\n}\n"},61196:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "vertical-gauge-basic-example",\n    templateUrl: "./vertical-gauge-basic.example.component.html",\n    styleUrls: ["./vertical-gauge-basic.example.component.less"],\n})\nexport class VerticalGaugeBasicExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public gaugeConfig: IGaugeConfig;\n\n    private seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnInit(): void {\n        // Setting up the gauge config\n        const initialValue = 64;\n        this.gaugeConfig = this.getGaugeConfig(initialValue);\n\n        // Creating the chart assist\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n\n        // Assembling the series\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n\n        // Updating the chart\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    public onValueChange(value: number): void {\n        // Updating the gauge config\n        this.gaugeConfig = this.getGaugeConfig(value);\n\n        // Updating the series set with the new config\n        this.seriesSet = GaugeUtil.update(this.seriesSet, this.gaugeConfig);\n\n        // Updating the chart with the updated series set\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 100,\n\n            /**\n             * Optionally customize the default quantity color (defaults to StandardGaugeColor.Ok)\n             */\n\n            // defaultQuantityColor: "var(--nui-color-semantic-ok)",\n        };\n    }\n}\n'},329:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart\n        [style.height.px]="size"\n        [style.width.px]="size"\n        class="d-block"\n        [chart]="chartAssist.chart"\n    ></nui-chart>\n\n    <nui-chart-donut-content\n        style="position: absolute"\n        [plugin]="contentPlugin"\n    >\n        <div\n            class="h-100 w-100 d-flex flex-column justify-content-center align-items-center text-center"\n        >\n            <div class="d-inline-block" nuiZoomContent [zoomRatio]="0.65">\n                {{ gaugeConfig.value | number : "1.0-0" }}\n            </div>\n            <div class="content-label">Network Latency</div>\n            <div class="content-label">(ms)</div>\n        </div>\n    </nui-chart-donut-content>\n</div>\n'},4112:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.content-label {\n    line-height: 14px;\n    font-size: 11px;\n    font-weight: 400;\n    text-transform: uppercase;\n    color: var(--nui-color-text-secondary);\n}\n'},1508:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    ChartDonutContentPlugin,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-tester",\n    templateUrl: "./donut-gauge-tester.component.html",\n    styleUrls: ["./donut-gauge-tester.component.less"],\n})\nexport class DonutGaugeTesterComponent implements OnInit, OnChanges {\n    @Input() public gaugeConfig: IGaugeConfig;\n    @Input() public size = 250;\n\n    public chartAssist: ChartAssist;\n    public contentPlugin: ChartDonutContentPlugin;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnChanges(\n        changes: ComponentChanges<DonutGaugeTesterComponent>\n    ): void {\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chartAssist.chart.addPlugin(this.contentPlugin);\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Donut\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n}\n'},53463:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <h3>Donut</h3>\n        <div class="d-flex justify-content-around">\n            <donut-gauge-tester\n                [gaugeConfig]="gaugeConfigs[0]"\n                [size]="250"\n            ></donut-gauge-tester>\n            <donut-gauge-tester\n                [gaugeConfig]="gaugeConfigs[1]"\n                [size]="300"\n            ></donut-gauge-tester>\n            <donut-gauge-tester\n                id="visual-test-gauge-donut-high-value"\n                [gaugeConfig]="gaugeConfigs[2]"\n                [size]="350"\n            ></donut-gauge-tester>\n        </div>\n        <h3>Horizontal</h3>\n        <div class="d-flex justify-content-around">\n            <horizontal-gauge-tester\n                [gaugeConfig]="gaugeConfigs[0]"\n            ></horizontal-gauge-tester>\n            <horizontal-gauge-tester\n                id="visual-test-gauge-horizontal-medium-value"\n                [gaugeConfig]="gaugeConfigs[1]"\n            ></horizontal-gauge-tester>\n            <horizontal-gauge-tester\n                [gaugeConfig]="gaugeConfigs[2]"\n            ></horizontal-gauge-tester>\n        </div>\n        <h3>Vertical</h3>\n        <div class="d-flex justify-content-around">\n            <vertical-gauge-tester\n                id="visual-test-gauge-vertical-low-value"\n                [gaugeConfig]="gaugeConfigs[0]"\n            ></vertical-gauge-tester>\n            <vertical-gauge-tester\n                [gaugeConfig]="gaugeConfigs[1]"\n            ></vertical-gauge-tester>\n            <vertical-gauge-tester\n                [gaugeConfig]="gaugeConfigs[2]"\n            ></vertical-gauge-tester>\n        </div>\n    </charts-test-harness>\n    <div class="column ml-3">\n        <div class="d-flex align-items-center">\n            <input\n                id="enable-warning"\n                class="mb-2"\n                type="checkbox"\n                [ngModel]="warningEnabled"\n                (ngModelChange)="onWarningEnabledChange($event)"\n            />\n            <label class="px-3" for="enable-warning">Enable Warning</label>\n        </div>\n    </div>\n</div>\n'},78880:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport cloneDeep from "lodash/cloneDeep";\n\nimport {\n    GaugeUtil,\n    IGaugeConfig,\n    GaugeThresholdDefs,\n    StandardGaugeThresholdId,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "gauge-visual-test",\n    templateUrl: "./gauge-visual-test.component.html",\n})\nexport class GaugeVisualTestComponent {\n    public warningEnabled = true;\n    public gaugeConfigs = [\n        this.getGaugeConfig(42),\n        this.getGaugeConfig(130),\n        this.getGaugeConfig(178),\n    ];\n\n    public getGaugeConfig(value: number): IGaugeConfig {\n        return {\n            value,\n            max: 200,\n            thresholds: GaugeUtil.createStandardThresholdsConfig(100, 158),\n        };\n    }\n\n    public onWarningEnabledChange(enabled: boolean): void {\n        this.warningEnabled = enabled;\n        this.gaugeConfigs = this.gaugeConfigs.map((c: IGaugeConfig) => ({\n            ...cloneDeep(c),\n            thresholds: {\n                ...c.thresholds,\n                definitions: {\n                    ...c.thresholds?.definitions,\n                    [StandardGaugeThresholdId.Warning]: {\n                        ...c.thresholds?.definitions[\n                            StandardGaugeThresholdId.Warning\n                        ],\n                        enabled: this.warningEnabled,\n                    },\n                } as GaugeThresholdDefs,\n            },\n        }));\n    }\n}\n'},59283:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="chart d-block" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},91648:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.chart {\n    width: 200px;\n}\n'},99677:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "horizontal-gauge-tester",\n    templateUrl: "./horizontal-gauge-tester.component.html",\n    styleUrls: ["./horizontal-gauge-tester.component.less"],\n})\nexport class HorizontalGaugeTesterComponent implements OnInit, OnChanges {\n    @Input() public gaugeConfig: IGaugeConfig;\n\n    public chartAssist: ChartAssist;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnChanges(\n        changes: ComponentChanges<HorizontalGaugeTesterComponent>\n    ): void {\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n}\n'},65119:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="chart d-block" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},30480:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.chart {\n    height: 200px;\n}\n'},46539:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "vertical-gauge-tester",\n    templateUrl: "./vertical-gauge-tester.component.html",\n    styleUrls: ["./vertical-gauge-tester.component.less"],\n})\nexport class VerticalGaugeTesterComponent implements OnInit, OnChanges {\n    @Input() public gaugeConfig: IGaugeConfig;\n\n    public chartAssist: ChartAssist;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n\n    public ngOnChanges(\n        changes: ComponentChanges<VerticalGaugeTesterComponent>\n    ): void {\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n}\n'},72517:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Line Charts</h1>\n\n<p>\n    From the Nova charting framework\'s point of view, there\'s actually no such\n    thing as a line chart. What actually makes a line chart, well, a line chart\n    is really just data series specifically configured to be rendered using what\n    we call a\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >. A different renderer might allow the data to be visualized as a bar\n    chart. But, regardless of how the framework sees it, a line chart is a\n    pretty basic visualization scenario, and so it\'s ideal for demonstrating the\n    basic concepts of the Nova charting framework.\n</p>\n\n<h2>Basic Line Chart</h2>\n<p>\n    To create a simple line chart, the basic elements you need are: an instance\n    of the\n    <code><a href="../classes/Chart.html" target="_blank">Chart</a></code>\n    class, an instance\n    <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code\n    >, and a set of\n    <code\n        ><a href="../interfaces/IChartSeries.html" target="_blank"\n            >IChartSeries</a\n        ></code\n    >\n    including some data for the chart to visualize.\n</p>\n<p>\n    Each IChartSeries consists of an\n    <code\n        ><a href="../interfaces/IDataSeries.html" target="_blank"\n            >IDataSeries</a\n        ></code\n    >, an\n    <code\n        ><a href="../interfaces/IXYScales.html" target="_blank"\n            >IXYScales</a\n        ></code\n    >\n    object, and a\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >. In most cases, the same instances of IXYScales and LineRenderer can be\n    used for each IChartSeries. When instantiating the\n    <code>LineRenderer</code>, you can optionally pass a configuration object of\n    type\n    <code\n        ><a href="../interfaces/ILineRendererConfig.html" target="_blank"\n            >ILineRendererConfig</a\n        ></code\n    >\n    to make certain modifications to the behavior of the chart.\n</p>\n<p>\n    The IDataSeries in each IChartSeries consists of the data to be visualized,\n    an id, and a\n    <code\n        ><a href="../classes/LineAccessors.html" target="_blank"\n            >LineAccessors</a\n        ></code\n    >\n    instance.\n</p>\n<p>\n    LineAccessors, by default, let the chart know that the values for x and y\n    can be found specifically under properties named \'x\' and \'y\' at the root\n    level within the data you provide. If, however, your data doesn\'t have\n    properties \'x\' and \'y\', or if \'x\' and \'y\' are not at the root level, you can\n    customize the accessors to let the chart know exactly where to find the\n    correct values. For how to do this, the\n    <a\n        href="../additional-documentation/advanced-usage/input-structure/data.html"\n        target="_parent"\n        >Data Accessors</a\n    >\n    page may be a handy guide.\n</p>\n<p>\n    In addition to data access, the LineAccessors also indicate what color and\n    marker symbol the chart should use for each series visualization.\n</p>\n<p>\n    Finally, to initiate the line chart visualization, pass the Chart instance\n    reference to the <code>chart</code> input of <code>nui-chart</code> in your\n    template and invoke the chart\'s update method passing the collection of\n    IChartSeries as the argument. For additional information about chart setup,\n    take a look at\n    <a\n        href="../../additional-documentation/advanced-usage/chart.html"\n        target="_parent"\n        >this</a\n    >\n    page.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    This first example implements a line chart without the aid of a\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >\n    since it doesn\'t require any interaction with an external component such as\n    a legend. Subsequent examples that include a legend will make use of an\n    instance of ChartAssist.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="line-chart-basic"\n    exampleTitle="Basic Line Chart"\n>\n    <nui-line-chart-basic-example></nui-line-chart-basic-example>\n</nui-example-wrapper>\n\n<h2>Legends</h2>\n<nui-message type="info" [allowDismiss]="false"\n    >If you\'re adding a legend to your chart, the easiest way to manage the\n    communication between the chart and the legend is to use an instance of the\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >. Take a closer look at the following examples as there are some structural\n    differences from the example above in the configuration and updating of the\n    chart.\n</nui-message>\n<p>\n    The main documentation page for legends can be found\n    <a\n        href="../additional-documentation/advanced-usage/legend.html"\n        target="_parent"\n        >here</a\n    >. But, in this section you\'ll find some quick examples of how to use\n    legends with a line chart.\n</p>\n<h3>Legend with Basic Tiles</h3>\n<p>\n    To add a legend with basic tiles, add one or more\n    <code\n        ><a href="../components/BasicLegendTileComponent.html" target="_blank"\n            >nui-basic-legend-tiles</a\n        ></code\n    >\n    nested within one or more\n    <code\n        ><a href="../components/LegendSeriesComponent.html" target="_blank"\n            >nui-legend-series</a\n        ></code\n    >\n    nested within a\n    <code\n        ><a href="../components/LegendComponent.html" target="_blank"\n            >nui-legend</a\n        ></code\n    >\n    to your template. To see what this looks like, you can view the html of the\n    example by opening the source expander.\n</p>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-legend"\n    exampleTitle="Legend with Basic Tiles"\n>\n    <nui-line-chart-with-legend-example></nui-line-chart-with-legend-example>\n</nui-example-wrapper>\n\n<h3>Legend with Rich Tiles</h3>\n<p>\n    To add a legend with rich tiles, add one or more\n    <code\n        ><a href="../components/RichLegendTileComponent.html" target="_blank"\n            >nui-rich-legend-tiles</a\n        ></code\n    >\n    nested within one or more\n    <code\n        ><a href="../components/LegendSeriesComponent.html" target="_blank"\n            >nui-legend-series</a\n        ></code\n    >\n    nested within a\n    <code\n        ><a href="../components/LegendComponent.html" target="_blank"\n            >nui-legend</a\n        ></code\n    >\n    to your template. To see what this looks like, you can view the html of the\n    example by opening the source expander.\n</p>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-rich-tile-legend"\n    exampleTitle="Legend with Rich Tiles"\n>\n    <nui-line-chart-with-rich-tile-legend-example></nui-line-chart-with-rich-tile-legend-example>\n</nui-example-wrapper>\n\n<h2>Axis Labels</h2>\n<p>\n    Labels for each axis can be added using a\n    <a\n        href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"\n        target="_blank"\n        >css grid</a\n    >\n    layout. The following example\'s html source demonstrates how to set it up\n    using the Nova Chart layout classes: "nui-chart-layout", "axis-label-left",\n    "axis-label-right", "axis-label-bottom", "chart", and "legend".\n</p>\n<p>\n    For more information about the nova chart grid layout, check out the layout\n    page\n    <a href="../additional-documentation/layout.html" target="_parent">here</a>.\n</p>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-axis-labels"\n    exampleTitle="Axis Labels"\n>\n    <line-chart-with-axis-labels-example></line-chart-with-axis-labels-example>\n</nui-example-wrapper>\n\n<h2>Adding a Second Y-Axis</h2>\n<p>\n    To add a second y-axis, we need to configure the\n    <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code>\n    instance with values for the <code>leftScaleId</code> and\n    <code>rightScaleId</code> properties. The values for these properties should\n    match the id\'s of the left scale and right scale respectively.\n</p>\n<p>\n    Customizing the content displayed for each axis can be achieved by\n    specifying the tick formatter for the desired scale as documented on the\n    <a\n        href="../additional-documentation/advanced-usage/scales/formatters.html"\n        target="_blank"\n        >Formatters</a\n    >\n    page.\n</p>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-2y-axes"\n    exampleTitle="Adding a Second Y-Axis"\n>\n    <line-chart-with-2y-axes-example></line-chart-with-2y-axes-example>\n</nui-example-wrapper>\n\n<h2>Interrupted Data</h2>\n<p>\n    If you want to emphasize the fact that parts of the data you\'re plotting on\n    the chart are not continuous, you can use the following approach to display\n    a line with gaps. To indicate a missing data segment, you\'ll need to use two\n    data series, one for rendering the data itself and the other for rendering\n    gaps in the data. You can use the same data array for both data series. The\n    difference in visualization is achieved using a separate\n    <code>renderer</code> instance configured to recognize missing data and\n    appropriately style the output.\n</p>\n<p>\n    For standard missing data styling, pass an instance of\n    <code\n        ><a href="../classes/MissingDataLineRendererConfig.html" target="_blank"\n            >MissingDataLineRendererConfig</a\n        ></code\n    >\n    to the\n    <code\n        ><a href="../classes/LineRenderer.html" target="_blank"\n            >LineRenderer</a\n        ></code\n    >\n    constructor. The configuration can optionally be customized by modifying the\n    values of its properties. The following example demonstrates the use of\n    standard missing data styling in more detail.\n</p>\n<h4>Enhanced Line Caps</h4>\n<p>\n    By default, the styling for interrupted data includes enhanced line caps, or\n    dots, at each vertex of the path representing the missing data. To disable\n    the line caps, set the\n    <code>{{ getLineRendererConfigPropKey("useEnhancedLineCaps") }}</code>\n    property on the renderer\'s\n    <code>{{ getLineRendererPropKey("config") }}</code> property to\n    <code>false</code>. To modify the styling of the enhanced line caps, set\n    alternate values on the renderer\n    <code>{{ getLineRendererPropKey("config") }}</code\n    >\'s\n    <code>{{ getLineRendererConfigPropKey("enhancedLineCap") }}</code> property\n    of type\n    <code\n        ><a href="../interfaces/IEnhancedLineCapConfig.html" target="_blank"\n            >IEnhancedLineCapConfig</a\n        ></code\n    >.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    The <code>defined</code> accessor used in the following example directly\n    implements the behavior of the D3\n    <code\n        ><a href="https://github.com/d3/d3-shape#line_defined" target="_blank"\n            >line.defined</a\n        ></code\n    >\n    method, so you can head over there to read more detailed documentation.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="line-chart-interrupted-basic"\n    exampleTitle="Interrupted Data"\n>\n    <line-chart-interrupted-basic-example></line-chart-interrupted-basic-example>\n</nui-example-wrapper>\n\n<h3>Automatic Calculation of Interrupted Segments</h3>\n<p>\n    If your data is time based and is defined at regular intervals, it\'s\n    possible to calculate the missing data segments automatically. Nova Charts\n    provides a convenience function for this called\n    <a href="../miscellaneous/functions.html#calculateMissingData"\n        ><code>calculateMissingData</code></a\n    >\n    which creates a new data array with data points inserted to indicate\n    interruptions in your series. It\'s important to keep in mind that the new\n    data array must be assigned to both series used in the missing data\n    visualization--one indicating the valid data segments and the other\n    indicating the missing data segments.\n</p>\n<nui-example-wrapper\n    filenamePrefix="line-chart-interrupted-calculated"\n    exampleTitle="Calculated Segments of Interrupted Data"\n>\n    <line-chart-interrupted-calculated-example></line-chart-interrupted-calculated-example>\n</nui-example-wrapper>\n\n<h2>Tooltips</h2>\n<p>\n    For information about how to add tooltips to line charts, take a look at the\n    <a href="../additional-documentation/plugins/tooltips.html" target="_parent"\n        >tooltips</a\n    >\n    page.\n</p>\n\n<h2>Popovers</h2>\n<p>\n    For information about how to add popovers to line charts, take a look at the\n    <a href="../additional-documentation/plugins/popovers.html" target="_parent"\n        >popovers</a\n    >\n    page.\n</p>\n'},81621:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\nimport {\n    IEnhancedLineCapConfig,\n    ILineRendererConfig,\n    LineRenderer,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-docs-line",\n    templateUrl: "./chart-docs-line.component.html",\n})\nexport class ChartDocsLineComponent {\n    getEnhancedLineCapConfigPropKey(key: keyof IEnhancedLineCapConfig): string {\n        return key;\n    }\n\n    getLineRendererConfigPropKey(key: keyof ILineRendererConfig): string {\n        return key;\n    }\n\n    getLineRendererPropKey(key: keyof LineRenderer): string {\n        return key;\n    }\n}\n'},46341:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    NuiSwitchModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartDocsLineComponent } from "./chart-docs-line.component";\nimport { LineChartBasicExampleComponent } from "./line-chart-basic/line-chart-basic.example.component";\nimport { LineChartInterruptedBasicExampleComponent } from "./line-chart-interrupted-basic/line-chart-interrupted-basic-example.component";\nimport { LineChartInterruptedCalculatedExampleComponent } from "./line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component";\nimport { LineChartInterruptedPathTerminusExampleComponent } from "./line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component";\nimport { LineChartStackedTestComponent } from "./line-chart-stacked-test/line-chart-stacked-test.component";\nimport { LineChartTestComponent } from "./line-chart-test/line-chart-test.component";\nimport { LineChartVisualTestComponent } from "./line-chart-visual-test/line-chart-visual-test.component";\nimport { LineChartWith2YAxesExampleComponent } from "./line-chart-with-2y-axes/line-chart-with-2y-axes-example.component";\nimport { LineChartWithAxisLabelsExampleComponent } from "./line-chart-with-axis-labels/line-chart-with-axis-labels.example.component";\nimport { LineChartWithLargeValuesExampleComponent } from "./line-chart-with-large-values/line-chart-with-large-values.example.component";\nimport { LineChartWithLegendExampleComponent } from "./line-chart-with-legend/line-chart-with-legend.example.component";\nimport { LineChartWithRichTileLegendExampleComponent } from "./line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsLineComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "axis-labels",\n        component: LineChartWithAxisLabelsExampleComponent,\n    },\n    {\n        path: "two-y-axes",\n        component: LineChartWith2YAxesExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "basic",\n        component: LineChartBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "rich-legend-tile",\n        component: LineChartWithRichTileLegendExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "interrupted",\n        component: LineChartInterruptedBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "interrupted-calculated",\n        component: LineChartInterruptedCalculatedExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "interrupted-path-terminus",\n        component: LineChartInterruptedPathTerminusExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: LineChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "stacked-test",\n        component: LineChartStackedTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: LineChartVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsLineComponent,\n        LineChartWithAxisLabelsExampleComponent,\n        LineChartBasicExampleComponent,\n        LineChartStackedTestComponent,\n        LineChartTestComponent,\n        LineChartVisualTestComponent,\n        LineChartWithLegendExampleComponent,\n        LineChartWithRichTileLegendExampleComponent,\n        LineChartWith2YAxesExampleComponent,\n        LineChartInterruptedBasicExampleComponent,\n        LineChartInterruptedPathTerminusExampleComponent,\n        LineChartInterruptedCalculatedExampleComponent,\n        LineChartWithLargeValuesExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiSwitchModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiChartsModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("line"),\n        },\n    ],\n})\nexport default class ChartDocsLineModule {}\n'},70337:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},2621:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-basic-example",\n    templateUrl: "./line-chart-basic.example.component.html",\n})\nexport class LineChartBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes and other grid elements\n    public chart = new Chart(new XYGrid());\n\n    public ngOnInit(): void {\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new LineAccessors();\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},51335:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},32201:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-interrupted-basic-example",\n    templateUrl: "./line-chart-interrupted-basic-example.component.html",\n})\nexport class LineChartInterruptedBasicExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(\n            new MissingDataLineRendererConfig()\n        );\n        const accessorsMissing = new LineAccessors();\n        // We need to store the original value of the \'defined\' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We\'re calling the original \'defined\' accessor implementation, but inverting it\'s logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + "__missing",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don\'t want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment("2016-12-25T15:14:29.909Z", format).toDate(),\n                    y: 30,\n                },\n                {\n                    x: moment("2016-12-27T15:14:29.909Z", format).toDate(),\n                    y: 95,\n                },\n\n                // missing data segment\n                {\n                    x: moment("2016-12-27T15:14:29.909Z", format).toDate(),\n                    y: 95,\n                    defined: false,\n                },\n                {\n                    x: moment("2016-12-29T15:14:29.909Z", format).toDate(),\n                    y: 30,\n                    defined: false,\n                },\n\n                // single defined data point surrounded by missing data segments\n                {\n                    x: moment("2016-12-29T15:14:29.909Z", format).toDate(),\n                    y: 30,\n                },\n\n                // missing data segment\n                {\n                    x: moment("2016-12-29T15:14:29.909Z", format).toDate(),\n                    y: 30,\n                    defined: false,\n                },\n                {\n                    x: moment("2016-12-31T15:14:29.909Z", format).toDate(),\n                    y: 60,\n                    defined: false,\n                },\n\n                {\n                    x: moment("2016-12-31T15:14:29.909Z", format).toDate(),\n                    y: 60,\n                },\n                {\n                    x: moment("2017-01-03T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                },\n\n                // missing data segment\n                {\n                    x: moment("2017-01-03T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                    defined: false,\n                },\n                {\n                    x: moment("2017-01-04T15:14:29.909Z", format).toDate(),\n                    y: 20,\n                    defined: false,\n                },\n\n                {\n                    x: moment("2017-01-04T15:14:29.909Z", format).toDate(),\n                    y: 20,\n                },\n                {\n                    x: moment("2017-01-05T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                {\n                    x: moment("2016-12-25T15:14:29.909Z", format).toDate(),\n                    y: 60,\n                },\n                {\n                    x: moment("2016-12-27T15:14:29.909Z", format).toDate(),\n                    y: 40,\n                },\n                {\n                    x: moment("2016-12-29T15:14:29.909Z", format).toDate(),\n                    y: 70,\n                },\n                {\n                    x: moment("2016-12-31T15:14:29.909Z", format).toDate(),\n                    y: 45,\n                },\n                {\n                    x: moment("2017-01-03T15:14:29.909Z", format).toDate(),\n                    y: 90,\n                },\n            ],\n        },\n    ];\n}\n'},99603:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},48082:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport { duration } from "moment/moment";\n\nimport {\n    calculateMissingData,\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeIntervalScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-interrupted-calculated-example",\n    templateUrl: "./line-chart-interrupted-calculated-example.component.html",\n})\nexport class LineChartInterruptedCalculatedExampleComponent implements OnInit {\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const interval = duration(1, "hour");\n        const xScale = new TimeIntervalScale(interval);\n        const scales: IXYScales = {\n            x: xScale,\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(\n            new MissingDataLineRendererConfig()\n        );\n        const accessorsMissing = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        // Link the colors from \'parent\' series\n        const origColorAccessor = accessorsMissing.series.color;\n        accessorsMissing.series.color = (seriesId, series) =>\n            origColorAccessor?.(seriesId.split("__")[0], series);\n\n        // We need to store the original value of the \'defined\' accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // We\'re calling the original \'defined\' accessor implementation, but inverting it\'s logic because, from the missing data\n        // series point of view, the undefined data are actually visualized as defined.\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            // The first data series is for rendering the valid data\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            // We\'re using this convenience function to calculate the missing data according to the scale\'s interval\n            const data = calculateMissingData(cs, "x", xScale.interval());\n            // We have to use data that includes the missing data points for the first series as well\n            cs.data = data;\n            seriesSet.push(cs);\n\n            // This series will be used to visualize the missing data points\n            seriesSet.push({\n                // This naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + "__missing",\n                data: data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // We don\'t want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: new Date(2016, 11, 25, 5), y: 30 },\n                { x: new Date(2016, 11, 25, 6), y: 95 },\n                { x: new Date(2016, 11, 25, 7), y: 60 },\n                { x: new Date(2016, 11, 25, 10), y: 75 },\n                { x: new Date(2016, 11, 25, 12), y: 35 },\n                { x: new Date(2016, 11, 25, 13), y: 20 },\n            ],\n        },\n    ];\n}\n'},25653:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},31826:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MissingDataLineRendererConfig,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-interrupted-path-terminus-example",\n    templateUrl:\n        "./line-chart-interrupted-path-terminus-example.component.html",\n})\nexport class LineChartInterruptedPathTerminusExampleComponent\n    implements OnInit\n{\n    // XYGrid is used for rendering axes as well as other grid elements\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const incomingSeries = getData();\n\n        // Here we assemble the complete chart series.\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = [];\n\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        // Line accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        // Renderer for the missing dataSeries\n        const rendererMissing = new LineRenderer(\n            new MissingDataLineRendererConfig()\n        );\n        const accessorsMissing = new LineAccessors();\n        // we need to store the original value of the `defined` accessor\n        const origDefinedAccessor = accessorsMissing.data.defined;\n        // we\'re calling the original accessor implementation, but inverting it\'s logic\n        accessorsMissing.data.defined = (d, i, data, dataSeries) =>\n            !origDefinedAccessor?.(d, i, data, dataSeries) ?? true;\n\n        for (const s of incomingSeries) {\n            const cs: IChartSeries<ILineAccessors> = {\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            };\n            seriesSet.push(cs);\n\n            // this series will be used to visualize the missing data points\n            seriesSet.push({\n                // this naming convention will connect these two series and their interaction will be synchronized\n                id: s.id + "__missing",\n                data: s.data,\n                accessors: accessorsMissing,\n                renderer: rendererMissing,\n                scales,\n                showInLegend: false, // we don\'t want to show this in the legend\n            });\n        }\n\n        // Finally, pass the series set to the chart\'s update method\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    x: moment("2016-12-25T15:14:29.909Z", format).toDate(),\n                    y: 30,\n                    defined: false,\n                },\n                {\n                    x: moment("2016-12-27T15:14:29.909Z", format).toDate(),\n                    y: 95,\n                    defined: false,\n                },\n                {\n                    x: moment("2016-12-27T15:14:29.909Z", format).toDate(),\n                    y: 95,\n                },\n                {\n                    x: moment("2016-12-28T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                },\n                {\n                    x: moment("2016-12-31T15:14:29.909Z", format).toDate(),\n                    y: 60,\n                },\n                {\n                    x: moment("2017-01-03T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                },\n                {\n                    x: moment("2017-01-04T15:14:29.909Z", format).toDate(),\n                    y: 20,\n                },\n                {\n                    x: moment("2017-01-04T15:14:29.909Z", format).toDate(),\n                    y: 20,\n                    defined: false,\n                },\n                {\n                    x: moment("2017-01-05T15:14:29.909Z", format).toDate(),\n                    y: 35,\n                    defined: false,\n                },\n            ],\n        },\n    ];\n}\n'},69078:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-line-chart-stacked-test">\n    <nui-chart\n        [nuiChartCollectionId]="collectionId"\n        class="d-flex"\n        [chart]="chart1"\n    ></nui-chart>\n    <nui-chart\n        [nuiChartCollectionId]="collectionId"\n        class="d-flex"\n        [chart]="chart2"\n    ></nui-chart>\n    <nui-chart\n        [nuiChartCollectionId]="collectionId"\n        class="d-flex"\n        [chart]="chart3"\n    ></nui-chart>\n    <p>\n        <nui-switch (valueChange)="onSyncUpdate($event)"\n            >Synchronize Chart Cursor</nui-switch\n        >\n    </p>\n    <p>\n        <input\n            id="data-input"\n            type="text"\n            class="w-100 mt-5"\n            [ngModel]="input"\n            (ngModelChange)="inputChanged($event)"\n        />\n        <button nui-button (click)="generateRandomData()">\n            Generate Random Data\n        </button>\n    </p>\n</div>\n'},69210:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SequentialColorProvider,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\nconst rand = (lower: number, upper: number): number =>\n    lower + Math.round(Math.random() * (upper - lower));\n\nconst range = (count: number) =>\n    new Array(count).fill(null).map((_, index) => index);\n\nconst createRandomData = () =>\n    range(rand(3, 12)).map(() => range(rand(3, 12)).map(() => rand(0, 100)));\n\n@Component({\n    selector: "nui-line-chart-stacked-test",\n    templateUrl: "./line-chart-stacked-test.component.html",\n})\nexport class LineChartStackedTestComponent implements OnInit {\n    public collectionId = "";\n\n    public input: string;\n    public chart1: Chart;\n    public chart2: Chart;\n    public chart3: Chart;\n\n    private seriesSet: IChartSeries<ILineAccessors>[];\n    private initialInput = [\n        [30, 95, 15, 60, 35],\n        [60, 40, 70, 45, 90],\n        [30, 95, 15, 60, 35],\n        [60, 40, 70, 45, 90],\n    ];\n\n    public ngOnInit(): void {\n        this.input = JSON.stringify(this.initialInput);\n        this.configureCharts();\n\n        this.update(this.initialInput);\n    }\n\n    public inputChanged(value: string): void {\n        this.update(JSON.parse(value));\n    }\n\n    public generateRandomData(): void {\n        const data = createRandomData();\n        this.input = JSON.stringify(data);\n        this.update(data);\n    }\n\n    private update(input: number[][]) {\n        this.seriesSet = this.buildSeriesSet(input);\n        const serieCount = this.seriesSet.length;\n\n        const charts = [this.chart1, this.chart2, this.chart3];\n        const chartCount = charts.length;\n\n        charts.forEach((chart, chartIndex) => {\n            const lower = Math.round((serieCount * chartIndex) / chartCount);\n            const upper = Math.round(\n                (serieCount * (chartIndex + 1)) / chartCount\n            );\n            chart.update(this.seriesSet.slice(lower, upper));\n        });\n    }\n\n    private configureCharts() {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.height(110);\n        gridConfig.dimension.width(400);\n        this.chart1 = new Chart(new XYGrid(gridConfig));\n        this.chart2 = new Chart(new XYGrid(gridConfig));\n        this.chart3 = new Chart(new XYGrid(gridConfig));\n    }\n\n    private buildSeriesSet(input: number[][]): IChartSeries<ILineAccessors>[] {\n        const colors = [\n            "red",\n            "orange",\n            "yellow",\n            "lime",\n            "green",\n            "blue",\n            "purple",\n            "black",\n            "gray",\n            "olive",\n            "gold",\n            "silver",\n        ];\n        const format = "YYYY-MM-DD";\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors(\n            new SequentialColorProvider(colors)\n        );\n        const yScale = new LinearScale();\n        yScale.fixDomain([0, 100]);\n\n        return input.map((row, rowIndex) => ({\n            id: `series-${rowIndex}`,\n            name: "Series ${index + 1}",\n            data: row.map((value, valueIndex) => ({\n                x: moment("2020-01-15", format).add(\n                    (24 * 7 * valueIndex) / (row.length - 1),\n                    "hour"\n                ),\n                y: value,\n            })),\n            scales: {\n                x: new TimeScale(),\n                y: yScale,\n            },\n            renderer,\n            accessors,\n        }));\n    }\n\n    public onSyncUpdate(value: boolean): void {\n        this.collectionId = value ? "test-collection" : "";\n    }\n}\n'},34296:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-line-chart-basic-test">\n    <nui-chart class="d-flex" [chart]="chart"></nui-chart>\n    <input\n        id="data-input"\n        type="text"\n        class="w-100 mt-5"\n        [ngModel]="input"\n        (ngModelChange)="inputChanged($event)"\n    />\n</div>\n'},28004:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SequentialColorProvider,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\ninterface ChartDatum {\n    x: moment.Moment;\n    y: number;\n}\n\n@Component({\n    selector: "nui-line-chart-test",\n    templateUrl: "./line-chart-test.component.html",\n})\nexport class LineChartTestComponent implements OnInit {\n    public input: string;\n    public chart: Chart;\n    private seriesSet: IChartSeries<ILineAccessors>[];\n    private initialInput = [\n        [30, 95, 15, 60, 35],\n        [60, 40, 70, 45, 90],\n    ];\n\n    public ngOnInit(): void {\n        this.input = JSON.stringify(this.initialInput);\n        this.configureChart();\n        this.buildSeriesSet();\n\n        this.update(this.initialInput);\n    }\n\n    public inputChanged(value: string): void {\n        this.update(JSON.parse(value));\n    }\n\n    private update(input: number[][]) {\n        this.seriesSet.forEach((s: IChartSeries<ILineAccessors>, i: number) => {\n            const seriesInput = input[i] || [];\n            s.data.forEach((datum: ChartDatum, j: number) => {\n                const newValue = seriesInput[j] || 0;\n                datum.y = newValue;\n            });\n        });\n\n        this.chart.update(this.seriesSet);\n    }\n\n    private configureChart() {\n        const gridConfig = new XYGridConfig();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.height(110);\n        gridConfig.dimension.width(400);\n        this.chart = new Chart(new XYGrid(gridConfig));\n    }\n\n    private buildSeriesSet() {\n        const colors = [\n            "red",\n            "orange",\n            "yellow",\n            "green",\n            "blue",\n            "purple",\n            "black",\n            "white",\n        ];\n        const dates = [\n            "2016-12-25",\n            "2016-12-26",\n            "2016-12-27",\n            "2016-12-28",\n            "2016-12-29",\n        ];\n        const format = "YYYY-MM-DD";\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors(\n            new SequentialColorProvider(colors)\n        );\n        const yScale = new LinearScale();\n        yScale.fixDomain([0, 100]);\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: yScale,\n        };\n\n        this.seriesSet = [\n            {\n                id: "1",\n                name: "Series 1",\n                data: dates.map((d: string) => ({\n                    x: moment(d, format),\n                    y: 0,\n                })),\n            },\n            {\n                id: "2",\n                name: "Series 2",\n                data: dates.map((d: string) => ({\n                    x: moment(d, format),\n                    y: 0,\n                })),\n            },\n        ].map((s) => ({ ...s, scales, renderer, accessors }));\n    }\n}\n'},52884:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <div class="m-5">\n            <h4>Basic Usage With Rich Tile Legend and Axis Labels</h4>\n            <line-chart-with-axis-labels-example></line-chart-with-axis-labels-example>\n        </div>\n        <div class="m-5">\n            <h4>Large Values</h4>\n            <line-chart-with-large-values-example></line-chart-with-large-values-example>\n        </div>\n        <div class="m-5">\n            <h4>Two Y Axes</h4>\n            <line-chart-with-2y-axes-example></line-chart-with-2y-axes-example>\n        </div>\n        <div class="m-5">\n            <h4>Missing data manual</h4>\n            <line-chart-interrupted-basic-example></line-chart-interrupted-basic-example>\n        </div>\n        <div class="m-5">\n            <h4>Missing data calculated</h4>\n            <line-chart-interrupted-calculated-example></line-chart-interrupted-calculated-example>\n        </div>\n        <div class="m-5">\n            <h4>Missing data on path terminus</h4>\n            <line-chart-interrupted-path-terminus-example></line-chart-interrupted-path-terminus-example>\n        </div>\n    </charts-test-harness>\n</div>\n'},33570:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    templateUrl: "./line-chart-visual-test.component.html",\n})\nexport class LineChartVisualTestComponent {}\n'},37174:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n [style]="leftAxisStyles">Left axis label</strong>\n    </div>\n    <div class="axis-label-right nui-text-small">\n        <strong i18n [style]="rightAxisStyles">Right axis label</strong>\n    </div>\n    <div class="axis-label-bottom nui-text-small">\n        <strong i18n>Bottom axis label</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                    [unitLabel]="legendSeries.unitLabel"\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},6165:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit } from "@angular/core";\nimport moment from "moment/moment";\nimport { Subject } from "rxjs";\nimport { takeUntil } from "rxjs/operators";\n\nimport {\n    AXES_STYLE_CHANGE_EVENT,\n    Chart,\n    ChartAssist,\n    IAxesStyleChangeEventPayload,\n    IChartEvent,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-with-2y-axes-example",\n    templateUrl: "./line-chart-with-2y-axes-example.component.html",\n})\nexport class LineChartWith2YAxesExampleComponent implements OnInit, OnDestroy {\n    public chart: Chart;\n    public chartAssist: ChartAssist;\n\n    public yLeftScale: LinearScale;\n    public yRightScale: LinearScale;\n    public axesStyles: IAxesStyleChangeEventPayload;\n\n    private readonly destroy$ = new Subject<void>();\n\n    public get leftAxisStyles(): Record<string, any> {\n        return this.axesStyles?.[this.yLeftScale.id] ?? {};\n    }\n\n    public get rightAxisStyles(): Record<string, any> {\n        return this.axesStyles?.[this.yRightScale.id] ?? {};\n    }\n\n    constructor(public changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        const xScale = new TimeScale();\n        this.yLeftScale = new LinearScale();\n        this.yLeftScale.formatters.tick = (value: Number) => `${value}%`;\n\n        this.yRightScale = new LinearScale();\n        this.yRightScale.formatters.tick = (value: Number) => `${value}G`;\n\n        const xyGrid = new XYGrid();\n\n        // Set the grid\'s left and right scale id\'s using the id\'s of the corresponding scales\n        xyGrid.leftScaleId = this.yLeftScale.id;\n        xyGrid.rightScaleId = this.yRightScale.id;\n\n        // Set the grid\'s \'axis.left.fit\' property to \'true\' to accommodate the extra label width required by the\n        // left scale\'s tick formatter output (Note: \'axis.right.fit\' is true by default.).\n        xyGrid.config().axis.left.fit = true;\n\n        this.chart = new Chart(xyGrid);\n        this.chartAssist = new ChartAssist(this.chart);\n\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales: {\n                    x: xScale,\n                    // In this case, we\'re using the right-hand scale only for "series-3"\n                    y: d.id === "series-3" ? this.yRightScale : this.yLeftScale,\n                },\n                unitLabel: d.id === "series-3" ? "GB" : "%",\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n\n        // Here we subscribe to an event indicating changes on axis styling. We use that information to style axis labels\n        this.chart.eventBus\n            .getStream(AXES_STYLE_CHANGE_EVENT)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event: IChartEvent<IAxesStyleChangeEventPayload>) => {\n                this.axesStyles = event.data;\n                this.changeDetector.markForCheck();\n            });\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Average CPU Load",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Packet Loss",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n        {\n            id: "series-3",\n            name: "Average Memory Used",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 10 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 75 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 22 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n        {\n            id: "series-4",\n            name: "No data",\n            data: [],\n        },\n    ];\n}\n'},94153:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Left axis label</strong>\n    </div>\n    <div class="axis-label-right nui-text-small">\n        <strong i18n>Right axis label</strong>\n    </div>\n    <div class="axis-label-bottom nui-text-small">\n        <strong i18n>Bottom axis label</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},83498:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-with-axis-labels-example",\n    templateUrl: "./line-chart-with-axis-labels.example.component.html",\n})\nexport class LineChartWithAxisLabelsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},38624:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Left axis label</strong>\n    </div>\n    <div class="axis-label-right nui-text-small">\n        <strong i18n>Right axis label</strong>\n    </div>\n    <div class="axis-label-bottom nui-text-small">\n        <strong i18n>Bottom axis label</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="ms"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="\n                        chartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\',\n                            \'tick\'\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},61410:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-with-large-values-example",\n    templateUrl: "./line-chart-with-large-values.example.component.html",\n})\nexport class LineChartWithLargeValuesExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        (this.chart.getGrid().config() as XYGridConfig).axis.left.fit = true;\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 3000 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 9500 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 1500 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 6000 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 3500 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 6000 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 4000 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 7000 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 4500 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 9000 },\n            ],\n        },\n    ];\n}\n'},81309:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n<nui-legend\n    seriesUnitLabel="sec"\n    i18n-seriesUnitLabel\n    [interactive]="true"\n    (mouseleave)="chartAssist.resetVisibleSeries()"\n    orientation="horizontal"\n>\n    <nui-legend-series\n        *ngFor="\n            let legendSeries of chartAssist.legendSeriesSet;\n            trackBy: chartAssist.seriesTrackByFn\n        "\n        [descriptionPrimary]="legendSeries[\'name\']"\n        (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n        [seriesRenderState]="\n            chartAssist.renderStatesIndex[legendSeries.id]?.state\n        "\n        [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n        (isSelectedChange)="chartAssist.toggleSeries(legendSeries.id, $event)"\n    >\n        <nui-basic-legend-tile>\n            <nui-chart-marker\n                [marker]="chartAssist.markers.get(legendSeries.id)"\n                [color]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [drawLine]="true"\n            ></nui-chart-marker>\n        </nui-basic-legend-tile>\n    </nui-legend-series>\n</nui-legend>\n'},77165:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-legend-example",\n    templateUrl: "./line-chart-with-legend.example.component.html",\n})\nexport class LineChartWithLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},47133:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},59883:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    LineSelectSeriesInteractionStrategy,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-rich-tile-legend-example",\n    templateUrl: "./line-chart-with-rich-tile-legend.example.component.html",\n})\nexport class LineChartWithRichTileLegendExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public ngOnInit(): void {\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer({\n            // for series interaction and ability to handle click configure renderer with interactionStrategy\n            interactionStrategy: new LineSelectSeriesInteractionStrategy(),\n        });\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 130 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 195 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 115 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 160 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 135 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},78405:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Pie and Donut Charts</h1>\n\n<p>\n    Pie Chart is a common way of showing part-to-whole data - but be aware that\n    one of the shortcomings of this visualization is that, depending on the data\n    to be visualized, it can be difficult for users to accurately compare the\n    size of the segments.\n</p>\n<p>\n    A donut chart is similar to a pie chart - but the open center area can be a\n    good place to include more information about the data (eg. the total of all\n    segments).\n</p>\n\n<h2>Basic Donut chart</h2>\n<p>\n    For the process of creating a donut chart, please refer to the inline\n    comments of the example source code below. For further reference, here are\n    documentation links to the elements required for creating a donut chart:\n    <code><a href="../classes/Chart.html" target="_blank">Chart</a></code\n    >,\n    <code\n        ><a href="../miscellaneous/functions.html#radialGrid" target="_blank"\n            >radialGrid</a\n        ></code\n    >,\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >,\n    <code\n        ><a href="../classes/RadialAccessors.html" target="_blank"\n            >RadialAccessors</a\n        ></code\n    >,\n    <code\n        ><a href="../miscellaneous/functions.html#radialScales" target="_blank"\n            >radialScales</a\n        ></code\n    >,\n    <code\n        ><a href="../classes/RadialRenderer.html" target="_blank"\n            >RadialRenderer</a\n        ></code\n    >, and\n    <code\n        ><a href="../interfaces/IChartAssistSeries.html" target="_blank"\n            >IChartAssistSeries</a\n        ></code\n    >.\n</p>\n<nui-example-wrapper filenamePrefix="donut-chart" exampleTitle="Donut Chart">\n    <nui-donut-chart-example></nui-donut-chart-example>\n</nui-example-wrapper>\n\n<h2>Basic Pie chart</h2>\n<p>\n    The process of creating of a pie chart is very similar to that of creating a\n    donut chart. The only difference is that the renderer passed to the chart\n    assist update method is a\n    <code\n        ><a href="../classes/PieRenderer.html" target="_blank"\n            >PieRenderer</a\n        ></code\n    >\n    instead of a RadialRenderer.\n</p>\n<nui-example-wrapper filenamePrefix="pie-chart" exampleTitle="Pie Chart">\n    <nui-pie-chart-example></nui-pie-chart-example>\n</nui-example-wrapper>\n\n<h2>Content Inside the Donut Chart</h2>\n<p>\n    There are a couple of ways to create a Donut Chart with nested custom\n    content.\n</p>\n<ol>\n    <li>\n        Use <code>has-overlay</code> and <code>overlay</code> css classes to\n        center the content <strong>over</strong> the chart. Of the two methods,\n        this one is simpler to use and will likely serve your needs if your\n        content doesn\'t need to be responsive to dynamic chart resizing.\n    </li>\n    <li>\n        Use\n        <code\n            ><a\n                href="../components/ChartDonutContentComponent.html"\n                target="_blank"\n                >nui-chart-donut-content</a\n            ></code\n        >\n        with an instance of\n        <code\n            ><a href="../classes/ChartDonutContentPlugin.html" target="_blank"\n                >ChartDonutContentPlugin</a\n            ></code\n        >. This will put your content in a container that fits exactly\n        <strong>inside</strong> of the donut. This can be useful if your content\n        should be responsive to the chart size (e.g. do word wrap).\n    </li>\n</ol>\n<p>The following example demonstrates both options side by side.</p>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-with-content"\n    exampleTitle="Donut Chart With Content"\n>\n    <nui-donut-chart-with-content-example></nui-donut-chart-with-content-example>\n</nui-example-wrapper>\n\n<h2>Chart Interaction With the Legend and Custom Colors</h2>\n<p>\n    Using features of the charting framework, it is possible to easily implement\n    a fully-working interactive chart and legend combo. The interaction between\n    the chart and the legend is set up in the html by applying chart assist\n    method calls and property values to the\n    <code\n        ><a href="../components/LegendComponent.html" target="_blank"\n            >nui-legend</a\n        ></code\n    >,\n    <code\n        ><a href="../components/LegendSeriesComponent.html" target="_blank"\n            >nui-legend-series</a\n        ></code\n    >, and\n    <code\n        ><a href="../components/RichLegendTileComponent.html" target="_blank"\n            >nui-rich-legend-tile</a\n        ></code\n    >\n    component inputs. The example below demonstrates a donut chart, but legend\n    interaction can be achieved in the same way for a pie chart. Take a look at\n    the example\'s html source to see how it to do it.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    Color assignment happens automatically if you only need default colors. But,\n    if you need custom colors, the following example\'s typescript source file\n    demonstrates how to provide them to the chart.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-interactive"\n    exampleTitle="Donut Chart Interacting With a Legend"\n>\n    <nui-donut-chart-interactive-example></nui-donut-chart-interactive-example>\n</nui-example-wrapper>\n\n<h2>Tooltips</h2>\n<p>\n    For information about how to add tooltips to pie and donut charts, take a\n    look at the\n    <a href="../additional-documentation/plugins/tooltips.html" target="_parent"\n        >tooltips</a\n    >\n    page.\n</p>\n\n<h2>Popovers</h2>\n<p>\n    For information about how to add popovers to pie and donut charts, take a\n    look at the\n    <a href="../additional-documentation/plugins/popovers.html" target="_parent"\n        >popovers</a\n    >\n    page.\n</p>\n'},92440:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-pie-and-donut",\n    templateUrl: "./chart-docs-pie-and-donut.component.html",\n})\nexport class ChartDocsPieAndDonutComponent {}\n'},92722:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { ChartDocsPieAndDonutComponent } from "./chart-docs-pie-and-donut.component";\nimport { DonutChartInteractiveExampleComponent } from "./donut-chart-interactive/donut-chart-interactive.example.component";\nimport { DonutChartTestComponent } from "./donut-chart-test/donut-chart-test.component";\nimport { DonutChartWithContentExampleComponent } from "./donut-chart-with-content/donut-chart-with-content.example.component";\nimport { DonutChartExampleComponent } from "./donut-chart/donut-chart.example.component";\nimport { PieChartTestComponent } from "./pie-chart-test/pie-chart-test.component";\nimport { PieChartExampleComponent } from "./pie-chart/pie-chart.example.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsPieAndDonutComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "pie",\n        component: PieChartExampleComponent,\n    },\n    {\n        path: "donut-interactive",\n        component: DonutChartInteractiveExampleComponent,\n    },\n    {\n        path: "pie-test",\n        component: PieChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "donut",\n        component: DonutChartExampleComponent,\n    },\n    {\n        path: "donut-with-content",\n        component: DonutChartWithContentExampleComponent,\n    },\n    {\n        path: "donut-test",\n        component: DonutChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsPieAndDonutComponent,\n        DonutChartExampleComponent,\n        DonutChartWithContentExampleComponent,\n        DonutChartInteractiveExampleComponent,\n        DonutChartTestComponent,\n        PieChartExampleComponent,\n        PieChartTestComponent,\n    ],\n    imports: [\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("pie-and-donut"),\n        },\n    ],\n})\nexport default class ChartDocsPieAndDonutModule {}\n'},96927:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [active]="chartAssist.isLegendActive"\n            [interactive]="false"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\'] | titlecase"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="legendSeries.data[0]?.value"\n                    backgroundColor="transparent"\n                >\n                </nui-rich-legend-tile>\n                <nui-icon [icon]="\'status_\' + legendSeries[\'name\']"></nui-icon>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},83004:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    Chart,\n    ChartAssist,\n    CHART_PALETTE_CS_S_EXTENDED,\n    MappedValueProvider,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n@Component({\n    selector: "nui-donut-chart-interactive-example",\n    templateUrl: "./donut-chart-interactive.example.component.html",\n})\nexport class DonutChartInteractiveExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // Instantiate the chart and chart assist\n        this.chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n\n        // If custom colors are needed, instantiate a custom color provider in the form of a MappedValueProvider.\n        // This is only needed if your chart requires colors that deviate from the ones provided by the default\n        // color provider.\n        const statusColorProvider = new MappedValueProvider<string>(\n            zipObject(\n                [\n                    Status.Down,\n                    Status.Critical,\n                    Status.Warning,\n                    Status.Unknown,\n                    Status.Up,\n                    Status.Unmanaged,\n                ],\n                CHART_PALETTE_CS_S_EXTENDED.filter(\n                    (_, index) => index % 2 === 0\n                )\n            )\n        );\n\n        // Instantiate the RadialAccessors and set the series color accessor to the new\n        // color provider\'s get method\n        const accessors = new RadialAccessors();\n        accessors.series.color = statusColorProvider.get;\n\n        // Create radial scales and a renderer to be included in the IChartAssistSeries collection\n        const scales = radialScales();\n        const renderer = new RadialRenderer();\n\n        // Invoke the chart assist\'s update method with the IChartAssistSeries collection as the argument\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { status: Status.Up, value: 42 },\n        { status: Status.Warning, value: 14 },\n        { status: Status.Critical, value: 8 },\n        { status: Status.Down, value: 7 },\n        { status: Status.Unmanaged, value: 5 },\n        { status: Status.Unknown, value: 3 },\n    ].map((d) => ({ id: d.status, name: d.status, data: [d.value] }));\n}\n'},73030:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-donut-chart-basic-test">\n    <div class="d-flex flex-column" [style.height]="\'150px\'">\n        <div class="d-flex flex-fill w-100 h-100" style="position: relative">\n            <nui-chart\n                class="flex-fill w-100 h-100"\n                [chart]="chartAssist.chart"\n            ></nui-chart>\n            <nui-chart-donut-content [plugin]="contentPlugin">\n                <div class="nui-text-page">57</div>\n                <div class="nui-text-secondary">donuts</div>\n            </nui-chart-donut-content>\n        </div>\n    </div>\n</div>\n'},95084:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartDonutContentPlugin,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-test",\n    templateUrl: "./donut-chart-test.component.html",\n})\nexport class DonutChartTestComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n    public contentPlugin: ChartDonutContentPlugin;\n\n    public ngOnInit(): void {\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chartAssist.chart.addPlugin(this.contentPlugin);\n\n        const accessors = new RadialAccessors();\n        const scales = radialScales();\n        const renderer = new RadialRenderer();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [70] },\n        { id: "edge", name: "Edge", data: [20] },\n        { id: "ff", name: "FF", data: [10] },\n    ];\n}\n'},36413:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="row">\n    <div class="p-5 col-6">\n        <div class="nui-chart-layout">\n            <div class="chart has-overlay">\n                <nui-chart\n                    class="flex-fill"\n                    [chart]="chartAssist1.chart"\n                ></nui-chart>\n                <div class="overlay flex-column">\n                    <div class="nui-text-page">\n                        {{ series.map(value).join(" / ") }}\n                    </div>\n                    <div class="nui-text-secondary">\n                        {{ series.map(name).join(" / ") }}\n                    </div>\n                </div>\n            </div>\n            <div class="axis-label-bottom nui-text-small" i18n>\n                <strong>\'overlay\' class</strong>\n            </div>\n        </div>\n    </div>\n    <div class="p-5 col-6">\n        <div class="nui-chart-layout">\n            <div class="chart has-overlay">\n                <nui-chart\n                    class="flex-fill"\n                    [chart]="chartAssist2.chart"\n                ></nui-chart>\n                <nui-chart-donut-content [plugin]="contentPlugin">\n                    <div class="nui-text-page">80%</div>\n                    <div class="nui-text-secondary" i18n>\n                        of this donut is blue\n                    </div>\n                </nui-chart-donut-content>\n            </div>\n            <div class="axis-label-bottom nui-text-small" i18n>\n                <strong>\'nui-chart-donut-content\' with plugin</strong>\n            </div>\n        </div>\n    </div>\n</div>\n'},58252:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartDonutContentPlugin,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\ninterface IExampleSeries {\n    id: string;\n    name: string;\n    data: number[];\n}\n\n@Component({\n    selector: "nui-donut-chart-with-content-example",\n    templateUrl: "./donut-chart-with-content.example.component.html",\n})\nexport class DonutChartWithContentExampleComponent implements OnInit {\n    public chartAssist1: ChartAssist;\n    public chartAssist2: ChartAssist;\n    public contentPlugin: ChartDonutContentPlugin;\n    public series: any[];\n\n    public ngOnInit(): void {\n        // Instantiate the charts and chart assists\n        this.chartAssist1 = new ChartAssist(new Chart(radialGrid()), radial);\n        this.chartAssist2 = new ChartAssist(new Chart(radialGrid()), radial);\n\n        // Create the donut content plugin\n        this.contentPlugin = new ChartDonutContentPlugin();\n\n        // Register the content plugin with the chart. In addition to registering the plugin with the chart,\n        // pass it to the plugin input of the nui-chart-donut-content component in the template.\n        this.chartAssist2.chart.addPlugin(this.contentPlugin);\n\n        // Create radial accessors, scales, and a renderer to be included in the IChartAssistSeries collection\n        const accessors = new RadialAccessors();\n        const scales1 = radialScales();\n        const scales2 = radialScales();\n        const renderer = new RadialRenderer();\n\n        this.series = getData();\n        // Invoke the chart assist\'s update method with the IChartAssistSeries collection as the argument\n        this.chartAssist1.update(\n            this.series.map((s) => ({\n                ...s,\n                accessors,\n                scales: scales1,\n                renderer,\n            }))\n        );\n\n        this.chartAssist2.update(\n            this.series.map((s) => ({\n                ...s,\n                accessors,\n                scales: scales2,\n                renderer,\n            }))\n        );\n    }\n\n    public value = (s: IExampleSeries): number => s.data[0];\n    public name = (s: IExampleSeries): string => s.name;\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [80] },\n        { id: "edge", name: "Edge", data: [20] },\n    ];\n}\n'},53097:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n'},34587:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-example",\n    templateUrl: "./donut-chart.example.component.html",\n})\nexport class DonutChartExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // Create a Chart instance using the result of the radialGrid configuration function as the constructor argument\n        const chart = new Chart(radialGrid());\n\n        // Create a ChartAssist instance passing the chart and the radial series processor as constructor arguments\n        this.chartAssist = new ChartAssist(chart, radial);\n\n        // Generate radial accessors, scales, and renderer to be included in the IChartAssistSeries collection\n        const accessors = new RadialAccessors();\n        const scales = radialScales();\n        const renderer = new RadialRenderer();\n\n        // Invoke the chart assist\'s update method with the IChartAssistSeries collection as the argument\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [80] },\n        { id: "edge", name: "Edge", data: [20] },\n    ];\n}\n'},94809:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-pie-chart-basic-test">\n    <nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},10359:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    PieRenderer,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-pie-chart-test",\n    templateUrl: "./pie-chart-test.component.html",\n})\nexport class PieChartTestComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n\n    public ngOnInit(): void {\n        const accessors = new RadialAccessors();\n        const scales = radialScales();\n        const renderer = new PieRenderer();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [60] },\n        { id: "edge", name: "Edge", data: [30] },\n        { id: "ff", name: "FF", data: [15] },\n        { id: "safari", name: "Safari", data: [5] },\n    ];\n}\n'},88164:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n'},10136:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    PieRenderer,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-pie-chart-example",\n    templateUrl: "./pie-chart.example.component.html",\n})\nexport class PieChartExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public ngOnInit(): void {\n        // Create a Chart instance using the result of the radialGrid configuration function as the constructor argument\n        const chart = new Chart(radialGrid());\n\n        // Create a ChartAssist instance passing the chart and the radial series processor as constructor arguments\n        this.chartAssist = new ChartAssist(chart, radial);\n\n        // Instantiate radial accessors and scales to be included in the IChartAssistSeries collection\n        const accessors = new RadialAccessors();\n        const scales = radialScales();\n\n        // Instantiate a PieRenderer to be included in the IChartAssistSeries collection\n        const renderer = new PieRenderer();\n\n        // Invoke the chart assist\'s update method with the IChartAssistSeries collection as the argument\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [80] },\n        { id: "edge", name: "Edge", data: [20] },\n    ];\n}\n'},51318:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Spark Chart</h1>\n<p>\n    A spark chart is really just a line chart that\'s been resized and styled to\n    give it a sparkline look and feel. Theoretically you can turn any chart into\n    a spark chart. But, practically, there are only a few use cases for a spark\n    chart that are needed so far, and these use cases are represented by the\n    examples on this page.\n</p>\n\n<h2>Simple Sparkline</h2>\n<p>\n    The simplest sparkline chart, i.e. a line visualization with no grid, axis\n    lines, or other details, can be done as in the example below. Features not\n    described here \u2014 such as tooltips \u2014 are configured in the same way as for a\n    generic X/Y chart, so feel free to check the\n    <a href="../additional-documentation/chart-types/line.html" target="_parent"\n        >Line Chart</a\n    >\n    page for guidance.\n</p>\n<p>\n    The magic of a Nova spark chart originates from the\n    <code\n        ><a\n            href="../miscellaneous/functions.html#sparkChartGridConfig"\n            target="_blank"\n            >sparkChartGridConfig</a\n        ></code\n    >\n    function which creates a pre-baked spark chart\n    <code\n        ><a href="../classes/XYGridConfig.html" target="_blank"\n            >XYGridConfig</a\n        ></code\n    >\n    for setting up the\n    <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code\n    >.\n</p>\n<p>\n    See the inline comments of the example source below for more details on how\n    to achieve it.\n</p>\n<nui-example-wrapper\n    filenamePrefix="spark-chart-basic"\n    exampleTitle="Simple Sparkline"\n>\n    <nui-spark-chart-basic-example></nui-spark-chart-basic-example>\n</nui-example-wrapper>\n\n<h2>Multiple Series</h2>\n<p>\n    Following the same approach as in the case of a\n    <a href="../additional-documentation/chart-types/line.html" target="_parent"\n        >Line Chart</a\n    >, using a chart assist is the easiest way to set up and manage a\n    <a\n        href="../additional-documentation/advanced-usage/chart.html"\n        target="_parent"\n        >chart</a\n    >\n    visualization. There is one difference with spark charts though. Whereas\n    regular line charts sometimes visualize multiple data series at once, spark\n    charts are designed to visualize a single primary data series per chart.\n</p>\n<p>\n    What this means is that to visualize multiple primary series in a spark\n    chart format, we need multiple spark chart instances to be stacked\n    discretely on top of each other. So, the\n    <code\n        ><a href="../classes/SparkChartAssist.html" target="_blank"\n            >SparkChartAssist</a\n        ></code\n    >\n    reflects this pattern in that multiple primary input series result in\n    multiple stacked spark chart instances.\n</p>\n<p>\n    SparkChartAssist conceptualizes each spark chart as an\n    <code><a href="../interfaces/ISpark.html" target="_blank">ISpark</a></code>\n    which consists of an id, a chart instance, and an associated\n    <code\n        ><a href="../interfaces/IChartAssistSeries.html" target="_blank"\n            >IChartAssistSeries</a\n        ></code\n    >\n    collection. Typically, the series collection is a collection of one primary\n    data series and zero or more dependent series such as a background threshold\n    series. See the\n    <a href="../additional-documentation/thresholds.html" target="_parent"\n        >thresholds page</a\n    >\n    for information on how to add a threshold series to a spark chart.\n</p>\n<h3>Event Synchronization</h3>\n<p>\n    Notice the\n    <code\n        ><a href="../directives/ChartCollectionIdDirective.html" target="_blank"\n            >nuiChartCollectionId</a\n        ></code\n    >\n    attribute directive used in the template of the following example. This is\n    what allows for synchronization of the events among charts. This can be seen\n    in the following example in which hovering over one sparkline results in the\n    duplication of the interaction line for each of the other sparklines.\n</p>\n<p>To get the interaction line synchronization working do the following:</p>\n<ol>\n    <li>\n        Ensure that each sparkline <code>nui-chart</code> shares the same\n        <code>nuiChartCollectionId</code> value:\n        <pre>{{ collectionIdHtml }}</pre>\n    </li>\n    <li>\n        Ensure that the x-axis scale id of each spark series is the same by\n        either using the same scale instance across all series or by passing the\n        same scale id to the scale constructor parameter each time a new scale\n        is instantiated.\n        <pre>{{ scaleInstantiationWithId }}</pre>\n    </li>\n</ol>\n<h3>trackBy</h3>\n<p>\n    Also, notice in the template of the example below that the\n    <code>trackBy</code> on the <code>ngFor</code> is set to the\n    SparkChartAssist\'s\n    <a href="../classes/SparkChartAssist.html#trackByFn" target="_blank"\n        ><code>trackByFn</code></a\n    >\n    function. This enables SparkChartAssist and Angular to reuse an existing\n    nui-chart if the chart\'s associated\n    <code><a href="../interfaces/ISpark.html" target="_blank">ISpark</a></code>\n    id is the same as an id that\'s already in use.\n</p>\n<h3>update vs. updateSparks</h3>\n<p>\n    The SparkChartAssist\'s\n    <code\n        ><a href="../classes/SparkChartAssist.html#update" target="_blank"\n            >update</a\n        ></code\n    >\n    method can be used to initiate a spark visualization if each of your\n    sparklines has a primary data series and <strong>no</strong> dependent\n    secondary series. The method takes a set of IChartAssistSeries as its\n    argument, and the resulting ISpark\'s generated by the SparkChartAssist will\n    automatically have id\'s equal to the corresponding series id\'s. The\n    following example demonstrates how to use the update method.\n</p>\n<p>\n    The SparkChartAssist\'s\n    <code\n        ><a href="../classes/SparkChartAssist.html#updateSparks" target="_blank"\n            >updateSparks</a\n        ></code\n    >\n    method can be used in the above case as well. But, if each of your\n    sparkline\'s primary data series has one or more dependent series,\n    updateSparks <strong>must</strong> be used. Note that the method takes a set\n    of ISparks instead of IChartAssistSeries as its argument. Also, note that\n    you do not need to provide the chart instance as part of the ISpark. The\n    SparkChartAssist generates the chart for each ISpark automatically and\n    appends it to the ISpark object. See the\n    <a href="../additional-documentation/thresholds.html" target="_parent"\n        >thresholds page</a\n    >\n    for an example of updateSparks usage.\n</p>\n<nui-message type="info" [allowDismiss]="false">\n    In the case of updateSparks, each ISpark passed to the method must be\n    assigned an explicit id to take advantage of the trackBy functionality\n    mentioned above.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="spark-chart-multiple"\n    exampleTitle="Multiple Series"\n>\n    <nui-spark-chart-multiple-example></nui-spark-chart-multiple-example>\n</nui-example-wrapper>\n\n<p>\n    The next example is very similar to the above with two major changes. Here\n    we use the\n    <code\n        ><a href="../classes/AreaRenderer.html" target="_blank"\n            >AreaRenderer</a\n        ></code\n    >\n    and the\n    <code\n        ><a\n            href="../miscellaneous/functions.html#stackedAreaAccessors"\n            target="_blank"\n            >stackedAreaAccessors</a\n        ></code\n    >\n    function to generate and assign the <code>x</code>, <code>y</code>,\n    <code>y0</code> and <code>y1</code> accessors. Check out the\n    <a href="../additional-documentation/chart-types/area.html" target="_parent"\n        >Area Chart\n    </a>\n    page for additional guidance.\n</p>\n<nui-example-wrapper\n    filenamePrefix="spark-chart-area-multiple"\n    exampleTitle="Area with Multiple Series"\n>\n    <nui-spark-chart-area-multiple-example></nui-spark-chart-area-multiple-example>\n</nui-example-wrapper>\n\n<h2>Adding a Legend</h2>\n<p>\n    Using a chart assist is the easiest way to manage the communication of a\n    <a\n        href="../additional-documentation/advanced-usage/chart.html"\n        target="_parent"\n        >chart</a\n    >\n    and a\n    <a\n        href="../additional-documentation/advanced-usage/legend.html"\n        target="_parent"\n        >legend</a\n    >. See the example html below for how to set it up.\n</p>\n<nui-example-wrapper\n    filenamePrefix="spark-chart-legend"\n    exampleTitle="Adding a legend"\n>\n    <nui-spark-chart-legend-example></nui-spark-chart-legend-example>\n</nui-example-wrapper>\n\n<h2>Table</h2>\n<p>\n    The next example demonstrates how to implement multiple sparklines within a\n    table. Instantiation of\n    <code\n        ><a href="../classes/SparkChartAssist.html" target="_blank"\n            >SparkChartAssist</a\n        ></code\n    >\n    including plugins and all related functionality has to be done for every row\n    in the table.\n</p>\n<nui-example-wrapper filenamePrefix="spark-chart-table" exampleTitle="Table">\n    <nui-spark-chart-table-example></nui-spark-chart-table-example>\n</nui-example-wrapper>\n'},65353:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-spark",\n    templateUrl: "./chart-docs-spark.component.html",\n})\nexport class ChartDocsSparkComponent {\n    public gridConfiguration = `public chart = new Chart(new XYGrid(new SparkChartGridConfig(false, false)));\n...`;\n    public scaleInstantiationWithId = `const scale = new TimeScale("example-scale-id");\n...`;\n    public collectionIdHtml = `<div *ngFor="let s of chartAssist.sparks">\n    <nui-chart class="d-flex" [chart]="s.chart" nuiChartCollectionId="example-collection-id"></nui-chart>\n</div>`;\n}\n'},53393:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiMessageModule,\n    NuiTableModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartDocsSparkComponent } from "./chart-docs-spark.component";\nimport { SparkChartAreaMultipleExampleComponent } from "./spark-chart-area-multiple/spark-chart-area-multiple.example.component";\nimport { SparkChartBasicExampleComponent } from "./spark-chart-basic/spark-chart-basic.example.component";\nimport { SparkChartLegendExampleComponent } from "./spark-chart-legend/spark-chart-legend.example.component";\nimport { SparkChartMultipleExampleComponent } from "./spark-chart-multiple/spark-chart-multiple.example.component";\nimport { AreaSparkMinimalTestComponent } from "./spark-chart-stroke-test/area-spark-minimal-test.component";\nimport { SparkChartTableExampleComponent } from "./spark-chart-table/spark-chart-table.example.component";\nimport { SparkChartTestComponent } from "./spark-chart-test/spark-chart-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsSparkComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: SparkChartBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "legend",\n        component: SparkChartLegendExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "multiple",\n        component: SparkChartMultipleExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "table",\n        component: SparkChartTableExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "area",\n        component: SparkChartAreaMultipleExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: SparkChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsSparkComponent,\n        SparkChartBasicExampleComponent,\n        SparkChartLegendExampleComponent,\n        SparkChartMultipleExampleComponent,\n        SparkChartTableExampleComponent,\n        SparkChartAreaMultipleExampleComponent,\n        SparkChartTestComponent,\n        AreaSparkMinimalTestComponent,\n    ],\n    imports: [\n        FormsModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiTableModule,\n        DemoCommonModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("spark"),\n        },\n    ],\n})\nexport default class ChartDocsSparkModule {}\n'},69101:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div *ngFor="let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn">\n    <nui-chart\n        class="d-flex"\n        [chart]="spark.chart"\n        nuiChartCollectionId="example-collection-id"\n    ></nui-chart>\n</div>\n'},78174:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaRenderer,\n    IAreaAccessors,\n    IChartAssistSeries,\n    LinearScale,\n    SparkChartAssist,\n    TimeScale,\n    stackedAreaAccessors,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-area-multiple-example",\n    templateUrl: "./spark-chart-area-multiple.example.component.html",\n})\nexport class SparkChartAreaMultipleExampleComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n\n    public ngOnInit(): void {\n        // spark chart setup\n        this.chartAssist = new SparkChartAssist();\n\n        // Stacked Area accessors let the renderer know how to access x and y domain data respectively from a chart\'s input data set(s).\n        // providing chartAssist colors and markers to stackedAreaAccessors will share them with the area chart\n        const accessors = stackedAreaAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        // setting the AreaRenderer congif\'s strokeWidth to zero so no stroke is added around the filled area\n        const renderer = new AreaRenderer({ strokeWidth: 0 });\n\n        const seriesSet: IChartAssistSeries<IAreaAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales: {\n                    // using the same scale id for the x-axes is necessary to achieve synchronized hover interaction between charts\n                    // - sharing the same instance of the scale would work as well\n                    x: new TimeScale("shared_id"),\n                    y: new LinearScale(),\n                },\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "spark-series-1",\n            name: "Tex-lab-aus-2621",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 85 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 30 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n            ],\n        },\n        {\n            id: "spark-series-2",\n            name: "Cz-lab-brn-02",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 93 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 71 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 85 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 54 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 79 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 64 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 49 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 70 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 59 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 76 },\n            ],\n        },\n        {\n            id: "spark-series-3",\n            name: "Ua-lab-kie-03",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 60 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 75 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 42 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 84 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 41 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 50 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 56 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 44 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 75 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 48 },\n            ],\n        },\n        {\n            id: "spark-series-4",\n            name: "Tex-lab-kie-3203",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 30 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 25 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 84 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 44 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 56 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 70 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 15 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 27 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 85 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 30 },\n            ],\n        },\n    ];\n}\n'},3546:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="w-25 d-flex" [chart]="chart"></nui-chart>\n'},19892:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    IChart,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    sparkChartGridConfig,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-basic-example",\n    templateUrl: "./spark-chart-basic.example.component.html",\n})\nexport class SparkChartBasicExampleComponent implements OnInit {\n    public chart: IChart;\n\n    public ngOnInit(): void {\n        // This grid configuration is what turns a regular chart into a spark chart\n        const gridConfig = sparkChartGridConfig(\n            new XYGridConfig(),\n            false,\n            false\n        );\n        gridConfig.interactive = false;\n\n        // Create an x-y grid by passing the spark chart grid config as an argument to the constructor\n        const grid = new XYGrid(gridConfig);\n\n        // Instantiate the chart using the configured sprk chart grid as an argument to the chart\'s constructor\n        this.chart = new Chart(grid);\n\n        // Generate line accessors, x-y scales, and a line renderer to be included in the IChartSeries collection\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Assemble the series set\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Invoke the chart\'s update method with the IChartSeries collection as the argument\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "1",\n            name: "Series 1",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 62 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 69 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n                { x: moment("2018-11-21T15:06:12.413Z", format), y: 68 },\n                { x: moment("2018-12-05T06:49:39.310Z", format), y: 82 },\n                { x: moment("2018-12-18T22:33:06.206Z", format), y: 81 },\n                { x: moment("2019-01-01T14:16:33.103Z", format), y: 78 },\n                { x: moment("2019-01-15T06:00:00.000Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},42429:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="w-100" [chart]="chartAssist.sparks[0].chart"></nui-chart>\n    <div class="d-flex flex-column pl-2">\n        <nui-legend-series\n            [interactive]="false"\n            [active]="chartAssist.isLegendActive"\n            descriptionPrimary="CPU"\n            i18n-descriptionPrimary\n            descriptionSecondary="Tex-lab-aus-2621"\n            i18n-descriptionSecondary\n        >\n            <nui-rich-legend-tile\n                unitLabel="sec"\n                i18n-unitLabel\n                [value]="\n                    chartAssist.getHighlightedValue(\n                        chartAssist.sparks[0].chartSeriesSet[0],\n                        \'y\',\n                        \'value\'\n                    )\n                "\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(\n                        chartAssist.sparks[0].chartSeriesSet[0].id\n                    )\n                "\n                [color]="\n                    chartAssist.palette.textColors.get(\n                        chartAssist.sparks[0].chartSeriesSet[0].id\n                    )\n                "\n            >\n                <nui-chart-marker\n                    [marker]="\n                        chartAssist.markers.get(\n                            chartAssist.sparks[0].chartSeriesSet[0].id\n                        )\n                    "\n                    [color]="\n                        chartAssist.palette.standardColors.get(\n                            chartAssist.sparks[0].chartSeriesSet[0].id\n                        )\n                    "\n                    rightEdge\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </div>\n</div>\n'},4138:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SparkChartAssist,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-legend-example",\n    templateUrl: "./spark-chart-legend.example.component.html",\n})\nexport class SparkChartLegendExampleComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n\n    public ngOnInit(): void {\n        // spark chart setup\n        this.chartAssist = new SparkChartAssist();\n\n        const accessors = new LineAccessors();\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "1",\n            name: "Series 1",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 85 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 30 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n            ],\n        },\n    ];\n}\n'},68139:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div *ngFor="let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn">\n    <nui-chart\n        class="d-flex"\n        [chart]="spark.chart"\n        nuiChartCollectionId="example-collection-id"\n    ></nui-chart>\n</div>\n'},25272:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    IChartAssistSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SparkChartAssist,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-multiple-example",\n    templateUrl: "./spark-chart-multiple.example.component.html",\n})\nexport class SparkChartMultipleExampleComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n\n    public ngOnInit(): void {\n        // spark chart setup\n        this.chartAssist = new SparkChartAssist();\n\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n\n        const seriesSet: IChartAssistSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales: {\n                    // using the same scale id for the x-axes is necessary to achieve synchronized hover interaction between charts\n                    // - sharing the same instance of the scale would work as well\n                    x: new TimeScale("shared-id"),\n                    y: new LinearScale(),\n                },\n            })\n        );\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "spark-series-1",\n            name: "Tex-lab-aus-2621",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 85 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 30 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n            ],\n        },\n        {\n            id: "spark-series-2",\n            name: "Cz-lab-brn-02",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 93 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 71 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 85 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 54 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 79 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 64 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 49 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 70 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 59 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 76 },\n            ],\n        },\n        {\n            id: "spark-series-3",\n            name: "Ua-lab-kie-03",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 60 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 75 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 42 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 84 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 41 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 50 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 56 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 44 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 75 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 48 },\n            ],\n        },\n    ];\n}\n'},5255:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="chart-container">\n    <nui-chart class="d-flex h-100" [chart]="chart"></nui-chart>\n</div>\n'},61586:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".chart-container {\n    border-left: 1px solid var(--nui-color-line-strong, #999);\n    border-right: 1px solid var(--nui-color-line-strong, #999);\n    height: 42px;\n    width: 150px;\n}\n"},82056:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    AreaRenderer,\n    Chart,\n    IChart,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LinearScale,\n    stackedAreaAccessors,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-area-spark-minimal-test",\n    templateUrl: "./area-spark-minimal-test.component.html",\n    styleUrls: ["./area-spark-minimal-test.component.less"],\n})\nexport class AreaSparkMinimalTestComponent implements OnInit {\n    public chart: IChart;\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.axis.left.visible = false;\n        gridConfig.axis.bottom.visible = false;\n        gridConfig.axis.top.visible = false;\n        gridConfig.axis.right.visible = false;\n        gridConfig.borders.bottom.visible = false;\n        gridConfig.dimension.padding.bottom = 0;\n        gridConfig.interactive = false;\n        gridConfig.dimension.margin.right = 0;\n        gridConfig.dimension.margin.bottom = 0;\n        gridConfig.dimension.margin.top = 0;\n        gridConfig.dimension.margin.left = 0;\n        gridConfig.axis.left.gridTicks = false;\n\n        // Create an x-y grid by passing the spark chart grid config as an argument to the constructor\n        const grid = new XYGrid(gridConfig);\n\n        // Instantiate the chart using the configured spark chart grid as an argument to the chart\'s constructor\n        this.chart = new Chart(grid);\n\n        // Generate line accessors, x-y scales, and a line renderer to be included in the IChartSeries collection\n        const accessors = stackedAreaAccessors();\n        const renderer = new AreaRenderer({ strokeWidth: 0 });\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Assemble the series set\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // Invoke the chart\'s update method with the IChartSeries collection as the argument\n        this.chart.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "1",\n            name: "Series 1",\n            data: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 62 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 69 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n                { x: moment("2018-11-21T15:06:12.413Z", format), y: 68 },\n                { x: moment("2018-12-05T06:49:39.310Z", format), y: 82 },\n                { x: moment("2018-12-18T22:33:06.206Z", format), y: 81 },\n                { x: moment("2019-01-01T14:16:33.103Z", format), y: 78 },\n                { x: moment("2019-01-15T06:00:00.000Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},44420:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<table nui-table [dataSource]="dataSource">\n    <ng-container nuiColumnDef="name">\n        <th nui-header-cell *nuiHeaderCellDef i18n>Node</th>\n        <td nui-cell *nuiCellDef="let element">{{ element.node }}</td>\n    </ng-container>\n\n    <ng-container nuiColumnDef="chart">\n        <th nui-header-cell *nuiHeaderCellDef i18n>CPU</th>\n        <td nui-cell *nuiCellDef="let element">\n            <div class="d-flex">\n                <nui-chart\n                    class="d-flex w-100"\n                    [chart]="element.chartAssist.sparks[0].chart"\n                ></nui-chart>\n                <div class="d-flex flex-column pl-2">\n                    <nui-legend-series\n                        [interactive]="false"\n                        [active]="element.chartAssist.isLegendActive"\n                    >\n                        <nui-rich-legend-tile\n                            unitLabel="sec"\n                            i18n-unitLabel\n                            [value]="\n                                element.chartAssist.getHighlightedValue(\n                                    element.chartAssist.sparks[0]\n                                        .chartSeriesSet[0],\n                                    \'y\',\n                                    \'value\'\n                                )\n                            "\n                            [backgroundColor]="\n                                element.chartAssist.palette.standardColors.get(\n                                    element.chartAssist.sparks[0]\n                                        .chartSeriesSet[0].id\n                                )\n                            "\n                            [color]="\n                                element.chartAssist.palette.textColors.get(\n                                    element.chartAssist.sparks[0]\n                                        .chartSeriesSet[0].id\n                                )\n                            "\n                        >\n                            <nui-chart-marker\n                                [marker]="\n                                    element.chartAssist.markers.get(\n                                        element.chartAssist.sparks[0]\n                                            .chartSeriesSet[0].id\n                                    )\n                                "\n                                [color]="\n                                    element.chartAssist.palette.standardColors.get(\n                                        element.chartAssist.sparks[0]\n                                            .chartSeriesSet[0].id\n                                    )\n                                "\n                                rightEdge\n                            >\n                            </nui-chart-marker>\n                        </nui-rich-legend-tile>\n                    </nui-legend-series>\n                </div>\n            </div>\n\n            \x3c!-- this plugin component has to be placed in the table cell template as every chart\n                 will have separate positioning data provided through it\'s plugin --\x3e\n            <nui-chart-popover\n                [plugin]="element.popoverPlugin"\n                [template]="popoverTemplate"\n            ></nui-chart-popover>\n        </td>\n    </ng-container>\n\n    <tr nui-header-row *nuiHeaderRowDef="displayedColumns"></tr>\n    <tr nui-row *nuiRowDef="let row; columns: displayedColumns"></tr>\n</table>\n\n\x3c!-- It is sufficient to provide a single template definition if the table is using the same popover template for all rows --\x3e\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.key }}: </strong>\n            <code>{{ item.value.data | json }}</code>\n        </div>\n    </div>\n</ng-template>\n'},27850:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    ChartPopoverPlugin,\n    IChartAssistSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SparkChartAssist,\n    TimeScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-table-example",\n    templateUrl: "./spark-chart-table.example.component.html",\n})\nexport class SparkChartTableExampleComponent implements OnInit {\n    public displayedColumns = ["name", "chart"];\n    public dataSource: any[] = [];\n\n    public ngOnInit(): void {\n        this.generateTableData();\n    }\n\n    private generateTableData() {\n        const renderer = new LineRenderer();\n\n        this.dataSource = getData().map((d, i: number) => {\n            // Chart assist setup\n            const chartAssist = new SparkChartAssist(false, false);\n\n            // using a new accessors instance for each spark allows for the sequential\n            // color provider within to provide the same color for each sparkline\n            const accessors = new LineAccessors();\n            const yScale = new LinearScale();\n            yScale.formatters.value = (v) => Number(v).toPrecision(4);\n            const scales: IXYScales = {\n                // using the same scale id for the x-axes is necessary to achieve synchronized hover interaction between charts\n                // - sharing the same instance of the scale would work as well\n                x: new TimeScale("shared-id"),\n                y: yScale,\n            };\n\n            // series setup\n            const dataSeries: IChartAssistSeries<ILineAccessors> = {\n                id: `spark-series-${i + 1}`,\n                name: d.node,\n                data: d.cpu,\n                accessors,\n                renderer,\n                scales,\n            };\n\n            // chart assist needs to be used to update data\n            chartAssist.update([dataSeries]);\n\n            // popover plugin must be added after the initial update as the spark chart assist creates the sparks on update\n            const popoverPlugin = new ChartPopoverPlugin();\n            chartAssist.sparks[0].chart?.addPlugin(popoverPlugin);\n\n            // assembly of table row data\n            const row = { ...d, chartAssist, popoverPlugin };\n            return row;\n        });\n    }\n}\n\n/* Chart data */\nfunction getData(): any[] {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    return [\n        {\n            node: "Tex-lab-aus-2621",\n            cpu: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 85 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 57 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 99 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 75 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 55 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 73 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 30 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 77 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 57 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 61 },\n            ],\n        },\n        {\n            node: "Cz-lab-brn-02",\n            cpu: [\n                { x: moment("2018-07-08T01:51:43.448Z", format), y: 93 },\n                { x: moment("2018-07-21T17:35:10.344Z", format), y: 71 },\n                { x: moment("2018-08-04T09:18:37.241Z", format), y: 85 },\n                { x: moment("2018-08-18T01:02:04.137Z", format), y: 54 },\n                { x: moment("2018-08-31T16:45:31.034Z", format), y: 79 },\n                { x: moment("2018-09-14T08:28:57.931Z", format), y: 64 },\n                { x: moment("2018-09-28T00:12:24.827Z", format), y: 49 },\n                { x: moment("2018-10-11T15:55:51.724Z", format), y: 70 },\n                { x: moment("2018-10-25T07:39:18.620Z", format), y: 59 },\n                { x: moment("2018-11-07T23:22:45.517Z", format), y: 76 },\n            ],\n        },\n    ];\n}\n'},90521:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <charts-test-harness>\n        <div class="m-5">\n            <h4>Sparkline Chart Multiple Test</h4>\n            <div class="nui-spark-chart-multiple-test">\n                <div\n                    *ngFor="\n                        let spark of chartAssist.sparks;\n                        trackBy: chartAssist.trackByFn\n                    "\n                >\n                    <div class="d-flex">\n                        <nui-chart\n                            [chart]="spark.chart"\n                            nuiChartCollectionId="1"\n                        ></nui-chart>\n                        <div class="d-flex flex-column pl-2">\n                            <nui-legend-series\n                                [interactive]="false"\n                                [active]="chartAssist.isLegendActive"\n                                [descriptionPrimary]="\n                                    spark.chartSeriesSet[0].name\n                                "\n                            >\n                                <nui-rich-legend-tile\n                                    unitLabel="sec"\n                                    [value]="\n                                        chartAssist.getHighlightedValue(\n                                            spark.chartSeriesSet[0],\n                                            \'y\',\n                                            \'value\'\n                                        )\n                                    "\n                                    [backgroundColor]="\n                                        chartAssist.palette.standardColors.get(\n                                            spark.chartSeriesSet[0].id\n                                        )\n                                    "\n                                    [color]="\n                                        chartAssist.palette.textColors.get(\n                                            spark.chartSeriesSet[0].id\n                                        )\n                                    "\n                                >\n                                    <nui-chart-marker\n                                        [marker]="\n                                            chartAssist.markers.get(\n                                                spark.chartSeriesSet[0].id\n                                            )\n                                        "\n                                        [color]="\n                                            chartAssist.palette.standardColors.get(\n                                                spark.chartSeriesSet[0].id\n                                            )\n                                        "\n                                        rightEdge\n                                    >\n                                    </nui-chart-marker>\n                                </nui-rich-legend-tile>\n                            </nui-legend-series>\n                        </div>\n                    </div>\n                </div>\n                <input\n                    id="data-input"\n                    type="text"\n                    class="w-100 mt-5"\n                    [ngModel]="input"\n                    (ngModelChange)="inputChanged($event)"\n                />\n            </div>\n        </div>\n        <div class="m-5">\n            <h4>Sparkline Chart Multiple series</h4>\n            <nui-spark-chart-multiple-example></nui-spark-chart-multiple-example>\n        </div>\n        <div class="m-5">\n            <h4>Sparkline Chart Area Minimal</h4>\n            <nui-area-spark-minimal-test></nui-area-spark-minimal-test>\n        </div>\n        <div class="m-5">\n            <h4>Sparkline Chart Area Multiple series</h4>\n            <nui-spark-chart-area-multiple-example></nui-spark-chart-area-multiple-example>\n        </div>\n    </charts-test-harness>\n</div>\n'},35868:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { Moment } from "moment/moment";\n\nimport {\n    Chart,\n    ChartPalette,\n    IChartAssistSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SparkChartAssist,\n    TimeScale,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-spark-chart-test",\n    templateUrl: "./spark-chart-test.component.html",\n})\nexport class SparkChartTestComponent implements OnInit {\n    private colors = [\n        "red",\n        "orange",\n        "yellow",\n        "green",\n        "blue",\n        "purple",\n        "black",\n        "white",\n    ];\n    private initialInput = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ];\n    private baseDate = moment([2016, 11, 25]);\n\n    private xScale = new TimeScale();\n    private renderer = new LineRenderer();\n    private palette = new ChartPalette(this.colors);\n    private accessors = new LineAccessors(this.palette.standardColors);\n    public chartAssist: SparkChartAssist = new SparkChartAssist(\n        true,\n        true,\n        this.palette\n    );\n\n    public input: string;\n    public chart: Chart;\n\n    public ngOnInit(): void {\n        this.input = JSON.stringify(this.initialInput);\n        this.configureGrid(this.chartAssist.gridConfig);\n        this.configureGrid(this.chartAssist.lastGridConfig);\n        this.update(this.initialInput);\n    }\n\n    public inputChanged(value: string): void {\n        this.update(JSON.parse(value));\n    }\n\n    private update(input: number[][]) {\n        const seriesSet = this.generateSparkSeriesSet(input);\n        this.chartAssist.update(seriesSet);\n    }\n\n    private configureGrid(gridConfig: XYGridConfig) {\n        gridConfig.dimension.autoWidth = false;\n        gridConfig.dimension.width(400);\n    }\n\n    private generateSparkSeriesSet(\n        input: number[][]\n    ): IChartAssistSeries<ILineAccessors>[] {\n        return input.map((seriesData: number[], i: number) => {\n            const sparkYScale = new LinearScale();\n            sparkYScale.fixDomain([0, 26]); // spark chart height is 26px (36px - 5px top - 5px bottom padding)\n            sparkYScale.formatters.value = (v) => Number(v).toPrecision(4);\n            const sparkScales: IXYScales = {\n                x: this.xScale,\n                y: sparkYScale,\n            };\n            return {\n                id: `${i + 1}`,\n                name: `dev-aus-vm-0${i + 1}`,\n                accessors: this.accessors,\n                data: this.getData(seriesData),\n                scales: sparkScales,\n                renderer: this.renderer,\n            } as IChartAssistSeries<ILineAccessors>;\n        });\n    }\n\n    private getData(seriesData: number[]): { x: Moment; y: number }[] {\n        return seriesData.map((value: number, i: number) => ({\n            x: this.baseDate.clone().add(i, "days"),\n            y: value,\n        }));\n    }\n}\n'},20285:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Status Charts</h1>\n\n<p>A Status Chart represents the state of a system over time.</p>\n\n<h2>Basic Usage</h2>\n<p>\n    For the process of creating a status chart, take a look at the inline\n    comments explaining it in the example source below.\n</p>\n<p>\n    Please note that\n    <code\n        ><a href="../classes/InteractionLinePlugin.html" target="_blank"\n            >InteractionLinePlugin</a\n        ></code\n    >\n    and\n    <code\n        ><a href="../classes/InteractionLabelPlugin.html" target="_blank"\n            >InteractionLabelPlugin</a\n        ></code\n    >\n    plugins should be added manually.\n</p>\n<nui-example-wrapper filenamePrefix="status-chart" exampleTitle="Status Chart">\n    <nui-status-chart-example></nui-status-chart-example>\n</nui-example-wrapper>\n\n<h2>Legend Interaction</h2>\n<p>\n    If there is a space for legend, it is possible to communicate current status\n    not via tooltip, but via legend.\n</p>\n<p>\n    Please note how this is implemented using\n    <code>chartAssist.legendLabelData$</code> stream.\n</p>\n<nui-example-wrapper\n    filenamePrefix="status-legend-chart"\n    exampleTitle="Legend Interaction"\n>\n    <nui-status-legend-chart-example></nui-status-legend-chart-example>\n</nui-example-wrapper>\n'},76277:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-status",\n    templateUrl: "./chart-docs-status.component.html",\n})\nexport class ChartDocsStatusComponent {}\n'},15425:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartDocsStatusComponent } from "./chart-docs-status.component";\nimport { StatusChartExampleComponent } from "./status-chart/status-chart.example.component";\nimport { StatusLegendChartExampleComponent } from "./status-legend-chart/status-legend-chart.example.component";\nimport { StatusChartTestComponent } from "./status-test/status-chart-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsStatusComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: StatusChartExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "legend",\n        component: StatusLegendChartExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: StatusChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsStatusComponent,\n        StatusChartExampleComponent,\n        StatusLegendChartExampleComponent,\n        StatusChartTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("status"),\n        },\n    ],\n})\nexport default class ChartDocsStatusModule {}\n'},81513:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div height="150px" class="d-flex flex-column">\n    <nui-chart class="d-flex" [chart]="chart" class="p-2"></nui-chart>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="tooltipsStatusMarkers.get(dataPoint.data.status)"\n        ></nui-chart-marker>\n        <span class="pl-2"\n            ><strong>{{ dataPoint.data.status | titlecase }}</strong></span\n        >\n        <span class="pl-2">{{ " for " + dataPoint.data.value + " days" }}</span>\n    </div>\n</ng-template>\n'},83175:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport { IconService } from "@nova-ui/bits";\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarRenderer,\n    BarStatusGridConfig,\n    BarTooltipsPlugin,\n    Chart,\n    CHART_PALETTE_CS_S_EXTENDED,\n    HIGHLIGHT_DATA_POINT_EVENT,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    IValueProvider,\n    IXYScales,\n    MappedValueProvider,\n    SELECT_DATA_POINT_EVENT,\n    statusAccessors,\n    StatusAccessors,\n    SvgMarker,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Unknown = "unknown",\n    Up = "up",\n    Warning = "warning",\n    Down = "down",\n    Critical = "critical",\n}\n\n@Component({\n    selector: "nui-status-chart-example",\n    templateUrl: "./status-chart.example.component.html",\n})\nexport class StatusChartExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid(new BarStatusGridConfig()));\n    public tooltipsPlugin: BarTooltipsPlugin;\n    public tooltipsStatusMarkers: IValueProvider<SvgMarker>;\n\n    constructor(private iconService: IconService) {}\n\n    public ngOnInit(): void {\n        // Configure the tooltips plugin (if needed)\n        this.tooltipsStatusMarkers = createTooltipMarkerProvider(\n            this.iconService\n        );\n        this.tooltipsPlugin = new BarTooltipsPlugin({ horizontal: true });\n        this.chart.addPlugin(this.tooltipsPlugin);\n\n        // In order to set an interaction Label Formatter that is independent from bottom tick formatter,\n        // it should be added separately with the formatter name in the constructor.\n        // See timeScale.formatters.labelFormatter instance below.\n        this.chart.addPlugin(new InteractionLabelPlugin("labelFormatter"));\n        this.chart.addPlugin(new InteractionLinePlugin());\n\n        // Create a MappedValueProvider to map the statuses to their corresponding colors and pass it to the\n        // statusAccessors function to generate a StatusAccessors instance\n        const statusColors = createColorProvider();\n        const accessors = statusAccessors(statusColors);\n\n        // Thickness accessor should be used to specify which status corresponds to a thin bar or thick\n        accessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // Configure the marker accessor to provide the symbols displayed at the center of each status bar\n        // depending on the value of the datapoint.\n        const iconSize: number = 10;\n        const icons = new MappedValueProvider(\n            getResizedIconsValueMap(this.iconService, iconSize)\n        );\n        accessors.data.marker = (data: any) => icons.get(data.status);\n\n        // Create the bar renderer. The \'x\' BarHighlightStrategy indicates that bars will be highlighted\n        // as the mouse moves along the x-axis. This makes sense for the status chart since it\'s\n        // horizontally oriented and all bars are aligned at the same y coordinate.\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        // Create the scales making sure that the scale for the y-axis is a band scale\n        const bandScale = new BandScale();\n        const timeScale = new TimeScale();\n        const scales: IXYScales = {\n            x: timeScale,\n            y: bandScale,\n        };\n\n        // This formats label in interaction label plugin\n        timeScale.formatters.labelFormatter = (d: any) =>\n            moment(d).format("LL");\n\n        // Fix the band scale domain to a single value, in this case STATUS_DOMAIN\n        bandScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        // Assemble the series set\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        // Update the chart\n        this.chart.update(seriesSet);\n\n        // Sample events that can be used in order to handle click or highlighting of certain status\n        this.chart\n            .getEventBus()\n            .getStream(HIGHLIGHT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n        this.chart\n            .getEventBus()\n            .getStream(SELECT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n    }\n}\n\nfunction createTooltipMarkerProvider(\n    iconService: IconService\n): IValueProvider<SvgMarker> {\n    const getStatusMarker = (status: string) =>\n        new SvgMarker(iconService.getStatusIcon(status));\n\n    return new MappedValueProvider({\n        [Status.Unknown]: getStatusMarker(Status.Unknown),\n        [Status.Up]: getStatusMarker(Status.Up),\n        [Status.Warning]: getStatusMarker(Status.Warning),\n        [Status.Down]: getStatusMarker(Status.Down),\n        [Status.Critical]: getStatusMarker(Status.Critical),\n    });\n}\n\nfunction createColorProvider(): IValueProvider<string> {\n    return new MappedValueProvider<string>({\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n    });\n}\n\nfunction getResizedIconsValueMap(iconService: IconService, iconSize: number) {\n    return {\n        [Status.Unknown]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Unknown),\n            iconSize\n        ),\n        [Status.Up]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Up),\n            iconSize\n        ),\n        [Status.Warning]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Warning),\n            iconSize\n        ),\n        [Status.Down]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Down),\n            iconSize\n        ),\n        [Status.Critical]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Critical),\n            iconSize\n        ),\n    };\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "1",\n            name: "Series 1",\n            data: [\n                {\n                    status: Status.Up,\n                    start: 0, // in days from today\n                    end: 22,\n                },\n                {\n                    status: Status.Warning,\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    status: Status.Unknown,\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    status: Status.Down,\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    status: Status.Critical,\n                    start: 109,\n                    end: 178,\n                },\n                {\n                    status: Status.Up,\n                    start: 178,\n                    end: 877,\n                },\n                {\n                    status: Status.Critical,\n                    start: 877,\n                    end: 980,\n                },\n                {\n                    status: Status.Warning,\n                    start: 980,\n                    end: 1000,\n                },\n            ].map((d) => ({\n                value: d.end - d.start,\n                status: d.status,\n                start: getDate(d.start),\n                end: getDate(d.end),\n            })),\n        },\n    ];\n}\n\nfunction getDate(hours: number) {\n    return moment().add({ hours }).toDate();\n}\n'},4365:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex flex-column">\n    <div class="d-flex flex-fill w-100 h-100">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n        <div class="d-flex flex-column pl-2">\n            <nui-legend [active]="chartAssist.isLegendActive">\n                <nui-legend-series\n                    [descriptionPrimary]="legendLabel$ | async | titlecase"\n                    descriptionSecondary="Secondary Text"\n                    i18n-descriptionSecondary\n                >\n                    <div\n                        class="custom-legend-tile d-flex justify-content-center align-items-center"\n                        [ngStyle]="{\n                            backgroundColor: legendBackground$ | async\n                        }"\n                    >\n                        <nui-chart-marker\n                            [marker]="legendIcon$ | async"\n                        ></nui-chart-marker>\n                    </div>\n                </nui-legend-series>\n            </nui-legend>\n        </div>\n    </div>\n</div>\n'},94138:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n// Todo: provide it from framework in scope of NUI-3430\n@nui-rich-legend-tile-width: 60px;\n\n.custom-legend-tile {\n    width: @nui-rich-legend-tile-width;\n}\n'},91733:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport { Observable } from "rxjs";\nimport { map } from "rxjs/operators";\n\nimport { IconService } from "@nova-ui/bits";\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarRenderer,\n    BarStatusGridConfig,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IXYScales,\n    MappedValueProvider,\n    statusAccessors,\n    StatusAccessors,\n    SvgMarker,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Unknown = "unknown",\n    Up = "up",\n    Warning = "warning",\n    Down = "down",\n    Critical = "critical",\n}\n\nconst OPACITY_BACKGROUND_EMPHASIZED = 0.4;\n\n@Component({\n    selector: "nui-status-legend-chart-example",\n    templateUrl: "./status-legend-chart.example.component.html",\n    styleUrls: ["./status-legend-chart.example.component.less"],\n})\nexport class StatusLegendChartExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n\n    public legendLabel$: Observable<any>;\n    public legendIcon$: Observable<any>;\n    public legendBackground$: Observable<any>;\n\n    constructor(private iconService: IconService) {}\n\n    public ngOnInit(): void {\n        const chart = new Chart(new XYGrid(new BarStatusGridConfig()));\n        this.chartAssist = new ChartAssist(chart);\n\n        const statusColors = createColorProvider();\n        const accessors = statusAccessors(statusColors);\n        // Thickness accessor should be used to specify which status corresponds to a thin bar or thick\n        accessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chartAssist.chart.update(seriesSet);\n\n        const statusMarkers = createMarkerProvider(this.iconService);\n        const palette = new ChartPalette(statusColors, {\n            backgroundOpacity: OPACITY_BACKGROUND_EMPHASIZED,\n        });\n        // legendLabelData$ is a stream of data that can be used to display data in legend\n        // (last value while user does not interact with chart and current value while interacting).\n        // This can help to generate stream of labels/icons/backgrounds:\n        this.legendLabel$ = this.chartAssist\n            .legendLabelData$(seriesSet[0])\n            .pipe(map((d) => d.status));\n        this.legendIcon$ = this.legendLabel$.pipe(map(statusMarkers.get));\n        this.legendBackground$ = this.legendLabel$.pipe(\n            map(palette.backgroundColors.get)\n        );\n    }\n}\n\nfunction createColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n    });\n}\n\nfunction createMarkerProvider(iconService: IconService) {\n    const getStatusMarker = (status: string) =>\n        new SvgMarker(iconService.getStatusIcon(status));\n\n    return new MappedValueProvider({\n        [Status.Unknown]: getStatusMarker(Status.Unknown),\n        [Status.Up]: getStatusMarker(Status.Up),\n        [Status.Warning]: getStatusMarker(Status.Warning),\n        [Status.Down]: getStatusMarker(Status.Down),\n        [Status.Critical]: getStatusMarker(Status.Critical),\n    });\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    status: Status.Up,\n                    start: new Date(2012, 5, 3),\n                    end: new Date(2012, 5, 6),\n                },\n                {\n                    status: Status.Down,\n                    start: new Date(2012, 5, 6),\n                    end: new Date(2012, 5, 17),\n                },\n                {\n                    status: Status.Warning,\n                    start: new Date(2012, 5, 17),\n                    end: new Date(2012, 5, 18),\n                },\n            ].map((d) => ({\n                value: d.end,\n                status: d.status,\n                start: d.start,\n                end: d.end,\n            })),\n        },\n    ];\n}\n'},23839:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div\n    id="nui-status-chart-with-icons"\n    class="container"\n    [style.margin-top.px]="50"\n>\n    <charts-test-harness>\n        \x3c!-- 50px top margin to give tooltips space on the top --\x3e\n        <div class="d-flex">\n            <nui-chart class="d-flex w-100" [chart]="chart"></nui-chart>\n\n            <nui-chart-tooltips\n                [plugin]="tooltipsPlugin"\n                [template]="tooltipTemplate"\n            ></nui-chart-tooltips>\n\n            <ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n                <div class="p-1 d-flex align-items-center">\n                    <nui-chart-marker\n                        [marker]="statusMarkers.get(dataPoint.data.status)"\n                    ></nui-chart-marker>\n                    <span class="pl-2"\n                        ><strong>{{\n                            dataPoint.data.status | titlecase\n                        }}</strong></span\n                    >\n                    <span class="pl-2">{{\n                        " for " + dataPoint.data.value + " days"\n                    }}</span>\n                </div>\n            </ng-template>\n        </div>\n    </charts-test-harness>\n</div>\n'},18166:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport { IconService } from "@nova-ui/bits";\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarRenderer,\n    BarStatusGridConfig,\n    BarTooltipsPlugin,\n    Chart,\n    CHART_PALETTE_CS_S_EXTENDED,\n    HIGHLIGHT_DATA_POINT_EVENT,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    IValueProvider,\n    IXYScales,\n    MappedValueProvider,\n    SELECT_DATA_POINT_EVENT,\n    statusAccessors,\n    StatusAccessors,\n    SvgMarker,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Unknown = "unknown",\n    Up = "up",\n    Warning = "warning",\n    Down = "down",\n    Critical = "critical",\n}\n\n@Component({\n    selector: "nui-status-chart-test",\n    templateUrl: "./status-chart-test.component.html",\n})\nexport class StatusChartTestComponent implements OnInit {\n    public chart = new Chart(new XYGrid(new BarStatusGridConfig()));\n    public tooltipsPlugin = new BarTooltipsPlugin({ horizontal: true });\n    public statusMarkers: IValueProvider<SvgMarker>;\n\n    constructor(private iconService: IconService) {}\n\n    public ngOnInit(): void {\n        this.statusMarkers = createMarkerProvider(this.iconService);\n        this.chart.addPlugin(this.tooltipsPlugin);\n\n        // In order to set interaction Label Formatter that is independent from bottom tick formatter,\n        // it should be added separately with formatter name in a constructor\n        this.chart.addPlugin(new InteractionLabelPlugin("labelFormatter"));\n        this.chart.addPlugin(new InteractionLinePlugin());\n\n        this.chart.updateDimensions();\n\n        const statusColors = createColorProvider();\n        const accessors = statusAccessors(statusColors);\n        const iconSize: number = 10;\n        const icons = new MappedValueProvider(\n            getResizedIconsValueMap(this.iconService, iconSize)\n        );\n        // Thickness accessor should be used to specify which status corresponds to a thin bar or thick\n        accessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n        accessors.data.marker = (data: any) => icons.get(data.status);\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n\n        const bandScale = new BandScale();\n        const timeScale = new TimeScale();\n        // This formats label in interaction label plugin\n        timeScale.formatters.labelFormatter = (d: any) =>\n            moment(d).format("LL");\n        bandScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        const scales: IXYScales = {\n            y: bandScale,\n            x: timeScale,\n        };\n\n        // Marker accessor is used to draw marker on a bar depending on the data point\n        accessors.data.marker = (data: any) => icons.get(data.status);\n\n        const seriesSet = getData().map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales,\n        }));\n\n        this.chart.update(seriesSet);\n\n        // Sample events that can be used in order to handle click or highlighting of certain status\n        this.chart\n            .getEventBus()\n            .getStream(HIGHLIGHT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n        this.chart\n            .getEventBus()\n            .getStream(SELECT_DATA_POINT_EVENT)\n            .subscribe(console.log);\n    }\n}\n\nfunction createMarkerProvider(\n    iconService: IconService\n): IValueProvider<SvgMarker> {\n    const getStatusMarker = (status: string) =>\n        new SvgMarker(iconService.getStatusIcon(status));\n\n    return new MappedValueProvider({\n        [Status.Unknown]: getStatusMarker(Status.Unknown),\n        [Status.Up]: getStatusMarker(Status.Up),\n        [Status.Warning]: getStatusMarker(Status.Warning),\n        [Status.Down]: getStatusMarker(Status.Down),\n        [Status.Critical]: getStatusMarker(Status.Critical),\n    });\n}\n\nfunction createColorProvider(): IValueProvider<string> {\n    return new MappedValueProvider<string>({\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n    });\n}\n\nfunction getResizedIconsValueMap(iconService: IconService, iconSize: number) {\n    return {\n        [Status.Unknown]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Unknown),\n            iconSize\n        ),\n        [Status.Up]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Up),\n            iconSize\n        ),\n        [Status.Warning]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Warning),\n            iconSize\n        ),\n        [Status.Down]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Down),\n            iconSize\n        ),\n        [Status.Critical]: iconService.getIconResized(\n            iconService.getStatusIcon(Status.Critical),\n            iconSize\n        ),\n    };\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "1",\n            name: "Series 1",\n            data: [\n                {\n                    status: Status.Up,\n                    start: 0, // in days from today\n                    end: 22,\n                },\n                {\n                    status: Status.Warning,\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    status: Status.Unknown,\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    status: Status.Down,\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    status: Status.Critical,\n                    start: 109,\n                    end: 178,\n                },\n                {\n                    status: Status.Up,\n                    start: 178,\n                    end: 877,\n                },\n                {\n                    status: Status.Critical,\n                    start: 877,\n                    end: 980,\n                },\n                {\n                    status: Status.Warning,\n                    start: 980,\n                    end: 1000,\n                },\n            ].map((d) => ({\n                value: d.end - d.start,\n                status: d.status,\n                start: getDate(d.start),\n                end: getDate(d.end),\n            })),\n        },\n    ];\n}\n\nfunction getDate(hours: number) {\n    return moment("1986-02-17").add({ hours }).toDate();\n}\n'},92817:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Waterfall Charts</h1>\n\n<p>\n    A Waterfall Chart is a chart that shows a certain category events on the\n    timeline.\n</p>\n\n<h2>Simple Waterfall Chart</h2>\n<p>\n    To build a simple Waterfall chart follow the instructions in the example\n    source code:\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="waterfall-chart-simple"\n    exampleTitle="Simple Waterfall Chart"\n>\n    <nui-waterfall-chart-simple-example></nui-waterfall-chart-simple-example>\n</nui-example-wrapper>\n\n<h2>Advanced Waterfall Chart</h2>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Caution!!!</strong>\n    Example below is provided as a proof of concept and is not meant to be used\n    in production code.\n</nui-message>\n<p>\n    It is possible to build fancy waterfall charts with more complex\n    functionality, like the one below. Each series provides a separate instance\n    of bar chart that is rendered inside grid, which is a separate empty chart\n    positioned using CDK Overlay on top of bar charts.\n</p>\n<p>To build an advanced Waterfall chart below follow the instructions:</p>\n<ol>\n    <li>\n        Make sure your series provide a new instance of\n        <code><a href="../classes/Chart.html" target="_blank">Chart</a></code>\n        with an instance of\n        <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code>\n        passed in as an argument.\n        <code\n            >new\n            <a href="../classes/BarStatusGridConfig.html" target="_blank"\n                >BarStatusGridConfig</a\n            >()</code\n        >\n        config instance goes as an argument to <code>XYGrid</code> with the\n        <code>showBottomAxis</code> option set to <code>false</code>.\n    </li>\n    <li>\n        Instantiate and configure a\n        <code><a href="../classes/XYGrid.html" target="_blank">XYGrid</a></code>\n    </li>\n    <li>\n        Instantiate and configure an\n        <code\n            ><a\n                href="https://material.angular.io/cdk/overlay/overview"\n                target="_blank"\n                >Overlay</a\n            ></code\n        >\n        and corresponding\n        <code\n            ><a\n                href="https://material.angular.io/cdk/portal/overview"\n                target="_blank"\n                >Portal</a\n            ></code\n        >\n        to attach the grid to a correct point of the first series on the page.\n    </li>\n    <li>\n        Instantiate\n        <code\n            ><a href="../classes/HorizontalBarAccessors.html" target="_blank"\n                >HorizontalBarAccessors</a\n            ></code\n        >. Using the accessor, assign the color or the bar to the corresponding\n        data type retrieved from the <code>ChartPalette</code>.\n    </li>\n    <li>\n        Configure the thickness of the bar using the\n        <code\n            ><a href="../classes/BandScale.html" target="_blank"\n                >BandScale</a\n            ></code\n        >\n        method\n        <code\n            ><a href="../classes/BandScale.html#padding" target="_blank"\n                >padding</a\n            ></code\n        >.\n    </li>\n</ol>\n<nui-example-wrapper\n    filenamePrefix="waterfall-chart-advanced"\n    exampleTitle="Advanced Waterfall Chart"\n>\n    <nui-waterfall-chart-advanced-example></nui-waterfall-chart-advanced-example>\n</nui-example-wrapper>\n'},44712:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-waterfall",\n    templateUrl: "./chart-docs-waterfall.component.html",\n})\nexport class ChartDocsWaterfallComponent {}\n'},56394:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { DragDropModule } from "@angular/cdk/drag-drop";\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../../demo-files-factory";\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartDocsWaterfallComponent } from "./chart-docs-waterfall.component";\nimport { WaterfallChartAdvancedComponent } from "./waterfall-advanced-charts/waterfall-chart-advanced.example.component";\nimport { WaterfallChartSimpleComponent } from "./waterfall-chart-simple/waterfall-chart-simple.example.component";\nimport { WaterfallChartTestComponent } from "./waterfall-test/waterfall-chart-test.component";\n\nconst collectionRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsWaterfallComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "simple",\n        component: WaterfallChartSimpleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "advanced",\n        component: WaterfallChartAdvancedComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: WaterfallChartTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsWaterfallComponent,\n        WaterfallChartSimpleComponent,\n        WaterfallChartAdvancedComponent,\n        WaterfallChartTestComponent,\n    ],\n    imports: [\n        DragDropModule,\n        NuiIconModule,\n        NuiDocsModule,\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiMessageModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("waterfall"),\n        },\n    ],\n})\nexport default class ChartDocsWaterfallModule {}\n'},166:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="chart mb-5">\n    <div\n        [style.margin-left.px]="rowSize + iconSize"\n        #gridChartPlaceholder\n    ></div>\n    <div cdkDropList class="example-list" (cdkDropListDropped)="drop($event)">\n        <div\n            *ngFor="let item of listItems; let i = index; let first = first"\n            class="d-flex flex-row align-items-center waterfall-chart-list-item"\n            cdkDrag\n        >\n            <nui-icon icon="{{ item.icon }}" class="p-1"></nui-icon>\n            <div\n                style="overflow: hidden"\n                [style.width.px]="rowSize"\n                class="p-1"\n            >\n                <span>{{ item.url }}</span>\n            </div>\n            <div class="d-flex">\n                <div class="d-flex h-100" *ngIf="first"></div>\n                <nui-chart\n                    class="d-flex"\n                    [chart]="item.chart"\n                    nuiChartCollectionId="1"\n                ></nui-chart>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #templatePortalGrid>\n    <nui-chart\n        class="d-flex"\n        [chart]="gridChart"\n        nuiChartCollectionId="1"\n    ></nui-chart>\n</ng-template>\n'},32008:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import "@nova-ui/bits/sdk/less/mixins";\n\n.waterfall-chart-list-item:hover {\n    .setCssVariable(background-color, nui-color-selected);\n}\n\n.waterfall-chart-list-item {\n    .setCssVariable(background-color, nui-color-bg-content);\n}\n'},61669:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CdkDragDrop, moveItemInArray } from "@angular/cdk/drag-drop";\nimport {\n    ConnectionPositionPair,\n    Overlay,\n    OverlayPositionBuilder,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategyOptions,\n} from "@angular/cdk/overlay";\nimport { TemplatePortal } from "@angular/cdk/portal";\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    OnInit,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n} from "@angular/core";\n\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarRenderer,\n    BarStatusGridConfig,\n    Chart,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    HorizontalBarAccessors,\n    ISetDomainEventPayload,\n    LinearScale,\n    MappedValueProvider,\n    NoopAccessors,\n    NoopRenderer,\n    SET_DOMAIN_EVENT,\n    XYGrid,\n    XYGridConfig,\n    ZoomPlugin,\n} from "@nova-ui/charts";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-waterfall-chart-advanced-example",\n    templateUrl: "./waterfall-chart-advanced.example.component.html",\n    styleUrls: ["./waterfall-chart-advanced.example.component.less"],\n})\nexport class WaterfallChartAdvancedComponent implements AfterViewInit, OnInit {\n    // Declaring chart config for charts in series\n    private seriesChartConfig = new BarStatusGridConfig({\n        showBottomAxis: false,\n    });\n\n    // Icon and row sizes are used to properly place cdk overlay with grid over the chart\n    public iconSize: number = 20;\n    public rowSize: number = 200;\n\n    public palette = new ChartPalette(\n        new MappedValueProvider<string>({\n            connect: CHART_PALETTE_CS1[0],\n            dns: CHART_PALETTE_CS1[1],\n            send: CHART_PALETTE_CS1[2],\n            ttfb: CHART_PALETTE_CS1[3],\n            cdownload: CHART_PALETTE_CS1[4],\n        })\n    );\n\n    public gridChart = new Chart(new XYGrid());\n\n    // We need both to properly handle portal and positioning for the cdk overlay\n    public positionStrategy: PositionStrategy;\n    public templatePortal: TemplatePortal<any>;\n    public listItems = getData(this.seriesChartConfig);\n\n    private scales: { x: LinearScale; y: BandScale };\n    private overlayRef: OverlayRef;\n\n    @ViewChild("templatePortalGrid") templatePortalGrid: TemplateRef<any>;\n    @ViewChild("gridChartPlaceholder") gridChartPlaceholder: ElementRef;\n\n    // This listener updates the grid position to follow the chart if client size changes on user interaction with the page.\n    // In case client size changes dynamically another solution is needed.\n    @HostListener("document:click")\n    public updateGridPosition(): void {\n        this.overlayRef.updatePosition();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private overlayPositionBuilder: OverlayPositionBuilder,\n        private _viewContainerRef: ViewContainerRef,\n        private scrollStrategyOptions: ScrollStrategyOptions\n    ) {}\n\n    public ngOnInit(): void {\n        this.gridChart.addPlugin(new ZoomPlugin());\n\n        this.gridChart\n            .getEventBus()\n            .getStream(SET_DOMAIN_EVENT)\n            .subscribe((event) => {\n                const payload = <ISetDomainEventPayload>event.data;\n                this.listItems.forEach((item) => {\n                    this.scales.x.fixDomain(payload[this.scales.x.id]);\n                    item.chart.updateDimensions();\n                });\n            });\n    }\n\n    public ngAfterViewInit(): void {\n        // Here you configure the template portal and overlay\n\n        this.templatePortal = new TemplatePortal(\n            this.templatePortalGrid,\n            this._viewContainerRef\n        );\n        const positions: ConnectionPositionPair[] = [\n            {\n                originX: "start",\n                originY: "top",\n                overlayX: "start",\n                overlayY: "top",\n            },\n            {\n                originX: "start",\n                originY: "top",\n                overlayX: "start",\n                overlayY: "top",\n            },\n        ];\n\n        this.positionStrategy = this.overlay\n            .position()\n            .flexibleConnectedTo(this.gridChartPlaceholder)\n            .withPositions(positions)\n            .withPush(false);\n\n        this.overlayRef = this.overlay.create({\n            positionStrategy: this.positionStrategy,\n            scrollStrategy: this.scrollStrategyOptions.reposition(),\n        });\n\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.fixDomain([0, 1000]);\n        bandScale.fixDomain(["cat1"]);\n\n        // Here you handle scales, assign colors via data accessors, and format series\n\n        this.scales = {\n            x: linearScale,\n            y: bandScale,\n        };\n        this.scales.x.formatters.tick = (value: number) =>\n            `${Number(value / 1000).toFixed(1)}s`;\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        const accessors = new HorizontalBarAccessors();\n        accessors.data.color = (d: any) =>\n            this.palette.standardColors.get(d.type);\n\n        let commonWidth = 0;\n\n        this.listItems.forEach((item) => {\n            const seriesSet = [\n                {\n                    id: "series-1",\n                    name: "Series 1",\n                    data: item.data.map((d) => ({\n                        value: d.end - d.start,\n                        start: d.start,\n                        end: d.end,\n                        category: "cat1",\n                        type: d.type,\n                    })),\n                    accessors,\n                    scales: this.scales,\n                    renderer,\n                },\n            ];\n\n            item.chart.update(seriesSet);\n\n            commonWidth = item.chart.getGrid().config().dimension.width(); // TODO: executed n times\n        });\n\n        // Here you configure grid\n\n        const config = this.gridChart.getGrid().config() as XYGridConfig;\n        // This handles the automatic resize of the grid depending on the number of series\n        // We also use the height defined by BarStatusGridConfig() at the very top for each chart in series.\n        config.dimension.height(\n            this.listItems.length * this.seriesChartConfig.dimension.height()\n        );\n        config.dimension.width(commonWidth);\n        config.dimension.autoHeight = false; // We must disable this option to let the grid to properly adjust\n        config.axis.left.visible = false;\n        config.axis.left.gridTicks = false;\n        config.axis.bottom.gridTicks = true;\n\n        this.gridChart.update([\n            {\n                id: "i am grid",\n                name: "i am grid",\n                data: [],\n                accessors: new NoopAccessors(),\n                scales: this.scales,\n                renderer: new NoopRenderer(),\n            },\n        ]);\n\n        this.gridChart.updateDimensions();\n\n        this.overlayRef.attach(this.templatePortal);\n    }\n\n    drop(event: CdkDragDrop<string[]>): void {\n        moveItemInArray(\n            this.listItems,\n            event.previousIndex,\n            event.currentIndex\n        );\n    }\n}\n\nfunction getData(config: XYGridConfig) {\n    return [\n        {\n            url: "http://www.google.com",\n            size: 924, // in Bytes\n            icon: "xml-file",\n            chart: new Chart(new XYGrid(config)),\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 178,\n                },\n            ],\n        },\n        {\n            url: "http://www2.google.com",\n            size: 924, // in Bytes\n            icon: "xml-file",\n            chart: new Chart(new XYGrid(config)),\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 788,\n                },\n            ],\n        },\n        {\n            url: "http://www.google.com/cat.png",\n            size: 3333, // in Bytes\n            icon: "image",\n            chart: new Chart(new XYGrid(config)),\n            data: [\n                {\n                    type: "connect",\n                    start: 178, // in ms\n                    end: 222,\n                },\n                {\n                    type: "dns",\n                    start: 222,\n                    end: 239,\n                },\n                {\n                    type: "send",\n                    start: 239,\n                    end: 259,\n                },\n                {\n                    type: "ttfb",\n                    start: 259,\n                    end: 309,\n                },\n                {\n                    type: "cdownload",\n                    start: 309,\n                    end: 578,\n                },\n            ],\n        },\n        {\n            url: "http://www.google.com/revenge.png",\n            size: 3333, // in Bytes\n            icon: "image",\n            chart: new Chart(new XYGrid(config)),\n            data: [\n                {\n                    type: "connect",\n                    start: 578, // in ms\n                    end: 590,\n                },\n                {\n                    type: "dns",\n                    start: 590,\n                    end: 799,\n                },\n                {\n                    type: "send",\n                    start: 799,\n                    end: 888,\n                },\n                {\n                    type: "ttfb",\n                    start: 888,\n                    end: 900,\n                },\n                {\n                    type: "cdownload",\n                    start: 900,\n                    end: 990,\n                },\n            ],\n        },\n    ];\n}\n'},54995:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},3608:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    CHART_PALETTE_CS1,\n    IBarChartConfig,\n    InteractionLinePlugin,\n    MappedValueProvider,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-waterfall-chart-simple-example",\n    templateUrl: "./waterfall-chart-simple.example.component.html",\n})\nexport class WaterfallChartSimpleComponent implements OnInit {\n    // Step 1 - Create a new horizontal bar chart\n    private chartConfig: IBarChartConfig = { horizontal: true };\n    public chart = new Chart(barGrid(this.chartConfig));\n\n    public ngOnInit(): void {\n        const accessors = barAccessors(this.chartConfig);\n        const scales = barScales(this.chartConfig);\n\n        // Step 1 - Optionally, add interaction highlighting behavior.\n        // If highlighting behavior is not desired, the renderer can be instantiated without a \'highlightStrategy\' configuration\n        // and the InteractionLinePlugin registration can be skipped.\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        this.chart.addPlugin(new InteractionLinePlugin());\n\n        // Step 2 - Create a color provider that maps the statuses (or types) of categories to their corresponding colors\n        const colorProvider = new MappedValueProvider(\n            zipObject(\n                ["connect", "dns", "send", "ttfb", "cdownload"],\n                CHART_PALETTE_CS1\n            )\n        );\n\n        // Step 3 - Adjust the color accessor, to retrieve the color or the bar by the corresponding data type.\n        accessors.data.color = (d) => colorProvider.get(d.type);\n\n        // Step 4 - Configure the format of the bottom label by setting custom scales.x.formatter function.\n        scales.x.formatters.tick = (value: number) =>\n            `${parseFloat(Number(value / 1000).toFixed(1)).toLocaleString()}s`;\n\n        // Step 5 - Configure the thickness of the bar using the BandScale.padding method on your scales.y.\n        (<BandScale>scales.y).padding(0.5);\n\n        this.chart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\n/** Chart Data */\nfunction getData() {\n    return [\n        {\n            id: "1",\n            name: "Category 1",\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 178,\n                },\n            ],\n        },\n        {\n            id: "2",\n            name: "Category 2",\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 788,\n                },\n            ],\n        },\n        {\n            id: "3",\n            name: "Category 3",\n            data: [\n                {\n                    type: "connect",\n                    start: 178, // in ms\n                    end: 222,\n                },\n                {\n                    type: "dns",\n                    start: 222,\n                    end: 239,\n                },\n                {\n                    type: "send",\n                    start: 239,\n                    end: 259,\n                },\n                {\n                    type: "ttfb",\n                    start: 259,\n                    end: 309,\n                },\n                {\n                    type: "cdownload",\n                    start: 309,\n                    end: 578,\n                },\n            ],\n        },\n        {\n            id: "4",\n            name: "Category 4",\n            data: [\n                {\n                    type: "connect",\n                    start: 578, // in ms\n                    end: 590,\n                },\n                {\n                    type: "dns",\n                    start: 590,\n                    end: 799,\n                },\n                {\n                    type: "send",\n                    start: 799,\n                    end: 888,\n                },\n                {\n                    type: "ttfb",\n                    start: 888,\n                    end: 900,\n                },\n                {\n                    type: "cdownload",\n                    start: 900,\n                    end: 990,\n                },\n            ],\n        },\n    ];\n}\n'},44862:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container" [style.margin-top.px]="50">\n    <charts-test-harness>\n        \x3c!-- 50px top margin to give tooltips space on the top --\x3e\n        <div class="d-flex flex-row">\n            <nui-waterfall-chart-simple-example\n                class="w-100 mb-5"\n                id="nui-waterfall-chart-simple"\n            ></nui-waterfall-chart-simple-example>\n        </div>\n        <div class="d-flex flex-row">\n            <nui-waterfall-chart-advanced-example\n                class="w-100 mt-5"\n                id="nui-waterfall-chart-advanced"\n            ></nui-waterfall-chart-advanced-example>\n        </div>\n    </charts-test-harness>\n</div>\n'},54489:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "waterfall-chart-test-component",\n    templateUrl: "./waterfall-chart-test.component.html",\n})\nexport class WaterfallChartTestComponent {}\n'},53855:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<ng-content></ng-content>\n<div class="ml-3 mt-4">\n    <div class="d-flex align-items-center">\n        <input\n            class="mb-2"\n            type="checkbox"\n            id="dark-theme"\n            [ngModel]="themeSwitcher.isDarkModeEnabledSubject | async"\n            (ngModelChange)="themeSwitcher.setDarkTheme($event)"\n        />\n        <label class="px-3" for="dark-theme">Dark Theme</label>\n    </div>\n</div>\n'},5319:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnDestroy } from "@angular/core";\n\nimport { ThemeSwitchService } from "@nova-ui/bits";\n\n@Component({\n    selector: "charts-test-harness",\n    templateUrl: "./charts-test-harness.component.html",\n    host: { class: "charts-test-harness" },\n})\nexport class ChartsTestHarnessComponent implements OnDestroy {\n    public originalWithRefreshRoute: boolean;\n\n    constructor(public themeSwitcher: ThemeSwitchService) {\n        // disable route refreshing because the theme service currently always reverts to\n        // the light theme on route refresh unless route.data.showThemeSwitcher is \'true\'\n        this.originalWithRefreshRoute = this.themeSwitcher.withRefreshRoute;\n        this.themeSwitcher.withRefreshRoute = false;\n    }\n\n    public ngOnDestroy(): void {\n        this.themeSwitcher.withRefreshRoute = this.originalWithRefreshRoute;\n    }\n}\n'},65662:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CommonModule } from "@angular/common";\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\n\nimport { ChartsTestHarnessComponent } from "./charts-test-harness.component";\n\n@NgModule({\n    declarations: [ChartsTestHarnessComponent],\n    imports: [FormsModule, CommonModule],\n    exports: [ChartsTestHarnessComponent, CommonModule],\n})\nexport class DemoCommonModule {}\n'},77804:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// this file autogenerated, do not edit it manually please run the script\n// yarn run compile-demo-paths\nexport const DEMO_PATHS = [\n    "advanced-usage/accessors/chart-docs-accessors.module.ts",\n    "advanced-usage/accessors/colors/chart-docs-accessors-colors.component.html",\n    "advanced-usage/accessors/colors/chart-docs-accessors-colors.component.ts",\n    "advanced-usage/accessors/colors/chart-docs-accessors-colors.module.ts",\n    "advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.html",\n    "advanced-usage/accessors/colors/custom-accessor/colors-custom-accessor.example.component.ts",\n    "advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.html",\n    "advanced-usage/accessors/colors/custom-provider/colors-custom-provider.example.component.ts",\n    "advanced-usage/accessors/data/accessors/accessors.example.component.html",\n    "advanced-usage/accessors/data/accessors/accessors.example.component.ts",\n    "advanced-usage/accessors/data/chart-docs-accessors-data.component.html",\n    "advanced-usage/accessors/data/chart-docs-accessors-data.component.ts",\n    "advanced-usage/accessors/data/chart-docs-accessors-data.module.ts",\n    "advanced-usage/accessors/markers/chart-docs-accessors-markers.component.html",\n    "advanced-usage/accessors/markers/chart-docs-accessors-markers.component.ts",\n    "advanced-usage/accessors/markers/chart-docs-accessors-markers.module.ts",\n    "advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.html",\n    "advanced-usage/accessors/markers/custom-accessor/markers-custom-accessor.example.component.ts",\n    "advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.html",\n    "advanced-usage/accessors/markers/custom-provider/markers-custom-provider.example.component.ts",\n    "advanced-usage/accessors/overview/chart-docs-accessors-overview.component.html",\n    "advanced-usage/accessors/overview/chart-docs-accessors-overview.component.ts",\n    "advanced-usage/accessors/overview/chart-docs-accessors-overview.module.ts",\n    "advanced-usage/chart-docs-advanced-usage.module.ts",\n    "advanced-usage/chart-setup/chart-docs-chart-setup.component.html",\n    "advanced-usage/chart-setup/chart-docs-chart-setup.component.ts",\n    "advanced-usage/chart-setup/chart-docs-chart-setup.module.ts",\n    "advanced-usage/chart-setup/line-chart/line-chart.example.component.html",\n    "advanced-usage/chart-setup/line-chart/line-chart.example.component.ts",\n    "advanced-usage/events/chart-docs-events.component.html",\n    "advanced-usage/events/chart-docs-events.component.ts",\n    "advanced-usage/events/chart-docs-events.module.ts",\n    "advanced-usage/events/event-sampler/event-sampler.component.html",\n    "advanced-usage/events/event-sampler/event-sampler.component.less",\n    "advanced-usage/events/event-sampler/event-sampler.component.ts",\n    "advanced-usage/events/events-basic/events-basic-example.component.html",\n    "advanced-usage/events/events-basic/events-basic-example.component.ts",\n    "advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.html",\n    "advanced-usage/grid-config/base-grid/chart-docs-base-grid.component.ts",\n    "advanced-usage/grid-config/base-grid/chart-docs-base-grid.module.ts",\n    "advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.html",\n    "advanced-usage/grid-config/base-grid/disabling-interaction/base-grid-disabling-interaction.example.component.ts",\n    "advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.html",\n    "advanced-usage/grid-config/base-grid/height-and-width/base-grid-height-and-width.example.component.ts",\n    "advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.html",\n    "advanced-usage/grid-config/base-grid/margins/base-grid-auto-margins.example.component.ts",\n    "advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.html",\n    "advanced-usage/grid-config/base-grid/margins/base-grid-margins.example.component.ts",\n    "advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.html",\n    "advanced-usage/grid-config/base-grid/padding/base-grid-padding.example.component.ts",\n    "advanced-usage/grid-config/chart-docs-grid-config.module.ts",\n    "advanced-usage/legend/chart-docs-legend-example.module.ts",\n    "advanced-usage/legend/index.ts",\n    "advanced-usage/legend/legend-active/legend-active.example.component.html",\n    "advanced-usage/legend/legend-active/legend-active.example.component.ts",\n    "advanced-usage/legend/legend-basic/legend-basic.example.component.html",\n    "advanced-usage/legend/legend-basic/legend-basic.example.component.ts",\n    "advanced-usage/legend/legend-compact/legend-compact.example.component.html",\n    "advanced-usage/legend/legend-compact/legend-compact.example.component.ts",\n    "advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.html",\n    "advanced-usage/legend/legend-description-content-projection/legend-description-projection.example.component.ts",\n    "advanced-usage/legend/legend-docs/legend-docs.example.component.html",\n    "advanced-usage/legend/legend-docs/legend-docs.example.component.ts",\n    "advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.html",\n    "advanced-usage/legend/legend-horizontal/legend-horizontal.example.component.ts",\n    "advanced-usage/legend/legend-interactive/legend-interactive.example.component.html",\n    "advanced-usage/legend/legend-interactive/legend-interactive.example.component.ts",\n    "advanced-usage/legend/legend-metadata/legend-metadata-example.component.html",\n    "advanced-usage/legend/legend-metadata/legend-metadata-example.component.ts",\n    "advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.html",\n    "advanced-usage/legend/legend-rich-tile/legend-rich-tile.example.component.ts",\n    "advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.html",\n    "advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.less",\n    "advanced-usage/legend/legend-rich-tile-content-projection/legend-rich-tile-content-projection.example.component.ts",\n    "advanced-usage/legend/legend-test/legend-test.component.html",\n    "advanced-usage/legend/legend-test/legend-test.component.ts",\n    "advanced-usage/legend/legend-text-color/legend-text-color.example.component.html",\n    "advanced-usage/legend/legend-text-color/legend-text-color.example.component.ts",\n    "advanced-usage/legend/legend-visual-test/legend-visual-test.component.html",\n    "advanced-usage/legend/legend-visual-test/legend-visual-test.component.less",\n    "advanced-usage/legend/legend-visual-test/legend-visual-test.component.ts",\n    "advanced-usage/scales/chart-docs-scales.component.html",\n    "advanced-usage/scales/chart-docs-scales.component.ts",\n    "advanced-usage/scales/chart-docs-scales.module.ts",\n    "advanced-usage/scales/domains/chart-docs-domains.component.html",\n    "advanced-usage/scales/domains/chart-docs-domains.component.ts",\n    "advanced-usage/scales/domains/chart-docs-domains.module.ts",\n    "advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.html",\n    "advanced-usage/scales/domains/fixed-domains/fixed-domains.example.component.ts",\n    "advanced-usage/scales/formatters/chart-docs-formatters.component.html",\n    "advanced-usage/scales/formatters/chart-docs-formatters.component.ts",\n    "advanced-usage/scales/formatters/chart-docs-formatters.module.ts",\n    "advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.html",\n    "advanced-usage/scales/formatters/tick-formatter/tick-formatter.example.component.ts",\n    "chart-types/area/area-chart-basic/area-chart-basic-example.component.html",\n    "chart-types/area/area-chart-basic/area-chart-basic-example.component.ts",\n    "chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.html",\n    "chart-types/area/area-chart-bi-directional/area-chart-bi-directional-example.component.ts",\n    "chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.html",\n    "chart-types/area/area-chart-bi-directional-stacked/area-chart-bi-directional-stacked-example.component.ts",\n    "chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.html",\n    "chart-types/area/area-chart-bi-directional-stacked-inverted/area-chart-bi-directional-stacked-inverted-example.component.ts",\n    "chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.html",\n    "chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-test.component.ts",\n    "chart-types/area/area-chart-bi-directional-stacked-test/area-chart-bi-directional-stacked-visual-test.component.ts",\n    "chart-types/area/area-chart-stack/area-chart-stack-example.component.html",\n    "chart-types/area/area-chart-stack/area-chart-stack-example.component.ts",\n    "chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.html",\n    "chart-types/area/area-chart-stack-percentage/area-chart-stack-percentage-example.component.ts",\n    "chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.html",\n    "chart-types/area/area-chart-variable-baseline/area-chart-variable-baseline-example.component.ts",\n    "chart-types/area/area-chart-vertical/area-chart-vertical-example.component.html",\n    "chart-types/area/area-chart-vertical/area-chart-vertical-example.component.less",\n    "chart-types/area/area-chart-vertical/area-chart-vertical-example.component.ts",\n    "chart-types/area/chart-docs-area.component.html",\n    "chart-types/area/chart-docs-area.component.ts",\n    "chart-types/area/chart-docs-area.module.ts",\n    "chart-types/area/test/area-chart-test.component.html",\n    "chart-types/area/test/area-chart-test.component.ts",\n    "chart-types/bar/bar-chart/bar-chart.example.component.html",\n    "chart-types/bar/bar-chart/bar-chart.example.component.ts",\n    "chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.html",\n    "chart-types/bar/bar-chart-horizontal/bar-chart-horizontal.example.component.ts",\n    "chart-types/bar/bar-chart-test/bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.html",\n    "chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width/bar-chart-tick-label-max-width-test.component.ts",\n    "chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.html",\n    "chart-types/bar/bar-chart-test/bar-chart-tick-label-max-width-with-margin/bar-chart-tick-label-max-width-with-margin-test.component.ts",\n    "chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/basic-horizontal/basic-horizontal-bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/basic-vertical/basic-vertical-bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.html",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/bar-chart-time-interval/bar-chart-time-interval-dst-test.component.ts",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/date-time-util.ts",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/daylight-saving-time-test.module.ts",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.html",\n    "chart-types/bar/bar-chart-test/daylight-saving-time/dst-time-interval-test-page.component.ts",\n    "chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/horizontal-with-legend/horizontal-with-legend-bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.html",\n    "chart-types/bar/bar-chart-test/time-interval/time-interval.test.component.ts",\n    "chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/vertical-with-legend/vertical-with-legend-bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.html",\n    "chart-types/bar/bar-chart-test/vertical-with-timescale/vertical-with-timescale-bar-chart-test.component.ts",\n    "chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.html",\n    "chart-types/bar/bar-chart-time-interval/bar-chart-time-interval.example.component.ts",\n    "chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.html",\n    "chart-types/bar/bar-chart-time-scale/bar-chart-time-scale.example.component.ts",\n    "chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.html",\n    "chart-types/bar/bar-chart-with-legend/bar-chart-with-legend.example.component.ts",\n    "chart-types/bar/chart-docs-bar.component.html",\n    "chart-types/bar/chart-docs-bar.component.ts",\n    "chart-types/bar/chart-docs-bar.module.ts",\n    "chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.html",\n    "chart-types/bucketed-bar/bar-chart-grouped/bar-chart-grouped.example.component.ts",\n    "chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.html",\n    "chart-types/bucketed-bar/bar-chart-grouped-horizontal/bar-chart-grouped-horizontal.example.component.ts",\n    "chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.html",\n    "chart-types/bucketed-bar/bar-chart-percentage/bar-chart-percentage.example.component.ts",\n    "chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.html",\n    "chart-types/bucketed-bar/bar-chart-stacked/bar-chart-stacked.example.component.ts",\n    "chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.html",\n    "chart-types/bucketed-bar/bar-chart-stacked-horizontal/bar-chart-stacked-horizontal.example.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/bar-chart-bucketed-test.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/basic-stacked-horizontal/basic-stacked-horizontal-bar-chart-test.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/basic-stacked-vertical/basic-stacked-vertical-bar-chart-test.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/grouped-horizontal/grouped-horizontal-bar-chart-test.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/grouped-vertical/grouped-vertical-bar-chart-test.component.ts",\n    "chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.html",\n    "chart-types/bucketed-bar/bar-chart-test/proportional-vertical/proportional-vertical-bar-chart-test.component.ts",\n    "chart-types/bucketed-bar/chart-docs-bucketed-bar.component.html",\n    "chart-types/bucketed-bar/chart-docs-bucketed-bar.component.ts",\n    "chart-types/bucketed-bar/chart-docs-bucketed-bar.module.ts",\n    "chart-types/chart-docs-chart-types.module.ts",\n    "chart-types/gauge/chart-docs-gauge.component.html",\n    "chart-types/gauge/chart-docs-gauge.component.ts",\n    "chart-types/gauge/chart-docs-gauge.module.ts",\n    "chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-basic/donut-gauge-basic.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-with-content/donut-gauge-with-content.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-with-custom-threshold-labels/donut-gauge-with-custom-threshold-labels.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-marker-toggling/donut-gauge-with-threshold-marker-toggling.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-with-threshold-toggling/donut-gauge-with-threshold-toggling.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-with-thresholds/donut-gauge-with-thresholds.example.component.ts",\n    "chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.html",\n    "chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.less",\n    "chart-types/gauge/donut/donut-gauge-without-threshold-markers/donut-gauge-without-threshold-markers.example.component.ts",\n    "chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.html",\n    "chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.less",\n    "chart-types/gauge/linear/horizontal-gauge-basic/horizontal-gauge-basic.example.component.ts",\n    "chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.html",\n    "chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.less",\n    "chart-types/gauge/linear/linear-gauge-thickness-adjustment/linear-gauge-thickness-adjustment.example.component.ts",\n    "chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.html",\n    "chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.less",\n    "chart-types/gauge/linear/linear-gauge-with-thresholds/linear-gauge-with-thresholds.example.component.ts",\n    "chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.html",\n    "chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.less",\n    "chart-types/gauge/linear/vertical-gauge-basic/vertical-gauge-basic.example.component.ts",\n    "chart-types/gauge/visual-test/donut/donut-gauge-tester.component.html",\n    "chart-types/gauge/visual-test/donut/donut-gauge-tester.component.less",\n    "chart-types/gauge/visual-test/donut/donut-gauge-tester.component.ts",\n    "chart-types/gauge/visual-test/gauge-visual-test.component.html",\n    "chart-types/gauge/visual-test/gauge-visual-test.component.ts",\n    "chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.html",\n    "chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.less",\n    "chart-types/gauge/visual-test/horizontal/horizontal-gauge-tester.component.ts",\n    "chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.html",\n    "chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.less",\n    "chart-types/gauge/visual-test/vertical/vertical-gauge-tester.component.ts",\n    "chart-types/line/chart-docs-line.component.html",\n    "chart-types/line/chart-docs-line.component.ts",\n    "chart-types/line/chart-docs-line.module.ts",\n    "chart-types/line/line-chart-basic/line-chart-basic.example.component.html",\n    "chart-types/line/line-chart-basic/line-chart-basic.example.component.ts",\n    "chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.html",\n    "chart-types/line/line-chart-interrupted-basic/line-chart-interrupted-basic-example.component.ts",\n    "chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.html",\n    "chart-types/line/line-chart-interrupted-calculated/line-chart-interrupted-calculated-example.component.ts",\n    "chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.html",\n    "chart-types/line/line-chart-interrupted-path-terminus/line-chart-interrupted-path-terminus-example.component.ts",\n    "chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.html",\n    "chart-types/line/line-chart-stacked-test/line-chart-stacked-test.component.ts",\n    "chart-types/line/line-chart-test/line-chart-test.component.html",\n    "chart-types/line/line-chart-test/line-chart-test.component.ts",\n    "chart-types/line/line-chart-visual-test/line-chart-visual-test.component.html",\n    "chart-types/line/line-chart-visual-test/line-chart-visual-test.component.ts",\n    "chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.html",\n    "chart-types/line/line-chart-with-2y-axes/line-chart-with-2y-axes-example.component.ts",\n    "chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.html",\n    "chart-types/line/line-chart-with-axis-labels/line-chart-with-axis-labels.example.component.ts",\n    "chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.html",\n    "chart-types/line/line-chart-with-large-values/line-chart-with-large-values.example.component.ts",\n    "chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.html",\n    "chart-types/line/line-chart-with-legend/line-chart-with-legend.example.component.ts",\n    "chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.html",\n    "chart-types/line/line-chart-with-rich-tile-legend/line-chart-with-rich-tile-legend.example.component.ts",\n    "chart-types/pie-and-donut/chart-docs-pie-and-donut.component.html",\n    "chart-types/pie-and-donut/chart-docs-pie-and-donut.component.ts",\n    "chart-types/pie-and-donut/chart-docs-pie-and-donut.module.ts",\n    "chart-types/pie-and-donut/donut-chart/donut-chart.example.component.html",\n    "chart-types/pie-and-donut/donut-chart/donut-chart.example.component.ts",\n    "chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.html",\n    "chart-types/pie-and-donut/donut-chart-interactive/donut-chart-interactive.example.component.ts",\n    "chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.html",\n    "chart-types/pie-and-donut/donut-chart-test/donut-chart-test.component.ts",\n    "chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.html",\n    "chart-types/pie-and-donut/donut-chart-with-content/donut-chart-with-content.example.component.ts",\n    "chart-types/pie-and-donut/pie-chart/pie-chart.example.component.html",\n    "chart-types/pie-and-donut/pie-chart/pie-chart.example.component.ts",\n    "chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.html",\n    "chart-types/pie-and-donut/pie-chart-test/pie-chart-test.component.ts",\n    "chart-types/spark/chart-docs-spark.component.html",\n    "chart-types/spark/chart-docs-spark.component.ts",\n    "chart-types/spark/chart-docs-spark.module.ts",\n    "chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.html",\n    "chart-types/spark/spark-chart-area-multiple/spark-chart-area-multiple.example.component.ts",\n    "chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.html",\n    "chart-types/spark/spark-chart-basic/spark-chart-basic.example.component.ts",\n    "chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.html",\n    "chart-types/spark/spark-chart-legend/spark-chart-legend.example.component.ts",\n    "chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.html",\n    "chart-types/spark/spark-chart-multiple/spark-chart-multiple.example.component.ts",\n    "chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.html",\n    "chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.less",\n    "chart-types/spark/spark-chart-stroke-test/area-spark-minimal-test.component.ts",\n    "chart-types/spark/spark-chart-table/spark-chart-table.example.component.html",\n    "chart-types/spark/spark-chart-table/spark-chart-table.example.component.ts",\n    "chart-types/spark/spark-chart-test/spark-chart-test.component.html",\n    "chart-types/spark/spark-chart-test/spark-chart-test.component.ts",\n    "chart-types/status/chart-docs-status.component.html",\n    "chart-types/status/chart-docs-status.component.ts",\n    "chart-types/status/chart-docs-status.module.ts",\n    "chart-types/status/status-chart/status-chart.example.component.html",\n    "chart-types/status/status-chart/status-chart.example.component.ts",\n    "chart-types/status/status-legend-chart/status-legend-chart.example.component.html",\n    "chart-types/status/status-legend-chart/status-legend-chart.example.component.less",\n    "chart-types/status/status-legend-chart/status-legend-chart.example.component.ts",\n    "chart-types/status/status-test/status-chart-test.component.html",\n    "chart-types/status/status-test/status-chart-test.component.ts",\n    "chart-types/waterfall/chart-docs-waterfall.component.html",\n    "chart-types/waterfall/chart-docs-waterfall.component.ts",\n    "chart-types/waterfall/chart-docs-waterfall.module.ts",\n    "chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.html",\n    "chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.less",\n    "chart-types/waterfall/waterfall-advanced-charts/waterfall-chart-advanced.example.component.ts",\n    "chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.html",\n    "chart-types/waterfall/waterfall-chart-simple/waterfall-chart-simple.example.component.ts",\n    "chart-types/waterfall/waterfall-test/waterfall-chart-test.component.html",\n    "chart-types/waterfall/waterfall-test/waterfall-chart-test.component.ts",\n    "common/charts-test-harness.component.html",\n    "common/charts-test-harness.component.ts",\n    "common/demo-common.module.ts",\n    "demo.files.ts",\n    "development/bar/bar-prototype.module.ts",\n    "development/bar/stacked-bar/stacked-bar-prototype.component.html",\n    "development/bar/stacked-bar/stacked-bar-prototype.component.ts",\n    "development/chart-collection/chart-collection-example.module.ts",\n    "development/chart-collection/chart-collection-test/chart-collection-test.component.html",\n    "development/chart-collection/chart-collection-test/chart-collection-test.component.ts",\n    "development/charts-development.module.ts",\n    "development/core/chart/chart.example.component.html",\n    "development/core/chart/chart.example.component.less",\n    "development/core/chart/chart.example.component.ts",\n    "development/core/core-example.module.ts",\n    "development/core/domain/chart-domain.example.component.html",\n    "development/core/domain/chart-domain.example.component.ts",\n    "development/core/event-bus/chart-event-bus-test.component.html",\n    "development/core/event-bus/chart-event-bus-test.component.ts",\n    "development/core/markers/chart-markers.example.component.html",\n    "development/core/markers/chart-markers.example.component.ts",\n    "development/data-point-selection/data-point-selection-prototype.component.html",\n    "development/data-point-selection/data-point-selection-prototype.component.less",\n    "development/data-point-selection/data-point-selection-prototype.component.ts",\n    "development/data-point-selection/data-point-selection-prototype.module.ts",\n    "development/gauge/donut/donut-gauge-prototype.component.html",\n    "development/gauge/donut/donut-gauge-prototype.component.less",\n    "development/gauge/donut/donut-gauge-prototype.component.ts",\n    "development/gauge/gauge-prototypes.module.ts",\n    "development/gauge/gauge-test-page.component.html",\n    "development/gauge/gauge-test-page.component.less",\n    "development/gauge/gauge-test-page.component.ts",\n    "development/gauge/horizontal/linear-gauge-horizontal-prototype.component.html",\n    "development/gauge/horizontal/linear-gauge-horizontal-prototype.component.less",\n    "development/gauge/horizontal/linear-gauge-horizontal-prototype.component.ts",\n    "development/gauge/vertical/linear-gauge-vertical-prototype.component.html",\n    "development/gauge/vertical/linear-gauge-vertical-prototype.component.less",\n    "development/gauge/vertical/linear-gauge-vertical-prototype.component.ts",\n    "development/pie-chart/pie-chart-example.module.ts",\n    "development/pie-chart/pie-chart-test/pie-chart.example.component.html",\n    "development/pie-chart/pie-chart-test/pie-chart.example.component.ts",\n    "development/popovers/data-point/data-point-popovers-prototype.component.html",\n    "development/popovers/data-point/data-point-popovers-prototype.component.ts",\n    "development/popovers/line-chart/line-chart-popover-prototype.component.html",\n    "development/popovers/line-chart/line-chart-popover-prototype.component.ts",\n    "development/popovers/line-chart/popover-performance-test.component.html",\n    "development/popovers/line-chart/popover-performance-test.component.less",\n    "development/popovers/line-chart/popover-performance-test.component.ts",\n    "development/popovers/popovers-prototype.module.ts",\n    "development/spark/spark-prototype/spark-prototype.component.html",\n    "development/spark/spark-prototype/spark-prototype.component.less",\n    "development/spark/spark-prototype/spark-prototype.component.ts",\n    "development/spark/spark-prototype.module.ts",\n    "development/status/chart-status-example.module.ts",\n    "development/status/status-test/chart-status-test.component.html",\n    "development/status/status-test/chart-status-test.component.ts",\n    "development/status/waterfall-simple/chart-waterfall-simple.component.html",\n    "development/status/waterfall-simple/chart-waterfall-simple.component.ts",\n    "development/status/waterfall-test/chart-waterfall-test.component.html",\n    "development/status/waterfall-test/chart-waterfall-test.component.less",\n    "development/status/waterfall-test/chart-waterfall-test.component.ts",\n    "development/thresholds/thresholds-prototype.component.html",\n    "development/thresholds/thresholds-prototype.component.ts",\n    "development/thresholds/thresholds-prototype.module.ts",\n    "development/time-bands/line-time-series/line-time-series-test.component.html",\n    "development/time-bands/line-time-series/line-time-series-test.component.ts",\n    "development/time-bands/time-bands-example.module.ts",\n    "development/tooltips/line-chart/line-chart-tooltips-prototype.component.html",\n    "development/tooltips/line-chart/line-chart-tooltips-prototype.component.ts",\n    "development/tooltips/line-chart/tooltips-performance-test.component.html",\n    "development/tooltips/line-chart/tooltips-performance-test.component.less",\n    "development/tooltips/line-chart/tooltips-performance-test.component.ts",\n    "development/tooltips/tooltips-prototype.module.ts",\n    "development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.html",\n    "development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.ts",\n    "development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.html",\n    "development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.ts",\n    "development/type-switch/type-switch-example.module.ts",\n    "layout/chart-docs-layout.component.html",\n    "layout/chart-docs-layout.component.less",\n    "layout/chart-docs-layout.component.ts",\n    "layout/chart-docs-layout.module.ts",\n    "plugins/chart-docs-plugins.module.ts",\n    "plugins/popovers/bar-chart/bar-chart-with-popover.example.component.html",\n    "plugins/popovers/bar-chart/bar-chart-with-popover.example.component.ts",\n    "plugins/popovers/chart-docs-popovers.component.html",\n    "plugins/popovers/chart-docs-popovers.component.ts",\n    "plugins/popovers/chart-docs-popovers.module.ts",\n    "plugins/popovers/donut-chart/donut-chart-with-popover.example.component.html",\n    "plugins/popovers/donut-chart/donut-chart-with-popover.example.component.ts",\n    "plugins/popovers/line-chart/line-chart-with-popover.example.component.html",\n    "plugins/popovers/line-chart/line-chart-with-popover.example.component.ts",\n    "plugins/popovers/popover-visual-test/popover-visual-test.component.html",\n    "plugins/popovers/popover-visual-test/popover-visual-test.component.ts",\n    "plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.html",\n    "plugins/tooltips/bar-chart/bar-chart-with-tooltips.example.component.ts",\n    "plugins/tooltips/chart-docs-tooltips.component.html",\n    "plugins/tooltips/chart-docs-tooltips.component.ts",\n    "plugins/tooltips/chart-docs-tooltips.module.ts",\n    "plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.html",\n    "plugins/tooltips/donut-chart/donut-chart-with-tooltips.example.component.ts",\n    "plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.html",\n    "plugins/tooltips/line-chart/line-chart-with-tooltips.example.component.ts",\n    "plugins/tooltips/visual-test/tooltips-visual-test.component.html",\n    "plugins/tooltips/visual-test/tooltips-visual-test.component.less",\n    "plugins/tooltips/visual-test/tooltips-visual-test.component.ts",\n    "thresholds/chart-docs-thresholds.component.html",\n    "thresholds/chart-docs-thresholds.component.ts",\n    "thresholds/chart-docs-thresholds.module.ts",\n    "thresholds/thresholds-basic/thresholds-basic.example.component.html",\n    "thresholds/thresholds-basic/thresholds-basic.example.component.ts",\n    "thresholds/thresholds-spark/thresholds-spark.example.component.html",\n    "thresholds/thresholds-spark/thresholds-spark.example.component.ts",\n    "thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.html",\n    "thresholds/thresholds-summary/thresholds-summary-example/thresholds-summary.example.component.ts",\n    "thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.html",\n    "thresholds/thresholds-summary/thresholds-summary-test/thresholds-summary-test.component.ts",\n    "thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.html",\n    "thresholds/thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component.ts",\n    "thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.html",\n    "thresholds/thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component.ts",\n    "thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.html",\n    "thresholds/thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component.ts",\n    "time-frame-bar/chart-docs-time-frame-bar.component.html",\n    "time-frame-bar/chart-docs-time-frame-bar.component.ts",\n    "time-frame-bar/chart-docs-time-frame-bar.module.ts",\n    "time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.html",\n    "time-frame-bar/time-frame-bar-basic/time-frame-bar-basic.example.component.ts",\n    "time-frame-bar/time-frame-bar-test/time-frame-bar-data.service.ts",\n    "time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.html",\n    "time-frame-bar/time-frame-bar-test/time-frame-bar-test.component.ts",\n];\n'},38449:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDividerModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { StackedBarPrototypeComponent } from "./stacked-bar/stacked-bar-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "stacked-bar",\n        component: StackedBarPrototypeComponent,\n    },\n];\n\n@NgModule({\n    declarations: [StackedBarPrototypeComponent],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiDividerModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport default class BarPrototypeModule {}\n'},65277:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Network Traffic, Mbps</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend-bottom">\n        <nui-legend\n            [interactive]="true"\n            orientation="horizontal"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n            class="flex-wrap"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.id"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-basic-legend-tile>\n                    <nui-chart-marker\n                        [drawLine]="false"\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-basic-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.value }}</span>\n    </div>\n</ng-template>\n'},65751:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n// eslint-disable-next-line no-restricted-imports\nimport moment, { duration } from "moment";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n    LinearScale,\n    stack,\n    TimeIntervalScale,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "stacked-bar-prototype",\n    templateUrl: "./stacked-bar-prototype.component.html",\n})\nexport class StackedBarPrototypeComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public tooltipsPlugin = new BarTooltipsPlugin();\n\n    public ngOnInit(): void {\n        const chart = new Chart(barGrid());\n\n        // We\'re manually adding Interaction Label plugin (without Interaction Line plugin) to have only label\n        chart.addPlugin(new InteractionLabelPlugin());\n        chart.addPlugin(this.tooltipsPlugin);\n\n        // "stack" is a function that calls data preprocessor for recalculating stacks\n        this.chartAssist = new ChartAssist(chart, stack);\n\n        const accessors = barAccessors();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        // const scales = barScales();\n        const scales = {\n            y: new LinearScale(),\n            x: new TimeIntervalScale(duration(1, "day")),\n        };\n\n        accessors.data.value = (data: any) => data.value;\n        accessors.data.category = (data: any) =>\n            moment(data.time, "YYYY-MM-DD HH:mm:ss").toDate();\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "TAMA:1433",\n\n            data: [\n                {\n                    time: "2020-08-29T00:00:00.000-05:00",\n                    value: 16.216666666666665,\n                },\n                {\n                    time: "2020-08-30T00:00:00.000-05:00",\n                    value: 14.633333333333333,\n                },\n                {\n                    time: "2020-08-31T00:00:00.000-05:00",\n                    value: 13.816666666666666,\n                },\n                {\n                    time: "2020-09-01T00:00:00.000-05:00",\n                    value: 9.883333333333333,\n                },\n                {\n                    time: "2020-09-02T00:00:00.000-05:00",\n                    value: 2.0166666666666666,\n                },\n                {\n                    time: "2020-09-03T00:00:00.000-05:00",\n                    value: 8.633333333333333,\n                },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 9.716666666666667,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 13.183333333333334,\n                },\n                {\n                    time: "2020-09-06T00:00:00.000-05:00",\n                    value: 13.216666666666667,\n                },\n                {\n                    time: "2020-09-07T00:00:00.000-05:00",\n                    value: 12.566666666666666,\n                },\n                {\n                    time: "2020-09-08T00:00:00.000-05:00",\n                    value: 12.483333333333333,\n                },\n                {\n                    time: "2020-09-09T00:00:00.000-05:00",\n                    value: 12.633333333333333,\n                },\n                {\n                    time: "2020-09-10T00:00:00.000-05:00",\n                    value: 10.85,\n                },\n                {\n                    time: "2020-09-11T00:00:00.000-05:00",\n                    value: 7.716666666666667,\n                },\n            ],\n        },\n        {\n            id: "DPAPOST114EDBOR.IGNITE.LOCAL:5444",\n            data: [\n                //     {\n                //     "time": "2020-08-29T00:00:00.000-05:00",\n                //     "value": 5.1,\n                // }, {\n                //     "time": "2020-08-30T00:00:00.000-05:00",\n                //     "value": 1.6333333333333333,\n                // }, {\n                //     "time": "2020-08-31T00:00:00.000-05:00",\n                //     "value": 14.633333333333333,\n                // },\n                {\n                    time: "2020-09-01T00:00:00.000-05:00",\n                    value: 15.983333333333333,\n                },\n                {\n                    time: "2020-09-02T00:00:00.000-05:00",\n                    value: 3.95,\n                },\n                {\n                    time: "2020-09-03T00:00:00.000-05:00",\n                    value: 3.033333333333333,\n                },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 5.233333333333333,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 1.6666666666666667,\n                },\n                {\n                    time: "2020-09-06T00:00:00.000-05:00",\n                    value: 3.4166666666666665,\n                },\n                {\n                    time: "2020-09-07T00:00:00.000-05:00",\n                    value: 1.1166666666666667,\n                },\n                {\n                    time: "2020-09-08T00:00:00.000-05:00",\n                    value: 1.25,\n                },\n                {\n                    time: "2020-09-09T00:00:00.000-05:00",\n                    value: 5.5,\n                },\n                // {\n                //     "time": "2020-09-10T00:00:00.000-05:00",\n                //     "value": 1.35,\n                // }, {\n                //     "time": "2020-09-11T00:00:00.000-05:00",\n                //     "value": 9.75,\n                // },\n            ],\n        },\n        {\n            id: "ORCL_DPAORA11ASM",\n            data: [\n                {\n                    time: "2020-08-29T00:00:00.000-05:00",\n                    value: 2.15,\n                },\n                {\n                    time: "2020-08-30T00:00:00.000-05:00",\n                    value: 2.4,\n                },\n                {\n                    time: "2020-08-31T00:00:00.000-05:00",\n                    value: 6.666666666666667,\n                },\n                {\n                    time: "2020-09-01T00:00:00.000-05:00",\n                    value: 4.866666666666666,\n                },\n                {\n                    time: "2020-09-02T00:00:00.000-05:00",\n                    value: 0.21666666666666667,\n                },\n                {\n                    time: "2020-09-03T00:00:00.000-05:00",\n                    value: 0.65,\n                },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 0.6333333333333333,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 2,\n                },\n                {\n                    time: "2020-09-06T00:00:00.000-05:00",\n                    value: 1.7333333333333334,\n                },\n                {\n                    time: "2020-09-07T00:00:00.000-05:00",\n                    value: 3.2333333333333334,\n                },\n                {\n                    time: "2020-09-08T00:00:00.000-05:00",\n                    value: 2.95,\n                },\n                {\n                    time: "2020-09-09T00:00:00.000-05:00",\n                    value: 2,\n                },\n                {\n                    time: "2020-09-10T00:00:00.000-05:00",\n                    value: 1.7,\n                },\n                {\n                    time: "2020-09-11T00:00:00.000-05:00",\n                    value: 1.4833333333333334,\n                },\n            ],\n        },\n        {\n            id: "LUDWIG",\n            data: [\n                {\n                    time: "2020-08-29T00:00:00.000-05:00",\n                    value: 2.05,\n                },\n                {\n                    time: "2020-08-30T00:00:00.000-05:00",\n                    value: 2.1666666666666665,\n                },\n                {\n                    time: "2020-08-31T00:00:00.000-05:00",\n                    value: 2.1166666666666667,\n                },\n                {\n                    time: "2020-09-01T00:00:00.000-05:00",\n                    value: 1.3166666666666667,\n                },\n                {\n                    time: "2020-09-02T00:00:00.000-05:00",\n                    value: 0.4,\n                },\n                {\n                    time: "2020-09-03T00:00:00.000-05:00",\n                    value: 1.2833333333333334,\n                },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 1.4,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 2.1166666666666667,\n                },\n                {\n                    time: "2020-09-06T00:00:00.000-05:00",\n                    value: 2.0166666666666666,\n                },\n                {\n                    time: "2020-09-07T00:00:00.000-05:00",\n                    value: 2.15,\n                },\n                {\n                    time: "2020-09-08T00:00:00.000-05:00",\n                    value: 1.95,\n                },\n                {\n                    time: "2020-09-09T00:00:00.000-05:00",\n                    value: 1.8833333333333333,\n                },\n                {\n                    time: "2020-09-10T00:00:00.000-05:00",\n                    value: 1.7166666666666666,\n                },\n                {\n                    time: "2020-09-11T00:00:00.000-05:00",\n                    value: 1,\n                },\n            ],\n        },\n        {\n            id: "LUDWIG-TWO",\n            data: [\n                {\n                    time: "2020-08-29T00:00:00.000-05:00",\n                    value: 2.5,\n                },\n                {\n                    time: "2020-08-30T00:00:00.000-05:00",\n                    value: 2.266666666666666,\n                },\n                // {\n                //     "time": "2020-08-31T00:00:00.000-05:00",\n                //     "value": 2.7166666666666667,\n                // }, {\n                //     "time": "2020-09-01T00:00:00.000-05:00",\n                //     "value": 2.3166666666666667,\n                // }, {\n                //     "time": "2020-09-02T00:00:00.000-05:00",\n                //     "value": 1.4,\n                // }, {\n                //     "time": "2020-09-03T00:00:00.000-05:00",\n                //     "value": 1.2833333333333334,\n                // },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 1.001,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 2.216666666666666,\n                },\n                {\n                    time: "2020-09-06T00:00:00.000-05:00",\n                    value: 2.416666666666666,\n                },\n                {\n                    time: "2020-09-07T00:00:00.000-05:00",\n                    value: 2.45,\n                },\n                {\n                    time: "2020-09-08T00:00:00.000-05:00",\n                    value: 1.45,\n                },\n                {\n                    time: "2020-09-09T00:00:00.000-05:00",\n                    value: 1.983333333333333,\n                },\n                {\n                    time: "2020-09-10T00:00:00.000-05:00",\n                    value: 1.616666666666666,\n                },\n                {\n                    time: "2020-09-11T00:00:00.000-05:00",\n                    value: 1.9,\n                },\n            ],\n        },\n        {\n            id: "DPAORA10_DPAORA10",\n            data: [\n                {\n                    time: "2020-08-29T00:00:00.000-05:00",\n                    value: 2.55,\n                },\n                {\n                    time: "2020-08-30T00:00:00.000-05:00",\n                    value: 2.6333333333333333,\n                },\n                {\n                    time: "2020-08-31T00:00:00.000-05:00",\n                    value: 2.8666666666666667,\n                },\n                {\n                    time: "2020-09-01T00:00:00.000-05:00",\n                    value: 1.1,\n                },\n                {\n                    time: "2020-09-02T00:00:00.000-05:00",\n                    value: 0.38333333333333336,\n                },\n                {\n                    time: "2020-09-03T00:00:00.000-05:00",\n                    value: 0.8,\n                },\n                {\n                    time: "2020-09-04T00:00:00.000-05:00",\n                    value: 1.1333333333333333,\n                },\n                {\n                    time: "2020-09-05T00:00:00.000-05:00",\n                    value: 1.0833333333333333,\n                },\n            ],\n        },\n    ];\n}\n'},1968:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDividerModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartCollectionTestComponent } from "./chart-collection-test/chart-collection-test.component";\n\nconst collectionRoutes: Routes = [\n    {\n        path: "",\n        component: ChartCollectionTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [ChartCollectionTestComponent],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiDividerModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n})\nexport default class ChartCollectionExampleModule {}\n'},4334:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div [style.min-height]="150" *ngFor="let myChart of myCharts; let i = index">\n    <div class="d-flex w-100 h-100">\n        <nui-chart\n            class="w-100"\n            nuiChartCollectionId="1"\n            [chart]="myChart.chart"\n        ></nui-chart>\n    </div>\n    <nui-divider *ngIf="myCharts.length - 1 > i"></nui-divider>\n</div>\n'},39152:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n    QueryList,\n    ViewChildren,\n} from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartComponent,\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    Scales,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\ninterface IMyChart {\n    chart: IChart;\n    chartAssist: ChartAssist;\n    scales: Scales;\n    renderer: LineRenderer;\n    accessors: LineAccessors;\n}\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-collection-test",\n    templateUrl: "./chart-collection-test.component.html",\n})\nexport class ChartCollectionTestComponent implements OnInit, AfterViewInit {\n    @ViewChildren(ChartComponent) charts: QueryList<ChartComponent>;\n\n    public myCharts: IMyChart[] = [];\n    private chartCount = 2;\n\n    constructor(private changeDetection: ChangeDetectorRef) {\n        for (let i = 0; i < this.chartCount; i++) {\n            const chart = new Chart(new XYGrid());\n\n            const myChart = {\n                chart,\n                chartAssist: new ChartAssist(chart),\n                scales: { x: new TimeScale("x"), y: new LinearScale() },\n                renderer: new LineRenderer(),\n                accessors: new LineAccessors(),\n            };\n            this.myCharts.push(myChart);\n        }\n    }\n\n    public ngOnInit(): void {}\n\n    public ngAfterViewInit(): void {\n        this.myCharts.forEach((myChart, index: number) => {\n            myChart.chartAssist.update(\n                this.generateChartAssistSeriesSet(myChart, 4, index)\n            );\n        });\n        this.changeDetection.detectChanges();\n    }\n\n    private generateChartAssistSeriesSet(\n        myChart: IMyChart,\n        dataSeriesCount: number,\n        index: number\n    ): IChartAssistSeries<IAccessors>[] {\n        const timeLineSeriesSet = this.generateDataSeriesSet(\n            dataSeriesCount,\n            index\n        );\n\n        return timeLineSeriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            scales: myChart.scales,\n            renderer: myChart.renderer,\n            accessors: myChart.accessors,\n            showInLegend: true,\n        }));\n    }\n\n    private generateDataSeriesSet(dataSeriesCount: number, chartIndex: number) {\n        const chartNumber = chartIndex + 1;\n        return Array.from(Array(dataSeriesCount).keys()).map((i) => {\n            const seriesNumber = i + 1;\n            return {\n                id: `series-${chartNumber}-${seriesNumber}`,\n                name: `Series ${chartNumber}-${seriesNumber}`,\n                data: DataGenerator.mockTimeLineData(seriesNumber * 10),\n            };\n        });\n    }\n}\n'},50026:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nconst chartsRoutes: Routes = [\n    {\n        path: "core",\n        loadChildren: async () =>\n            import("./core/core-example.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "pie",\n        loadChildren: async () =>\n            import("./pie-chart/pie-chart-example.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "bar",\n        loadChildren: async () =>\n            import("./bar/bar-prototype.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "collection",\n        loadChildren: async () =>\n            import(\n                "./chart-collection/chart-collection-example.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "popovers",\n        loadChildren: async () =>\n            import("./popovers/popovers-prototype.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "tooltips",\n        loadChildren: async () =>\n            import("./tooltips/tooltips-prototype.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "spark",\n        loadChildren: async () =>\n            import("./spark/spark-prototype.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "gauge",\n        loadChildren: async () =>\n            import("./gauge/gauge-prototypes.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "type-switch",\n        loadChildren: async () =>\n            import(\n                "./type-switch/type-switch-example.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "status",\n        loadChildren: async () =>\n            import("./status/chart-status-example.module") as object as Promise<\n                Type<any>\n            >,\n    },\n    {\n        path: "time-bands",\n        loadChildren: async () =>\n            import(\n                "./time-bands/time-bands-example.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "data-point-selection",\n        loadChildren: async () =>\n            import(\n                "./data-point-selection/data-point-selection-prototype.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "thresholds",\n        loadChildren: async () =>\n            import(\n                "./thresholds/thresholds-prototype.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(chartsRoutes)],\n})\nexport default class ChartsDevelopmentModule {}\n'},31874:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div>\n    <button nui-button (click)="update()" type="button">Refresh</button>\n    <button nui-button (click)="compact = !compact" type="button">\n        Compact\n    </button>\n</div>\n<hr />\n<div class="nui-chart-layout">\n    <div class="chart" [style.min-height]="compact ? \'150px\' : \'500px\'">\n        <nui-chart class="w-100" [chart]="statusChart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="Mbps"\n            [active]="statusChartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="statusChartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of statusChartAssist.legendSeriesSet;\n                    trackBy: statusChartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                [seriesRenderState]="\n                    statusChartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="\n                    statusChartAssist.emphasizeSeries(legendSeries.id)\n                "\n                [isSelected]="\n                    !statusChartAssist.isSeriesHidden(legendSeries.id)\n                "\n                (isSelectedChange)="\n                    statusChartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [backgroundColor]="\n                        statusPalette.backgroundColors.get(\n                            statusChartAssist.getHighlightedValue(\n                                legendSeries,\n                                \'y\'\n                            )\n                        )\n                    "\n                >\n                    <div\n                        class="tilebox__value"\n                        [class.tilebox__value--emphasized]="\n                            isStatusSignificant(\n                                statusChartAssist.getHighlightedValue(\n                                    legendSeries,\n                                    \'y\'\n                                )\n                            )\n                        "\n                        top\n                    >\n                        {{\n                            statusChartAssist.getHighlightedValue(\n                                legendSeries,\n                                "y"\n                            )\n                        }}\n                    </div>\n                    <nui-icon\n                        iconSize="small"\n                        [icon]="\n                            \'status_\' +\n                            statusChartAssist.getHighlightedValue(\n                                legendSeries,\n                                \'y\'\n                            )\n                        "\n                        leftEdge\n                    ></nui-icon>\n                    <nui-chart-marker\n                        [marker]="\n                            statusChartAssist.markers.get(legendSeries.id)\n                        "\n                        [color]="\n                            statusChartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                        rightEdge\n                    ></nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},31325:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.tilebox__value {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    padding-bottom: @nui-space-xxs;\n    margin-bottom: -@nui-space-xxs;\n    font-size: @nui-font-size-small;\n\n    :not(&--emphasized) {\n        font-weight: @nui-font-weight-regular;\n    }\n}\n'},60147:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IChartAssistSeries,\n    ILineAccessors,\n    INTERACTION_SERIES_EVENT,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    LineSelectSeriesInteractionStrategy,\n    MappedValueProvider,\n    PointScale,\n    Scales,\n    XYGrid,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\nimport { isEvenIndex } from "../../../../utility/isEvenIndex";\n\n/** @ignore */\nconst statuses = ["down", "critical", "warning", "unknown", "up"];\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-example",\n    templateUrl: "./chart.example.component.html",\n    styleUrls: ["./chart.example.component.less"],\n})\nexport class ChartExampleComponent implements OnInit {\n    public compact = true;\n    public statusChart = new Chart(new XYGrid());\n    public statusChartAssist: ChartAssist = new ChartAssist(this.statusChart);\n\n    private statusLineRenderer: LineRenderer;\n    private statusScales: Scales;\n\n    public statusPalette = new ChartPalette(\n        new MappedValueProvider<string>(\n            zipObject(statuses, CHART_PALETTE_CS_S_EXTENDED.filter(isEvenIndex))\n        )\n    );\n\n    public ngOnInit(): void {\n        // status chart setup\n        this.statusLineRenderer = new LineRenderer({\n            interactionStrategy: new LineSelectSeriesInteractionStrategy(),\n        });\n\n        const xScale = new LinearScale();\n\n        this.statusScales = {\n            x: xScale,\n            y: new PointScale().padding(0.5),\n        };\n\n        this.statusScales.y.domain(statuses);\n        this.statusScales.y.domainCalculator = undefined;\n        this.statusScales.x.formatters.tick = (value: any) =>\n            Math.round(value).toString();\n\n        this.statusChart\n            .getEventBus()\n            .getStream(INTERACTION_SERIES_EVENT)\n            .subscribe(console.log);\n\n        this.update();\n    }\n\n    public update(): void {\n        this.statusChartAssist.update(\n            this.generateStatusSeriesSet(Math.floor(Math.random() * 5 + 1))\n        );\n    }\n\n    public isStatusSignificant(highlightedValue: string): boolean {\n        return highlightedValue !== "unknown" && highlightedValue !== "up";\n    }\n\n    private generateStatusSeriesSet(\n        dataSeriesCount: number\n    ): IChartAssistSeries<ILineAccessors>[] {\n        const statusSeriesSet = DataGenerator.generateMockStatusSeriesSet(\n            dataSeriesCount,\n            20,\n            statuses\n        );\n        const accessors = new LineAccessors(\n            this.statusChartAssist.palette.standardColors\n        );\n\n        return statusSeriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            scales: this.statusScales,\n            renderer: this.statusLineRenderer,\n            accessors,\n            showInLegend: true,\n        }));\n    }\n}\n'},4726:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Provider } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    LoggerService,\n    LogLevel,\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiDocsModule,\n    NuiEnvironment,\n    NuiIconModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartExampleComponent } from "./chart/chart.example.component";\nimport { ChartDomainExampleComponent } from "./domain/chart-domain.example.component";\nimport { ChartEventBusTestComponent } from "./event-bus/chart-event-bus-test.component";\nimport { ChartMarkersExampleComponent } from "./markers/chart-markers.example.component";\n\nconst coreRoutes: Routes = [\n    {\n        path: "chart",\n        component: ChartExampleComponent,\n    },\n    {\n        path: "domain",\n        component: ChartDomainExampleComponent,\n    },\n    {\n        path: "markers",\n        component: ChartMarkersExampleComponent,\n    },\n    {\n        path: "event-bus",\n        component: ChartEventBusTestComponent,\n    },\n];\n\nconst environment = new NuiEnvironment();\nenvironment.logLevel = LogLevel.debug;\n\n@NgModule({\n    declarations: [\n        ChartExampleComponent,\n        ChartDomainExampleComponent,\n        ChartEventBusTestComponent,\n        ChartMarkersExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiSwitchModule,\n        RouterModule.forChild(coreRoutes),\n    ],\n    providers: [\n        {\n            provide: LoggerService,\n            useValue: new LoggerService(environment),\n        } as Provider,\n    ],\n})\nexport default class CoreExampleModule {}\n'},59451:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h2>Automatic Y domain</h2>\n<div height="150px" class="d-flex flex-column">\n    <nui-chart\n        class="w-100"\n        nuiChartCollectionId="1"\n        [chart]="charts[0]"\n    ></nui-chart>\n</div>\n\n<h2>Automatic Y domain with inclusion of &lt;-40, 160&gt; interval</h2>\n<div height="150px" class="d-flex flex-column">\n    <nui-chart\n        class="w-100"\n        nuiChartCollectionId="1"\n        [chart]="charts[1]"\n    ></nui-chart>\n</div>\n\n<h2>Automatic Y domain with inclusion of the 0 value</h2>\n<div height="150px" class="d-flex flex-column">\n    <nui-chart\n        class="w-100"\n        nuiChartCollectionId="1"\n        [chart]="charts[2]"\n    ></nui-chart>\n</div>\n\n<div>\n    <button nui-button (click)="refresh()" type="button">Refresh</button>\n    <button nui-button (click)="fixDomain()" type="button">Fix X domain</button>\n    <button nui-button (click)="resetDomain()" type="button">\n        Reset X domain\n    </button>\n</div>\n'},12154:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n    QueryList,\n    ViewChildren,\n} from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartComponent,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    IDataSeries,\n    IScale,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    Scales,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-domain-example",\n    templateUrl: "./chart-domain.example.component.html",\n})\nexport class ChartDomainExampleComponent implements OnInit, AfterViewInit {\n    @ViewChildren(ChartComponent) chartComponents: QueryList<ChartComponent>;\n\n    public dataRenderer: LineRenderer;\n    public xScale: IScale<Date> = new TimeScale();\n    public scales: Scales[] = [];\n\n    public charts: IChart[] = [];\n\n    public chartAssists: ChartAssist[] = [];\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        const numCharts = 3;\n        for (let i = 0; i < numCharts; ++i) {\n            this.scales.push({\n                x: this.xScale,\n                y: new LinearScale(),\n            });\n            this.charts.push(new Chart(new XYGrid()));\n        }\n\n        // this.scales[0].y.domainCalculation = getAutomaticDomain; // Default\n        this.scales[1].y.domainCalculator =\n            getAutomaticDomainWithIncludedInterval([-40, 160]);\n        this.scales[2].y.domainCalculator =\n            getAutomaticDomainWithIncludedInterval([0, 0]);\n\n        this.dataRenderer = new LineRenderer();\n    }\n\n    public ngAfterViewInit(): void {\n        const timeLineSeriesSet: any[] =\n            DataGenerator.generateMockTimeLineSeriesSet(2, 40);\n\n        this.chartComponents.forEach((chart: ChartComponent, index: number) => {\n            this.chartAssists.push(new ChartAssist(this.charts[index]));\n            this.chartAssists[index].update(\n                this.generateChartAssistSeriesSet(timeLineSeriesSet, index)\n            );\n        });\n        this.changeDetector.detectChanges();\n    }\n\n    private generateChartAssistSeriesSet(\n        dataSeriesSet: IDataSeries<IAccessors>[],\n        chartIndex: number\n    ): IChartAssistSeries<IAccessors>[] {\n        const accessors = new LineAccessors();\n        return dataSeriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            scales: this.scales[chartIndex],\n            renderer: this.dataRenderer,\n            accessors,\n            showInLegend: true,\n        }));\n    }\n\n    public fixDomain(): void {\n        const startDatetime = new Date("2017-02-15T16:00:00Z");\n        const endDatetime = new Date("2017-02-15T16:14:29.909Z");\n\n        this.xScale.fixDomain([startDatetime, endDatetime]);\n        this.chartAssists.forEach((chartAssist) => {\n            chartAssist.update(chartAssist.inputSeriesSet);\n        });\n    }\n\n    public resetDomain(): void {\n        this.xScale.isDomainFixed = false;\n        this.chartAssists.forEach((chartAssist) => {\n            chartAssist.update(chartAssist.inputSeriesSet);\n        });\n    }\n\n    public refresh(): void {\n        const seriesSet: any[] = DataGenerator.generateMockTimeLineSeriesSet(\n            Math.floor(Math.random() * 6),\n            40\n        );\n        this.chartAssists.forEach(\n            (chartAssist: ChartAssist, chartIndex: number) => {\n                chartAssist.update(\n                    this.generateChartAssistSeriesSet(seriesSet, chartIndex)\n                );\n            }\n        );\n    }\n}\n'},808:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div [style.min-height]="150">\n    <div class="d-flex h-100">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n</div>\n<hr />\n<div class="btn-group">\n    <button type="button" nui-button (click)="selectAllFilters()">\n        Select All\n    </button>\n    <button type="button" nui-button (click)="deselectAllFilters()">\n        Deselect All\n    </button>\n    <button type="button" nui-button (click)="parsedEvents = []">\n        Clear Log\n    </button>\n</div>\n<h1>Events</h1>\n<div class="mx-3">\n    <nui-checkbox-group\n        class="nui-checkbox-group-inline"\n        name="eventFilter"\n        [values]="selectedEventFilters"\n        (valuesChange)="onEventFilterChange($event)"\n    >\n        <nui-checkbox\n            *ngFor="let filter of eventFilters"\n            [value]="filter"\n            [checked]="isEventFilterChecked(filter)"\n        >\n            {{ filter }}\n        </nui-checkbox>\n    </nui-checkbox-group>\n</div>\n<h1>Interaction Types</h1>\n<p>\n    (These apply only to <code>interaction_values</code> and\n    <code>interaction_data_points</code> events.)\n</p>\n<div class="mx-3">\n    <nui-checkbox-group\n        class="nui-checkbox-group-inline"\n        name="interactionTypeFilter"\n        [values]="selectedInteractionTypeFilters"\n        (valuesChange)="onInteractionTypeFilterChange($event)"\n    >\n        <nui-checkbox\n            *ngFor="let filter of interactionTypeFilters"\n            [value]="filter"\n            [checked]="isInteractionTypeFilterChecked(filter)"\n        >\n            {{ filter }}\n        </nui-checkbox>\n    </nui-checkbox-group>\n</div>\n<div class="mt-3">\n    <nui-example-code *ngFor="let event of parsedEvents" language="typescript">\n        {{ event }}\n    </nui-example-code>\n</div>\n'},97761:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n    ViewEncapsulation,\n} from "@angular/core";\nimport cloneDeep from "lodash/cloneDeep";\nimport each from "lodash/each";\nimport includes from "lodash/includes";\n\nimport { LoggerService } from "@nova-ui/bits";\nimport {\n    Chart,\n    ChartAssist,\n    HIGHLIGHT_DATA_POINT_EVENT,\n    IAccessors,\n    IChart,\n    IChartAssistSeries,\n    IChartEvent,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_SERIES_EVENT,\n    INTERACTION_VALUES_EVENT,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    LineSelectSeriesInteractionStrategy,\n    MOUSE_ACTIVE_EVENT,\n    Scales,\n    TimeScale,\n    XYGrid,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-event-bus-test",\n    templateUrl: "./chart-event-bus-test.component.html",\n    encapsulation: ViewEncapsulation.Emulated,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChartEventBusTestComponent implements OnInit {\n    public parsedEvents: string[] = [];\n    public eventFilters = [\n        MOUSE_ACTIVE_EVENT,\n        INTERACTION_VALUES_EVENT,\n        INTERACTION_DATA_POINTS_EVENT,\n        HIGHLIGHT_DATA_POINT_EVENT,\n        INTERACTION_SERIES_EVENT,\n    ];\n    public interactionTypeFilters = [\n        InteractionType.Click,\n        InteractionType.MouseMove,\n    ];\n    public selectedEventFilters: string[];\n    public selectedInteractionTypeFilters: InteractionType[];\n\n    public chart: IChart;\n    public chartAssist: ChartAssist;\n\n    public isEventFilterChecked(filter: string): boolean {\n        return this.selectedEventFilters.indexOf(filter) > -1;\n    }\n\n    public onEventFilterChange(filters: string[]): void {\n        this.selectedEventFilters = filters;\n    }\n\n    public isInteractionTypeFilterChecked(filter: InteractionType): boolean {\n        return this.selectedInteractionTypeFilters.indexOf(filter) > -1;\n    }\n\n    public onInteractionTypeFilterChange(filters: InteractionType[]): void {\n        this.selectedInteractionTypeFilters = filters;\n    }\n\n    constructor(\n        private logger: LoggerService,\n        private changeDetector: ChangeDetectorRef\n    ) {}\n\n    public ngOnInit(): void {\n        const gridConfig = new XYGridConfig();\n        gridConfig.cursor = "pointer";\n        this.chart = new Chart(new XYGrid(gridConfig));\n        this.chartAssist = new ChartAssist(this.chart);\n\n        this.selectAllFilters();\n        this.chartAssist.update(this.generateDataSeriesSet(2));\n\n        each(this.eventFilters, (eventName) => {\n            this.chart\n                .getEventBus()\n                .getStream(eventName)\n                .subscribe((event: IChartEvent) => {\n                    if (includes(this.selectedEventFilters, eventName)) {\n                        if (\n                            !event.data.interactionType ||\n                            includes(\n                                this.selectedInteractionTypeFilters,\n                                event.data.interactionType\n                            )\n                        ) {\n                            this.logger.info(\n                                "EVENT:",\n                                eventName,\n                                "DATA:",\n                                event.data\n                            );\n                            this.parsedEvents.unshift(\n                                `Event: "${eventName}" Data: ${JSON.stringify(\n                                    event.data\n                                )}`\n                            );\n                            this.parsedEvents = this.parsedEvents.slice(0, 10);\n                            this.changeDetector.markForCheck();\n                        }\n                    }\n                });\n        });\n    }\n\n    public selectAllFilters(): void {\n        this.selectedEventFilters = cloneDeep(this.eventFilters);\n        this.selectedInteractionTypeFilters = cloneDeep(\n            this.interactionTypeFilters\n        );\n    }\n\n    public deselectAllFilters(): void {\n        this.selectedEventFilters = [];\n        this.selectedInteractionTypeFilters = [];\n    }\n\n    private generateDataSeriesSet(\n        dataSeriesCount: number\n    ): IChartAssistSeries<IAccessors>[] {\n        const seriesSet = DataGenerator.generateMockTimeLineSeriesSet(\n            dataSeriesCount,\n            40\n        );\n        const scales: Scales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer({\n            interactionStrategy: new LineSelectSeriesInteractionStrategy(),\n        });\n        const accessors = new LineAccessors();\n\n        return seriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            scales,\n            renderer,\n            accessors,\n        }));\n    }\n}\n'},339:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div [style.min-height]="\'500px\'" class="d-flex flex-column">\n    <div class="d-flex flex-fill w-100 h-100">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n        <div class="d-flex flex-column pl-2">\n            <nui-legend\n                seriesUnitLabel="Mbps"\n                [active]="chartAssist.isLegendActive"\n                [interactive]="true"\n                (mouseleave)="chartAssist.resetVisibleSeries()"\n            >\n                <nui-legend-series\n                    *ngFor="\n                        let legendSeries of chartAssist.legendSeriesSet;\n                        trackBy: chartAssist.seriesTrackByFn\n                    "\n                    [descriptionPrimary]="legendSeries[\'name\']"\n                    [seriesRenderState]="\n                        chartAssist.renderStatesIndex[legendSeries.id]?.state\n                    "\n                    (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                    [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                    (isSelectedChange)="\n                        chartAssist.toggleSeries(legendSeries.id, $event)\n                    "\n                >\n                    <nui-rich-legend-tile\n                        [value]="\n                            chartAssist.getHighlightedValue(\n                                legendSeries,\n                                \'y\',\n                                \'value\'\n                            )\n                        "\n                        [backgroundColor]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                        [color]="\n                            chartAssist.palette.textColors.get(legendSeries.id)\n                        "\n                    >\n                        <nui-chart-marker\n                            [marker]="markers.get(legendSeries.id)"\n                            [color]="\n                                chartAssist.palette.standardColors.get(\n                                    legendSeries.id\n                                )\n                            "\n                            rightEdge\n                        ></nui-chart-marker>\n                    </nui-rich-legend-tile>\n                </nui-legend-series>\n            </nui-legend>\n        </div>\n    </div>\n</div>\n\n<div class="d-flex flex-column pt-3">\n    <nui-switch\n        [value]="useCustomMarkers"\n        (valueChange)="onSwitchMarkers($event)"\n    >\n        Use Custom Markers\n    </nui-switch>\n    <button nui-button (click)="updateData()" type="button">Refresh</button>\n</div>\n'},42851:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_MARKERS,\n    CHART_PALETTE_CS2,\n    IAccessors,\n    IChartAssistSeries,\n    IChartMarker,\n    IValueProvider,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    PathMarker,\n    Scales,\n    SequentialChartMarkerProvider,\n    SvgMarker,\n    XYGrid,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-markers-example",\n    templateUrl: "./chart-markers.example.component.html",\n})\nexport class ChartMarkersExampleComponent implements OnInit {\n    public compact = true;\n    public chart = new Chart(new XYGrid());\n    public dataScales: Scales = {\n        x: new LinearScale(),\n        y: new LinearScale(),\n    };\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public standardMarkers = new SequentialChartMarkerProvider(CHART_MARKERS);\n\n    /* eslint-disable max-len */\n    public customMarkers = new SequentialChartMarkerProvider([\n        new SvgMarker(`<g transform="translate(-10, -10)">\n            <circle class="nui-chart--path__outline" fill=\'#D50000\' cx=\'10\' cy=\'10\' r=\'10\'></circle>\n            <path fill=\'#FFFFFF\' d=\'M11,15H9v-2h2V15z M11,5H9v6h2V5z\'/>\n        </g>`),\n        new PathMarker(\n            "m10.62647,13.43705c0.10608,0.11494 0.25614,0.17924 0.41214,0.17924l2.21732,0c0.17538,0 0.33961,-0.08139 0.44569,-0.21884l2.21732,-2.87456c0.16371,-0.21269 0.15433,-0.51155 -0.02199,-0.71497l-1.93221,-2.2069l0,-4.96392c0,-0.09452 -0.02407,-0.18799 -0.06982,-0.27042l-1.53258,-2.78609l0.70778,-4.21102c0.02751,-0.16319 -0.01876,-0.33023 -0.12588,-0.45664c-0.1065,-0.12692 -0.26479,-0.19956 -0.42965,-0.19956l-1.62449,0c-0.24228,0 -0.45664,0.15444 -0.53302,0.38307l-0.9287,2.75753l-7.01628,1.26341l-2.13604,0l0.94766,-2.96251c0.02887,-0.08899 0.03491,-0.18413 0.01709,-0.27584l-1.47714,-7.83795c-0.04564,-0.24457 -0.24645,-0.42923 -0.49353,-0.45559c-0.24426,-0.02751 -0.48196,0.11265 -0.57804,0.34117l-2.22097,5.27508l-1.41524,0l-3.3808,-4.50728c-0.12661,-0.16923 -0.33659,-0.25333 -0.54709,-0.21654c-0.20831,0.03679 -0.37859,0.18684 -0.44132,0.38911l-1.92273,6.24316c-0.00823,0.02803 -0.01459,0.05658 -0.01897,0.08576l-0.73883,5.14305c-0.0322,0.22363 0.07253,0.44507 0.26594,0.56168l3.65111,2.20794l0.7479,2.77785l-3.33807,3.61651c-0.04992,0.05429 -0.08847,0.1164 -0.11369,0.18507l-1.18348,3.17197c-0.06461,0.17257 -0.04033,0.36546 0.06492,0.5177c0.10525,0.15162 0.27719,0.24176 0.46185,0.24176l3.10569,0c0.22123,0 0.42152,-0.12859 0.5127,-0.33086l0.99268,-2.19044l1.78486,-1.78497l1.33594,0.26823l-0.8817,3.3313c-0.0445,0.16975 -0.00854,0.34951 0.09837,0.488c0.10577,0.13735 0.27063,0.21977 0.44559,0.21977l3.10569,0c0.3022,0 0.55094,-0.23968 0.5622,-0.54073l0.1289,-3.27847l4.84137,-0.53854c0.09775,-0.01094 0.19007,-0.04668 0.26979,-0.10442l2.79547,-2.03277l2.95146,4.10608l-0.13193,1.78372c-0.01261,0.15235 0.04075,0.30627 0.14672,0.42162z"\n        ),\n        new SvgMarker(`\n            <g stroke="null" id="svg_49">\n                <path stroke="null" id="svg_1" fill="#D3D1CD" d="m-2.54401,12.16919l0,4.63691l-3.30914,0.9818l-0.39967,-9.76365c0.67655,0.22264 3.01502,4.04556 3.70881,4.14494z"/>\n                <rect stroke="null" id="svg_2" fill="#726D65" height="1.81402" width="3.48045" y="16.80602" x="-6.024"/>\n                <path stroke="null" id="svg_3" fill="#D3D1CD" d="m9.0936,9.13296l0,7.59l-3.46588,1.3547l-0.5317,-9.41187c0.82132,-0.43682 3.40059,0.96563 3.98042,0.4475l0.01716,0.01968z"/>\n                <rect stroke="null" id="svg_4" fill="#726D65" height="1.89708" width="3.46588" y="16.72296" x="5.62735"/>\n                <path stroke="null" id="svg_5" fill="#FCACDF" d="m-11.88037,10.3612c-1.2367,2.50941 -4.70197,2.61222 -4.70197,2.61222s2.24481,-1.89365 0.57213,-6.34979c-1.67352,-4.45622 -0.79309,-12.47701 4.4913,-12.47701c3.42416,0 4.481,2.52313 4.80044,4.29856c-0.20213,-0.00946 -6.44658,10.47284 -5.04284,11.80465l-0.11906,0.11136z"/>\n                <path stroke="null" id="svg_6" fill="#DB91C5" d="m-13.88362,4.88498c-0.12074,2.11377 0.71857,4.03305 2.12232,5.36486l-0.11906,0.11136c-1.2367,2.50941 -4.70197,2.61222 -4.70197,2.61222s2.24481,-1.89365 0.57213,-6.34979c-0.13104,-0.34857 -0.24583,-0.71857 -0.34514,-1.10566c0.81704,-0.81796 1.31725,-1.93049 1.61357,-2.8383c0.29548,-0.90873 0.38709,-1.61273 0.38709,-1.61273c0.0437,-5.37257 4.62318,-2.08037 4.62318,-2.08037l-0.04195,0.05995c-2.2593,1.04648 -3.96715,3.3247 -4.11016,5.83845z"/>\n                <rect stroke="null" id="svg_8" fill="#847E74" height="1.89708" width="2.82716" y="16.72296" x="4.15503"/>\n                <rect stroke="null" id="svg_9" fill="#847E74" height="1.81402" width="2.28936" y="16.80602" x="-6.90191"/>\n                <path id="svg_10" fill="#EDEAE4" d="m12.49427,-0.38195c-0.51904,0.01884 -1.05601,-0.02998 -1.60076,-0.15499l-0.018,0.07963c0.28778,0.65519 0.52675,1.40374 0.66892,2.20454c0.41798,2.3561 -0.00084,5.16449 -2.46829,7.36644c-0.57983,0.51813 -1.2727,1.00208 -2.09402,1.43883l0,6.17085l-2.82716,0l0,-4.86298c0,0 -3.28969,0.79737 -6.69927,0.30921c-0.69371,-0.09938 -1.39177,-0.25178 -2.06839,-0.4745l0,5.11141l-2.28936,0l0,-4.32952c0,0 -0.78196,-0.15156 -1.80883,-0.54986c-1.1631,-0.29037 -2.20881,-0.877 -3.05072,-1.67695c-1.40374,-1.33182 -2.24306,-3.25117 -2.12232,-5.36486c0.19099,-3.3642 3.18519,-6.30532 6.55191,-6.44147c0.2064,-0.00854 0.41112,-0.0077 0.61324,0.00168c1.12885,0.05393 2.18654,0.38198 3.10724,0.91902c0.35033,0.2038 0.6809,0.43766 0.98752,0.69798c0.68433,0.57983 2.19508,-6.9596 2.19508,-11.90823s5.13109,-3.89004 5.13109,-3.89004c0,-0.65008 0.08055,-1.19307 0.21326,-1.64698c0.64406,-2.19851 2.52397,-2.31163 2.52397,-2.31163l0,3.73848l0.00427,0c0.11136,-3.8053 2.7338,-3.97401 2.7338,-3.97401l0,3.99194c-1.20932,0.59265 2.49659,2.61138 2.49659,2.61138l0.00084,0.00084c0.36657,0.54475 0.75198,1.10315 1.1528,1.66666c0.33484,0.47107 0.68006,0.9464 1.03374,1.41915c0,0 0,0.00084 0.00084,0.00168c0.02143,0.0283 0.04279,0.05736 0.06422,0.08566c0.40082,0.53361 0.81193,1.06287 1.23075,1.58276c3.20327,3.96898 0.31615,8.04917 -3.66297,8.18791z"/>\n                <path stroke="null" id="svg_11" fill="#FCACDF" d="m4.91541,-17.38275c-0.06598,0.22356 -0.11822,0.46847 -0.15499,0.73741c-0.03768,0.27664 -0.05827,0.57983 -0.05827,0.90956c0,0 -4.24631,0.54383 -4.24631,5.49247s3.04302,8.33679 -0.44025,10.47452c-0.02487,0.01541 -0.04965,0.03257 -0.0762,0.04798c-0.03509,0.02143 -0.07109,0.04195 -0.10793,0.06171c-0.21669,0.11647 -0.44796,0.19183 -0.68349,0.22699c-0.62262,0.09504 -1.2753,-0.08482 -1.77199,-0.50531c-0.30662,-0.2604 -0.63719,-0.49418 -0.98752,-0.69798c2.97109,-1.81402 0.29632,-4.54012 1.07317,-11.09203c0.79309,-6.68051 7.45377,-5.65531 7.45377,-5.65531z"/>\n                <path stroke="null" id="svg_13" fill="#D3D1CD" d="m-3.71413,11.94731c6.19716,0 7.86924,-3.22119 7.86924,-3.22119l0,3.13378c0.00008,0.00008 -4.55141,1.5511 -7.86924,0.08741z"/>\n                <path stroke="null" id="svg_14" fill="#D3D1CD" d="m-10.88599,5.68745c0,4.71051 3.98423,6.7892 3.98423,6.7892s-0.78196,-0.15156 -1.80883,-0.54986c-1.1631,-0.29037 -2.20881,-0.877 -3.05072,-1.67695c-1.40374,-1.33182 -2.24306,-3.25117 -2.12232,-5.36486c0.19099,-3.3642 3.18519,-6.30524 6.55191,-6.44147c0.2064,-0.00854 0.41112,-0.0077 0.61324,0.00168c0,0 -4.16752,2.27479 -4.16752,7.24227z"/>\n                <path stroke="null" id="svg_16" fill="#666666" d="m13.25136,-4.62231c-0.28008,0 -0.51378,-0.23416 -0.51386,-0.51386c-0.00008,-0.27924 0.23477,-0.51386 0.51386,-0.51386c0.27977,0 0.51363,0.23416 0.51386,0.51386c0.00031,0.28015 -0.23325,0.51386 -0.51386,0.51386z"/>\n                <path stroke="null" id="svg_17" fill="#666666" d="m16.86224,-5.23807c-0.27939,0 -0.51386,-0.23469 -0.51386,-0.51386c0,-0.27489 0.22524,-0.50615 0.50036,-0.51355c0.27581,-0.0074 0.51279,0.21311 0.52675,0.488c0.01464,0.28854 -0.22424,0.53941 -0.51325,0.53941z"/>\n                <path stroke="null" id="svg_18" fill="#666666" d="m7.4464,-9.28317c-0.15117,-0.17551 -0.22081,-0.40662 -0.22562,-0.64604c-0.00252,-0.23919 0.06407,-0.488 0.1932,-0.70729c0.12837,-0.21997 0.31806,-0.41104 0.54559,-0.54803c0.22707,-0.13775 0.49197,-0.21997 0.75831,-0.23775c0.26627,-0.01808 0.53994,0.0286 0.78333,0.13523c0.24369,0.10602 0.45726,0.27031 0.61339,0.47183c0.15697,0.2006 0.25567,0.43888 0.28435,0.67662c0.02631,0.23828 -0.01274,0.47686 -0.14065,0.67067c-0.29808,-0.34705 -0.56671,-0.50127 -0.81048,-0.58677c-0.24415,-0.08268 -0.44384,-0.09595 -0.64566,-0.08588c-0.20167,0.01503 -0.39853,0.05446 -0.63025,0.16841c-0.23111,0.11685 -0.47702,0.30593 -0.72552,0.68898z"/>\n                <path stroke="null" id="svg_19" fill="#666666" d="m14.92664,-10.15246c-0.10617,-0.06506 -0.20815,-0.11052 -0.30578,-0.14477c-0.24408,-0.08306 -0.44452,-0.09595 -0.64581,-0.08649c-0.20213,0.01541 -0.39914,0.05484 -0.63033,0.16872c-0.23126,0.11647 -0.47702,0.30578 -0.72544,0.6886c-0.15156,-0.17474 -0.22096,-0.40593 -0.22608,-0.64581c-0.00168,-0.23897 0.06422,-0.48815 0.19358,-0.70744c0.12844,-0.22013 0.31776,-0.41112 0.54559,-0.5481c0.20899,-0.12593 0.45139,-0.2064 0.69546,-0.23126c0.33484,0.47107 0.68006,0.9464 1.03374,1.41915c0,0 0,0.00084 0.00084,0.00168c0.02136,0.0283 0.04279,0.05743 0.06422,0.08573z"/>\n                <path stroke="null" id="svg_20" fill="#E58376" d="m7.21071,-6.48866l-1.3132,0c-0.35475,0 -0.64238,-0.28763 -0.64238,-0.64238s0.28763,-0.64238 0.64238,-0.64238l1.3132,0c0.35475,0 0.64238,0.28763 0.64238,0.64238s-0.28763,0.64238 -0.64238,0.64238z"/>\n                <path stroke="null" id="svg_22" fill="#D3D1CD" d="m3.68465,-5.5884c0.02052,0.03852 0.17131,0.31776 0.4462,0.75198c-0.17726,-0.24408 -0.32798,-0.49502 -0.4462,-0.75198z"/>\n                <path stroke="null" id="svg_23" fill="#D3D1CD" d="m11.54443,1.74723c-3.88752,-1.56476 -6.43376,-5.04116 -7.41182,-6.58105c1.88594,2.59254 6.7429,4.37651 6.7429,4.37651c0.28778,0.65519 0.52675,1.40374 0.66892,2.20454z"/>\n                <path stroke="null" id="svg_25" fill="#B5B4B4" d="m7.43938,-15.9559l-1.53051,0c0,0 0.62011,-3.32225 1.53051,-3.73848l0,3.73848z"/>\n                <path stroke="null" id="svg_26" fill="#B5B4B4" d="m10.17753,-16.19144l-1.53051,0c0,0 0.62011,-3.32225 1.53051,-3.73848l0,3.73848z"/>\n                <path stroke="null" id="svg_27" fill="#DB91C5" d="m4.76042,-16.64534c-0.03768,0.27664 -0.05827,0.57983 -0.05827,0.90956c0,0 -4.24631,0.54383 -4.24631,5.49247s3.04302,8.33679 -0.44025,10.47452c-0.02487,0.01541 -0.04965,0.03257 -0.0762,0.04798c-0.03509,0.02143 -0.07109,0.04195 -0.10793,0.06171c-0.21669,0.11647 -0.44796,0.19183 -0.68349,0.22699c3.18862,-4.03564 -0.03341,-4.83217 -0.03341,-11.10065c0,-5.37775 4.10246,-6.05003 5.64586,-6.11258z"/>\n                <path stroke="null" id="svg_28" fill="#F9D780" d="m19.34426,-20.4318l-2.4358,2.5943l-0.64489,0.68776l-1.96473,2.09318l-0.56359,0.60035l-1.0612,1.12969l-0.32203,0.34346c-0.11388,0.12074 -0.2398,0.2244 -0.37595,0.30921c-0.19785,0.12417 -0.41539,0.20899 -0.63894,0.25353c-0.45474,0.08993 -0.93611,0.01197 -1.34211,-0.24667c-0.06163,-0.03943 -0.12074,-0.08222 -0.17818,-0.12936c-0.01373,-0.01114 -0.02654,-0.02227 -0.04027,-0.03425c-1.02436,-0.87188 -0.8085,-2.51459 0.40082,-3.10724l0.84107,-0.41195l0.75541,-0.37084l2.07861,-1.01917l0.90956,-0.44536l1.57162,-0.77082l0.80507,-0.39479l2.20553,-1.08103z"/>\n                <path stroke="null" id="svg_29" fill="#F9E9C7" d="m19.34456,-20.4321l-6.67014,7.1052l-0.32203,0.34346c-0.61751,0.65778 -1.61441,0.78882 -2.35701,0.316l9.34917,-7.76466z"/>\n                <path stroke="null" id="svg_31" fill="#E0BE70" d="m14.29883,-15.05656l-0.56359,0.60035c-0.36314,-1.27438 -0.14301,-2.47859 0.11731,-3.28366l0.90956,-0.44536c-0.22432,0.48815 -0.70568,1.74713 -0.46329,3.12867z"/>\n                <path stroke="null" id="svg_32" fill="#E0BE70" d="m17.13888,-19.35092c-0.1225,0.41966 -0.22699,0.94213 -0.23042,1.51335l-0.64489,0.68776c-0.08482,-0.65603 -0.03425,-1.2753 0.07025,-1.80631l0.80507,-0.39479z"/>\n                <path stroke="null" id="svg_33" fill="#E0BE70" d="m11.97606,-12.67392c-0.19785,0.12417 -0.41539,0.20899 -0.63894,0.25353c-0.48136,-1.52967 -0.44536,-2.95995 -0.3186,-3.92947l0.75541,-0.37084c-0.15499,0.84786 -0.30403,2.39637 0.20213,4.04678z"/>\n            </g>`),\n        new PathMarker(\n            "m13.79081,-4.84368c-0.92266,-1.54513 -2.21904,-3.01517 -3.09452,-3.78654c-1.92513,-1.69676 -3.53512,-1.65247 -4.32337,-1.47512c-0.31707,0.07137 -0.60888,0.18742 -0.86863,0.3404c-1.36004,-0.99335 -3.01114,-1.48005 -5.00481,-1.48005s-3.64477,0.4867 -5.00481,1.48005c-0.2598,-0.15298 -0.55161,-0.26904 -0.86863,-0.3404c-0.78826,-0.17734 -2.39825,-0.22169 -4.32332,1.47507c-0.87554,0.77143 -2.17197,2.24146 -3.09458,3.78666c-1.25797,2.10678 -1.53545,3.81594 -0.82462,5.0802c0.83798,1.4902 2.12994,1.90621 3.1613,2.01938c-0.24661,0.9742 -0.39784,2.01944 -0.39784,3.3149c0,1.76371 0.40418,3.28205 1.20133,4.51266c0.70081,1.08199 1.70888,1.94801 2.99636,2.574c2.00867,0.97669 4.36031,1.22138 6.20948,1.27332l0,-5.89643c-1.1452,-0.54001 -2.26061,-1.89194 -2.26061,-2.96929c0,-1.81468 2.00698,-1.81468 3.20604,-1.81468c1.19907,0 3.20604,0 3.20604,1.81468c0,1.07746 -1.11546,2.42928 -2.26061,2.96929l0,5.89637c1.84924,-0.05194 4.20092,-0.29663 6.20948,-1.27332c1.28742,-0.62598 2.29556,-1.49201 2.99636,-2.574c0.79709,-1.23067 1.20133,-2.74895 1.20133,-4.51266c0,-1.29552 -0.15117,-2.34076 -0.39784,-3.31496c1.03136,-0.11311 2.32336,-0.52918 3.1613,-2.01938c0.7106,-1.2642 0.43312,-2.97331 -0.82485,-5.08014l0.00001,0zm-16.23252,5.34691c-0.6394,0 -1.15981,-0.52335 -1.15981,-1.16899c0,-0.64569 0.52035,-1.16865 1.15981,-1.16865c0.6402,0 1.16049,0.52295 1.16049,1.16865c0.00006,0.64564 -0.52024,1.16899 -1.16049,1.16899zm5.87366,0.00878c-0.64564,0 -1.16933,-0.52726 -1.16933,-1.17771c0,-0.65045 0.5237,-1.17771 1.16933,-1.17771c0.64484,0 1.16848,0.52726 1.16848,1.17771c0,0.65045 -0.5237,1.17771 -1.16848,1.17771z"\n        ),\n        new PathMarker(\n            "m6.00065,-7.9931c4.87221,-5.25971 5.69347,-0.48192 9.27895,0.52335c0.43379,0.12063 0.75609,0.15049 0.72441,0.3558c-0.31316,2.06172 -0.98578,2.44981 -1.73516,2.46992c-0.8298,0.02315 -1.50364,0.00853 -2.00201,0.24553c-0.63484,0.30097 -1.093,0.69151 -1.43053,1.14723l-5.0952,-2.59847c0.16572,-0.60499 0.25589,-1.31355 0.25954,-2.14336l0,0zm4.82713,4.75341c-0.10906,0.14805 -0.20532,0.30341 -0.29061,0.46486c0.0853,-0.16145 0.18156,-0.31681 0.29061,-0.46486zm-0.29244,0.46852c-0.05788,0.10967 -0.11088,0.22177 -0.15902,0.33631c0.04874,-0.11454 0.10114,-0.22725 0.15902,-0.33631zm-0.15963,0.33814c-0.02376,0.05666 -0.0463,0.11332 -0.06763,0.1712c0.02132,-0.05788 0.04387,-0.11454 0.06763,-0.1712zm-0.06885,0.17303c-1.08447,2.89031 0.36251,7.18922 -4.49021,8.77328c-0.29305,2.46139 -0.28026,4.92461 0.06458,7.38539l0.58915,-0.06275c1.06254,-0.11332 1.05218,0.85113 0.55016,1.47257l-3.13705,0c-0.22786,-2.95001 -0.79812,-6.17969 -0.56052,-8.99566c-1.65291,0.44232 -2.64843,0.32473 -4.44391,-0.35885c-0.87124,-0.33143 -4.46523,-2.48028 -5.43942,-1.60599c-0.54894,0.49411 0.91571,2.46505 -2.70144,5.96707l0.06458,3.4624c0.21568,0 0.41307,0 0.61169,0c0.92668,0 0.87672,0.92607 0.54102,1.53106l-1.78756,0c-1.18866,0 -0.93886,0.12733 -0.95349,-1.12347l-0.02864,-2.69534l-0.18948,-1.66997c0.00366,-0.9943 0.71709,-2.05319 0.03473,-4.42197c-0.45024,-1.567 -0.41429,-2.81476 -1.59259,-2.9884c-1.09422,2.20611 -2.14092,4.22579 -3.05968,6.5385c-0.06214,0.15658 -0.14866,0.30463 -0.22421,0.45694c-1.04731,2.41204 -1.48658,0.60012 -0.89987,-0.83224l0.39236,-0.95531c0.50203,-2.02212 1.91794,-5.81716 3.25403,-7.22517c5.03488,-5.31088 15.23869,-0.28818 18.24598,-4.88501l5.15979,2.23292l-0.00002,0.00002zm-5.14577,-2.25424l0.03838,-0.06093c-0.01279,0.02071 -0.02559,0.04082 -0.03838,0.06093zm0.15292,-0.25711c0.01584,-0.02924 0.03168,-0.0591 0.04752,-0.08895c-0.01584,0.02985 -0.03168,0.05971 -0.04752,0.08895zm0.13586,-0.27051c0.02011,-0.04326 0.0396,-0.08651 0.05849,-0.13099c-0.01889,0.04448 -0.03838,0.08773 -0.05849,0.13099zm0.12185,-0.28818c0.02193,-0.05666 0.04265,-0.11515 0.06336,-0.17425c-0.02011,0.0591 -0.04143,0.11759 -0.06336,0.17425zm0.10906,-0.31438c0.02011,-0.06397 0.0396,-0.12977 0.05788,-0.19618c-0.01828,0.06641 -0.03777,0.13221 -0.05788,0.19618z"\n        ),\n    ]);\n    /* eslint-enable max-len */\n    public markers: IValueProvider<IChartMarker>;\n    public useCustomMarkers = true;\n\n    public ngOnInit(): void {\n        this.chartAssist.palette = new ChartPalette(CHART_PALETTE_CS2);\n        this.dataScales.x.formatters.tick = (value: any) =>\n            Math.round(value).toString();\n\n        this.updateMarkers();\n        this.updateData();\n    }\n\n    public updateData(): void {\n        const data = this.generateDataSeriesSet(12, this.dataScales);\n        this.chartAssist.update(data);\n    }\n\n    public updateMarkers(): void {\n        this.markers = this.useCustomMarkers\n            ? this.customMarkers\n            : this.standardMarkers;\n    }\n\n    private generateDataSeriesSet(\n        dataSeriesCount: number,\n        scales: Scales\n    ): IChartAssistSeries<IAccessors>[] {\n        const renderer = new LineRenderer();\n        const lineSeriesSet = DataGenerator.generateMockLineSeriesSet(\n            dataSeriesCount,\n            20\n        );\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.markers\n        );\n\n        return lineSeriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            accessors,\n            scales,\n            renderer,\n            showInLegend: true,\n        }));\n    }\n\n    public onSwitchMarkers(value: boolean): void {\n        this.chartAssist.update([]);\n        this.useCustomMarkers = value;\n        this.updateMarkers();\n        this.updateData();\n    }\n}\n'},69760:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-example-wrapper\n    filenamePrefix="data-point-selection-prototype"\n    exampleTitle="Data Point Selection Prototype"\n>\n    <nui-message type="critical" [allowDismiss]="false">\n        <strong>Note:</strong> This is only a prototype, so its implementation\n        is unpolished. Please use discretion when copying the code as there are\n        likely solutions more concise and/or elegant than those presented here.\n        <strong\n            >For assistance, please contact Blake Simmon or Lukas\n            Holcik.</strong\n        >\n    </nui-message>\n    <hr />\n    <nui-chart\n        class="d-flex chart"\n        [chart]="statusChart"\n        nuiChartCollectionId="collection"\n    ></nui-chart>\n    <nui-chart\n        class="d-flex chart"\n        [chart]="barChart"\n        nuiChartCollectionId="collection"\n    ></nui-chart>\n    <hr />\n    <button type="button" nui-button (click)="onReset()">Reset</button>\n</nui-example-wrapper>\n'},45505:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".selected {\n    stroke: #52d9e3 !important;\n}\n\n.chart {\n    max-width: 800px;\n}\n"},36155:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit, ViewEncapsulation } from "@angular/core";\nimport isEmpty from "lodash/isEmpty";\nimport isUndefined from "lodash/isUndefined";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    BandScale,\n    barAccessors,\n    BarGridConfig,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    BarStatusGridConfig,\n    BorderConfig,\n    Chart,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S_EXTENDED,\n    convert,\n    DataAccessor,\n    DATA_POINT_NOT_FOUND,\n    IAccessors,\n    IBarRendererConfig,\n    IChartEvent,\n    IDataPoint,\n    IDataSeries,\n    IInteractionDataPointsEvent,\n    IInteractionValues,\n    IInteractionValuesPayload,\n    InteractionLabelPlugin,\n    InteractionLinePlugin,\n    InteractionType,\n    INTERACTION_DATA_POINTS_EVENT,\n    INTERACTION_VALUES_EVENT,\n    IXYScales,\n    MappedValueProvider,\n    MOUSE_ACTIVE_EVENT,\n    SelectedDatPointIdxFn,\n    StatusAccessors,\n    statusAccessors,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid,\n} from "@nova-ui/charts";\n\nconst format = "YYYY-MM-DDTHH:mm:ssZ";\nconst baseDate = "2016-12-25T15:05:00Z";\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n}\n\n@Component({\n    templateUrl: "./data-point-selection-prototype.component.html",\n    styleUrls: ["./data-point-selection-prototype.component.less"],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DataPointSelectionPrototypeComponent implements OnInit {\n    public barChart: Chart;\n    public statusChart: Chart;\n\n    // Use the same \'x\' scale id for both charts to ensure that interaction events such as hover are shared between the charts\n    private xScaleId = "xScale";\n\n    private selectedDataPoints: Record<string, IDataPoint> = {};\n    private labelPlugin = new InteractionLabelPlugin();\n    private renderer: BarRenderer;\n    private selectedLabelPosition?: IInteractionValues;\n\n    private colorProvider = {\n        // sets the bars used to visualize the selection box to \'transparent\'. All other bars just use the first color in the CS1 palette.\n        get: (seriesId: string) =>\n            seriesId === "selection-box" ? "transparent" : CHART_PALETTE_CS1[0],\n        reset: () => {},\n    };\n\n    public ngOnInit(): void {\n        this.setUpBarChart();\n        this.setUpStatusChart();\n    }\n\n    public onReset(): void {\n        // Reset the stored selection\n        this.selectedDataPoints = {};\n        this.selectedLabelPosition = undefined;\n\n        // Redraw the charts\n        this.redrawCharts();\n\n        // Re-enable interaction label updates and hide the label by emitting a mouse move \'INTERACTION_VALUES_EVENT\' with empty values.\n        this.labelPlugin.areLabelUpdatesEnabled = true;\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_VALUES_EVENT)\n            .next({\n                data: {\n                    interactionType: InteractionType.MouseMove,\n                    values: {},\n                },\n            });\n    }\n\n    private setUpBarChart() {\n        this.barChart = new Chart(this.configureBarGrid());\n        this.barChart.addPlugin(new InteractionLinePlugin());\n        this.barChart.addPlugin(this.labelPlugin);\n\n        // Setting up data point click handling\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_DATA_POINTS_EVENT)\n            .subscribe(this.handleDataPointsInteraction);\n        // Setting up interaction label update handling\n        this.barChart\n            .getEventBus()\n            .getStream(INTERACTION_VALUES_EVENT)\n            .subscribe(this.handleInteractionLabelUpdates);\n        // Setting up what happens on chart mouseenter and mouseleave\n        this.barChart\n            .getEventBus()\n            .getStream(MOUSE_ACTIVE_EVENT)\n            .subscribe(this.handleMouseActive);\n\n        // The color provider sets the selection boxes to \'transparent\'\n        const accessors = barAccessors({}, this.colorProvider);\n        // The \'cssClassAccessor\' updates the stroke color of the selection box when a time interval is selected\n        accessors.data.cssClass = this.cssClassAccessor;\n\n        const scales = barScales();\n        // Use the same \'x\' scale id as the status chart to ensure that interaction events such as hover are shared between the charts\n        scales.x = new TimeIntervalScale(duration(5, "minutes"), this.xScaleId);\n\n        // The \'barThickness\' method sets the selection box width to be larger than the standard bars\n        accessors.data.thickness = this.barThickness(scales);\n\n        const rendererConfig: IBarRendererConfig = {\n            // Supply a \'selectedDataPointIdxFn\' to the \'BarHighlightStrategy\' to prevent the selected bar\n            // from being deemphasized/grayed out as the chart is hovered.\n            highlightStrategy: new BarHighlightStrategy(\n                "x",\n                1,\n                this.selectedDataPointIdxFn\n            ),\n            cursor: "pointer",\n        };\n        this.renderer = new BarRenderer(rendererConfig);\n\n        // Initialize the bar chart\n        this.barChart.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer: this.renderer,\n                scales,\n            }))\n        );\n    }\n\n    private setUpStatusChart() {\n        this.statusChart = new Chart(this.configureStatusGrid());\n        this.statusChart.addPlugin(new InteractionLinePlugin());\n\n        // Setting up the status chart scales\n        const statusYScale = new BandScale();\n        statusYScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        // Use the same \'x\' scale id as the bar chart to ensure that interaction events such as hover are shared between the charts\n        const statusXScale = new TimeIntervalScale(\n            duration(5, "minutes"),\n            this.xScaleId\n        );\n        statusXScale.fixDomain([\n            moment(baseDate, format).toDate(),\n            moment(baseDate, format).add(25, "minutes").toDate(),\n        ]);\n        const statusScales = {\n            x: statusXScale,\n            y: statusYScale,\n        };\n\n        // Setting up the status chart accessors\n        const myStatusAccessors = statusAccessors(\n            new MappedValueProvider<string>(getStatusValueMap())\n        );\n        myStatusAccessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // The \'cssClassAccessor\' updates the stroke color of the selection box when a time interval is selected\n        // TODO: Implement \'selection-box\' series for displaying the selection box on the status chart. For reference,\n        // see \'selection-box\' data series on the bar chart.\n        myStatusAccessors.data.cssClass = this.cssClassAccessor;\n\n        // Initializing the status chart\n        this.statusChart.update(\n            getStatusData().map((d) => ({\n                ...d,\n                accessors: myStatusAccessors,\n                renderer: this.renderer,\n                scales: statusScales,\n            }))\n        );\n    }\n\n    private configureBarGrid() {\n        const gridConfig = new BarGridConfig();\n\n        gridConfig.axis.left.visible = false;\n        gridConfig.axis.left.gridTicks = false;\n        // Disable \'axis.bottom.fit\' to set left and right margins manually\n        gridConfig.axis.bottom.fit = false;\n        gridConfig.borders.top = new BorderConfig();\n        gridConfig.cursor = "pointer";\n        gridConfig.dimension.padding.top = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n\n        // Use these settings to make the bar chart the same height as the status chart\n        // gridConfig.dimension.autoHeight = false;\n        // gridConfig.dimension.height(30);\n\n        return new XYGrid(gridConfig);\n    }\n\n    private configureStatusGrid() {\n        const gridConfig = new BarStatusGridConfig();\n\n        gridConfig.axis.bottom.visible = false;\n        gridConfig.cursor = "pointer";\n        gridConfig.dimension.margin.bottom = 0;\n        // Synchronize the left and right margins (left margin default is 30px)\n        gridConfig.dimension.margin.right = gridConfig.dimension.margin.left;\n        gridConfig.borders.bottom.visible = false;\n\n        return new XYGrid(gridConfig);\n    }\n\n    private redrawCharts() {\n        this.barChart.update(this.barChart.getDataManager().chartSeriesSet);\n        this.statusChart.update(\n            this.statusChart.getDataManager().chartSeriesSet\n        );\n    }\n\n    private handleDataPointsInteraction = (event: IChartEvent) => {\n        const data: IInteractionDataPointsEvent = event.data;\n        // we\'re interested in data point click events here\n        if (data.interactionType === InteractionType.Click) {\n            // set the selected data points\n            this.selectedDataPoints = data.dataPoints;\n\n            if (this.renderer.config.stateStyles) {\n                // change the bar container opacity from 0.1 to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.3,\n                };\n            }\n\n            // redraw the charts to apply the selected data point style\n            this.redrawCharts();\n\n            // store the interaction label position for the selected data point\n            this.selectedLabelPosition =\n                this.calculateInteractionLabelPosition(data);\n\n            // apply the label position based on the click\n            this.barChart\n                .getEventBus()\n                .getStream(INTERACTION_VALUES_EVENT)\n                .next({\n                    data: {\n                        interactionType: InteractionType.MouseMove,\n                        values: this.selectedLabelPosition,\n                    },\n                });\n        }\n    };\n\n    private handleInteractionLabelUpdates = (event: IChartEvent) => {\n        const data: IInteractionValuesPayload = event.data;\n\n        // The condition checks whether the mouse has moved away from the chart and a selected label position is stored\n        if (\n            data.interactionType === InteractionType.MouseMove &&\n            isEmpty(data.values) &&\n            this.selectedLabelPosition\n        ) {\n            // ensure label updates are enabled\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n\n            // Update the label with the stored label position by manually emitting an \'INTERACTION_VALUES_EVENT\'.\n            // Note that \'broadcast\' is set to \'true\' to let the \'nuiChartCollection\' directive know that the event is\n            // coming from outside the chart and should not propagate to other charts in the collection.\n            this.barChart\n                .getEventBus()\n                .getStream(INTERACTION_VALUES_EVENT)\n                .next({\n                    data: {\n                        interactionType: InteractionType.MouseMove,\n                        values: this.selectedLabelPosition,\n                    },\n                    broadcast: true,\n                });\n\n            // disable further label updates\n            this.labelPlugin.areLabelUpdatesEnabled = false;\n        } else if (\n            data.interactionType === InteractionType.MouseMove &&\n            !isEmpty(data.values)\n        ) {\n            // allow label updates while the mouse is hovering over the chart\n            this.labelPlugin.areLabelUpdatesEnabled = true;\n        }\n    };\n\n    private handleMouseActive = (event: IChartEvent) => {\n        if (this.renderer.config.stateStyles) {\n            if (!isEmpty(this.selectedDataPoints) && !event.data) {\n                // if there\'s a selected data point and the mouse has moved away\n                // from the chart, set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.3,\n                };\n            } else if (event.data) {\n                // if the mouse is over the chart set the bar container opacity to 0.3\n                this.renderer.config.stateStyles.deemphasized = {\n                    opacity: 0.1,\n                };\n            }\n        }\n\n        if (\n            this.barChart.getDataManager().chartSeriesSet.length > 0 &&\n            this.statusChart.getDataManager().chartSeriesSet.length > 0\n        ) {\n            // redraw the charts if we have data\n            this.redrawCharts();\n        }\n    };\n\n    /**\n     * Sets the width of the bars on the bar chart. (This is only necessary if you want the selection boxes\n     * to be wider than the standard bars).\n     */\n    private barThickness(scales: IXYScales): DataAccessor<any, any> {\n        return (\n            d: any,\n            i: number,\n            series: any[],\n            dataSeries: IDataSeries<IAccessors>\n        ) => {\n            let thickness: number;\n            const x1 = convert(\n                scales.x,\n                dataSeries.accessors.data?.["startX"]?.(\n                    d,\n                    i,\n                    dataSeries.data,\n                    dataSeries\n                ),\n                0\n            );\n            const x2 = convert(\n                scales.x,\n                dataSeries.accessors.data?.["endX"]?.(\n                    d,\n                    i,\n                    dataSeries.data,\n                    dataSeries\n                ),\n                1\n            );\n            thickness = Math.abs(x1 - x2);\n\n            // Allow the selection boxes to be a little wider than the data bars\n            thickness -= dataSeries.id === "selection-box" ? 2 : 6;\n            thickness = Math.max(thickness, BarRenderer.MIN_BAR_THICKNESS);\n            return thickness;\n        };\n    }\n\n    /**\n     * Allows the \'BarHighlightingStrategy\' to know which data point (or bar) on a series is selected, if any.\n     * Return \'DATA_POINT_NOT_FOUND\' if no data point is selected on the specified series.\n     */\n    private selectedDataPointIdxFn: SelectedDatPointIdxFn = (\n        seriesId: string\n    ): number =>\n        this.selectedDataPoints?.[seriesId]?.index ?? DATA_POINT_NOT_FOUND;\n\n    /**\n     * Sets the stroke color of the selection box when a time interval is selected\n     *\n     * @returns The \'selected\' class (see less file) if a bar is selected, the series id matches the selection box series, and the\n     * selected data point index matches the current index; otherwise, returns an empty string.\n     */\n    private cssClassAccessor = (\n        d: any,\n        i: number,\n        series: any,\n        dataSeries: any\n    ): string =>\n        !isEmpty(this.selectedDataPoints) &&\n        dataSeries.id === "selection-box" &&\n        this.selectedDataPoints[dataSeries.id]?.index === i\n            ? "selected"\n            : "";\n\n    /**\n     * Calculates the desired position of the interaction label based on the position of the first data point in the event payload\n     */\n    private calculateInteractionLabelPosition(\n        data: IInteractionDataPointsEvent\n    ): IInteractionValues {\n        const sampleDataPoint =\n            data.dataPoints[Object.keys(data.dataPoints)[0]];\n        const xScales = [sampleDataPoint.dataSeries.scales.x];\n        const yScales = [sampleDataPoint.dataSeries.scales.y];\n\n        if (\n            !sampleDataPoint.position ||\n            isUndefined(sampleDataPoint.position.width) ||\n            isUndefined(sampleDataPoint.position.height)\n        ) {\n            throw new Error("Can\'t calculate x and y values");\n        }\n\n        const xCoordinate =\n            sampleDataPoint.position.x + sampleDataPoint.position.width / 2;\n        const yCoordinate =\n            sampleDataPoint.position.y + sampleDataPoint.position.height / 2;\n\n        return UtilityService.getXYValues(\n            xScales,\n            yScales,\n            xCoordinate,\n            yCoordinate\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        {\n            id: "series-1",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 66 },\n                {\n                    category: moment(baseDate, format)\n                        .add(5, "minutes")\n                        .toDate(),\n                    value: 14,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(10, "minutes")\n                        .toDate(),\n                    value: 25,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(15, "minutes")\n                        .toDate(),\n                    value: 55,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(20, "minutes")\n                        .toDate(),\n                    value: 33,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(25, "minutes")\n                        .toDate(),\n                    value: 5,\n                },\n            ],\n        },\n\n        // The sole purpose of this series is to define the selection boxes that have a togglable selection\n        // outline. The \'fill\' of the boxes is set to transparent by the \'colorProvider\' in the component\n        // above. And, the blue outline of the selected time interval is toggled by the \'cssClassAccessor\'\n        // method in the above component.\n        {\n            id: "selection-box",\n            data: [\n                { category: moment(baseDate, format).toDate(), value: 100 },\n                {\n                    category: moment(baseDate, format)\n                        .add(5, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(10, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(15, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(20, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n                {\n                    category: moment(baseDate, format)\n                        .add(25, "minutes")\n                        .toDate(),\n                    value: 100,\n                },\n            ],\n        },\n    ];\n}\n\nfunction getStatusValueMap() {\n    return {\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n    };\n}\n\nfunction getStatusData() {\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).toDate(),\n                    end: moment(baseDate, format).toDate(),\n                },\n                {\n                    status: Status.Warning,\n                    start: moment(baseDate, format).add(5, "minutes").toDate(),\n                    end: moment(baseDate, format).add(5, "minutes").toDate(),\n                },\n                {\n                    status: Status.Critical,\n                    start: moment(baseDate, format).add(10, "minutes").toDate(),\n                    end: moment(baseDate, format).add(10, "minutes").toDate(),\n                },\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).add(15, "minutes").toDate(),\n                    end: moment(baseDate, format).add(15, "minutes").toDate(),\n                },\n                {\n                    status: Status.Critical,\n                    start: moment(baseDate, format).add(20, "minutes").toDate(),\n                    end: moment(baseDate, format).add(20, "minutes").toDate(),\n                },\n                {\n                    status: Status.Up,\n                    start: moment(baseDate, format).add(25, "minutes").toDate(),\n                    end: moment(baseDate, format).add(25, "minutes").toDate(),\n                },\n            ],\n        },\n    ];\n}\n'},86072:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { DataPointSelectionPrototypeComponent } from "./data-point-selection-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: DataPointSelectionPrototypeComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [DataPointSelectionPrototypeComponent],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [],\n})\nexport default class DataPointSelectionPrototypeModule {}\n'},81473:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="chart d-block" [chart]="chartAssist.chart"></nui-chart>\n\n    <nui-chart-donut-content\n        style="position: absolute"\n        [plugin]="contentPlugin"\n    >\n        <div\n            class="h-100 w-100 d-flex flex-column justify-content-center align-items-center text-center"\n        >\n            <div class="d-inline-block" nuiZoomContent [zoomRatio]="0.65">\n                {{ gaugeConfig.value | unitConversion : 2 : false : "generic" }}\n            </div>\n            <div class="content-label">Network Latency</div>\n            <div class="content-label">(ms)</div>\n        </div>\n    </nui-chart-donut-content>\n</div>\n'},51696:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.content-label {\n    line-height: 14px;\n    font-size: 11px;\n    font-weight: 400;\n    text-transform: uppercase;\n    color: var(--nui-color-text-secondary);\n}\n'},82587:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    ChartDonutContentPlugin,\n    DonutGaugeLabelsPlugin,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    IRadialRendererConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "donut-gauge-prototype",\n    templateUrl: "./donut-gauge-prototype.component.html",\n    styleUrls: ["./donut-gauge-prototype.component.less"],\n})\nexport class DonutGaugePrototypeComponent implements OnChanges, OnInit {\n    @Input() public size: number;\n    @Input() public annularGrowth: number;\n    @Input() public annularWidth: number;\n    @Input() public gaugeConfig: IGaugeConfig;\n\n    public chartAssist: ChartAssist;\n    public contentPlugin: ChartDonutContentPlugin;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n\n    private labelsPlugin: DonutGaugeLabelsPlugin;\n    private readonly labelClearance = 40;\n\n    public ngOnChanges(\n        changes: ComponentChanges<DonutGaugePrototypeComponent>\n    ): void {\n        if (\n            (changes.size && !changes.size.firstChange) ||\n            (changes.annularWidth && !changes.annularWidth.firstChange) ||\n            (changes.annularGrowth && !changes.annularGrowth.firstChange)\n        ) {\n            this.updateDonutSize();\n            this.updateAnnularAttributes();\n            this.chartAssist.chart.updateDimensions();\n        }\n\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            this.labelsPlugin.config.disableThresholdLabels =\n                this.gaugeConfig.thresholds?.disableMarkers ?? false;\n\n            this.chartAssist.chart.updateDimensions();\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        const gaugeConfigWithLabelClearance = {\n            ...this.gaugeConfig,\n            labels: {\n                ...this.gaugeConfig.labels,\n                clearance: this.labelClearance,\n            },\n        };\n\n        this.labelsPlugin = new DonutGaugeLabelsPlugin();\n        this.chartAssist = GaugeUtil.createChartAssist(\n            gaugeConfigWithLabelClearance,\n            GaugeMode.Donut,\n            this.labelsPlugin\n        );\n        const gridConfig = this.chartAssist.chart.getGrid().config();\n        gridConfig.dimension.autoHeight = false;\n        gridConfig.dimension.autoWidth = false;\n\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chartAssist.chart.addPlugin(this.contentPlugin);\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            gaugeConfigWithLabelClearance,\n            GaugeMode.Donut\n        );\n\n        this.updateDonutSize();\n        this.updateAnnularAttributes();\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private updateDonutSize(): void {\n        const gridDimensions = this.chartAssist.chart\n            .getGrid()\n            .config().dimension;\n        gridDimensions.height(this.size);\n        gridDimensions.width(this.size);\n    }\n\n    private updateAnnularAttributes(): void {\n        this.seriesSet.forEach((series) => {\n            const rendererConfig = series.renderer\n                .config as IRadialRendererConfig;\n            // increase the max thickness from 30 for testing purposes\n            rendererConfig.maxThickness = 20000;\n            rendererConfig.annularGrowth = this.annularGrowth;\n            rendererConfig.annularWidth = this.annularWidth;\n        });\n    }\n}\n'},89372:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiCommonModule,\n    NuiFormFieldModule,\n    NuiTextboxModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { DonutGaugePrototypeComponent } from "./donut/donut-gauge-prototype.component";\nimport { GaugeTestPageComponent } from "./gauge-test-page.component";\nimport { LinearGaugeHorizontalPrototypeComponent } from "./horizontal/linear-gauge-horizontal-prototype.component";\nimport { LinearGaugeVerticalPrototypeComponent } from "./vertical/linear-gauge-vertical-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: GaugeTestPageComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        LinearGaugeHorizontalPrototypeComponent,\n        LinearGaugeVerticalPrototypeComponent,\n        DonutGaugePrototypeComponent,\n        GaugeTestPageComponent,\n    ],\n    imports: [\n        NuiCommonModule,\n        NuiFormFieldModule,\n        NuiTextboxModule,\n        DemoCommonModule,\n        NuiChartsModule,\n        FormsModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport default class GaugePrototypesModule {}\n'},52905:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="testing-region d-flex align-items-center justify-content-around">\n    <donut-gauge-prototype\n        [gaugeConfig]="gaugeConfig"\n        [size]="donutSize"\n        [annularGrowth]="annularGrowth"\n        [annularWidth]="thickness"\n    >\n    </donut-gauge-prototype>\n    <linear-gauge-vertical-prototype\n        [gaugeConfig]="gaugeConfig"\n    ></linear-gauge-vertical-prototype>\n    <linear-gauge-horizontal-prototype\n        [gaugeConfig]="gaugeConfig"\n    ></linear-gauge-horizontal-prototype>\n</div>\n\n<div class="d-flex justify-content-center">\n    <div class="column">\n        <div class="mb-2">\n            <nui-form-field\n                caption="Donut Annular Growth"\n                hint="Set to zero to have the donut obey the manual thickness setting"\n                [showOptionalText]="false"\n            >\n                <nui-textbox-number\n                    type="number"\n                    [(ngModel)]="annularGrowth"\n                    [minValue]="0"\n                    [step]="0.01"\n                    customBoxWidth="75px"\n                ></nui-textbox-number>\n            </nui-form-field>\n        </div>\n        <div class="mb-2">\n            <label for="donutSizeInput"> Donut Size </label>\n            <br />\n            <nui-textbox-number\n                type="number"\n                [(ngModel)]="donutSize"\n                [minValue]="0"\n                [step]="25"\n                customBoxWidth="75px"\n                name="donutSizeInput"\n            ></nui-textbox-number>\n        </div>\n    </div>\n    <div class="column ml-5">\n        <div class="mb-2">\n            <label for="valueInput"> Value </label>\n            <br />\n            <nui-textbox-number\n                type="number"\n                [ngModel]="value"\n                (ngModelChange)="onValueChange($event)"\n                [minValue]="0"\n                [maxValue]="maxValue"\n                [step]="valueStep"\n                customBoxWidth="75px"\n                name="valueInput"\n            ></nui-textbox-number>\n        </div>\n        <div class="mb-2">\n            <label for="thicknessInput"> Thickness </label>\n            <br />\n            <nui-textbox-number\n                type="number"\n                [ngModel]="thickness"\n                (ngModelChange)="onThicknessChange($event)"\n                [minValue]="0"\n                customBoxWidth="75px"\n                name="thicknessInput"\n            ></nui-textbox-number>\n        </div>\n        <div class="mb-2">\n            <label for="lowThresholdInput"> Low Threshold </label>\n            <br />\n            <nui-textbox-number\n                type="number"\n                [ngModel]="lowThreshold"\n                (ngModelChange)="onLowThresholdChange($event)"\n                [minValue]="0"\n                [maxValue]="highThreshold - valueStep"\n                [step]="valueStep"\n                customBoxWidth="75px"\n                name="lowThresholdInput"\n            ></nui-textbox-number>\n        </div>\n        <div class="mb-2">\n            <label for="highThresholdInput"> High Threshold </label>\n            <br />\n            <nui-textbox-number\n                type="number"\n                [ngModel]="highThreshold"\n                (ngModelChange)="onHighThresholdChange($event)"\n                [minValue]="lowThreshold + valueStep"\n                [maxValue]="maxValue"\n                [step]="valueStep"\n                customBoxWidth="75px"\n                name="highThresholdInput"\n            ></nui-textbox-number>\n        </div>\n    </div>\n    <div class="column ml-5">\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    id="enable-warning"\n                    class="mb-2"\n                    type="checkbox"\n                    [ngModel]="warningEnabled"\n                    (ngModelChange)="onWarningEnabledChange($event)"\n                />\n                <label class="px-3" for="enable-warning">Warning Enabled</label>\n            </div>\n        </div>\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    id="enable-critical"\n                    class="mb-2"\n                    type="checkbox"\n                    [(ngModel)]="criticalEnabled"\n                    (ngModelChange)="onCriticalEnabledChange($event)"\n                />\n                <label class="px-3" for="enable-critical"\n                    >Critical Enabled</label\n                >\n            </div>\n        </div>\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    class="mb-2"\n                    type="checkbox"\n                    id="enable-markers"\n                    [ngModel]="thresholdMarkersEnabled"\n                    (ngModelChange)="onEnableThresholdMarkersChange($event)"\n                />\n                <label class="px-3" for="enable-markers">Markers Enabled</label>\n            </div>\n        </div>\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    id="reversed"\n                    class="mb-2"\n                    type="checkbox"\n                    [ngModel]="reversed"\n                    (ngModelChange)="onReversedChange($event)"\n                />\n                <label class="px-3" for="reversed">Reversed</label>\n            </div>\n        </div>\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    id="flip-labels"\n                    class="mb-2"\n                    type="checkbox"\n                    [ngModel]="flipLabels"\n                    (ngModelChange)="onFlippedChange($event)"\n                />\n                <label class="px-3" for="flip-labels">Flip Labels</label>\n            </div>\n        </div>\n        <div class="ml-3">\n            <div class="d-flex align-items-center">\n                <input\n                    class="mb-2"\n                    type="checkbox"\n                    id="dark-theme"\n                    [ngModel]="themeSwitcher.isDarkModeEnabledSubject | async"\n                    (ngModelChange)="themeSwitcher.setDarkTheme($event)"\n                />\n                <label class="px-3" for="dark-theme">Dark Theme</label>\n            </div>\n        </div>\n    </div>\n</div>\n'},88580:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".testing-region {\n    height: 500px;\n}\n\n.column {\n    width: 200px;\n}\n"},12875:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnDestroy } from "@angular/core";\n\nimport { ThemeSwitchService, UnitConversionService } from "@nova-ui/bits";\nimport {\n    DEFAULT_RADIAL_RENDERER_CONFIG,\n    GaugeUtil,\n    IGaugeConfig,\n    StandardGaugeThresholdId,\n    StandardLinearGaugeThickness,\n    IGaugeThresholdsConfig,\n    Formatter,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "gauge-test-page",\n    templateUrl: "./gauge-test-page.component.html",\n    styleUrls: ["./gauge-test-page.component.less"],\n})\nexport class GaugeTestPageComponent implements OnDestroy {\n    public value = 950;\n    public maxValue = 2000;\n    public thresholds: IGaugeThresholdsConfig;\n    public gaugeConfig: IGaugeConfig;\n\n    public annularGrowth = DEFAULT_RADIAL_RENDERER_CONFIG.annularGrowth;\n    public thickness = StandardLinearGaugeThickness.Large;\n    public donutSize = 200;\n\n    public warningEnabled = true;\n    public criticalEnabled = true;\n    public thresholdMarkersEnabled = true;\n    public reversed = false;\n    public flipLabels = false;\n\n    public lowThreshold = 1000;\n    public highThreshold = 1500;\n    public valueStep = 10;\n\n    private originalWithRefreshRoute: boolean;\n    private labelFormatter: Formatter<string>;\n\n    constructor(\n        public themeSwitcher: ThemeSwitchService,\n        private unitConversionSvc: UnitConversionService\n    ) {\n        // disable route refreshing because the theme service currently always reverts to\n        // the light theme on route refresh unless route.data.showThemeSwitcher is \'true\'\n        this.originalWithRefreshRoute = this.themeSwitcher.withRefreshRoute;\n        this.themeSwitcher.withRefreshRoute = false;\n\n        this.labelFormatter = (d: string) => {\n            const conversion = this.unitConversionSvc.convert(\n                parseFloat(d),\n                1000,\n                2\n            );\n            return this.unitConversionSvc.getFullDisplay(conversion, "generic");\n        };\n\n        this.thresholds = GaugeUtil.createStandardThresholdsConfig(\n            this.lowThreshold,\n            this.highThreshold\n        );\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public ngOnDestroy(): void {\n        this.themeSwitcher.withRefreshRoute = this.originalWithRefreshRoute;\n    }\n\n    public onReversedChange(reversed: boolean): void {\n        this.reversed = reversed;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onFlippedChange(flipped: boolean): void {\n        this.flipLabels = flipped;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onValueChange(value: number): void {\n        this.value = value;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onThicknessChange(thickness: number): void {\n        this.thickness = thickness;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onLowThresholdChange(value: number): void {\n        this.lowThreshold = value;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onHighThresholdChange(value: number): void {\n        this.highThreshold = value;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onWarningEnabledChange(enabled: boolean): void {\n        this.warningEnabled = enabled;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onCriticalEnabledChange(enabled: boolean): void {\n        this.criticalEnabled = enabled;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    public onEnableThresholdMarkersChange(enabled: boolean): void {\n        this.thresholdMarkersEnabled = enabled;\n        this.gaugeConfig = this.getGaugeConfig();\n    }\n\n    private getGaugeConfig(): IGaugeConfig {\n        this.updateThresholdsConfig();\n\n        return {\n            value: this.value,\n            max: this.maxValue,\n            thresholds: this.thresholds,\n            labels: {\n                formatter: this.labelFormatter,\n                flipped: this.flipLabels,\n            },\n            linearThickness: this.thickness,\n        };\n    }\n\n    private updateThresholdsConfig() {\n        if (this.warningEnabled) {\n            this.thresholds.definitions[\n                StandardGaugeThresholdId.Warning\n            ].value = this.reversed ? this.highThreshold : this.lowThreshold;\n        }\n\n        if (this.criticalEnabled) {\n            this.thresholds.definitions[\n                StandardGaugeThresholdId.Critical\n            ].value = this.reversed ? this.lowThreshold : this.highThreshold;\n        }\n\n        this.thresholds.definitions[StandardGaugeThresholdId.Warning].enabled =\n            this.warningEnabled;\n        this.thresholds.definitions[StandardGaugeThresholdId.Critical].enabled =\n            this.criticalEnabled;\n        this.thresholds.reversed = this.reversed;\n        this.thresholds.disableMarkers = !this.thresholdMarkersEnabled;\n    }\n}\n'},12882:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="chart d-block" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},40034:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.chart {\n    width: 225px;\n}\n'},26804:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    LinearGaugeLabelsPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "linear-gauge-horizontal-prototype",\n    templateUrl: "./linear-gauge-horizontal-prototype.component.html",\n    styleUrls: ["./linear-gauge-horizontal-prototype.component.less"],\n})\nexport class LinearGaugeHorizontalPrototypeComponent\n    implements OnChanges, OnInit\n{\n    @Input() public gaugeConfig: IGaugeConfig;\n\n    public chartAssist: ChartAssist;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n    private labelsPlugin: LinearGaugeLabelsPlugin;\n\n    public ngOnChanges(\n        changes: ComponentChanges<LinearGaugeHorizontalPrototypeComponent>\n    ): void {\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            const gridConfig = this.chartAssist.chart.getGrid().config();\n            gridConfig.dimension.height(this.gaugeConfig.linearThickness ?? 0);\n\n            this.labelsPlugin.config.flippedLabels =\n                this.gaugeConfig.labels?.flipped ?? false;\n            this.labelsPlugin.config.disableThresholdLabels =\n                this.gaugeConfig.thresholds?.disableMarkers ?? false;\n\n            // update the margins to accommodate label direction changes\n            this.configureMargins();\n\n            this.chartAssist.chart.updateDimensions();\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.labelsPlugin = new LinearGaugeLabelsPlugin({\n            flippedLabels: this.gaugeConfig.labels?.flipped,\n        });\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Horizontal,\n            this.labelsPlugin\n        );\n        this.configureMargins();\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Horizontal\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private configureMargins() {\n        const gridConfig = this.chartAssist.chart.getGrid().config();\n\n        // set baseline margins\n        gridConfig.dimension.margin = {\n            top: 5,\n            right: 15,\n            bottom: 5,\n            left: 5,\n        };\n\n        // set clearance margin for threshold labels\n        gridConfig.dimension.margin = GaugeUtil.getMarginForLabelClearance(\n            this.gaugeConfig,\n            GaugeMode.Horizontal,\n            gridConfig.dimension.margin\n        );\n    }\n}\n'},76783:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex">\n    <nui-chart class="chart d-block" [chart]="chartAssist.chart"></nui-chart>\n</div>\n'},42899:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n\n.chart {\n    height: 225px;\n}\n'},39404:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\n\nimport { ComponentChanges } from "@nova-ui/bits";\nimport {\n    ChartAssist,\n    GaugeMode,\n    GaugeUtil,\n    IAccessors,\n    IChartAssistSeries,\n    IGaugeConfig,\n    LinearGaugeLabelsPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "linear-gauge-vertical-prototype",\n    templateUrl: "./linear-gauge-vertical-prototype.component.html",\n    styleUrls: ["./linear-gauge-vertical-prototype.component.less"],\n})\nexport class LinearGaugeVerticalPrototypeComponent\n    implements OnChanges, OnInit\n{\n    @Input() public gaugeConfig: IGaugeConfig;\n\n    public chartAssist: ChartAssist;\n    public seriesSet: IChartAssistSeries<IAccessors>[];\n    private labelsPlugin: LinearGaugeLabelsPlugin;\n\n    // extra clearance for the longer labels generated by the formatter\n    private readonly labelClearance = 35;\n\n    public ngOnChanges(\n        changes: ComponentChanges<LinearGaugeVerticalPrototypeComponent>\n    ): void {\n        if (changes.gaugeConfig && !changes.gaugeConfig.firstChange) {\n            const gridConfig = this.chartAssist.chart.getGrid().config();\n            gridConfig.dimension.width(this.gaugeConfig.linearThickness ?? 0);\n\n            this.labelsPlugin.config.flippedLabels =\n                this.gaugeConfig.labels?.flipped ?? false;\n            this.labelsPlugin.config.disableThresholdLabels =\n                this.gaugeConfig.thresholds?.disableMarkers ?? false;\n\n            // update the margins to accommodate label direction changes\n            this.configureMargins();\n\n            this.chartAssist.chart.updateDimensions();\n            this.chartAssist.update(\n                GaugeUtil.update(this.seriesSet, this.gaugeConfig)\n            );\n        }\n    }\n\n    public ngOnInit(): void {\n        this.labelsPlugin = new LinearGaugeLabelsPlugin({\n            flippedLabels: this.gaugeConfig.labels?.flipped,\n        });\n        this.chartAssist = GaugeUtil.createChartAssist(\n            this.gaugeConfig,\n            GaugeMode.Vertical,\n            this.labelsPlugin\n        );\n        this.configureMargins();\n\n        this.seriesSet = GaugeUtil.assembleSeriesSet(\n            this.gaugeConfig,\n            GaugeMode.Vertical\n        );\n        this.chartAssist.update(this.seriesSet);\n    }\n\n    private configureMargins() {\n        const gridConfig = this.chartAssist.chart.getGrid().config();\n\n        // set baseline margins\n        gridConfig.dimension.margin = {\n            top: 5,\n            right: 5,\n            bottom: 5,\n            left: 5,\n        };\n\n        // set clearance margin for threshold labels\n        const gaugeConfigWithLabelClearance = {\n            ...this.gaugeConfig,\n            labels: {\n                ...this.gaugeConfig.labels,\n                clearance: this.labelClearance,\n            },\n        };\n        gridConfig.dimension.margin = GaugeUtil.getMarginForLabelClearance(\n            gaugeConfigWithLabelClearance,\n            GaugeMode.Vertical,\n            gridConfig.dimension.margin\n        );\n    }\n}\n'},39836:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiCheckboxModule,\n    NuiExpanderModule,\n    NuiTextboxModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { PieChartTestComponent } from "./pie-chart-test/pie-chart.example.component";\n\nconst bubbleRoutes: Routes = [\n    {\n        path: "",\n        component: PieChartTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [PieChartTestComponent],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiButtonModule,\n        NuiCheckboxModule,\n        NuiTextboxModule,\n        RouterModule.forChild(bubbleRoutes),\n        NuiExpanderModule,\n    ],\n})\nexport default class PieChartExampleModule {}\n'},63584:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex flex-column" [style.height]="compact ? \'150px\' : \'500px\'">\n    <nui-expander>\n        <div class="d-flex flex-fill w-100 h-100" style="position: relative">\n            <nui-chart class="flex-fill w-100 h-100" [chart]="chart">\n            </nui-chart>\n            <nui-chart-donut-content [plugin]="contentPlugin">\n                <div *ngIf="showContent()">\n                    <div class="nui-text-page">57</div>\n                    <div class="nui-text-secondary">donuts</div>\n                </div>\n            </nui-chart-donut-content>\n            <div class="d-flex flex-column pl-2">\n                <nui-legend\n                    seriesUnitLabel="Share"\n                    [active]="chartAssist.isLegendActive"\n                    [interactive]="true"\n                    (mouseleave)="chartAssist.resetVisibleSeries()"\n                >\n                    <nui-legend-series\n                        *ngFor="\n                            let legendSeries of chartAssist.legendSeriesSet;\n                            trackBy: chartAssist.seriesTrackByFn\n                        "\n                        [descriptionPrimary]="legendSeries[\'name\']"\n                        [seriesRenderState]="\n                            chartAssist.renderStatesIndex[legendSeries.id]\n                                ?.state\n                        "\n                        (mouseenter)="\n                            chartAssist.emphasizeSeries(legendSeries.id)\n                        "\n                        [isSelected]="\n                            !chartAssist.isSeriesHidden(legendSeries.id)\n                        "\n                        (isSelectedChange)="\n                            chartAssist.toggleSeries(legendSeries.id, $event)\n                        "\n                    >\n                        <nui-rich-legend-tile\n                            [value]="\n                                chartAssist.getHighlightedValue(\n                                    legendSeries,\n                                    \'y\',\n                                    \'value\'\n                                )\n                            "\n                            [backgroundColor]="\n                                chartAssist.palette.standardColors.get(\n                                    legendSeries.id\n                                )\n                            "\n                            [color]="\n                                chartAssist.palette.textColors.get(\n                                    legendSeries.id\n                                )\n                            "\n                        >\n                        </nui-rich-legend-tile>\n                    </nui-legend-series>\n                </nui-legend>\n            </div>\n        </div>\n    </nui-expander>\n\n    <div class="btn-group">\n        <button nui-button (click)="refreshDonut(1)" type="button">\n            1 circle donut\n        </button>\n        <button nui-button (click)="refreshDonut(2)" type="button">\n            2 circle donut\n        </button>\n        <button nui-button (click)="refreshPie()" type="button">Pie</button>\n        <button nui-button (click)="refreshPieInteraction()" type="button">\n            Refresh and toggle interaction\n        </button>\n        <button nui-button (click)="compact = !compact" type="button">\n            Toggle Size\n        </button>\n    </div>\n</div>\n<div class="d-flex flex-column w-25" *ngIf="showContent()">\n    <h3>Annular\'s params</h3>\n    <p>\n        Setting one of the parameters to 0 will force donut chart to use default\n        annular width of 20px. Default width is also configurable.\n    </p>\n    <span>Donut\'s width in percents</span\n    ><nui-textbox-number\n        [value]="15"\n        [maxValue]="80"\n        (valueChange)="updateWidth($event)"\n    ></nui-textbox-number>\n    <span>Max donut\'s width in px</span\n    ><nui-textbox-number\n        [value]="renderer.config.maxThickness"\n        (valueChange)="updatemaxWidth($event)"\n    ></nui-textbox-number>\n</div>\n'},94313:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, Inject, OnInit } from "@angular/core";\n\nimport { ToastService } from "@nova-ui/bits";\nimport {\n    Chart,\n    ChartAssist,\n    ChartDonutContentPlugin,\n    GridConfig,\n    IAccessors,\n    IChartAssistSeries,\n    IChartEvent,\n    IChartSeries,\n    IRadialAccessors,\n    LinearScale,\n    PieRenderer,\n    RadialGrid,\n    radialPreprocessor,\n    RadialRenderer,\n    Scales,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\n/**\n * @ignore\n */\n@Component({\n    selector: "nui-pie-chart-example",\n    templateUrl: "./pie-chart.example.component.html",\n})\nexport class PieChartTestComponent implements OnInit {\n    public compact = false;\n    public chart = new Chart(new RadialGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public contentPlugin: ChartDonutContentPlugin;\n\n    public renderer: RadialRenderer;\n    private scales: Scales;\n    private interactive: boolean = false;\n\n    constructor(@Inject(ToastService) private toastr: ToastService) {}\n\n    public ngOnInit(): void {\n        const gridConfig = new GridConfig();\n        gridConfig.interactive = false;\n        this.chart.getGrid().config(gridConfig);\n        this.scales = {\n            r: new LinearScale(), // radius can be linear or band (for donuts) scale. No need in radial scale\n        };\n        this.scales.r.fixDomain([0, 1]);\n\n        this.chartAssist = new ChartAssist(this.chart, this.processSeries);\n        this.contentPlugin = new ChartDonutContentPlugin();\n        this.chart.addPlugin(this.contentPlugin);\n        this.refreshPie();\n\n        this.chart\n            .getEventBus()\n            .getStream("click")\n            .subscribe((event: IChartEvent) => {\n                this.toastr.info({\n                    title: "Event Published",\n                    message: `event: click; data: ${event.data}`,\n                    options: {\n                        timeOut: 1500,\n                    },\n                });\n            });\n    }\n\n    private processSeries = (\n        chartSeriesSet: IChartAssistSeries<IRadialAccessors>[]\n    ) =>\n        radialPreprocessor(\n            chartSeriesSet,\n            (series: IChartSeries<IAccessors>) =>\n                !this.chartAssist.isSeriesHidden(series.id)\n        );\n\n    private generateSeriesSet(layers = 1): IChartAssistSeries<IAccessors>[] {\n        const donutSeriesSet = DataGenerator.generateMockOrdinalSeriesSet(\n            ["Chrome", "Firefox", "Edge"],\n            layers\n        );\n        donutSeriesSet.forEach((s) => {\n            s.id += `-${Math.round(Math.random() * 100)}`;\n        });\n\n        return donutSeriesSet.map((dataSeries) => ({\n            ...dataSeries,\n            accessors: {\n                data: {\n                    value: (d: any) => d.value,\n                },\n                series: {\n                    color: this.chartAssist.palette.standardColors.get,\n                },\n            },\n            scales: this.scales,\n            renderer: this.renderer,\n            showInLegend: true,\n        }));\n    }\n\n    public refreshPie(): void {\n        this.renderer = new PieRenderer();\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public updateWidth(value: number): void {\n        this.renderer.config.annularGrowth = value / 100;\n        this.updateDonut();\n    }\n\n    public updatemaxWidth(value: number): void {\n        this.renderer.config.maxThickness = value;\n        this.updateDonut();\n    }\n\n    public refreshPieInteraction(): void {\n        this.interactive = !this.interactive;\n        if (this.interactive) {\n            this.renderer.interaction = {\n                arc: {\n                    mouseover: "",\n                    mouseout: "",\n                    click: "",\n                },\n            };\n        } else {\n            // @ts-ignore: Preventing breaking flow\n            this.renderer.interaction = undefined;\n        }\n        this.chartAssist.update(this.generateSeriesSet());\n    }\n\n    public refreshDonut(layers: number): void {\n        this.renderer = new RadialRenderer();\n        // Hack for demo page, since it loads pie first and we can switch between chart renderers\n        this.chartAssist.update(this.generateSeriesSet(layers));\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n\n    public showContent(): boolean {\n        return !(this.renderer instanceof PieRenderer);\n    }\n\n    private updateDonut() {\n        setTimeout(() => {\n            this.chart.updateDimensions();\n        }, 0);\n    }\n}\n'},97526:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-example-wrapper\n    filenamePrefix="data-point-popovers-prototype"\n    exampleTitle="Data Point Popovers Prototype"\n>\n    <nui-chart class="d-flex" [chart]="chart"></nui-chart>\n\n    <div class="my-3 d-flex align-items-center">\n        <nui-switch\n            class="ml-3 py-2"\n            (valueChange)="onToggleClickHandling($event)"\n            >Enable Click Handling</nui-switch\n        >\n        <button\n            *ngIf="renderer.config.markerInteraction?.clickable"\n            class="ml-3"\n            type="button"\n            displayStyle="action"\n            (click)="onReset()"\n            nui-button\n        >\n            Reset Popover\n        </button>\n    </div>\n\n    <nui-chart-popover\n        [plugin]="popoverPlugin"\n        [template]="popoverTemplate"\n    ></nui-chart-popover>\n\n    <ng-template let-dataPoints="dataPoints" #popoverTemplate>\n        <div class="p-3">\n            <div *ngFor="let item of dataPoints | keyvalue">\n                <div>\n                    <strong>{{ item.key }}:</strong>\n                </div>\n                <div>\n                    <code>Data: {{ item.value.data | json }}</code>\n                </div>\n                <div>\n                    <code>Position: {{ item.value.position | json }}</code>\n                </div>\n            </div>\n        </div>\n    </ng-template>\n</nui-example-wrapper>\n'},68181:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    DATA_POINT_INTERACTION_RESET,\n    IChartSeries,\n    IDataPoint,\n    IInteractionDataPointEvent,\n    ILineAccessors,\n    InteractionType,\n    INTERACTION_DATA_POINT_EVENT,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    templateUrl: "./data-point-popovers-prototype.component.html",\n})\nexport class DataPointPopoversPrototypeComponent implements OnInit {\n    public chart: Chart;\n    public renderer = new LineRenderer({\n        markerInteraction: { enabled: true },\n    });\n    public scales: IXYScales = {\n        x: new TimeScale(),\n        y: new LinearScale(),\n    };\n    public accessors: LineAccessors;\n\n    public chartAssist: ChartAssist;\n    public popoverPlugin: ChartPopoverPlugin;\n\n    public ngOnInit(): void {\n        this.buildChart();\n        this.updateChart();\n    }\n\n    public onReset(): void {\n        // send INTERACTION_DATA_POINT_EVENT with index DATA_POINT_INTERACTION_RESET to hide popover if its displayed\n        const data: IInteractionDataPointEvent = {\n            interactionType: InteractionType.Click,\n            dataPoint: { index: DATA_POINT_INTERACTION_RESET } as IDataPoint,\n        };\n        this.chart\n            .getEventBus()\n            .getStream(INTERACTION_DATA_POINT_EVENT)\n            .next({ data });\n    }\n\n    public onToggleClickHandling(enable: boolean): void {\n        // enable the pointer cursor when the data point markers are hovered\n        const markerInteraction = this.renderer.config?.markerInteraction;\n        if (markerInteraction) {\n            markerInteraction.clickable = enable;\n        }\n        this.buildChart(enable ? InteractionType.Click : InteractionType.Hover);\n        this.updateChart();\n    }\n\n    private buildChart(\n        dataPointInteractionType: InteractionType = InteractionType.Hover\n    ) {\n        // set the desired interaction type for popover handling\n        this.popoverPlugin = new ChartPopoverPlugin({\n            eventStreamId: INTERACTION_DATA_POINT_EVENT,\n            interactionType: dataPointInteractionType,\n        });\n\n        this.chart = new Chart(new XYGrid());\n        this.chartAssist = new ChartAssist(this.chart);\n        this.accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        this.chart.addPlugin(this.popoverPlugin);\n    }\n\n    private updateChart() {\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (s) => ({\n                ...s,\n                scales: this.scales,\n                renderer: this.renderer,\n                accessors: this.accessors,\n            })\n        );\n\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-26T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-28T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-01T15:14:29.909Z", format), y: 80 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},23378:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart" nuiChartCollectionId="1"></nui-chart>\n\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template let-dataPoints="dataPoints" #popoverTemplate>\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.key }}: </strong>\n            <code>{{ item.value.data | json }}</code>\n        </div>\n    </div>\n</ng-template>\n'},95549:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-popover-prototype",\n    templateUrl: "./line-chart-popover-prototype.component.html",\n})\nexport class LineChartPopoverPrototypeComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public popoverPlugin = new ChartPopoverPlugin();\n\n    public ngOnInit(): void {\n        const scales: IXYScales = {\n            x: new TimeScale("x"),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (s) => ({\n                ...s,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // plugin setup\n        this.chart.addPlugin(this.popoverPlugin);\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    const baseDate = "2016-12-25T15:14:29.909Z";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(baseDate, format), y: 30 },\n                { x: moment(baseDate, format).add(1, "day"), y: 95 },\n                { x: moment(baseDate, format).add(2, "day"), y: 15 },\n                { x: moment(baseDate, format).add(3, "day"), y: 60 },\n                { x: moment(baseDate, format).add(4, "day"), y: 35 },\n                { x: moment(baseDate, format).add(5, "day"), y: 35 },\n                { x: moment(baseDate, format).add(6, "day"), y: 95 },\n                { x: moment(baseDate, format).add(7, "day"), y: 15 },\n                { x: moment(baseDate, format).add(8, "day"), y: 60 },\n                { x: moment(baseDate, format).add(9, "day"), y: 35 },\n                { x: moment(baseDate, format).add(10, "day"), y: 35 },\n                { x: moment(baseDate, format).add(11, "day"), y: 95 },\n                { x: moment(baseDate, format).add(12, "day"), y: 15 },\n                { x: moment(baseDate, format).add(13, "day"), y: 60 },\n                { x: moment(baseDate, format).add(14, "day"), y: 35 },\n                { x: moment(baseDate, format).add(15, "day"), y: 35 },\n                { x: moment(baseDate, format).add(16, "day"), y: 95 },\n                { x: moment(baseDate, format).add(17, "day"), y: 15 },\n                { x: moment(baseDate, format).add(18, "day"), y: 60 },\n                { x: moment(baseDate, format).add(19, "day"), y: 35 },\n                { x: moment(baseDate, format).add(20, "day"), y: 35 },\n                { x: moment(baseDate, format).add(21, "day"), y: 95 },\n                { x: moment(baseDate, format).add(22, "day"), y: 15 },\n                { x: moment(baseDate, format).add(23, "day"), y: 60 },\n                { x: moment(baseDate, format).add(24, "day"), y: 35 },\n                { x: moment(baseDate, format).add(25, "day"), y: 35 },\n                { x: moment(baseDate, format).add(26, "day"), y: 95 },\n                { x: moment(baseDate, format).add(27, "day"), y: 15 },\n                { x: moment(baseDate, format).add(28, "day"), y: 60 },\n                { x: moment(baseDate, format).add(29, "day"), y: 35 },\n                { x: moment(baseDate, format).add(30, "day"), y: 35 },\n                { x: moment(baseDate, format).add(31, "day"), y: 95 },\n                { x: moment(baseDate, format).add(32, "day"), y: 15 },\n                { x: moment(baseDate, format).add(33, "day"), y: 60 },\n                { x: moment(baseDate, format).add(34, "day"), y: 35 },\n                { x: moment(baseDate, format).add(35, "day"), y: 35 },\n                { x: moment(baseDate, format).add(36, "day"), y: 95 },\n                { x: moment(baseDate, format).add(37, "day"), y: 15 },\n                { x: moment(baseDate, format).add(38, "day"), y: 60 },\n                { x: moment(baseDate, format).add(39, "day"), y: 35 },\n                { x: moment(baseDate, format).add(40, "day"), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment(baseDate, format), y: 60 },\n                { x: moment(baseDate, format).add(1, "day"), y: 40 },\n                { x: moment(baseDate, format).add(3, "day"), y: 70 },\n                { x: moment(baseDate, format).add(5, "day"), y: 45 },\n                { x: moment(baseDate, format).add(7, "day"), y: 90 },\n                { x: moment(baseDate, format).add(9, "day"), y: 90 },\n                { x: moment(baseDate, format).add(11, "day"), y: 40 },\n                { x: moment(baseDate, format).add(13, "day"), y: 70 },\n                { x: moment(baseDate, format).add(15, "day"), y: 45 },\n                { x: moment(baseDate, format).add(17, "day"), y: 90 },\n                { x: moment(baseDate, format).add(19, "day"), y: 90 },\n                { x: moment(baseDate, format).add(21, "day"), y: 40 },\n                { x: moment(baseDate, format).add(23, "day"), y: 70 },\n                { x: moment(baseDate, format).add(25, "day"), y: 45 },\n                { x: moment(baseDate, format).add(27, "day"), y: 90 },\n                { x: moment(baseDate, format).add(29, "day"), y: 90 },\n                { x: moment(baseDate, format).add(31, "day"), y: 40 },\n                { x: moment(baseDate, format).add(33, "day"), y: 70 },\n                { x: moment(baseDate, format).add(35, "day"), y: 45 },\n                { x: moment(baseDate, format).add(37, "day"), y: 90 },\n                { x: moment(baseDate, format).add(39, "day"), y: 90 },\n            ],\n        },\n    ];\n}\n'},49953:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="container">\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n    <line-chart-popover-prototype\n        class="chart d-block"\n    ></line-chart-popover-prototype>\n</div>\n'},53858:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".chart {\n    margin-top: 75px;\n}\n"},27685:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    templateUrl: "./popover-performance-test.component.html",\n    styleUrls: ["./popover-performance-test.component.less"],\n})\nexport class PopoverPerformanceTestComponent {}\n'},67751:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiSwitchModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { DataPointPopoversPrototypeComponent } from "./data-point/data-point-popovers-prototype.component";\nimport { LineChartPopoverPrototypeComponent } from "./line-chart/line-chart-popover-prototype.component";\nimport { PopoverPerformanceTestComponent } from "./line-chart/popover-performance-test.component";\n\nconst routes: Routes = [\n    {\n        path: "line",\n        component: LineChartPopoverPrototypeComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "performance",\n        component: PopoverPerformanceTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "data-point",\n        component: DataPointPopoversPrototypeComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        LineChartPopoverPrototypeComponent,\n        DataPointPopoversPrototypeComponent,\n        PopoverPerformanceTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiSwitchModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [],\n})\nexport default class PopoversPrototypeModule {}\n'},13438:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiButtonModule, NuiIconModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { SparkPrototypeComponent } from "./spark-prototype/spark-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: SparkPrototypeComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [SparkPrototypeComponent],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport default class SparkPrototypeModule {}\n'},6531:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<button nui-button (click)="update()" type="button">Refresh</button>\n<div class="spark-container mt-5 p-3">\n    <div\n        *ngFor="let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn"\n    >\n        <div class="d-flex">\n            <nui-chart\n                class="w-100"\n                [chart]="spark.chart"\n                nuiChartCollectionId="1"\n            ></nui-chart>\n            <div class="d-flex flex-column pl-2">\n                <nui-legend-series\n                    [interactive]="false"\n                    [active]="chartAssist.isLegendActive"\n                    [descriptionPrimary]="spark.chartSeriesSet[0].name"\n                >\n                    <nui-rich-legend-tile\n                        unitLabel="sec"\n                        [value]="\n                            chartAssist.getHighlightedValue(\n                                spark.chartSeriesSet[0],\n                                \'y\',\n                                \'value\'\n                            )\n                        "\n                        [backgroundColor]="\n                            colorPalette.standardColors.get(\n                                spark.chartSeriesSet[0].id\n                            )\n                        "\n                        [color]="\n                            colorPalette.textColors.get(\n                                spark.chartSeriesSet[0].id\n                            )\n                        "\n                    >\n                        <nui-chart-marker\n                            [marker]="markers.get(spark.chartSeriesSet[0].id)"\n                            [color]="\n                                colorPalette.standardColors.get(\n                                    spark.chartSeriesSet[0].id\n                                )\n                            "\n                            rightEdge\n                        >\n                        </nui-chart-marker>\n                    </nui-rich-legend-tile>\n                </nui-legend-series>\n            </div>\n        </div>\n    </div>\n</div>\n'},25606:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".spark {\n    &-container {\n        width: 500px;\n        box-shadow: 2px 2px 10px -2px black;\n    }\n}\n"},92096:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    ChartPalette,\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    IChartPalette,\n    ILineAccessors,\n    ISpark,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SequentialChartMarkerProvider,\n    SparkChartAssist,\n} from "@nova-ui/charts";\n\nimport { DataGenerator } from "../../../../../data-generator";\n\n/**\n * This is here just to test a prototype of an angular component that will use Nova Charts\n */\n@Component({\n    selector: "nui-spark-prototype",\n    templateUrl: "./spark-prototype.component.html",\n    styleUrls: ["./spark-prototype.component.less"],\n})\nexport class SparkPrototypeComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n    public colorPalette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n\n    private sparkLineRenderer: LineRenderer;\n    private sparkXScale = new LinearScale();\n\n    public ngOnInit(): void {\n        this.sparkLineRenderer = new LineRenderer();\n\n        this.sparkXScale.formatters.tick = (value: any) =>\n            Math.round(value).toString();\n        this.chartAssist = new SparkChartAssist();\n\n        this.update();\n    }\n\n    public update(): void {\n        this.chartAssist.updateSparks(\n            this.generateSparkSeriesSet(Math.floor(Math.random() * 6 + 1))\n        );\n    }\n\n    private generateSparkSeriesSet(\n        numSparks: number\n    ): ISpark<ILineAccessors>[] {\n        const sparks: ISpark<ILineAccessors>[] = [];\n        const accessors = new LineAccessors(\n            this.colorPalette.standardColors,\n            this.markers\n        );\n\n        for (let i = 0; i < numSparks; ++i) {\n            const sparkYScale = new LinearScale();\n            sparkYScale.formatters.value = (v) => Number(v).toPrecision(4);\n            const sparkScales = {\n                x: this.sparkXScale,\n                y: sparkYScale,\n            };\n\n            sparks.push({\n                id: `${i}`,\n                chartSeriesSet: [\n                    {\n                        id: `spark-series-${i + 1}`,\n                        name: `Spark Series ${i + 1}`,\n                        accessors,\n                        data: DataGenerator.mockLineData(10),\n                        scales: sparkScales,\n                        renderer: this.sparkLineRenderer,\n                    },\n                    {\n                        id: `spark-series-${i + 1}-b`,\n                        name: `Spark Series ${i + 1}-b`,\n                        accessors,\n                        data: DataGenerator.mockLineData(10),\n                        scales: sparkScales,\n                        renderer: this.sparkLineRenderer,\n                    },\n                ],\n            });\n        }\n\n        return sparks;\n    }\n}\n'},23384:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { DragDropModule } from "@angular/cdk/drag-drop";\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiIconModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ChartStatusTestComponent } from "./status-test/chart-status-test.component";\nimport { ChartWaterfallSimpleComponent } from "./waterfall-simple/chart-waterfall-simple.component";\nimport { ChartWaterfallTestComponent } from "./waterfall-test/chart-waterfall-test.component";\n\nconst collectionRoutes: Routes = [\n    {\n        path: "",\n        component: ChartStatusTestComponent,\n    },\n    {\n        path: "waterfall",\n        component: ChartWaterfallTestComponent,\n    },\n    {\n        path: "waterfall-simple",\n        component: ChartWaterfallSimpleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartStatusTestComponent,\n        ChartWaterfallSimpleComponent,\n        ChartWaterfallTestComponent,\n    ],\n    imports: [\n        DragDropModule,\n        NuiIconModule,\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n})\nexport default class ChartStatusExampleModule {}\n'},29711:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<p class="nui-text-page">Threshold section example</p>\n\n<div class="d-flex flex-column">\n    <nui-chart class="d-flex" [chart]="chartThreshold" class="p-2"></nui-chart>\n</div>\n\n<p class="nui-text-page">Band (Band\'ish) scales on both scales</p>\n\n<div class="d-flex flex-column">\n    <nui-chart class="d-flex" [chart]="chartBand" class="p-2"></nui-chart>\n</div>\n'},66128:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { AfterViewInit, Component } from "@angular/core";\nimport range from "lodash/range";\nimport moment from "moment/moment";\n\nimport { IconService } from "@nova-ui/bits";\nimport {\n    BandScale,\n    BarRenderer,\n    BarStatusGridConfig,\n    Chart,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IChartSeries,\n    IStatusAccessors,\n    IValueProvider,\n    MappedValueProvider,\n    RenderState,\n    statusAccessors,\n    StatusAccessors,\n    SvgMarker,\n    TimeIntervalScale,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n}\n\n@Component({\n    selector: "nui-status-chart-test-example",\n    templateUrl: "./chart-status-test.component.html",\n})\nexport class ChartStatusTestComponent implements AfterViewInit {\n    public chartThreshold = new Chart(new XYGrid(new BarStatusGridConfig()));\n    public chartBand = new Chart(new XYGrid(new BarStatusGridConfig()));\n\n    public customMarkers: IValueProvider<SvgMarker>;\n\n    private thresholdScales: { x: TimeScale; y: BandScale };\n    private bandScales: { x: TimeIntervalScale; y: BandScale };\n\n    constructor(private iconService: IconService) {\n        const getStatusMarker = (status: string) =>\n            new SvgMarker(this.iconService.getStatusIcon(status));\n\n        this.customMarkers = new MappedValueProvider({\n            [Status.Up]: getStatusMarker(Status.Up),\n            [Status.Warning]: getStatusMarker(Status.Warning),\n            [Status.Critical]: getStatusMarker(Status.Critical),\n        });\n    }\n\n    public ngAfterViewInit(): void {\n        this.chartThreshold.updateDimensions();\n        this.chartBand.updateDimensions();\n\n        const bandScale = new BandScale();\n        bandScale.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        const timeIntervalScale = new TimeIntervalScale(\n            moment.duration(100, "hours")\n        );\n        timeIntervalScale.fixDomain([\n            moment().toDate(),\n            moment().add(1000, "hours").toDate(),\n        ]);\n\n        const timeScale = new TimeScale();\n        // This formats label in interaction label plugin\n        timeScale.formatters.labelFormatter = (d: any) =>\n            moment(d).format("LL");\n\n        this.thresholdScales = {\n            y: bandScale,\n            x: timeScale,\n        };\n        this.bandScales = {\n            y: bandScale,\n            x: timeIntervalScale,\n        };\n\n        const renderer = new BarRenderer();\n        const accessors = statusAccessors(\n            new MappedValueProvider<string>(getStatusValueMap())\n        );\n\n        // Thickness accessor should be used to specify which status corresponds to a thin bar or thick\n        accessors.data.thickness = (data: any) =>\n            data.status === Status.Up ? BarRenderer.THIN : BarRenderer.THICK;\n\n        // Here we assemble the complete chart series.\n        const thresholdSeriesSet: IChartSeries<IStatusAccessors>[] = getData({\n            numberOfSeries: 10,\n            isRandom: true,\n        }).map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: this.thresholdScales,\n        }));\n        // Here we assemble the complete chart series.\n        const bandSeriesSet: IChartSeries<IStatusAccessors>[] = getData({\n            numberOfSeries: 1,\n            isRandom: false,\n        }).map((d) => ({\n            ...d,\n            accessors,\n            renderer,\n            scales: this.thresholdScales,\n        }));\n\n        this.chartThreshold.update(thresholdSeriesSet);\n        this.chartThreshold.setSeriesStates(\n            thresholdSeriesSet.map((series) => ({\n                seriesId: series.id,\n                state: RenderState.deemphasized,\n            }))\n        );\n\n        this.chartBand.update(bandSeriesSet);\n    }\n}\n\nfunction getStatusValueMap() {\n    return {\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[9],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[5],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[3],\n    };\n}\n\n/* Chart data */\nfunction getData(\n    config: { numberOfSeries: number; isRandom: boolean } = {\n        numberOfSeries: 1,\n        isRandom: true,\n    }\n) {\n    const getDate = (hours: number) => moment().add({ hours }).toDate();\n\n    const generateThresholdData = (isRandom: boolean) => () => {\n        let nextStart = 0;\n        const thresholds: any[] = [];\n        while (nextStart < 1000) {\n            let nextFinish = nextStart + (isRandom ? Math.random() * 100 : 100);\n            if (nextFinish >= 1000) {\n                nextFinish = 1000;\n            }\n            const statusSeed = Math.random();\n            thresholds.push({\n                start: nextStart,\n                end: nextFinish,\n                status:\n                    statusSeed > 0.5\n                        ? Status.Up\n                        : statusSeed > 0.2\n                        ? Status.Warning\n                        : Status.Critical,\n            });\n            nextStart = nextFinish;\n        }\n        return thresholds;\n    };\n\n    const seriesData = range(config.numberOfSeries);\n\n    return seriesData\n        .map(generateThresholdData(config.isRandom))\n        .map((series, i) => ({\n            id: "series-" + i,\n            name: "Series " + i,\n            data: series.map((d) => ({\n                value: d.end - d.start,\n                status: d.status,\n                start: getDate(d.start),\n                end: getDate(d.end),\n            })),\n        }));\n}\n'},21172:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="chart">\n    <nui-chart class="d-flex" [chart]="gridChart"></nui-chart>\n</div>\n'},63746:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { AfterViewInit, Component } from "@angular/core";\n\nimport {\n    BandScale,\n    BarHighlightStrategy,\n    BarHorizontalGridConfig,\n    BarRenderer,\n    Chart,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    HorizontalBarAccessors,\n    LinearScale,\n    MappedValueProvider,\n    XYGrid,\n} from "@nova-ui/charts";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-waterfall-simple",\n    templateUrl: "./chart-waterfall-simple.component.html",\n})\nexport class ChartWaterfallSimpleComponent implements AfterViewInit {\n    public palette = new ChartPalette(\n        new MappedValueProvider<string>({\n            connect: CHART_PALETTE_CS1[0],\n            dns: CHART_PALETTE_CS1[1],\n            send: CHART_PALETTE_CS1[2],\n            ttfb: CHART_PALETTE_CS1[3],\n            cdownload: CHART_PALETTE_CS1[4],\n        })\n    );\n\n    public gridChart = new Chart(new XYGrid(new BarHorizontalGridConfig()));\n\n    public listItems = [\n        {\n            category: "Category 1",\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 178,\n                },\n            ],\n        },\n        {\n            category: "Category 2",\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 788,\n                },\n            ],\n        },\n        {\n            category: "Category 3",\n            data: [\n                {\n                    type: "connect",\n                    start: 178, // in ms\n                    end: 222,\n                },\n                {\n                    type: "dns",\n                    start: 222,\n                    end: 239,\n                },\n                {\n                    type: "send",\n                    start: 239,\n                    end: 259,\n                },\n                {\n                    type: "ttfb",\n                    start: 259,\n                    end: 309,\n                },\n                {\n                    type: "cdownload",\n                    start: 309,\n                    end: 578,\n                },\n            ],\n        },\n        {\n            category: "Category 4",\n            data: [\n                {\n                    type: "connect",\n                    start: 578, // in ms\n                    end: 590,\n                },\n                {\n                    type: "dns",\n                    start: 590,\n                    end: 799,\n                },\n                {\n                    type: "send",\n                    start: 799,\n                    end: 888,\n                },\n                {\n                    type: "ttfb",\n                    start: 888,\n                    end: 900,\n                },\n                {\n                    type: "cdownload",\n                    start: 900,\n                    end: 990,\n                },\n            ],\n        },\n    ];\n    private scales: { x: LinearScale; y: BandScale };\n\n    public ngAfterViewInit(): void {\n        const bandScale = new BandScale();\n        bandScale.padding(0.5);\n        const linearScale = new LinearScale();\n\n        this.scales = {\n            y: bandScale,\n            x: linearScale,\n        };\n        this.scales.x.formatters.tick = (value: number) =>\n            `${Number(value / 1000).toFixed(1)}s`;\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarHighlightStrategy("x"),\n        });\n        const accessors = new HorizontalBarAccessors();\n        accessors.data.color = (d: any) =>\n            this.palette.standardColors.get(d.type);\n\n        const categories: any[] = [];\n        const seriesSet: any[] = [];\n\n        this.listItems.forEach((item: any, i: number) => {\n            categories.push(item.category);\n            seriesSet.push({\n                id: `series-${i}`,\n                name: `Series ${i}`,\n                data: item.data.map((d: any) => ({\n                    value: d.end - d.start,\n                    category: item.category,\n                    type: d.type,\n                    ["__bar"]: {\n                        start: d.start,\n                        end: d.end,\n                    },\n                })),\n                accessors,\n                scales: this.scales,\n                renderer,\n            });\n        });\n        bandScale.fixDomain(categories.reverse());\n        this.gridChart.update(seriesSet);\n    }\n}\n'},88366:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div>\n    <div cdkDropList class="example-list" (cdkDropListDropped)="drop($event)">\n        <div\n            *ngFor="let item of listItems; let i = index; let first = first"\n            class="d-flex flex-row align-items-center waterfall-chart-list-item"\n            cdkDrag\n        >\n            <nui-icon icon="{{ item.icon }}" class="p-2"></nui-icon>\n            <div style="overflow: hidden" [style.width.px]="200" class="p-2">\n                <span>{{ item.url }}</span>\n            </div>\n            <div class="d-flex">\n                <div\n                    class="d-flex h-100"\n                    *ngIf="first"\n                    #gridChartPlaceholder\n                ></div>\n                <nui-chart class="d-flex" [chart]="item.chart"></nui-chart>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #templatePortalGrid>\n    <nui-chart class="d-flex" [chart]="gridChart"></nui-chart>\n</ng-template>\n'},13553:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import "@nova-ui/bits/sdk/less/mixins";\n\n.waterfall-chart-list-item:hover {\n    .setCssVariable(background-color, nui-color-selected);\n}\n\n.waterfall-chart-list-item {\n    .setCssVariable(background-color, nui-color-bg-content);\n}\n'},38783:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { CdkDragDrop, moveItemInArray } from "@angular/cdk/drag-drop";\nimport {\n    ConnectionPositionPair,\n    Overlay,\n    OverlayPositionBuilder,\n    PositionStrategy,\n    ScrollStrategyOptions,\n} from "@angular/cdk/overlay";\nimport { TemplatePortal } from "@angular/cdk/portal";\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    OnInit,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n} from "@angular/core";\n\nimport {\n    BandScale,\n    BarRenderer,\n    BarStatusGridConfig,\n    Chart,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    HIGHLIGHT_DATA_POINT_EVENT,\n    HorizontalBarAccessors,\n    ISetDomainEventPayload,\n    LinearScale,\n    MappedValueProvider,\n    NoopAccessors,\n    NoopRenderer,\n    SELECT_DATA_POINT_EVENT,\n    SET_DOMAIN_EVENT,\n    XYGrid,\n    XYGridConfig,\n    ZoomPlugin,\n} from "@nova-ui/charts";\n\n/**\n * This is here just to test a prototype of angular component, that will use new chart core\n *\n * @ignore\n */\n@Component({\n    selector: "nui-chart-waterfall-test",\n    templateUrl: "./chart-waterfall-test.component.html",\n    styleUrls: ["./chart-waterfall-test.component.less"],\n})\nexport class ChartWaterfallTestComponent implements AfterViewInit, OnInit {\n    // TODO: 1. overlay for grid. 2. top axis 3. popup on hover example\n    public palette = new ChartPalette(\n        new MappedValueProvider<string>({\n            connect: CHART_PALETTE_CS1[0],\n            dns: CHART_PALETTE_CS1[1],\n            send: CHART_PALETTE_CS1[2],\n            ttfb: CHART_PALETTE_CS1[3],\n            cdownload: CHART_PALETTE_CS1[4],\n        })\n    );\n\n    public gridChart = new Chart(new XYGrid());\n\n    public positionStrategy: PositionStrategy;\n    public templatePortal: TemplatePortal;\n\n    public listItems = [\n        {\n            url: "http://www.google.com",\n            size: 924, // in Bytes\n            icon: "xml-file",\n            chart: new Chart(\n                new XYGrid(new BarStatusGridConfig({ showBottomAxis: false }))\n            ),\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 178,\n                },\n            ],\n        },\n        {\n            url: "http://www2.google.com",\n            size: 924, // in Bytes\n            icon: "xml-file",\n            chart: new Chart(\n                new XYGrid(new BarStatusGridConfig({ showBottomAxis: false }))\n            ),\n            data: [\n                {\n                    type: "connect",\n                    start: 0, // in ms\n                    end: 22,\n                },\n                {\n                    type: "dns",\n                    start: 22,\n                    end: 39,\n                },\n                {\n                    type: "send",\n                    start: 39,\n                    end: 59,\n                },\n                {\n                    type: "ttfb",\n                    start: 59,\n                    end: 109,\n                },\n                {\n                    type: "cdownload",\n                    start: 109,\n                    end: 788,\n                },\n            ],\n        },\n        {\n            url: "http://www.google.com/cat.png",\n            size: 3333, // in Bytes\n            icon: "image",\n            chart: new Chart(\n                new XYGrid(new BarStatusGridConfig({ showBottomAxis: false }))\n            ),\n            data: [\n                {\n                    type: "connect",\n                    start: 178, // in ms\n                    end: 222,\n                },\n                {\n                    type: "dns",\n                    start: 222,\n                    end: 239,\n                },\n                {\n                    type: "send",\n                    start: 239,\n                    end: 259,\n                },\n                {\n                    type: "ttfb",\n                    start: 259,\n                    end: 309,\n                },\n                {\n                    type: "cdownload",\n                    start: 309,\n                    end: 578,\n                },\n            ],\n        },\n        {\n            url: "http://www.google.com/revenge.png",\n            size: 3333, // in Bytes\n            icon: "image",\n            chart: new Chart(\n                new XYGrid(new BarStatusGridConfig({ showBottomAxis: false }))\n            ),\n            data: [\n                {\n                    type: "connect",\n                    start: 578, // in ms\n                    end: 590,\n                },\n                {\n                    type: "dns",\n                    start: 590,\n                    end: 799,\n                },\n                {\n                    type: "send",\n                    start: 799,\n                    end: 888,\n                },\n                {\n                    type: "ttfb",\n                    start: 888,\n                    end: 900,\n                },\n                {\n                    type: "cdownload",\n                    start: 900,\n                    end: 990,\n                },\n            ],\n        },\n    ];\n    private scales: { x: LinearScale; y: BandScale };\n\n    @ViewChild("templatePortalGrid")\n    public templatePortalGrid: TemplateRef<any>;\n    @ViewChild("gridChartPlaceholder") public gridChartPlaceholder: ElementRef;\n\n    constructor(\n        private overlay: Overlay,\n        private overlayPositionBuilder: OverlayPositionBuilder,\n        private _viewContainerRef: ViewContainerRef,\n        private scrollStrategyOptions: ScrollStrategyOptions\n    ) {}\n\n    public ngOnInit(): void {\n        this.gridChart.addPlugin(new ZoomPlugin());\n\n        this.gridChart\n            .getEventBus()\n            .getStream(SET_DOMAIN_EVENT)\n            .subscribe((event) => {\n                const payload = <ISetDomainEventPayload>event.data;\n                this.listItems.forEach((item) => {\n                    this.scales.x.fixDomain(payload[this.scales.x.id]);\n                    item.chart.updateDimensions();\n                });\n            });\n    }\n\n    public ngAfterViewInit(): void {\n        this.templatePortal = new TemplatePortal(\n            this.templatePortalGrid,\n            this._viewContainerRef\n        );\n        const positions: ConnectionPositionPair[] = [\n            {\n                overlayX: "start",\n                overlayY: "top",\n                originX: "start",\n                originY: "top",\n            },\n        ];\n        this.positionStrategy = this.overlayPositionBuilder\n            .flexibleConnectedTo(this.gridChartPlaceholder)\n            .withPositions(positions)\n            .withFlexibleDimensions(true)\n            .withPush(true);\n        const overlayRef = this.overlay.create({\n            positionStrategy: this.positionStrategy,\n            scrollStrategy: this.scrollStrategyOptions.close(),\n        });\n\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.fixDomain([0, 1000]);\n        bandScale.fixDomain(["cat1"]);\n\n        this.scales = {\n            y: bandScale,\n            x: linearScale,\n        };\n        this.scales.x.formatters.tick = (value: number) =>\n            `${Number(value / 1000).toFixed(1)}s`;\n        const renderer = new BarRenderer();\n        const accessors = new HorizontalBarAccessors();\n        accessors.data.color = (d: any) =>\n            this.palette.standardColors.get(d.type);\n\n        let commonWidth = 0;\n\n        this.listItems.forEach((item) => {\n            const seriesSet = [\n                {\n                    id: "series-1",\n                    name: "Series 1",\n                    data: item.data.map((d) => ({\n                        value: d.end - d.start,\n                        category: "cat1",\n                        type: d.type,\n                        ["__bar"]: {\n                            start: d.start,\n                            end: d.end,\n                        },\n                    })),\n                    accessors,\n                    scales: this.scales,\n                    renderer,\n                },\n            ];\n\n            item.chart.update(seriesSet);\n\n            item.chart\n                .getEventBus()\n                .getStream(HIGHLIGHT_DATA_POINT_EVENT)\n                .subscribe(console.log);\n            item.chart\n                .getEventBus()\n                .getStream(SELECT_DATA_POINT_EVENT)\n                .subscribe(console.log);\n\n            commonWidth = item.chart.getGrid().config().dimension.width(); // TODO: executed n times\n        });\n\n        // Handle grid\n\n        const config = this.gridChart.getGrid().config() as XYGridConfig;\n        config.dimension.height(this.listItems.length * 32);\n        config.dimension.width(commonWidth);\n        config.dimension.autoHeight = false;\n        config.axis.left.visible = false;\n        config.axis.left.gridTicks = false;\n        config.axis.bottom.gridTicks = true;\n\n        this.gridChart.update([\n            {\n                id: "i am grid",\n                name: "i am grid",\n                data: [],\n                accessors: new NoopAccessors(),\n                scales: this.scales,\n                renderer: new NoopRenderer(),\n            },\n        ]);\n\n        this.gridChart.updateDimensions();\n\n        // this.templatePortalGrid.elementRef.nativeElement.offsetHeight = config.dimension.height;\n        overlayRef.attach(this.templatePortal);\n    }\n\n    drop(event: CdkDragDrop<string[]>): void {\n        moveItemInArray(\n            this.listItems,\n            event.previousIndex,\n            event.currentIndex\n        );\n    }\n}\n'},92861:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n<br />\n<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="reversedThresholdsChart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="reversedThresholdsChartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="reversedThresholdsChartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of reversedThresholdsChartAssist.legendSeriesSet;\n                    trackBy: reversedThresholdsChartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="\n                    reversedThresholdsChartAssist.emphasizeSeries(\n                        legendSeries.id\n                    )\n                "\n                [seriesRenderState]="\n                    reversedThresholdsChartAssist.renderStatesIndex[\n                        legendSeries.id\n                    ]?.state\n                "\n                [isSelected]="\n                    !reversedThresholdsChartAssist.isSeriesHidden(\n                        legendSeries.id\n                    )\n                "\n                (isSelectedChange)="\n                    reversedThresholdsChartAssist.toggleSeries(\n                        legendSeries.id,\n                        $event\n                    )\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="\n                        reversedThresholdsChartAssist.getHighlightedValue(\n                            legendSeries,\n                            \'y\'\n                        )\n                    "\n                    [backgroundColor]="\n                        reversedThresholdsChartAssist.palette.standardColors.get(\n                            legendSeries.id\n                        )\n                    "\n                    [color]="\n                        reversedThresholdsChartAssist.palette.textColors.get(\n                            legendSeries.id\n                        )\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="\n                            reversedThresholdsChartAssist.markers.get(\n                                legendSeries.id\n                            )\n                        "\n                        [color]="\n                            reversedThresholdsChartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},50908:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    BandScale,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    ISimpleThresholdZone,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    TimeIntervalScale,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Error = "error",\n    Warning = "warning",\n}\n\n@Component({\n    templateUrl: "./thresholds-prototype.component.html",\n})\nexport class ThresholdsPrototypeComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public reversedThresholdsChart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n    public reversedThresholdsChartAssist = new ChartAssist(\n        this.reversedThresholdsChart\n    );\n\n    private thresholdsPalette = new ChartPalette(\n        new MappedValueProvider({\n            [Status.Error]: CHART_PALETTE_CS_S_EXTENDED[2],\n            [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        })\n    );\n\n    constructor(private thresholdsService: ThresholdsService) {}\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeIntervalScale(duration(5, "minutes")),\n            y: new LinearScale(),\n        };\n        scales.y.fixDomain([0, 100]);\n\n        const reversedThresholdScales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        reversedThresholdScales.y.fixDomain([0, 100]);\n\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n        // Note that the x scale is shared between the foreground series and the background series.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const bgScales: IXYScales = {\n            x: scales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const reversedThresholdBgScales: IXYScales = {\n            x: reversedThresholdScales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n        const reversedZoneDefinitions: ISimpleThresholdZone[] =\n            getReversedZoneDefinitions();\n        // Here we define the main data series on the chart which will be visualized as lines\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            // It\'s possible to manually define zones by area-like data series with start/end values for every data point. We don\'t do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                zoneDefinitions,\n                this.thresholdsPalette.standardColors\n            );\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(\n                    s,\n                    zones,\n                    bgScales,\n                    this.thresholdsPalette.backgroundColors\n                ),\n            ];\n\n            thresholds.push(...seriesThresholds);\n        }\n\n        const reversedThresholdsSeriesSet: IChartSeries<ILineAccessors>[] =\n            getData().map((d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales: reversedThresholdScales,\n            }));\n\n        const reversedThresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of reversedThresholdsSeriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                reversedZoneDefinitions,\n                this.thresholdsPalette.standardColors\n            );\n            this.thresholdsService.injectThresholdsData(s, zones);\n            const seriesThresholds = [\n                ...this.thresholdsService.getThresholdLines(zones),\n                this.thresholdsService.getBackgrounds(\n                    s,\n                    zones,\n                    reversedThresholdBgScales,\n                    this.thresholdsPalette.backgroundColors\n                ),\n            ];\n\n            reversedThresholds.push(...seriesThresholds);\n        }\n\n        this.chartAssist.update([...thresholds, ...seriesSet]);\n        this.reversedThresholdsChartAssist.update([\n            ...reversedThresholds,\n            ...reversedThresholdsSeriesSet,\n        ]);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 70, end: 90 },\n        { status: Status.Warning, start: 40, end: 70 },\n    ];\n}\n\nfunction getReversedZoneDefinitions() {\n    return [\n        { status: Status.Error, end: 20 },\n        { status: Status.Warning, start: 20, end: 40 },\n    ];\n}\n\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:05:00Z", format).toDate(), y: 20 },\n                { x: moment("2016-12-25T15:10:00Z", format).toDate(), y: 80 },\n                { x: moment("2016-12-25T15:15:00Z", format).toDate(), y: 10 },\n                { x: moment("2016-12-25T15:20:00Z", format).toDate(), y: 0 },\n                { x: moment("2016-12-25T15:25:00Z", format).toDate(), y: 50 },\n                { x: moment("2016-12-25T15:30:00Z", format).toDate(), y: 20 },\n            ],\n        },\n    ];\n}\n'},12197:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { ThresholdsPrototypeComponent } from "./thresholds-prototype.component";\n\nconst routes: Routes = [\n    {\n        path: "",\n        component: ThresholdsPrototypeComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [ThresholdsPrototypeComponent],\n    imports: [DemoCommonModule, NuiChartsModule, RouterModule.forChild(routes)],\n})\nexport default class ThresholdsPrototypeModule {}\n'},21032:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n'},16489:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    barAccessors,\n    BarRenderer,\n    Chart,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    Scales,\n    TimeIntervalScale,\n    XYGrid,\n    ZoomPlugin,\n} from "@nova-ui/charts";\n\nconst format = "YYYY-MM-DDTHH:mm:ssZ";\n\n@Component({\n    selector: "nui-line-time-series-test",\n    templateUrl: "./line-time-series-test.component.html",\n})\nexport class LineTimeSeriesTestComponent implements OnInit {\n    // XYGrid is used for rendering the axes\n    public chart = new Chart(new XYGrid());\n    public palette = new ChartPalette(CHART_PALETTE_CS1);\n\n    public ngOnInit(): void {\n        this.chart.addPlugin(new ZoomPlugin());\n\n        // In case of a line chart, the scale definitions are flexible.\n        // This example demonstrates a scenario with time on the X scale and a numeric value on the Y scale.\n        const scales: Scales = {\n            x: new TimeIntervalScale(duration(5, "minutes")).fixDomain([\n                moment("2016-12-25T14:30:00Z", format).toDate(),\n                moment("2016-12-25T18:00:00Z", format).toDate(),\n            ]),\n            y: new LinearScale(),\n        };\n        const lines = this.getLines(scales);\n        const bars = this.getBars(scales);\n\n        this.chart.update([...lines, ...bars]);\n    }\n\n    private getLines(scales: Scales) {\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new LineRenderer();\n        const accessors = new LineAccessors();\n        accessors.series.color = (seriesId, series) =>\n            this.palette.standardColors.get(series.name);\n\n        return [\n            {\n                id: "series-1",\n                name: "Series 1",\n                data: [\n                    {\n                        x: moment("2016-12-25T15:00:00Z", format).toDate(),\n                        y: 30,\n                    },\n                    {\n                        x: moment("2016-12-25T15:21:00Z", format).toDate(),\n                        y: 95,\n                    },\n                    {\n                        x: moment("2016-12-25T15:44:00Z", format).toDate(),\n                        y: 15,\n                    },\n                    {\n                        x: moment("2016-12-25T16:00:00Z", format).toDate(),\n                        y: 60,\n                    },\n                    {\n                        x: moment("2016-12-25T17:30:00Z", format).toDate(),\n                        y: 35,\n                    },\n                ],\n            },\n            {\n                id: "series-2",\n                name: "Series 2",\n                data: [\n                    {\n                        x: moment("2016-12-25T15:00:00Z", format).toDate(),\n                        y: 60,\n                    },\n                    {\n                        x: moment("2016-12-25T15:10:00Z", format).toDate(),\n                        y: 40,\n                    },\n                    {\n                        x: moment("2016-12-25T15:45:00Z", format).toDate(),\n                        y: 70,\n                    },\n                    {\n                        x: moment("2016-12-25T16:15:00Z", format).toDate(),\n                        y: 45,\n                    },\n                    {\n                        x: moment("2016-12-25T17:20:00Z", format).toDate(),\n                        y: 90,\n                    },\n                ],\n            },\n        ].map((s) => ({\n            ...s,\n            scales,\n            renderer,\n            accessors,\n        }));\n    }\n\n    private getBars(scales: Scales) {\n        // The line renderer will make the chart look like a line chart.\n        const renderer = new BarRenderer();\n        const accessors = barAccessors(\n            undefined,\n            this.palette.backgroundColors\n        );\n        accessors.data.start = (d) => d.value / 2;\n        accessors.data.end = (d) => d.value * 1.5;\n\n        return [\n            {\n                id: "bars-1",\n                name: "Series 1",\n                data: [\n                    {\n                        category: moment(\n                            "2016-12-25T15:00:00Z",\n                            format\n                        ).toDate(),\n                        value: 30,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T15:20:00Z",\n                            format\n                        ).toDate(),\n                        value: 95,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T15:40:00Z",\n                            format\n                        ).toDate(),\n                        value: 15,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T16:00:00Z",\n                            format\n                        ).toDate(),\n                        value: 60,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T17:30:00Z",\n                            format\n                        ).toDate(),\n                        value: 35,\n                    },\n                ],\n            },\n            {\n                id: "bars-2",\n                name: "Series 2",\n                data: [\n                    {\n                        category: moment(\n                            "2016-12-25T15:00:00Z",\n                            format\n                        ).toDate(),\n                        value: 60,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T15:10:00Z",\n                            format\n                        ).toDate(),\n                        value: 40,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T15:45:00Z",\n                            format\n                        ).toDate(),\n                        value: 70,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T16:15:00Z",\n                            format\n                        ).toDate(),\n                        value: 45,\n                    },\n                    {\n                        category: moment(\n                            "2016-12-25T17:20:00Z",\n                            format\n                        ).toDate(),\n                        value: 90,\n                    },\n                ],\n            },\n        ].map((s) => ({\n            ...s,\n            scales,\n            renderer,\n            accessors,\n        }));\n    }\n}\n'},191:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { LineTimeSeriesTestComponent } from "./line-time-series/line-time-series-test.component";\n\nconst collectionRoutes: Routes = [\n    {\n        path: "line",\n        component: LineTimeSeriesTestComponent,\n    },\n];\n\n@NgModule({\n    declarations: [LineTimeSeriesTestComponent],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        RouterModule.forChild(collectionRoutes),\n    ],\n})\nexport default class TimeBandsExampleModule {}\n'},20502:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart" nuiChartCollectionId="1"></nui-chart>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span\n            class="pl-2"\n            [textContent]="formatNumber(dataPoint.data.y)"\n        ></span>\n    </div>\n</ng-template>\n'},28443:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartTooltipsPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "line-chart-tooltips-prototype",\n    templateUrl: "./line-chart-tooltips-prototype.component.html",\n})\nexport class LineChartTooltipsPrototypeComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public tooltipsPlugin = new ChartTooltipsPlugin();\n\n    public ngOnInit(): void {\n        const scales: IXYScales = {\n            x: new TimeScale("x"),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (s) => ({\n                ...s,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // plugin setup\n        this.chart.addPlugin(this.tooltipsPlugin);\n        (this.chart.getGrid() as XYGrid).config().axis.left.fit = true;\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n\n    public formatNumber(\n        intNum: number,\n        nanMessage: string = "Undefined",\n        precision: number = 0\n    ): string {\n        if (!this.isNumericValuePresent(intNum)) {\n            return nanMessage;\n        }\n        return intNum.toLocaleString(undefined, {\n            maximumFractionDigits: precision,\n        });\n    }\n\n    // eslint-disable-next-line arrow-body-style\n    public isNumericValuePresent = (numericValue: number): boolean => {\n        return numericValue !== undefined && numericValue !== null;\n    };\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    const baseDate = "2016-12-25T15:14:29.909Z";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment(baseDate, format), y: 30 },\n                { x: moment(baseDate, format).add(1, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(2, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(3, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(4, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(5, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(6, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(7, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(8, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(9, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(10, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(11, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(12, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(13, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(14, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(15, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(16, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(17, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(18, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(19, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(20, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(21, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(22, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(23, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(24, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(25, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(26, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(27, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(28, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(29, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(30, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(31, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(32, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(33, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(34, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(35, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(36, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(37, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(38, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(39, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(40, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(41, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(42, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(43, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(44, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(45, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(46, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(47, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(48, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(49, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(50, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(51, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(52, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(53, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(54, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(55, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(56, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(57, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(58, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(59, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(60, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(61, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(62, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(63, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(64, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(65, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(66, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(67, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(68, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(69, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(70, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(71, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(72, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(73, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(74, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(75, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(76, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(77, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(78, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(79, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(80, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(81, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(82, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(83, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(84, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(85, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(86, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(87, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(88, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(89, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(90, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(91, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(92, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(93, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(94, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(95, "day"), y: 60000 },\n                { x: moment(baseDate, format).add(96, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(97, "day"), y: 35000 },\n                { x: moment(baseDate, format).add(98, "day"), y: 95000 },\n                { x: moment(baseDate, format).add(99, "day"), y: 15000 },\n                { x: moment(baseDate, format).add(100, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(101, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(102, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(103, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(104, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(105, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(106, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(107, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(108, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(109, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(110, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(111, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(112, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(113, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(114, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(115, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(116, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(117, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(118, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(119, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(120, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(121, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(122, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(123, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(124, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(125, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(126, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(127, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(128, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(129, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(130, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(131, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(132, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(133, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(134, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(135, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(136, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(137, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(138, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(139, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(140, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(141, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(142, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(143, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(144, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(145, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(146, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(147, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(148, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(149, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(150, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(151, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(152, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(153, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(154, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(155, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(156, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(157, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(158, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(159, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(160, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(161, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(162, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(163, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(164, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(165, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(166, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(167, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(168, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(169, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(170, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(171, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(172, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(173, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(174, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(175, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(176, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(177, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(178, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(179, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(180, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(181, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(182, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(183, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(184, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(185, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(186, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(187, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(188, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(189, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(190, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(191, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(192, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(193, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(194, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(195, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(196, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(197, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(198, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(199, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(200, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(201, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(202, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(203, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(204, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(205, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(206, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(207, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(208, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(209, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(210, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(211, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(212, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(213, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(214, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(215, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(216, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(217, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(218, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(219, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(220, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(221, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(222, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(223, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(224, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(225, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(226, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(227, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(228, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(229, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(230, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(231, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(232, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(233, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(234, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(235, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(236, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(237, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(238, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(239, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(240, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(241, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(242, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(243, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(244, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(245, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(246, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(247, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(248, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(249, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(250, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(251, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(252, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(253, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(254, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(255, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(256, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(257, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(258, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(259, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(260, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(261, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(262, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(263, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(264, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(265, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(266, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(267, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(268, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(269, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(270, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(271, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(272, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(273, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(274, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(275, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(276, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(277, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(278, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(279, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(280, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(281, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(282, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(283, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(284, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(285, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(286, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(287, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(288, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(289, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(290, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(291, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(292, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(293, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(294, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(295, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(296, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(297, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(298, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(299, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(300, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(301, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(302, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(303, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(304, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(305, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(306, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(307, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(308, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(309, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(310, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(311, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(312, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(313, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(314, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(315, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(316, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(317, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(318, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(319, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(320, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(321, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(322, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(323, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(324, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(325, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(326, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(327, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(328, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(329, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(330, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(331, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(332, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(333, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(334, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(335, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(336, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(337, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(338, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(339, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(340, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(341, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(342, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(343, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(344, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(345, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(346, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(347, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(348, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(349, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(350, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(351, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(352, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(353, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(354, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(355, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(356, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(357, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(358, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(359, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(360, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(361, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(362, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(363, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(364, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(365, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(366, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(367, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(368, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(369, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(370, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(371, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(372, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(373, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(374, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(375, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(376, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(377, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(378, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(379, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(380, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(381, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(382, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(383, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(384, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(385, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(386, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(387, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(388, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(389, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(390, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(391, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(392, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(393, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(394, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(395, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(396, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(397, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(398, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(399, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(400, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(401, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(402, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(403, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(404, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(405, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(406, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(407, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(408, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(409, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(410, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(411, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(412, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(413, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(414, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(415, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(416, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(417, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(418, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(419, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(420, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(421, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(422, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(423, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(424, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(425, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(426, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(427, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(428, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(429, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(430, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(431, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(432, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(433, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(434, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(435, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(436, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(437, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(438, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(439, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(440, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(441, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(442, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(443, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(444, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(445, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(446, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(447, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(448, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(449, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(450, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(451, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(452, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(453, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(454, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(455, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(456, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(457, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(458, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(459, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(460, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(461, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(462, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(463, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(464, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(465, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(466, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(467, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(468, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(469, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(470, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(471, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(472, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(473, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(474, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(475, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(476, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(477, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(478, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(479, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(480, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(481, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(482, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(483, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(484, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(485, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(486, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(487, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(488, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(489, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(490, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(491, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(492, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(493, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(494, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(495, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(496, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(497, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(498, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(499, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(500, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(501, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(502, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(503, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(504, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(505, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(506, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(507, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(508, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(509, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(510, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(511, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(512, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(513, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(514, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(515, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(516, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(517, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(518, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(519, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(520, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(521, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(522, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(523, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(524, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(525, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(526, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(527, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(528, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(529, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(530, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(531, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(532, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(533, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(534, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(535, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(536, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(537, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(538, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(539, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(540, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(541, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(542, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(543, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(544, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(545, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(546, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(547, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(548, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(549, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(550, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(551, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(552, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(553, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(554, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(555, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(556, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(557, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(558, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(559, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(560, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(561, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(562, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(563, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(564, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(565, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(566, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(567, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(568, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(569, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(570, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(571, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(572, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(573, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(574, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(575, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(576, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(577, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(578, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(579, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(580, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(581, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(582, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(583, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(584, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(585, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(586, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(587, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(588, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(589, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(590, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(591, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(592, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(593, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(594, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(595, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(596, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(597, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(598, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(599, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(600, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(601, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(602, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(603, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(604, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(605, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(606, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(607, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(608, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(609, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(610, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(611, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(612, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(613, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(614, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(615, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(616, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(617, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(618, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(619, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(620, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(621, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(622, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(623, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(624, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(625, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(626, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(627, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(628, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(629, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(630, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(631, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(632, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(633, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(634, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(635, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(636, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(637, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(638, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(639, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(640, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(641, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(642, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(643, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(644, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(645, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(646, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(647, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(648, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(649, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(650, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(651, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(652, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(653, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(654, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(655, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(656, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(657, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(658, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(659, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(660, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(661, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(662, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(663, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(664, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(665, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(666, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(667, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(668, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(669, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(670, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(671, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(672, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(673, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(674, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(675, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(676, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(677, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(678, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(679, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(680, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(681, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(682, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(683, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(684, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(685, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(686, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(687, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(688, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(689, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(690, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(691, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(692, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(693, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(694, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(695, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(696, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(697, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(698, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(699, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(700, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(701, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(702, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(703, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(704, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(705, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(706, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(707, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(708, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(709, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(710, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(711, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(712, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(713, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(714, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(715, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(716, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(717, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(718, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(719, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(720, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(721, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(722, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(723, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(724, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(725, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(726, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(727, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(728, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(729, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(730, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(731, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(732, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(733, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(734, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(735, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(736, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(737, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(738, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(739, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(740, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(741, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(742, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(743, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(744, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(745, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(746, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(747, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(748, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(749, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(750, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(751, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(752, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(753, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(754, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(755, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(756, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(757, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(758, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(759, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(760, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(761, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(762, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(763, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(764, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(765, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(766, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(767, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(768, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(769, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(770, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(771, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(772, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(773, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(774, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(775, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(776, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(777, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(778, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(779, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(780, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(781, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(782, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(783, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(784, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(785, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(786, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(787, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(788, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(789, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(790, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(791, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(792, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(793, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(794, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(795, "day"), y: 95000 },\n                // { x: moment(baseDate, format).add(796, "day"), y: 15000 },\n                // { x: moment(baseDate, format).add(797, "day"), y: 60000 },\n                // { x: moment(baseDate, format).add(798, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(799, "day"), y: 35000 },\n                // { x: moment(baseDate, format).add(800, "day"), y: 95000 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment(baseDate, format), y: 60 },\n                { x: moment(baseDate, format).add(1, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(3, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(5, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(7, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(9, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(11, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(13, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(15, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(17, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(19, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(21, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(23, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(25, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(27, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(29, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(31, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(33, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(35, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(37, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(39, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(41, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(43, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(45, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(47, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(49, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(51, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(53, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(55, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(57, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(59, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(61, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(63, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(65, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(67, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(69, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(71, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(73, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(75, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(77, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(79, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(81, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(83, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(85, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(87, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(89, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(91, "day"), y: 40000 },\n                { x: moment(baseDate, format).add(93, "day"), y: 70000 },\n                { x: moment(baseDate, format).add(95, "day"), y: 45000 },\n                { x: moment(baseDate, format).add(97, "day"), y: 90000 },\n                { x: moment(baseDate, format).add(99, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(101, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(103, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(105, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(107, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(109, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(111, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(113, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(115, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(117, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(119, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(121, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(123, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(125, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(127, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(129, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(131, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(133, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(135, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(137, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(139, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(141, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(143, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(145, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(147, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(149, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(151, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(153, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(155, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(157, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(159, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(161, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(163, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(165, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(167, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(169, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(171, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(173, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(175, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(177, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(179, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(181, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(183, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(185, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(187, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(189, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(191, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(193, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(195, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(197, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(199, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(201, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(203, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(205, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(207, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(209, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(211, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(213, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(215, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(217, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(219, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(221, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(223, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(225, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(227, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(229, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(231, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(233, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(235, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(237, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(239, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(241, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(243, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(245, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(247, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(249, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(251, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(253, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(255, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(257, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(259, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(261, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(263, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(265, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(267, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(269, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(271, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(273, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(275, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(277, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(279, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(281, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(283, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(285, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(287, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(289, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(291, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(293, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(295, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(297, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(299, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(301, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(303, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(305, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(307, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(309, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(311, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(313, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(315, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(317, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(319, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(321, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(323, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(325, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(327, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(329, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(331, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(333, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(335, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(337, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(339, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(341, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(343, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(345, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(347, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(349, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(351, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(353, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(355, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(357, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(359, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(361, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(363, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(365, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(367, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(369, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(371, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(373, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(375, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(377, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(379, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(381, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(383, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(385, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(387, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(389, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(391, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(393, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(395, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(397, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(399, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(401, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(403, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(405, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(407, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(409, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(411, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(413, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(415, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(417, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(419, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(421, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(423, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(425, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(427, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(429, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(431, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(433, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(435, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(437, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(439, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(441, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(443, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(445, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(447, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(449, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(451, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(453, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(455, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(457, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(459, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(461, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(463, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(465, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(467, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(469, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(471, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(473, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(475, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(477, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(479, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(481, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(483, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(485, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(487, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(489, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(491, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(493, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(495, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(497, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(499, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(501, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(503, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(505, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(507, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(509, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(511, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(513, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(515, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(517, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(519, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(521, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(523, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(525, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(527, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(529, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(531, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(533, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(535, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(537, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(539, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(541, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(543, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(545, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(547, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(549, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(551, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(553, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(555, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(557, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(559, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(561, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(563, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(565, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(567, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(569, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(571, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(573, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(575, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(577, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(579, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(581, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(583, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(585, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(587, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(589, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(591, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(593, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(595, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(597, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(599, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(601, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(603, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(605, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(607, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(609, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(611, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(613, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(615, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(617, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(619, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(621, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(623, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(625, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(627, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(629, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(631, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(633, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(635, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(637, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(639, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(641, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(643, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(645, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(647, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(649, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(651, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(653, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(655, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(657, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(659, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(661, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(663, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(665, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(667, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(669, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(671, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(673, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(675, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(677, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(679, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(681, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(683, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(685, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(687, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(689, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(691, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(693, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(695, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(697, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(699, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(701, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(703, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(705, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(707, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(709, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(711, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(713, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(715, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(717, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(719, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(721, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(723, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(725, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(727, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(729, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(731, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(733, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(735, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(737, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(739, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(741, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(743, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(745, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(747, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(749, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(751, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(753, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(755, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(757, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(759, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(761, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(763, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(765, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(767, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(769, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(771, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(773, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(775, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(777, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(779, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(781, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(783, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(785, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(787, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(789, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(791, "day"), y: 40000 },\n                // { x: moment(baseDate, format).add(793, "day"), y: 70000 },\n                // { x: moment(baseDate, format).add(795, "day"), y: 45000 },\n                // { x: moment(baseDate, format).add(797, "day"), y: 90000 },\n                // { x: moment(baseDate, format).add(799, "day"), y: 90000 },\n            ],\n        },\n    ];\n}\n'},30061:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="chart-container">\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n    <line-chart-tooltips-prototype\n        class="chart d-block"\n    ></line-chart-tooltips-prototype>\n</div>\n'},62707:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".chart-container {\n    height: 80vh;\n    overflow: auto;\n}\n\n.chart {\n    margin-top: 30px;\n}\n"},67804:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    templateUrl: "./tooltips-performance-test.component.html",\n    styleUrls: ["./tooltips-performance-test.component.less"],\n})\nexport class TooltipsPerformanceTestComponent {}\n'},46210:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiButtonModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiSwitchModule,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { LineChartTooltipsPrototypeComponent } from "./line-chart/line-chart-tooltips-prototype.component";\nimport { TooltipsPerformanceTestComponent } from "./line-chart/tooltips-performance-test.component";\n\nconst routes: Routes = [\n    {\n        path: "performance",\n        component: TooltipsPerformanceTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        LineChartTooltipsPrototypeComponent,\n        TooltipsPerformanceTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiSwitchModule,\n        RouterModule.forChild(routes),\n    ],\n    providers: [],\n})\nexport default class TooltipsPrototypeModule {}\n'},56363:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart" style="position: relative">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n        <ng-container *ngIf="donutContentPlugin">\n            <nui-chart-donut-content [plugin]="donutContentPlugin">\n                <div class="nui-text-page">57</div>\n                <div class="nui-text-secondary">donuts</div>\n            </nui-chart-donut-content>\n        </ng-container>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [active]="chartAssist.isLegendActive"\n            [interactive]="false"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                descriptionPrimary="{{ legendSeries.id | titlecase }}"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="legendSeries.data[0]?.value"\n                    backgroundColor="transparent"\n                >\n                </nui-rich-legend-tile>\n                <nui-icon [icon]="iconMap[legendSeries.id]"></nui-icon>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n    <div class="legend-bottom">\n        <nui-radio-group\n            class="nui-radio-group-inline"\n            [(value)]="chartType"\n            (valueChange)="updateChartType()"\n        >\n            <nui-radio *ngFor="let type of chartTypes" [value]="type">\n                {{ type | titlecase }}\n            </nui-radio>\n        </nui-radio-group>\n    </div>\n</div>\n'},9264:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    BandScale,\n    barGrid,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    ChartDonutContentPlugin,\n    CHART_PALETTE_CS_S_EXTENDED,\n    getAutomaticDomainWithIncludedInterval,\n    HorizontalBarAccessors,\n    IAccessors,\n    IScale,\n    LinearScale,\n    MappedValueProvider,\n    PieRenderer,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n    Renderer,\n    Scales,\n    VerticalBarAccessors,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-chart-one-dimensional-data-example",\n    templateUrl: "./one-dimensional-data.example.component.html",\n})\nexport class OneDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = ["horizontal bar", "vertical bar", "pie", "donut"];\n    public chartType = this.chartTypes[0];\n    public categories = [\n        "down",\n        "critical",\n        "warning",\n        "unknown",\n        "ok",\n        "other",\n    ];\n    public iconNames = [\n        "down",\n        "critical",\n        "warning",\n        "unknown",\n        "up",\n        "unmanaged",\n    ];\n    public values = [24, 16, 7, 6, 97, 4];\n    public iconMap = zipObject(\n        this.categories,\n        this.iconNames.map((n) => `status_${n}`)\n    );\n    private colorProvider = new MappedValueProvider<string>(\n        zipObject(\n            this.categories,\n            CHART_PALETTE_CS_S_EXTENDED.filter((_, index) => index % 2 === 0)\n        )\n    );\n\n    public chartAssist: ChartAssist;\n    public donutContentPlugin?: ChartDonutContentPlugin;\n\n    public ngOnInit(): void {\n        this.updateChartType();\n    }\n\n    public updateChartType(): void {\n        this.buildChart();\n        this.chartAssist.chart.updateDimensions();\n\n        this.updateChart();\n    }\n\n    private buildChart() {\n        this.donutContentPlugin = undefined;\n\n        switch (this.chartType) {\n            case "horizontal bar": {\n                this.chartAssist = new ChartAssist(\n                    new Chart(barGrid({ horizontal: true }))\n                );\n                break;\n            }\n            case "vertical bar": {\n                this.chartAssist = new ChartAssist(\n                    new Chart(barGrid({ horizontal: false }))\n                );\n                break;\n            }\n            case "pie": {\n                this.chartAssist = new ChartAssist(\n                    new Chart(radialGrid()),\n                    radial\n                );\n                break;\n            }\n            case "donut": {\n                this.donutContentPlugin = new ChartDonutContentPlugin();\n                this.chartAssist = new ChartAssist(\n                    new Chart(radialGrid()),\n                    radial\n                );\n                this.chartAssist.chart.addPlugin(this.donutContentPlugin);\n                break;\n            }\n        }\n    }\n\n    private getRenderer():\n        | PieRenderer\n        | BarRenderer\n        | RadialRenderer\n        | undefined {\n        switch (this.chartType) {\n            case "horizontal bar":\n            case "vertical bar": {\n                return new BarRenderer();\n            }\n            case "pie": {\n                return new PieRenderer();\n            }\n            case "donut": {\n                return new RadialRenderer();\n            }\n        }\n    }\n\n    private updateChart() {\n        const accessors: IAccessors<any> | undefined = this.getAccessors();\n        const renderer: PieRenderer | BarRenderer | RadialRenderer | undefined =\n            this.getRenderer();\n        const scales: Record<string, IScale<any>> | undefined =\n            this.getScales();\n        if (!accessors || !renderer || !scales) {\n            throw new Error("Accessors, renderer or scales are unavailable");\n        }\n        this.chartAssist.update(\n            this.getChartAssistSeries(\n                this.categories,\n                this.values,\n                accessors,\n                renderer,\n                scales\n            )\n        );\n    }\n\n    private getScales(): Record<string, IScale<any>> | undefined {\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.domainCalculator = getAutomaticDomainWithIncludedInterval([\n            0, 0,\n        ]);\n\n        switch (this.chartType) {\n            case "horizontal bar":\n                return {\n                    x: linearScale,\n                    y: bandScale,\n                };\n            case "vertical bar":\n                return {\n                    x: bandScale,\n                    y: linearScale,\n                };\n            case "pie":\n            case "donut": {\n                return radialScales();\n            }\n        }\n    }\n\n    private getAccessors(): IAccessors | undefined {\n        switch (this.chartType) {\n            case "horizontal bar":\n                return new HorizontalBarAccessors(this.colorProvider);\n            case "vertical bar": {\n                return new VerticalBarAccessors(this.colorProvider);\n            }\n            case "pie":\n            case "donut": {\n                const accessors = new RadialAccessors();\n                accessors.series.color = this.colorProvider.get;\n                return accessors;\n            }\n        }\n        return;\n    }\n\n    private getChartAssistSeries(\n        categories: string[],\n        values: number[],\n        accessors: IAccessors,\n        renderer: Renderer<IAccessors>,\n        scales: Scales\n    ) {\n        return categories.map((category, i) => {\n            const value = values[i] || 0;\n            return {\n                id: category,\n                data: [{ category, value }],\n                accessors,\n                renderer,\n                scales,\n            };\n        });\n    }\n}\n'},65100:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h3>\n    Legend by\n    <nui-radio-group\n        class="nui-radio-group-inline"\n        [(value)]="mainCategory"\n        (valueChange)="updateMainCategory()"\n    >\n        <nui-radio\n            *ngFor="let category of mainCategoryOptions"\n            [value]="category"\n        >\n            {{ category | titlecase }}\n        </nui-radio>\n    </nui-radio-group>\n</h3>\n<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chartAssist.chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            [active]="chartAssist.isLegendActive"\n            [interactive]="false"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                descriptionPrimary="{{ legendSeries.id | titlecase }}"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="\n                        accessors.data[\'value\'](\n                            legendSeries.data[0],\n                            0,\n                            null,\n                            null\n                        )\n                    "\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                </nui-rich-legend-tile>\n                <nui-icon\n                    [icon]="iconMap[legendSeries.id]"\n                    *ngIf="iconMap[legendSeries.id]"\n                    class="mt-1 ml-3"\n                ></nui-icon>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n    <div class="legend-bottom">\n        <nui-radio-group\n            class="nui-radio-group-inline"\n            [(value)]="chartType"\n            (valueChange)="updateChartType()"\n        >\n            <nui-radio *ngFor="let type of chartTypes" [value]="type">\n                {{ type | titlecase }}\n            </nui-radio>\n        </nui-radio-group>\n    </div>\n</div>\n'},19459:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport zipObject from "lodash/zipObject";\n\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IAccessors,\n    IBarAccessors,\n    IChartAssistSeries,\n    IChartMarker,\n    IChartSeries,\n    IGrid,\n    InteractionLabelPlugin,\n    IValueProvider,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    Renderer,\n    Scales,\n    stack,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum ChartType {\n    StackedBar = "stacked bar",\n    GroupedBar = "grouped bar",\n    Line = "line",\n}\n\ntype PreprocessorType<T extends IAccessors> = (\n    this: ChartAssist,\n    series: IChartAssistSeries<T>[]\n) => IChartAssistSeries<T>[];\n\ninterface IChartTools<T extends IAccessors = IAccessors> {\n    preprocessor?: PreprocessorType<T>;\n    gridFunction: () => IGrid;\n    rendererFunction: () => Renderer<IAccessors>;\n    accessorFunction: (\n        colors?: IValueProvider<string>,\n        markers?: IValueProvider<IChartMarker>\n    ) => IAccessors;\n    scaleFunction: () => Scales;\n}\n\nexport interface IChartAttributes<T extends IAccessors = IAccessors> {\n    grid: IGrid;\n    accessors: IAccessors;\n    renderer: Renderer<IAccessors>;\n    scales: Scales;\n    preprocessor?: PreprocessorType<T>;\n}\n\n@Component({\n    selector: "nui-chart-two-dimensional-data-example",\n    templateUrl: "./two-dimensional-data.example.component.html",\n})\nexport class TwoDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = [\n        ChartType.StackedBar,\n        ChartType.GroupedBar,\n        ChartType.Line,\n    ];\n    public chartType = this.chartTypes[0];\n    public mainCategoryOptions = ["quarters", "statuses"];\n    public mainCategory = this.mainCategoryOptions[0];\n    public statuses = ["down", "critical", "warning", "unknown", "ok", "other"];\n    public quarters = ["Q1", "Q2", "Q3", "Q4"];\n    public iconNames = [\n        "down",\n        "critical",\n        "warning",\n        "unknown",\n        "up",\n        "unmanaged",\n    ];\n    public categories: string[];\n    public subCategories: string[];\n    public values = [\n        [24, 16, 7, 6, 97, 4],\n        [13, 8, 5, 17, 5, 25],\n        [97, 41, 24, 6, 7, 6],\n        [45, 87, 23, 48, 24, 9],\n    ];\n    public valueAccessor: (i: number, j: number) => number;\n\n    public iconMap = zipObject(\n        this.statuses,\n        this.iconNames.map((n) => `status_${n}`)\n    );\n    public palette: ChartPalette;\n    public chartAssist: ChartAssist;\n    public accessors: IAccessors;\n\n    private renderer: Renderer<IAccessors>;\n    private scales: Scales;\n\n    public ngOnInit(): void {\n        this.updateMainCategory();\n    }\n\n    public updateMainCategory(): void {\n        const statusPalette = new ChartPalette(\n            new MappedValueProvider<string>(\n                zipObject(\n                    this.statuses,\n                    CHART_PALETTE_CS_S_EXTENDED.filter(\n                        (_, index) => index % 2 === 0\n                    )\n                )\n            )\n        );\n        const standardPalette = new ChartPalette(CHART_PALETTE_CS1);\n\n        const groupByQuarter =\n            this.mainCategory === this.mainCategoryOptions[0];\n\n        this.categories = groupByQuarter ? this.statuses : this.quarters;\n        this.subCategories = groupByQuarter ? this.quarters : this.statuses;\n        this.valueAccessor = groupByQuarter\n            ? (i, j) => this.values[i][j]\n            : (i, j) => this.values[j][i];\n        this.palette = groupByQuarter ? standardPalette : statusPalette;\n\n        this.updateChartType();\n    }\n\n    public updateChartType(): void {\n        this.buildChart();\n        this.updateChart();\n    }\n\n    private buildChart() {\n        const { grid, accessors, renderer, scales, preprocessor } =\n            this.getChartAttributes(this.chartType);\n\n        this.renderer = renderer;\n        this.accessors = accessors;\n        this.scales = scales;\n\n        const chart = new Chart(grid);\n        chart.addPlugin(new InteractionLabelPlugin());\n\n        this.chartAssist = new ChartAssist(chart, preprocessor, this.palette);\n\n        if (this.chartType === ChartType.StackedBar) {\n            this.chartAssist.seriesProcessor = stack;\n        }\n    }\n\n    private updateChart() {\n        this.chartAssist.update(\n            this.buildChartSeries(\n                this.categories,\n                this.subCategories,\n                this.valueAccessor\n            )\n        );\n    }\n\n    private buildChartSeries(\n        categories: string[],\n        subCategories: string[],\n        valueAccessor: (i: number, j: number) => number\n    ): IChartSeries<IAccessors>[] {\n        return subCategories.map((subCategory, i) => ({\n            id: subCategory,\n            name: subCategory,\n            data: categories.map((xCategory, j) => ({\n                category: xCategory,\n                value: valueAccessor(i, j) || 0,\n            })),\n            accessors: this.accessors,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n    }\n\n    private getChartAttributes(\n        chartType: ChartType\n    ): IChartAttributes<IBarAccessors> {\n        const t: IChartTools<IBarAccessors> = this.getChartTools(chartType);\n        const result: IChartAttributes<IBarAccessors> = {\n            grid: t.gridFunction(),\n            accessors: t.accessorFunction(),\n            renderer: t.rendererFunction(),\n            scales: t.scaleFunction(),\n        };\n\n        if (t.preprocessor) {\n            result.preprocessor =\n                t.preprocessor as PreprocessorType<IBarAccessors>;\n        }\n        return result;\n    }\n\n    private getChartTools(chartType: ChartType): IChartTools<IBarAccessors> {\n        const chartTools: Record<ChartType, IChartTools<IBarAccessors>> = {\n            [ChartType.StackedBar]: {\n                preprocessor: stack,\n                gridFunction: barGrid,\n                rendererFunction: () =>\n                    new BarRenderer({\n                        highlightStrategy: new BarHighlightStrategy("x"),\n                    }),\n                accessorFunction: () =>\n                    barAccessors(undefined, this.palette.standardColors),\n                scaleFunction: barScales,\n            },\n            [ChartType.GroupedBar]: {\n                gridFunction: () => barGrid({ grouped: true }),\n                rendererFunction: () =>\n                    new BarRenderer({\n                        highlightStrategy: new BarHighlightStrategy("x"),\n                    }),\n                accessorFunction: () => {\n                    const accessors = barAccessors(\n                        { grouped: true },\n                        this.palette.standardColors\n                    );\n                    accessors.data.category = (data, i, series, dataSeries) => [\n                        data.category,\n                        dataSeries.name,\n                    ];\n                    return accessors;\n                },\n                scaleFunction: () => barScales({ grouped: true }),\n            },\n            [ChartType.Line]: {\n                gridFunction: () => new XYGrid(),\n                rendererFunction: () => new LineRenderer(),\n                accessorFunction: () => {\n                    const accessors = new LineAccessors(\n                        this.palette.standardColors\n                    );\n                    accessors.data.x = (d) => d.category;\n                    accessors.data.y = (d) => d.value;\n                    accessors.data.value = (d) => d.value;\n                    return accessors;\n                },\n                scaleFunction: () => ({\n                    x: new BandScale().fixDomain(this.categories),\n                    y: new LinearScale(),\n                }),\n            },\n        };\n\n        return chartTools[chartType];\n    }\n}\n'},90628:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiIconModule, NuiRadioModule } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { OneDimensionalDataExampleComponent } from "./one-dimensional-data-example/one-dimensional-data.example.component";\nimport { TwoDimensionalDataExampleComponent } from "./two-dimensional-data-example/two-dimensional-data.example.component";\n\nconst routes: Routes = [\n    {\n        path: "1d",\n        component: OneDimensionalDataExampleComponent,\n    },\n    {\n        path: "2d",\n        component: TwoDimensionalDataExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        OneDimensionalDataExampleComponent,\n        TwoDimensionalDataExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiRadioModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport default class TypeSwitchExampleModule {}\n'},93644:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Charts Layout</h1>\n\n<h2>Before We Start</h2>\n<p>\n    You probably know we are not building large hero components any more. They\n    turned out to be hard to extend and update, and it was problematic to\n    maintain them in general. So our new trend word is\n    <code>DECOMPOSITION</code>.\n</p>\n<p>\n    Now, you will have a full access to every part of a complex component. It\n    will give you all the power to lay them out and set them up in a way that\n    works best for you. It also decreases the risk of breaking super-components\n    when we need to change something on a low level.\n</p>\n<p>\n    And, a bright example of our decomposition strategy is the Nova charting\n    framework, which we are happy to introduce.\n</p>\n\n<h2>OMG! Do I Need To Do All the Layouts MYSELF?!?!?</h2>\n<p>Don\'t panic!</p>\n<p>\n    We realize that putting it all together can be a nightmare for you, so we\n    try to do our best to help you with this.\n</p>\n<h2>Helper Classes</h2>\n<p>\n    The chart layout is supposed to be very common and will include the chart\n    itself and other optional elements--like axis labels for left, right or\n    bottom axis. You can also have the legend located to the right or below the\n    chart. Or, maybe a chart without a legend at all?\n</p>\n<p>\n    All you need to do is wrap all your chart stuff into a\n    <code>nui-chart-layout</code> classed element. Then, mark your separate\n    pieces with the right classes to make them appear in the right spot. Here\n    are the class names you can use:\n</p>\n<ul>\n    <li>- <code>chart</code></li>\n    <li>- <code>legend</code></li>\n    <li>- <code>legend-bottom</code></li>\n    <li>- <code>axis-label-left</code></li>\n    <li>- <code>axis-label-right</code></li>\n    <li>- <code>axis-label-bottom</code></li>\n</ul>\n<p>Easy! Isn\'t it?</p>\n<p>\n    Especially when the order of the elements doesn\'t matter as long as they are\n    wrapped by an element with the <code>nui-chart-layout</code> css class.\n</p>\n<p>And here is how it\'s going to look:</p>\n<div class="nui-chart-layout highlight-areas m-5">\n    <div class="chart"><strong>Chart</strong></div>\n    <div class="legend" *ngIf="hasLegend"><strong>Legend</strong></div>\n    <div class="legend-bottom" *ngIf="hasLegendBottom">\n        <strong>Bottom legend</strong>\n    </div>\n    <div class="axis-label-left" *ngIf="hasAxisLabelLeft">\n        <strong>Left axis label</strong>\n    </div>\n    <div class="axis-label-right" *ngIf="hasAxisLabelRight">\n        <strong>Right axis label</strong>\n    </div>\n    <div class="axis-label-bottom" *ngIf="hasAxisLabelBottom">\n        <strong>Bottom axis label</strong>\n    </div>\n</div>\n<nui-example-code language="html">{{ intro }}</nui-example-code>\n<div class="d-flex align-items-center code-line px-3">\n    <nui-switch [(value)]="hasLegend"></nui-switch>\n    <nui-example-code language="html" [ngClass]="{ \'turned-off\': !hasLegend }">\n        {{ getCodeLine("legend", "Legend") }}\n    </nui-example-code>\n</div>\n<div class="d-flex align-items-center code-line px-3">\n    <nui-switch [(value)]="hasLegendBottom"></nui-switch>\n    <nui-example-code\n        language="html"\n        [ngClass]="{ \'turned-off\': !hasLegendBottom }"\n    >\n        {{ getCodeLine("legend-bottom", "Bottom legend") }}\n    </nui-example-code>\n</div>\n<div class="d-flex align-items-center code-line px-3">\n    <nui-switch [(value)]="hasAxisLabelLeft"></nui-switch>\n    <nui-example-code\n        language="html"\n        [ngClass]="{ \'turned-off\': !hasAxisLabelLeft }"\n    >\n        {{ getCodeLine("axis-label-left", "Left axis label") }}\n    </nui-example-code>\n</div>\n<div class="d-flex align-items-center code-line px-3">\n    <nui-switch [(value)]="hasAxisLabelRight"></nui-switch>\n    <nui-example-code\n        language="html"\n        [ngClass]="{ \'turned-off\': !hasAxisLabelRight }"\n    >\n        {{ getCodeLine("axis-label-right", "Right axis label") }}\n    </nui-example-code>\n</div>\n<div class="d-flex align-items-center code-line px-3">\n    <nui-switch [(value)]="hasAxisLabelBottom"></nui-switch>\n    <nui-example-code\n        language="html"\n        [ngClass]="{ \'turned-off\': !hasAxisLabelBottom }"\n    >\n        {{ getCodeLine("axis-label-bottom", "Bottom axis label") }}\n    </nui-example-code>\n</div>\n<nui-example-code language="html">{{ outro }}</nui-example-code>\n\n<h2>Extensions</h2>\n\n<h3>Chart Overlay</h3>\n<p>\n    Sometimes it can be useful to have an overlay over the chart area that\'s\n    perfectly centered with the chart. This can be seen in the\n    <code\n        ><a href="../additional-documentation/chart-types/pie-and-donut"\n            >Donut Chart</a\n        ></code\n    >\n    example that shows content nested inside the donut.\n</p>\n<p>\n    To achieve this, consider decorating the <code>chart</code> element with the\n    <code>has-overlay</code> class and use the <code>overlay</code> class on the\n    child element containing the overlay content.\n</p>\n<p>It should look like this:</p>\n<pre>{{ overlay }}</pre>\n'},46930:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='@import (reference) "@nova-ui/bits/sdk/less/nui-framework-variables";\n@import (reference) "@nova-ui/bits/sdk/less/mixins.less";\n\n.highlight-areas {\n    border: 1px grey solid;\n\n    & > div {\n        border: 1px lightgrey solid;\n        padding: @nui-space-sm;\n        background-color: ghostwhite;\n    }\n}\n\n.turned-off {\n    opacity: 0.2;\n}\n\n.code-line {\n    .setCssVariable(background, nui-color-bg-mid_dark);\n}\n'},9873:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-layout",\n    templateUrl: "./chart-docs-layout.component.html",\n    styleUrls: ["./chart-docs-layout.component.less"],\n})\nexport class ChartDocsLayoutComponent {\n    hasLegend = true;\n    hasLegendBottom = true;\n    hasAxisLabelLeft = true;\n    hasAxisLabelRight = true;\n    hasAxisLabelBottom = true;\n    intro = `\n    <div class="nui-chart-layout">\n        <div class="chart">Chart</div>\n    `;\n    outro = `</div>`;\n    overlay = `<div class="nui-chart-layout">\n    <div class="chart has-overlay">\n        ...\n        <div class="overlay"> ... </div>\n    </div>\n</div>`;\n\n    public getCodeLine(className: string, text: string): string {\n        return `<div class="${className}">${text}</div>`;\n    }\n}\n'},59956:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { NuiDocsModule, NuiSwitchModule, SrlcStage } from "@nova-ui/bits";\n\nimport { DemoCommonModule } from "../common/demo-common.module";\nimport { ChartDocsLayoutComponent } from "./chart-docs-layout.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsLayoutComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [ChartDocsLayoutComponent],\n    imports: [\n        DemoCommonModule,\n        NuiDocsModule,\n        NuiSwitchModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n})\nexport default class ChartDocsLayoutModule {}\n'},28631:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule, Type } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\n\nimport { getDemoFiles } from "../../../demo-files-factory";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "tooltips",\n        loadChildren: async () =>\n            import(\n                "./tooltips/chart-docs-tooltips.module"\n            ) as object as Promise<Type<any>>,\n    },\n    {\n        path: "popovers",\n        loadChildren: async () =>\n            import(\n                "./popovers/chart-docs-popovers.module"\n            ) as object as Promise<Type<any>>,\n    },\n];\n\n@NgModule({\n    declarations: [],\n    imports: [RouterModule.forChild(exampleRoutes)],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("plugins"),\n        },\n    ],\n})\nexport default class ChartDocsPluginsModule {}\n'},42693:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-2">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.value.dataSeries.name }}: </strong>\n            <code>{{ item.value.data }}</code>\n        </div>\n    </div>\n</ng-template>\n'},76566:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    InteractionLabelPlugin,\n    XYGridConfig,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-with-popover-example",\n    templateUrl: "./bar-chart-with-popover.example.component.html",\n})\nexport class BarChartWithPopoverExampleComponent implements OnInit {\n    public chartAssist = new ChartAssist(new Chart(barGrid()));\n    public popoverPlugin = new ChartPopoverPlugin();\n\n    public ngOnInit(): void {\n        // plugin setup (absence of InteractionLinePlugin setup will result in no interaction line)\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist.chart.addPlugin(this.popoverPlugin);\n\n        // grid configuration\n        const gridConfig = <XYGridConfig>(\n            this.chartAssist.chart.getGrid().config()\n        );\n        gridConfig.interactionPlugins = false;\n\n        const accessors = barAccessors();\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        // tell the chart assist to populate the chart\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [20] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "edge", name: "Edge", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},95897:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Popovers</h1>\n\n<h2>Line Chart</h2>\n<p>To set up a popover for a line chart, do the following:</p>\n<ol>\n    <li>\n        Create an instance if the\n        <code\n            ><a href="../classes/ChartPopoverPlugin.html" target="_blank"\n                >ChartPopoverPlugin</a\n            ></code\n        >\n        <br />\n        Plugin Configuration - You can optionally pass an argument of type\n        <code\n            ><a href="../interfaces/IPopoverPluginConfig.html" target="_blank"\n                >IPopoverPluginConfig</a\n            ></code\n        >\n        to the plugin\'s constructor. Each of the configuration properties is\n        optional:\n        <ul>\n            <li>\n                <code\n                    ><a\n                        href="../classes/ChartPopoverPlugin.html#eventStreamId"\n                        target="_blank"\n                        >eventStreamId</a\n                    ></code\n                >\n                - Specify either <code>INTERACTION_DATA_POINTS_EVENT</code> or\n                <code>INTERACTION_DATA_POINT_EVENT</code> to configure which\n                event the plugin responds to. The default value for this\n                property is <code>INTERACTION_DATA_POINTS_EVENT</code> which is\n                supported by line, pie, donut, area, and bar charts and will\n                position the popover in relation to the center point between the\n                leftmost and rightmost data points in the payload.\n                <code>INTERACTION_DATA_POINT_EVENT</code> is supported by line\n                and area charts and will position the popover in relation to a\n                single data point\'s horizontal position on the chart. For more\n                information on chart events, take a look at\n                <a\n                    href="../additional-documentation/advanced-usage/events.html"\n                    target="_parent"\n                    >this</a\n                >\n                page.\n            </li>\n            <li>\n                <code\n                    ><a\n                        href="../classes/ChartPopoverPlugin.html#interactionType"\n                        target="_blank"\n                        >interactionType</a\n                    ></code\n                >\n                - Specify the\n                <code\n                    ><a\n                        href="../miscellaneous/enumerations.html#InteractionType"\n                        target="_blank"\n                        >InteractionType</a\n                    ></code\n                >\n                that will trigger the showing and hiding of popovers. The\n                default value for this property is\n                <code>InteractionType.MouseMove</code>.\n            </li>\n        </ul>\n    </li>\n    <li>\n        Register the plugin with the chart using the chart\'s\n        <code\n            ><a href="../classes/Chart.html#addPlugin" target="_blank"\n                >addPlugin</a\n            ></code\n        >\n        method\n        <pre>{{ popoverTypeScript }}</pre>\n    </li>\n    <li>\n        Create a\n        <code\n            ><a href="../components/ChartPopoverComponent.html" target="_blank"\n                >nui-chart-popover</a\n            ></code\n        >\n        component on the template\n    </li>\n    <li>Pass the plugin to the component\'s plugin input</li>\n    <li>\n        Create an ng-template and pass it to the component\'s template input\n        <pre>{{ popoverHtml }}</pre>\n    </li>\n</ol>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-popover"\n    exampleTitle="Line Chart"\n>\n    <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n</nui-example-wrapper>\n\n<h2>Bar Chart</h2>\n<p>\n    Popovers can be added to a bar chart in the same way as for line charts.\n    Please see above. It\'s recommended that the interaction line be turned off\n    by setting the interactionPlugins property on the grid configuration to\n    false and then enabling the interaction label by adding the\n    InteractionLabelPlugin to the chart manually.\n</p>\n<p>\n    It\'s also recommended that you set the interactive property on the grid\n    configuration to true. This will result in the popover being displayed when\n    hovering in the space above each bar as opposed to only displaying the\n    popover when hovering over the bar itself.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-with-popover"\n    exampleTitle="Bar Chart"\n>\n    <nui-bar-chart-with-popover-example></nui-bar-chart-with-popover-example>\n</nui-example-wrapper>\n\n<h2>Donut Chart</h2>\n<p>\n    Popovers can be added to a donut chart in the same way as for line charts,\n    but using\n    <code\n        ><a href="../classes/ChartPopoverPlugin.html" target="_blank"\n            >RadialPopoverPlugin</a\n        ></code\n    >. The following example also demonstrates how to create a custom color\n    accessor for status.\n</p>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-with-popover"\n    exampleTitle="Donut Chart"\n>\n    <nui-donut-chart-with-popover-example></nui-donut-chart-with-popover-example>\n</nui-example-wrapper>\n'},97314:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-popovers",\n    templateUrl: "./chart-docs-popovers.component.html",\n})\nexport class ChartDocsPopoversComponent {\n    public popoverTypeScript = `this.popoverPlugin = new ChartPopoverPlugin();\nthis.chart.addPlugin(this.popoverPlugin);\n...`;\n    public popoverHtml = `...\n<nui-chart-popover [plugin]="popoverPlugin" [template]="popoverTemplate"></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{item.key}}: </strong>\n            <code>{{item.value.data | json}}</code>\n        </div>\n    </div>\n</ng-template>\n...`;\n}\n'},93930:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartWithPopoverExampleComponent } from "./bar-chart/bar-chart-with-popover.example.component";\nimport { ChartDocsPopoversComponent } from "./chart-docs-popovers.component";\nimport { DonutChartWithPopoverExampleComponent } from "./donut-chart/donut-chart-with-popover.example.component";\nimport { LineChartWithPopoverExampleComponent } from "./line-chart/line-chart-with-popover.example.component";\nimport { PopoverVisualTestComponent } from "./popover-visual-test/popover-visual-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsPopoversComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "bar",\n        component: BarChartWithPopoverExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "line",\n        component: LineChartWithPopoverExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: PopoverVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        BarChartWithPopoverExampleComponent,\n        DonutChartWithPopoverExampleComponent,\n        ChartDocsPopoversComponent,\n        LineChartWithPopoverExampleComponent,\n        PopoverVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsPopoversModule {}\n'},80259:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template #popoverTemplate let-dataPoints="dataPoints">\n    <div class="p-2">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.value.dataSeries.name | titlecase }}: </strong>\n            <code>{{ item.value.data.data }}</code>\n        </div>\n    </div>\n</ng-template>\n'},22531:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    CHART_PALETTE_CS_S_EXTENDED,\n    MappedValueProvider,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialPopoverPlugin,\n    RadialRenderer,\n    radialScales,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-with-popover-example",\n    templateUrl: "./donut-chart-with-popover.example.component.html",\n})\nexport class DonutChartWithPopoverExampleComponent implements OnInit {\n    public popoverPlugin: RadialPopoverPlugin;\n    public chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n\n    public ngOnInit(): void {\n        // plugin setup\n        this.popoverPlugin = new RadialPopoverPlugin();\n        this.chartAssist.chart.addPlugin(this.popoverPlugin);\n\n        // accessors setup for colors\n        const accessors = new RadialAccessors();\n        const statusColorProvider = createStatusColorProvider();\n        accessors.series.color = statusColorProvider.get;\n\n        const renderer = new RadialRenderer();\n        const scales = radialScales();\n\n        // chart assist setup\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { status: Status.Up, value: 42 },\n        { status: Status.Warning, value: 14 },\n        { status: Status.Critical, value: 8 },\n        { status: Status.Down, value: 7 },\n        { status: Status.Unmanaged, value: 5 },\n        { status: Status.Unknown, value: 3 },\n    ].map((d) => ({ id: d.status, name: d.status, data: [d.value] }));\n}\n\nfunction createStatusColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Unmanaged]: CHART_PALETTE_CS_S_EXTENDED[10],\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n    });\n}\n'},3287:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chart"></nui-chart>\n\n<nui-chart-popover\n    [plugin]="popoverPlugin"\n    [template]="popoverTemplate"\n></nui-chart-popover>\n\n<ng-template let-dataPoints="dataPoints" #popoverTemplate>\n    <div class="p-3">\n        <div *ngFor="let item of dataPoints | keyvalue">\n            <strong>{{ item.key }}: </strong>\n            <code>{{ item.value.data | json }}</code>\n        </div>\n    </div>\n</ng-template>\n'},34763:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPopoverPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-popover-example",\n    templateUrl: "./line-chart-with-popover.example.component.html",\n})\nexport class LineChartWithPopoverExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n    public popoverPlugin = new ChartPopoverPlugin();\n\n    public ngOnInit(): void {\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n        const renderer = new LineRenderer();\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (s) => ({\n                ...s,\n                scales,\n                renderer,\n                accessors,\n            })\n        );\n\n        // plugin setup\n        this.chart.addPlugin(this.popoverPlugin);\n\n        // chart assist needs to be used to update data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},48818:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<charts-test-harness>\n    <div id="visual-test-bottom-position-popover">\n        <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n    </div>\n\n    \x3c!-- Tall element for testing relative positioning of popovers --\x3e\n    <div style="height: 150px"></div>\n\n    \x3c!-- Relative parent for testing relative positioning of popovers --\x3e\n    <div style="position: relative">\n        <div id="visual-test-bar-chart-popover">\n            <nui-bar-chart-with-popover-example></nui-bar-chart-with-popover-example>\n        </div>\n        <div id="visual-test-donut-chart-popover">\n            <nui-donut-chart-with-popover-example></nui-donut-chart-with-popover-example>\n        </div>\n        <div id="visual-test-line-chart-popover">\n            <nui-line-chart-with-popover-example></nui-line-chart-with-popover-example>\n        </div>\n    </div>\n</charts-test-harness>\n'},6395:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-popover-visual-test",\n    templateUrl: "./popover-visual-test.component.html",\n})\nexport class PopoverVisualTestComponent {}\n'},23848:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data }}</span>\n    </div>\n</ng-template>\n'},81127:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    barAccessors,\n    barGrid,\n    BarRenderer,\n    barScales,\n    BarSeriesHighlightStrategy,\n    BarTooltipsPlugin,\n    Chart,\n    ChartAssist,\n    InteractionLabelPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-bar-chart-with-tooltips-example",\n    templateUrl: "./bar-chart-with-tooltips.example.component.html",\n})\nexport class BarChartWithTooltipsExampleComponent implements OnInit {\n    public grid = barGrid();\n\n    public chartAssist = new ChartAssist(new Chart(this.grid));\n    public tooltipsPlugin = new BarTooltipsPlugin();\n\n    public ngOnInit(): void {\n        // plugin setup (absence of InteractionLinePlugin setup will result in no interaction line)\n        this.chartAssist.chart.addPlugin(new InteractionLabelPlugin());\n        this.chartAssist.chart.addPlugin(this.tooltipsPlugin);\n\n        // grid configuration\n        this.grid.config().interactionPlugins = false;\n\n        // map each category to a specific color\n        const accessors = barAccessors(\n            undefined,\n            this.chartAssist.palette.standardColors\n        );\n\n        const renderer = new BarRenderer({\n            highlightStrategy: new BarSeriesHighlightStrategy("x"),\n        });\n        const scales = barScales();\n\n        // tell the chart assist to populate the chart\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                renderer,\n                scales,\n            }))\n        );\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { id: "chrome", name: "Chrome", data: [20] },\n        { id: "safari", name: "Safari", data: [14] },\n        { id: "firefox", name: "Firefox", data: [5] },\n        { id: "uc ", name: "UC Browser", data: [4] },\n        { id: "opera", name: "Opera", data: [3] },\n        { id: "edge", name: "Edge", data: [3] },\n        { id: "other", name: "Other", data: [5] },\n    ];\n}\n'},41924:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Tooltips</h1>\n\n<h2>Line Chart</h2>\n<p>To set up tooltips for a line chart, do the following:</p>\n<ol>\n    <li>\n        Create an instance if the\n        <code\n            ><a href="../classes/ChartTooltipsPlugin.html" target="_blank"\n                >ChartTooltipsPlugin</a\n            ></code\n        >\n    </li>\n    <li>\n        Register the plugin with the chart using the chart\'s addPlugin method\n        <pre>{{ tooltipsTypeScript }}</pre>\n    </li>\n    <li>\n        Create a\n        <code\n            ><a href="../components/ChartTooltipsComponent.html" target="_blank"\n                >nui-chart-tooltips</a\n            ></code\n        >\n        component on the template\n    </li>\n    <li>Pass the plugin to the component\'s plugin input</li>\n    <li>\n        Create an ng-template and pass it to the component\'s template input\n        <pre>{{ tooltipsHtml }}</pre>\n    </li>\n</ol>\n<nui-example-wrapper\n    filenamePrefix="line-chart-with-tooltips"\n    exampleTitle="Line Chart"\n>\n    <nui-line-chart-with-tooltips-example></nui-line-chart-with-tooltips-example>\n</nui-example-wrapper>\n\n<h2>Bar Chart</h2>\n<p>\n    Tooltips can be added to a bar chart in the same way as for line charts.\n    Please see above. It\'s recommended that the interaction line be turned off\n    by setting the interactionPlugins property on the grid configuration to\n    false and then enabling the interaction label by adding the\n    InteractionLabelPlugin to the chart manually.\n</p>\n<p>\n    It\'s also recommended that you set the interactive property on the grid\n    configuration to true. This will result in the popover being displayed when\n    hovering in the space above each bar as opposed to only displaying the\n    popover when hovering over the bar itself.\n</p>\n<p>\n    In addition to the above, the following example also configures a custom\n    marker provider and color provider for use by the tooltip.\n</p>\n<nui-example-wrapper\n    filenamePrefix="bar-chart-with-tooltips"\n    exampleTitle="Bar Chart"\n>\n    <nui-bar-chart-with-tooltips-example></nui-bar-chart-with-tooltips-example>\n</nui-example-wrapper>\n\n<h2>Donut Chart</h2>\n<p>\n    Tooltips are added to a donut or pie chart in a way that\'s similar to adding\n    them to a line or bar chart. The only difference is the type of the plugin\n    that\'s used. Instead of the standard\n    <code\n        ><a href="../classes/ChartTooltipsPlugin.html" target="_blank"\n            >ChartTooltipsPlugin</a\n        ></code\n    >, you must use the\n    <code\n        ><a href="../classes/RadialTooltipsPlugin.html" target="_blank"\n            >RadialTooltipsPlugin</a\n        ></code\n    >.\n</p>\n<p>\n    In addition to the above, the following example also configures a custom\n    color accessor, and makes use of the category value in the data for\n    determining which icon to use in the tooltip.\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note: </strong> To change the chart in the following example to a\n    pie, all you need to do is instantiate a\n    <code\n        ><a href="../classes/PieChartAssist.html" target="_blank"\n            >PieChartAssist</a\n        ></code\n    >\n    instead of a\n    <code\n        ><a href="../classes/DonutChartAssist.html" target="_blank"\n            >DonutChartAssist</a\n        ></code\n    >.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="donut-chart-with-tooltips"\n    exampleTitle="Donut Chart"\n>\n    <nui-donut-chart-with-tooltips-example></nui-donut-chart-with-tooltips-example>\n</nui-example-wrapper>\n'},81701:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-tooltips",\n    templateUrl: "./chart-docs-tooltips.component.html",\n})\nexport class ChartDocsTooltipsComponent {\n    public tooltipsTypeScript = `this.tooltipsPlugin = new ChartTooltipsPlugin();\nthis.chart.addPlugin(this.tooltipsPlugin);\n...`;\n    public tooltipsHtml = `...\n<nui-chart-tooltips [plugin]="tooltipsPlugin" [template]="tooltipTemplate"></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint"\n             #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n                          [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"></nui-chart-marker>\n        <span class="pl-2">{{dataPoint.data.y}}</span>\n    </div>\n</ng-template>\n...`;\n}\n'},97941:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { DemoCommonModule } from "../../common/demo-common.module";\nimport { BarChartWithTooltipsExampleComponent } from "./bar-chart/bar-chart-with-tooltips.example.component";\nimport { ChartDocsTooltipsComponent } from "./chart-docs-tooltips.component";\nimport { DonutChartWithTooltipsExampleComponent } from "./donut-chart/donut-chart-with-tooltips.example.component";\nimport { LineChartWithTooltipsExampleComponent } from "./line-chart/line-chart-with-tooltips.example.component";\nimport { TooltipsVisualTestComponent } from "./visual-test/tooltips-visual-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsTooltipsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "line",\n        component: LineChartWithTooltipsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "bar",\n        component: BarChartWithTooltipsExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "visual-test",\n        component: TooltipsVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        BarChartWithTooltipsExampleComponent,\n        ChartDocsTooltipsComponent,\n        LineChartWithTooltipsExampleComponent,\n        DonutChartWithTooltipsExampleComponent,\n        TooltipsVisualTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiDocsModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [],\n})\nexport default class ChartDocsTooltipsModule {}\n'},58305:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-chart class="d-flex" [chart]="chartAssist.chart"></nui-chart>\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="donutTooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #donutTooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-icon [icon]="\'status_\' + dataPoint.dataSeries.name"></nui-icon>\n        <span class="pl-2">{{ dataPoint.data.data | number }}</span>\n    </div>\n</ng-template>\n'},63742:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    MappedValueProvider,\n    radial,\n    RadialAccessors,\n    radialGrid,\n    RadialRenderer,\n    radialScales,\n    RadialTooltipsPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-donut-chart-with-tooltips-example",\n    templateUrl: "./donut-chart-with-tooltips.example.component.html",\n})\nexport class DonutChartWithTooltipsExampleComponent implements OnInit {\n    public chartAssist = new ChartAssist(\n        new Chart(radialGrid()),\n        radial,\n        new ChartPalette(createStatusColorProvider())\n    );\n\n    // RadialTooltipsPlugin handles specific positioning requirements for tooltips on a donut chart\n    public tooltipsPlugin = new RadialTooltipsPlugin();\n\n    public ngOnInit(): void {\n        // plugin setup\n        this.chartAssist.chart.addPlugin(this.tooltipsPlugin);\n\n        // accessors setup for colors\n        const accessors = new RadialAccessors(\n            this.chartAssist.palette.standardColors\n        );\n\n        const scales = radialScales();\n        const renderer = new RadialRenderer();\n\n        this.chartAssist.update(\n            getData().map((s) => ({\n                ...s,\n                accessors,\n                scales,\n                renderer,\n            }))\n        );\n    }\n}\n\nenum Status {\n    Up = "up",\n    Warning = "warning",\n    Critical = "critical",\n    Down = "down",\n    Unmanaged = "unmanaged",\n    Unknown = "unknown",\n}\n\n/* Chart data */\nfunction getData() {\n    return [\n        { status: Status.Up, value: 42 },\n        { status: Status.Warning, value: 14 },\n        { status: Status.Critical, value: 8 },\n        { status: Status.Down, value: 7 },\n        { status: Status.Unmanaged, value: 5 },\n        { status: Status.Unknown, value: 3 },\n    ].map((d) => ({ id: d.status, name: d.status, data: [d.value] }));\n}\n\nfunction createStatusColorProvider() {\n    return new MappedValueProvider<string>({\n        [Status.Up]: CHART_PALETTE_CS_S_EXTENDED[8],\n        [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        [Status.Critical]: CHART_PALETTE_CS_S_EXTENDED[2],\n        [Status.Down]: CHART_PALETTE_CS_S_EXTENDED[0],\n        [Status.Unmanaged]: CHART_PALETTE_CS_S_EXTENDED[10],\n        [Status.Unknown]: CHART_PALETTE_CS_S_EXTENDED[6],\n    });\n}\n'},96209:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n\n<nui-chart-tooltips\n    [plugin]="tooltipsPlugin"\n    [template]="tooltipTemplate"\n></nui-chart-tooltips>\n\n<ng-template let-dataPoint="dataPoint" #tooltipTemplate>\n    <div class="p-1 d-flex align-items-center">\n        <nui-chart-marker\n            [marker]="chartAssist.markers.get(dataPoint.seriesId)"\n            [color]="chartAssist.palette.standardColors.get(dataPoint.seriesId)"\n        ></nui-chart-marker>\n        <span class="pl-2">{{ dataPoint.data.y }}</span>\n    </div>\n</ng-template>\n'},76229:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n} from "@angular/core";\nimport moment from "moment/moment";\n\nimport {\n    Chart,\n    ChartAssist,\n    ChartTooltipsPlugin,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-line-chart-with-tooltips-example",\n    templateUrl: "./line-chart-with-tooltips.example.component.html",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LineChartWithTooltipsExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n    public tooltipsPlugin = new ChartTooltipsPlugin();\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    public ngOnInit(): void {\n        // this is necessary to make the chart work in OnPush change detection mode\n        this.chartAssist.onEvent = () => this.changeDetector.detectChanges();\n\n        // plugin setup\n        this.chart.addPlugin(this.tooltipsPlugin);\n\n        // providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        // chart assist needs to be used to update the chart\'s data\n        this.chartAssist.update(seriesSet);\n    }\n}\n\n/* Chart data */\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},86137:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<charts-test-harness>\n    <nui-bar-chart-with-tooltips-example\n        id="visual-test-bar-chart-tooltips"\n    ></nui-bar-chart-with-tooltips-example>\n    <nui-donut-chart-with-tooltips-example\n        id="visual-test-donut-chart-tooltips"\n    ></nui-donut-chart-with-tooltips-example>\n    <nui-line-chart-with-tooltips-example\n        id="visual-test-line-chart-tooltips"\n    ></nui-line-chart-with-tooltips-example>\n    <div class="scrollable-container">\n        <div class="tall-div"></div>\n        <nui-line-chart-with-tooltips-example\n            id="visual-test-line-chart-tooltips-with-scroll"\n        ></nui-line-chart-with-tooltips-example>\n    </div>\n</charts-test-harness>\n'},21899:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t=".scrollable-container {\n    height: 150px;\n    overflow: auto;\n}\n\n.tall-div {\n    height: 150px;\n}\n"},52041:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-tooltips-visual-test",\n    templateUrl: "./tooltips-visual-test.component.html",\n    styleUrls: ["./tooltips-visual-test.component.less"],\n})\nexport class TooltipsVisualTestComponent {}\n'},79539:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Thresholds</h1>\n<p>\n    Unlike in <code>novajs</code> charts, threshold functionality is not built\n    into the chart component. To get threshold specific elements on your chart\n    you need separate data series that will be used by generic renderers such as\n    the\n    <code\n        ><a href="../classes/BarRenderer.html" target="_blank"\n            >BarRenderer</a\n        ></code\n    >\n    to display the threshold visualizations. The process of creating the data\n    series needed for thresholds consists mainly of the following:\n</p>\n<ol>\n    <li>Creating one or more zone series that define the threshold areas</li>\n    <li>\n        Injecting the zone data into the standard data series to provide access\n        to this information from the legend, tooltips, etc.\n    </li>\n    <li>\n        Creating the threshold series that actually visualize the thresholds on\n        the chart\n    </li>\n    <li>\n        Creating additional visual elements such as side indicators and\n        horizontal lines indicating the start and end of each threshold zone\n    </li>\n</ol>\n<p>\n    To help you with all of this, we\'ve built a\n    <code\n        ><a href="../injectables/ThresholdsService.html" target="_blank"\n            >ThresholdsService</a\n        ></code\n    >\n    that does the most common tasks in terms of threshold data calculation and\n    new series generation.\n</p>\n<p>Sound complicated still?</p>\n<p>\n    Let\'s give it a try. Check out the inline comments of the following example.\n</p>\n<nui-example-wrapper\n    filenamePrefix="thresholds-basic"\n    exampleTitle="Basic Thresholds For Line Chart"\n>\n    <nui-thresholds-basic-example></nui-thresholds-basic-example>\n</nui-example-wrapper>\n\n<p>\n    For the above example we used\n    <code\n        ><a href="../classes/TimeIntervalScale.html" target="_blank"\n            >TimeIntervalScale</a\n        ></code\n    >\n    for the horizontal axis, but it can easily be replaced with a continuous\n    <code\n        ><a href="../classes/TimeScale.html" target="_blank">TimeScale</a></code\n    >\n    if needed. The service will do more precise calculations of background\n    colored areas for a continuous scale. For an example of this, see the\n    <strong>Thresholds Summary</strong> demo farther down the page.\n</p>\n\n<h2>Spark Chart With Thresholds</h2>\n<p>\n    The process is similar for a spark chart. To see how, take a look at the\n    inline comments of the example below.\n</p>\n<nui-example-wrapper\n    filenamePrefix="thresholds-spark"\n    exampleTitle="Thresholds For Spark Charts"\n>\n    <nui-thresholds-spark-example></nui-thresholds-spark-example>\n</nui-example-wrapper>\n\n<nui-message type="info" [allowDismiss]="false">\n    When having multiple series per spark, you need to call\n    <code\n        ><a href="../classes/SparkChartAssist.html#updateSparks" target="_blank"\n            >updateSparks()</a\n        ></code\n    >\n    method of\n    <code\n        ><a href="../classes/SparkChartAssist.html" target="_blank"\n            >SparkChartAssist</a\n        ></code\n    >\n    instead of\n    <code\n        ><a href="../classes/SparkChartAssist.html#update" target="_blank"\n            >update()</a\n        ></code\n    >\n    as usual.\n    <strong\n        >For general information about implementing spark charts, please see the\n        spark chart page\n        <a href="../additional-documentation/spark.html" target="_parent"\n            >here</a\n        ></strong\n    >.\n</nui-message>\n\n<h2>Thresholds Summary</h2>\n<p>\n    If you want to add an area below the main chart that displays a summary of\n    the threshold data from multiple series, you can add a second\n    <code\n        ><a href="../components/ChartComponent.html" target="_blank"\n            >nui-chart</a\n        ></code\n    >\n    to the page with the help of an additional instance of\n    <code\n        ><a href="../classes/ChartAssist.html" target="_blank"\n            >ChartAssist</a\n        ></code\n    >. To configure each of the chart grids to have the correct appearance you\n    can use the\n    <code\n        ><a\n            href="../miscellaneous/functions.html#thresholdsTopGridConfig"\n            target="_blank"\n            >thresholdsTopGridConfig</a\n        ></code\n    >\n    function for the main chart grid and the\n    <code\n        ><a\n            href="../miscellaneous/functions.html#thresholdsSummaryGridConfig"\n            target="_blank"\n            >thresholdsSummaryGridConfig</a\n        ></code\n    >\n    function for the summary chart grid.\n</p>\n<p>\n    In order to synchronize the behaviors of the summary chart with the main\n    chart\'s various legend interaction behaviors, you can invoke ChartAssist\'s\n    <code\n        ><a\n            href="../classes/ChartAssist.html#syncWithChartAssist"\n            target="_blank"\n            >syncWithChartAssist</a\n        ></code\n    >\n    method on the summary chart assist passing a reference to the main chart\n    assist.\n</p>\n<p>\n    The rest of the process is very similar to what\'s been shown in the previous\n    examples. For more details about how to implement the summary chart take a\n    look at the inline comments of the example source below.\n</p>\n<nui-message type="warning" [allowDismiss]="false">\n    <strong>Note:</strong> By UX design, the threshold visualizations on the\n    main chart of the following example are only displayed when a series is\n    either hovered on the legend or is the only series selected on the legend.\n    This behavior is meant to keep the visualizations focused on the primary\n    data and to allow the user to inspect the secondary threshold data of each\n    series via the legend if desired.\n</nui-message>\n<nui-example-wrapper\n    filenamePrefix="thresholds-summary"\n    exampleTitle="Thresholds Summary"\n>\n    <nui-thresholds-summary-example></nui-thresholds-summary-example>\n</nui-example-wrapper>\n\n<p>Easy! Isn\'t it?</p>\n'},6344:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-thresholds",\n    templateUrl: "./chart-docs-thresholds.component.html",\n})\nexport class ChartDocsThresholdsComponent {}\n'},90368:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { FormsModule } from "@angular/forms";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiDocsModule,\n    NuiIconModule,\n    NuiMessageModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../demo-files-factory";\nimport { DemoCommonModule } from "../common/demo-common.module";\nimport { ChartDocsThresholdsComponent } from "./chart-docs-thresholds.component";\nimport { ThresholdsBasicExampleComponent } from "./thresholds-basic/thresholds-basic.example.component";\nimport { ThresholdsSparkExampleComponent } from "./thresholds-spark/thresholds-spark.example.component";\nimport { ThresholdsSummaryExampleComponent } from "./thresholds-summary/thresholds-summary-example/thresholds-summary.example.component";\nimport { ThresholdsSummaryTestHarnessComponent } from "./thresholds-summary/thresholds-summary-test-harness/thresholds-summary-test-harness.component";\nimport { ThresholdsSummaryTestComponent } from "./thresholds-summary/thresholds-summary-test/thresholds-summary-test.component";\nimport { ThresholdsSummaryVisualTestComponent } from "./thresholds-summary/thresholds-summary-visual-test/thresholds-summary-visual-test.component";\n// eslint-disable-next-line max-len\nimport { ThresholdsSummaryWithIntervalScaleTestComponent } from "./thresholds-summary/thresholds-summary-with-interval-scale-test/thresholds-summary-with-interval-scale-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsThresholdsComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "basic",\n        component: ThresholdsBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "spark",\n        component: ThresholdsSparkExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "summary",\n        component: ThresholdsSummaryExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "summary-test",\n        component: ThresholdsSummaryTestHarnessComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "summary-visual-test",\n        component: ThresholdsSummaryVisualTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsThresholdsComponent,\n        ThresholdsBasicExampleComponent,\n        ThresholdsSparkExampleComponent,\n        ThresholdsSummaryExampleComponent,\n        ThresholdsSummaryTestComponent,\n        ThresholdsSummaryTestHarnessComponent,\n        ThresholdsSummaryVisualTestComponent,\n        ThresholdsSummaryWithIntervalScaleTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        FormsModule,\n        NuiChartsModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiMessageModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("thresholds"),\n        },\n    ],\n})\nexport default class ChartDocsThresholdsModule {}\n'},98417:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart">\n        <nui-chart class="w-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},98404:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    BandScale,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    ISimpleThresholdZone,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    TimeIntervalScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Error = "error",\n    Warning = "warning",\n}\n\n@Component({\n    selector: "nui-thresholds-basic-example",\n    templateUrl: "./thresholds-basic.example.component.html",\n})\nexport class ThresholdsBasicExampleComponent implements OnInit {\n    public chart = new Chart(new XYGrid());\n    public chartAssist = new ChartAssist(this.chart);\n\n    private thresholdsPalette = new ChartPalette(\n        new MappedValueProvider({\n            [Status.Error]: CHART_PALETTE_CS_S_EXTENDED[2],\n            [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n        })\n    );\n\n    constructor(private thresholdsService: ThresholdsService) {}\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        const scales: IXYScales = {\n            x: new TimeIntervalScale(duration(5, "minutes")),\n            // The example highlights time intervals defined by data points because of the type of scale that\'s used.\n            // All that\'s necessary to achieve status zones defined by data lines intersecting with threshold zones is\n            // to change the scale type to a continuous time scale by changing the \'x\' scale definition to:\n            // x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        // Set the left scale ID on the chart\'s grid to let it know which scale to use for the left axis ticks\n        (this.chart.getGrid() as XYGrid).leftScaleId = scales.y.id;\n\n        // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n        // Note that the x scale is shared between the foreground series and the background series.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const bgScales: IXYScales = {\n            x: scales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n        // Here we define the main data series on the chart which will be visualized as lines\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales,\n            })\n        );\n\n        const thresholds: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            // It\'s possible to manually define zones by area-like data series with start/end values for every data point. We don\'t do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                zoneDefinitions,\n                this.thresholdsPalette.standardColors\n            );\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create all threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            // In this case, we\'re creating backgrounds, side indicators, and threshold lines.\n            // ---\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\n            const seriesThresholds = [\n                this.thresholdsService.getBackgrounds(\n                    s,\n                    zones,\n                    bgScales,\n                    this.thresholdsPalette.backgroundColors\n                ),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(zones, scales),\n            ];\n\n            thresholds.push(...seriesThresholds);\n        }\n\n        // Invoke the update method on the chart assist passing the appropriate series sets\n        // ---\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which the series are\n        // passed here. So, in this case, since the \'seriesSet\' appears after the \'thresholds\' in this array, the main data elements\n        // will be rendered in front of the threshold-related elements on the chart.\n        this.chartAssist.update([...thresholds, ...seriesSet]);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 90 },\n        { status: Status.Error, end: 10 },\n        { status: Status.Warning, start: 70, end: 90 },\n        { status: Status.Warning, start: 10, end: 30 },\n    ];\n}\n\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:05:00Z", format).toDate(), y: 30 },\n                { x: moment("2016-12-25T15:10:00Z", format).toDate(), y: 95 },\n                { x: moment("2016-12-25T15:15:00Z", format).toDate(), y: 15 },\n                { x: moment("2016-12-25T15:20:00Z", format).toDate(), y: 60 },\n                { x: moment("2016-12-25T15:25:00Z", format).toDate(), y: 35 },\n                { x: moment("2016-12-25T15:30:00Z", format).toDate(), y: 5 },\n                { x: moment("2016-12-25T15:35:00Z", format).toDate(), y: 60 },\n                { x: moment("2016-12-25T15:40:00Z", format).toDate(), y: 84 },\n                { x: moment("2016-12-25T15:55:00Z", format).toDate(), y: 86 },\n                { x: moment("2016-12-25T16:00:00Z", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n'},45450:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div\n    *ngFor="let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn"\n    class="d-flex"\n>\n    <nui-chart\n        class="w-100"\n        [chart]="spark.chart"\n        nuiChartCollectionId="example-collection-id"\n    ></nui-chart>\n    <div class="d-flex flex-column pl-2">\n        <nui-legend-series\n            *ngIf="spark.chartSeriesSet[0]; let lineSeries"\n            [interactive]="false"\n            [descriptionSecondary]="lineSeries.name"\n        >\n            <nui-rich-legend-tile\n                [unitLabel]="lineSeries.units"\n                [value]="chartAssist.getHighlightedValue(lineSeries, \'y\')"\n                [backgroundColor]="\n                    statusBgColors.get(\n                        chartAssist.getHighlightedValue(lineSeries, \'status\')\n                    )\n                "\n                [attr.data-title]="\n                    chartAssist.getHighlightedValue(lineSeries, \'status\')\n                "\n            >\n                <nui-icon\n                    *ngIf="\n                        chartAssist.getHighlightedValue(lineSeries, \'status\');\n                        let status\n                    "\n                    iconSize="small"\n                    [icon]="statusIcons[status]"\n                    leftEdge\n                ></nui-icon>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </div>\n</div>\n'},99707:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport { rgb } from "d3-color";\nimport get from "lodash/get";\nimport moment, { Duration, Moment } from "moment/moment";\n\nimport {\n    BandScale,\n    CHART_MARKERS,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S_EXTENDED,\n    getColorValueByName,\n    IChartSeries,\n    ILineAccessors,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    SequentialChartMarkerProvider,\n    SequentialColorProvider,\n    SparkChartAssist,\n    StatusAccessors,\n    ThresholdsService,\n    TimeScale,\n} from "@nova-ui/charts";\n\nenum Status {\n    Error = "error",\n    Warning = "warning",\n}\n\n@Component({\n    selector: "nui-thresholds-spark-example",\n    templateUrl: "./thresholds-spark.example.component.html",\n})\nexport class ThresholdsSparkExampleComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n    public statusBgColors = new MappedValueProvider(\n        {\n            [Status.Error]: addOpacity(CHART_PALETTE_CS_S_EXTENDED[2], 0.2),\n            [Status.Warning]: addOpacity(CHART_PALETTE_CS_S_EXTENDED[4], 0.3),\n        },\n        "transparent"\n    );\n    public statusIcons = {\n        [Status.Error]: "status_critical",\n        [Status.Warning]: "status_warning",\n    };\n\n    private renderer: LineRenderer;\n    private accessors: LineAccessors;\n    private xScale = new TimeScale();\n\n    constructor(private thresholdsService: ThresholdsService) {}\n\n    public ngOnInit(): void {\n        this.chartAssist = new SparkChartAssist();\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(\n            new SequentialColorProvider([CHART_PALETTE_CS1[0]]),\n            new SequentialChartMarkerProvider([CHART_MARKERS[0]])\n        );\n        this.accessors.data.status = (d) => get(d, "__thresholds.status");\n\n        const seriesSet: IChartSeries<ILineAccessors>[] = getLineSeries(\n            this.xScale,\n            this.renderer,\n            this.accessors\n        );\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions = getZoneDefinitions();\n\n        const sparks = seriesSet.map((s) => {\n            // It\'s possible to manually define zones by area-like data series with start/end values for every data point. We don\'t do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                zoneDefinitions,\n                this.statusBgColors\n            );\n\n            // Backgrounds use the StatusBarRenderer which requires a special set of scales.\n            // Note that the x scale is shared between the foreground series and the background series.\n            // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n            const bgScales = {\n                x: s.scales.x,\n                y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n            };\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places such as the legend.\n            this.thresholdsService.injectThresholdsData(s, zones);\n            // We can use the thresholds service to create the background series for each spark\n            const backgrounds = this.thresholdsService.getBackgrounds(\n                s,\n                zones,\n                bgScales,\n                this.statusBgColors\n            );\n\n            return {\n                id: s.id,\n                chartSeriesSet: [s, backgrounds],\n            };\n        });\n\n        this.chartAssist.updateSparks(sparks);\n    }\n}\n\n/* Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 90 },\n        { status: Status.Warning, start: 70, end: 90 },\n    ];\n}\n\nfunction getLineSeries(\n    xScale: TimeScale,\n    renderer: LineRenderer,\n    accessors: LineAccessors\n): IChartSeries<ILineAccessors>[] {\n    const baseDate = moment([2016, 11, 25]);\n    const interval = moment.duration(1, "hours");\n    const series = [\n        {\n            id: "shared-pool-size",\n            name: "Shared pool size",\n            units: "MB",\n            values: [\n                67, 16, 3, 56, 26, 68, 74, 45, 54, 81, 13, 90, 72, 61, 97, 32,\n                64, 22, 60, 11, 53, 77, 88, 49, 66,\n            ],\n        },\n        {\n            id: "buffer-cache-size",\n            name: "Buffer cache size",\n            units: "MB",\n            values: [\n                5, 15, 52, 75, 64, 74, 6, 24, 100, 26, 91, 38, 4, 45, 93, 44,\n                59, 48, 99, 96, 53, 72, 32, 69, 27,\n            ],\n        },\n        {\n            id: "pga-cache-size",\n            name: "PGA cache size",\n            units: "MB",\n            values: [\n                83, 21, 43, 8, 96, 100, 5, 53, 14, 20, 82, 23, 29, 62, 33, 34,\n                94, 72, 77, 45, 81, 80, 19, 26, 86,\n            ],\n        },\n        {\n            id: "db-logical-read-rate",\n            name: "DB logical read rate",\n            units: "%",\n            values: [\n                74, 9, 10, 87, 83, 41, 4, 96, 100, 33, 30, 26, 40, 12, 21, 3,\n                69, 59, 32, 93, 62, 25, 90, 58, 51,\n            ],\n        },\n        {\n            id: "buffer-cache-hit-ratio",\n            name: "Buffer cache hit ratio",\n            units: "rps",\n            values: [\n                55, 78, 26, 35, 4, 37, 88, 64, 71, 40, 45, 9, 30, 51, 72, 44,\n                75, 39, 67, 24, 19, 1, 59, 11, 25,\n            ],\n        },\n        {\n            id: "library-cache-hit-ratio",\n            name: "Library cache hit ratio",\n            units: "%",\n            values: [\n                71, 57, 1, 3, 23, 4, 79, 54, 10, 29, 36, 99, 34, 75, 94, 24, 26,\n                50, 73, 64, 96, 12, 59, 95, 97,\n            ],\n        },\n    ];\n\n    return series.map((s) => ({\n        ...s,\n        data: getTimeData(s.values, baseDate, interval),\n        scales: {\n            x: xScale,\n            y: new LinearScale(),\n        },\n        renderer,\n        accessors,\n    }));\n}\n\nfunction getTimeData(\n    values: number[],\n    baseDate: Moment,\n    interval: Duration\n): { x: Moment; y: number }[] {\n    return values.map((v, i) => ({\n        x: baseDate.clone().add(moment.duration(i * interval.asMilliseconds())),\n        y: v,\n    }));\n}\n\nfunction addOpacity(c: string, opacity: number): string {\n    const color = getColorValueByName(c);\n    const rgbColor = rgb(color);\n    rgbColor.opacity = opacity;\n    return rgbColor.toString();\n}\n'},25908:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-chart-layout">\n    <div class="chart d-flex flex-column">\n        <nui-chart\n            class="w-100"\n            [chart]="chartAssist.chart"\n            nuiChartCollectionId="collection"\n        ></nui-chart>\n        <nui-chart\n            class="w-100"\n            [chart]="summaryChartAssist.chart"\n            nuiChartCollectionId="collection"\n        ></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="sec"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries.id"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},29686:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport cloneDeep from "lodash/cloneDeep";\nimport moment from "moment/moment";\n\nimport {\n    BandScale,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS_S_EXTENDED,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IScale,\n    ISimpleThresholdZone,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    thresholdsSummaryGridConfig,\n    thresholdsTopGridConfig,\n    THRESHOLDS_SUMMARY_RENDERER_CONFIG,\n    TimeScale,\n    XYGrid,\n} from "@nova-ui/charts";\n\nenum Status {\n    Error = "error",\n    Warning = "warning",\n    Ok = "ok",\n}\n\n@Component({\n    selector: "nui-thresholds-summary-example",\n    templateUrl: "./thresholds-summary.example.component.html",\n})\nexport class ThresholdsSummaryExampleComponent implements OnInit {\n    public chartAssist: ChartAssist;\n    public summaryChartAssist: ChartAssist;\n\n    private thresholdsPalette: ChartPalette;\n\n    constructor(private thresholdsService: ThresholdsService) {}\n\n    public ngOnInit(): void {\n        // When instantiating the charts, use the provided grid configuration functions for the main grid and summary grid\n        const mainChart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n        const summaryChart = new Chart(\n            new XYGrid(thresholdsSummaryGridConfig())\n        );\n\n        // Instantiate a chart assist for the main chart and summary chart\n        this.chartAssist = new ChartAssist(mainChart);\n        this.summaryChartAssist = new ChartAssist(summaryChart);\n\n        // Synchronize the legend interaction events between the chart assists\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        // Create scales for the main chart data series\n        // Note that the x scale is shared between the main chart data series, main chart thresholds, and summary visualizations\n        const sharedXScale = new TimeScale();\n        const mainChartDataScales: IXYScales = {\n            x: sharedXScale,\n            y: new LinearScale(),\n        };\n\n        // Set the left scale ID on the main chart grid to let it know which scale to use for the left axis ticks\n        (mainChart.getGrid() as XYGrid).leftScaleId = mainChartDataScales.y.id;\n\n        // To give the data series visualization some vertical breathing room, set the y scale\'s\n        // domainCalculator by invoking getAutomaticDomainWithIncludedInterval, where the\n        // specified interval is larger than the expected domain of the visualized data\n        mainChartDataScales.y.domainCalculator =\n            getAutomaticDomainWithIncludedInterval([0, 100]);\n\n        // Create a palette with a mapped value provider that maps status to color\n        this.thresholdsPalette = new ChartPalette(\n            new MappedValueProvider(\n                {\n                    [Status.Error]: CHART_PALETTE_CS_S_EXTENDED[2],\n                    [Status.Warning]: CHART_PALETTE_CS_S_EXTENDED[4],\n                    [Status.Ok]: CHART_PALETTE_CS_S_EXTENDED[8],\n                },\n                "transparent"\n            )\n        );\n\n        // Standard line renderer for the data series visualization\n        const renderer = new LineRenderer();\n        // Providing chartAssist colors and markers to LineAccessors will share them with the line chart\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n\n        // Here we define the data series on the main chart which will be visualized as lines.\n        // These series are also used in the creation of the corresponding main chart threshold series\n        // and summary chart series.\n        const mainChartDataSeriesSet: IChartSeries<ILineAccessors>[] =\n            getData().map((d) => ({\n                ...d,\n                accessors,\n                renderer,\n                scales: mainChartDataScales,\n            }));\n\n        // Zone definitions tell the threshold service where threshold zones begin and end\n        const zoneDefinitions: ISimpleThresholdZone[] = getZoneDefinitions();\n\n        // See the createMainChartThresholdSeriesSet method definition below for how to assemble\n        // the required elements for thresholds on the main chart\n        const mainChartThresholdSeriesSet =\n            this.createMainChartThresholdSeriesSet(\n                mainChartDataSeriesSet,\n                mainChartDataScales,\n                zoneDefinitions\n            );\n\n        // See the createSummarySeriesSet method definition below for how to assemble the required elements\n        // for thresholds on the summary chart\n        const summarySeriesSet = this.createSummarySeriesSet(\n            mainChartDataSeriesSet,\n            sharedXScale,\n            zoneDefinitions\n        );\n\n        // Invoke the update method on each of the chart assists passing the appropriate series sets\n        // ---\n        // *Note:* The order in which these series sets are rendered on the chart corresponds to the order in which\n        // the series are passed here. So, in this case, since the \'mainChartDataSeriesSet\' appears after the\n        // \'mainChartThresholdSeriesSet\' in this array, the main data elements will be rendered in front of the\n        // threshold-related elements on the chart.\n        this.chartAssist.update([\n            ...mainChartThresholdSeriesSet,\n            ...mainChartDataSeriesSet,\n        ]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private createMainChartThresholdSeriesSet(\n        mainChartDataSeriesSet: IChartSeries<ILineAccessors>[],\n        mainChartDataScales: IXYScales,\n        zoneDefinitions: ISimpleThresholdZone[]\n    ) {\n        // Create scales for the main chart thresholds.\n        // Note that the same x scale from the data series scales is used here.\n        // Also note that the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const thresholdScales = {\n            x: mainChartDataScales.x,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of mainChartDataSeriesSet) {\n            // It\'s possible to manually define zones by area-like data series with start/end values for every data point. We don\'t do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                zoneDefinitions,\n                this.thresholdsPalette.standardColors\n            );\n\n            // This injects threshold data into every data point of the source series. It is important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Here we create the threshold related visuals for this series. The methods on the thresholdService are broken down and\n            // generate separate elements of the whole, because some situations only require, for example, the backgrounds to be applied.\n            // In this case, we\'re creating backgrounds, side indicators, and threshold lines.\n            // ---\n            // *Note:* The order in which these elements are rendered on the chart corresponds to the order in which\n            // the elements are defined here. So, in this case, since the threshold lines are defined after the\n            // backgrounds in this array, the threshold lines will be rendered in front of the backgrounds on the chart.\n            const seriesThresholds = [\n                this.thresholdsService.getBackgrounds(\n                    s,\n                    zones,\n                    thresholdScales,\n                    this.thresholdsPalette.backgroundColors\n                ),\n                ...this.thresholdsService.getThresholdLines(zones),\n                ...this.thresholdsService.getSideIndicators(\n                    zones,\n                    mainChartDataScales\n                ),\n            ];\n\n            thresholdSeriesSet.push(...seriesThresholds);\n        }\n        return thresholdSeriesSet;\n    }\n\n    private createSummarySeriesSet(\n        seriesSet: IChartSeries<ILineAccessors>[],\n        xScale: IScale<any>,\n        zoneDefinitions: ISimpleThresholdZone[]\n    ) {\n        // Zone definitions let the threshold service know where threshold zones begin and end.\n        //\n        // The summary zones use the same definitions as those on the main chart,\n        // but they also include an "ok" zone for time periods during which a threshold is not exceeded.\n        // The reason the main chart thresholds don\'t include an "ok" zone is that there just isn\'t\n        // a need to visualize the data in an "ok" state there.\n        //\n        // On the summary, data falling within the "ok" zone is visualized as a thin green line.\n        const summaryZoneDefs = [...zoneDefinitions, { status: Status.Ok }];\n\n        // Create scales for the summary chart.\n        // Note that the same x scale from the data series scales of the main chart is used here.\n        // Also note that, similar to the main chart thresholds, the y band scale fixes the domain to a single value of STATUS_DOMAIN\n        const summaryScales = {\n            x: xScale,\n            y: new BandScale().fixDomain(StatusAccessors.STATUS_DOMAIN),\n        };\n\n        // A thickness map can be provided to the thresholds service getBackgrounds method if you want to specify a custom\n        // height for the threshold visualization. The default thickness is the full height of the grid.\n        const thicknessMap = { [Status.Ok]: BarRenderer.THIN };\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [\n            ...seriesSet,\n        ].map((s) => {\n            // It\'s possible to manually define zones by area-like data series with start/end values for every data point. We don\'t do that\n            // here, but what we do instead is use simplified zones that are defined by a start value and/or an end value. (A missing\n            // start or end value indicates an infinite zone.)\n            // Those values are then converted into a set of data series in this step.\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                summaryZoneDefs,\n                this.thresholdsPalette.standardColors\n            );\n\n            // This injects threshold data into every data point of the source series. It\'s important, because later we can\n            // access related threshold information from many different places like legend, tooltips or even when calculating\n            // other threshold related data series, which we do in the following step.\n            this.thresholdsService.injectThresholdsData(s, zones);\n\n            // Finally, create the thresholds series by invoking the threshold service\'s getBackgrounds method\n            // with arguments for the data series, the defined zones, the palette\'s standard colors\n            // and the predefined THRESHOLDS_SUMMARY_RENDERER_CONFIG.\n            // The renderer config defines the behavior of series when they are emphasized, hidden, etc.\n            return this.thresholdsService.getBackgrounds(\n                s,\n                zones,\n                summaryScales,\n                this.thresholdsPalette.standardColors,\n                thicknessMap,\n                cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG)\n            );\n        });\n\n        return summarySeriesSet;\n    }\n}\n\n/** Chart data */\nfunction getZoneDefinitions() {\n    return [\n        { status: Status.Error, start: 80 },\n        { status: Status.Warning, start: 60, end: 80 },\n    ];\n}\n\nfunction getData(): any[] {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 30 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 95 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 15 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 60 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 35 },\n            ],\n        },\n        {\n            id: "series-2",\n            name: "Series 2",\n            data: [\n                { x: moment("2016-12-25T15:14:29.909Z", format), y: 60 },\n                { x: moment("2016-12-27T15:14:29.909Z", format), y: 40 },\n                { x: moment("2016-12-29T15:14:29.909Z", format), y: 70 },\n                { x: moment("2016-12-31T15:14:29.909Z", format), y: 45 },\n                { x: moment("2017-01-03T15:14:29.909Z", format), y: 90 },\n            ],\n        },\n    ];\n}\n'},46042:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="nui-thresholds-summary-test-harness">\n    <nui-thresholds-summary-test\n        [data]="data"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <br />\n    <h2>Data</h2>\n    <input\n        id="data-input"\n        type="text"\n        class="w-100 mt-5"\n        [ngModel]="data | json"\n        (ngModelChange)="dataChanged($event)"\n    />\n    <h2>Zones</h2>\n    <textarea\n        id="zones-input"\n        rows="13"\n        cols="30"\n        [ngModel]="zones | json"\n        (ngModelChange)="zonesChanged($event)"\n    ></textarea>\n</div>\n'},76329:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport moment from "moment/moment";\n\nimport { ISimpleThresholdZone } from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-thresholds-summary-test-harness",\n    templateUrl: "./thresholds-summary-test-harness.component.html",\n})\nexport class ThresholdsSummaryTestHarnessComponent implements OnInit {\n    public data = {\n        "series-1": [10, 30, 70, 30, 10],\n        "series-2": [0, 40, 60, 40, 0],\n    };\n    public zones: ISimpleThresholdZone[] = [\n        { status: "error", start: 50 },\n        { status: "warning", start: 20, end: 50 },\n    ];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // "2016-12-25T15:14:29.000Z"\n\n    public ngOnInit(): void {}\n\n    public dataChanged(value: string): void {\n        this.data = this.validateInput(value) || this.data;\n    }\n\n    public zonesChanged(value: string): void {\n        this.zones = this.validateInput(value) || this.zones;\n    }\n\n    private validateInput(value: string) {\n        let validatedInput: any;\n        try {\n            validatedInput = JSON.parse(value);\n        } catch {}\n        return validatedInput;\n    }\n}\n'},5845:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-start">\n    <div class="d-flex flex-column">\n        <nui-chart\n            class="thresholds-main-chart"\n            [chart]="chart"\n            [nuiChartCollectionId]="uid"\n        ></nui-chart>\n        <nui-chart\n            class="thresholds-summary-chart"\n            [chart]="summaryChart"\n            [nuiChartCollectionId]="uid"\n        ></nui-chart>\n    </div>\n    <nui-legend\n        class="ml-2 thresholds-legend"\n        seriesUnitLabel="sec"\n        [active]="chartAssist.isLegendActive"\n        [interactive]="true"\n        (mouseleave)="chartAssist.resetVisibleSeries()"\n    >\n        <nui-legend-series\n            *ngFor="\n                let legendSeries of chartAssist.legendSeriesSet;\n                trackBy: chartAssist.seriesTrackByFn\n            "\n            [descriptionPrimary]="legendSeries[\'name\']"\n            (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            [seriesRenderState]="\n                chartAssist.renderStatesIndex[legendSeries.id]?.state\n            "\n            [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n            (isSelectedChange)="\n                chartAssist.toggleSeries(legendSeries.id, $event)\n            "\n        >\n            <nui-rich-legend-tile\n                [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [color]="chartAssist.palette.textColors.get(legendSeries.id)"\n            >\n                <nui-chart-marker\n                    rightEdge\n                    [marker]="chartAssist.markers.get(legendSeries.id)"\n                    [color]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </nui-legend>\n</div>\n'},51733:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport {\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n} from "@angular/core";\nimport cloneDeep from "lodash/cloneDeep";\nimport { Moment } from "moment/moment";\n\nimport {\n    BandScale,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    ChartTooltipsPlugin,\n    CHART_PALETTE_CS_S_EXTENDED,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    IDataSeries,\n    ILineAccessors,\n    ISimpleThresholdZone,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    thresholdsSummaryGridConfig,\n    thresholdsTopGridConfig,\n    THRESHOLDS_SUMMARY_RENDERER_CONFIG,\n    TimeScale,\n    UtilityService,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-thresholds-summary-test",\n    templateUrl: "./thresholds-summary-test.component.html",\n})\nexport class ThresholdsSummaryTestComponent implements OnChanges, OnInit {\n    @Input() data: Record<string, number[]>;\n    @Input() zones: ISimpleThresholdZone[];\n    @Input() startDate: Moment;\n\n    public uid = UtilityService.uuid();\n\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\n\n    public chartAssist = new ChartAssist(this.chart);\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\n    public tooltipsPlugin: ChartTooltipsPlugin;\n    public thresholdsPalette: ChartPalette;\n    public thicknessMap: Record<string, number>;\n\n    private accessors: LineAccessors;\n    private renderer: LineRenderer;\n    private scales: IXYScales;\n    private backgroundScales: IXYScales;\n    private summaryScales: IXYScales;\n\n    constructor(private thresholdsService: ThresholdsService) {\n        this.scales = {\n            x: new TimeScale(),\n            y: new LinearScale(),\n        };\n\n        this.backgroundScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.summaryScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.configureGrids(this.scales.y.id);\n\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval(\n            [0, 100]\n        );\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        this.thresholdsPalette = new ChartPalette(\n            new MappedValueProvider(\n                {\n                    error: CHART_PALETTE_CS_S_EXTENDED[2],\n                    warning: CHART_PALETTE_CS_S_EXTENDED[4],\n                    ok: CHART_PALETTE_CS_S_EXTENDED[8],\n                },\n                "transparent"\n            )\n        );\n        this.thicknessMap = { ok: BarRenderer.THIN };\n\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n    }\n\n    public ngOnInit(): void {\n        this.update(this.data);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes["data"] || changes["zones"]) {\n            this.update(this.data);\n        }\n    }\n\n    private update(data: Record<string, number[]>) {\n        const seriesSet: IChartSeries<ILineAccessors>[] = getDataSeriesSet(\n            data,\n            this.accessors,\n            this.startDate\n        ).map((d: any) => ({\n            ...d,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [\n            ...seriesSet,\n        ].map((s) => {\n            const summaryZoneDefs = [...this.zones, { status: "ok" }];\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                summaryZoneDefs,\n                this.thresholdsPalette.standardColors\n            );\n            this.thresholdsService.injectThresholdsData(s, zones);\n            return this.thresholdsService.getBackgrounds(\n                s,\n                zones,\n                this.summaryScales,\n                this.thresholdsPalette.standardColors,\n                this.thicknessMap,\n                cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG)\n            );\n        });\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                this.zones,\n                this.thresholdsPalette.standardColors\n            );\n            this.thresholdsService.injectThresholdsData(s, zones);\n            thresholdSeriesSet.push(\n                ...[\n                    this.thresholdsService.getBackgrounds(\n                        s,\n                        zones,\n                        this.backgroundScales,\n                        this.thresholdsPalette.backgroundColors\n                    ),\n                    ...this.thresholdsService.getThresholdLines(zones),\n                    ...this.thresholdsService.getSideIndicators(\n                        zones,\n                        this.scales\n                    ),\n                ]\n            );\n        }\n        // chart assist needs to be used to update data\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private configureGrids(mainChartLeftScaleId: string) {\n        const topGrid = this.chart.getGrid() as XYGrid;\n        topGrid.leftScaleId = mainChartLeftScaleId;\n        const topGridConfig = topGrid.config();\n        topGridConfig.dimension.width(400);\n        topGridConfig.dimension.height(110);\n        topGridConfig.dimension.autoWidth = false;\n        topGridConfig.dimension.autoHeight = false;\n\n        const summaryGridConfig = this.summaryChart.getGrid().config();\n        summaryGridConfig.dimension.width(400);\n        summaryGridConfig.dimension.autoWidth = false;\n    }\n}\n\nfunction getDataSeriesSet(\n    data: Record<string, number[]>,\n    accessors: LineAccessors,\n    startDate: Moment\n): IDataSeries<LineAccessors>[] {\n    const toDataPoint = (y: number, i: number) => ({\n        x: startDate.clone().add(i, "d"),\n        y,\n    });\n\n    return Object.keys(data).map((seriesId) => {\n        const seriesData = data[seriesId];\n        const dataValues = seriesData.map(toDataPoint);\n\n        return {\n            id: seriesId,\n            name: seriesId,\n            data: dataValues,\n            accessors,\n        };\n    });\n}\n'},97444:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<charts-test-harness>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-single-1"\n        [data]="singleSeries"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-single-2"\n        [data]="singleSeriesNoHits"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-single-3"\n        [data]="thresholdEdges"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <nui-thresholds-summary-with-interval-scale-test></nui-thresholds-summary-with-interval-scale-test>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-multiple-1"\n        [data]="multipleSeries"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-multiple-2"\n        [data]="multipleSeries"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n    <nui-thresholds-summary-test\n        class="nui-thresholds-summary-multiple-3"\n        [data]="multipleSeries"\n        [zones]="zones"\n        [startDate]="startDate"\n    ></nui-thresholds-summary-test>\n</charts-test-harness>\n'},68259:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\nimport moment from "moment/moment";\n\n@Component({\n    selector: "nui-thresholds-summary-visual-test",\n    templateUrl: "./thresholds-summary-visual-test.component.html",\n})\nexport class ThresholdsSummaryVisualTestComponent {\n    public singleSeries = { "series-1": [30, 95, 15, 60, 35] };\n    public thresholdEdges = { "series-1": [30, 80, 80, 80, 45, 60, 10, 35] };\n    public singleSeriesNoHits = { "series-1": [30, 55, 25, 55, 35] };\n    public multipleSeries = {\n        "series-1": [30, 95, 15, 60, 35],\n        "series-2": [100, 40, 70, 45, 90],\n    };\n\n    public zones = [\n        { status: "error", start: 80 },\n        { status: "error", start: -100, end: 10 },\n        { status: "warning", start: 60, end: 80 },\n        { status: "warning", start: 10, end: 20 },\n    ];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // "2016-12-25T15:14:29.000Z"\n}\n'},2050:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<div class="d-flex align-items-start">\n    <div class="d-flex flex-column">\n        <nui-chart\n            class="thresholds-main-chart"\n            [chart]="chart"\n            [nuiChartCollectionId]="uid"\n        ></nui-chart>\n        <nui-chart\n            class="thresholds-summary-chart"\n            [chart]="summaryChart"\n            [nuiChartCollectionId]="uid"\n        ></nui-chart>\n    </div>\n    <nui-legend\n        class="ml-2 thresholds-legend"\n        seriesUnitLabel="sec"\n        [active]="chartAssist.isLegendActive"\n        [interactive]="true"\n        (mouseleave)="chartAssist.resetVisibleSeries()"\n    >\n        <nui-legend-series\n            *ngFor="\n                let legendSeries of chartAssist.legendSeriesSet;\n                trackBy: chartAssist.seriesTrackByFn\n            "\n            [descriptionPrimary]="legendSeries[\'name\']"\n            (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n            [seriesRenderState]="\n                chartAssist.renderStatesIndex[legendSeries.id]?.state\n            "\n            [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n            (isSelectedChange)="\n                chartAssist.toggleSeries(legendSeries.id, $event)\n            "\n        >\n            <nui-rich-legend-tile\n                [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                [backgroundColor]="\n                    chartAssist.palette.standardColors.get(legendSeries.id)\n                "\n                [color]="chartAssist.palette.textColors.get(legendSeries.id)"\n            >\n                <nui-chart-marker\n                    rightEdge\n                    [marker]="chartAssist.markers.get(legendSeries.id)"\n                    [color]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                >\n                </nui-chart-marker>\n            </nui-rich-legend-tile>\n        </nui-legend-series>\n    </nui-legend>\n</div>\n'},92764:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnInit } from "@angular/core";\nimport cloneDeep from "lodash/cloneDeep";\nimport moment, { duration } from "moment/moment";\n\nimport {\n    BandScale,\n    BarRenderer,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    ChartTooltipsPlugin,\n    CHART_PALETTE_CS_S_EXTENDED,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartAssistSeries,\n    IChartSeries,\n    ILineAccessors,\n    IXYScales,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    StatusAccessors,\n    ThresholdsService,\n    thresholdsSummaryGridConfig,\n    thresholdsTopGridConfig,\n    THRESHOLDS_SUMMARY_RENDERER_CONFIG,\n    TimeIntervalScale,\n    UtilityService,\n    XYGrid,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-thresholds-summary-with-interval-scale-test",\n    templateUrl: "./thresholds-summary-with-interval-scale-test.component.html",\n})\nexport class ThresholdsSummaryWithIntervalScaleTestComponent implements OnInit {\n    public zones = [\n        { status: "error", start: 80 },\n        { status: "error", start: -100, end: 10 },\n        { status: "warning", start: 60, end: 80 },\n        { status: "warning", start: 10, end: 20 },\n    ];\n    public summaryZones = [...this.zones, { status: "ok", start: 20, end: 60 }];\n    public startDate = moment([2016, 11, 25, 15, 14, 29]); // "2016-12-25T15:14:29.000Z"\n    public uid = UtilityService.uuid();\n\n    public chart = new Chart(new XYGrid(thresholdsTopGridConfig()));\n    public summaryChart = new Chart(new XYGrid(thresholdsSummaryGridConfig()));\n\n    public chartAssist = new ChartAssist(this.chart);\n    public summaryChartAssist = new ChartAssist(this.summaryChart);\n    public tooltipsPlugin: ChartTooltipsPlugin;\n    public thresholdsPalette: ChartPalette;\n    public thicknessMap: Record<string, number>;\n\n    private accessors: LineAccessors;\n    private renderer: LineRenderer;\n    private scales: IXYScales;\n    private backgroundScales: IXYScales;\n    private summaryScales: IXYScales;\n\n    constructor(private thresholdsService: ThresholdsService) {\n        this.scales = {\n            x: new TimeIntervalScale(duration(5, "minutes")),\n            y: new LinearScale(),\n        };\n\n        this.backgroundScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.summaryScales = {\n            x: this.scales.x,\n            y: new BandScale(),\n        };\n\n        this.configureGrids(this.scales.y.id);\n\n        this.summaryChartAssist.syncWithChartAssist(this.chartAssist);\n\n        this.scales.y.domainCalculator = getAutomaticDomainWithIncludedInterval(\n            [0, 100]\n        );\n        this.backgroundScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n        this.summaryScales.y.fixDomain(StatusAccessors.STATUS_DOMAIN);\n\n        this.thresholdsPalette = new ChartPalette(\n            new MappedValueProvider(\n                {\n                    error: CHART_PALETTE_CS_S_EXTENDED[2],\n                    warning: CHART_PALETTE_CS_S_EXTENDED[4],\n                    ok: CHART_PALETTE_CS_S_EXTENDED[8],\n                },\n                "transparent"\n            )\n        );\n        this.thicknessMap = { ok: BarRenderer.THIN };\n\n        this.renderer = new LineRenderer();\n        this.accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n    }\n\n    public ngOnInit(): void {\n        this.update();\n    }\n\n    private update() {\n        const seriesSet: IChartSeries<ILineAccessors>[] = getData().map(\n            (d: any) => ({\n                ...d,\n                renderer: this.renderer,\n                accessors: this.accessors,\n                scales: this.scales,\n            })\n        );\n\n        const summarySeriesSet: IChartAssistSeries<IAccessors>[] = [\n            ...seriesSet,\n        ].map((s) => {\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                this.summaryZones,\n                this.thresholdsPalette.standardColors\n            );\n            this.thresholdsService.injectThresholdsData(s, zones);\n            return this.thresholdsService.getBackgrounds(\n                s,\n                zones,\n                this.summaryScales,\n                this.thresholdsPalette.standardColors,\n                this.thicknessMap,\n                cloneDeep(THRESHOLDS_SUMMARY_RENDERER_CONFIG)\n            );\n        });\n        const thresholdSeriesSet: IChartAssistSeries<IAccessors>[] = [];\n        for (const s of seriesSet) {\n            const zones = this.thresholdsService.getThresholdZones(\n                s,\n                this.zones,\n                this.thresholdsPalette.standardColors\n            );\n            this.thresholdsService.injectThresholdsData(s, zones);\n            thresholdSeriesSet.push(\n                ...[\n                    this.thresholdsService.getBackgrounds(\n                        s,\n                        zones,\n                        this.backgroundScales,\n                        this.thresholdsPalette.backgroundColors\n                    ),\n                    ...this.thresholdsService.getThresholdLines(zones),\n                    ...this.thresholdsService.getSideIndicators(\n                        zones,\n                        this.scales\n                    ),\n                ]\n            );\n        }\n        // chart assist needs to be used to update data\n        this.chartAssist.update([...thresholdSeriesSet, ...seriesSet]);\n        this.summaryChartAssist.update(summarySeriesSet);\n    }\n\n    private configureGrids(mainChartLeftScaleId: string) {\n        const topGrid = this.chart.getGrid() as XYGrid;\n        topGrid.leftScaleId = mainChartLeftScaleId;\n        const topGridConfig = topGrid.config();\n        topGridConfig.dimension.width(400);\n        topGridConfig.dimension.height(110);\n        topGridConfig.dimension.autoWidth = false;\n        topGridConfig.dimension.autoHeight = false;\n\n        const summaryGridConfig = this.summaryChart.getGrid().config();\n        summaryGridConfig.dimension.width(400);\n        summaryGridConfig.dimension.autoWidth = false;\n    }\n}\n\nfunction getData() {\n    const format = "YYYY-MM-DDTHH:mm:ssZ";\n    return [\n        {\n            id: "series-1",\n            name: "Series 1",\n            data: [\n                { x: moment("2016-12-25T15:05:00Z", format).toDate(), y: 30 },\n                { x: moment("2016-12-25T15:10:00Z", format).toDate(), y: 80 },\n                { x: moment("2016-12-25T15:15:00Z", format).toDate(), y: 80 },\n                { x: moment("2016-12-25T15:20:00Z", format).toDate(), y: 80 },\n                { x: moment("2016-12-25T15:25:00Z", format).toDate(), y: 45 },\n                { x: moment("2016-12-25T15:30:00Z", format).toDate(), y: 60 },\n                { x: moment("2016-12-25T15:35:00Z", format).toDate(), y: 10 },\n                { x: moment("2016-12-25T15:40:00Z", format).toDate(), y: 35 },\n            ],\n        },\n    ];\n}\n'},44491:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<h1>Time Frame Bar</h1>\n\n<p>\n    This example shows the current way of implementing a chart with zooming\n    capability and a time frame bar. We don\'t provide components that would\n    encapsulate this logic, so it needs to be implemented from scratch like\n    this. It takes advantage of the filtering session implementation to connect\n    the filtering components on the page.\n</p>\n\n<nui-example-wrapper\n    filenamePrefix="time-frame-bar-basic"\n    exampleTitle="Time Frame Bar"\n>\n    <nui-time-frame-bar-example></nui-time-frame-bar-example>\n</nui-example-wrapper>\n'},36646:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component } from "@angular/core";\n\n@Component({\n    selector: "nui-chart-docs-time-frame-bar",\n    templateUrl: "./chart-docs-time-frame-bar.component.html",\n})\nexport class ChartDocsTimeFrameBarComponent {}\n'},92410:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { NgModule } from "@angular/core";\nimport { RouterModule, Routes } from "@angular/router";\n\nimport {\n    NuiBusyModule,\n    NuiButtonModule,\n    NuiCommonModule,\n    NuiDialogModule,\n    NuiDocsModule,\n    NuiIconModule,\n    NuiLayoutModule,\n    NuiPopoverModule,\n    NuiTimeFrameBarModule,\n    NuiTimeFramePickerModule,\n    NuiTooltipModule,\n    SrlcStage,\n} from "@nova-ui/bits";\nimport { DEMO_PATH_TOKEN } from "@nova-ui/bits";\nimport { NuiChartsModule } from "@nova-ui/charts";\n\nimport { getDemoFiles } from "../../../demo-files-factory";\nimport { DemoCommonModule } from "../common/demo-common.module";\nimport { ChartDocsTimeFrameBarComponent } from "./chart-docs-time-frame-bar.component";\nimport { TimeFrameBarBasicExampleComponent } from "./time-frame-bar-basic/time-frame-bar-basic.example.component";\nimport { TimeFrameBarTestComponent } from "./time-frame-bar-test/time-frame-bar-test.component";\n\nconst exampleRoutes: Routes = [\n    {\n        path: "",\n        component: ChartDocsTimeFrameBarComponent,\n        data: {\n            srlc: {\n                stage: SrlcStage.beta,\n            },\n            showThemeSwitcher: true,\n        },\n    },\n    {\n        path: "example",\n        component: TimeFrameBarBasicExampleComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n    {\n        path: "test",\n        component: TimeFrameBarTestComponent,\n        data: {\n            srlc: {\n                hideIndicator: true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        ChartDocsTimeFrameBarComponent,\n        TimeFrameBarBasicExampleComponent,\n        TimeFrameBarTestComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiBusyModule,\n        NuiChartsModule,\n        NuiCommonModule,\n        NuiDialogModule,\n        NuiDocsModule,\n        NuiIconModule,\n        NuiLayoutModule,\n        NuiPopoverModule,\n        NuiTimeFramePickerModule,\n        NuiTimeFrameBarModule,\n        NuiTooltipModule,\n        RouterModule.forChild(exampleRoutes),\n    ],\n    providers: [\n        {\n            provide: DEMO_PATH_TOKEN,\n            useValue: getDemoFiles("time-frame-bar"),\n        },\n    ],\n})\nexport default class ChartDocsTimeFrameBarModule {}\n'},24675:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<nui-time-frame-bar\n    [timeFrame]="timeFrame"\n    (timeFrameChange)="updateTimeFrame($event)"\n    [historyIndex]="history.index"\n    [minDate]="fromDate"\n    [maxDate]="toDate"\n    (undo)="zoomUndo()"\n    (clear)="zoomReset()"\n>\n    <nui-icon icon="calendar" class="pr-3"></nui-icon>\n    {{ timeFrame | timeFrame }}\n    <nui-quick-picker timeFrameSelection>\n        <nui-time-frame-picker></nui-time-frame-picker>\n    </nui-quick-picker>\n</nui-time-frame-bar>\n\n<div class="nui-chart-layout p-3">\n    <div class="axis-label-left nui-text-small">\n        <strong i18n>Average CPU load (%)</strong>\n    </div>\n    <div class="chart">\n        <nui-chart class="d-flex w-100 h-100" [chart]="chart"></nui-chart>\n    </div>\n    <div class="legend">\n        <nui-legend\n            seriesUnitLabel="%"\n            [active]="chartAssist.isLegendActive"\n            [interactive]="true"\n            (mouseleave)="chartAssist.resetVisibleSeries()"\n        >\n            <nui-legend-series\n                *ngFor="\n                    let legendSeries of chartAssist.legendSeriesSet;\n                    trackBy: chartAssist.seriesTrackByFn\n                "\n                [descriptionPrimary]="legendSeries[\'name\']"\n                (mouseenter)="chartAssist.emphasizeSeries(legendSeries.id)"\n                [seriesRenderState]="\n                    chartAssist.renderStatesIndex[legendSeries.id]?.state\n                "\n                [isSelected]="!chartAssist.isSeriesHidden(legendSeries.id)"\n                (isSelectedChange)="\n                    chartAssist.toggleSeries(legendSeries.id, $event)\n                "\n            >\n                <nui-rich-legend-tile\n                    [value]="chartAssist.getHighlightedValue(legendSeries, \'y\')"\n                    [backgroundColor]="\n                        chartAssist.palette.standardColors.get(legendSeries.id)\n                    "\n                    [color]="\n                        chartAssist.palette.textColors.get(legendSeries.id)\n                    "\n                >\n                    <nui-chart-marker\n                        rightEdge\n                        [marker]="chartAssist.markers.get(legendSeries.id)"\n                        [color]="\n                            chartAssist.palette.standardColors.get(\n                                legendSeries.id\n                            )\n                        "\n                    >\n                    </nui-chart-marker>\n                </nui-rich-legend-tile>\n            </nui-legend-series>\n        </nui-legend>\n    </div>\n</div>\n'},13607:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { Component, OnDestroy, OnInit } from "@angular/core";\nimport moment, { Moment } from "moment/moment";\nimport { Subscription } from "rxjs";\n\nimport {\n    HistoryStorage,\n    IFilter,\n    IFilteringOutputs,\n    ITimeframe,\n    NoopDataSourceService,\n} from "@nova-ui/bits";\nimport {\n    Chart,\n    ChartAssist,\n    getAutomaticDomainWithIncludedInterval,\n    IAccessors,\n    IChartAssistSeries,\n    ISetDomainEventPayload,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SET_DOMAIN_EVENT,\n    TimeScale,\n    XYGrid,\n    ZoomPlugin,\n} from "@nova-ui/charts";\n\n@Component({\n    selector: "nui-time-frame-bar-example",\n    templateUrl: "./time-frame-bar-basic.example.component.html",\n    providers: [NoopDataSourceService, HistoryStorage],\n})\nexport class TimeFrameBarBasicExampleComponent implements OnInit, OnDestroy {\n    private series = getData();\n    public fromDate = moment("2018-05-01 15:00:00").subtract(5.2, "days");\n    public toDate = moment("2019-01-01 15:00:00");\n\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public timeFrame: ITimeframe;\n\n    private xScale = new TimeScale("time-scale");\n    private yScale = new LinearScale();\n    private seriesSet: IChartAssistSeries<IAccessors>[] = [];\n    private filteringSubscription: Subscription;\n\n    constructor(\n        public history: HistoryStorage<ITimeframe>,\n        private dataSourceService: NoopDataSourceService<ITimeframe>\n    ) {}\n\n    public ngOnInit(): void {\n        const accessors = new LineAccessors(\n            this.chartAssist.palette.standardColors,\n            this.chartAssist.markers\n        );\n        const renderer = new LineRenderer();\n        this.yScale.domainCalculator = getAutomaticDomainWithIncludedInterval([\n            0, 100,\n        ]);\n        this.seriesSet = Object.keys(this.series).map((key: string) => ({\n            id: key,\n            name: key,\n            data: buildTimeSeriesFromData(\n                this.fromDate,\n                this.toDate,\n                this.series[key]\n            ),\n            accessors,\n            renderer,\n            scales: { x: this.xScale, y: this.yScale },\n        }));\n\n        this.timeFrame = this.history.save({\n            startDatetime: this.fromDate,\n            endDatetime: this.toDate,\n            selectedPresetId: undefined,\n        });\n\n        this.chart.addPlugins(new ZoomPlugin());\n\n        // Update Time Frame Bar when chart got zoomed\n        this.chart\n            .getEventBus()\n            .getStream(SET_DOMAIN_EVENT)\n            .subscribe((event) => {\n                const payload = <ISetDomainEventPayload>event.data;\n                const newDomain = payload[this.xScale.id];\n                this.timeFrame = this.history.save({\n                    startDatetime: moment(newDomain[0]),\n                    endDatetime: moment(newDomain[1]),\n                    selectedPresetId: undefined,\n                });\n\n                void this.dataSourceService.applyFilters();\n            });\n\n        this.filteringSubscription = this.setUpFiltering();\n\n        void this.dataSourceService.applyFilters();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.filteringSubscription) {\n            this.filteringSubscription.unsubscribe();\n        }\n    }\n\n    public updateTimeFrame(value: ITimeframe): void {\n        this.timeFrame = this.history.restart(value);\n        this.dataSourceService.applyFilters();\n    }\n\n    // Use the history storage to go back one time frame\n    public zoomUndo(): void {\n        this.timeFrame = this.history.undo();\n        this.dataSourceService.applyFilters();\n    }\n\n    // Reset the history storage and save a new initial value if provided\n    // Otherwise preserve the previous one\n    public zoomReset(value?: ITimeframe): void {\n        this.timeFrame = this.history.restart(value);\n        this.dataSourceService.applyFilters();\n    }\n\n    private setUpFiltering(): Subscription {\n        this.dataSourceService.registerComponent({\n            timeframe: {\n                componentInstance: {\n                    getFilters: () =>\n                        <IFilter<ITimeframe>>{\n                            type: "ITimeframe",\n                            value: this.timeFrame,\n                        },\n                },\n            },\n        });\n\n        return this.dataSourceService.outputsSubject.subscribe(\n            (data: IFilteringOutputs) => {\n                this.xScale.fixDomain([\n                    data.timeframe.value.startDatetime.toDate(),\n                    data.timeframe.value.endDatetime.toDate(),\n                ]);\n                this.chartAssist.update(this.seriesSet);\n            }\n        );\n    }\n}\n\n/* Chart data */\nfunction getData(): Record<string, number[]> {\n    return {\n        "Tex-lab-aus-2621": [\n            18, 27, 35, 33, 26, 50, 36, 47, 58, 66, 65, 50, 40, 31, 42, 62, 57,\n            99, 75, 55, 73, 69, 77, 57, 61, 68, 82, 81, 78, 67,\n        ],\n        "Cz-lab-brn-02": [\n            41, 50, 56, 40, 44, 35, 27, 42, 38, 23, 20, 13, 29, 42, 84, 93, 71,\n            60, 54, 79, 64, 49, 48, 59, 76, 63, 52, 84, 89, 80,\n        ],\n    };\n}\n\nfunction buildTimeSeriesFromData(\n    from: Moment,\n    to: Moment,\n    data: number[]\n): { x: Moment; y: number }[] {\n    const count = data.length;\n    if (!from || !to || count === 0) {\n        return [];\n    }\n\n    const interval = count > 1 ? to.diff(from) / (count - 1) : 0;\n    return data.map((y, i) => ({\n        x: from.clone().add(moment.duration(i * interval)),\n        y,\n    }));\n}\n'},5598:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport moment, { Moment } from "moment/moment";\nimport { Observable, of } from "rxjs";\nimport { delay } from "rxjs/operators";\n\nenum DataInterval {\n    Poll = 5,\n    Hour = 60,\n    // Day = 24 * 60,\n    // Week = 7 * 24 * 60,\n}\n\nexport class TimeFrameBarDataService {\n    /* eslint-disable max-len */\n    private factors = {\n        day: [\n            42, 7, 63, 33, 10, 16, 57, 16, 88, 44, 35, 85, 46, 73, 29, 35, 51,\n            52, 100, 51, 40, 87, 42, 90, 75, 90, 70, 16, 4, 43, 18, 63, 28, 15,\n            86, 81, 48, 86, 91, 89, 15, 89, 66, 35, 65, 18, 59, 75, 69, 64, 55,\n            67, 60, 76, 29, 81, 87, 73, 10, 19, 29, 83, 16, 72, 80, 43, 28, 53,\n            38, 24, 88, 81, 14, 68, 80, 44, 72, 56, 89, 83, 6, 1, 1, 11, 66, 39,\n            42, 81, 31, 48, 11, 76, 41, 60, 40, 15, 75, 33, 90, 80, 37, 40, 39,\n            58, 69, 31, 61, 80, 85, 57, 38, 3, 45, 36, 71, 66, 36, 58, 82, 70,\n            90, 78, 33, 72, 98, 36, 32, 61, 44, 13, 22, 90, 66, 87, 55, 21, 63,\n            70, 41, 61, 19, 42, 65, 79, 17, 14, 85, 69, 79, 77, 99, 86, 5, 31,\n            94, 2, 37, 54, 79, 32, 63, 83, 64, 52, 59, 35, 18, 45, 58, 23, 58,\n            99, 61, 60, 78, 95, 63, 35, 27, 93, 46, 86, 51, 80, 73, 6, 66, 72,\n            96, 7, 90, 94, 3, 66, 1, 38, 30, 11, 58, 91, 84, 100, 90, 70, 51,\n            77, 56, 53, 49, 42, 84, 10, 76, 11, 66, 41, 38, 68, 24, 84, 89, 72,\n            74, 54, 29, 18, 36, 13, 17, 18, 82, 14, 50, 10, 47, 12, 1, 4, 63,\n            59, 62, 78, 83, 5, 25, 8, 59, 59, 28, 56, 35, 33, 31, 37, 5, 67, 34,\n            93, 25, 66, 69, 64, 23, 69, 60, 24, 26, 81, 88, 66, 80, 45, 91, 68,\n            83, 8, 83, 43, 96, 85, 8, 47, 67, 14, 64, 26, 96, 45,\n        ],\n        year: [\n            64, 70, 41, 96, 74, 38, 38, 79, 77, 24, 98, 78, 22, 90, 7, 42, 95,\n            76, 92, 86, 13, 5, 80, 6, 9, 90, 40, 94, 66, 12, 28, 7, 76, 74, 23,\n            79, 82, 9, 9, 84, 59, 92, 63, 15, 25, 18, 83, 35, 46, 14, 22, 84,\n            34, 17, 9, 25, 34, 89, 48, 80, 76, 38, 60, 43, 41, 88, 35, 32, 62,\n            80, 76, 64, 41, 49, 23, 61, 27, 56, 3, 88, 37, 24, 15, 88, 85, 18,\n            41, 74, 81, 13, 40, 10, 39, 30, 45, 21, 32, 46, 54, 8, 28, 19, 74,\n            87, 36, 43, 74, 15, 58, 24, 98, 14, 49, 96, 51, 83, 4, 4, 13, 72,\n            42, 62, 26, 80, 85, 46, 74, 60, 14, 5, 97, 16, 90, 84, 52, 10, 18,\n            26, 8, 49, 71, 34, 87, 32, 15, 46, 23, 10, 86, 7, 18, 51, 31, 72,\n            20, 43, 10, 91, 74, 51, 86, 89, 32, 79, 94, 5, 41, 16, 79, 66, 84,\n            24, 74, 78, 69, 85, 46, 57, 92, 92, 3, 14, 5, 12, 63, 1, 6, 37, 85,\n            79, 18, 88, 42, 8, 25, 94, 87, 7, 52, 16, 35, 43, 65, 63, 46, 38,\n            98, 55, 100, 14, 45, 50, 49, 90, 98, 47, 20, 83, 84, 84, 58, 79,\n            100, 19, 75, 94, 34, 5, 94, 29, 96, 80, 46, 33, 73, 82, 58, 68, 98,\n            100, 10, 46, 96, 87, 96, 5, 64, 53, 5, 7, 19, 65, 91, 78, 59, 14,\n            19, 12, 15, 92, 8, 15, 19, 99, 26, 25, 45, 29, 39, 1, 61, 74, 88,\n            27, 43, 1, 93, 75, 91, 97, 38, 39, 24, 94, 29, 18, 88, 56, 62, 7,\n            88, 13, 34, 21, 20, 41, 90, 95, 2, 17, 26, 4, 44, 70, 18, 65, 75,\n            62, 18, 46, 18, 73, 76, 95, 2, 30, 31, 77, 77, 80, 23, 51, 48, 42,\n            78, 65, 78, 56, 37, 46, 96, 72, 49, 48, 8, 45, 89, 42, 87, 28, 42,\n            53, 94, 73, 57, 30, 75, 53, 77, 62, 9, 71, 9, 48, 97, 92, 91, 24,\n            44, 83, 8, 86, 41, 6, 21, 45,\n        ],\n        century: [\n            85, 83, 87, 82, 77, 65, 67, 72, 75, 76, 82, 87, 91, 93, 94, 90, 84,\n            89, 86, 88, 86, 85, 82, 84, 81, 77, 77, 77, 80, 97, 18, 6, 25, 85,\n            90, 25, 72, 99, 61, 79, 62, 7, 50, 41, 40, 6, 60, 65, 1, 98, 90, 31,\n            57, 74, 50, 57, 68, 20, 12, 16, 33, 1, 32, 53, 76, 57, 89, 33, 48,\n            28, 89, 35, 15, 3, 33, 77, 10, 1, 36, 4, 36, 88, 26, 66, 50, 3, 66,\n            37, 77, 70, 9, 40, 20, 14, 55, 96, 88, 14, 9, 54,\n        ],\n    };\n    /* eslint-enable max-len */\n\n    /* Chart data */\n    private seriesValueFunctions: Record<\n        string,\n        (fs: [number, number, number]) => number\n    > = {\n        "Tex-lab-aus-2621": ([a, b, c]) => a + 0.1 * (b - 30) + (c - 50),\n        "Cz-lab-brn-02": ([a, b, c]) =>\n            a + 0.01 * b * (b - 50) + 20 * Math.cos(c * 0.02 * Math.PI),\n    };\n\n    public getChartData(\n        from: Moment,\n        to: Moment,\n        delayInterval: number = 0\n    ): Observable<Record<string, { x: Moment; y: number }[]>> {\n        const rules = this.seriesValueFunctions;\n        const results: Record<string, { x: moment.Moment; y: number }[]> = {};\n\n        const duration = moment.duration(to.diff(from));\n        const dataInterval =\n            duration.asHours() > 12 ? DataInterval.Hour : DataInterval.Poll;\n\n        for (const seriesId of Object.keys(rules)) {\n            results[seriesId] = this.getData(\n                from,\n                to,\n                rules[seriesId],\n                dataInterval\n            );\n        }\n\n        return of(results).pipe(delay(delayInterval));\n    }\n\n    private getData(\n        start: Moment,\n        end: Moment,\n        valueFn: (fs: [number, number, number]) => number,\n        interval: DataInterval = DataInterval.Poll\n    ): { x: moment.Moment; y: number }[] {\n        const startCorrector = start.minutes() % interval;\n        const currentDate = start\n            .clone()\n            .subtract(startCorrector, "minutes")\n            .seconds(0); // rounds to pollInterval\n        const endCorrector = interval - (end.minutes() % interval);\n        const endDate = end.clone().add(endCorrector, "minutes").seconds(0); // rounds to 5 minutes pollInterval\n        const count = Math.ceil(\n            moment.duration(endDate.diff(currentDate)).asMinutes() / interval\n        );\n        const results = [];\n\n        for (let i = 0; i < count; i++) {\n            const fDay =\n                this.factors.day[\n                    Math.ceil(\n                        (60 * currentDate.hours() + currentDate.minutes()) / 5\n                    )\n                ];\n            const fYear = this.factors.year[currentDate.dayOfYear()];\n            const fCentury = this.factors.century[currentDate.year() % 100];\n            results.push({\n                x: currentDate.clone(),\n                y: valueFn([fCentury, fYear, fDay]),\n            });\n            currentDate.add(interval, "minutes");\n        }\n\n        return results;\n    }\n}\n'},49611:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='<charts-test-harness>\n    <div class="nui-time-frame-bar-test">\n        <div\n            class="m-5"\n            nui-busy\n            [busy]="busy"\n            style="border: 1px solid lightgrey"\n        >\n            <nui-time-frame-bar\n                [timeFrame]="timeFrame"\n                (timeFrameChange)="updateTimeFrame($event)"\n                [historyIndex]="history.index"\n                [minDate]="fromDate"\n                [maxDate]="toDate"\n                (undo)="zoomUndo()"\n                (clear)="updateTimeFrame()"\n                style="display: block; border-bottom: 1px solid lightgrey"\n                class="time-frame-bar"\n            >\n                <nui-icon icon="calendar" class="pr-3"></nui-icon>\n                {{ timeFrame | timeFrame }}\n                <nui-quick-picker timeFrameSelection>\n                    <nui-time-frame-picker></nui-time-frame-picker>\n                </nui-quick-picker>\n            </nui-time-frame-bar>\n            <div class="nui-chart-layout p-3">\n                <div class="axis-label-left nui-text-small">\n                    <strong i18n>Average CPU load (%)</strong>\n                </div>\n                <div class="chart">\n                    <nui-chart class="w-100" [chart]="chart"></nui-chart>\n                </div>\n                <div class="legend">\n                    <nui-legend\n                        seriesUnitLabel="%"\n                        [active]="chartAssist.isLegendActive"\n                        [interactive]="true"\n                        (mouseleave)="chartAssist.resetVisibleSeries()"\n                    >\n                        <nui-legend-series\n                            *ngFor="\n                                let legendSeries of chartAssist.legendSeriesSet;\n                                trackBy: chartAssist.seriesTrackByFn\n                            "\n                            [descriptionPrimary]="legendSeries[\'name\']"\n                            (mouseenter)="\n                                chartAssist.emphasizeSeries(legendSeries.id)\n                            "\n                            [seriesRenderState]="\n                                chartAssist.renderStatesIndex[legendSeries.id]\n                                    ?.state\n                            "\n                            [isSelected]="\n                                !chartAssist.isSeriesHidden(legendSeries.id)\n                            "\n                            (isSelectedChange)="\n                                chartAssist.toggleSeries(\n                                    legendSeries.id,\n                                    $event\n                                )\n                            "\n                        >\n                            <nui-rich-legend-tile\n                                [value]="\n                                    chartAssist.getHighlightedValue(\n                                        legendSeries,\n                                        \'y\'\n                                    )\n                                "\n                                [backgroundColor]="\n                                    chartAssist.palette.standardColors.get(\n                                        legendSeries.id\n                                    )\n                                "\n                                [color]="\n                                    chartAssist.palette.textColors.get(\n                                        legendSeries.id\n                                    )\n                                "\n                            >\n                                <nui-chart-marker\n                                    rightEdge\n                                    [marker]="\n                                        chartAssist.markers.get(legendSeries.id)\n                                    "\n                                    [color]="\n                                        chartAssist.palette.standardColors.get(\n                                            legendSeries.id\n                                        )\n                                    "\n                                >\n                                </nui-chart-marker>\n                            </nui-rich-legend-tile>\n                        </nui-legend-series>\n                    </nui-legend>\n                </div>\n            </div>\n        </div>\n        <div class="p-5">\n            <input\n                id="delay"\n                name="delay"\n                type="checkbox"\n                [checked]="addDelay"\n                (change)="addDelay = !addDelay"\n            />\n            <label for="delay" class="pl-2">Add delay to server requests</label>\n        </div>\n    </div>\n</charts-test-harness>\n'},71677:(a,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>t});const t='// \xa9 2022 SolarWinds Worldwide, LLC. All rights reserved.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the "Software"), to\n//  deal in the Software without restriction, including without limitation the\n//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n//  sell copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport { AfterContentInit, Component, OnDestroy } from "@angular/core";\nimport moment from "moment/moment";\nimport { Subscription } from "rxjs";\n\nimport {\n    HistoryStorage,\n    IFilter,\n    IFilteringOutputs,\n    ITimeframe,\n    NoopDataSourceService,\n} from "@nova-ui/bits";\nimport {\n    Chart,\n    ChartAssist,\n    getAutomaticDomainWithIncludedInterval,\n    ISetDomainEventPayload,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    SET_DOMAIN_EVENT,\n    TimeScale,\n    XYGrid,\n    ZoomPlugin,\n} from "@nova-ui/charts";\n\nimport { TimeFrameBarDataService } from "./time-frame-bar-data.service";\n\n@Component({\n    selector: "nui-time-frame-bar-test",\n    templateUrl: "./time-frame-bar-test.component.html",\n    providers: [NoopDataSourceService, HistoryStorage],\n})\nexport class TimeFrameBarTestComponent implements AfterContentInit, OnDestroy {\n    public fromDate = moment("2018-05-01 15:00:00").subtract(2, "days");\n    public toDate = moment("2018-05-01 15:00:00");\n\n    public chart = new Chart(new XYGrid());\n    public chartAssist: ChartAssist = new ChartAssist(this.chart);\n\n    public timeFrame: ITimeframe;\n    public busy: boolean;\n    public addDelay: boolean = true;\n\n    private xScale = new TimeScale("time-scale");\n    private yScale = new LinearScale();\n    private accessors = new LineAccessors(\n        this.chartAssist.palette.standardColors,\n        this.chartAssist.markers\n    );\n    private renderer = new LineRenderer();\n    private filteringSubscription: Subscription;\n\n    private dataService = new TimeFrameBarDataService();\n\n    constructor(\n        public history: HistoryStorage<ITimeframe>,\n        private dataSourceService: NoopDataSourceService<ITimeframe>\n    ) {}\n\n    public ngAfterContentInit(): void {\n        this.yScale.domainCalculator = getAutomaticDomainWithIncludedInterval([\n            0, 100,\n        ]);\n        this.chart.addPlugins(new ZoomPlugin());\n\n        this.filteringSubscription = this.setUpFiltering();\n\n        this.chart\n            .getEventBus()\n            .getStream(SET_DOMAIN_EVENT)\n            .subscribe((event) => {\n                const payload = <ISetDomainEventPayload>event.data;\n                const newDomain = payload[this.xScale.id];\n\n                this.applyFilters(\n                    this.history.save({\n                        startDatetime: moment(newDomain[0]),\n                        endDatetime: moment(newDomain[1]),\n                        selectedPresetId: undefined,\n                    })\n                );\n            });\n\n        this.applyFilters(\n            this.history.save({\n                startDatetime: this.fromDate,\n                endDatetime: this.toDate,\n                selectedPresetId: undefined,\n            })\n        );\n    }\n\n    public ngOnDestroy(): void {\n        if (this.filteringSubscription) {\n            this.filteringSubscription.unsubscribe();\n        }\n    }\n\n    public updateTimeFrame(value?: ITimeframe): void {\n        this.applyFilters(this.history.restart(value));\n    }\n\n    public zoomUndo(): void {\n        this.applyFilters(this.history.undo());\n    }\n\n    private applyFilters(value: ITimeframe) {\n        this.busy = true;\n        this.timeFrame = value;\n        this.xScale.fixDomain([\n            value.startDatetime.toDate(),\n            value.endDatetime.toDate(),\n        ]);\n        this.chart.updateDimensions();\n        void this.dataSourceService.applyFilters();\n    }\n\n    private setUpFiltering(): any {\n        this.dataSourceService.registerComponent({\n            timeframe: {\n                componentInstance: {\n                    getFilters: () =>\n                        <IFilter<ITimeframe>>{\n                            type: "ITimeframe",\n                            value: this.timeFrame,\n                        },\n                },\n            },\n        });\n\n        return this.dataSourceService.outputsSubject.subscribe(\n            (data: IFilteringOutputs) => {\n                const start = data.timeframe.value.startDatetime;\n                const end = data.timeframe.value.endDatetime;\n                this.dataService\n                    .getChartData(start, end, this.addDelay ? 1000 : 0)\n                    .subscribe((series) => {\n                        this.chartAssist.update(\n                            Object.keys(series).map((key: string) => ({\n                                id: key,\n                                name: key,\n                                data: series[key],\n                                accessors: this.accessors,\n                                renderer: this.renderer,\n                                scales: { x: this.xScale, y: this.yScale },\n                            }))\n                        );\n                        this.busy = false;\n                    });\n            }\n        );\n    }\n}\n'},96301:(a,n,e)=>{"use strict";e.d(n,{Z:()=>t});const t='{\n  "author": "SolarWinds <nova-ui@solarwinds.com>",\n  "contributors": [\n    {\n      "name": "SolarWinds Nova Team"\n    }\n  ],\n  "dependencies": {},\n  "devDependencies": {\n    "@angular-devkit/build-angular": "^15.1.3",\n    "@angular-eslint/builder": "^15.2.0",\n    "@angular-eslint/eslint-plugin": "^15.2.0",\n    "@angular-eslint/eslint-plugin-template": "^15.2.0",\n    "@angular-eslint/schematics": "^15.2.0",\n    "@angular-eslint/template-parser": "^15.2.0",\n    "@angular/animations": "^15.1.3",\n    "@angular/cdk": "^15.1.3",\n    "@angular/cli": "^15.1.3",\n    "@angular/common": "^15.1.3",\n    "@angular/compiler": "^15.1.3",\n    "@angular/compiler-cli": "^15.1.3",\n    "@angular/core": "^15.1.3",\n    "@angular/forms": "^15.1.3",\n    "@angular/localize": "^15.1.3",\n    "@angular/platform-browser": "^15.1.3",\n    "@angular/platform-browser-dynamic": "^15.1.3",\n    "@angular/router": "^15.1.3",\n    "@compodoc/compodoc": "1.1.23",\n    "@percy/cli": "^1.13.0",\n    "@percy/protractor": "^2.0.1",\n    "@types/d3": "^5.7.2",\n    "@types/d3-selection-multi": "^1.0.7",\n    "@types/jasmine": "^4.3.0",\n    "@types/jasminewd2": "^2.0.10",\n    "@types/lodash": "^4.14.188",\n    "@types/node": "^12.11.1",\n    "@typescript-eslint/eslint-plugin": "^5.43.0",\n    "@typescript-eslint/parser": "^5.43.0",\n    "@yarnpkg/lockfile": "^1.1.0",\n    "core-js": "^3.26.0",\n    "d3": "^5.9.2",\n    "d3-color": "3.1.0",\n    "d3-selection-multi": "^1.0.1",\n    "d3-time-format": "2.1.3",\n    "eslint": "^8.28.0",\n    "eslint-import-resolver-typescript": "^3.5.2",\n    "eslint-plugin-import": "2.25.2",\n    "eslint-plugin-jsdoc": "^39.6.2",\n    "eslint-plugin-prefer-arrow": "^1.2.3",\n    "highlight.js": "^11.6.0",\n    "jasmine-core": "~4.0.0",\n    "jasmine-reporters": "^2.5.2",\n    "jasmine-spec-reporter": "^7.0.0",\n    "karma": "^6.4.1",\n    "karma-chrome-launcher": "^3.1.1",\n    "karma-coverage": "^2.2.0",\n    "karma-jasmine": "^5.1.0",\n    "karma-jasmine-html-reporter": "^2.0.0",\n    "karma-spec-reporter": "^0.0.34",\n    "lodash": "^4.17.21",\n    "lz-string": "^1.5.0",\n    "moment": "2.29.4",\n    "moment-timezone": "^0.5.38",\n    "ng-packagr": "^15.0.3",\n    "npm-run-all": "^4.1.5",\n    "prettier": "^2.7.1",\n    "prettier-plugin-sort-json": "^0.0.3",\n    "protractor": "^7.0.0",\n    "raw-loader": "^4.0.2",\n    "rxjs": "^7.8.0",\n    "start-server-and-test": "^1.14.0",\n    "ts-node": "^10.9.1",\n    "tslib": "^2.4.1",\n    "typescript": "~4.9.5",\n    "webpack": "^5.76.0",\n    "zone.js": "~0.11.8"\n  },\n  "exports": {\n    "./sdk/atoms": {\n      "default": "./sdk/atoms/index.js",\n      "types": "./sdk/atmos/index.d.ts"\n    },\n    "./sdk/atoms/*": {\n      "default": "./sdk/atoms/*.js",\n      "types": "./sdk/atoms/*.d.ts"\n    },\n    "./sdk/*": {\n      "default": "./sdk/*"\n    },\n    "./bundles/*": "./bundles/*"\n  },\n  "keywords": [\n    "chart",\n    "nova",\n    "nova-ui",\n    "solarwinds"\n  ],\n  "license": "Apache-2.0",\n  "name": "@nova-ui/charts",\n  "peerDependencies": {\n    "@nova-ui/bits": "~15.0.11",\n    "@types/d3": "^5.0.0",\n    "@types/d3-selection-multi": "^1.0.0",\n    "d3": "^5.0.0",\n    "d3-color": "3.1.0",\n    "d3-selection-multi": "^1.0.0",\n    "d3-time-format": "2.1.3"\n  },\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/solarwinds/nova.git"\n  },\n  "resolutions": {\n    "moment": "2.29.4"\n  },\n  "scripts": {\n    "assemble": "run-s prettier-check lint build-lib:locl build-lib:prod compodoc-custom-theme build-examples:prod",\n    "assemble-dev": "run-s build-lib:prod",\n    "build-examples": "ng build examples",\n    "build-examples:prod": "run-s \\"build-examples -c production\\"",\n    "build-examples:watch": "run-s \\"build-examples -c dev\\"",\n    "build-lib": "ng build lib",\n    "build-lib:locl": "run-s \\"build-lib -c locl\\" i18n-locl-extract",\n    "build-lib:prod": "run-s \\"build-lib -c production\\" dist-copy",\n    "build-lib:watch": "run-s dist-copy \\"build-lib -c dev\\"",\n    "compile-demo-paths": "node ./scripts/compile-demo-paths.js",\n    "compodoc": "compodoc",\n    "compodoc-custom-theme": "compodoc --extTheme docs/styles/",\n    "compodoc:serve": "yarn run compodoc-custom-theme -s -w --port 8070 --includes ./docs/development",\n    "dist-copy": "run-s dist-copy:*",\n    "dist-copy:atoms": "tsc -p spec/tsconfig.atom.json",\n    "dist-copy:css": "ng build --project=generate-css && npx copyfiles -f \\"./.tmp-css/*.{css,svg,woff,woff2}\\" dist/bundles/css/",\n    "dist-copy:less": "npx copyfiles -f \\"src/{nui-charts,nui-charts-*}.less\\" dist/sdk/less",\n    "dist-copy:locl": "npx copyfiles -f sdk/locale/* dist/sdk/locale",\n    "e2e": "start-server-and-test serve-examples:prod 4200 e2e:base",\n    "e2e:base": "ng e2e",\n    "e2e:ci": "ng e2e",\n    "e2e:debug": "yarn run pree2e:base && node --inspect-brk ./node_modules/protractor/bin/protractor",\n    "e2e:full": "yarn run e2e:base -c full",\n    "e2e:gui": "yarn run e2e:base -c gui",\n    "e2e:serve": "yarn run e2e:base -c serve",\n    "e2e:watch": "npx watch \\"yarn run e2e:base\\" src examples spec --watch=1",\n    "i18n-locl-extract": "ng extract-i18n lib --format=xlf --output-path=./sdk/locale/ --out-file=messages.en.xlf",\n    "lint": "ng lint",\n    "lint:fix": "ng lint --fix",\n    "percy": "percy exec -- yarn run visual",\n    "percy:ci": "yarn run visual:ci && percy upload -v _snapshots",\n    "postinstall": "node scripts/remove-deps-constraints.js",\n    "prebuild-examples": "yarn run compile-demo-paths",\n    "pree2e:base": "webdriver-manager update --gecko=false --standalone=false",\n    "prettier": "prettier --config ./.prettierrc.js",\n    "prettier-check": "yarn run prettier --check .",\n    "prettier-fix": "yarn run prettier --write .",\n    "serve-examples": "ng serve examples",\n    "serve-examples:prod": "npx local-web-server -p 4200 -d sdk/api-docs-ng2/examples --spa index.html",\n    "start": "run-p -lr compodoc:serve build-examples:watch",\n    "symlink": "run-s symlink:*",\n    "symlink:bits": "npx rimraf node_modules/@nova-ui/bits && npx symlink-dir ../bits/dist/ node_modules/@nova-ui/bits",\n    "symunlink": "run-s symunlink:*",\n    "symunlink:bits": "npx rimraf node_modules/@nova-ui/bits && yarn --check",\n    "test": "ng test lib -c coverage",\n    "test:dev": "ng test",\n    "visual": "npx start-server-and-test serve-examples:prod 4200 visual:base",\n    "visual:base": "yarn run e2e:base --suite visual",\n    "visual:ci": "yarn run e2e:ci --suite visual",\n    "visual:full": "yarn run visual:base -c full",\n    "visual:gui": "yarn run visual:base -c gui",\n    "visual:serve": "yarn run visual:base -c serve"\n  },\n  "version": "15.0.12"\n}\n'}}]);