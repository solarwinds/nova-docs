{"version":3,"sources":["webpack:///examples/components/demo/development/spark/spark-prototype/spark-prototype.component.ts","webpack:///examples/components/demo/development/spark/spark-prototype/spark-prototype.component.html","webpack:///examples/components/demo/development/spark/spark-prototype.module.ts","webpack:///examples/components/demo/development/spark/spark-prototype/spark-prototype.component.less"],"names":["SparkPrototypeComponent","colorPalette","markers","sparkXScale","sparkLineRenderer","formatters","tick","value","Math","round","toString","chartAssist","update","updateSparks","generateSparkSeriesSet","floor","random","numSparks","sparks","accessors","standardColors","i","sparkYScale","v","Number","toPrecision","sparkScales","x","y","push","id","chartSeriesSet","name","data","mockLineData","scales","renderer","selector","template","routes","path","component","SparkPrototypeModule","declarations","imports","forChild"],"mappings":"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","file":"spark-spark-prototype-module-es5.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n    ChartPalette, CHART_MARKERS, CHART_PALETTE_CS1, IChartPalette, ILineAccessors, ISpark, LineAccessors, LinearScale, LineRenderer,\n    SequentialChartMarkerProvider, SparkChartAssist\n} from \"@nova-ui/charts\";\n\nimport { DataGenerator } from \"../../../../../data-generator\";\n\n/**\n * This is here just to test a prototype of an angular component that will use Nova Charts\n */\n@Component({\n    selector: \"nui-spark-prototype\",\n    templateUrl: \"./spark-prototype.component.html\",\n    styleUrls: [\"./spark-prototype.component.less\"],\n})\nexport class SparkPrototypeComponent implements OnInit {\n    public chartAssist: SparkChartAssist;\n    public colorPalette: IChartPalette = new ChartPalette(CHART_PALETTE_CS1);\n    public markers = new SequentialChartMarkerProvider(CHART_MARKERS);\n\n    private sparkLineRenderer: LineRenderer;\n    private sparkXScale = new LinearScale();\n\n    public ngOnInit() {\n        this.sparkLineRenderer = new LineRenderer();\n\n        this.sparkXScale.formatters.tick = (value: any) => Math.round(value).toString();\n        this.chartAssist = new SparkChartAssist();\n\n        this.update();\n    }\n\n    public update() {\n        this.chartAssist.updateSparks(this.generateSparkSeriesSet(Math.floor(Math.random() * 6 + 1)));\n    }\n\n    private generateSparkSeriesSet(numSparks: number): ISpark<ILineAccessors>[] {\n        const sparks: ISpark<ILineAccessors>[] = [];\n        const accessors = new LineAccessors(this.colorPalette.standardColors, this.markers);\n\n        for (let i = 0; i < numSparks; ++i) {\n            const sparkYScale = new LinearScale();\n            sparkYScale.formatters.value = v => (Number(v).toPrecision(4));\n            const sparkScales = {\n                x: this.sparkXScale,\n                y: sparkYScale,\n            };\n\n            sparks.push({\n                id: `${i}`,\n                chartSeriesSet: [\n                    {\n                        id: `spark-series-${i + 1}`,\n                        name: `Spark Series ${i + 1}`,\n                        accessors,\n                        data: DataGenerator.mockLineData(10),\n                        scales: sparkScales,\n                        renderer: this.sparkLineRenderer,\n                    },\n                    {\n                        id: `spark-series-${i + 1}-b`,\n                        name: `Spark Series ${i + 1}-b`,\n                        accessors,\n                        data: DataGenerator.mockLineData(10),\n                        scales: sparkScales,\n                        renderer: this.sparkLineRenderer,\n                    },\n                ],\n            });\n        }\n\n        return sparks;\n    }\n\n}\n","export default \"<button nui-button\\n        (click)=\\\"update()\\\"\\n        type=\\\"button\\\">Refresh\\n</button>\\n<div class=\\\"spark-container mt-5 p-3\\\">\\n    <div *ngFor=\\\"let spark of chartAssist.sparks; trackBy: chartAssist.trackByFn\\\">\\n        <div class=\\\"d-flex\\\">\\n            <nui-chart class=\\\"w-100\\\" [chart]=\\\"spark.chart\\\" nuiChartCollectionId=\\\"1\\\"></nui-chart>\\n            <div class=\\\"d-flex flex-column pl-2\\\">\\n                <nui-legend-series [interactive]=\\\"false\\\"\\n                                   [active]=\\\"chartAssist.isLegendActive\\\"\\n                                   [descriptionPrimary]=\\\"spark.chartSeriesSet[0].name\\\">\\n                    <nui-rich-legend-tile unitLabel=\\\"sec\\\"\\n                                          [value]=\\\"chartAssist.getHighlightedValue(spark.chartSeriesSet[0], 'y', 'value')\\\"\\n                                          [backgroundColor]=\\\"colorPalette.standardColors.get(spark.chartSeriesSet[0].id)\\\"\\n                                          [color]=\\\"colorPalette.textColors.get(spark.chartSeriesSet[0].id)\\\">\\n                        <nui-chart-marker [marker]=\\\"markers.get(spark.chartSeriesSet[0].id)\\\"\\n                                          [color]=\\\"colorPalette.standardColors.get(spark.chartSeriesSet[0].id)\\\"\\n                                          rightEdge>\\n                        </nui-chart-marker>\\n                    </nui-rich-legend-tile>\\n                </nui-legend-series>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiButtonModule, NuiIconModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { SparkPrototypeComponent } from \"./spark-prototype/spark-prototype.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: SparkPrototypeComponent,\n        data: {\n            \"srlc\": {\n                \"hideIndicator\": true,\n            },\n        },\n    },\n];\n\n@NgModule({\n    declarations: [\n        SparkPrototypeComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiButtonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport class SparkPrototypeModule {\n}\n","export default \".spark-container {\\n  width: 500px;\\n  box-shadow: 2px 2px 10px -2px black;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwYXJrLXByb3RvdHlwZS5jb21wb25lbnQubGVzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSTtFQUNJLFlBQUE7RUFDQSxtQ0FBQTtBQUFSIiwiZmlsZSI6InNwYXJrLXByb3RvdHlwZS5jb21wb25lbnQubGVzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zcGFyayB7XG4gICAgJi1jb250YWluZXIge1xuICAgICAgICB3aWR0aDogNTAwcHg7XG4gICAgICAgIGJveC1zaGFkb3c6IDJweCAycHggMTBweCAtMnB4IGJsYWNrO1xuICAgIH1cbn1cbiJdfQ== */\";"]}