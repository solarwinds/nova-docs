{"version":3,"sources":["webpack:///examples/components/demo/development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.ts","webpack:///examples/components/demo/development/type-switch/one-dimensional-data-example/one-dimensional-data.example.component.html","webpack:///examples/components/demo/development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.ts","webpack:///examples/components/demo/development/type-switch/type-switch-example.module.ts","webpack:///examples/components/demo/development/type-switch/two-dimensional-data-example/two-dimensional-data.example.component.html"],"names":["OneDimensionalDataExampleComponent","chartTypes","chartType","categories","iconNames","values","iconMap","map","n","colorProvider","updateChartType","buildChart","chartAssist","chart","updateDimensions","updateChart","donutContentPlugin","undefined","horizontal","addPlugin","accessors","getAccessors","renderer","getRenderer","scales","getScales","Error","update","getChartAssistSeries","bandScale","linearScale","domainCalculator","x","y","series","color","get","category","i","value","id","data","selector","template","ChartType","TwoDimensionalDataExampleComponent","StackedBar","GroupedBar","Line","mainCategoryOptions","mainCategory","statuses","quarters","updateMainCategory","statusPalette","standardPalette","groupByQuarter","subCategories","valueAccessor","j","palette","getChartAttributes","grid","preprocessor","seriesProcessor","buildChartSeries","subCategory","name","xCategory","t","getChartTools","result","gridFunction","accessorFunction","rendererFunction","scaleFunction","chartTools","highlightStrategy","standardColors","grouped","dataSeries","d","fixDomain","routes","path","component","TypeSwitchExampleModule","declarations","imports","forChild"],"mappings":"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","file":"type-switch-type-switch-example-module-es5.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale, barGrid, BarRenderer, Chart, ChartAssist, ChartDonutContentPlugin, CHART_PALETTE_CS_S, getAutomaticDomainWithIncludedInterval,\n    HorizontalBarAccessors, IAccessors, IScale, LinearScale, MappedValueProvider, PieRenderer, radial, RadialAccessors, radialGrid, RadialRenderer,\n    radialScales, Renderer, Scales, VerticalBarAccessors,\n} from \"@nova-ui/charts\";\nimport zipObject from \"lodash/zipObject\";\n\n@Component({\n    selector: \"nui-chart-one-dimensional-data-example\",\n    templateUrl: \"./one-dimensional-data.example.component.html\",\n})\nexport class OneDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = [\"horizontal bar\", \"vertical bar\", \"pie\", \"donut\"];\n    public chartType = this.chartTypes[0];\n    public categories = [\"down\", \"critical\", \"warning\", \"unknown\", \"ok\", \"other\"];\n    public iconNames = [\"down\", \"critical\", \"warning\", \"unknown\", \"up\", \"unmanaged\"];\n    public values = [24, 16, 7, 6, 97, 4];\n    public iconMap = zipObject(this.categories, this.iconNames.map(n => `status_${n}`));\n    private colorProvider = new MappedValueProvider<string>(zipObject(this.categories, CHART_PALETTE_CS_S));\n\n    public chartAssist: ChartAssist;\n    public donutContentPlugin?: ChartDonutContentPlugin;\n\n    public ngOnInit() {\n        this.updateChartType();\n    }\n\n    public updateChartType() {\n        this.buildChart();\n        this.chartAssist.chart.updateDimensions();\n\n        this.updateChart();\n    }\n\n    private buildChart() {\n        this.donutContentPlugin = undefined;\n\n        switch (this.chartType) {\n            case \"horizontal bar\": {\n                this.chartAssist = new ChartAssist(new Chart(barGrid({ horizontal: true })));\n                break;\n            }\n            case \"vertical bar\": {\n                this.chartAssist = new ChartAssist(new Chart(barGrid({ horizontal: false })));\n                break;\n            }\n            case \"pie\": {\n                this.chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n                break;\n            }\n            case \"donut\": {\n                this.donutContentPlugin = new ChartDonutContentPlugin();\n                this.chartAssist = new ChartAssist(new Chart(radialGrid()), radial);\n                this.chartAssist.chart.addPlugin(this.donutContentPlugin);\n                break;\n            }\n        }\n    }\n\n    private getRenderer(): PieRenderer | BarRenderer | RadialRenderer | undefined {\n        switch (this.chartType) {\n            case \"horizontal bar\":\n            case \"vertical bar\": {\n                return new BarRenderer();\n            }\n            case \"pie\": {\n                return new PieRenderer();\n            }\n            case \"donut\": {\n                return new RadialRenderer();\n            }\n        }\n    }\n\n    private updateChart() {\n        const accessors: IAccessors<any> | undefined = this.getAccessors();\n        const renderer: PieRenderer | BarRenderer | RadialRenderer | undefined = this.getRenderer();\n        const scales: Record<string, IScale<any>> | undefined = this.getScales();\n        if (!accessors || !renderer || !scales) {\n            throw new Error(\"Accessors, renderer or scales are unavailable\");\n        }\n        this.chartAssist.update(this.getChartAssistSeries(\n            this.categories,\n            this.values,\n            accessors,\n            renderer,\n            scales\n        ));\n    }\n\n    private getScales(): Record<string, IScale<any>> | undefined {\n        const bandScale = new BandScale();\n        const linearScale = new LinearScale();\n        linearScale.domainCalculator = getAutomaticDomainWithIncludedInterval([0, 0]);\n\n        switch (this.chartType) {\n            case \"horizontal bar\":\n                return {\n                    x: linearScale,\n                    y: bandScale,\n                };\n            case \"vertical bar\":\n                return {\n                    x: bandScale,\n                    y: linearScale,\n                };\n            case \"pie\":\n            case \"donut\": {\n                return radialScales();\n            }\n        }\n    }\n\n    private getAccessors(): IAccessors | undefined {\n        switch (this.chartType) {\n            case \"horizontal bar\":\n                return new HorizontalBarAccessors(this.colorProvider);\n            case \"vertical bar\": {\n                return new VerticalBarAccessors(this.colorProvider);\n            }\n            case \"pie\":\n            case \"donut\": {\n                const accessors = new RadialAccessors();\n                accessors.series.color = this.colorProvider.get;\n                return accessors;\n            }\n        }\n        return;\n    }\n\n    private getChartAssistSeries(categories: string[], values: number[], accessors: IAccessors, renderer: Renderer<IAccessors>, scales: Scales) {\n        return categories.map((category, i) => {\n            const value = values[i] || 0;\n            return {\n                id: category,\n                data: [{ category, value }],\n                accessors,\n                renderer,\n                scales,\n            };\n        });\n    }\n\n}\n","export default \"<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\" style=\\\"position: relative;\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chartAssist.chart\\\"></nui-chart>\\n        <ng-container *ngIf=\\\"donutContentPlugin\\\">\\n            <nui-chart-donut-content [plugin]=\\\"donutContentPlugin\\\">\\n                <div class=\\\"nui-text-page\\\">57</div>\\n                <div class=\\\"nui-text-secondary\\\">donuts</div>\\n            </nui-chart-donut-content>\\n        </ng-container>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"false\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               descriptionPrimary=\\\"{{legendSeries.id | titlecase}}\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"legendSeries.data[0]?.value\\\"\\n                                      backgroundColor=\\\"transparent\\\">\\n                </nui-rich-legend-tile>\\n                <nui-icon [icon]=\\\"iconMap[legendSeries.id]\\\"></nui-icon>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n    <div class=\\\"legend-bottom\\\">\\n        <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                         [(value)]=\\\"chartType\\\"\\n                         (valueChange)=\\\"updateChartType()\\\">\\n            <nui-radio *ngFor=\\\"let type of chartTypes\\\"\\n                       [value]=\\\"type\\\">\\n                {{type | titlecase}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </div>\\n</div>\\n\\n\";","import { Component, OnInit } from \"@angular/core\";\nimport {\n    BandScale,\n    barAccessors,\n    barGrid,\n    BarHighlightStrategy,\n    BarRenderer,\n    barScales,\n    Chart,\n    ChartAssist,\n    ChartPalette,\n    CHART_PALETTE_CS1,\n    CHART_PALETTE_CS_S,\n    IAccessors,\n    IBarAccessors,\n    IChartAssistSeries,\n    IChartMarker,\n    IChartSeries,\n    IGrid,\n    InteractionLabelPlugin,\n    IValueProvider,\n    LineAccessors,\n    LinearScale,\n    LineRenderer,\n    MappedValueProvider,\n    Renderer,\n    Scales,\n    stack,\n    XYGrid,\n} from \"@nova-ui/charts\";\nimport zipObject from \"lodash/zipObject\";\n\nenum ChartType {\n    StackedBar = \"stacked bar\",\n    GroupedBar = \"grouped bar\",\n    Line = \"line\",\n}\n\ntype PreprocessorType<T> = (this: ChartAssist, series: IChartAssistSeries<T>[]) => IChartAssistSeries<T>[];\n\ninterface IChartTools<T = IAccessors> {\n    preprocessor?: PreprocessorType<T>;\n    gridFunction: () => IGrid;\n    rendererFunction: () => Renderer<IAccessors>;\n    accessorFunction: (colors?: IValueProvider<string>, markers?: IValueProvider<IChartMarker>) => IAccessors;\n    scaleFunction: () => Scales;\n}\n\nexport interface IChartAttributes<T = IAccessors> {\n    grid: IGrid;\n    accessors: IAccessors;\n    renderer: Renderer<IAccessors>;\n    scales: Scales;\n    preprocessor?: PreprocessorType<T>;\n}\n\n@Component({\n    selector: \"nui-chart-two-dimensional-data-example\",\n    templateUrl: \"./two-dimensional-data.example.component.html\",\n})\nexport class TwoDimensionalDataExampleComponent implements OnInit {\n    public chartTypes = [ChartType.StackedBar, ChartType.GroupedBar, ChartType.Line];\n    public chartType = this.chartTypes[0];\n    public mainCategoryOptions = [\"quarters\", \"statuses\"];\n    public mainCategory = this.mainCategoryOptions[0];\n    public statuses = [\"down\", \"critical\", \"warning\", \"unknown\", \"ok\", \"other\"];\n    public quarters = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"];\n    public iconNames = [\"down\", \"critical\", \"warning\", \"unknown\", \"up\", \"unmanaged\"];\n    public categories: string[];\n    public subCategories: string[];\n    public values = [\n        [24, 16, 7, 6, 97, 4],\n        [13, 8, 5, 17, 5, 25],\n        [97, 41, 24, 6, 7, 6],\n        [45, 87, 23, 48, 24, 9],\n    ];\n    public valueAccessor: (i: number, j: number) => number;\n\n    public iconMap = zipObject(this.statuses, this.iconNames.map(n => `status_${n}`));\n    public palette: ChartPalette;\n    public chartAssist: ChartAssist;\n    public accessors: IAccessors;\n\n    private renderer: Renderer<IAccessors>;\n    private scales: Scales;\n\n    public ngOnInit() {\n        this.updateMainCategory();\n    }\n\n    public updateMainCategory() {\n        const statusPalette = new ChartPalette(new MappedValueProvider<string>(zipObject(this.statuses, CHART_PALETTE_CS_S)));\n        const standardPalette = new ChartPalette(CHART_PALETTE_CS1);\n\n        const groupByQuarter = this.mainCategory === this.mainCategoryOptions[0];\n\n        this.categories = groupByQuarter ? this.statuses : this.quarters;\n        this.subCategories = groupByQuarter ? this.quarters : this.statuses;\n        this.valueAccessor = groupByQuarter ? (i, j) => this.values[i][j] : (i, j) => this.values[j][i];\n        this.palette = groupByQuarter ? standardPalette : statusPalette;\n\n        this.updateChartType();\n    }\n\n    public updateChartType() {\n        this.buildChart();\n        this.updateChart();\n    }\n\n    private buildChart() {\n        const {grid, accessors, renderer, scales, preprocessor} = this.getChartAttributes(this.chartType);\n\n        this.renderer = renderer;\n        this.accessors = accessors;\n        this.scales = scales;\n\n        const chart = new Chart(grid);\n        chart.addPlugin(new InteractionLabelPlugin());\n\n        this.chartAssist = new ChartAssist(chart, preprocessor, this.palette);\n\n        if (this.chartType === ChartType.StackedBar) {\n            this.chartAssist.seriesProcessor = stack;\n        }\n    }\n\n    private updateChart() {\n        this.chartAssist.update(this.buildChartSeries(this.categories, this.subCategories, this.valueAccessor));\n    }\n\n    private buildChartSeries(categories: string[], subCategories: string[], valueAccessor: (i: number, j: number) => number): IChartSeries<IAccessors>[] {\n        return subCategories.map((subCategory, i) => ({\n            id: subCategory,\n            name: subCategory,\n            data: categories.map((xCategory, j) => ({category: xCategory, value: valueAccessor(i, j) || 0})),\n            accessors: this.accessors,\n            renderer: this.renderer,\n            scales: this.scales,\n        }));\n    }\n\n    private getChartAttributes(chartType: ChartType): IChartAttributes<IBarAccessors> {\n        const t: IChartTools<IBarAccessors> = this.getChartTools(chartType);\n        const result: IChartAttributes<IBarAccessors> = {\n            grid: t.gridFunction(),\n            accessors: t.accessorFunction(),\n            renderer: t.rendererFunction(),\n            scales: t.scaleFunction(),\n        };\n\n        if (t.preprocessor) {\n            result.preprocessor = t.preprocessor as PreprocessorType<IBarAccessors>;\n        }\n        return result;\n    }\n\n    private getChartTools(chartType: ChartType): IChartTools<IBarAccessors> {\n        const chartTools: Record<ChartType, IChartTools<IBarAccessors>> = {\n            [ChartType.StackedBar]: {\n                preprocessor: stack,\n                gridFunction: barGrid,\n                rendererFunction: () => new BarRenderer({highlightStrategy: new BarHighlightStrategy(\"x\")}),\n                accessorFunction: () => barAccessors(undefined, this.palette.standardColors),\n                scaleFunction: barScales,\n            },\n            [ChartType.GroupedBar]: {\n                gridFunction: () => barGrid({grouped: true}),\n                rendererFunction: () => new BarRenderer({highlightStrategy: new BarHighlightStrategy(\"x\")}),\n                accessorFunction: () => {\n                    const accessors = barAccessors({grouped: true}, this.palette.standardColors);\n                    accessors.data.category = (data, i, series, dataSeries) => [data.category, dataSeries.name];\n                    return accessors;\n                },\n                scaleFunction: () => barScales({grouped: true}),\n            },\n            [ChartType.Line]: {\n                gridFunction: () => new XYGrid(),\n                rendererFunction: () => new LineRenderer(),\n                accessorFunction: () => {\n                    const accessors = new LineAccessors(this.palette.standardColors);\n                    accessors.data.x = d => d.category;\n                    accessors.data.y = d => d.value;\n                    accessors.data.value = d => d.value;\n                    return accessors;\n                },\n                scaleFunction: () => ({\n                    x: new BandScale().fixDomain(this.categories),\n                    y: new LinearScale(),\n                }),\n            },\n        };\n\n        return chartTools[chartType];\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { NuiIconModule, NuiRadioModule } from \"@nova-ui/bits\";\nimport { NuiChartsModule } from \"@nova-ui/charts\";\n\nimport { DemoCommonModule } from \"../../common/demo-common.module\";\n\nimport { OneDimensionalDataExampleComponent } from \"./one-dimensional-data-example/one-dimensional-data.example.component\";\nimport { TwoDimensionalDataExampleComponent } from \"./two-dimensional-data-example/two-dimensional-data.example.component\";\n\nconst routes: Routes = [\n    {\n        path: \"1d\",\n        component: OneDimensionalDataExampleComponent,\n    },\n    {\n        path: \"2d\",\n        component: TwoDimensionalDataExampleComponent,\n    },\n];\n\n@NgModule({\n    declarations: [\n        OneDimensionalDataExampleComponent,\n        TwoDimensionalDataExampleComponent,\n    ],\n    imports: [\n        DemoCommonModule,\n        NuiChartsModule,\n        NuiIconModule,\n        NuiRadioModule,\n        RouterModule.forChild(routes),\n    ],\n})\nexport class TypeSwitchExampleModule {\n}\n","export default \"<h3>\\n    Legend by\\n    <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                     [(value)]=\\\"mainCategory\\\"\\n                     (valueChange)=\\\"updateMainCategory()\\\">\\n        <nui-radio *ngFor=\\\"let category of mainCategoryOptions\\\"\\n                   [value]=\\\"category\\\">\\n            {{category | titlecase}}\\n        </nui-radio>\\n    </nui-radio-group>\\n</h3>\\n<div class=\\\"nui-chart-layout\\\">\\n    <div class=\\\"chart\\\">\\n        <nui-chart class=\\\"w-100\\\" [chart]=\\\"chartAssist.chart\\\"></nui-chart>\\n    </div>\\n    <div class=\\\"legend\\\">\\n        <nui-legend [active]=\\\"chartAssist.isLegendActive\\\"\\n                    [interactive]=\\\"false\\\"\\n                    (mouseleave)=\\\"chartAssist.resetVisibleSeries()\\\">\\n            <nui-legend-series *ngFor=\\\"let legendSeries of chartAssist.legendSeriesSet; trackBy: chartAssist.seriesTrackByFn\\\"\\n                               descriptionPrimary=\\\"{{legendSeries.id | titlecase}}\\\"\\n                               [seriesRenderState]=\\\"chartAssist.renderStatesIndex[legendSeries.id]?.state\\\"\\n                               (mouseenter)=\\\"chartAssist.emphasizeSeries(legendSeries.id)\\\"\\n                               [isSelected]=\\\"!chartAssist.isSeriesHidden(legendSeries.id)\\\"\\n                               (isSelectedChange)=\\\"chartAssist.toggleSeries(legendSeries.id, $event)\\\">\\n                <nui-rich-legend-tile [value]=\\\"accessors.data['value'](legendSeries.data[0], 0, null, null)\\\"\\n                                      [backgroundColor]=\\\"chartAssist.palette.standardColors.get(legendSeries.id)\\\"\\n                                      [color]=\\\"chartAssist.palette.textColors.get(legendSeries.id)\\\">\\n                </nui-rich-legend-tile>\\n                <nui-icon [icon]=\\\"iconMap[legendSeries.id]\\\" *ngIf=\\\"iconMap[legendSeries.id]\\\" class=\\\"mt-1 ml-3\\\"></nui-icon>\\n            </nui-legend-series>\\n        </nui-legend>\\n    </div>\\n    <div class=\\\"legend-bottom\\\">\\n        <nui-radio-group class=\\\"nui-radio-group-inline\\\"\\n                         [(value)]=\\\"chartType\\\"\\n                         (valueChange)=\\\"updateChartType()\\\">\\n            <nui-radio *ngFor=\\\"let type of chartTypes\\\"\\n                       [value]=\\\"type\\\">\\n                {{type | titlecase}}\\n            </nui-radio>\\n        </nui-radio-group>\\n    </div>\\n</div>\\n\";"]}